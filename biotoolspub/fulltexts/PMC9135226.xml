<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 39.96?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?subarticle pone.0268910.r001?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PLoS One</journal-id>
    <journal-id journal-id-type="iso-abbrev">PLoS One</journal-id>
    <journal-id journal-id-type="publisher-id">plos</journal-id>
    <journal-title-group>
      <journal-title>PLoS ONE</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1932-6203</issn>
    <publisher>
      <publisher-name>Public Library of Science</publisher-name>
      <publisher-loc>San Francisco, CA USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9135226</article-id>
    <article-id pub-id-type="publisher-id">PONE-D-21-34058</article-id>
    <article-id pub-id-type="doi">10.1371/journal.pone.0268910</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Programming Languages</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Engineering and Technology</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Programming Languages</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Parsers</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Engineering and Technology</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Parsers</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Computer Software</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Engineering and Technology</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Computer Software</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Research and Analysis Methods</subject>
        <subj-group>
          <subject>Database and Informatics Methods</subject>
          <subj-group>
            <subject>Bioinformatics</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Computer and Information Sciences</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Software Tools</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Engineering and Technology</subject>
        <subj-group>
          <subject>Software Engineering</subject>
          <subj-group>
            <subject>Software Tools</subject>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Computational Biology</subject>
          <subj-group>
            <subject>Genome Analysis</subject>
            <subj-group>
              <subject>Genome Annotation</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Biology and Life Sciences</subject>
        <subj-group>
          <subject>Genetics</subject>
          <subj-group>
            <subject>Genomics</subject>
            <subj-group>
              <subject>Genome Analysis</subject>
              <subj-group>
                <subject>Genome Annotation</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Research and Analysis Methods</subject>
        <subj-group>
          <subject>Database and Informatics Methods</subject>
          <subj-group>
            <subject>Biological Databases</subject>
            <subj-group>
              <subject>Sequence Databases</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Research and Analysis Methods</subject>
        <subj-group>
          <subject>Database and Informatics Methods</subject>
          <subj-group>
            <subject>Bioinformatics</subject>
            <subj-group>
              <subject>Sequence Analysis</subject>
              <subj-group>
                <subject>Sequence Databases</subject>
              </subj-group>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="Discipline-v3">
        <subject>Social Sciences</subject>
        <subj-group>
          <subject>Linguistics</subject>
          <subj-group>
            <subject>Grammar</subject>
            <subj-group>
              <subject>Syntax</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>TextFormats: Simplifying the definition and parsing of text formats in bioinformatics</article-title>
      <alt-title alt-title-type="running-head">TextFormats: Simple definition and parsing of text formats</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0003-3900-5397</contrib-id>
        <name>
          <surname>Gonnella</surname>
          <given-names>Giorgio</given-names>
        </name>
        <role content-type="http://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
        <role content-type="http://credit.niso.org/contributor-roles/funding-acquisition/">Funding acquisition</role>
        <role content-type="http://credit.niso.org/contributor-roles/investigation/">Investigation</role>
        <role content-type="http://credit.niso.org/contributor-roles/project-administration/">Project administration</role>
        <role content-type="http://credit.niso.org/contributor-roles/software/">Software</role>
        <role content-type="http://credit.niso.org/contributor-roles/supervision/">Supervision</role>
        <role content-type="http://credit.niso.org/contributor-roles/writing-original-draft/">Writing – original draft</role>
        <xref rid="aff001" ref-type="aff"/>
        <xref rid="cor001" ref-type="corresp">*</xref>
      </contrib>
    </contrib-group>
    <aff id="aff001">
      <addr-line>Department of Bioinformatics, Institute of Microbiology and Genetics (IMG), University of Göttingen, Göttingen, Germany</addr-line>
    </aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Rahman</surname>
          <given-names>M. Sohel</given-names>
        </name>
        <role>Editor</role>
        <xref rid="edit1" ref-type="aff"/>
      </contrib>
    </contrib-group>
    <aff id="edit1">
      <addr-line>Bangladesh University of Engineering and Technology, BANGLADESH</addr-line>
    </aff>
    <author-notes>
      <fn fn-type="COI-statement" id="coi001">
        <p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p>
      </fn>
      <corresp id="cor001">* E-mail: <email>giorgio.gonnella@uni-goettingen.de</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>26</day>
      <month>5</month>
      <year>2022</year>
    </pub-date>
    <volume>17</volume>
    <issue>5</issue>
    <elocation-id>e0268910</elocation-id>
    <history>
      <date date-type="received">
        <day>25</day>
        <month>10</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>5</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2022 Giorgio Gonnella</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>Giorgio Gonnella</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="pone.0268910.pdf"/>
    <abstract>
      <p>Text formats are common in bioinformatics, as they allow for editing and filtering using standard tools, as well as, since text formats are often human readable, manual inspection and evaluation of the data. Bioinformatics is a rapidly evolving field, hence, new techniques, new software tools, new kinds of data often require the definition of new formats. Often new formats are not formally described in a standard or specification document. Although software libraries are available for accessing the most common formats, writing parsers for text formats, for which no library is currently available, is a very common though tedious task, utilized by many researchers in the field. This manuscript presents the open source software library and toolset <italic toggle="yes">TextFormats</italic> (available at <ext-link xlink:href="https://github.com/ggonnella/textformats" ext-link-type="uri">https://github.com/ggonnella/textformats</ext-link>), which aims at simplifying the definition and parsing of text formats. Formats specifications are written in a simple data description format using an interactive wizard. Automatic generation of data examples and automatic testing of specifications allow for checking for correctness. Given the specification for a text format, <italic toggle="yes">TextFormats</italic> allows parsing and writing data in that format, using several programming languages (Nim, Python, C/C++) or the provided command line and graphical user interface tools. Although designed as a general purpose software, the main target application field, for the above mentioned reasons, is expected to be in bioinformatics: Thus, the specifications of several common existing bioinformatics formats are included.</p>
    </abstract>
    <funding-group>
      <award-group id="award001">
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100001659</institution-id>
            <institution>Deutsche Forschungsgemeinschaft</institution>
          </institution-wrap>
        </funding-source>
        <award-id>GO 3192/1-1</award-id>
        <principal-award-recipient>
          <contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0003-3900-5397</contrib-id>
          <name>
            <surname>Gonnella</surname>
            <given-names>Giorgio</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
      <funding-statement>Giorgio Gonnella has been supported by the DFG Grant GO 3192/1-1 ‘`Automated characterization of microbial genomes and metagenomes by collection and verification of association rules’’. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
    </funding-group>
    <counts>
      <fig-count count="1"/>
      <table-count count="6"/>
      <page-count count="17"/>
    </counts>
    <custom-meta-group>
      <custom-meta id="data-availability">
        <meta-name>Data Availability</meta-name>
        <meta-value>The TextFormats source code is available at the GitHub repository <ext-link xlink:href="https://github.com/ggonnella/textformats" ext-link-type="uri">https://github.com/ggonnella/textformats</ext-link>.</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
  <notes>
    <title>Data Availability</title>
    <p>The TextFormats source code is available at the GitHub repository <ext-link xlink:href="https://github.com/ggonnella/textformats" ext-link-type="uri">https://github.com/ggonnella/textformats</ext-link>.</p>
  </notes>
</front>
<body>
  <sec sec-type="intro" id="sec001">
    <title>Introduction</title>
    <p>Bioinformatics employs a multiplicity of data and file formats [<xref rid="pone.0268910.ref001" ref-type="bibr">1</xref>–<xref rid="pone.0268910.ref003" ref-type="bibr">3</xref>]. In many cases, these are text formats, or binary formats which can be easily converted to text representations for visualization and editing.</p>
    <p>In a text format, information is represented by letters, numbers and symbols, each coded by a single byte or a small number of bytes using a general-purpose convention. Text representation codes are defined in standards, such as ASCII [<xref rid="pone.0268910.ref004" ref-type="bibr">4</xref>] and Unicode [<xref rid="pone.0268910.ref005" ref-type="bibr">5</xref>]. Conversely, binary representations use data sizes, order of the information and coding conventions, which are all specific to the type of data, to the application and often to technical details, such as the operating system and processor architecture [<xref rid="pone.0268910.ref006" ref-type="bibr">6</xref>].</p>
    <p>Binary formats have some advantages: Since they are often similar to, or even directly reflect, the content of the working memory of the program, they are more efficient in terms of data access speed. Furthermore, binary formats require often less space than uncompressed text formats, since the information can be efficiently packed using representations tailored to the type of data.</p>
    <p>Nevertheless, text formats remain very common and new formats are often defined in this form. Some features explain their popularity. First, the information in text formats can be accessed and often manually read or edited, without the need for the original software which produced the file. Text formats are accessible on different computer systems regardless of register size (e.g. 32 bit vs 64 bit) and byte order convention (little or big endianness); sometimes minor differences do exist, such as different newline conventions in different operating systems, but these are easily resolved, since they are often automatically handled by standard tools and functions. Finally, the data in text formats can often be examined, filtered and modified using a large number of standard command line tools (such as the Posix tools <monospace>sort</monospace>, <monospace>uniq</monospace>, <monospace>head</monospace>, <monospace>tail</monospace>, <monospace>cut</monospace>) or short scripts.</p>
    <p>General purpose standards exist for representing information as text, such as XML, YAML and JSON. However, their adoption in bioinformatics is limited, likely because formats based on these standards are rather verbose and less human readable, due to their complex formatting and nested structure. Since they are not line-oriented, command line tools such as the one mentioned above, cannot be generally applied to these formats.</p>
    <p>In recent years, community efforts have been made to define standard text formats for common types of data, such as GFA [<xref rid="pone.0268910.ref007" ref-type="bibr">7</xref>]. A goal of these is to avoid a further proliferation of formats. However, this is not easy to achieve in an open community of researchers. In the case of GFA, four variants currently exist (GFA1 [<xref rid="pone.0268910.ref008" ref-type="bibr">8</xref>], GFA1.1 [<xref rid="pone.0268910.ref008" ref-type="bibr">8</xref>], GFA2 [<xref rid="pone.0268910.ref009" ref-type="bibr">9</xref>], rGFA [<xref rid="pone.0268910.ref010" ref-type="bibr">10</xref>]) as a result of disagreements among researchers and the need to make the format particularly suitable to different applications. This case exemplifies the mechanisms by which new formats are often defined.</p>
    <p>When a new software tool defines a new output format, the developer does not always provide a parser for the format, but often only a written documentation text. Formal grammars could be a solution to this problem by allowing the automatic generation of a parser with tools such as <monospace>yacc</monospace> or <monospace>bison</monospace>. However, they are challenging to write and rarely used in bioinformatics. Software libraries eventually become available for accessing new formats once they become popular. However, this process can take time, and parsers for less common formats are never or only partially implemented. Thus, whenever a researcher desires to programmatically access the data, he must write a parser based on the available specification or free text description. This often involves writing complex regular expressions, an error-prone and tedious task. The development of parsers is often repeated multiple times when switching languages, e.g., if a software project moves from rapid prototyping phase in Python to a more efficient implementation in C or C++.</p>
    <p>Hereby, we present an open source free software project, named <italic toggle="yes">TextFormats</italic>, consisting of a software library and a collection of software tools. Its goal is to simplify the formal definition of new text formats, as well as provide easy and convenient access to the data represented in text formats, for which a parsing library does not yet exist. Given a format specification, <italic toggle="yes">TextFormats</italic> can be used for reading, validating and writing data in the format, from code in multiple programming and scripting languages (Nim, C, C++, Python, shell) as well as from the command line or using a graphical user interface. The library is versatile, allowing for sharing common sub-definitions among different formats, and provides a set of tools including an interactive format definition wizard, a specification format validator and an automatic example generator. Furthermore, examples applications (written in different programming languages) and specifications for common bioinformatics formats are included.</p>
  </sec>
  <sec id="sec002">
    <title><italic toggle="yes">TextFormats</italic>: Implementation and features</title>
    <p>The core of <italic toggle="yes">TextFormats</italic> 1.0 is a software library implemented in the programming language Nim (v.1.6). It is accompanied by a suite of command line and graphical user interface tools, as well as modules for importing and using <italic toggle="yes">TextFormats</italic> in Python and in C or C++ programs.</p>
    <p><italic toggle="yes">TextFormats</italic> can be used for accessing information stored in a text format, provided that the format has been described in a specification written in <italic toggle="yes">TFSL</italic> (Text Formats Specification Language). A specification describes the representations of each single piece of information in the format, and expresses validation and transformation rules, if necessary. TFSL is a simple language for data description, described below.</p>
    <p>Once a specification for a text format is available, <italic toggle="yes">TextFormats</italic> allows parsing of data in that format. Each piece of information in the text representation is thereby extracted, validated and transformed (if necessary) as described in the specification, and finally represented using an appropriate binary data type (e.g., numeric, string, array or dictionary). The opposite operation is also available, i.e., suitable data can be written in the format, using the representation described in the specification.</p>
    <sec id="sec003">
      <title>The Text Formats Specification Language</title>
      <p>The Text Formats Specification Language, briefly <italic toggle="yes">TFSL</italic>, is a declarative data format description language, developed as mean of describing a text format, in a concise and human readable manner. Typically a specification involves defining the format of each single piece of information in the representation, and combining simple data type descriptions into increasingly complex compound data types, until the entire data of a file or object has been described.</p>
      <p>The valid syntax of a <italic toggle="yes">TFSL</italic> specification is described in the provided documentation, including the <italic toggle="yes">TFSL</italic> syntax manual, a <italic toggle="yes">how to</italic> manual with several examples, and a quick reference sheet. From here on, some of the main features of the language are summarized. Although the language is relatively simple, it is worth noting that the user does not necessarily have to learn the <italic toggle="yes">TFSL</italic> language, since a command line wizard tool <monospace>tf_genspec</monospace> can be used to generate interactively a <italic toggle="yes">TFSL</italic> file.</p>
      <p>The information in a <italic toggle="yes">TFSL</italic> specification can be represented as a tree, where internal nodes have a string label (from a set of keys applicable in a given context) and the leaves of the tree contain scalar or compound data (strings, numeric values, boolean values, undefined values, lists or dictionaries). An example of a specification tree and the corresponding specification is given in <xref rid="pone.0268910.g001" ref-type="fig">Fig 1</xref>. The tree can be constructed programmatically, using a hierarchy of appropriate data structures, such as Python <italic toggle="yes">dict</italic> or Nim <italic toggle="yes">table</italic> objects, or can be written as a file in YAML 1.2 or JSON format.</p>
      <fig position="float" id="pone.0268910.g001">
        <object-id pub-id-type="doi">10.1371/journal.pone.0268910.g001</object-id>
        <label>Fig 1</label>
        <caption>
          <title>View of a TFSL specification as a tree.</title>
          <p>An example of <italic toggle="yes">TextFormats</italic> specification in YAML format (left) and the the information contained in the specification viewed as a tree (right).</p>
        </caption>
        <graphic xlink:href="pone.0268910.g001" position="float"/>
      </fig>
      <p>The outermost level, under the tree root, defines a number of sections of the specification. Specifications usually define a number of datatypes, describing any piece of the information in the format and combined hierarchically in compound datatypes: These definitions are located in the section <monospace>datatypes</monospace> of the specification. The optional <monospace>testdata</monospace> section may contain examples of valid and invalid data in each of the defined datatypes, allowing for automatic testing of the specification (see next section).</p>
      <p>Sometimes a definition requires one or multiple subordinate definitions, such as the format of elements of a list. In such cases, those definitions can be given inline or as a reference, to the name of another datatype, defined elsewhere. Thereby circular references are not allowed. Since a format often re-uses parts of other formats, it is possible to import definitions from a specification into another. Thereby, the <monospace>include</monospace> section allows to import single datatypes or entire specifications from one or multiple external files. Some components of imported definitions can be rewritten. In order to avoid naming conflicts, it is possible to use the <monospace>namespace</monospace> section, to specify a namespace prefix used when datatypes are exported to another specification.</p>
      <p>Multiple types of datatype definitions have been implemented, including scalar and compound values. A brief description of each kind of definition is provided in <xref rid="pone.0268910.t001" ref-type="table">Table 1</xref>. Furthermore, definitions can contain different kinds of rules. Validation rules determine conditions which must be met by the represented data. Formatting rules define details of the text representation, such as constant prefixes/suffixes or field delimiters. Transformation rules allow to map text representations to the value they represent: e.g., the symbol <monospace>D</monospace> to the string <italic toggle="yes">deletion</italic>, the roman value <italic toggle="yes">III</italic> to the integer 3, or strings such as <monospace>T</monospace> and <monospace>F</monospace> to boolean values.</p>
      <table-wrap position="float" id="pone.0268910.t001">
        <object-id pub-id-type="doi">10.1371/journal.pone.0268910.t001</object-id>
        <label>Table 1</label>
        <caption>
          <title>Kinds of datatype definitions in the <italic toggle="yes">Text Formats Specification Language</italic>.</title>
        </caption>
        <alternatives>
          <graphic xlink:href="pone.0268910.t001" id="pone.0268910.t001g" position="float"/>
          <table frame="box" rules="all" border="0">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Structure</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Group</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Definition key</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="7" colspan="1">Scalar</td>
                <td align="left" rowspan="2" colspan="1">Discrete values</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>constant</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">only one value is valid</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>values</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">value must be the element of a set</td>
              </tr>
              <tr>
                <td align="left" rowspan="2" colspan="1">Regular expressions</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>regex</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">string matching a regular expression</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>regexes</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">string matching one of a set of regular expressions (optionally associated to different data transformation rules)</td>
              </tr>
              <tr>
                <td align="left" rowspan="3" colspan="1">Numeric intervals</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>integer</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">Signed base-10 integer, in a specified interval.</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>unsigned_integer</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">Unsigned base-2, -8, -10 or -16 integer, in a specified interval.</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>float</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">Floating point number in a specified open or closed interval.</td>
              </tr>
              <tr>
                <td align="left" rowspan="4" colspan="1">Compound</td>
                <td align="left" rowspan="3" colspan="1">Unordered sequences</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>list_of</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">list of elements, each with the same datatype or one of a set of datatypes, not depending on the element position in the list</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>labeled_list</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">list of elements, each associated to a string label (in a given set), defining the semantics and datatype of the element</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tagged_list</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">list of elements, each associated to two string labels, defining, respectively, semantics and a datatype of the element</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Ordered sequences</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>composed_of</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">ordered sets of elements, each with a possibly different datatype</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Scalar/compound</td>
                <td align="left" rowspan="1" colspan="1">Alternatives</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>one_of</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">multiple alternative valid representations</td>
              </tr>
            </tbody>
          </table>
        </alternatives>
      </table-wrap>
    </sec>
    <sec id="sec004">
      <title>Tools for the validation and testing of specifications</title>
      <p>Once a format has been defined using <italic toggle="yes">TFSL</italic>, it is possible to check if the definitions are correct and indeed define the format as intended. Two tools are available for this task: <monospace>tf_spec info</monospace> and <monospace>tf_cerberus.py</monospace>. The command line tool <monospace>tf_spec info</monospace> checks that a specification is correct (and outputs a list of datatypes in that case). In case a specification has a mistake, an extensive help message is displayed, with a summary of the valid syntax in the context of the error. In some cases, however (for example when the structure of the YAML/JSON file is invalid), the tool <monospace>tf_cerberus.py</monospace> (based on the Python validation library <italic toggle="yes">Cerberus</italic>) is more useful for localizing the error.</p>
      <p>Even if the syntax of a specification is correct, it is still possible that it does not accurately describe the target format. Two tools can be combined to avoid this. First, examples of valid and invalid data for each of the datatypes defined in a specification can be added to the specification file (or to a separate test file). By using the command line tool <monospace>tf_spec test</monospace> (or the corresponding API functions), these validity expectations can be automatically tested. Furthermore, examples of valid and invalid data (formatted as test data) for each of the datatypes can be automatically generated using the command line tool <monospace>tf_spec gentest</monospace>. The user can inspect the generated examples, to check if they reflect the intended format representation. Those examples can also be modified to generate more expected valid and invalid data to include in the specification tests.</p>
    </sec>
    <sec id="sec005">
      <title>Compilation of TFSL specifications</title>
      <p>When a specification is provided to the <italic toggle="yes">TextFormats</italic> library, first the YAML or JSON structure is parsed, then the <italic toggle="yes">TFSL</italic> syntax is validated. Any included specification is then parsed; This operation is done recursively, as included specification may include other files themselves.</p>
      <p>Next, all datatype definitions are parsed from the specification being processed, as well as included specification. Datatype definitions can refer to other definitions, on which they depend: e.g., a list depends on the definitions of its elements, which can be given as a reference in the specification. Thus, a directed acyclic graph of the dependencies of the datatype definitions is created. The graph is employed to check for the absence of circular dependencies, using a depth-first cycle detection algorithm, and to solve all references. A hash table of datatype names to datatype definitions is then created.</p>
      <p>For each of the datatype definitions, a regular expression is computed and compiled using the Nim <monospace>regex</monospace> library. Among the available Nim libraries for regular expressions, this library was chosen since it offered better performance, pre-compilation of the regular expressions and better handling of capturing groups (<xref rid="pone.0268910.s002" ref-type="supplementary-material">S2 Appendix</xref>). The regular expressions are employed for validation and parsing of compound data in the text representation, except in some cases where other strategies are used, such as splitting by a fixed exclusive text delimiter.</p>
      <p>The compilation steps summarized above are done, by default, <italic toggle="yes">just-in-time</italic> when the YAML or JSON file is loaded. Examples of running time of the compilation phase are given in <xref rid="pone.0268910.t002" ref-type="table">Table 2</xref>. Although compilation is very fast for all provided example specifications, the overhead introduced by the compilation steps may be reduced, by saving the compiled specification to file. This operation is performed using the command line tool <monospace>tf_spec compile</monospace> or equivalent API functions. Pre-compiled specifications can be used instead of a YAML or JSON specification in all <italic toggle="yes">TextFormats</italic> tools and functions. However, since parsing the compiled specification from file and reconstructing the objects in memory also requires time, pre-compiling is only meaningful for particularly complex specifications, when these are loaded multiple times (e.g., when decoding multiple strings with the <italic toggle="yes">TextFormats</italic> command line tools).</p>
      <table-wrap position="float" id="pone.0268910.t002">
        <object-id pub-id-type="doi">10.1371/journal.pone.0268910.t002</object-id>
        <label>Table 2</label>
        <caption>
          <title>Time for compilation of TFSL specifications from YAML files and loading of pre-compiled specifications.</title>
        </caption>
        <alternatives>
          <graphic xlink:href="pone.0268910.t002" id="pone.0268910.t002g" position="float"/>
          <table frame="box" rules="all" border="0">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Format</th>
                <th align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">Compile only</th>
                <th align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">Compile and save pre-compiled</th>
                <th align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">Load pre-compiled</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">Accessions</td>
                <td align="right" rowspan="1" colspan="1">0.02 s</td>
                <td align="right" rowspan="1" colspan="1">0.02 s</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>0.02 s</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">NCBI ID</td>
                <td align="right" rowspan="1" colspan="1">0.03 s</td>
                <td align="right" rowspan="1" colspan="1">0.03 s</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>0.02 s</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Fasta</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>&lt; 0.01 s</bold>
                </td>
                <td align="right" rowspan="1" colspan="1">0.01 s</td>
                <td align="right" rowspan="1" colspan="1">0.01 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">FastQ</td>
                <td align="right" rowspan="1" colspan="1">0.01 s</td>
                <td align="right" rowspan="1" colspan="1">0.01 s</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>&lt; 0.01 s</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">SAM</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>0.25 s</bold>
                </td>
                <td align="right" rowspan="1" colspan="1">0.21 s</td>
                <td align="right" rowspan="1" colspan="1">0.27 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">EGC</td>
                <td align="right" rowspan="1" colspan="1">0.23 s</td>
                <td align="right" rowspan="1" colspan="1">0.24 s</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>0.08 s</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">GFA1</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>0.26 s</bold>
                </td>
                <td align="right" rowspan="1" colspan="1">0.31 s</td>
                <td align="right" rowspan="1" colspan="1">0.45 s</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">GFA2</td>
                <td align="right" rowspan="1" colspan="1">1.28 s</td>
                <td align="right" rowspan="1" colspan="1">1.40 s</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>1.19 s</bold>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">GFF3</td>
                <td align="right" rowspan="1" colspan="1">1.79 s</td>
                <td align="right" rowspan="1" colspan="1">1.79 s</td>
                <td align="right" rowspan="1" colspan="1">
                  <bold>1.25 s</bold>
                </td>
              </tr>
            </tbody>
          </table>
        </alternatives>
        <table-wrap-foot>
          <fn id="t002fn001">
            <p>bold font indicates the fastest time for obtaining the specification: loading a pre-compiled specification or compiling the YAML specification.;</p>
          </fn>
          <fn id="t002fn002">
            <p>The operations were performed using the <italic toggle="yes">TextFormats</italic> command line tool <monospace>tf_spec</monospace>, with the sub-commands <monospace>compile</monospace> (compile and save to file) and <monospace>info</monospace> (compile YAML or load pre-compiled).</p>
          </fn>
          <fn id="t002fn003">
            <p>The reported times are the average over 3 runs of the real time measured by GNU <italic toggle="yes">time</italic>, on a Linux OpenSuse 15.3 workstation (CPU i5–4570 3.2 Ghz, RAM 16 Gb), using <italic toggle="yes">TextFormats</italic> 1.2.2.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <p><xref rid="pone.0268910.t002" ref-type="table">Table 2</xref> shows the time necessary for parsing and compiling the YAML specification and output a list of datatypes, save the compiled specification to file and listing the datatypes from the pre-compiled specification.</p>
    </sec>
    <sec id="sec006">
      <title>Operations on text formats</title>
      <p>Provided a <italic toggle="yes">TFSL</italic> specification of a text format, <italic toggle="yes">TextFormats</italic> implements a number of operations for handling data in that format. <xref rid="pone.0268910.t003" ref-type="table">Table 3</xref> summarizes the available operations.</p>
      <table-wrap position="float" id="pone.0268910.t003">
        <object-id pub-id-type="doi">10.1371/journal.pone.0268910.t003</object-id>
        <label>Table 3</label>
        <caption>
          <title>Operations implemented by <italic toggle="yes">TextFormats</italic> and corresponding API functions and CLI commands.</title>
        </caption>
        <alternatives>
          <graphic xlink:href="pone.0268910.t003" id="pone.0268910.t003g" position="float"/>
          <table frame="box" rules="all" border="0">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Input</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Operation</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Interface</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Function/Command</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="12" colspan="1">Specification</td>
                <td align="left" rowspan="4" colspan="1">Compile <italic toggle="yes">TFSL</italic> specification</td>
                <td align="left" rowspan="1" colspan="1">Nim</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>filename.compile_specification()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">C</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_compile_specification()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Python</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>Specification.compile()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CLI</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_spec compile</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="4" colspan="1">Load <italic toggle="yes">TFSL</italic>/compiled specification</td>
                <td align="left" rowspan="1" colspan="1">Nim</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>filename.specification_from_file()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">C</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_specification_from_file()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Python</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>Specification()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CLI</td>
                <td align="left" rowspan="1" colspan="1"><monospace>-s/--spec</monospace> option of all commands</td>
              </tr>
              <tr>
                <td align="left" rowspan="4" colspan="1">Run tests</td>
                <td align="left" rowspan="1" colspan="1">Nim</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>run_specification_testfile()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">C</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_run_specification_testfile()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Python</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>Specification.test()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CLI</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_spec test</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="12" colspan="1">Text representation</td>
                <td align="left" rowspan="4" colspan="1">Validate</td>
                <td align="left" rowspan="1" colspan="1">Nim</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>string.is_valid()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">C</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_is_valid_encoded()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Python</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>DatatypeDefinition.is_valid_encoded()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CLI</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_validate encoded</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="4" colspan="1">Decode (input: string)</td>
                <td align="left" rowspan="1" colspan="1">Nim</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>string.decode()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">C</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_decode()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Python</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>DatatypeDefinition.decode()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CLI</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_decode string</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="4" colspan="1">Decode (input: file)</td>
                <td align="left" rowspan="1" colspan="1">Nim</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>filename.decode_file()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">C</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_decode_file()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Python</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>DatatypeDefinition.decode_file()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CLI</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_decode file</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="8" colspan="1">Data</td>
                <td align="left" rowspan="4" colspan="1">Check if suitable for representation</td>
                <td align="left" rowspan="1" colspan="1">Nim</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>jsonnode.is_valid()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">C</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_is_valid_decoded()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Python</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>DatatypeDefinition.is_valid_decoded()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CLI</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_validate decoded</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="4" colspan="1">Encode into text representation</td>
                <td align="left" rowspan="1" colspan="1">Nim</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>jsonnode.encode()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">C</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_encode()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Python</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>DatatypeDefinition.encode()</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">CLI</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tf_encode json</monospace>
                </td>
              </tr>
            </tbody>
          </table>
        </alternatives>
      </table-wrap>
      <p>The core operations are <italic toggle="yes">decoding</italic>, i.e., converting the text representation into the data it represents, and <italic toggle="yes">encoding</italic>, i.e., writing a text representation, given some suitable data. A <italic toggle="yes">validation</italic> operation is also available, which can be applied to the text representation to check if it follows the specification, or to the decoded data to check if they can be represented in the specified format. In some cases this operation can be done without requiring full decoding or encoding, e.g., simply applying the regular expression for the given datatype.</p>
      <p>The input for the decoding operation can be a string in the text format or a file. When a file is given as input, the decoder must know the definition scope, i.e., to which part of the file the datatype definition shall be applied. In particular, this can be: a single line (<italic toggle="yes">line</italic> scope); a fixed number of lines of the file (<italic toggle="yes">unit</italic> scope); all following lines which were not yet processed lines to which it applies (<italic toggle="yes">section</italic> scope); the entire file (<italic toggle="yes">file</italic> scope). Definition with section and file scope are useful for validating the structure of the entire data: e.g., in a SAM format file [<xref rid="pone.0268910.ref011" ref-type="bibr">11</xref>], there must be a header section followed by an alignment section. This validation is not possible if single lines are parsed independently. However, processing the parsing results all at once would require a large amount of memory e.g., if a large file is parsed. In such cases, it is possible to instruct the decoding function to process only one line at a time (or one element of a compound definition at a time), but still validate the entire data. For example, for a SAM file, the decoder would still validate the correctness of the global structure of the file, but it would process only one header line or alignment at a time.</p>
    </sec>
    <sec id="sec007">
      <title>Supported programming languages</title>
      <p>The <italic toggle="yes">TextFormats</italic> library has been implemented in the Nim programming language (version 1.4.8). This language offers a number of advantages over alternatives (it is compiled, but faster to code than C/C++) and has recently aroused interest [<xref rid="pone.0268910.ref012" ref-type="bibr">12</xref>] and some limited adoption [<xref rid="pone.0268910.ref013" ref-type="bibr">13</xref>, <xref rid="pone.0268910.ref014" ref-type="bibr">14</xref>] in the bioinformatics community. A reason why this language was chosen for this project is the ease of interfacing Nim code to other programming languages. Thus, besides using the library in Nim, also C/C++, Python and command line scripts are supported (see <xref rid="pone.0268910.s001" ref-type="supplementary-material">S1 Appendix</xref> for code examples in Nim, Python, C and Bash). The following sections briefly describe the implementation challenges, design choices and peculiarities of these interfaces.</p>
      <sec id="sec008">
        <title>The C API to <italic toggle="yes">TextFormats</italic></title>
        <p>For using <italic toggle="yes">TextFormats</italic> in C and C++ the library and the C API modules are compiled and linked to the Nim runtime library, and the resulting header file is included into the C or C++ program. The C/C++ API modules functionality is documented in a manual, as well as in a quick reference sheet. The core module is a wrapper to the Nim API functions for use in C (implemented using the <italic toggle="yes">exportc</italic> Nim pragma). However, additional module had to be implemented, to cope with the differences between C and Nim.</p>
        <p>Nim is a statically typed language, like C. However, the datatype of data obtained by decoding a text representation is not know at compile time. In Nim this problem has been solved by employing a <italic toggle="yes">variant type</italic> from the standard library (<monospace>JsonNode</monospace>), which can represent different kinds of data and provides multiple functions for accessing and modifying the data. In order to use the same strategy in C and to provide a consistent interface, a wrapper to the Nim <monospace>json</monospace> library was developed and included in the <italic toggle="yes">TextFormats</italic> C API.</p>
        <p>A further challenge is represented by exceptions, since in C there is no exception handling, equivalent to that in Nim. Thus a mechanism similar to the <italic toggle="yes">errno</italic> of the C standard library has been adopted. In particular, if a <italic toggle="yes">TextFormats</italic> function results in an exception, a variable describing the error is set. The user can decide to handle the exception or print an error message and quit the program. Alternatively, to avoid code redundancy, it is also possible to specify, with a single line of code, that all errors must result in printing the error message and quitting.</p>
      </sec>
      <sec id="sec009">
        <title>The Python API to <italic toggle="yes">TextFormats</italic></title>
        <p>Python is a very popular choice for developing bioinformatics pipelines. It is easy to import Nim code into Python using the Nim library <monospace>NimPy</monospace> v.0.1 (available at <ext-link xlink:href="https://github.com/yglukhov/nimpy" ext-link-type="uri">https://github.com/yglukhov/nimpy</ext-link>), and the Python library <monospace>nimporter</monospace> (available at <ext-link xlink:href="https://github.com/Pebaz/nimporter" ext-link-type="uri">https://github.com/Pebaz/nimporter</ext-link>) v.1.0.4.</p>
        <p>However, a simple wrapper to the Nim functions results in a functional but inelegant interface. Therefore a Python API module has been developed on top of it, which defines classes representing <italic toggle="yes">TextFormats</italic> specifications and datatypes. The module allows adoption of a more idiomatic coding style, with greater reflection of the dynamic typing and object orientation of Python. A manual and a quick reference sheet describe the use of this API.</p>
      </sec>
      <sec id="sec010">
        <title>The command line interface to <italic toggle="yes">TextFormats</italic></title>
        <p>Bioinformatics analyses often involve executing multiple programs, which can be combined using command line scripts. To enable the use of <italic toggle="yes">TextFormats</italic> in this context, a suite of command line interface (CLI) tools has been developed. Their usage is documented in a manual, in <monospace>man</monospace> pages for each of the tools, and in a quick reference sheet. The tools support the use of standard input and output, in order to facilitate their inclusion in pipes.</p>
        <p>The decode, encode and validate operations of <italic toggle="yes">TextFormats</italic> are provided, respectively, by the <monospace>tf_decode</monospace>, <monospace>tf_encode</monospace> and <monospace>tf_validate</monospace> tools. The <monospace>tf_spec</monospace> provides operations on specifications, such as analysis of their content, testing, automatic generation of example data, and pre-compilation of <italic toggle="yes">TFSL</italic>.</p>
      </sec>
    </sec>
  </sec>
  <sec sec-type="results" id="sec011">
    <title>Results</title>
    <sec id="sec012">
      <title>Case study 1: Parsing a complex format</title>
      <p>In order to test the <italic toggle="yes">TextFormats</italic> library on real world data, we implemented a <monospace>SAM</monospace> format [<xref rid="pone.0268910.ref011" ref-type="bibr">11</xref>] <italic toggle="yes">TFSL</italic> specification, based on the format specification document [<xref rid="pone.0268910.ref015" ref-type="bibr">15</xref>]. We implemented several versions of a program for counting the alignments by target sequence, by read group, by flag value, and the occurrences of each optional tag found in the file.</p>
      <p>First, we compared the performance of <italic toggle="yes">TextFormats</italic> when using it from Nim, or from other languages. Thus we implemented the parser, based on <italic toggle="yes">TextFormats</italic>, in Nim, Python and C. Furthermore, we implemented the same functionality without <italic toggle="yes">TextFormats</italic> and used instead the state-of-the art library <italic toggle="yes">htslib</italic> [<xref rid="pone.0268910.ref016" ref-type="bibr">16</xref>] v.1.13. Also in this case, we compared the native implementation in C, with the use of the Python wrapper <italic toggle="yes">Pysam</italic> [<xref rid="pone.0268910.ref017" ref-type="bibr">17</xref>] v.0.17.0 and of the Nim wrapper <italic toggle="yes">hts-nim</italic> v.0.3.18 [<xref rid="pone.0268910.ref013" ref-type="bibr">13</xref>].</p>
      <p>As test data, we used a SAM file from the 1000 Genomes Project [<xref rid="pone.0268910.ref018" ref-type="bibr">18</xref>], the Mosaik alignment of the 454 sequencing of sample NA06984 (file <ext-link xlink:href="http://NA06984.454.MOSAIK.SRP000033.2009_11.bam" ext-link-type="uri">NA06984.454.MOSAIK.SRP000033.2009_11.bam</ext-link> obtained from <ext-link xlink:href="http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/pilot_data/data/NA06984/alignment/" ext-link-type="uri">http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/pilot_data/data/NA06984/alignment/</ext-link> and converted to SAM using samtools [<xref rid="pone.0268910.ref011" ref-type="bibr">11</xref>]).</p>
      <p>We measured the running time of each of the implementations as real time measured by GNU <italic toggle="yes">time</italic> [<xref rid="pone.0268910.ref019" ref-type="bibr">19</xref>] v.1.9 (average of 3 runs, run on a Linux workstation with CPU Intel i5–4570 3.20GHz, 16 Gb RAM, Linux OpenSuse 15.3). The results are summarized in <xref rid="pone.0268910.t004" ref-type="table">Table 4</xref>. The same counts were output by each version of the program, based on <italic toggle="yes">TextFormats</italic> or <italic toggle="yes">htslib</italic>, in Nim, Python and C.</p>
      <table-wrap position="float" id="pone.0268910.t004">
        <object-id pub-id-type="doi">10.1371/journal.pone.0268910.t004</object-id>
        <label>Table 4</label>
        <caption>
          <title>Running times of equivalent programs based on <italic toggle="yes">TextFormats</italic> or other libraries, implemented in Nim, Python, and C.</title>
        </caption>
        <alternatives>
          <graphic xlink:href="pone.0268910.t004" id="pone.0268910.t004g" position="float"/>
          <table frame="box" rules="all" border="0">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1"/>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">N. input lines</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Library</th>
                <th align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">Nim</th>
                <th align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">Python</th>
                <th align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">(vs Nim)</th>
                <th align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">C</th>
                <th align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">(vs Nim)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="6" colspan="1">(SAM) Case study 1</td>
                <td align="left" rowspan="1" colspan="1">100 000</td>
                <td align="left" rowspan="1" colspan="1">
                  <italic toggle="yes">TextFormats</italic>
                </td>
                <td align="right" rowspan="1" colspan="1">5.45 s</td>
                <td align="right" rowspan="1" colspan="1">5.70 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(+ 4.6%)</td>
                <td align="right" rowspan="1" colspan="1">5.61 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(+ 2.9%)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">500 000</td>
                <td align="left" rowspan="1" colspan="1">
                  <italic toggle="yes">TextFormats</italic>
                </td>
                <td align="right" rowspan="1" colspan="1">26.89 s</td>
                <td align="right" rowspan="1" colspan="1">28.14 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(+ 4.6%)</td>
                <td align="right" rowspan="1" colspan="1">27.76 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(+ 3.2%)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">1 000 000</td>
                <td align="left" rowspan="1" colspan="1">
                  <italic toggle="yes">TextFormats</italic>
                </td>
                <td align="right" rowspan="1" colspan="1">53.70 s</td>
                <td align="right" rowspan="1" colspan="1">55.91 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(+ 4.1%)</td>
                <td align="right" rowspan="1" colspan="1">55.46 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(+ 3.3%)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">100 000</td>
                <td align="left" rowspan="1" colspan="1">htslib</td>
                <td align="right" rowspan="1" colspan="1">0.35 s</td>
                <td align="right" rowspan="1" colspan="1">2.44 s</td>
                <td align="right" rowspan="1" colspan="1"/>
                <td align="right" rowspan="1" colspan="1">0.09 s</td>
                <td align="right" rowspan="1" colspan="1"/>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">500 000</td>
                <td align="left" rowspan="1" colspan="1">htslib</td>
                <td align="right" rowspan="1" colspan="1">1.66 s</td>
                <td align="right" rowspan="1" colspan="1">12.16 s</td>
                <td align="right" rowspan="1" colspan="1"/>
                <td align="right" rowspan="1" colspan="1">0.42 s</td>
                <td align="right" rowspan="1" colspan="1"/>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">1 000 000</td>
                <td align="left" rowspan="1" colspan="1">htslib</td>
                <td align="right" rowspan="1" colspan="1">3.37 s</td>
                <td align="right" rowspan="1" colspan="1">24.33 s</td>
                <td align="right" rowspan="1" colspan="1"/>
                <td align="right" rowspan="1" colspan="1">0.83 s</td>
                <td align="right" rowspan="1" colspan="1"/>
              </tr>
              <tr>
                <td align="left" rowspan="6" style="border-top-width:thick" colspan="1">(EGC) Case study 3</td>
                <td align="left" style="border-top-width:thick" rowspan="1" colspan="1">100 000</td>
                <td align="left" style="border-top-width:thick" rowspan="1" colspan="1">
                  <italic toggle="yes">TextFormats</italic>
                </td>
                <td align="right" style="border-top-width:thick" rowspan="1" colspan="1">5.38 s</td>
                <td align="right" style="border-top-width:thick" rowspan="1" colspan="1">5.87 s</td>
                <td align="char" char="." style="border-top-width:thick" rowspan="1" colspan="1">(+ 9.1%)</td>
                <td align="right" style="border-top-width:thick" rowspan="1" colspan="1">5.31 s</td>
                <td align="char" char="." style="border-top-width:thick" rowspan="1" colspan="1">(- 1.3%)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">500 000</td>
                <td align="left" rowspan="1" colspan="1">
                  <italic toggle="yes">TextFormats</italic>
                </td>
                <td align="right" rowspan="1" colspan="1">25.78 s</td>
                <td align="right" rowspan="1" colspan="1">28.33 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(+ 9.9%)</td>
                <td align="right" rowspan="1" colspan="1">25.40 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(- 1.4%)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">1 000 000</td>
                <td align="left" rowspan="1" colspan="1">
                  <italic toggle="yes">TextFormats</italic>
                </td>
                <td align="right" rowspan="1" colspan="1">52.74 s</td>
                <td align="right" rowspan="1" colspan="1">55.70 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(+ 5.6%)</td>
                <td align="right" rowspan="1" colspan="1">51.62 s</td>
                <td align="char" char="." rowspan="1" colspan="1">(- 2.3%)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">100 000</td>
                <td align="left" rowspan="1" colspan="1">
                  <italic toggle="yes">ad hoc</italic>
                </td>
                <td align="right" rowspan="1" colspan="1">n.a.</td>
                <td align="right" rowspan="1" colspan="1">2.19 s</td>
                <td align="right" rowspan="1" colspan="1"/>
                <td align="right" rowspan="1" colspan="1">n.a.</td>
                <td align="right" rowspan="1" colspan="1"/>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">500 000</td>
                <td align="left" rowspan="1" colspan="1">
                  <italic toggle="yes">ad hoc</italic>
                </td>
                <td align="right" rowspan="1" colspan="1">n.a.</td>
                <td align="right" rowspan="1" colspan="1">11.37 s</td>
                <td align="right" rowspan="1" colspan="1"/>
                <td align="right" rowspan="1" colspan="1">n.a.</td>
                <td align="right" rowspan="1" colspan="1"/>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">1 000 000</td>
                <td align="left" rowspan="1" colspan="1">
                  <italic toggle="yes">ad hoc</italic>
                </td>
                <td align="right" rowspan="1" colspan="1">n.a.</td>
                <td align="right" rowspan="1" colspan="1">22.69 s</td>
                <td align="right" rowspan="1" colspan="1"/>
                <td align="right" rowspan="1" colspan="1">n.a.</td>
                <td align="right" rowspan="1" colspan="1"/>
              </tr>
              <tr>
                <td align="left" rowspan="2" style="border-bottom-width:thick;border-top-width:thick" colspan="1">(GFA2) (Case study 4)</td>
                <td align="left" style="border-top-width:thick" rowspan="1" colspan="1">363 613</td>
                <td align="left" style="border-top-width:thick" rowspan="1" colspan="1">
                  <italic toggle="yes">TextFormats</italic>
                </td>
                <td align="right" style="border-top-width:thick" rowspan="1" colspan="1">93.55 s</td>
                <td align="right" style="border-top-width:thick" rowspan="1" colspan="1">96.83 s</td>
                <td align="char" char="." style="border-top-width:thick" rowspan="1" colspan="1">(+ 3.5%)</td>
                <td align="right" style="border-top-width:thick" rowspan="1" colspan="1">n.a.</td>
                <td align="right" style="border-top-width:thick" rowspan="1" colspan="1"/>
              </tr>
              <tr>
                <td align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">363 613</td>
                <td align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">GfaPy</td>
                <td align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">n.a.</td>
                <td align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">191.83 s</td>
                <td align="right" style="border-bottom-width:thick" rowspan="1" colspan="1"/>
                <td align="right" style="border-bottom-width:thick" rowspan="1" colspan="1">n.a.</td>
                <td align="right" style="border-bottom-width:thick" rowspan="1" colspan="1"/>
              </tr>
            </tbody>
          </table>
        </alternatives>
        <table-wrap-foot>
          <fn id="t004fn001">
            <p>(SAM) Case study 1: program for collecting information from a SAM file, based on the <italic toggle="yes">TextFormats</italic> or the <italic toggle="yes">htslib</italic> library;</p>
          </fn>
          <fn id="t004fn002">
            <p>(EGC) Case study 3: program for parsing the EGC format (defined in the text) writing the information to JSON and then back to EGC, based on the <italic toggle="yes">TextFormats</italic> library, or as a <italic toggle="yes">ad hoc</italic> Python parser;</p>
          </fn>
          <fn id="t004fn003">
            <p>(GFA2) Case study 4: Python program for validating a GFA2 file and collecting basic statistics on the file, based on <italic toggle="yes">TextFormats</italic> library or on the <italic toggle="yes">GfaPy</italic> library;</p>
          </fn>
          <fn id="t004fn004">
            <p>(vs Nim) Running time difference of the Python or C version (when implemented) of the <italic toggle="yes">TextFormats</italic>-based programs to the Nim version;</p>
          </fn>
          <fn id="t004fn005">
            <p>The reported times are the average over 3 runs of the real time measured by GNU <italic toggle="yes">time</italic>, on a Linux OpenSuse 15.3 workstation (CPU i5–4570 3.2 Ghz, RAM 16 Gb), using <italic toggle="yes">TextFormats</italic> 1.2.2.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
    </sec>
    <sec id="sec013">
      <title>Case study 2: Parsing sequence identifiers</title>
      <p>The sequences contained in sequence databases are identified by accessions, which remain stable when corrections or new versions of the same sequence or sequence annotation are published. Accessions are strings consisting of sequences of letters and numbers. The valid formats of accessions are described in the documentation of the databases. Besides a number identifying the entry, accessions often include more information, such as the section of the database, or the type of molecule or annotation.</p>
      <p>In contrast to file formats such as SAM (discussed in Case study 1), there is no available parser or validator for accession strings. Thus we implemented the <italic toggle="yes">TFSL</italic> specifications <monospace>spec/accessions.yaml</monospace>, describing the format of the accessions of multiple sequence databases (<xref rid="pone.0268910.t005" ref-type="table">Table 5</xref>), and <monospace>spec/ncbi_id.yaml</monospace>, describing the sequence identifiers used by NCBI for sequences in Fasta format (<xref rid="pone.0268910.t006" ref-type="table">Table 6</xref>). They allow for effortless validation of the identifiers and access to the information contained therein, from the command line or any of the supported programming languages (Nim, Python, C, C++).</p>
      <table-wrap position="float" id="pone.0268910.t005">
        <object-id pub-id-type="doi">10.1371/journal.pone.0268910.t005</object-id>
        <label>Table 5</label>
        <caption>
          <title>Accession identifiers of NCBI, DDBJ, ENA/EBI and UniProt sequence databases defined in the <monospace>spec/accessions.yaml</monospace>
<italic toggle="yes">TextFormats</italic> specification.</title>
        </caption>
        <alternatives>
          <graphic xlink:href="pone.0268910.t005" id="pone.0268910.t005g" position="float"/>
          <table frame="box" rules="all" border="0">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Database</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Data coded in accession</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">INSD read archives (SRA, DRA, ERA)</td>
                <td align="left" rowspan="1" colspan="1">Institution (NCBI, DDBJ, ENA/EBI), Type of data (study, run, sample, experiment, analysis), Entry</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">UniProtKB</td>
                <td align="left" rowspan="1" colspan="1">Database name, Entry</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Trace Archive</td>
                <td align="left" rowspan="1" colspan="1">Database name, Entry</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">INSD assembled sequence (Nucleotide, Protein, Bulk, MGA)</td>
                <td align="left" rowspan="1" colspan="1">Database name, Entry</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">INSD metadata (BioProject, BioSample)</td>
                <td align="left" rowspan="1" colspan="1">Institution (NCBI, DDBJ, ENA/EBI), Type of Record (BioProject, BioSample), Entry</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">RefSeq</td>
                <td align="left" rowspan="1" colspan="1">Type of molecule (Genomic, RNA, protein), Type of assembly (reference, alternate), Type of annotation (curated, predicted model), Entry</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Ensembl</td>
                <td align="left" rowspan="1" colspan="1">Species, Feature type (exon, protein, gene, transcript etc), Entry</td>
              </tr>
            </tbody>
          </table>
        </alternatives>
        <table-wrap-foot>
          <fn id="t005fn001">
            <p>The definitions on which the specification is based were obtained from the following documentation pages: <ext-link xlink:href="https://www.ncbi.nlm.nih.gov/Sequin/acc.html" ext-link-type="uri">https://www.ncbi.nlm.nih.gov/Sequin/acc.html</ext-link>, <ext-link xlink:href="https://www.ddbj.nig.ac.jp/acc_def-e.html" ext-link-type="uri">https://www.ddbj.nig.ac.jp/acc_def-e.html</ext-link>, <ext-link xlink:href="https://www.ddbj.nig.ac.jp/prefix-e.html#dra" ext-link-type="uri">https://www.ddbj.nig.ac.jp/prefix-e.html#dra</ext-link>, <ext-link xlink:href="https://www.ncbi.nlm.nih.gov/books/NBK21091/table/ch18.T.refseq_accession_numbers_and_mole/" ext-link-type="uri">https://www.ncbi.nlm.nih.gov/books/NBK21091/table/ch18.T.refseq_accession_numbers_and_mole/</ext-link>, <ext-link xlink:href="https://www.uniprot.org/help/accession_numbers" ext-link-type="uri">https://www.uniprot.org/help/accession_numbers</ext-link> and <ext-link xlink:href="https://www.ensembl.org/info/genome/stable_ids/prefixes.html" ext-link-type="uri">https://www.ensembl.org/info/genome/stable_ids/prefixes.html</ext-link>.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <table-wrap position="float" id="pone.0268910.t006">
        <object-id pub-id-type="doi">10.1371/journal.pone.0268910.t006</object-id>
        <label>Table 6</label>
        <caption>
          <title>Fasta sequence identifiers used by NCBI, defined in the <monospace>spec/ncbi_id.yaml</monospace>
<italic toggle="yes">TextFormats</italic> specification.</title>
        </caption>
        <alternatives>
          <graphic xlink:href="pone.0268910.t006" id="pone.0268910.t006g" position="float"/>
          <table frame="box" rules="all" border="0">
            <colgroup span="1">
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
              <col align="left" valign="middle" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Type of sequence</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Accession prefix</th>
                <th align="left" style="border-bottom-width:thick" rowspan="1" colspan="1">Example</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">NCBI RefSeq database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>ref</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>ref|NM_010450.1</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">NCBI GenBank database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gb</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gb|M73307|AGMA13GT</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">NCBI GenBank (third-party annotation)</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tpg</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tpg|BK003456|</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">EMBL sequence database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>emb</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>emb|CAM43271.1|</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">EMBL sequence (third-party annotation)</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tpe</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tpe|BN000123|</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">DDBJ sequence database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>dbj</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>dbj|BAC85684.1</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">DDBJ sequence (third-party annotation)</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tpd</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tpd|FAA00017|</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">SWISS-Prot database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>sp</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>sp|P01013|OVAX_CHICK</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">TrEMBL database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tr</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>tr|Q90RT2|Q90RT2_9HIV1</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">PIR database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>pir</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>pir||G36364</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">PDB database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>pdb</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>pdb|1I4L|D</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">PRF database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>prf</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>prf||0806162C</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">patent sequence</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>pat</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>pat|US|RE33188|1</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">pre-grant patent sequence</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>pgp</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>pgp|EP|0238993|7</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">general database reference</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gnl</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gnl|taxon|9606</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">local sequence</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>lcl</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>lcl|hnm271</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">GenInfo backbone sequence ID</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>bbs</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>bbs|316342</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">GenInfo backbone molecule type</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>bbm</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>bbm|464147</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">GenInfo import ID</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gim</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gim|442187</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">GenInfo integrated database</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gi</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gi|21434723</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">NCBI internal, genome pipeline</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gpp</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>gpp|GPC_123456789</monospace>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">NCBI internal, named annotation track</td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>nat</monospace>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <monospace>nat|AT_123456789.1|</monospace>
                </td>
              </tr>
            </tbody>
          </table>
        </alternatives>
        <table-wrap-foot>
          <fn id="t006fn001">
            <p>The format of each type of identifier is described in the documentation of the NCBI Toolkit, at <ext-link xlink:href="https://ncbi.github.io/cxx-toolkit/pages/ch_demo#ch_demo.id1_fetch.html_ref_fasta" ext-link-type="uri">https://ncbi.github.io/cxx-toolkit/pages/ch_demo#ch_demo.id1_fetch.html_ref_fasta</ext-link>.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
    </sec>
    <sec id="sec014">
      <title>Case study 3: Defining a new format</title>
      <p>New text formats are often defined to represent kinds of data for which no existing suitable format yet exists. One of the goals of the <italic toggle="yes">TextFormats</italic> library is to simplify the definition of new formats in those circumstances. To simulate this kind of application, we defined a new file format and implemented its specification in <italic toggle="yes">TFSL</italic> (<monospace>egc.yaml</monospace>). The format, called <monospace>EGC</monospace> (<italic toggle="yes">expected genomic content</italic>) has the goal of representing a set of rules, describing the expected content of a microbial genome, under a given condition, such as phenotype, lifestyle, or membership in a taxonomic group.</p>
      <p>The general structure of the format was organized on the example of the GFA format [<xref rid="pone.0268910.ref009" ref-type="bibr">9</xref>]. Each line not starting with a comment symbol (<monospace>#</monospace>) is a record, containing multiple fields, separated by tabulator characters. Tabulators or newline characters never occur in these fields. The first field is a single letter determining the record type. The number and semantics of the following positional fields are determined by the record type. The positional fields cannot be empty and a point (.) is used to represent missing information in a field (whenever allowed).</p>
      <p>Four types of record lines have been have defined in <monospace>EGC</monospace>: records of type <monospace>A</monospace> define attributes which can be measured in a genome sequence or annotation, such as sequence statistics or feature counts; records of type <monospace>T</monospace> (taxon) and <monospace>P</monospace> (phenotype group) define measurement subjects, i.e., groups of organisms for which an expected value of the attributes can be defined; finally records of type <monospace>E</monospace> define the expectation, i.e. the association of a subject to expected values of an attribute.</p>
      <p>We developed a parser for the EGC format using <italic toggle="yes">TextFormats</italic>. In order to quantify the possible overhead when implementing <italic toggle="yes">TextFormats</italic>-based programs in different programming languages, we implemented the program in Nim, C and Python.</p>
      <p>Furthermore, to compare the use of <italic toggle="yes">TextFormats</italic> with existing solution, we developed a Python parser for the format, which does not rely on <italic toggle="yes">TextFormats</italic>. We could not find any suitable Python library for easily creating such a parser. For example, GfaPy [<xref rid="pone.0268910.ref020" ref-type="bibr">20</xref>], which allows to read GFA2 files, can be extended to new datatypes and custom line types. However, this functionality is meant for adding further structured information to the graph, and does not fit the need to implement a format not aimed at representing a graph (e.g., the standar GFA2 record types cannot be overwritten). Thus, we created an <italic toggle="yes">ad hoc</italic> EGC parser in Python from scratch (<monospace>egc_ad_hoc.py</monospace>).</p>
      <p>The results obtained with the <italic toggle="yes">ad hoc</italic> parser were identical to those obtained using the programs based on <italic toggle="yes">TextFormats</italic>. We compared the performance of the different implementations on example files, containing a variable number of lines. The results are reported in <xref rid="pone.0268910.t004" ref-type="table">Table 4</xref>.</p>
    </sec>
    <sec id="sec015">
      <title>Case study 4: Development of a Python software tool</title>
      <p>Using the Python API of <italic toggle="yes">TextFormats</italic>, it is possible to rapidly develop software tools addressing complex formats, such as GFA2. To demonstrate this, we created a Python script <monospace>gfa2_info.py</monospace> based on the library, which collects basic statistics and summarizes the contents of a GFA2 file. To compare this solution with the state-of-the-art and verify the results, we developed a tool with the same functionality using another software library. Among the existing GFA libraries, only GfaPy [<xref rid="pone.0268910.ref020" ref-type="bibr">20</xref>] allows parsing of a GFA2 file using Python. Thus we developed a script (named <monospace>gfa2_info_gfapy_based.py</monospace>) based on it.</p>
      <p>In the current implementation of <italic toggle="yes">TextFormats</italic>, constraints which involve non-consecutive elements cannot be directly specified in the specification, but must be implemented in the calling code. In GFA2, all record identifiers must be unique, references to segments in other lines must be identifiers of segments defined elsewhere in the same file, and the coordinates in edges must be in the range of the length of the sequences to which they refer and correctly use the final coordinate marker. To exemplify the implementation of such constraint validations when using <italic toggle="yes">TextFormats</italic> and ensure a fair comparison with GfaPy, we developed a module <monospace>gfa2_cross_validator.py</monospace>. The module verified the constraints when running the <italic toggle="yes">TextFormats</italic> version of <monospace>gfa2_info.py</monospace>: it was able to correctly identify and report multiple issues in an example GFA2 file.</p>
      <p>Furthermore, in order to quantify the possible overhead when implementing the programs based on <italic toggle="yes">TextFormats</italic> in Python, we implemented an equivalent <italic toggle="yes">TextFormats</italic>-based program also in Nim, including a Nim implementation of the cross validator module.</p>
      <p>We tested the Gfapy- and <italic toggle="yes">TextFormats</italic>-based programs on large real data, using the the Minigraph [<xref rid="pone.0268910.ref010" ref-type="bibr">10</xref>] pre-built human genome pangenome graph <monospace>GRCh38–0.1-14.gfa.gz</monospace> (downloaded from <ext-link xlink:href="http://ftp.dfci.harvard.edu/pub/hli" ext-link-type="uri">ftp.dfci.harvard.edu/pub/hli</ext-link>) converted to GFA2 by GfaPy. The file consists of about 363 thousand lines. All programs produced the same results. The running times are reported in <xref rid="pone.0268910.t004" ref-type="table">Table 4</xref>.</p>
    </sec>
    <sec id="sec016">
      <title>Case study 5: Data format standardization</title>
      <p>Sometimes data is available in a custom format and requires conversion into a standard format, in order to be processed with existing software tools. To test the suitability of <italic toggle="yes">TextFormats</italic> for this kind of task, we created a file containing the annotation of a gene in a custom tabular format.</p>
      <p>A <italic toggle="yes">TextFormats</italic> specification was then written to read the custom file (<monospace>ftab.yaml</monospace>). We then created a Python script (<monospace>ftab_to_gff3.py</monospace>), which parses the custom tabular format using <italic toggle="yes">TextFormats</italic> and re-organizes the information, so that it can be written in GFF3 format, using the provided GFF3 <italic toggle="yes">TextFormats</italic> specification. The resulting file was correctly validated by the online GFF3 validation tool <ext-link xlink:href="http://genometools.org/cgi-bin/gff3validator.cgi" ext-link-type="uri">http://genometools.org/cgi-bin/gff3validator.cgi</ext-link> of the GenomeTools suite [<xref rid="pone.0268910.ref021" ref-type="bibr">21</xref>].</p>
    </sec>
    <sec id="sec017">
      <title>Case study 6: Repairing an invalid file</title>
      <p>Sometimes, due to some issues, a software tool outputs a file, which is invalid according to its format specification. When it is not possible to fix the software tool, the output file must be edited and corrected, so that it can be further processed with other tools, which assume a correct format. In the case of a complex format the correction can be very cumbersome, since it is necessary to edit the invalid formatted pieces of information but existing library often interrupt parsing due to the format error, and thus they can not be employed to edit the file content and fix the issue.</p>
      <p>For example, when extracting a sub-graph from a large GFA1 file, Bandage v.0.8.1 [<xref rid="pone.0268910.ref022" ref-type="bibr">22</xref>] outputs an invalid GFA1 file, which could not be loaded in standard-compliant GFA tools, such as GfaPy [<xref rid="pone.0268910.ref020" ref-type="bibr">20</xref>]. Using a <italic toggle="yes">TextFormats</italic>-based Python script, the invalid file was further investigated (<monospace>gfa1_show_invalid_lines.py</monospace>). This showed that the invalid tag type code ‘z’ was included in some tags (instead of the correct type code ‘Z’ for string types), and segment lines without sequences did not include the necessary <monospace>*</monospace> symbol instead of the sequence. An example of GFA1 file which causes such an issue when a subgraph is extracted is included in the <italic toggle="yes">TextFormats</italic> package (<monospace>complete_graph.gfa</monospace>).</p>
      <p>Here we show, how it is possible to use <italic toggle="yes">TextFormats</italic> for solving this problem. In particular, <italic toggle="yes">TextFormats</italic> allows import of an existing specification and changes to some parts of it. Thus, we created a new specification which describes the format of the corrupted file (<monospace>invalid_gfa.yaml</monospace>). In it, the original GFA1 specification was imported, the definition of tags was modified to include the incorrect tag code, and the definition of sequences was modified, so to accept empty strings instead of the <monospace>*</monospace> symbol.</p>
      <p>We then created a short Python script based on <italic toggle="yes">TextFormats</italic> (<monospace>gfa1_fix.py</monospace>) which parsed the output of Bandage using the <monospace>invalid_gfa.yaml</monospace> specification and output the graph using the GFA1 specification. The resulting file was valid GFA1, which could be correctly parsed by GfaPy.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="sec018">
    <title>Discussion and conclusion</title>
    <p><italic toggle="yes">TextFormats</italic> is a software library and toolset which aims at providing an easy system for the definition and access to text formats, which are very common in Bioinformatics. In particular, it provides a rapid prototyping solution to the tedious task of parsing formats for which a parsing library is not yet available. We tested the software by providing definitions of complex formats such as SAM (Case study 1). We compared the resulting SAM parser to the state-of-the art parsers based on the HTSlib library [<xref rid="pone.0268910.ref016" ref-type="bibr">16</xref>]. HTSlib resulted in much more efficient parsing and provides additional functionality, compared to the <italic toggle="yes">TextFormats</italic>-based application. However, the difference in the efforts required for implementing such a library is apparent when comparing the number of codes: HTSlib (as of version 1.13) consists of 84000 lines of code (and, of course, offers additional functionality). The SAM specification in the <italic toggle="yes">Text Formats Specification Language</italic> consists of a mere 132 lines. In another example, Case study 4, we implemented Python scripts for collecting statistics from GFA2 files. The script based on <italic toggle="yes">TextFormats</italic> and a TFSL specification for GFA2 (224 lines) and a Python cross-validation module (127 lines) had a better performance than a script based on the Python library GfaPy which (as of version 1.2.3) consists of over 10000 lines of code. Thus, we think that <italic toggle="yes">TextFormats</italic> represents a useful tool, a tradeoff between computational performance and development effort, when implementing bioinformatics scripts and pipelines, in which file formats must be accessed for which no software is yet available.</p>
    <p>In many cases, bioinformatics formats are only defined in text documents. This is for example the case for accession numbers of sequence databases (Case study 2). <italic toggle="yes">TextFormats</italic> does not require the user to write the formal grammar for describing a format, a task which can be challenging and is rarely used in bioinformatics. It relies on a simpler, human readable, definition language <italic toggle="yes">TFSL</italic>. This hopefully will encourage authors of tools and databases to provide a specification to their data formats, instead of a mere description text. Such a specification could directly be used for working with the data in the format.</p>
    <p>In Case study 3, we made an example of design and definition of a format from scratch, using <italic toggle="yes">TextFormats</italic> and compared this to the development of an <italic toggle="yes">ad hoc</italic> Python parser. While the <italic toggle="yes">ad hoc</italic> parser was faster in handling an example input file, the development effort was also much higher. <italic toggle="yes">TextFormats</italic> specification consisted of a 150 lines YAML file. The <italic toggle="yes">ad hoc</italic> parser code is much more complex and difficult to maintain: it consists of about 700 lines of Python code, for a total of 73 methods, aimed at parsing and writing all elements of the defined format. It necessarily mixes the format definition with code for parsing and writing data based on those definition. In contrast, using <italic toggle="yes">TextFormats</italic> the structure of the format is immediately apparent from the format specification file. Thus it is very easy to change any element of the format, and even the whole structure of the file, which is very useful during the development of a new format. Also, <italic toggle="yes">TextFormats</italic> provides further functionality, such as testing and automatic examples generation from the format specification.</p>
    <p>Also when adopted for reading or writing existing formats, <italic toggle="yes">TextFormats</italic> can be useful. In Case study 5, for example, we demonstrate the use of <italic toggle="yes">TextFormats</italic> for converting annotation data in a table to the standard GGF3 format. In another example (Case study 6), we demonstrated the correction of an invalid GFA1 file output by another tool, which was rejected by standard-compliant parsers. The <italic toggle="yes">TextFormats</italic> specification for GFA1 could be used for identifying invalid elements of the file. Without <italic toggle="yes">TextFormats</italic>, correcting these elements requires to correctly fetch them among the rest of the file content. For a complex format such as GFA1, performing this operation correctly requires parsing at least the relevant parts of the format. Thus, it would require to either write a parser from scratch or patch the source code of an existing parsing library for the format. In <italic toggle="yes">TextFormats</italic> the file correction much easier, as it allows overwriting definitions of imported specifications. Thus, a patched specification for GFA1 was easily constructed just overwriting the parts of the format defining the invalid elements (15 lines of TFSL specification).</p>
    <p>Although we think that <italic toggle="yes">TextFormats</italic> can be very useful in applied bioinformatics, it is also has some limitations, which could be addressed in future versions of the software. First, its lower performance compared to ad hoc format parsers is partly inherent in the dynamic nature of the software, as <italic toggle="yes">TextFormats</italic> must employ flexible data structures for the representation of data, whose type is not known when compiling the library. In this context, an interesting feature of Nim, not used in the current implementation, is the ability to execute a subset of the language at compile time; A growing number of Nim libraries support this feature. It is conceivable to exploit this functionality by giving the Nim compiler further information about the types of data to be represented, given a <italic toggle="yes">TFSL</italic> specification. This would allow it to create versions of the software addressed at single formats only, but with higher performance.</p>
    <p>Although <italic toggle="yes">TextFormats</italic> is written in Nim, a programming language which is rather unusual for bioinformatics software, the user of the library does not need to employ the same language. Instead, API for Python and C are provided. A major goal of the library is rapid development, and Python is a very popular rapid development language in the bioinformatics community. Thus, it is foreseeable that most user will employ the library through the Python API. An example of development of Python tools using <italic toggle="yes">TextFormats</italic> is given in Case study 4. It is worth noting that installing the Python library is very easy: The documentation includes details of the procedure, which in many cases do not even require a Nim compiler, but just to run the command <italic toggle="yes">pip install textformats</italic>.</p>
    <p>It could be argued that a package mainly intended to be used from Python should be implemented in Python itself. To analyse the overhead represented by the use of the library in a different language than the implementation language Nim, we implemented equivalent <italic toggle="yes">TextFormats</italic>-based programs (Case study 1 and Case study 4) in Nim, Python and C. Since Nim is compiled to C, the overhead of using C instead of Nim itself is very limited: for the program described in Case study 1, it was 2.9% to 3.3% (<xref rid="pone.0268910.t004" ref-type="table">Table 4</xref>), while the program described in Case study 3 runs slightly faster when written in C (1.3% to 2.3% faster). The overhead in Python was measured comparing the running times to Nim implementations of the programs described in Case study 1, Case study 3 and Case study 4. It was higher than in C, with values ranging from 3.5% to 9.9%. The additional time is required for the initialization of the Python interpreter (which would be required also if the library would be implemented in Python) and for the data exchange, which requires Python object initializations handled under the hood by the <italic toggle="yes">Nimpy</italic> library (for example for strings, which are in Python stored as immutable objects). However, when using a compiled language, such as Nim, instead of Python, for developing Python libraries, the higher performance of compiled code compensates this additional time. For this reason several popular Python packages in science, such as Numpy and Scipy, are implemented as C extensions. Nim is compiled to C, and its Python interface is based on the same Python C extension API used by those packages.</p>
    <p>One of the central features is the generation of regular expressions for the datatypes defined in the specification, from the description of the datatypes in <italic toggle="yes">TFSL</italic>. These regular expressions, in most cases, are used to parse the input and capture its components. As a consequence, a limitation of the library is that the formats that can be specified must be, in general, regular languages [<xref rid="pone.0268910.ref023" ref-type="bibr">23</xref>]. Another parsing strategy, not based on regular expressions, would be required to overcome this limitation. Fortunately, most bioinformatics text formats are regular languages. Still, some formats allow any degree of nesting of elements, e.g. the Newick format for phylogenetic trees [<xref rid="pone.0268910.ref024" ref-type="bibr">24</xref>], and thus cannot be currently described in the current version of <italic toggle="yes">TFSL</italic>. There is an exception to this limitation: JSON, including any level of recursion, can be embedded in any format supported by <italic toggle="yes">TextFormats</italic>. This is achieved by delegating the parsing of the embedded JSON to the Nim JSON library; this functionality could also be extended by interfacing additional external libraries.</p>
    <p>A further current limitation of <italic toggle="yes">TextFormats</italic> is in the validation of data, whenever the comparison of non-adjacent pieces of information is necessary. For example, in a format representing a graph (e.g. GFA [<xref rid="pone.0268910.ref008" ref-type="bibr">8</xref>]), it is not possible to model in the specification the constraints that all edges must refer to valid nodes, since the nodes are defined elsewhere in the file. Currently, such additional validations can be implemented as an additional layer on the data parsed by <italic toggle="yes">TextFormats</italic>, as exemplified for the GFA2 format in Case study 4. In future versions of <italic toggle="yes">TextFormats</italic>, this validation layer could be generalized and integrated in the library. This will require a system for addressing each single part of a format definition and a temporary storage of information which must be used as comparison reference (e.g. sets valid of identifiers).</p>
    <p>To conclude, we think that <italic toggle="yes">TextFormats</italic>, alongside current alternatives (such as writing parser scripts) and despite some limitations described above, is an useful and powerful system for rapidly supporting access to information in new bioinformatics text formats, as well as for the definition of new formats, by providing a simple but effective format definition language.</p>
  </sec>
  <sec id="sec019" sec-type="supplementary-material">
    <title>Supporting information</title>
    <supplementary-material id="pone.0268910.s001" position="float" content-type="local-data">
      <label>S1 Appendix</label>
      <caption>
        <title>Example code based on <italic toggle="yes">TextFormats</italic>.</title>
        <p>Examples of Python, Nim, Bash and C code using the <italic toggle="yes">TextFormats</italic> library for parsing a text format.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0268910.s001.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="pone.0268910.s002" position="float" content-type="local-data">
      <label>S2 Appendix</label>
      <caption>
        <title>Comparison of the available regular expression libraries for Nim.</title>
        <p>Comparisons of the performance and features of the currently available regular expression libraries for the Nim programming language: re, nre, regex and nregex.</p>
        <p>(PDF)</p>
      </caption>
      <media xlink:href="pone.0268910.s002.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <p>Many thanks to Burkhard Morgenstern (Department of Bioinformatics, University of Göttingen), Marco Matthies and Stefan Kurtz (Center for Bioinformatics, University of Hamburg) for helpful discussions; to Serena Lam (Department of Bioinformatics, University of Göttingen) for language style suggestions and grammar corrections.</p>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="pone.0268910.ref001">
      <label>1</label>
      <mixed-citation publication-type="journal"><name><surname>Leonard</surname><given-names>SA</given-names></name>, <name><surname>Littlejohn</surname><given-names>TG</given-names></name>, <name><surname>Baxevanis</surname><given-names>AD</given-names></name>. <article-title>Common File Formats</article-title>. <source>Current Protocols in Bioinformatics</source>. <year>2006</year>;<volume>16</volume>(<issue>1</issue>):<fpage>A.1B.1</fpage>–<lpage>A.1B.9</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1002/0471250953.bia01bs16</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref002">
      <label>2</label>
      <mixed-citation publication-type="journal"><name><surname>Mills</surname><given-names>L</given-names></name>. <article-title>Common File Formats</article-title>. <source>Current Protocols in Bioinformatics</source>. <year>2014</year>;<volume>45</volume>(<issue>1</issue>):<fpage>A.1B.1</fpage>–<lpage>A.1B.18</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1002/0471250953.bia01bs45</pub-id><?supplied-pmid 26270173?><pub-id pub-id-type="pmid">26270173</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref003">
      <label>3</label>
      <mixed-citation publication-type="journal"><name><surname>Hung</surname><given-names>JH</given-names></name>, <name><surname>Weng</surname><given-names>Z</given-names></name>. <article-title>Data formats in bioinformatics</article-title>. <source>Cold Spring Harbor Protocols</source>. <year>2016</year>;<volume>2016</volume>(<issue>8</issue>):<fpage>669</fpage>–<lpage>671</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1101/pdb.top093211</pub-id><?supplied-pmid 27480726?><pub-id pub-id-type="pmid">27480726</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref004">
      <label>4</label>
      <mixed-citation publication-type="other">American Standards Association. American Standard Code for Information Interchange, ASA X3.4-1963; 1963.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref005">
      <label>5</label>
      <mixed-citation publication-type="book"><collab>The Unicode Consortium</collab>. <source>The Unicode Standard, Version 1.0</source>, Volume <volume>1</volume>. <publisher-loc>Reading, MA</publisher-loc>: <publisher-name>Addison-Wesley Developers Press</publisher-name>; <year>1991</year>.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref006">
      <label>6</label>
      <mixed-citation publication-type="other">The Linux Information Project. Binary File Definition; 2006. Available from: <ext-link xlink:href="http://linfo.org/binary_file.html" ext-link-type="uri">http://linfo.org/binary_file.html</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref007">
      <label>7</label>
      <mixed-citation publication-type="journal"><name><surname>Li</surname><given-names>H</given-names></name>. <article-title>Minimap and miniasm: fast mapping and de novo assembly for noisy long sequences</article-title>. <source>Bioinformatics</source>. <year>2016</year>;<volume>32</volume>(<issue>14</issue>):<fpage>2103</fpage>–<lpage>2110</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/btw152</pub-id><?supplied-pmid 27153593?><pub-id pub-id-type="pmid">27153593</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref008">
      <label>8</label>
      <mixed-citation publication-type="other">GFA Format Specification Working Group. The GFA Format Specification; 2020. Available from: <ext-link xlink:href="http://gfa-spec.github.io/GFA-spec/GFA1.html" ext-link-type="uri">http://gfa-spec.github.io/GFA-spec/GFA1.html</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref009">
      <label>9</label>
      <mixed-citation publication-type="other">GFA Format Specification Working Group. Graphical Fragment Assembly (GFA) 2.0 Format Specification; 2020. Available from: <ext-link xlink:href="http://gfa-spec.github.io/GFA-spec/GFA2.html" ext-link-type="uri">http://gfa-spec.github.io/GFA-spec/GFA2.html</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref010">
      <label>10</label>
      <mixed-citation publication-type="journal"><name><surname>Li</surname><given-names>H</given-names></name>, <name><surname>Feng</surname><given-names>X</given-names></name>, <name><surname>Chu</surname><given-names>C</given-names></name>. <article-title>The design and construction of reference pangenome graphs with minigraph</article-title>. <source>Genome Biology</source>. <year>2020</year>;<volume>21</volume>(<issue>1</issue>):<fpage>265</fpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1186/s13059-020-02168-z</pub-id><?supplied-pmid 33066802?><pub-id pub-id-type="pmid">33066802</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref011">
      <label>11</label>
      <mixed-citation publication-type="journal"><name><surname>Li</surname><given-names>H</given-names></name>, <name><surname>Handsaker</surname><given-names>B</given-names></name>, <name><surname>Wysoker</surname><given-names>A</given-names></name>, <name><surname>Fennell</surname><given-names>T</given-names></name>, <name><surname>Ruan</surname><given-names>J</given-names></name>, <name><surname>Homer</surname><given-names>N</given-names></name>, <etal>et al</etal>. <article-title>The Sequence Alignment/Map format and SAMtools</article-title>. <source>Bioinformatics</source>. <year>2009</year>;<volume>25</volume>(<issue>16</issue>):<fpage>2078</fpage>–<lpage>2079</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/btp352</pub-id><?supplied-pmid 19505943?><pub-id pub-id-type="pmid">19505943</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref012">
      <label>12</label>
      <mixed-citation publication-type="other">Li H. Fast high-level programming languages; 2020. Available from: <ext-link xlink:href="http://lh3.github.io/2020/05/17/fast-high-level-programming-languages" ext-link-type="uri">http://lh3.github.io/2020/05/17/fast-high-level-programming-languages</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref013">
      <label>13</label>
      <mixed-citation publication-type="journal"><name><surname>Pedersen</surname><given-names>BS</given-names></name>, <name><surname>Quinlan</surname><given-names>AR</given-names></name>. <article-title>hts-nim: scripting high-performance genomic analyses</article-title>. <source>Bioinformatics</source>. <year>2018</year>;<volume>34</volume>(<issue>19</issue>):<fpage>3387</fpage>–<lpage>3389</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/bty358</pub-id><?supplied-pmid 29718142?><pub-id pub-id-type="pmid">29718142</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref014">
      <label>14</label>
      <mixed-citation publication-type="journal"><name><surname>Pedersen</surname><given-names>BS</given-names></name>, <name><surname>Quinlan</surname><given-names>AR</given-names></name>. <article-title>Mosdepth: quick coverage calculation for genomes and exomes</article-title>. <source>Bioinformatics</source>. <year>2017</year>;<volume>34</volume>(<issue>5</issue>):<fpage>867</fpage>–<lpage>868</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/btx699</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref015">
      <label>15</label>
      <mixed-citation publication-type="other">The SAM/BAM Format Specification Working Group. Sequence Alignment/Map Format Specification; 2021. Available from: <ext-link xlink:href="https://samtools.github.io/hts-specs/SAMv1.pdf" ext-link-type="uri">https://samtools.github.io/hts-specs/SAMv1.pdf</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref016">
      <label>16</label>
      <mixed-citation publication-type="journal"><name><surname>Bonfield</surname><given-names>JK</given-names></name>, <name><surname>Marshall</surname><given-names>J</given-names></name>, <name><surname>Danecek</surname><given-names>P</given-names></name>, <name><surname>Li</surname><given-names>H</given-names></name>, <name><surname>Ohan</surname><given-names>V</given-names></name>, <name><surname>Whitwham</surname><given-names>A</given-names></name>, <etal>et al</etal>. <article-title>HTSlib: C library for reading/writing high-throughput sequencing data</article-title>. <source>GigaScience</source>. <year>2021</year>;<volume>10</volume>(<issue>2</issue>). <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/gigascience/giab007</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref017">
      <label>17</label>
      <mixed-citation publication-type="other">Heger A, Jacobs K, contributors. Pysam: htslib interface for python; 2021. Available from: <ext-link xlink:href="https://pysam.readthedocs.io" ext-link-type="uri">https://pysam.readthedocs.io</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref018">
      <label>18</label>
      <mixed-citation publication-type="journal"><name><surname>Auton</surname><given-names>A</given-names></name>, <name><surname>Abecasis</surname><given-names>GR</given-names></name>, <name><surname>Altshuler</surname><given-names>DM</given-names></name>, <name><surname>Durbin</surname><given-names>RM</given-names></name>, <name><surname>Abecasis</surname><given-names>GR</given-names></name>, <name><surname>Bentley</surname><given-names>DR</given-names></name>, <etal>et al</etal>. <article-title>A global reference for human genetic variation</article-title>. <source>Nature</source>. <year>2015</year>;<volume>526</volume>(<issue>7571</issue>):<fpage>68</fpage>–<lpage>74</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1038/nature15393</pub-id><?supplied-pmid 26432245?><pub-id pub-id-type="pmid">26432245</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref019">
      <label>19</label>
      <mixed-citation publication-type="other">Free Software Foundation. GNU Time; 2018. Available from: <ext-link xlink:href="https://www.gnu.org/software/time/" ext-link-type="uri">https://www.gnu.org/software/time/</ext-link>.</mixed-citation>
    </ref>
    <ref id="pone.0268910.ref020">
      <label>20</label>
      <mixed-citation publication-type="journal"><name><surname>Gonnella</surname><given-names>G</given-names></name>, <name><surname>Kurtz</surname><given-names>S</given-names></name>. <article-title>GfaPy: a flexible and extensible software library for handling sequence graphs in Python</article-title>. <source>Bioinformatics</source>. <year>2017</year>;<volume>33</volume>(<issue>19</issue>):<fpage>3094</fpage>–<lpage>3095</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/btx398</pub-id><?supplied-pmid 28645150?><pub-id pub-id-type="pmid">28645150</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref021">
      <label>21</label>
      <mixed-citation publication-type="journal"><name><surname>Gremme</surname><given-names>G</given-names></name>, <name><surname>Steinbiss</surname><given-names>S</given-names></name>, <name><surname>Kurtz</surname><given-names>S</given-names></name>. <article-title>GenomeTools: a comprehensive software library for efficient processing of structured genome annotations</article-title>. <source>IEEE/ACM transactions on computational biology and bioinformatics</source>. <year>2013</year>;<volume>10</volume>(<issue>3</issue>):<fpage>645</fpage>–<lpage>656</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1109/TCBB.2013.68</pub-id><?supplied-pmid 24091398?><pub-id pub-id-type="pmid">24091398</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref022">
      <label>22</label>
      <mixed-citation publication-type="journal"><name><surname>Wick</surname><given-names>RR</given-names></name>, <name><surname>Schultz</surname><given-names>MB</given-names></name>, <name><surname>Zobel</surname><given-names>J</given-names></name>, <name><surname>Holt</surname><given-names>KE</given-names></name>. <article-title>Bandage: Interactive visualization of de novo genome assemblies</article-title>. <source>Bioinformatics</source>. <year>2015</year>;. <comment>doi: </comment><pub-id pub-id-type="doi">10.1093/bioinformatics/btv383</pub-id><?supplied-pmid 26099265?><pub-id pub-id-type="pmid">26099265</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref023">
      <label>23</label>
      <mixed-citation publication-type="journal"><name><surname>Chomsky</surname><given-names>N</given-names></name>. <article-title>Three models for the description of language</article-title>. <source>IRE Transactions on Information Theory</source>. <year>1956</year>;<volume>2</volume>(<issue>3</issue>):<fpage>113</fpage>–<lpage>124</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1109/TIT.1956.1056813</pub-id></mixed-citation>
    </ref>
    <ref id="pone.0268910.ref024">
      <label>24</label>
      <mixed-citation publication-type="journal"><name><surname>Cardona</surname><given-names>G</given-names></name>, <name><surname>Rosselló</surname><given-names>F</given-names></name>, <name><surname>Valiente</surname><given-names>G</given-names></name>. <article-title>Extended Newick: it is time for a standard representation of phylogenetic networks</article-title>. <source>BMC bioinformatics</source>. <year>2008</year>;<volume>9</volume>:<fpage>532</fpage>–<lpage>532</lpage>. <comment>doi: </comment><pub-id pub-id-type="doi">10.1186/1471-2105-9-532</pub-id><?supplied-pmid 19077301?><pub-id pub-id-type="pmid">19077301</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
<sub-article article-type="aggregated-review-documents" id="pone.0268910.r001" specific-use="decision-letter">
  <front-stub>
    <article-id pub-id-type="doi">10.1371/journal.pone.0268910.r001</article-id>
    <title-group>
      <article-title>Decision Letter 0</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Rahman</surname>
          <given-names>M. Sohel</given-names>
        </name>
        <role>Academic Editor</role>
      </contrib>
    </contrib-group>
    <permissions>
      <copyright-statement>© 2022 M. Sohel Rahman</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>M. Sohel Rahman</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <related-article ext-link-type="doi" xlink:href="10.1371/journal.pone.0268910" id="rel-obj001" related-article-type="reviewed-article"/>
    <custom-meta-group>
      <custom-meta>
        <meta-name>Submission Version</meta-name>
        <meta-value>0</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>
      <named-content content-type="letter-date">17 Jan 2022</named-content>
    </p>
    <p><!-- <div> -->PONE-D-21-34058<!-- </div> --><!-- <div> -->TextFormats: simplifying the definition and parsing of text formats in bioinformatics<!-- </div> --><!-- <div> -->PLOS ONE</p>
    <p>Dear Dr. Gonnella,</p>
    <p>Thank you for submitting your manuscript to PLOS ONE. After careful consideration, we feel that it has merit but does not fully meet PLOS ONE’s publication criteria as it currently stands. Therefore, we invite you to submit a revised version of the manuscript that addresses the points raised during the review process.<!-- </div> --><!-- <div> --> <!-- </div> --><!-- <div> -->In particular, in the revised manuscript (should you decide to revise), I would expect a comparative analysis as indicated by the reviewer. Adding another use case is also highly recommended.<!-- </div> --></p>
    <p>Please submit your revised manuscript by Mar 03 2022 11:59PM. If you will need more time than this to complete your revisions, please reply to this message or contact the journal office at <email>plosone@plos.org</email>. When you're ready to submit your revision, log on to <ext-link xlink:href="https://www.editorialmanager.com/pone/" ext-link-type="uri">https://www.editorialmanager.com/pone/</ext-link> and select the 'Submissions Needing Revision' folder to locate your manuscript file.</p>
    <p>Please include the following items when submitting your revised manuscript:</p>
    <p>
      <list list-type="bullet">
        <list-item>
          <p>A rebuttal letter that responds to each point raised by the academic editor and reviewer(s). You should upload this letter as a separate file labeled 'Response to Reviewers'.</p>
        </list-item>
        <list-item>
          <p>A marked-up copy of your manuscript that highlights changes made to the original version. You should upload this as a separate file labeled 'Revised Manuscript with Track Changes'.</p>
        </list-item>
        <list-item>
          <p>An unmarked version of your revised paper without tracked changes. You should upload this as a separate file labeled 'Manuscript'.</p>
        </list-item>
      </list>
    </p>
    <p>If you would like to make changes to your financial disclosure, please include your updated statement in your cover letter. Guidelines for resubmitting your figure files are available below the reviewer comments at the end of this letter.</p>
    <p>If applicable, we recommend that you deposit your laboratory protocols in protocols.io to enhance the reproducibility of your results. Protocols.io assigns your protocol its own identifier (DOI) so that it can be cited independently in the future. For instructions see: <ext-link xlink:href="https://journals.plos.org/plosone/s/submission-guidelines#loc-laboratory-protocols" ext-link-type="uri">https://journals.plos.org/plosone/s/submission-guidelines#loc-laboratory-protocols</ext-link>. Additionally, PLOS ONE offers an option for publishing peer-reviewed Lab Protocol articles, which describe protocols hosted on protocols.io. Read more information on sharing protocols at <ext-link xlink:href="https://plos.org/protocols?utm_medium=editorial-email&amp;utm_source=authorletters&amp;utm_campaign=protocols" ext-link-type="uri">https://plos.org/protocols?utm_medium=editorial-email&amp;utm_source=authorletters&amp;utm_campaign=protocols</ext-link>.</p>
    <p>We look forward to receiving your revised manuscript.</p>
    <p>Kind regards,</p>
    <p>M. Sohel Rahman, Ph.D.</p>
    <p>Academic Editor</p>
    <p>PLOS ONE</p>
    <p>Journal Requirements:</p>
    <p>When submitting your revision, we need you to address these additional requirements.</p>
    <p>1. Please ensure that your manuscript meets PLOS ONE's style requirements, including those for file naming. The PLOS ONE style templates can be found at</p>
    <p><ext-link xlink:href="https://journals.plos.org/plosone/s/file?id=wjVg/PLOSOne_formatting_sample_main_body.pdf" ext-link-type="uri">https://journals.plos.org/plosone/s/file?id=wjVg/PLOSOne_formatting_sample_main_body.pdf</ext-link> and</p>
    <p>
      <ext-link xlink:href="https://journals.plos.org/plosone/s/file?id=ba62/PLOSOne_formatting_sample_title_authors_affiliations.pdf" ext-link-type="uri">https://journals.plos.org/plosone/s/file?id=ba62/PLOSOne_formatting_sample_title_authors_affiliations.pdf</ext-link>
    </p>
    <p>2. Thank you for stating the following in the Acknowledgments Section of your manuscript:</p>
    <p>“This work has been supported by the DFG Grant GO 3192/1-1 “Automated characterization of microbial genomes and metagenomes by collection and verification of association rules”.”</p>
    <p>We note that you have provided additional information within the Acknowledgements Section that is not currently declared in your Funding Statement. Please note that funding information should not appear in the Acknowledgments section or other areas of your manuscript. We will only publish funding information present in the Funding Statement section of the online submission form.</p>
    <p>Please remove any funding-related text from the manuscript and let us know how you would like to update your Funding Statement. Currently, your Funding Statement reads as follows:</p>
    <p>“Giorgio Gonnella has been supported by the DFG Grant GO 3192/1-1 ``Automated</p>
    <p>characterization of microbial genomes and metagenomes by collection and</p>
    <p>verification of association rules''.</p>
    <p>The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.”</p>
    <p>Please include your amended statements within your cover letter; we will change the online submission form on your behalf.</p>
    <p>3. Please include captions for your Supporting Information files at the end of your manuscript, and update any in-text citations to match accordingly. Please see our Supporting Information guidelines for more information: <ext-link xlink:href="http://journals.plos.org/plosone/s/supporting-information" ext-link-type="uri">http://journals.plos.org/plosone/s/supporting-information</ext-link>.</p>
    <p>[Note: HTML markup is below. Please do not edit.]</p>
    <p>Reviewers' comments:</p>
    <p>Reviewer's Responses to Questions</p>
    <p>
      <!-- <font color="black"> -->
      <bold>Comments to the Author</bold>
    </p>
    <p>1. Is the manuscript technically sound, and do the data support the conclusions?</p>
    <p>The manuscript must describe a technically sound piece of scientific research with data that supports the conclusions. Experiments must have been conducted rigorously, with appropriate controls, replication, and sample sizes. The conclusions must be drawn appropriately based on the data presented. <!-- </font> --></p>
    <p>Reviewer #1: Partly</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->2. Has the statistical analysis been performed appropriately and rigorously? <!-- </font> --></p>
    <p>Reviewer #1: N/A</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->3. Have the authors made all data underlying the findings in their manuscript fully available?</p>
    <p>The <ext-link xlink:href="http://www.plosone.org/static/policies.action#sharing" ext-link-type="uri">PLOS Data policy</ext-link> requires authors to make all data underlying the findings described in their manuscript fully available without restriction, with rare exception (please refer to the Data Availability Statement in the manuscript PDF file). The data should be provided as part of the manuscript or its supporting information, or deposited to a public repository. For example, in addition to summary statistics, the data points behind means, medians and variance measures should be available. If there are restrictions on publicly sharing data—e.g. participant privacy or use of data from a third party—those must be specified.<!-- </font> --></p>
    <p>Reviewer #1: Yes</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->4. Is the manuscript presented in an intelligible fashion and written in standard English?</p>
    <p>PLOS ONE does not copyedit accepted manuscripts, so the language in submitted articles must be clear, correct, and unambiguous. Any typographical or grammatical errors should be corrected at revision, so please note any specific errors here.<!-- </font> --></p>
    <p>Reviewer #1: Yes</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->5. Review Comments to the Author</p>
    <p>Please use the space provided to explain your answers to the questions above. You may also include additional comments for the author, including concerns about dual publication, research ethics, or publication ethics. (Please upload your review as an attachment if it exceeds 20,000 characters)<!-- </font> --></p>
    <p>Reviewer #1: The paper “TextFormats: simplifying the definition and parsing of text formats in bioinformatics” by Giorgio Gonnella presents a framework that tries to unify different data formats commonly used in bioinformatics and builds on top of it to present a tool to specify the new format that might be used in the literature in the field. This tool was implemented in Nim programming language with wrappers to extend it in C/C++ and Python. The software provides three basic functionalities, encoding, decoding, and validation of generally defined bioinformatics formats. The results include three case studies - parsing complex alignment formats like SAM, parsing sequence-based formats, and finally, defining and parsing a new format.</p>
    <p>Major concerns -</p>
    <p>The choice of programming language is very peculiar. Nim is a language that is very rarely used in bioinformatics. With the growing popularity, flexibility, and user-friendliness of python-based tools and the availability of trusted legacy software written in C/C++/Java/Bash, it can be safely assumed that Nim as a language does not have much of a future in this domain. Even though the authors have developed APIs and wrappers to support other languages in TextFormats, I believe trying to use this tool in other programming languages for critical bioinformatics operation would prove unnecessarily tedious and time-consuming. An analysis showing the compilation and run-time of TextFormats in different languages might prove otherwise.</p>
    <p>The authors have mentioned other general-purpose standard data formats such as GFA2; however, the result and discussion do not portray any comparative analysis with such format. Such analysis is required, along with the ad-hoc format parsing.</p>
    <p>Although the authors have mentioned two major applications of the tool by working with both alignment and sequence formats, they have omitted the tool’s applicability in another major use case, feature formats such as GFF, GTF.</p>
    <p>Minor concerns -</p>
    <p>A visualization of the TFSL specification tree would clarify the specification representation clearly missing in the paper.</p>
    <p>Line number 3, binary format &gt; formats</p>
    <p>Line 43, become &gt; became</p>
    <p>I.e., e.g. etc. should be followed by a comma(,).</p>
    <p>Several minor grammatical mistakes</p>
    <p>In conclusion, I believe that the software has novelty and can have a good prospect. However, as the premise of such a general-purpose framework is the user applications, the language should be one of current practice. Even then, I would recommend acceptance if the authors can provide substantial evidence regarding acceptable compilation and running time of the software in other languages through their developed APIs.</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->6. PLOS authors have the option to publish the peer review history of their article (<ext-link xlink:href="https://journals.plos.org/plosone/s/editorial-and-peer-review-process#loc-peer-review-history" ext-link-type="uri">what does this mean?</ext-link>). If published, this will include your full peer review and any attached files.</p>
    <p>If you choose “no”, your identity will remain anonymous but your review may still be made public.</p>
    <p><bold>Do you want your identity to be public for this peer review?</bold> For information about this choice, including consent withdrawal, please see our <ext-link xlink:href="https://www.plos.org/privacy-policy" ext-link-type="uri">Privacy Policy</ext-link>.<!-- </font> --></p>
    <p>Reviewer #1: No</p>
    <p>[NOTE: If reviewer comments were submitted as an attachment file, they will be attached to this email and accessible via the submission site. Please log into your account, locate the manuscript record, and check for the action link "View Attachments". If this link does not appear, there are no attachment files.]</p>
    <p>While revising your submission, please upload your figure files to the Preflight Analysis and Conversion Engine (PACE) digital diagnostic tool, <ext-link xlink:href="https://pacev2.apexcovantage.com/" ext-link-type="uri">https://pacev2.apexcovantage.com/</ext-link>. PACE helps ensure that figures meet PLOS requirements. To use PACE, you must first register as a user. Registration is free. Then, login and navigate to the UPLOAD tab, where you will find detailed instructions on how to use the tool. If you encounter any issues or have any questions when using PACE, please email PLOS at <email>figures@plos.org</email>. Please note that Supporting Information files do not need this step.</p>
  </body>
</sub-article>
<sub-article article-type="author-comment" id="pone.0268910.r002">
  <front-stub>
    <article-id pub-id-type="doi">10.1371/journal.pone.0268910.r002</article-id>
    <title-group>
      <article-title>Author response to Decision Letter 0</article-title>
    </title-group>
    <related-article ext-link-type="doi" xlink:href="10.1371/journal.pone.0268910" id="rel-obj002" related-article-type="editor-report"/>
    <custom-meta-group>
      <custom-meta>
        <meta-name>Submission Version</meta-name>
        <meta-value>1</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>
      <named-content content-type="author-response-date">2 Mar 2022</named-content>
    </p>
    <p>Please refer to the attached document with the responses to the reviewers and editor comments.</p>
    <supplementary-material id="pone.0268910.s003" position="float" content-type="local-data">
      <label>Attachment</label>
      <caption>
        <p>Submitted filename: <named-content content-type="submitted-filename">response-to-reviewers.pdf</named-content></p>
      </caption>
      <media xlink:href="pone.0268910.s003.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </body>
</sub-article>
<sub-article article-type="aggregated-review-documents" id="pone.0268910.r003" specific-use="decision-letter">
  <front-stub>
    <article-id pub-id-type="doi">10.1371/journal.pone.0268910.r003</article-id>
    <title-group>
      <article-title>Decision Letter 1</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Rahman</surname>
          <given-names>M. Sohel</given-names>
        </name>
        <role>Academic Editor</role>
      </contrib>
    </contrib-group>
    <permissions>
      <copyright-statement>© 2022 M. Sohel Rahman</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>M. Sohel Rahman</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <related-article ext-link-type="doi" xlink:href="10.1371/journal.pone.0268910" id="rel-obj003" related-article-type="reviewed-article"/>
    <custom-meta-group>
      <custom-meta>
        <meta-name>Submission Version</meta-name>
        <meta-value>1</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>
      <named-content content-type="letter-date">11 May 2022</named-content>
    </p>
    <p>TextFormats: simplifying the definition and parsing of text formats in bioinformatics</p>
    <p>PONE-D-21-34058R1</p>
    <p>Dear Dr. Gonnella,</p>
    <p>We’re pleased to inform you that your manuscript has been judged scientifically suitable for publication and will be formally accepted for publication once it meets all outstanding technical requirements.</p>
    <p>Within one week, you’ll receive an e-mail detailing the required amendments. When these have been addressed, you’ll receive a formal acceptance letter and your manuscript will be scheduled for publication.</p>
    <p>An invoice for payment will follow shortly after the formal acceptance. To ensure an efficient process, please log into Editorial Manager at <ext-link xlink:href="http://www.editorialmanager.com/pone/" ext-link-type="uri">http://www.editorialmanager.com/pone/</ext-link>, click the 'Update My Information' link at the top of the page, and double check that your user information is up-to-date. If you have any billing related questions, please contact our Author Billing department directly at <email>authorbilling@plos.org</email>.</p>
    <p>If your institution or institutions have a press office, please notify them about your upcoming paper to help maximize its impact. If they’ll be preparing press materials, please inform our press team as soon as possible -- no later than 48 hours after receiving the formal acceptance. Your manuscript will remain under strict press embargo until 2 pm Eastern Time on the date of publication. For more information, please contact <email>onepress@plos.org</email>.</p>
    <p>Kind regards,</p>
    <p>M. Sohel Rahman, Ph.D.</p>
    <p>Academic Editor</p>
    <p>PLOS ONE</p>
    <p>Additional Editor Comments (optional):</p>
    <p>Reviewers' comments:</p>
    <p>Reviewer's Responses to Questions</p>
    <p>
      <!-- <font color="black"> -->
      <bold>Comments to the Author</bold>
    </p>
    <p>1. If the authors have adequately addressed your comments raised in a previous round of review and you feel that this manuscript is now acceptable for publication, you may indicate that here to bypass the “Comments to the Author” section, enter your conflict of interest statement in the “Confidential to Editor” section, and submit your "Accept" recommendation.<!-- </font> --></p>
    <p>Reviewer #1: All comments have been addressed</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->2. Is the manuscript technically sound, and do the data support the conclusions?</p>
    <p>The manuscript must describe a technically sound piece of scientific research with data that supports the conclusions. Experiments must have been conducted rigorously, with appropriate controls, replication, and sample sizes. The conclusions must be drawn appropriately based on the data presented. <!-- </font> --></p>
    <p>Reviewer #1: Yes</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->3. Has the statistical analysis been performed appropriately and rigorously? <!-- </font> --></p>
    <p>Reviewer #1: N/A</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->4. Have the authors made all data underlying the findings in their manuscript fully available?</p>
    <p>The <ext-link xlink:href="http://www.plosone.org/static/policies.action#sharing" ext-link-type="uri">PLOS Data policy</ext-link> requires authors to make all data underlying the findings described in their manuscript fully available without restriction, with rare exception (please refer to the Data Availability Statement in the manuscript PDF file). The data should be provided as part of the manuscript or its supporting information, or deposited to a public repository. For example, in addition to summary statistics, the data points behind means, medians and variance measures should be available. If there are restrictions on publicly sharing data—e.g. participant privacy or use of data from a third party—those must be specified.<!-- </font> --></p>
    <p>Reviewer #1: Yes</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->5. Is the manuscript presented in an intelligible fashion and written in standard English?</p>
    <p>PLOS ONE does not copyedit accepted manuscripts, so the language in submitted articles must be clear, correct, and unambiguous. Any typographical or grammatical errors should be corrected at revision, so please note any specific errors here.<!-- </font> --></p>
    <p>Reviewer #1: Yes</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->6. Review Comments to the Author</p>
    <p>Please use the space provided to explain your answers to the questions above. You may also include additional comments for the author, including concerns about dual publication, research ethics, or publication ethics. (Please upload your review as an attachment if it exceeds 20,000 characters)<!-- </font> --></p>
    <p>Reviewer #1: I have read the revised manuscript of the submission, “TextFormats: simplifying the definition and parsing of text formats in bioinformatics,” by Giorgio Gonnella. The author has addressed most of my primary concerns regarding using nim and incorporating it with python. The installation has been made much easier in the current version. They have included three new case studies covering the comparative analysis with GFA2 and the Generic Feature Format. The visualization of the TFSL specification was much needed and has been added in Figure 1. The minor grammatical issues which were pointed out have been corrected, and now the language of the manuscript is better than before.</p>
    <p>Parsing biological data has always been a challenge for biologists and bioinformaticians alike, and a general-purpose format parsing tool might be the solution to this age-long problem. I believe that the tool has novelty and might be used by scientists across the world. I recommend the publication of the paper in its current form.</p>
    <p>**********</p>
    <p><!-- <font color="black"> -->7. PLOS authors have the option to publish the peer review history of their article (<ext-link xlink:href="https://journals.plos.org/plosone/s/editorial-and-peer-review-process#loc-peer-review-history" ext-link-type="uri">what does this mean?</ext-link>). If published, this will include your full peer review and any attached files.</p>
    <p>If you choose “no”, your identity will remain anonymous but your review may still be made public.</p>
    <p><bold>Do you want your identity to be public for this peer review?</bold> For information about this choice, including consent withdrawal, please see our <ext-link xlink:href="https://www.plos.org/privacy-policy" ext-link-type="uri">Privacy Policy</ext-link>.<!-- </font> --></p>
    <p>Reviewer #1: No</p>
  </body>
</sub-article>
<sub-article article-type="editor-report" id="pone.0268910.r004" specific-use="acceptance-letter">
  <front-stub>
    <article-id pub-id-type="doi">10.1371/journal.pone.0268910.r004</article-id>
    <title-group>
      <article-title>Acceptance letter</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Rahman</surname>
          <given-names>M. Sohel</given-names>
        </name>
        <role>Academic Editor</role>
      </contrib>
    </contrib-group>
    <permissions>
      <copyright-statement>© 2022 M. Sohel Rahman</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>M. Sohel Rahman</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
      </license>
    </permissions>
    <related-article ext-link-type="doi" xlink:href="10.1371/journal.pone.0268910" id="rel-obj004" related-article-type="reviewed-article"/>
  </front-stub>
  <body>
    <p>
      <named-content content-type="letter-date">16 May 2022</named-content>
    </p>
    <p>PONE-D-21-34058R1 </p>
    <p>TextFormats: simplifying the definition and parsing of text formats in bioinformatics </p>
    <p>Dear Dr. Gonnella:</p>
    <p>I'm pleased to inform you that your manuscript has been deemed suitable for publication in PLOS ONE. Congratulations! Your manuscript is now with our production department. </p>
    <p>If your institution or institutions have a press office, please let them know about your upcoming paper now to help maximize its impact. If they'll be preparing press materials, please inform our press team within the next 48 hours. Your manuscript will remain under strict press embargo until 2 pm Eastern Time on the date of publication. For more information please contact <email>onepress@plos.org</email>.</p>
    <p>If we can help with anything else, please email us at <email>plosone@plos.org</email>. </p>
    <p>Thank you for submitting your work to PLOS ONE and supporting open access. </p>
    <p>Kind regards, </p>
    <p>PLOS ONE Editorial Office Staff</p>
    <p>on behalf of</p>
    <p>Dr. M. Sohel Rahman </p>
    <p>Academic Editor</p>
    <p>PLOS ONE</p>
  </body>
</sub-article>
