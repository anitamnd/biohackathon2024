<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Gigascience</journal-id>
    <journal-id journal-id-type="iso-abbrev">Gigascience</journal-id>
    <journal-id journal-id-type="publisher-id">gigascience</journal-id>
    <journal-title-group>
      <journal-title>GigaScience</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2047-217X</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5946831</article-id>
    <article-id pub-id-type="doi">10.1093/gigascience/giy037</article-id>
    <article-id pub-id-type="publisher-id">giy037</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Technical Note</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Chiron: translating nanopore raw signal directly into nucleotide sequence using deep learning</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-0337-8722</contrib-id>
        <name>
          <surname>Teng</surname>
          <given-names>Haotian</given-names>
        </name>
        <!--<email>haotian.teng@uq.net.au</email>-->
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="corresp" rid="cor2"/>
        <xref ref-type="author-notes" rid="afn1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-4079-2383</contrib-id>
        <name>
          <surname>Cao</surname>
          <given-names>Minh Duc</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="author-notes" rid="afn1"/>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-3683-6208</contrib-id>
        <name>
          <surname>Hall</surname>
          <given-names>Michael B</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Duarte</surname>
          <given-names>Tania</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Wang</surname>
          <given-names>Sheng</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-4300-455X</contrib-id>
        <name>
          <surname>Coin</surname>
          <given-names>Lachlan J M</given-names>
        </name>
        <!--<email>l.coin@imb.uq.edu.au</email>-->
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="corresp" rid="cor1"/>
      </contrib>
    </contrib-group>
    <aff id="aff1"><label>1</label>Institute for Molecular Bioscience, University of Queensland, St Lucia, Brisbane, QLD 4072, Australia</aff>
    <aff id="aff2"><label>2</label>Computational Bioscience Research Center (CBRC), King Abdullah University of Science and Technology (KAUST), Thuwal, 23955, Saudi Arabia</aff>
    <author-notes>
      <corresp id="cor1"><bold>Correspondence address</bold>. Lachlan J.M. Coin, Institute for Molecular Bioscience, University of Queensland, St Lucia, Brisbane, QLD 4072, Australia. E-mail: <email>l.coin@imb.uq.edu.au</email></corresp>
      <corresp id="cor2"><bold>Correspondence address</bold>. Haotian Teng, Institute for Molecular Bioscience, University of Queensland, St Lucia, Brisbane, QLD 4072, Australia. E-mail: <email>haotian.teng@uq.net.au</email></corresp>
      <fn id="afn1">
        <p>These authors contributed equally to this work.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub" iso-8601-date="2018-04-10">
      <day>10</day>
      <month>4</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="collection">
      <month>5</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>10</day>
      <month>4</month>
      <year>2018</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>7</volume>
    <issue>5</issue>
    <elocation-id>giy037</elocation-id>
    <history>
      <date date-type="received">
        <day>09</day>
        <month>11</month>
        <year>2017</year>
      </date>
      <date date-type="rev-recd">
        <day>07</day>
        <month>2</month>
        <year>2018</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2018. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2018</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="giy037.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>Sequencing by translocating DNA fragments through an array of nanopores is a rapidly maturing technology that offers faster and cheaper sequencing than other approaches. However, accurately deciphering the DNA sequence from the noisy and complex electrical signal is challenging. Here, we report Chiron, the first deep learning model to achieve end-to-end basecalling and directly translate the raw signal to DNA sequence without the error-prone segmentation step. Trained with only a small set of 4,000 reads, we show that our model provides state-of-the-art basecalling accuracy, even on previously unseen species. Chiron achieves basecalling speeds of more than 2,000 bases per second using desktop computer graphics processing units.</p>
    </abstract>
    <kwd-group kwd-group-type="keywords">
      <kwd>ONT nanopore sequencing</kwd>
      <kwd>deep learning</kwd>
      <kwd>artificial neural network</kwd>
      <kwd>comparative performance</kwd>
    </kwd-group>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">NHMRC</named-content>
          <named-content content-type="funder-identifier">10.13039/501100000925</named-content>
        </funding-source>
        <award-id>GNT1130084</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">ARC</named-content>
          <named-content content-type="funder-identifier">10.13039/100007537</named-content>
        </funding-source>
        <award-id>DP170102626</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="sec1">
    <title>Introduction</title>
    <p>DNA sequencing via bioengineered nanopores, recently introduced to the market by Oxford Nanopore Technologies (ONT), has profoundly changed the landscape of genomics. A key innovation of the ONT nanopore sequencing device, MinION, is that it measures the changes in electrical current across the pore as a single-stranded molecule of DNA passes through it. The signal is then used to determine the nucleotide sequence of the DNA strand [<xref rid="bib1" ref-type="bibr">1–3</xref>]. Importantly, this signal can be obtained and analyzed by the user while the sequencing is still in progress. A large number of pores can be packed into a MinION device that is the size of a stapler, making the technology extremely portable. The small size and real-time nature of the sequencing opens up new opportunities in time-critical genomics applications [<xref rid="bib4" ref-type="bibr">4–7</xref>] and in remote regions [<xref rid="bib8" ref-type="bibr">8–11</xref>].</p>
    <p>While nanopore sequencing can be massively scaled up by designing large arrays of nanopores and allowing faster translocation of DNA fragments, one of the bottlenecks in the analysis pipeline is the translation of the raw signal into nucleotide sequence, or basecalling. Prior to the release of Chiron, basecalling of nanopore data involved two stages. Raw data series are first divided into segments corresponding to signals obtained from a k-mer (segmentation) before a model is then applied to translate segment signals into k-mers. DeepNano[<xref rid="bib15" ref-type="bibr">12</xref>] introduced the idea of using a bidirectional recurrent neural network (RNN) that uses the basic statistics of a segment (mean signal, standard deviation, and length) to predict the corresponding k-mer. The official basecallers released by ONT, nanonet, and Albacore (prior to v2.0.1) also employ similar techniques. As k-mers from successive segments are expected to overlap by k-1 bases, these methods use a dynamic programming algorithm to find the most probable path, which results in the basecalled sequence data. BasecRAWller [<xref rid="bib38_881_1525767249152" ref-type="bibr">13</xref>] uses a pair of unidirectional RNNs; the first RNN predicts the probability of segment boundary for segmentation, while the second one translates the discrete event into base sequence. As such, BasecRAWller is able to process the raw signal data in a streaming fashion.</p>
    <p>In this article we present Chiron, which is the first deep neural network model that can translate raw electrical signal directly to nucleotide sequence. Chiron has a novel architecture that couples a convolutional neural network (CNN) with an RNN and a connectionist temporal classification (CTC) decoder [<xref rid="bib38_881_1525767249152" ref-type="bibr">13</xref>]. This enables it to model the raw signal data directly, without use of an event segmentation step. ONT has also developed a segmentation free basecaller, Albacore v2.0.1, which was released shortly after Chiron v0.1.</p>
    <p>Chiron was trained on a small dataset sequenced from a viral and bacterial genome and yet it is able to generalize to a range of genomes such as other bacteria and Human. Chiron is as accurate as the ONT-designed and -trained Albacore v2.0.1 on bacterial and viral basecalling and outperforms all other existing methods. Moreover, unlike Albacore, Chiron allows users to train their own neural network, and it is also fully open-source, enabling development of specialized basecalling applications, such as detection of base modifications.</p>
  </sec>
  <sec sec-type="results" id="sec2">
    <title>Results</title>
    <sec id="sec2-1">
      <title>Deep neural network architecture</title>
      <p>We have developed a deep neural network (NN) for end-to-end, segmentation-free basecalling that consists of two sets of layers: a set of convolutional layers and a set of recurrent layers ( Fig.<xref ref-type="fig" rid="fig1">1</xref>). The convolutional layers discriminate local patterns in the raw input signal, whereas the recurrent layers integrate these patterns into basecall probabilities. At the top of the neural network is a CTC decoder [<xref rid="bib16" ref-type="bibr">14</xref>] to provide the final DNA sequence according to the base probabilities (Fig. <xref ref-type="fig" rid="fig2">2</xref>) . More details pertaining to the NN are provided in the Methods section.</p>
      <fig id="fig1" orientation="portrait" position="float">
        <label>Figure 1:</label>
        <caption>
          <p><bold>(A)</bold> An unrolled sketch of the NN architecture. The circles at the bottom represent the time series of raw signal input data. Local pattern information is then discriminated from this input by a CNN. The output of the CNN is then fed into an RNN to discern the long-range interaction information. A FC layer is used to get the base probability from the output of the RNN. These probabilities are then used by a CTC decoder to create the nucleotide sequence. The repeated component is omitted. <bold>(B)</bold> Final architecture of the Chiron model. Variants of this architecture were explored by varying the number of convolutional layers from 3 to 10 and recurrent layers from 3 to 5. We also explored networks with only convolutional layers or recurrent layers, 1×3 conv, 256, no bias means a convolution operation with a 1×3 filter and a 256-channeloutput with no bias added. LTSM = long-term short memory.</p>
        </caption>
        <graphic xlink:href="giy037fig1"/>
      </fig>
      <fig id="fig2" orientation="portrait" position="float">
        <label>Figure 2:</label>
        <caption>
          <p>Visualization of the predicted probability of bases and the readout sequence. The upper panel is a normalized raw signal from the MinION nanopore sequencer, normalized by subtracting the mean of the whole signal and then dividing by the standard deviation. The bottom panel shows the predicted probability of each base at each position from Chiron. The final output DNA sequence is annotated on the <italic>x</italic>-axis of the bottom plane.</p>
        </caption>
        <graphic xlink:href="giy037fig2"/>
      </fig>
      <p>Chiron presents an end-to-end basecaller in that it predicts a complete DNA sequence from raw signal. It translates sliding windows of 300 raw signals to sequences of roughly 10-20 base pairs (which we call <italic>slices</italic>). These overlapping slices are stacked together to get a consensus sequence in real time. The window is shifted by 30 raw signals; by processing the slices in parallel, the basecalling accuracy can be improved with little speed loss.</p>
    </sec>
    <sec id="sec2-2">
      <title>Performance comparison</title>
      <p>For training and evaluating the performance of Chiron, a phage Lambda virus sample (<italic>Escherichia virus Lambda</italic>) provided by ONT and an <italic>Escherichia coli</italic> (K12 MG1655) sample using 1D protocol on R9.4 flowcells were sequenced for calibrating the MinION device (see the Methods section). A total of 34,383 reads were obtained for the Lambda sample and 15,012 reads were obtained for <italic>E. coli</italic>, but only 2,000 reads were randomly picked from each sample to train Chiron. It took the model 10 hours to train 3 epoch with 4,000 reads (∼4 Mbp) on a Nvidia K80 Graphics Processing Unit (GPU). Then Chiron was cross-validated on the remainder of the reads from two runs, and the model was further evaluated by testing its basecalling accuracy on other species. A <italic>Mycobacterium tuberculosis</italic> sample was sequenced and a set of Human data was downloaded from chromosome 21 part 3 from the Nanopore WGS Consortium [<xref rid="bib17" ref-type="bibr">15</xref>], to be used in testing the generality of Chiron.</p>
      <p>In order to establish the ground-truth of the data, the <italic>E. coli</italic> and <italic>M. tuberculosis</italic> samples were sequenced using Illumina technology (see the Methods section) and assembled, which provided a high per-base accuracy reference. The reference sequence for the Phage Lambda virus was National Center for Biotechnology Information (NCBI) reference sequence NC_001416.1; for the Human data, the GRCh38 reference was used. The raw signals were labeled by identifying the raw signal segment corresponding to the nucleotide assumed to be in the pore at a given time point (see the Methods section).</p>
      <p>Table <xref rid="tbl1" ref-type="table">1</xref> presents the accuracy of the four basecalling methods, including the Metrichor basecaller (ONT cloud service), Albacore v1.1 (ONT official local basecaller), BasecRAWller [<xref rid="bib38_881_1525767249152" ref-type="bibr">13</xref>], and Chiron, with a greedy decoder (Chiron) and beam-search decoder (Chiron-BS), on the data. Chiron had the highest identity rate on the Lambda, <italic>E. coli</italic>, and <italic>M. tuberculosis</italic> samples. Additionally, it had the lowest deletion rate; mismatch rate on Lambda, <italic>M. tuberculosis</italic>, and <italic>E. coli</italic>; and the lowest insertion rate on Lambda and <italic>E. coli</italic>. In the Human dataset where Chiron did not have the highest identity rate, it is was no more than 0.01 from the best.</p>
      <table-wrap id="tbl1" orientation="portrait" position="float">
        <label>Table 1:</label>
        <caption>
          <p>Results from the experimental validation and benchmarking of Chiron against three segmentation-based nanopore basecallers and Albacore v2, which is also a segmentation-free basecaller</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left" rowspan="1" colspan="1">Dataset</th>
              <th align="left" rowspan="1" colspan="1">Basecaller</th>
              <th align="left" rowspan="1" colspan="1">Deletion rate (%)</th>
              <th align="left" rowspan="1" colspan="1">Insertion rate (%)</th>
              <th align="left" rowspan="1" colspan="1">Mismatch rate (%)</th>
              <th align="left" rowspan="1" colspan="1">Identity rate (%)</th>
              <th align="left" rowspan="1" colspan="1">Error rate (%)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Metrichor</td>
              <td rowspan="1" colspan="1">8.93</td>
              <td rowspan="1" colspan="1">2.38</td>
              <td rowspan="1" colspan="1">4.57</td>
              <td rowspan="1" colspan="1">86.50</td>
              <td rowspan="1" colspan="1">15.88</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Albacore v1.1</td>
              <td rowspan="1" colspan="1">6.35</td>
              <td rowspan="1" colspan="1">3.82</td>
              <td rowspan="1" colspan="1">4.69</td>
              <td rowspan="1" colspan="1">88.96</td>
              <td rowspan="1" colspan="1">14.86</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Albacore v2</td>
              <td rowspan="1" colspan="1">
                <bold>6.19</bold>
              </td>
              <td rowspan="1" colspan="1">3.38</td>
              <td rowspan="1" colspan="1">
                <bold>3.98</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>89.82</bold>
              </td>
              <td rowspan="1" colspan="1">13.55</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Lambda</td>
              <td rowspan="1" colspan="1">BasecRAWller</td>
              <td rowspan="1" colspan="1">7.89</td>
              <td rowspan="1" colspan="1">10.01</td>
              <td rowspan="1" colspan="1">10.56</td>
              <td rowspan="1" colspan="1">81.54</td>
              <td rowspan="1" colspan="1">28.46</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Chiron</td>
              <td rowspan="1" colspan="1">8.20</td>
              <td rowspan="1" colspan="1">2.13</td>
              <td rowspan="1" colspan="1">4.03</td>
              <td rowspan="1" colspan="1">87.76</td>
              <td rowspan="1" colspan="1">14.36</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Chiron-BS</td>
              <td rowspan="1" colspan="1">6.20</td>
              <td rowspan="1" colspan="1">
                <bold>2.13</bold>
              </td>
              <td rowspan="1" colspan="1">4.20</td>
              <td rowspan="1" colspan="1">89.60</td>
              <td rowspan="1" colspan="1">
                <bold>12.53</bold>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Metrichor</td>
              <td rowspan="1" colspan="1">7.52</td>
              <td rowspan="1" colspan="1">1.93</td>
              <td rowspan="1" colspan="1">3.84</td>
              <td rowspan="1" colspan="1">88.64</td>
              <td rowspan="1" colspan="1">13.29</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Albacore v1.1</td>
              <td rowspan="1" colspan="1">5.76</td>
              <td rowspan="1" colspan="1">3.27</td>
              <td rowspan="1" colspan="1">4.14</td>
              <td rowspan="1" colspan="1">90.10</td>
              <td rowspan="1" colspan="1">13.17</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Albacore v2</td>
              <td rowspan="1" colspan="1">5.21</td>
              <td rowspan="1" colspan="1">2.99</td>
              <td rowspan="1" colspan="1">3.57</td>
              <td rowspan="1" colspan="1">91.22</td>
              <td rowspan="1" colspan="1">11.77</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">
                <italic>E. coli</italic>
              </td>
              <td rowspan="1" colspan="1">BasecRAWller</td>
              <td rowspan="1" colspan="1">7.16</td>
              <td rowspan="1" colspan="1">10.40</td>
              <td rowspan="1" colspan="1">10.30</td>
              <td rowspan="1" colspan="1">82.54</td>
              <td rowspan="1" colspan="1">27.86</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Chiron</td>
              <td rowspan="1" colspan="1">6.36</td>
              <td rowspan="1" colspan="1">
                <bold>1.81</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>3.07</bold>
              </td>
              <td rowspan="1" colspan="1">90.57</td>
              <td rowspan="1" colspan="1">11.24</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Chiron-BS</td>
              <td rowspan="1" colspan="1">
                <bold>4.94</bold>
              </td>
              <td rowspan="1" colspan="1">2.36</td>
              <td rowspan="1" colspan="1">3.16</td>
              <td rowspan="1" colspan="1">
                <bold>91.90</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>10.46</bold>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Metrichor</td>
              <td rowspan="1" colspan="1">7.63</td>
              <td rowspan="1" colspan="1">
                <bold>2.40</bold>
              </td>
              <td rowspan="1" colspan="1">4.35</td>
              <td rowspan="1" colspan="1">88.02</td>
              <td rowspan="1" colspan="1">14.38</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Albacore v1.1</td>
              <td rowspan="1" colspan="1">6.12</td>
              <td rowspan="1" colspan="1">3.57</td>
              <td rowspan="1" colspan="1">4.68</td>
              <td rowspan="1" colspan="1">89.19</td>
              <td rowspan="1" colspan="1">14.37</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Albacore v2</td>
              <td rowspan="1" colspan="1">
                <bold>5.05</bold>
              </td>
              <td rowspan="1" colspan="1">3.58</td>
              <td rowspan="1" colspan="1">
                <bold>4.05</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>90.90</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>12.68</bold>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">
                <italic>M. tuberculosis</italic>
              </td>
              <td rowspan="1" colspan="1">BasecRAWller</td>
              <td rowspan="1" colspan="1">7.17</td>
              <td rowspan="1" colspan="1">10.85</td>
              <td rowspan="1" colspan="1">10.42</td>
              <td rowspan="1" colspan="1">82.41</td>
              <td rowspan="1" colspan="1">28.44</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Chiron</td>
              <td rowspan="1" colspan="1">7.16</td>
              <td rowspan="1" colspan="1">2.50</td>
              <td rowspan="1" colspan="1">4.33</td>
              <td rowspan="1" colspan="1">88.51</td>
              <td rowspan="1" colspan="1">13.99</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Chiron-BS</td>
              <td rowspan="1" colspan="1">5.84</td>
              <td rowspan="1" colspan="1">3.05</td>
              <td rowspan="1" colspan="1">4.50</td>
              <td rowspan="1" colspan="1">89.66</td>
              <td rowspan="1" colspan="1">13.39</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Metrichor</td>
              <td rowspan="1" colspan="1">12.95</td>
              <td rowspan="1" colspan="1">
                <bold>4.15</bold>
              </td>
              <td rowspan="1" colspan="1">7.65</td>
              <td rowspan="1" colspan="1">79.4</td>
              <td rowspan="1" colspan="1">24.75</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Albacore v1.1</td>
              <td rowspan="1" colspan="1">8.62</td>
              <td rowspan="1" colspan="1">6.51</td>
              <td rowspan="1" colspan="1">7.52</td>
              <td rowspan="1" colspan="1">83.86</td>
              <td rowspan="1" colspan="1">22.65</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Albacore v2</td>
              <td rowspan="1" colspan="1">8.71</td>
              <td rowspan="1" colspan="1">6.03</td>
              <td rowspan="1" colspan="1">
                <bold>6.05</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>85.24</bold>
              </td>
              <td rowspan="1" colspan="1">
                <bold>20.79</bold>
              </td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Human</td>
              <td rowspan="1" colspan="1">BasecRAWller</td>
              <td rowspan="1" colspan="1">
                <bold>8.41</bold>
              </td>
              <td rowspan="1" colspan="1">10.28</td>
              <td rowspan="1" colspan="1">10.10</td>
              <td rowspan="1" colspan="1">81.49</td>
              <td rowspan="1" colspan="1">28.79</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Chiron</td>
              <td rowspan="1" colspan="1">9.13</td>
              <td rowspan="1" colspan="1">5.14</td>
              <td rowspan="1" colspan="1">9.33</td>
              <td rowspan="1" colspan="1">81.54</td>
              <td rowspan="1" colspan="1">23.60</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"/>
              <td rowspan="1" colspan="1">Chiron-BS</td>
              <td rowspan="1" colspan="1">9.30</td>
              <td rowspan="1" colspan="1">5.62</td>
              <td rowspan="1" colspan="1">7.87</td>
              <td rowspan="1" colspan="1">82.83</td>
              <td rowspan="1" colspan="1">22.79</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblf1">
            <p>Deletion, insertion, and mismatch rates (%) are defined as the number of deleted, inserted, and mismatched bases divided by the number of bases in the reference genome (the lower the better). Identity rate (%) is defined as the number of matched bases divided by the number of bases in the reference genome for that sample (the higher the better; identity rate = 1 - deletion rate - mismatch rate). Error rate (%) is defined as the sum of deletion, insertion, and mismatch rates (the lower the better; error rate = deletion rate + insertion rate + mismatch rate). This statistic effectively summarizes the basecalling accuracy of the associated model. The best result in each category is indicated in bold.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <p>In addition, we compared the segmentation-free ONT basecaller Albacore v2.0.1 with Chiron-BS in Table <xref rid="tbl1" ref-type="table">1</xref>. Chiron-BS had a consistently lower insertion rate across all species tested, as well as a lower deletion rate on Lambda and <italic>E. coli</italic>; however, it suffered a slightly higher mismatch rate on all species except <italic>E. coli</italic>. The performance is comparable to Albacore v2.0.1 on all species except for Human; however, this is likely at least partially due to the fact that it had not been trained on any Human DNA.</p>
      <p>In order to assess the quality of genomes assembled from reads generated by each basecaller, we used Miniasm together with Racon to generate a <italic>de novo</italic> genome assembly for each bacterial and viral genome (see the Methods section). The results presented in Table <xref rid="tbl2" ref-type="table">2</xref> demonstrate that Chiron assemblies for Phage lambda and <italic>E. coli</italic> had approximately half as many errors as those generated from Albacore (v1 or v2) reads. For <italic>M. tuberculosis</italic>, Chiron had fewer errors than Albacore v1 but slightly more than Albacore v2. The identity rate and relative length for each round of polishing with Racon are shown in Fig. <xref ref-type="fig" rid="fig3">3</xref>.</p>
      <fig id="fig3" orientation="portrait" position="float">
        <label>Figure 3:</label>
        <caption>
          <p><bold>(A)</bold> Assembly error rate (%) for each polishing round using Racon. Two individually sequenced <italic>E. coli</italic> samples are included (S10, S18). All basecallers have a similar performance on the <italic>M. tuberculosis</italic> dataset due to its high sequencing depth (130X). <bold>(B)</bold> Relative assembly length (%) after each round of polishing. Relative length is defined as the length of the assembly divided by the length of reference genome.</p>
        </caption>
        <graphic xlink:href="giy037fig3"/>
      </fig>
      <table-wrap id="tbl2" orientation="portrait" position="float">
        <label>Table 2:</label>
        <caption>
          <p>Assembly identity rate and relative length benchmark.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left" rowspan="1" colspan="1">Sample (coverage)</th>
              <th align="left" rowspan="1" colspan="1">Albacore</th>
              <th align="left" rowspan="1" colspan="1">Albacore_2</th>
              <th align="left" rowspan="1" colspan="1">Chiron-BS</th>
              <th align="left" rowspan="1" colspan="1">Metrichor</th>
              <th align="left" rowspan="1" colspan="1">Albacore</th>
              <th align="left" rowspan="1" colspan="1">Albacore_2</th>
              <th align="left" rowspan="1" colspan="1">Chiron-BS</th>
              <th align="left" rowspan="1" colspan="1">Metrichor</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1"><italic>E. coli</italic>-S18 (27X)</td>
              <td rowspan="1" colspan="1">99.004</td>
              <td rowspan="1" colspan="1">99.162</td>
              <td rowspan="1" colspan="1">99.533</td>
              <td rowspan="1" colspan="1">87.678</td>
              <td rowspan="1" colspan="1">100.055</td>
              <td rowspan="1" colspan="1">99.715</td>
              <td rowspan="1" colspan="1">99.720</td>
              <td rowspan="1" colspan="1">94.253</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"><italic>E. coli</italic>-S10 (40X)</td>
              <td rowspan="1" colspan="1">99.106</td>
              <td rowspan="1" colspan="1">99.316</td>
              <td rowspan="1" colspan="1">99.646</td>
              <td rowspan="1" colspan="1">88.745</td>
              <td rowspan="1" colspan="1">100.144</td>
              <td rowspan="1" colspan="1">99.739</td>
              <td rowspan="1" colspan="1">99.811</td>
              <td rowspan="1" colspan="1">94.829</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1"><italic>M. tuberculosis</italic>(130X)</td>
              <td rowspan="1" colspan="1">99.541</td>
              <td rowspan="1" colspan="1">99.628</td>
              <td rowspan="1" colspan="1">99.554</td>
              <td rowspan="1" colspan="1">84.736</td>
              <td rowspan="1" colspan="1">100.126</td>
              <td rowspan="1" colspan="1">100.029</td>
              <td rowspan="1" colspan="1">99.900</td>
              <td rowspan="1" colspan="1">90.875</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Lambda Phage (790X)</td>
              <td rowspan="1" colspan="1">97.926</td>
              <td rowspan="1" colspan="1">99.207</td>
              <td rowspan="1" colspan="1">99.507</td>
              <td rowspan="1" colspan="1">99.164</td>
              <td rowspan="1" colspan="1">101.104</td>
              <td rowspan="1" colspan="1">100.123</td>
              <td rowspan="1" colspan="1">99.800</td>
              <td rowspan="1" colspan="1">99.335</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblf2">
            <p>Draft genomes generated by Miniasm is polished 10 rounds by Racon to calculate the statistics. Assembly identity rates are presented in the left 4 columns, relative lengths are presented in the right 4 columns. Identity rate (%) is calculated by first shredding the assembly contigs into 10K read fragments and then obtaining the mean of the identity rate of the aligned reads, relative length (%) is defined as the sum of the length of all the aligned pieces divided by the length of the reference genome. <italic>E. coli</italic>-S10 and <italic>E. coli</italic>-S18 are reads from two independent sequencing events.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <p>In terms of speed on a central processing unit (CPU) processor (Table 3), Chiron is slower (21 bp/sec, 17 bp/secusing a beam-search decoder with a 50 beam width) than Albacore (2,975 bp/sec) and, to a lesser extent, slower than BasecRAWller (81bp/sec). However, when run on a Nvidia K80 GPU, a basecalling rate of 1,652 bp/secand 1,204 bp/secusing a beam-search decoder is achieved. (Chiron was also tested on a Nvidia GTX 1080 Ti GPU, and the rate was 2,657 bp/sec). The GPU rate for the other two local basecallers are not included, as Albacore and BasecRAWller do not currently offer GPU support. Metrichor was not included in the speed benchmarking as it is not possible to gather information about CPU/GPU speed as it is a cloud basecaller.</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="sec3">
    <title>Discussion</title>
    <p>Segmenting the raw nanopore electrical signal into piece-wise constant regions that correspond to the presence of different k-mers in the pore is an appealing but error-prone approach. Segmentation algorithms determine a boundary between two segments based on a sharp change of signal values within a window. The window size is determined by the expected speed of the translocation of the DNA fragment in the pore. We noticed that the speed of DNA translocation is variable during a sequencing run; coupled with the high level of signal-to-noise in the raw data, this can result in low segmentation accuracy. As a result, the segmentation algorithm often makes conservative estimates of the window size, resulting in segments that are smaller than the actual signal group for k-mers. While dynamic programming can correct this by joining several segments together for a k-mer, this effects the prediction model.</p>
    <p>All existing nanopore basecallers prior to Chiron use a segmentation step. The first nanopore basecalling algorithms [<xref rid="bib18" ref-type="bibr">16</xref>, <xref rid="bib13" ref-type="bibr">17</xref>] used a hidden Markov model, which maintains a table of event models for all possible k-mers. These event models were learned from a large set of training data. More recent methods (DeepNano [<xref rid="bib15" ref-type="bibr">12</xref>], nanonet) train a deep neural network for inferring k-mers from segmented raw signal data.</p>
    <table-wrap id="tbl3" orientation="portrait" position="float">
      <label>Table 3:</label>
      <caption>
        <p>Basecalling rate in base pairs per second</p>
      </caption>
      <table frame="hsides" rules="groups">
        <thead>
          <tr>
            <th align="left" rowspan="1" colspan="1">Basecaller</th>
            <th align="left" rowspan="1" colspan="1">CPU rate (1 core)</th>
            <th align="left" rowspan="1" colspan="1">CPU rate (8 cores)</th>
            <th align="left" rowspan="1" colspan="1">GPU rate</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Albacore v1.1.2</td>
            <td rowspan="1" colspan="1">2,975</td>
            <td rowspan="1" colspan="1">23,800</td>
            <td rowspan="1" colspan="1">NA</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">BasecRAWller</td>
            <td rowspan="1" colspan="1">81</td>
            <td rowspan="1" colspan="1">648</td>
            <td rowspan="1" colspan="1">NA</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Chiron</td>
            <td rowspan="1" colspan="1">21</td>
            <td rowspan="1" colspan="1">168</td>
            <td rowspan="1" colspan="1">1,652</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Chiron-BS</td>
            <td rowspan="1" colspan="1">17</td>
            <td rowspan="1" colspan="1">136</td>
            <td rowspan="1" colspan="1">1,204</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblf3">
          <p>The single-core CPU rate is calculated by dividing the number of nucleotides basecalled by the total CPU time for the basecalling analysis. An 8 core CPU rate is estimated by multiplying single-core CPU rate by 8, based on observed 100% utility of CPU processors in multithreaded mode on 8 cores. The GPU rate was calculated on a Nvidia K80 GPU. The reported rate is the average across all samples analyzed. The GPU rate is not reported for Albacore or BasecRAWller as they have not been developed for use on a GPU. Chiron is also capable of running on a GPU, and its rate in this mode is included in parentheses. Albacore is not capable of running in GPU mode. Albacore v2 was found to have similar performance as Albacore v1.1.2.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <table-wrap id="tbl4" orientation="portrait" position="float">
      <label>Table 4:</label>
      <caption>
        <p>Details on the number of reads and their median read length for data that was used to evaluate various basecallers</p>
      </caption>
      <table frame="hsides" rules="groups">
        <thead>
          <tr>
            <th align="left" rowspan="1" colspan="1">Sample</th>
            <th align="left" rowspan="1" colspan="1">Number of reads</th>
            <th align="left" rowspan="1" colspan="1">Median read length (bp)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Phage Lambda</td>
            <td rowspan="1" colspan="1">34,383</td>
            <td rowspan="1" colspan="1">5,720</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <italic>E. coli</italic>
            </td>
            <td rowspan="1" colspan="1">15,012</td>
            <td rowspan="1" colspan="1">5,836</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <italic>M. tuberculosis</italic>
            </td>
            <td rowspan="1" colspan="1">147,594</td>
            <td rowspan="1" colspan="1">3,423</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Human</td>
            <td rowspan="1" colspan="1">10,000</td>
            <td rowspan="1" colspan="1">6,154</td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <p>A recent basecaller named BasecRAWller [<xref rid="bib38_881_1525767249152" ref-type="bibr">13</xref>] was used an initial neural network (referred to as a <italic>raw</italic> network) to output probabilities of boundaries between segments. A segmentation algorithm was then applied to segment these probabilities into discrete events. BasecRAWller then used a second neural network (referred to as the <italic>fine-tune</italic> network) to translate the segmented data into the base sequence.</p>
    <p>Our proposed model is a departure from the above approaches in that it performs base prediction directly from raw data without segmentation. Moreover, the core model is an end-to-end basecaller in the sense that it predicts the complete base sequence from raw signal. This is made possible by combining a multilayer convolutional neural network to extract the local features of the signal, with a recurrent neural network to predict the probability of nucleotides in the current position. Finally, the complete sequence is called by a simple greedy algorithm, based on a typical CTC-style decoder [<xref rid="bib16" ref-type="bibr">14</xref>], reading out the nucleotide in each position with the highest probability. Thus, the model need not make any assumption of the speed of DNA fragment translocation and can avoid the errors introduced during segmentation.</p>
    <p>To improve the basecalling speed and minimize its memory requirements, the neural network is run on a 300-signal sliding window (equivalent to approximately 20bp), overlapping the sequences on these windows and generating a consensus sequence. Chiron has the potential to stream these input raw signal "slices" into output sequence data, which will become an increasingly important aspect of basecalling very long reads (100kb+), particularly if used in conjunction with the read-until capabilities of the MinION.</p>
    <p>Our model was either the best or second-best in terms of accuracy on all of the datasets we tested in terms of read-level accuracy. This includes the Human dataset, despite the fact that the model had not seen Human DNA during training. Our model had only been trained on a mixture of 2,000 bacterial and 2,000 viral reads. The most accurate basecaller is the proprietary ONT Albacore basecaller. Chiron is within 1% accuracy on bacterial DNA but only within 2% accuracy on Human DNA. More extensive training on a broader spectrum of species, including Human, can be expected to improve the performance of our model. There are also improvements in accuracy to be gained from better alignment of overlapping reads and consensus calling. Increasing the size of the sliding window will also improve accuracy but at the cost of increased memory and running time.</p>
    <p>Bacterial and viral genome assemblies generated from Chiron basecalled reads all had less than 0.5% error, whereas those generated by Albacore had up to 0.8% accuracy Fig. <xref ref-type="fig" rid="fig3">3</xref>. This marked reduction in error rate is essential for generating accurate single-nucleotide polymorphism genotypes, a prerequisite for many applications such as outbreak tracking. These results are consistent with those reported in a recent study of read and assembly level accuracy for <italic>Klebsiella pneumoniae</italic> [<xref rid="bib19" ref-type="bibr">18</xref>].</p>
    <p>Our model is substantially more computationally expensive than Albacore and somewhat more computationally expensive than BasecRAWller. This is to be expected given the extra depth in the neural network. Our model can be run in a GPU mode, which makes computation feasible on small- to medium-sized datasets on a modern desktop computer. Our method can be further sped up by increasing the step size of the sliding window, although this may impact accuracy. Also, there are several existing methods that can be used to accelerate NN-based basecallers such as Chiron. One such example is Quantization, which reformats 32-bit float weights as 8-bit integers by binning the weight into a 256 linear set. As neural networks are robust to noise, this will likely have negligible impact on the performance. Weight pruning, which prunes the weights whose absolute value is under a certain threshold and then retrains the NN, is another method used to compress and accelerate NN [<xref rid="bib20" ref-type="bibr">19</xref>].</p>
  </sec>
  <sec id="sec4">
    <title>Conclusion</title>
    <p>We have presented a novel deep neural network approach for segmentation-free basecalling of raw nanopore signal. Our approach is the first method that can map the raw signal data directly to base sequence without segmentation. We trained our method on only 4,000 reads sequenced from the simple genome lambda virus and <italic>E. coli</italic>, but the method is sufficiently generalized to be able to basecall data from other species, including Human. Our method has state-of-art accuracy, outperforming the ONT cloud basecaller Metrichor as well as another third-party basecaller, BasecRAWller.</p>
  </sec>
  <sec sec-type="methods" id="sec5">
    <title>Methods</title>
    <sec id="sec5-1">
      <title>Deep neural network architecture</title>
      <p>Our model combines a five-layer convolutional neural network (CNN) [<xref rid="bib21" ref-type="bibr">20</xref>]with a three-layer recurrent neural network (RNN) and a fully connected (FC) layer in the last layer that calculates the probability for a CTC decoder to get the final output. This structure is similar to that used in speech recognition [<xref rid="bib22" ref-type="bibr">21</xref>]. Both the CNN and RNN layers are found to be essential to the basecalling, as removing either would cause a dramatic drop in prediction accuracy, which is described more in the Training section.</p>
      <p><italic>Preliminaries</italic>. Let a raw signal input with <italic>T</italic> time points <bold>s</bold> = [<italic>s</italic><sub>1</sub>, <italic>s</italic><sub>2</sub>, ..., <italic>s</italic><sub><italic>T</italic></sub>] and the corresponding DNA sequence label (with K bases) <bold>y</bold> = [<italic>y</italic><sub>1</sub>, <italic>y</italic><sub>2</sub>, ..., <italic>y</italic><sub><italic>K</italic></sub>] with <italic>y</italic><sub><italic>i</italic></sub> ∈ {<italic>A</italic>, <italic>G</italic>, <italic>C</italic>, <italic>T</italic>} be sampled from a training dataset χ = {(<bold>s</bold><sup>(1)</sup>, <bold>y</bold><sup>(1)</sup>), (<bold>s</bold><sup>(2)</sup>, <bold>y</bold><sup>(2)</sup>), ...}. Our network directly translates the input signal time series <italic>s</italic> to the sequence <italic>y</italic> without any segmentation steps.</p>
      <p>The input signal is normalized by subtracting the mean of the whole read and dividing by the standard deviation. <inline-formula><tex-math id="M1">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}${\bf s^{\prime }}=({\bf s}-\overline{s})/std(s)$\end{document}</tex-math></inline-formula>.</p>
      <p>Then the normalized signal is fed into a residual block [<xref rid="bib24" ref-type="bibr">22</xref>] combined with global batch normalization [<xref rid="bib25" ref-type="bibr">23</xref>] in the five convolution layers to extract the local pattern from the signal. The stride is set as 1 to ensure the output of the CNN has the same length as the input raw signal. The residual block is illustrated in Fig.<xref ref-type="fig" rid="fig1">1</xref>. A convolution operation with a l×m filter, n×p stride, and s output channels on a k channels input is defined as:
<disp-formula><tex-math id="M2">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}
\begin{eqnarray*}
Output(i,j,s)=\\
\sum \limits _{di{&lt;}l,dj{&lt;}m,q{&lt;}k}Input(i\cdot n+di,j\cdot p+dj,q)\cdot Filter(di,dj,q,s).
\end{eqnarray*}
\end{document}</tex-math></disp-formula>An activation operation is performed after the convolution operation. Various kinds of activation functions can be chosen. However, in this model a rectified linear unit (ReLU) function is used as the activation operation, which has been reported to have a good performance in CNN, defined as:
<disp-formula><tex-math id="M3">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}
\begin{equation*}
ReLU(x)=\max (x,0)
\end{equation*}
\end{document}</tex-math></disp-formula>Following the convolution layers are multiple bidirectional RNN layers [<xref rid="bib26" ref-type="bibr">24</xref>], a long short-term memory (LSTM) cell [<xref rid="bib27" ref-type="bibr">25</xref>] is used as the RNN cell, with a separate batch normalization on the inside cell state and input term [<xref rid="bib28" ref-type="bibr">26</xref>].</p>
      <p>A typical batch normalization procedure [<xref rid="bib25" ref-type="bibr">23</xref>] is
<disp-formula id="equ1"><label>(1)</label><tex-math id="M4">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}
\begin{equation*}
BN({\bf x};\gamma ,\beta )=\beta +\gamma \odot \frac{{\bf x}-\hat{E}[{\bf x}]}{\sqrt{\hat{Var}[{\bf x}]+\epsilon }},
\end{equation*}
\end{document}</tex-math></disp-formula>where <bold>x</bold> be a inactivation term.</p>
      <p>Let <inline-formula><tex-math id="M5">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$h^l_t$\end{document}</tex-math></inline-formula> be the output of <italic>l</italic><sub><italic>th</italic></sub> RNN layer at time t, the batch normalization for a LSTM cell is
<disp-formula id="equ2"><label>(2)</label><tex-math id="M6">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}
\begin{equation*}
({\bf f}_t,{\bf i}_t,{\bf o}_t,{\bf g}_t) = BN({\bf W}_h {\bf h}^l_{t-1};\gamma _h,\beta _h)+BN({\bf W}_x{\bf h}^{l-1}_t;\gamma _x, \beta _x)+{\bf b}
\end{equation*}
\end{document}</tex-math></disp-formula><disp-formula id="equ3"><label>(3)</label><tex-math id="M7">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}
\begin{equation*}
{\bf c}_t=\sigma ({\bf f}_t)\odot {\bf c}_{t-1}+\sigma ({\bf i}_t)\odot tanh({\bf g}_t)
\end{equation*}
\end{document}</tex-math></disp-formula><disp-formula id="equ4"><label>(4)</label><tex-math id="M8">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}
\begin{equation*}
{\bf h}_t=\sigma ({\bf o}_t)\odot tanh(BN({\bf c}_t;\gamma _c,\beta _c))
\end{equation*}
\end{document}</tex-math></disp-formula></p>
      <p>The batch normalization is calculated separately in the recurrent term <inline-formula><tex-math id="M9">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}${\bf W}_h {\bf h}^l_{t-1}$\end{document}</tex-math></inline-formula> as well as the input term <inline-formula><tex-math id="M10">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}${\bf W}_x{\bf h}^{l-1}_t$\end{document}</tex-math></inline-formula>. The parameters β<sub><italic>h</italic></sub> and β<sub><italic>x</italic></sub> are set to zero to avoid the redundancy with <bold>b</bold>. The last forward layer <inline-formula><tex-math id="M11">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\vec{h}^L_{if}$\end{document}</tex-math></inline-formula> and the backward layer <inline-formula><tex-math id="M12">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\vec{h}^L_{ib}$\end{document}</tex-math></inline-formula> are concatenated together as an input to a FC layer:
<disp-formula id="equ5"><label>(5)</label><tex-math id="M13">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}
\begin{equation*}
{\bf H}_{i}=[{\bf h}^L_{iw},{\bf h}^L_{ib}].
\end{equation*}
\end{document}</tex-math></disp-formula>The final output is transferred through a FC layer followed by a softmax operation:
<disp-formula id="equ6"><label>(6)</label><tex-math id="M14">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}
\begin{equation*}
p({\bf o}_{i}=j)=\frac{\exp {{\bf W}_j{\bf H}_{i}}}{\sum _{j}{\exp {{\bf W}_j{{\bf H}_{i}}}}}
\end{equation*}
\end{document}</tex-math></disp-formula></p>
      <p>The output <bold>o</bold><sub><italic>i</italic></sub>, <italic>i</italic> = 1, 2, ..., <italic>T</italic> predicts the symbol given the input vector <bold>x</bold>, <italic>P</italic>(<italic>o</italic><sub><italic>i</italic></sub> = <italic>j</italic>|<bold>x</bold>). If the read is a DNA sequence, then <italic>j</italic> ∈ {<italic>A</italic>, <italic>G</italic>, <italic>C</italic>, <italic>T</italic>, <italic>b</italic>}, where b represents a blank symbol ( Fig.<xref ref-type="fig" rid="fig1">1</xref>). During training, the CTC loss is calculated between the output sequence <bold>o</bold> and label <bold>y</bold> [<xref rid="bib38_881_1525767249152" ref-type="bibr">13</xref>], and back-propagation is used to update the parameters. An Adam optimizer [<xref rid="bib28" ref-type="bibr">26</xref>] with an initial learning rate of 0.001 is used to minimize the CTC loss.</p>
      <p>During inference, the final sequence is constructed using either a greedy decoder [<xref rid="bib16" ref-type="bibr">14</xref>] or a beam-search decoder [<xref rid="bib29" ref-type="bibr">27</xref>]. The greedy decoder works by first getting the argument of maximum probability in each position of <bold>o</bold> and then producing the sequence call by first removing the consecutive repeat, and then removing the blank symbols. For example, the greedy path of an output <bold>o</bold> is A A - - - A - - G -, here - represents the blank symbol, the consecutive repeat is removed first and leads to A - A - G -, and the blank is removed to get the final sequence AAG. The beam-search decoder, with beam width W, maintains a list of the W most probable sequences (after collapsing repeats and removing blanks) up to position i of <bold>o</bold>. To obtain this list at position i+1, it constructs the probability of all possible extensions of the W most probable at position i based on adding each symbol according to <italic>p</italic>(<italic>o</italic><sub><italic>i</italic></sub> = <italic>j</italic>) and collapsing and summing up over repeated bases, or repeated blanks that are terminated by a nonblank. The greedy decoder is a special case of the beam-search decoder when the beam width is 1. It should be noted that the model can still call homopolymer repeats provided each repeated base is separated by a blank, which is typically the case.</p>
      <p><italic>Convolutional network to extract local patterns</italic>. A total of 256 channel filters are used for all five convolutional layers. In each layer, there is a residual block [<xref rid="bib23" ref-type="bibr">28</xref>] (Fig. <xref ref-type="fig" rid="fig1">1</xref>) with two branches. A 1x1 filter is used for reshaping in the first branch. In the second branch, a 1x1 convolution filter is followed by a ReLU [<xref rid="bib30" ref-type="bibr">29</xref>] activation function and a 1x3 filter with a RELU activation function as well as a 1x1 filter. All filters have the same channel number of 256. An element-wise addition is performed on the two branches followed by a ReLU activation function. A global batch normalization operation is added after every convolution operation. A large kernel size (5,7,11) and different channel numbers (128,1024) are also tested. The above combination is found to yield the best performance.</p>
      <p><italic>Recurrent layers for unsegmented labeling</italic>. The local pattern extracted from the CNN described above is then fed to a three-layer RNN (Fig.<xref ref-type="fig" rid="fig1">1</xref>). Under the current ONT sequencing settings, the DNA fragments translocate through the pore with a speed of roughly 250 or 450 bases per second, depending on the sequencing chemistry used, while the sampling rate is 4,000 samples per second. Because the sampling rate is higher than the translocation rate, each nucleotide usually stays in the current position for about 5 to 15 samplings, on average. Furthermore, as a number of nearby nucleotides also influence the current, 40 to 100 samples (based on a 4- or 5-mer assumption) could contain information about a particular nucleotide. A three-layer bidirectional RNN is used for extracting this long range information. LSTM cells [<xref rid="bib28" ref-type="bibr">26</xref>, <xref rid="bib31" ref-type="bibr">30</xref>] with 200 hidden units are used in every layer, and a FC layer is used to translate the output from the last RNN layer into a prediction. The output of the FC layer is then fed into a CTC decoder to obtain the predicted nucleotide sequence for the given raw signals.</p>
      <p><italic>Improving basecalling performance</italic>. To achieve better accuracy and less memory allocation, a sliding window is applied (default of 300 raw signals), with a preset sliding step size (default of 10% of window size), to the long raw signal. This gives a group of short reads with uniform length (window length) that overlap the original long read. Then, basecalling is run in parallel on these short reads, and the whole DNA sequence is reassembled by finding the maximum overlap between two adjacent short reads and read out of the consensus sequence. Note that here the reassembly is very easy because the order of the short reads is known. This procedure improves the accuracy of the basecalling and also enables parallel processing on one read.</p>
    </sec>
    <sec id="sec5-2">
      <title>Data preparation</title>
      <p><italic>Sequencing</italic>. The library preparations of the <italic>E. coli</italic> and <italic>M. tuberculosis</italic> samples were done using the <italic>1D gDNA selecting for long reads using SQK-LSK108</italic> (March 2017 version) protocol with the following modifications. Increase the incubation time to 20 minutes in each end-repair and ligation step; use 0.7x Agencourt<sup><italic>R</italic></sup> AMPure<sup><italic>R</italic></sup> XP beads (Beckman Coulter) immediately after the end-repair step and incubation of the eluted beads for 10 minutes; and use elution buffer (ELB) warmed up at 50<sup><italic>º</italic></sup>C with the incubation of the eluted bead at the same temperature. For the Lambda sample, the <italic>1D Lambda Control Experiment for MinION device using SQK-LSK108</italic> (January 2017 version) protocol was followed with the following changes: sheared the sample at 4000 rpm(2x1 minutes); 30 minutes of incubation in each end-repair step; and 20 minutes for adaptor ligation and elution of the library with 17 μLof ELB. All samples were sequenced on new FLO-MIN106, version R9.4, flow cells with more than 1,100 active single pores, and the phage was sequenced in a MinION Mk1 (232 ngin 6-hourrun) while the bacteria samples were sequenced in a MinION Mk1B (1 μg <italic>E. coli</italic> and 595 ng <italic>M. tuberculosis</italic> in 22-hourand 44-hourruns, respectively). The <italic>E. coli</italic> sample was run on the MinKNOW, version 1.4.3, and the other samples in earlier versions of the software. The <italic>E. coli</italic> sample was also sequenced on Illumina MiSeq using paired-end 300x2 to 100-fold coverage. An assembly of the <italic>E. coli</italic> genome was constructed by running Spades [<xref rid="bib34" ref-type="bibr">31</xref>] on the MiSeq sequencing data of the sample. The genome sequence of the Phage Lambda is NCBI reference sequence NC_001416.1.</p>
      <p><italic>Labeling of raw signal</italic>. Metrichor, the basecaller provided by ONT that runs as a cloud service, is used to basecall the MinION sequencing data first. Then, Nanoraw [<xref rid="bib33" ref-type="bibr">32</xref>] is used for labeling the data. Briefly, the basecalled sequence data are aligned back to the genome of the sample; from the alignment, the errors introduced by Metrichor are corrected to avoid the bias from Metrichor being learned into Chiron. The corrected data are mapped back to the raw data. The resulting labeling consists of the raw signal data, as well as the boundaries of raw signals when the DNA fragment translocates to a new base. We use the base-level segmentation of the raw data to obtain matched pairs of signal segment (of lengths 200, 400, and 1000) together with the corresponding DNA base sequence. From this point onwards the exact matching of the signal to each base within a segment is disregarded.</p>
      <p><italic>Training and testing datasets</italic>. A dataset using 2,000 reads from <italic>E. coli</italic> and 2,000 reads from Phage Lambda is created for training Chiron. In every start of the training epoch, the dataset is shuffled first and then fed into the model by batch. Training on this mixture dataset gave the model better performance both on generality and accuracy on not only the <italic>E. coli</italic> and Phage Lambda but also on <italic>M. tuberculosis</italic> and Human data. The testing dataset is shown in Table 4.</p>
    </sec>
    <sec id="sec5-3">
      <title>Training</title>
      <p>The labeling from Metrichor described previously is used to train Chiron. Although the neural network architecture is translation invariant and not restricted by the sequence length, a uniform length of sequences is suited for batch feeding and thus can accelerate the training process. From this view, the original reads were cut into short segments with a uniform length of 200, 400, and 1,000 and trained on these batches in alternation. Several different architectures of the neural network were tested (Table <xref rid="tbl5" ref-type="table">5</xref>), with the CNN-RNN network architecture having the best accuracy compared to a CNN- or RNN-only network. Also, using more layers seems to increase the performance of the model; however, the time consumed for training and basecalling is also increased. In the final structure, an NN with five convolution layers and three recurrent layers is adopted, as adding layers above this structure gave negligible performance improvement but required more calculation and also increased the risk of overfitting (Table 5).</p>
      <table-wrap id="tbl5" orientation="portrait" position="float">
        <label>Table 5:</label>
        <caption>
          <p>Comparison of normalized edit distance with different neural network architectures.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left" rowspan="1" colspan="1">Architecture</th>
              <th align="left" rowspan="1" colspan="1">Normalized edit distance</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">3 convolutional layers</td>
              <td rowspan="1" colspan="1">0.4007 ± 0.0277</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">5 convolutional layers</td>
              <td rowspan="1" colspan="1">0.3903 ± 0.0230</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">10 convolutional layers</td>
              <td rowspan="1" colspan="1">0.3874 ± 0.0186</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">3 bidirectional recurrent layers</td>
              <td rowspan="1" colspan="1">0.2987 ± 0.0221</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">5 bidirectional recurrent layers</td>
              <td rowspan="1" colspan="1">0.2930 ± 0.0215</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">3 convolutional layers + 3 bidirectional recurrent layers</td>
              <td rowspan="1" colspan="1">0.2011 ± 0.0252</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">5 convolutional layers + 5 bidirectional recurrent layers</td>
              <td rowspan="1" colspan="1">0.2001 ± 0.0177</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="req-152422577028142670">
            <p>The normalized edit distance is the edit distance between predicted reads and labeled reads and normalized by segment length.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
    </sec>
    <sec id="sec5-4">
      <title>Parameters for basecalling</title>
      <p>All basecallers were invoked on the same set of reads for each sample. When using Chiron to basecall, the raw signal was first sliced by a 300 length window, the window was slided by 30, and the sliced segments were fed into the basecaller with a batch size equal to 1,100. Then, the output short reads were simply assembled by a pair-wise alignment between neighboring reads, and the consensus sequence was output from this alignment. All basecalling with Albacore (v1.1.1 and v2.0.1) and BasecRAWller [<xref rid="bib38_881_1525767249152" ref-type="bibr">13</xref>] (version 0.1) was done with default parameters. For the configuration setting in Albacore, <monospace>r94_450bps_linear.cfg</monospace> was used for all samples, as this matches the flowcell and kit used for each sample. The data were basecalled on Metrichor on 3 June 2017 (Lambda), 18 May 2017 (<italic>E. coli</italic>), 4 June 2017(<italic>M. tuberculosis</italic>), and 20 June 2017 (NA12878-Human).</p>
    </sec>
    <sec id="sec5-5">
      <title>Quality score</title>
      <p>The quality score is calculated using the following algorithm: <inline-formula><tex-math id="M15">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$qs = 10*log_{10}(\frac{P1}{P2})$\end{document}</tex-math></inline-formula>, where P1 is the probability of the most probable base in the current position, and P2 is the probability of the second probable base in the current position.</p>
    </sec>
    <sec id="sec5-6">
      <title>Comparison of raw read accuracy</title>
      <p>To assess the performance of each program, the resulting FASTA/FASTQ file from basecalling was aligned to the reference genome using <monospace>graphmap</monospace>[<xref rid="bib35" ref-type="bibr">33</xref>] with the default parameters. The resulting BAM file was then assessed using the <monospace>japsa</monospace> error analysis tool (<monospace>jsa.hts.errorAnalysis</monospace>), which looks at the deletion, insertion, and mismatch rates; the number of unaligned and aligned reads; and the identification rate compared to the reference genome. The identity rate was calculated as <inline-formula><tex-math id="M16">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\frac{\mbox{number of matched bases}}{\mbox{number of bases in reference}}$\end{document}</tex-math></inline-formula> and is the marker used here for basecalling accuracy.</p>
    </sec>
    <sec id="sec5-7">
      <title>Assembly identity rate comparison</title>
      <p>We assessed the quality of assemblies generated from reads produced by different basecallers. For each basecaller, a <italic>de novo</italic> assembly was generated using only Nanopore reads for the <italic>M. tuberculosis</italic>,<italic>E. coli</italic>, and Lambda Phage genomes. We used Minimap2 [<xref rid="bib36" ref-type="bibr">34</xref>] and Miniasm [<xref rid="bib37" ref-type="bibr">35</xref>] to generate a draft genome, then Racon [<xref rid="bib38" ref-type="bibr">36</xref>] was used to polish on the draft genome for 10 rounds.</p>
    </sec>
  </sec>
  <sec sec-type="data-availability" id="sec6">
    <title>Availability of supporting data</title>
    <p>The <italic>M. tuberculosis</italic> sequencing data have been deposited in Genbank under project number <ext-link ext-link-type="gen" xlink:href="PRJNA386696">PRJNA386696</ext-link>. The Human nanopore data were downloaded from <ext-link ext-link-type="uri" xlink:href="https://github.com/nanopore-wgs-consortium/NA12878">https://github.com/nanopore-wgs-consortium/NA12878</ext-link>. Supporting data, including training and testing datasets, are available via GigaDB [<xref rid="bib39" ref-type="bibr">37</xref>].</p>
  </sec>
  <sec id="h1content1524225823106">
    <title>Availability of supporting source code and requirements</title>
    <p>Program and code are available at <ext-link ext-link-type="uri" xlink:href="https://github.com/haotianteng/chiron">https://github.com/haotianteng/chiron</ext-link> pypi package index 0.3 at <ext-link ext-link-type="uri" xlink:href="https://pypi.python.org/pypi/chiron">https://pypi.python.org/pypi/chiron</ext-link>. Chiron is registered in SciCrunch with <ext-link ext-link-type="uri" xlink:href="https://scicrunch.org/resolver/RRID:SCR_015950">RRID:SCR_015950</ext-link>. Chiron is available under a Mozilla Public License v2.0. Chiron is built with Tensorflow and requires python 2.7</p>
  </sec>
  <sec id="h1content1524226419755">
    <title>Abbreviations</title>
    <p>CNN: convolutional neural network; CPU: central processing unit; CTC: connectionist temporal classification; ELB: elution buffer; FC: fully connected; GPU:; LSTM: long short-term memory; NCBI: National Center for Biotechnology Information; NN: neural network; ONT: Oxford Nanopore Technologies; ReLU: rectified linear unit; RNN: recurrent neural network.</p>
  </sec>
  <sec id="sec8">
    <title>Competing interests</title>
    <p>L.C. is a participant of Oxford Nanopore’s MinION Access Programme and received the MinION device, MinION flow cells, and Oxford Nanopore sequencing kits in return for an early access fee deposit. L.C. and M.D.C. received travel and accommodation expenses to speak at an Oxford Nanopore-organized conference. None of the authors have any commercial or financial interest in Oxford Nanopore Technologies Ltd.</p>
  </sec>
  <sec id="h1content1524487409165">
    <title>Funding</title>
    <p>LC is supported by an NHMRC career development fellowship (GNT1130084). The research is supported by an ARC research grant (DP170102626). MH is supported by a Westpac Future Leaders Scholarship (2016) awarded by the Westpac Bicentennial Foundation.</p>
  </sec>
  <sec id="h1content1524487258912">
    <title>Author contributions</title>
    <p>M.H., M.D.C., and L.C. conceived the study and designed the experimental framework. H.T. designed and implemented the Chiron algorithm. M.D.C., L.C., and T.D. designed and performed the MinION sequencing. H.T. and M.D.C. labeled the training data. H.T. and M.H. ran the performance comparison. H.T. and M.D.C. wrote the initial draft. H.T., M.H., and L.C. refined the manuscript. All authors contributed to editing the final manuscript.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>GIGA-D-17-00305_Original_Submission.pdf</label>
      <media xlink:href="giy037_giga-d-17-00305_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup2">
      <label>GIGA-D-17-00305_Revision_1.pdf</label>
      <media xlink:href="giy037_giga-d-17-00305_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup3">
      <label>GIGA-D-17-00305_Revision_2.pdf</label>
      <media xlink:href="giy037_giga-d-17-00305_revision_2.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup4">
      <label>Response_to_Reviewer_Comments_Original_Submission.pdf</label>
      <media xlink:href="giy037_response_to_reviewer_comments_original_submission.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup5">
      <label>Response_to_Reviewer_Comments_Revision_1.pdf</label>
      <media xlink:href="giy037_response_to_reviewer_comments_revision_1.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup6">
      <label>Reviewer_1_Report_(Original_Submission) -- Ryan Wick</label>
      <caption>
        <p>19 Nov 2017 Reviewed</p>
      </caption>
      <media xlink:href="giy037_reviewer_1_report_(original_submission).pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup7">
      <label>Reviewer_1_Report_(Revision_1) -- Ryan Wick</label>
      <caption>
        <p>15 Feb 2018 Reviewed</p>
      </caption>
      <media xlink:href="giy037_reviewer_1_report_(revision_1).pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup8">
      <label>Reviewer_2_Report_(Original_Submission) -- Tomas Vinar</label>
      <caption>
        <p>05 Dec 2017 Reviewed</p>
      </caption>
      <media xlink:href="giy037_reviewer_2_report_(original_submission).pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="sup9">
      <label>Reviewer_3_Report_(Revision_1) -- Vladimir Boza</label>
      <caption>
        <p>07 Mar 2018 Reviewed</p>
      </caption>
      <media xlink:href="giy037_reviewer_3_report_(revision_1).pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ACK1">
    <title>ACKNOWLEDGEMENTS</title>
    <p>We thank Jianhua Guo for contributing the DNA for the <italic>E. coli</italic> sample. We thank Arnold Bainomugisa for extracting DNA for the <italic>M. tuberculosis</italic> sample. We thank Sheng Wang and Han Qiao for the helpful discussion. We thank Jain et al. [<xref rid="bib16" ref-type="bibr">14</xref>] for the open Human nanopore dataset.</p>
  </ack>
  <ref-list id="REF1">
    <title>References</title>
    <ref id="bib1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kasianowicz</surname><given-names>JJ</given-names></name>, <name name-style="western"><surname>Brandin</surname><given-names>E</given-names></name>, <name name-style="western"><surname>Branton</surname><given-names>D</given-names></name><etal>et al</etal>.</person-group><article-title>Characterization of individual polynucleotide molecules using a membrane channel</article-title>. <source>Proc Nat Acad of Sci</source>. <year>1996</year>;<volume>93</volume>(<issue>24</issue>):<fpage>13770</fpage>–<lpage>3</lpage>.<pub-id pub-id-type="pmid">8943010</pub-id></mixed-citation>
    </ref>
    <ref id="bib2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Branton</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Deamer</surname><given-names>DW</given-names></name>, <name name-style="western"><surname>Marziali</surname><given-names>A</given-names></name>, <etal>et al</etal>.</person-group><article-title>The potential and challenges of nanopore sequencing</article-title>. <source>Nature Biotechnology</source>. <year>2008</year>;<volume>26</volume>(<issue>10</issue>):<fpage>1146</fpage>–<lpage>53</lpage>.</mixed-citation>
    </ref>
    <ref id="bib3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Stoddart</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Heron</surname><given-names>AJ</given-names></name>, <name name-style="western"><surname>Mikhailova</surname><given-names>E</given-names></name><etal>et al</etal>.</person-group><article-title>Single-nucleotide discrimination in immobilized DNA oligonucleotides with a biological nanopore</article-title>. <source>Proc Nat Acad of Sci U S A</source>. <year>2009</year>;<volume>106</volume>(<issue>19</issue>):<fpage>7702</fpage>–<lpage>7</lpage>.</mixed-citation>
    </ref>
    <ref id="bib4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Ashton</surname><given-names>PM</given-names></name>, <name name-style="western"><surname>Nair</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Dallman</surname><given-names>T</given-names></name>, <etal>et al</etal>.</person-group><article-title>MinION nanopore sequencing identifies the position and structure of a bacterial antibiotic resistance island</article-title>. <source>Nature Biotechnology</source>. <year>2014</year>;<volume>33</volume>(<issue>3</issue>):<fpage>296</fpage>–<lpage>300</lpage>.</mixed-citation>
    </ref>
    <ref id="bib5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cao</surname><given-names>MD</given-names></name>, <name name-style="western"><surname>Ganesamoorthy</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Elliott</surname><given-names>AG</given-names></name>, <etal>et al</etal>.</person-group><article-title>Streaming algorithms for identification of pathogens and antibiotic resistance potential from real-time MinIONTM sequencing</article-title>. <source>GigaScience</source>. <year>2016</year>;<volume>5</volume>(<issue>1</issue>):<fpage>32</fpage>,<pub-id pub-id-type="doi">10.1186/s13742-016-0137-2</pub-id>.<pub-id pub-id-type="pmid">27457073</pub-id></mixed-citation>
    </ref>
    <ref id="bib6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cao</surname><given-names>MD</given-names></name>, <name name-style="western"><surname>Nguyen</surname><given-names>SH</given-names></name>, <name name-style="western"><surname>Ganesamoorthy</surname><given-names>D</given-names></name>, <etal>et al</etal>.</person-group><article-title>Scaffolding and completing genome assemblies in real-time with nanopore sequencing</article-title>. <source>Nature Communications</source>. <year>2017</year>;<volume>8</volume>:<fpage>14515</fpage>,<pub-id pub-id-type="doi">10.1038/ncomms14515</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cao</surname><given-names>MD</given-names></name>, <name name-style="western"><surname>Ganesamoorthy</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Cooper</surname><given-names>MA</given-names></name><etal>et al</etal>.</person-group><article-title>Realtime analysis and visualization of MinION sequencing data with npReader</article-title>. <source>Bioinformatics</source>. <year>2016</year>;<volume>32</volume>(<issue>5</issue>):<fpage>764</fpage>–<lpage>6</lpage>.<pub-id pub-id-type="pmid">26556383</pub-id></mixed-citation>
    </ref>
    <ref id="bib8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Quick</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Loman</surname><given-names>NJ</given-names></name>, <name name-style="western"><surname>Duraffour</surname><given-names>S</given-names></name><etal>et al</etal>.</person-group><article-title>Real-time, portable genome sequencing for Ebola surveillance</article-title>. <source>Nature</source>. <year>2016</year>;<volume>530</volume>(<issue>7589</issue>):<fpage>228</fpage>–<lpage>32</lpage>.<pub-id pub-id-type="pmid">26840485</pub-id></mixed-citation>
    </ref>
    <ref id="bib9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Faria</surname><given-names>NR</given-names></name>, <name name-style="western"><surname>Sabino</surname><given-names>EC</given-names></name>, <name name-style="western"><surname>Nunes</surname><given-names>MR</given-names></name>, <etal>et al</etal>.</person-group><article-title>Mobile real-time surveillance of Zika virus in Brazil</article-title>. <source>Genome Medicine</source>. <year>2016</year>;<volume>8</volume>(<issue>1</issue>):<fpage>97</fpage>.<pub-id pub-id-type="pmid">27683027</pub-id></mixed-citation>
    </ref>
    <ref id="bib11">
      <label>10.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>McIntyre</surname><given-names>AB</given-names></name>, <name name-style="western"><surname>Rizzardi</surname><given-names>L</given-names></name>, <name name-style="western"><surname>Angela</surname><given-names>MY</given-names></name><etal>et al</etal>.</person-group><article-title>Nanopore sequencing in microgravity</article-title>. <source>npj Microgravity</source>. <year>2016</year>;<volume>2</volume>:<fpage>16035</fpage>.<pub-id pub-id-type="pmid">28725742</pub-id></mixed-citation>
    </ref>
    <ref id="bib12">
      <label>11.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Castro-Wallace</surname><given-names>SL</given-names></name>, <name name-style="western"><surname>Chiu</surname><given-names>CY</given-names></name>, <name name-style="western"><surname>John</surname><given-names>KK</given-names></name><etal>et al</etal>.</person-group><article-title>Nanopore DNA sequencing and genome assembly on the International Space Station</article-title>. <source>Scientific Reports</source>. <year>2017</year>;p. <fpage>18022</fpage>.</mixed-citation>
    </ref>
    <ref id="bib15">
      <label>12.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Graves</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Fernández</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Gomez</surname><given-names>F</given-names></name>, <etal>et al</etal>.</person-group><article-title>Connectionist temporal classification: labelling unsegmented sequence data with recurrent neural networks</article-title>. In: <source>Proceedings of the 23rd International Conference on Machine Learning</source>. <publisher-name>ACM</publisher-name>; <year>2006</year> p. <fpage>369</fpage>–<lpage>376</lpage>.</mixed-citation>
    </ref>
    <ref id="bib38_881_1525767249152">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Stobier</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Brown</surname><given-names>J</given-names></name></person-group>, <article-title>BasecRAWller: Streaming Nanopore Basecalling Directly from Raw Signal</article-title>. <source>bioRxiv</source>. <year>2017</year>;:<fpage>133058</fpage>.</mixed-citation>
    </ref>
    <ref id="bib16">
      <label>14.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Jain</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Koren</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Quick</surname><given-names>J</given-names></name><etal>et al</etal>.</person-group><article-title>Nanopore sequencing and assembly of a human genome with ultra-long reads</article-title>. <source>Nature Biotechnology</source>. <year>2018</year>, <fpage>338</fpage>–<lpage>345</lpage>.. .</mixed-citation>
    </ref>
    <ref id="bib17">
      <label>15.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Laszlo</surname><given-names>AH</given-names></name>, <name name-style="western"><surname>Derrington</surname><given-names>IM</given-names></name>, <name name-style="western"><surname>Ross</surname><given-names>BC</given-names></name>, <etal>et al</etal>.</person-group><article-title>Decoding long nanopore sequencing reads of natural DNA</article-title>. <source>Nature Biotechnology</source>. <year>2014</year>;<volume>32</volume>(<issue>8</issue>):<fpage>829</fpage>–<lpage>833</lpage>.</mixed-citation>
    </ref>
    <ref id="bib18">
      <label>16.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>David</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Dursi</surname><given-names>LJ</given-names></name>, <name name-style="western"><surname>Yao</surname><given-names>D</given-names></name><etal>et al</etal>.</person-group><article-title>Nanocall: an open source basecaller for Oxford Nanopore sequencing data</article-title>. <source>Bioinformatics</source>. <year>2016</year>;<volume>33</volume>(<issue>1</issue>):<fpage>49</fpage>–<lpage>55</lpage>.<pub-id pub-id-type="pmid">27614348</pub-id></mixed-citation>
    </ref>
    <ref id="bib13">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Boža</surname><given-names>V</given-names></name>, <name name-style="western"><surname>Brejová</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Vinař</surname><given-names>T</given-names></name></person-group><article-title>DeepNano: deep recurrent neural networks for base calling in MinION nanopore reads</article-title>. <source>PloS ONE</source>. <year>2017</year>, <volume>12</volume>, <issue>6</issue>;():<fpage>e0178751</fpage>.<pub-id pub-id-type="pmid">28582401</pub-id></mixed-citation>
    </ref>
    <ref id="bib19">
      <label>18.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Wick</surname><given-names>RR</given-names></name>, <name name-style="western"><surname>Judd</surname><given-names>LM</given-names></name>, <name name-style="western"><surname>Holt</surname><given-names>KE</given-names></name></person-group><source>Comparison of Oxford Nanopore Basecalling Tools</source>; <year>2017</year><comment>Available from: </comment><pub-id pub-id-type="doi">10.5281/zenodo.1082696</pub-id>.</mixed-citation>
    </ref>
    <ref id="bib20">
      <label>19.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Han</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Mao</surname><given-names>H</given-names></name>, <name name-style="western"><surname>Dally</surname><given-names>WJ</given-names></name></person-group><source>Deep compression: compressing deep neural networks with pruning, trained quantization and Huffman coding</source>. <comment>arXiv preprint arXiv:151000149</comment><year>2015</year>.</mixed-citation>
    </ref>
    <ref id="bib21">
      <label>20.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>LeCun</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Bengio</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Hinton</surname><given-names>G</given-names></name></person-group><article-title>Deep learning</article-title>. <source>Nature</source>. <year>2015</year>;<volume>521</volume>(<issue>7553</issue>):<fpage>436</fpage>–<lpage>44</lpage>.<pub-id pub-id-type="pmid">26017442</pub-id></mixed-citation>
    </ref>
    <ref id="bib22">
      <label>21.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Amodei</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Anubhai</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Battenberg</surname><given-names>E</given-names></name><etal>et al</etal>.</person-group><article-title>Deep Speech 2: end-to-end speech recognition in English and Mandarin</article-title>. In: <source>International Conference on Machine Learning</source>; <year>2016</year> p. <fpage>173</fpage>–<lpage>182</lpage>.</mixed-citation>
    </ref>
    <ref id="bib24">
      <label>22.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Ioffe</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Szegedy</surname><given-names>C</given-names></name></person-group><article-title>Batch normalization: accelerating deep network training by reducing internal covariate shift</article-title>. <comment>arXiv preprint arXiv:150203167</comment><year>2015</year>.</mixed-citation>
    </ref>
    <ref id="bib25">
      <label>23.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Schuster</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Paliwal</surname><given-names>KK</given-names></name></person-group><article-title>Bidirectional recurrent neural networks</article-title>. <source>IEEE Transactions on Signal Processing</source>. <year>1997</year>;<volume>45</volume>(<issue>11</issue>):<fpage>2673</fpage>–<lpage>81</lpage>.</mixed-citation>
    </ref>
    <ref id="bib26">
      <label>24.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hochreiter</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Schmidhuber</surname><given-names>J</given-names></name></person-group><article-title>Long short-term memory</article-title>. <source>Neural Computation</source>. <year>1997</year>;<volume>9</volume>(<issue>8</issue>):<fpage>1735</fpage>–<lpage>80</lpage>.<pub-id pub-id-type="pmid">9377276</pub-id></mixed-citation>
    </ref>
    <ref id="bib27">
      <label>25.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Cooijmans</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Ballas</surname><given-names>N</given-names></name>, <name name-style="western"><surname>Laurent</surname><given-names>C</given-names></name><etal>et al</etal>.</person-group><source>Recurrent batch normalization</source>. <comment>arXiv preprint arXiv:160309025</comment><year>2016</year>.</mixed-citation>
    </ref>
    <ref id="bib28">
      <label>26.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Kingma</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Ba</surname><given-names>J</given-names></name></person-group><source>Adam: a method for stochastic optimization</source>. <comment>arXiv preprint arXiv:14126980</comment><year>2014</year>.</mixed-citation>
    </ref>
    <ref id="bib29">
      <label>27.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Graves</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Jaitly</surname><given-names>N</given-names></name></person-group><article-title>Towards end-to-end speech recognition with recurrent neural networks</article-title>. In: <source>Proceedings of the 31st International Conference on Machine Learning (ICML-14)</source>; <year>2014</year> p. <fpage>1764</fpage>–<lpage>1772</lpage>.</mixed-citation>
    </ref>
    <ref id="bib23">
      <label>28.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>He</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Zhang</surname><given-names>X</given-names></name>, <name name-style="western"><surname>Ren</surname><given-names>S</given-names></name><etal>et al</etal>.</person-group><article-title>Deep residual learning for image recognition</article-title>. In: <source>Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition</source>; <year>2016</year> p. <fpage>770</fpage>–<lpage>778</lpage>.</mixed-citation>
    </ref>
    <ref id="bib30">
      <label>29.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Nair</surname><given-names>V</given-names></name>, <name name-style="western"><surname>Hinton</surname><given-names>GE</given-names></name></person-group><article-title>Rectified linear units improve restricted boltzmann machines</article-title>. In: <source>Proceedings of the 27th International Conference on Machine Learning (ICML-10)</source>; <year>2010</year> p. <fpage>807</fpage>–<lpage>814</lpage>.</mixed-citation>
    </ref>
    <ref id="bib31">
      <label>30.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gers</surname><given-names>FA</given-names></name>, <name name-style="western"><surname>Schmidhuber</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Cummins</surname><given-names>F</given-names></name></person-group><article-title>Learning to forget: continual prediction with LSTM</article-title>. <source>Neural Computation</source>. <year>2000</year>;<volume>12</volume>(<issue>10</issue>):<fpage>2451</fpage>–<lpage>71</lpage>.<pub-id pub-id-type="pmid">11032042</pub-id></mixed-citation>
    </ref>
    <ref id="bib34">
      <label>31.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bankevich</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Nurk</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Antipov</surname><given-names>D</given-names></name>, <etal>et al</etal>.</person-group><article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>. <source>Journal of Computational Biology</source>. <year>2012</year>;<volume>19</volume>(<issue>5</issue>):<fpage>455</fpage>–<lpage>77</lpage>.<pub-id pub-id-type="pmid">22506599</pub-id></mixed-citation>
    </ref>
    <ref id="bib33">
      <label>32.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Stoiber</surname><given-names>MH</given-names></name>, <name name-style="western"><surname>Quick</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Egan</surname><given-names>R</given-names></name>, <etal>et al</etal>.</person-group><article-title>De novo identification of DNA modifications enabled by genome-guided nanopore signal processing</article-title>. <source>bioRxiv</source>. <year>2017</year>;p. <fpage>094672</fpage>.</mixed-citation>
    </ref>
    <ref id="bib35">
      <label>33.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sović</surname><given-names>I</given-names></name>, <name name-style="western"><surname>Šikić</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Wilm</surname><given-names>A</given-names></name>, <etal>et al</etal>.</person-group><article-title>Fast and sensitive mapping of nanopore sequencing reads with GraphMap</article-title>. <source>Nature Communications</source>. <year>2016</year>;<volume>7</volume>:<fpage>11307</fpage>.</mixed-citation>
    </ref>
    <ref id="bib36">
      <label>34.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>H</given-names></name></person-group><source>Minimap2: versatile pairwise alignment for nucleotide sequences</source>. <comment>arXiv</comment><year>2017</year>;<fpage>1708</fpage>.</mixed-citation>
    </ref>
    <ref id="bib37">
      <label>35.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>H</given-names></name></person-group><article-title>Minimap and Miniasm: fast mapping and de novo assembly for noisy long sequences</article-title>. <source>Bioinformatics</source>. <year>2016</year>;<volume>32</volume>(<issue>14</issue>):<fpage>2103</fpage>–<lpage>10</lpage>.<pub-id pub-id-type="pmid">27153593</pub-id></mixed-citation>
    </ref>
    <ref id="bib38">
      <label>36.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Vaser</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Sović</surname><given-names>I</given-names></name>, <name name-style="western"><surname>Nagarajan</surname><given-names>N</given-names></name><etal>et al</etal>.</person-group><article-title>Fast and accurate de novo genome assembly from long uncorrected reads</article-title>. <source>Genome Research</source>. <year>2017</year>;<volume>27</volume>(<issue>5</issue>):<fpage>737</fpage>–<lpage>746</lpage>.<pub-id pub-id-type="pmid">28100585</pub-id></mixed-citation>
    </ref>
    <ref id="bib39">
      <label>37.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Teng</surname><given-names>H</given-names></name>, <name name-style="western"><surname>Cao</surname><given-names>MD</given-names></name>, <name name-style="western"><surname>Hall</surname><given-names>MB</given-names></name>, <etal>et al</etal>.</person-group><article-title>Supporting data for “Chiron: translating nanopore raw signal directly into nucleotide sequence using deep learning.”</article-title>. <source>GigaScience Database</source>. <year>2018</year>, <pub-id pub-id-type="doi">10.5524/100425</pub-id>.</mixed-citation>
    </ref>
  </ref-list>
</back>
