<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10112951</article-id>
    <article-id pub-id-type="pmid">37027230</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad181</article-id>
    <article-id pub-id-type="publisher-id">btad181</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Genome Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic toggle="yes">streammd</italic>: fast low-memory duplicate marking using a Bloom filter</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-4131-2065</contrib-id>
        <name>
          <surname>Leonard</surname>
          <given-names>Conrad</given-names>
        </name>
        <xref rid="btad181-cor1" ref-type="corresp"/>
        <!--conrad.leonard@qimrberghofer.edu.au-->
        <aff><institution>Department of Genome Informatics, QIMR Berghofer Medical Research Institute</institution>, Herston, QLD 4006, <country country="AU">Australia</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Robinson</surname>
          <given-names>Peter</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad181-cor1">Corresponding author. Department of Genome Informatics, QIMR Berghofer Medical Research Institute, 300 Herston Rd, Herston, QLD 4006, Australia. E-mail: <email>conrad.leonard@qimrberghofer.edu.au</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>4</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-04-07">
      <day>07</day>
      <month>4</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>07</day>
      <month>4</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>4</issue>
    <elocation-id>btad181</elocation-id>
    <history>
      <date date-type="received">
        <day>26</day>
        <month>10</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>28</day>
        <month>2</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>02</day>
        <month>4</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>18</day>
        <month>4</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad181.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>Identification of duplicate templates is a common preprocessing step in bulk sequence analysis; for large libraries, this can be resource intensive. Here, we present <monospace>streammd</monospace>: a fast, memory-efficient, single-pass duplicate marker operating on the principle of a Bloom filter. <monospace>streammd</monospace> closely reproduces outputs from Picard <monospace>MarkDuplicates</monospace> while being substantially faster, and requires much less memory than <monospace>SAMBLASTER</monospace>.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p><monospace>streammd</monospace> is a C++ program available from GitHub <ext-link xlink:href="https://github.com/delocalizer/streammd" ext-link-type="uri">https://github.com/delocalizer/streammd</ext-link> under the MIT license.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Ian Potter Foundation and The John Thomas Wilson Endowment</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="3"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>It is often desirable to identify duplicates in sequencing data, e.g. for library complexity estimation, or to omit them when the number of unique molecules is important, e.g. allele frequency calculation.</p>
    <p>Duplicate identification is readily performed after alignment by grouping together templates located at the same genomic coordinates. A widely-used tool for this purpose is <monospace>MarkDuplicates</monospace> from <ext-link xlink:href="https://broadinstitute.github.io/picard/" ext-link-type="uri">https://broadinstitute.github.io/picard/</ext-link> (<xref rid="btad181-B5" ref-type="bibr">Picard Toolkit 2019</xref>). A single-pass implementation is also possible: template ends are hashed as received and subsequent hits are identified as duplicates e.g. <monospace>SAMBLASTER</monospace> (<xref rid="btad181-B3" ref-type="bibr">Faust and Hall 2014</xref>); this has the advantage of allowing pipelined operation and avoiding at least one expensive write-read cycle. With conventional hash tables, the memory requirements of this approach are considerable for large libraries—a 60× coverage human whole genome contains ∼1B templates and the resulting hash structure is tens of GB—here we use instead a Bloom filter (<xref rid="btad181-B1" ref-type="bibr">Bloom 1970</xref>) to achieve fast streaming operation in a small memory footprint.</p>
  </sec>
  <sec>
    <title>2 Implementation</title>
    <p><monospace>streammd</monospace> is implemented as a C++ program running in a single process. A Bloom filter is initialized with <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mrow><mml:mi>k</mml:mi><mml:mo>=</mml:mo><mml:mn>10</mml:mn></mml:mrow></mml:math></inline-formula> hash functions and a bit array sized to meet user-specified memory and false-positive requirements. Input is QNAME-grouped SAM records. Template ends are calculated from the primary alignments in each QNAME group and a signature hashed into the Bloom filter. If the signature is already present the output SAM record is marked as a duplicate: the 0x400 FLAG bit is set and the <monospace>PG:Z:streammd</monospace> tag is added. By default, an error is generated if the stored item count exceeds that at which the false-positive rate is theoretically reached; this behavior can be toggled with —<monospace>allow-overcapacity</monospace>. Metrics are written to file at the end of processing.</p>
  </sec>
  <sec>
    <title>3 Methods</title>
    <p>In addition to extensive unit tests, to illustrate correctness we take Picard and <monospace>SAMBLASTER</monospace> as reference implementations and compare in <xref rid="btad181-F1" ref-type="fig">Fig. 1a</xref> bulk duplicate FLAG counts in the outputs from <monospace>MarkDuplicates</monospace>, <monospace>SAMBLASTER</monospace>, and <monospace>streammd</monospace> run with default settings on <italic toggle="yes">n</italic> = 2 × 10<sup>8</sup> templates. For this data using the default 4GiB memory setting for <monospace>streammd</monospace> yields a negligible expected Bloom filter false-positive rate of <inline-formula id="IE2"><mml:math id="IM2" display="inline" overflow="scroll"><mml:mrow><mml:mo>&lt;</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mn>10</mml:mn></mml:mrow></mml:mrow><mml:mrow><mml:mo>−</mml:mo><mml:mn>12</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>.</p>
    <fig position="float" id="btad181-F1">
      <label>Figure 1.</label>
      <caption>
        <p>(a) Primary alignment duplicate flag counts after duplicate marking with <monospace>MarkDuplicates</monospace>, <monospace>SAMBLASTER</monospace>, and <monospace>streammd</monospace>. Input size = 3.97 × 10<sup>8</sup> reads = 1.99 × 10<sup>8</sup> templates. (b) <monospace>MarkDuplicates</monospace>, <monospace>SAMBLASTER</monospace>, and <monospace>streammd</monospace> runtime for three input sizes. (c) <monospace>MarkDuplicates</monospace>, <monospace>SAMBLASTER</monospace>, and <monospace>streammd</monospace> memory use for three input sizes. The small, medium, and large inputs correspond to single library paired-end human WGS bams of 30G, 117G, and 272G: ∼8×, 30×, and 60× read depth</p>
      </caption>
      <graphic xlink:href="btad181f1" position="float"/>
    </fig>
    <p>In <xref rid="btad181-F1" ref-type="fig">Fig. 1b and c</xref>, we show runtime and memory benchmarks for <monospace>MarkDuplicates</monospace>, <monospace>SAMBLASTER</monospace>, and <monospace>streammd</monospace> with different sized inputs. The small and medium inputs consist of 2 × 10<sup>8</sup> templates and 8 × 10<sup>8</sup> templates respectively from 2 <inline-formula id="IE3"><mml:math id="IM3" display="inline" overflow="scroll"><mml:mo>×</mml:mo></mml:math></inline-formula> 101 bp Illumina sequencing of a single library from human lymphocyte sample MELA_0102 (<xref rid="btad181-B4" ref-type="bibr">Hayward et al. 2017</xref>); the large input consists of 1.6 × 10<sup>9</sup> templates from 2 <inline-formula id="IE4"><mml:math id="IM4" display="inline" overflow="scroll"><mml:mo>×</mml:mo></mml:math></inline-formula> 101 bp Illumina sequencing of a single library from human melanoma cell-line sample MELA_0114 (ibid.). These correspond to GRCh38 raw read depths of ∼8×, 30×, and 60×, respectively.</p>
    <p>Latest versions of all tools were used—Picard Toolkit 2.27.4, <monospace>SAMBLASTER</monospace> 0.1.26, and <monospace>streammd</monospace> 4.2.1. Benchmarking was performed on a Dell c6320 with Intel<sup>®</sup> Xeon<sup>®</sup> CPU E5-2690 v4 processors and 256G RAM. <monospace>MarkDuplicates</monospace> was run using Java<sup>®</sup> JRE 1.8.152, 2G heap space, serial GC, and output specified as SAM format to avoid compression overhead. <monospace>streammd</monospace> was run with the default maximum acceptable marginal false-positive rate of <inline-formula id="IE5"><mml:math id="IM5" display="inline" overflow="scroll"><mml:mrow><mml:msup><mml:mrow><mml:mrow><mml:mn>10</mml:mn></mml:mrow></mml:mrow><mml:mrow><mml:mo>−</mml:mo><mml:mn>6</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>.</p>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>All unit tests pass, including a suite of 47 tests ported from the <monospace>MarkDuplicates</monospace> codebase that demonstrate exact read-by-read equivalence of the two tools’ duplicate marking behavior for completely mapped templates. Empirically, in <xref rid="btad181-F1" ref-type="fig">Fig. 1a</xref>, we observe that outputs from the three tools are generally highly concordant for bulk counts of duplicate flags. There are substantive differences between <monospace>MarkDuplicates</monospace> and the other two tools for counts of templates with one unmapped end. These are due to the duplicate detection algorithm of <monospace>streammd</monospace> and <monospace>SAMBLASTER</monospace> conforming to a stricter logic for these templates requiring identity of both the mapped end and mate unmapped status, than <monospace>MarkDuplicates</monospace> which requires only that the mapped end have a counterpart in some pair. There are also differences of a few ppm in counts of completely mapped templates (not discernible in the bar plot) between <monospace>MarkDuplicates</monospace> and the other two tools due to the input-order-dependent nature of <monospace>streammd</monospace> and <monospace>SAMBLASTER</monospace> duplicate assignment, in contrast to <monospace>MarkDuplicates</monospace>’ default best-quality strategy. The two approaches will in general yield different flag counts because duplicate sets frequently contain oppositely-oriented templates, which have different flag pairings. Notable in this case where expected Bloom filter false positives are zero is that the <monospace>streammd</monospace> and <monospace>SAMBLASTER</monospace> flag counts agree exactly.</p>
    <p>In <xref rid="btad181-F1" ref-type="fig">Fig. 1b</xref>, we observe that <monospace>streammd</monospace> averages <inline-formula id="IE6"><mml:math id="IM6" display="inline" overflow="scroll"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>4.5</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math></inline-formula> as fast as <monospace>MarkDuplicates</monospace>, as might be expected for single-pass operation. We also observe that <monospace>SAMBLASTER</monospace> averages <inline-formula id="IE7"><mml:math id="IM7" display="inline" overflow="scroll"><mml:mrow><mml:mo>∼</mml:mo><mml:mn>1.3</mml:mn><mml:mo>×</mml:mo></mml:mrow></mml:math></inline-formula> as fast as <monospace>streammd</monospace>, which is understandable as <monospace>SAMBLASTER</monospace> performs one hash and address operation per template where <monospace>streammd</monospace> performs 10. Profiling with <monospace>gprof</monospace> reveals that the majority of execution time in <monospace>streammd</monospace> is actually bit array access, a testament to the speed of the xxhash algorithm used here <ext-link xlink:href="https://github.com/Cyan4973/xxHash" ext-link-type="uri">https://github.com/Cyan4973/xxHash</ext-link> (<xref rid="btad181-B2" ref-type="bibr">Collet 2012</xref>).</p>
    <p>In <xref rid="btad181-F1" ref-type="fig">Fig. 1c</xref>, we observe that <monospace>streammd</monospace> requires <inline-formula id="IE8"><mml:math id="IM8" display="inline" overflow="scroll"><mml:mrow><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:math></inline-formula> the memory of <monospace>SAMBLASTER</monospace> at all input sizes with the default maximum acceptable marginal false-positive rate of <italic toggle="yes">P</italic> = 10<sup>−6</sup>. For all inputs <monospace>MarkDuplicates</monospace> was run with the recommended 2G heap (<xref rid="btad181-B5" ref-type="bibr">Picard Toolkit 2019</xref>).</p>
    <p>In <xref rid="sup1" ref-type="supplementary-material">Supplementary Fig. S2</xref>, we plot maximum and average CPU usage for the three tools. <monospace>SAMBLASTER</monospace> and <monospace>streammd</monospace> fully utilize a single core while <monospace>MarkDuplicates</monospace> averages 1.25 and peaks at over 4 due to JVM overhead.</p>
    <p>Limitations of <monospace>streammd</monospace> due to streaming operation include inability to pick the “best” among duplicates or distinguish between optical and PCR duplicates, and loss of some unique sequence coverage due to Bloom filter false positives—although we believe the default setting of <inline-formula id="IE9"><mml:math id="IM9" display="inline" overflow="scroll"><mml:mrow><mml:msup><mml:mrow><mml:mrow><mml:mn>10</mml:mn></mml:mrow></mml:mrow><mml:mrow><mml:mo>−</mml:mo><mml:mn>6</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula> is tolerable in most applications. The current implementation also accepts only SAM format inputs and requires a separate upstream tool to parse BAM or CRAM.</p>
  </sec>
  <sec>
    <title>5 Conclusion</title>
    <p><monospace>streammd</monospace> achieves fast, accurate duplicate marking in a small memory footprint using the principle of a Bloom filter. Streaming operation and low memory use make it attractive for pipelined workflows, increasing the benefit of fast processing and allowing efficient packing of post-alignment tasks in HPC and container orchestration environments.</p>
  </sec>
  <sec>
    <title>Ethics</title>
    <p>This research used previously published data for benchmarking. The QIMR Berghofer Human Research Ethics Committee approved use of public data (P2095).</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad181_Supplementary_Data</label>
      <media xlink:href="btad181_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>Many thanks to John Pearson for useful discussions, and to all in the Genome Informatics and Medical Genomics teams for invaluable support and encouragement.</p>
  </ack>
  <sec>
    <title>Supplementary data</title>
    <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> is available at <italic toggle="yes">Bioinformatics</italic> online.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This research used the QIMR Berghofer HPC infrastructure supported by The Ian Potter Foundation and The John Thomas Wilson Endowment.</p>
    <p>Conflict of interest: None declared.</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>No new data were generated; sequence alignment files used in benchmarking are available from the European Genome-Phenome Archive (EGA) under dataset accession EGAD00001003388.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad181-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bloom</surname><given-names>BH.</given-names></string-name></person-group><article-title>Space/time trade-offs in hash coding with allowable errors</article-title>. <source>Commun ACM</source><year>1970</year>;<volume>13</volume>:<fpage>422</fpage>–<lpage>6</lpage>.</mixed-citation>
    </ref>
    <ref id="btad181-B2">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Collet</surname><given-names>Y.</given-names></string-name></person-group> xxHash—extremely fast hash algorithm. GitHub Repository. <year>2012</year>. <ext-link xlink:href="https://broadinstitute.github.io/picard/" ext-link-type="uri">https://broadinstitute.github.io/picard/</ext-link> (26 October 2022, date last accessed).</mixed-citation>
    </ref>
    <ref id="btad181-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Faust</surname><given-names>GG</given-names></string-name>, <string-name><surname>Hall</surname><given-names>IM.</given-names></string-name></person-group><article-title>SAMBLASTER: fast duplicate marking and structural variant read extraction</article-title>. <source>Bioinformatics</source><year>2014</year>;<volume>30</volume>:<fpage>2503</fpage>–<lpage>5</lpage>.<pub-id pub-id-type="pmid">24812344</pub-id></mixed-citation>
    </ref>
    <ref id="btad181-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hayward</surname><given-names>N</given-names></string-name>, <string-name><surname>Wilmott</surname><given-names>J</given-names></string-name>, <string-name><surname>Waddell</surname><given-names>N</given-names></string-name></person-group><etal>et al</etal><article-title>Whole-genome landscapes of major melanoma subtypes</article-title>. <source>Nature</source><year>2017</year>;<volume>545</volume>:<fpage>175</fpage>–<lpage>80</lpage>.<pub-id pub-id-type="pmid">28467829</pub-id></mixed-citation>
    </ref>
    <ref id="btad181-B5">
      <mixed-citation publication-type="book"><collab>Picard Toolkit</collab>. <publisher-name>Broad Institute</publisher-name>, GitHub Repository. <year>2019</year>. <ext-link xlink:href="https://cyan4973.github.io/xxHash/" ext-link-type="uri">https://cyan4973.github.io/xxHash/</ext-link> (26 October 2022, date last accessed).</mixed-citation>
    </ref>
  </ref-list>
</back>
