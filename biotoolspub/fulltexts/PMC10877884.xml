<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10877884</article-id>
    <article-id pub-id-type="publisher-id">5691</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-024-05691-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>CytoPipeline and CytoPipelineGUI: a Bioconductor R package suite for building and visualizing automated pre-processing pipelines for flow cytometry data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Hauchamps</surname>
          <given-names>Philippe</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bayat</surname>
          <given-names>Babak</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Delandre</surname>
          <given-names>Simon</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hamrouni</surname>
          <given-names>Mehdi</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Toussaint</surname>
          <given-names>Marie</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Temmerman</surname>
          <given-names>Stephane</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Lin</surname>
          <given-names>Dan</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Gatto</surname>
          <given-names>Laurent</given-names>
        </name>
        <address>
          <email>laurent.gatto@uclouvain.be</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/022em3k58</institution-id><institution-id institution-id-type="GRID">grid.16549.3f</institution-id><institution>Computational Biology and Bioinformatics, de duve Institute, </institution><institution>UCLouvain, </institution></institution-wrap>Brussels, Belgium </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.425090.a</institution-id><institution-id institution-id-type="ISNI">0000 0004 0468 9597</institution-id><institution>GSK, </institution></institution-wrap>Rixensart, Belgium </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>20</day>
      <month>2</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>20</day>
      <month>2</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>25</volume>
    <elocation-id>80</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>2</day>
        <month>2</month>
        <year>2024</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">With the increase of the dimensionality in flow cytometry data over the past years, there is a growing need to replace or complement traditional manual analysis (i.e. iterative 2D gating) with automated data analysis pipelines. A crucial part of these pipelines consists of pre-processing and applying quality control filtering to the raw data, in order to use high quality events in the downstream analyses. This part can in turn be split into a number of elementary steps: signal compensation or unmixing, scale transformation, debris, doublets and dead cells removal, batch effect correction, etc. However, assembling and assessing the pre-processing part can be challenging for a number of reasons. First, each of the involved elementary steps can be implemented using various methods and R packages. Second, the order of the steps can have an impact on the downstream analysis results. Finally, each method typically comes with its specific, non standardized diagnostic and visualizations, making objective comparison difficult for the end user.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">Here, we present <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, two <italic>R</italic> packages to build, compare and assess pre-processing pipelines for flow cytometry data. To exemplify these new tools, we present the steps involved in designing a pre-processing pipeline on a real life dataset and demonstrate different visual assessment use cases. We also set up a benchmarking comparing two pre-processing pipelines differing by their quality control methods, and show how the package visualization utilities can provide crucial user insight into the obtained benchmark metrics.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3"><italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic> are two Bioconductor <italic>R</italic> packages that help building, visualizing and assessing pre-processing pipelines for flow cytometry data. They increase productivity during pipeline development and testing, and complement benchmarking tools, by providing user intuitive insight into benchmarking results.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-024-05691-z.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Flow cytometry</kwd>
      <kwd>Automated data analysis pipeline</kwd>
      <kwd>Pre-processing</kwd>
      <kwd>Quality control</kwd>
      <kwd>Visualization</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par4">With recent advances in flow cytometry technologies, it has become possible to measure up to 50 markers simultaneously for the same single cells [<xref ref-type="bibr" rid="CR1">1</xref>]. As an immediate benefit, scientists now have access to richer flow cytometry experimental data. However, these advances also come at a cost, i.e. a more complex data analysis task. Indeed, traditional ’manual gating’ data analysis procedures, which proceed by iterative hierarchical 2D representations of the data guided by biological knowledge, are unable to thoroughly extract the signal of interest from such high-dimensional data [<xref ref-type="bibr" rid="CR2">2</xref>]. There is therefore a need to complement such manual, expert-based approaches with <italic>computational flow cytometry</italic>, i.e. a set of computational algorithms and methods for automated, reproducible and data-driven flow cytometry data analysis [<xref ref-type="bibr" rid="CR2">2</xref>].</p>
    <p id="Par5">Those computational flow cytometry approaches translate into so-called data analysis pipelines. Examples of such automated pipelines have been published in the recent litterature (e.g. [<xref ref-type="bibr" rid="CR3">3</xref>–<xref ref-type="bibr" rid="CR7">7</xref>]). These consist of a series of data processing steps that are executed, one after the other, with the output of one step becoming the input of the next step. Schematically, for a typical flow cytometry data analysis, these numerous steps can usually be grouped into three big parts, coming after initial data sample acquisition:<list list-type="bullet"><list-item><p id="Par6"><italic>data pre-processing and quality control</italic>, which consists in both filtering undesirable and low quality events, and increasing the signal to noise ratio of the raw data, in order to feed the downstream steps with data of the highest possible quality;</p></list-item><list-item><p id="Par7"><italic>population identification</italic>, which aims at labelling the events with names of cell populations of interest;</p></list-item><list-item><p id="Par8"><italic>downstream statistical analysis</italic>, which can range from the simplest descriptive count/frequencies per population, to building complex prediction models for an outcome of interest, possibly for a high number of samples.</p></list-item></list>In what follows, we will mainly focus on the data pre-processing part, which can itself be split into several sub-tasks, or <italic>steps</italic> [<xref ref-type="bibr" rid="CR8">8</xref>]: compensation, scale transformation, control (and possibly removal) of batch effects, control of signal stability in time (<italic>QC in time</italic>), filtering of undesirable events like debris, doublets and dead cells. All these steps are crucial to avoid that the subsequent analysis gets perturbed with erroneous signal (see e.g. [<xref ref-type="bibr" rid="CR9">9</xref>] for compensation, [<xref ref-type="bibr" rid="CR10">10</xref>] for scale transformation, [<xref ref-type="bibr" rid="CR11">11</xref>] for signal stability in time, and [<xref ref-type="bibr" rid="CR12">12</xref>] for other steps).</p>
    <p id="Par9">However, building good, automated pre-processing pipelines, suitable for the particular type of biological samples and biological question, can be challenging for a number of reasons. First, for each elementary step, there might exist a number of different computational methods, each of those having numerous parameters available to the user. For example, looking only into methods available on the Bioconductor project [<xref ref-type="bibr" rid="CR13">13</xref>] for controlling the signal stability (<italic>QC in time</italic>), one finds at least four different methods available: <italic>flowAI</italic> [<xref ref-type="bibr" rid="CR14">14</xref>], <italic>flowClean</italic> [<xref ref-type="bibr" rid="CR15">15</xref>], <italic>PeacoQC</italic> [<xref ref-type="bibr" rid="CR11">11</xref>], <italic>flowCut</italic> [<xref ref-type="bibr" rid="CR16">16</xref>], and each of these methods comes with 7 to 11 different parameters. Second, the order of steps is not always set in stone, and applying different orders can lead to different outcomes, an effect coined steps interaction. These two facts lead to what we refer to as the <italic>combinatorial problem of designing pipelines</italic>, which means that, as the number of necessary elementary steps increases, the number of possible pipeline designs grows exponentially. As a consequence, for the user, it becomes time consuming to build and assess even only a few of the possible step combinations, let alone testing a representative sample of them in a systematic manner.</p>
    <p id="Par10">On top of that combinatorial problem, the user is also faced with a lack of generic, standardized and user-friendly tools to evaluate and compare data pre-processing pipelines. On the one hand, each single pre-processing step method might come with its own approach for diagnostic and visualization (e.g. ad hoc plots, html or pdf reports), which allows the user neither to standardize the comparison process, nor to easily investigate the links and interactions between the different steps. On the other hand, there are a number of benchmarking studies comparing computational methods for flow cytometry data [<xref ref-type="bibr" rid="CR17">17</xref>–<xref ref-type="bibr" rid="CR20">20</xref>], but they tend to focus on only one part of the pipeline, which is usually the downstream analysis. Finally, there also exist some generic tools and frameworks to systematize the benchmarking process, including the interactions between different steps, such as for example <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>] and <italic>CellBench</italic> [<xref ref-type="bibr" rid="CR22">22</xref>], and as well as some attempts to formally model the pipeline optimization problem in mathematical terms [<xref ref-type="bibr" rid="CR23">23</xref>]. However, what is lacking for the end user is the ability to intuitively interpret the results of such benchmarkings. In other words, could one translate that a pipeline <italic>A</italic> outperforms a pipeline <italic>B</italic>, with respect to a specific performance metric, in terms of the obtained data characteristics, or number of filtered events. Therefore, there is still a need for flow cytometry practitioner-focused standardized tools for visual comparison of pre-processing pipelines.</p>
    <p id="Par11">Here, we present <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, two <italic>R</italic> packages aimed at facilitating the design and visual comparison of pre-processing pipelines for flow cytometry data. We describe the concepts underlying the software, provide some illustrative examples and demonstrate the use of the accompanying visualization utilities. We show that these new tools can help increasing the productivity during pipeline development and testing, and that they can complement benchmarking tools and studies, by providing the user with intuitive insight into benchmarking results. The <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic> packages are available on Bioconductor [<xref ref-type="bibr" rid="CR13">13</xref>], as of version 3.17 and 3.18, respectively.</p>
  </sec>
  <sec id="Sec2">
    <title>Methods</title>
    <sec id="Sec3">
      <title>Implementation</title>
      <p id="Par12">In what follows, we assume that we have a dataset, provided as a set of files in Flow Cytometry Standard (<italic>fcs</italic>) format [<xref ref-type="bibr" rid="CR24">24</xref>], on which we would like to apply a data pre-processing pipeline.</p>
      <p id="Par13">The <italic>CytoPipeline</italic> suite is composed of two main <italic>R</italic> packages, <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>. While <italic>CytoPipeline</italic> is the main package, providing support for pipeline definition, running, monitoring and basic plotting functions, <italic>CytoPipelineGUI</italic> provides two interactive GUI applications enabling users to interactively explore and visualize the pipeline results. The <italic>CytoPipeline</italic> framework is based on two main concepts, namely <italic>CytoPipeline</italic> and <italic>CytoProcessingStep</italic>. A <italic>CytoPipeline</italic> object centralizes the pipeline definition, and specifies the run order of the different pipeline steps. These steps materialize as <italic>CytoProcessingStep</italic> objects, which store pipeline step names and the corresponding <italic>R</italic> functions that will be called at execution time. These functions are either provided within the <italic>CytoPipeline</italic> package itself, exported from third party packages, or coded by the user themself. Together with the function name to be called, a <italic>CytoProcessingStep</italic> object also contains the list of parameters that are used as arguments to the function.</p>
      <p id="Par14">When creating a <italic>CytoPipeline</italic> object, the user can provide the description of the pipeline as a text file in <italic>json</italic> format [<xref ref-type="bibr" rid="CR25">25</xref>]. Figure <xref rid="Fig1" ref-type="fig">1</xref> shows the typical structure of such a <italic>json</italic> file. Note that, in practice, two different sets of processing steps, or pipelines, are described:<list list-type="bullet"><list-item><p id="Par15">A <italic>scaleTransformProcessingSteps</italic> pipeline, which describes the set of successive steps needed to generate the scale transformations that will be applied to the different channels of each of the <italic>fcs</italic> files that are included in the dataset. The <italic>CytoPipeline</italic> engine will run this pipeline first, and only once, prior to running the pre-processing on each <italic>fcs</italic> file.</p></list-item><list-item><p id="Par16">A <italic>flowFramesPreProcessingSteps</italic> pipeline, which describes the set of pre-processing steps that will be applied on each of the different <italic>fcs</italic> file independently.</p></list-item></list>Steps in both pipelines are described in the exact same way, i.e. by providing a user-chosen name for the step, the corresponding function that needs to be called by the engine upon running, and the set of arguments (i.e. the list of parameter names and corresponding values) that need to be provided to the function. Note that, on top of these explicitely defined arguments, the running engine will also take the output of each step as an implicit additional argument to the function called by the subsequent step.<fig id="Fig1"><label>Fig. 1</label><caption><p>Structure of the user provided <italic>json</italic> file that describes a <italic>CytoPipeline</italic> object. The first pipeline (i.e. <italic>“scaleTransformProcessingSteps”</italic>) specifies how the preliminary calculation of the scale transformations is performed. Here only its first two steps are described. The first step, named <italic>“my_scale_transform_step1”</italic>, consists in calling the <italic>“scaleTransFormFunc1”</italic> function, with 3 parameters (<italic>“paramName1”</italic>, <italic>“paramName2”</italic> and <italic>“paramName3”</italic> provided as arguments, taking the specified <italic>“value1”</italic>, <italic>“value2”</italic> and <italic>“value3”</italic> value respectively. The second step, named <italic>“my_scale_transform_step2”</italic>, calls the <italic>“scaleTransFormFunc2”</italic>, with only one single parameter, i.e. <italic>“paramName4”</italic> taking <italic>“value4”</italic> as value. The second pipeline (i.e. <italic>“flowFramesPreProcessingSteps”</italic>) specifies the set of pre-processing steps performed on each data file independently. Here again, only the first two steps are described. The first one, named <italic>“my_fcsfile_preprocessing_step1”</italic> calls the <italic>“preprocessingFunc1”</italic> function with two parameters, while the second one, named <italic>“my_fcsfile_preprocessing_step2”</italic> calls the <italic>“preprocessingFunc2”</italic> function with no parameter (apart from the output of the previous step which is always used as an implicit additional argument)</p></caption><graphic xlink:href="12859_2024_5691_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par17">The standard process for using <italic>CytoPipeline</italic> to build, run and inspect pre-processing pipelines is the following:<list list-type="bullet"><list-item><p id="Par18">define the pipeline by specifying the different steps using a descriptive text file, in <italic>json</italic> format;<xref ref-type="fn" rid="Fn1">1</xref></p></list-item><list-item><p id="Par19">run the pipeline, possibly for several data files in parallel, which involves writing and executing a short <italic>R</italic> script (see following sections);</p></list-item><list-item><p id="Par20">monitor the execution process thanks to a <italic>CytoPipeline</italic> provided workflow visualization utility;</p></list-item><list-item><p id="Par21">visualize and compare the results at different stages, using the <italic>CytoPipelineGUI</italic> interactive GUI applications.</p></list-item></list>In terms of technical infrastructure, the <italic>CytoPipeline</italic> package suite makes itself internal use of several technical <italic>R</italic> packages:<list list-type="bullet"><list-item><p id="Par22"><italic>BiocParallel</italic> [<xref ref-type="bibr" rid="CR26">26</xref>] enabling parallel pre-processing of <italic>fcs</italic> sample files;</p></list-item><list-item><p id="Par23"><italic>BiocFileCache</italic> [<xref ref-type="bibr" rid="CR27">27</xref>] enabling storage (i.e. <italic>caching</italic>) of all intermediary results for further inspection;</p></list-item><list-item><p id="Par24"><italic>shiny</italic> [<xref ref-type="bibr" rid="CR28">28</xref>] for interactive visualizations.</p></list-item></list></p>
    </sec>
    <sec id="Sec4">
      <title>Illustrative dataset</title>
      <p id="Par25">In order to demonstrate <italic>CytoPipeline</italic> functionalities, we make use of an illustrative dataset, the <italic>HBV chronic mouse</italic> dataset. This dataset was collected during a preclinical study aimed at assessing the effect of different therapeutic vaccine regimens on the immune response of Hepatitis B Virus transduced mice.</p>
      <p id="Par26">In this study, 56 male and female HLA.A2/DRB1 transgenic mice (transgenic for the human HLA-A2 and HLA-DRB1 molecules) were used. HLA.A2/DRB1 mice from groups 1, 2 and 4 were transduced at day 0 with adeno-associated virus serotype 2/8 (AAV2/8-HBV) vector carrying a replication-competent HBV DNA genome and randomized before immunization with 4 doses of vaccine candidate, based on level of HBs circulating antigen detected in the sera at day 21, age and gender proportions. Mice from group 3 were not transduced with AAV2/8-HBV viral vector and were immunized with four doses of vaccine candidate and finally, mice from group 5 were not transduced and received four doses of NaCl solution. Upon sacrifice, livers were collected, perfused with Phosphate Buffered Saline (PBS) to remove blood cells and after enzymatic treatment, lymphocytes were isolated, and stained with different monoclonal antibodies. The stained cells were acquired by flow cytometry using a BD Symphony A5 flow cytometer - the same instrument for all biological samples - and analyzed using the FlowJo v10.8 Software (BD Life Sciences).</p>
      <p id="Par27">Animal husbandry and experimental procedures were ethically reviewed and carried out in accordance with European Directive 2010/63/EU and the GlaxoSmithKline Biologicals’ policy on the care, welfare and treatment of animals, in GSK animal facilities located in Rixensart, Belgium (AAALAC accredited). The ethical protocol of the GSK in vivo study was approved by the local GSK ethical committee.</p>
      <p id="Par28">This experiment resulted in the acquisition of 55 different <italic>fcs</italic> raw data file - one sample could not be acquired - with a flow cytometry panel of 12 different channels. The <italic>HBV chronic mouse</italic> dataset is available on Zenodo (DOI:10.5281/zenodo.8425840).</p>
    </sec>
    <sec id="Sec5">
      <title>Applied pre-processing pipelines</title>
      <sec id="Sec6">
        <title>Pipeline set-up</title>
        <p id="Par29">For the purpose of illustrating <italic>CytoPipeline</italic> functionalities, the 55 raw data files of the <italic>HBV chronic mouse</italic> dataset were used as input of two different pre-processing pipelines. Each pipeline was composed of the following steps:<list list-type="bullet"><list-item><p id="Par30">Reading of the raw <italic>fcs</italic> sample files, using the <italic>flowCore</italic> package [<xref ref-type="bibr" rid="CR29">29</xref>].</p></list-item><list-item><p id="Par31">Margin events removal, which consists in identifying and removing the outliers using the <italic>PeacoQC</italic> package [<xref ref-type="bibr" rid="CR11">11</xref>]. In short, manual boundaries per channel, corresponding to the instrument detection limits, are applied, and all events falling outside these boundaries are removed.</p></list-item><list-item><p id="Par32">Signal compensation, which consists in applying an existing compensation matrix. This matrix was generated by the flow cytometer at data acquisition time, and subsequently manually adjusted by the expert scientist.</p></list-item><list-item><p id="Par33"><italic>QC in time</italic>, which consists in eliminating parts of the signal that are not stable in time, using one of the corresponding QC algorithms (see below).</p></list-item><list-item><p id="Par34">Doublet removal, which consists in keeping the events that have a similar area vs. height ratio of the FSC channel signal pulse, and eliminating the doublets, which have a significantly higher ratio. This was performed using an ad hoc implementation in the <italic>CytoPipeline</italic> package.</p></list-item><list-item><p id="Par35">Debris removal, which consists in clustering the events in the (FSC-A, SSC-A) 2D representation, targetting a number of clusters provided by the user. After the clusters are obtained, the cluster of which the centroid lies nearest to the origin, i.e. with the smallest FSC-A (size) and smallest SSC-A (content, granularity), is considered as containing debris and removed. This was done using the <italic>flowClust</italic> package [<xref ref-type="bibr" rid="CR30">30</xref>].</p></list-item><list-item><p id="Par36">Scale transformation, which consists in automatically estimating the parameters of a <italic>logicle</italic> transformation [<xref ref-type="bibr" rid="CR31">31</xref>], using the <italic>flowCore</italic> package [<xref ref-type="bibr" rid="CR29">29</xref>]. The obtained scale transformations were applied on all 55 sample files, and the parameters were estimated on an aggregation of a subset of 4 randomly chosen sample <italic>fcs</italic> files, after margin events removal and signal compensation.</p></list-item><list-item><p id="Par37">Dead cells removal, which consists in automatically setting a threshold between live cells and dead cells in the corresponding fluorescent ’Live &amp; Dead’ channel dimension, using the <italic>flowDensity</italic> package. The events having a ’Live &amp; Dead’ intensity above the found threshold are eliminated as dead cells.</p></list-item></list>However, the two pre-processing pipelines essentially differed by the method used for the <italic>QC in time</italic> step, as one used the <italic>PeacoQC</italic> package [<xref ref-type="bibr" rid="CR11">11</xref>], while the other used the <italic>flowAI</italic> package [<xref ref-type="bibr" rid="CR14">14</xref>]. In addition, the step order was also different, as the <italic>PeacoQC</italic> method is based on a peak detection algorithm which needs to run on compensated, scaled transformed data [<xref ref-type="bibr" rid="CR11">11</xref>], while the <italic>flowAI</italic> method is advised to be applied on raw data [<xref ref-type="bibr" rid="CR14">14</xref>]. Figure <xref rid="Fig2" ref-type="fig">2</xref> outlines the different steps applied in the pre-processing of each <italic>fcs</italic> files, for both the <italic>PeacoQC</italic>-based pipeline, and the <italic>flowAI</italic>-based pipeline.<fig id="Fig2"><label>Fig. 2</label><caption><p>Workflow of the subsequent steps applied in the pre-processing of each <italic>fcs</italic> file, for both pipelines. These plots have been generated using the <italic>CytoPipeline</italic> package</p></caption><graphic xlink:href="12859_2024_5691_Fig2_HTML" id="MO2"/></fig></p>
        <p id="Par38">More detailed information on packages, versions and methods underlying each step (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Tables S1, S2 and S3), as well as the <italic>json</italic> configuration files defining respectively the <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines are available in the Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
      </sec>
      <sec id="Sec7">
        <title>Running the pipelines and visualizing the results</title>
        <p id="Par39">In order to create the <italic>CytoPipeline</italic> objects representing the pipelines, run them and visualizing the results - including monitoring of the pipeline execution - a short <italic>R</italic> script needs to be written and executed. An example of such <italic>R</italic> script is provided in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1. Note that, as a result of the centralization of the pipeline definition, the code is very simple and concise, as for example, creating and running the pipeline boils down to essentially two <italic>R</italic> statements. Also, note that it is the same <italic>R</italic> code that triggers the execution of both pre-processing pipelines described in the previous section (except for the selection of the appropriate input <italic>json</italic> file and the choice of the experiment name under which to store the results). The distinctive part of the pipeline is located in the input <italic>json</italic> file, which describes the pipelines steps and their execution order.</p>
      </sec>
    </sec>
    <sec id="Sec8">
      <title>Example benchmarking</title>
      <p id="Par40">Aiming at illustrating the use of <italic>CytoPipeline</italic> to provide insights into benchmarking results, we designed a benchmarking, which consisted in comparing the outcome of the two competing <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines described in the previous section, using the <italic>HBV chronic mouse</italic> dataset, to a ground truth. The latter was obtained by submitting the 55 raw data <italic>fcs</italic> files to an expert scientist, who manually pre-processed the files, gated the events using FlowJo. The obtained FlowJo workspace file was subsequently automatically processed using the <italic>CytoML</italic> package [<xref ref-type="bibr" rid="CR32">32</xref>] version 2.12.0, and incorporated into a dedicated <italic>CytoPipeline</italic> ground truth pipeline for comparison with the two automated pipelines.</p>
      <p id="Par41">Regarding the benchmark evaluation metrics, for each single <italic>fcs</italic> file, the final output of each pipeline was compared to the ground truth, in terms of number of events, and the following metrics were calculated: sensitivity, specificity, precision and recall, which are defined as follows: let<list list-type="bullet"><list-item><p id="Par42"><italic>G</italic> (resp. <italic>B</italic>) be the set of events that are considered as <bold>G</bold>ood (resp. <bold>B</bold>ad) in the manual gating i.e. in the ground truth;</p></list-item><list-item><p id="Par43"><inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_G$$\end{document}</tex-math><mml:math id="M2"><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq1.gif"/></alternatives></inline-formula> (resp <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_B$$\end{document}</tex-math><mml:math id="M4"><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq2.gif"/></alternatives></inline-formula>) be the set of events that are flagged as good (resp. flagged as bad) by the considered automated pipeline.</p></list-item></list>We can additionally define the following sets of events:<list list-type="bullet"><list-item><p id="Par44"><inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_{G,\text { correct}} = F_G \cap G$$\end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub><mml:mo>∩</mml:mo><mml:mi>G</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq3.gif"/></alternatives></inline-formula>, the set of events that are correctly flagged as good;</p></list-item><list-item><p id="Par45"><inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_{B,\text { correct}} = F_B \cap B$$\end{document}</tex-math><mml:math id="M8"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mo>∩</mml:mo><mml:mi>B</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq4.gif"/></alternatives></inline-formula>, the set of events that are correctly flagged as bad.</p></list-item></list>The chosen evaluation metrics are then defined as:</p>
      <p id="Par46"><inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\text {sensitivity} = \frac{|F_{B,\text { correct}}|}{|B|}; \text {specificity} = \frac{|F_{G,\text { correct}}|}{|G|}; \text {precision} = \frac{|F_{B,\text { correct}}|}{|F_B|}; \text {recall} = \frac{|F_{G,\text { correct}}|}{|F_G|}$$\end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:mtext>sensitivity</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>B</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>specificity</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>precision</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>recall</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:mfrac></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq5.gif"/></alternatives></inline-formula>, where |<italic>A</italic>| stands for the number of elements in the set A.</p>
      <p id="Par47">The benchmark was set up and performed using the <italic>pipeComp</italic> package [<xref ref-type="bibr" rid="CR21">21</xref>], version 1.10.0. Indeed, <italic>pipeComp</italic> is a convenient tool to efficiently automate multiple alternative pipelines to be compared in the benchmark, as well as to automate the calculation of the evaluation metrics for each dataset used as benchmark input.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Results</title>
    <sec id="Sec10">
      <title>Visual assessment and comparison of pipeline outputs</title>
      <p id="Par48">We used <italic>CytoPipeline</italic> to define both <italic>PeacoQC</italic> and <italic>flowAI</italic>-based pre-processing pipelines, as described in the Methods section, on the <italic>HBV chronic mouse</italic> dataset. We obtained results in the form of sets of data matrices (or <italic>flowFrames</italic>) after each step for each pre-processing pipeline. In the following paragraphs, we present some <italic>CytoPipeline</italic> visual assessment plots, according to 6 different use cases (Table <xref rid="Tab1" ref-type="table">1</xref>). Use case #1 consists in visualizing a run and monitoring the status of the different steps. Use cases #2 to #5 consist in either looking at ’what happened’ within a single pipeline for a single biological sample in isolation (use case #2), or comparing two different situations (flow frames) involving different pipelines (use cases #3 and #4), or involving different biological samples within the same pipeline (use case #5). Finally, use case #6 consists in assessing, and possibly modifying, the scale transformations obtained during a pipeline execution.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Use cases of visual assessment and comparison of pipeline outputs. When the use case involves comparing two <italic>flowFrames </italic>obtained from different steps and/or different pipelines (i.e. use cases #2 to #4), or different samples (i.e. use case #5) the 3 columns ’sample’, ’pipeline’ and ’output’ designate the initial <italic>flowFrame </italic>(referring to Fig. <xref rid="Fig2" ref-type="fig">2</xref>), while the 3 columns ’compared sample’, ’compared pipeline’ and ’compared output’ designate the <italic>flowFrame </italic>that is compared to the initial <italic>flowFrame</italic></p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Use case</th><th align="left">Description</th><th align="left">Sample</th><th align="left">Pipeline</th><th align="left">Output (cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>)</th><th align="left">Compared sample</th><th align="left">Compared pipeline</th><th align="left">Compared output (cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>)</th></tr></thead><tbody><tr><td align="left">#1</td><td align="left">Monitoring a run</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">All</td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td></tr><tr><td align="left">#2</td><td align="left">Visualizing the effect of a single pipeline step</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 2 (before ’compensate’)</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 3 (after ’compensate’)</td></tr><tr><td align="left">#3</td><td align="left">Comparing the outcome of a pipeline step with different parameter values</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 6 (after 'remove_debris'), run with 3 clusters</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 6 (after 'remove_debris'), run with 2 clusters</td></tr><tr><td align="left">#4</td><td align="left">Comparing two different methods for one or several step(s)</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells')</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>flowAI</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td></tr><tr><td align="left">#5</td><td align="left">Comparing two different biological samples</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td><td align="left"><italic>D93_B05</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td></tr><tr><td align="left">#6</td><td align="left">Visualization and update of generate scale transformations</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td></tr></tbody></table></table-wrap></p>
      <sec id="Sec11">
        <title>Use case #1: monitoring a run</title>
        <p id="Par49">As all the intermediate results produced during pipeline execution are saved (see Methods/Implementation section), it is possible to generate a summary workflow view, consecutive to a run. Figure <xref rid="Fig3" ref-type="fig">3</xref> shows an example of such a display, obtained after running the <italic>flowAI</italic>-based pipeline described above, where there was a spelling error in one of the parameter names of the <italic>“remove_debris”</italic> step. On top of showing the sequence of steps, a colour code is used to highlight which of the steps have run to completion, and which of the steps need to be re-run. Here, for the selected sample, the pipeline ran correctly until the <italic>“remove_doublets”</italic> step (green nodes), but did not produce any output for the subsequent steps (orange nodes), which is due to the spelling error in the definition of the <italic>“remove_debris”</italic> step. Based on this summarized visual information, the user can now dig into the flagged problematic step, and/or track the particular characteristics of the sample which generated the error. More details on the colour code used in this plot can be found in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S2.<fig id="Fig3"><label>Fig. 3</label><caption><p>Use case #1: summary workflow view of the run - green nodes correspond to steps that ran to completion for the selected sample file, orange nodes correspond to steps that have not generated an output yet</p></caption><graphic xlink:href="12859_2024_5691_Fig3_HTML" id="MO3"/></fig></p>
      </sec>
      <sec id="Sec12">
        <title>Use case #2: visualizing the effect of a single pipeline step</title>
        <p id="Par50">In Fig. <xref rid="Fig4" ref-type="fig">4</xref>, the user is visually assessing two consecutive states of the <italic>flowFrame</italic> of sample <italic>D91_G01</italic>, within the same run of the <italic>PeacoQC</italic>-based pipeline. To evaluate the effect of the compensation step, the <italic>“before compensation”</italic> (output 2, cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>) and the <italic>“after compensation”</italic> (output 3) states of the pipeline are visually compared. Note that this visualization can be done according to any pair of selected channels/markers (2D distribution representation), or according to a 1D marginal distribution representation for any selected channel/marker. Here, the (CD8, CD38) 2D view shows, on the left, that the fluorescence of the dye BB700 (CD38) spills into the CD8 channel. On the right, application of a pre-computed compensation matrix (see Methods section) has rectified the distribution of the two markers, revealing different ranges of CD38 (an activation marker) between the CD8+ and CD8- populations. A corresponding screenshot of the interactive GUI application, implemented in the <italic>CytoPipelineGUI</italic> package, can be found in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S3.<fig id="Fig4"><label>Fig. 4</label><caption><p>Use case #2: effect of a single pipeline step - here, the compensation step of the <italic>PeacoQC</italic>-based pipeline for sample <italic>D91_G01</italic>. On the left, spillover of the BB700 (CD38) dye fluorescence into the CD8 channel creates a visual artefact, with events wrongly flagged as double positive CD8+ CD38+. On the right, compensation has rectified the bivariate distribution of the two markers</p></caption><graphic xlink:href="12859_2024_5691_Fig4_HTML" id="MO4"/></fig></p>
      </sec>
      <sec id="Sec13">
        <title>Use case #3: comparing the outcome of a pipeline step with different parameter values</title>
        <p id="Par51">This use case involves running the same pipeline, with the same steps but with amended values for one or several steps, in order to investigate which parameter combination performs better. An illustrating example is shown in Fig. <xref rid="Fig5" ref-type="fig">5</xref>, where the outcome of the debris removal step is compared when applying two different user input number of clusters (three on the left plot, vs. two on the middle plot). On the right plot, events coloured in red are the ones that are eliminated when applying the debris removal step when the number of clusters is two, but not eliminated when the number of clusters is three. Let us recall that the debris elimination step consists in clustering the events in a fixed number of clusters, followed by the elimination of the cluster nearest to the origin - see Methods section. Here, specifically, the user can conclude that the debris removal algorithm (based on <italic>flowClust</italic> package) does a better job selecting the target events when the appropriate number of target clusters is used, i.e. two clusters, as on the middle plot. This is because the cell population of interest, here a population of lymphocytes extracted from mice liver tissues, naturally groups into one single cluster in the (FSC-A, SSC-A) 2D representation. As a consequence, in this case, two is the optimal number of clusters (one cluster of debris, one cluster of lymphocytes). Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S4 illustrates the removal of events during the debris removal step, for the 2 clusters and the 3 clusters cases.<fig id="Fig5"><label>Fig. 5</label><caption><p>Use case #3: comparison of two different parameter settings for the debris removal step, on sample <italic>D91_G01</italic>. The setting with two clusters (in the middle) better eliminates undesirable events than the setting with three clusters (on the left). On the right, an explicit comparison between the two <italic>flowFrames</italic> is performed. Red dots correspond to events that are present on the left hand side plot, but not present on the middle plot, while blue dots correspond to events that are present on both plots</p></caption><graphic xlink:href="12859_2024_5691_Fig5_HTML" id="MO5"/></fig></p>
      </sec>
      <sec id="Sec14">
        <title>Use case #4: comparing two different methods for one or several steps</title>
        <p id="Par52">This use case is a generalization of the preceeding one, where the user wants to compare the performance of two different methods for one or several steps of the pre-processing pipeline. For instance, Fig. <xref rid="Fig6" ref-type="fig">6</xref> provides a comparison between the <italic>PeacoQC</italic>-based and the <italic>flowAI</italic>-based pipelines, applied on a particular biological sample of the <italic>HBV chronic mouse</italic> dataset. This comparison, obtained by plotting one specific channel (here the <italic>FSC-A</italic>) as a function of time, reveals that <italic>flowAI</italic> removes time chunks more aggressively than <italic>PeacoQC</italic>, for the current sample. Note that this comparison can also be done for any 2D combination of makers (not shown here).<fig id="Fig6"><label>Fig. 6</label><caption><p>Use case #4: comparison of the final state results, for sample <italic>D91_A01</italic>, between the <italic>PeacoQC</italic>-based pipeline and the <italic>flowAI</italic>-based pipeline - here using a (<italic>FSC-A</italic> vs. <italic>Time</italic>) plot. On the left, the end state of the <italic>PeacoQC</italic>-based pipeline is shown, while the end state of the <italic>flowAI</italic>-based pipeline is shown on the middle plot. On the right, an explicit comparison between the two <italic>flowFrames</italic> is performed. Red dots correspond to events that are present on the left hand side plot, but not present on the middle plot, while blue dots correspond to events that are present on both plots. This figure reveals that, for this particular sample, <italic>flowAI</italic> tends to remove time chunks more aggressively than <italic>PeacoQC</italic></p></caption><graphic xlink:href="12859_2024_5691_Fig6_HTML" id="MO6"/></fig></p>
      </sec>
      <sec id="Sec15">
        <title>Use case #5: comparing two different biological samples</title>
        <p id="Par53">It is also possible to compare two different biological samples of the same dataset, at any specific step of any pipeline. This allows e.g. to check that the methods used for the various pre-processing steps perform consistently across the whole dataset. One example is shown in Fig. <xref rid="Fig7" ref-type="fig">7</xref>, where two different samples are displayed in a 2D plot with the <italic>FSC-A</italic> and <italic>Live &amp;Dead</italic> channels. In this case, the two samples show very similar bivariate distributions. Based on this 2D representation, one could conclude that the pre-processing pipeline has correctly selected the target cell population in both cases. This would however need careful confirmation based on other 2D combinations of markers, e.g. <italic>FSC-H</italic> vs. <italic>FSC-A</italic> (for doublets elimination), and <italic>FSC-A</italic> vs. <italic>SSC-A</italic> (for debris elimination).<fig id="Fig7"><label>Fig. 7</label><caption><p>Use case #5: comparison of the final state results between two different biological samples (on the left: sample <italic>D91_A01</italic> and on the right: sample <italic>D93_B05</italic>), within the same <italic>PeacoQC</italic>-based pipeline. For the particular channels chosen (<italic>Live &amp;Dead</italic> vs. <italic>FSC-A</italic>), the two samples show very similar bivariate distributions. Based on this 2D representation, one could conclude that the pre-processing pipeline has correctly selected the target cell population in both cases</p></caption><graphic xlink:href="12859_2024_5691_Fig7_HTML" id="MO7"/></fig></p>
      </sec>
      <sec id="Sec16">
        <title>Use case #6: visualization and update of generated scale transformations</title>
        <p id="Par54">Besides the <italic>flowFrame</italic> comparison tool, <italic>CytoPipelineGUI</italic> also provides a second interactive GUI application, which is aimed at inspecting the scale transformations obtained from the corresponding <italic>scaleTransformProcessingSteps</italic> pipeline (see Methods/Implementation section). If the shape of the distribution after transformation needs adjustment (for example for better separation of negative and positive populations for a specific marker), the user can manually adapt the scale transformation parameters, interactively assess the impact of their modifications, and apply these modifications to the scale transformations for further use in the pre-processing pipelines (Fig. <xref rid="Fig8" ref-type="fig">8</xref>). These manual adjustments can be very useful, for example when the automatic transformation parameter adjustment algorithm has not worked satisfactorily. Figure <xref rid="Fig9" ref-type="fig">9</xref> shows an example where the <italic>logicle</italic> transformation [<xref ref-type="bibr" rid="CR31">31</xref>] applied on marker CD38 (left) shows spurious density oscillations in the negative domain. Manually adjusting the <italic>positive decimals</italic> parameter of the <italic>logicle</italic> transformation leads to a better looking density plot, where one can more easily distinguish CD38-, CD38+ and CD38++ populations.<fig id="Fig8"><label>Fig. 8</label><caption><p>Use case #6: screenshot of the <italic>CytoPipelineGUI</italic> interactive GUI application enabling the inspection, manual adjustment and save of pipeline generated scale transformations. Here the user is visualizing the transformation applied on marker CD38, for sample <italic>D91_G01</italic></p></caption><graphic xlink:href="12859_2024_5691_Fig8_HTML" id="MO8"/></fig><fig id="Fig9"><label>Fig. 9</label><caption><p>Manual parameters adjustment of the <italic>logicle</italic> transformation applied on marker CD38, for sample <italic>D91_G01</italic>. On the left, the density plot shows spurious oscillations in the negative domain. On the right, manual adjustment on the <italic>positive decimals</italic> parameter of the <italic>logicle</italic> transformation leads to a better looking transformed density, where one can more easily identify CD38-, CD38+ and CD38++ populations</p></caption><graphic xlink:href="12859_2024_5691_Fig9_HTML" id="MO9"/></fig></p>
      </sec>
    </sec>
    <sec id="Sec17">
      <title>Benchmarking results</title>
      <p id="Par55">As mentioned in the Methods section, we used <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>] to perform a benchmarking exercise, comparing two different pre-processing pipelines, i.e. the <italic>PeacoQC</italic>-based and the <italic>flowAI</italic>-based pipelines, on the 55 sample files of the <italic>HBV chronic mouse</italic> dataset, and calculating evaluation metrics in terms of how well the automated pipelines could match the manual pre-processing performed by an expert scientist (’ground truth’). A global assessment shows comparable results between the two competing pipelines, consistently across all metrics (Fig. <xref rid="Fig10" ref-type="fig">10</xref>). However, when directly contrasting sample by sample results (Fig. <xref rid="Fig11" ref-type="fig">11</xref>) one can identify that the pipeline performance is rather heterogeneous across the 55 biological samples.<fig id="Fig10"><label>Fig. 10</label><caption><p>Box plots of the distributions of calculated evaluation metrics per sample, for the two competing pipelines. Globally, both pipelines perform very similarly, for all four evaluation metrics, i.e. sensitivity, specificity, precision and recall</p></caption><graphic xlink:href="12859_2024_5691_Fig10_HTML" id="MO10"/></fig><fig id="Fig11"><label>Fig. 11</label><caption><p>Scatter plots comparing the two pre-processing pipelines, each dot representing one of the 55 samples. Three specific samples are highlighted in red, corresponding to very different comparative behaviour of the two competing pipelines. Sample <italic>D91_C07</italic> is a unique sample for which the <italic>flowAI</italic>-based pipeline has a high specificity, but the <italic>PeacoQC</italic>-based pipeline has very low specificity. Sample <italic>D93_A05</italic> is one of the samples leading to low specificity for both pipelines, while <italic>sample D91_D03</italic> is representative of the samples for which both pipelines provide good specificity</p></caption><graphic xlink:href="12859_2024_5691_Fig11_HTML" id="MO11"/></fig></p>
      <p id="Par56">In order to better understand the behaviour of the two competing automated pipelines on different samples, we selected three different samples, corresponding to different locations into the specificity plot of Fig. <xref rid="Fig11" ref-type="fig">11</xref>. We then used <italic>CytoPipelineGUI</italic> to inspect the results at different steps, for the two automated pipelines as well as for the ’ground truth’:<list list-type="bullet"><list-item><p id="Par57">Sample <italic>D91_C07</italic> was an outlier for which the <italic>PeacoQC</italic>-based pipeline obtained an almost zero specificity, while <italic>flowAI</italic>-based pipeline specificity was around an acceptable level of above 0.8. However, as shown in Fig. <xref rid="Fig12" ref-type="fig">12</xref>, this was not due to the different <italic>QC in time</italic> algorithm (<italic>PeacoQC</italic> vs. <italic>flowAI</italic>), but to a lack of robustness of the dead cells removal algorithm, leading to an interaction phenomenon by which almost all events were removed in the dead cell removal step of the <italic>PeacoQC</italic>-based pipeline.</p></list-item><list-item><p id="Par58">Sample <italic>D93_A05</italic> resulted in a very low specificity for both pipelines. Investigation using <italic>CytoPipelineGUI</italic> revealed that this sample was in fact one of the low quality samples wherein the interesting cell population was a small minority of the events, while there was a great abundance of debris and dead cells (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S5). As a consequence, both pipelines were unable to automatically select the correct cell population, regardless of the <italic>QC in time</italic> method used.</p></list-item><list-item><p id="Par59">Sample <italic>D91_D03</italic> was an example where both automatic pipelines performed adequately without major issues. Here, the difference in metrics is effectively related to the choice of <italic>QC in time</italic> method. Looking at a specific visualization where time is displayed on the x axis (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S6), and based on both qualitative plot inspection and number of events comparison with the manual gating ground truth, <italic>CytoPipelineGUI</italic> reveals that <italic>flowAI</italic> method is too agressive in this case, while <italic>PeacoQC</italic> is too liberal.</p></list-item></list><fig id="Fig12"><label>Fig. 12</label><caption><p>Comparison between the dead cells removal step between the <italic>flowAI</italic> pipeline (<bold>A</bold>), and the <italic>PeacoQC</italic>-based pipeline (<bold>B</bold>), on sample <italic>D91_C07</italic>. While the input set of events look very similar (left plots of panels <bold>A and B</bold>), the dead cells removal step of the <italic>PeacoQC</italic>-based pipeline (right plot of panel B) wrongly removes most of the events. This reveals a lack of robustness of the algorithm, unrelated to the <italic>QC in time</italic> method used (<italic>flowAI</italic> vs. <italic>PeacoQC</italic>)</p></caption><graphic xlink:href="12859_2024_5691_Fig12_HTML" id="MO12"/></fig></p>
      <p id="Par60">Note that the conclusions of these visual inspections are particularly precious to the scientist in charge of building the data analysis pipelines, who is now able to get precise and accurate insight into why one pipeline performs better than the other, for specific samples. In particular, they are much better equipped to distinguish between an intrinsic performance difference between some competing methods, and surprising artefacts like a side effect of low sample quality or an interaction between two different steps.</p>
    </sec>
  </sec>
  <sec id="Sec18">
    <title>Discussion</title>
    <sec id="Sec19">
      <title>CytoPipeline, a flexible framework for building and running pre-processing pipelines</title>
      <p id="Par61">In this work, we have demonstrated the use of the <italic>CytoPipeline</italic> suite by implementing pre-processing pipelines on the <italic>HBV chronic mouse</italic> dataset. The implementation of <italic>CytoPipeline</italic>, with a centralized specification of the pipeline definition in a <italic>json</italic> file, leads to a better design of the pipeline code. As a result, we believe that the user productivity, when coding and testing different pipelines, can be greatly improved.</p>
      <p id="Par62">In order to illustrate this, we implemented the two <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based competing pipelines, described in Methods, in two <italic>R</italic> scripts, without using <italic>CytoPipeline</italic> objects, and looked into the duplication effort as well as the future extensibility of the code. These pieces of code are provided in the <italic>2023-CytoPipeline-code</italic> GitHub repository (see Code Availability in Declarations section).</p>
      <p id="Par63">Figure <xref rid="Fig13" ref-type="fig">13</xref> provides a schematic comparison between these two pieces of code, as well as indicative number of code lines. Of course, these relates to one particular implementation, as there are countless ways to program the same pipelines. What is interesting to note, though, is that there is a high proportion of code duplication, but the differences are not only located in one single place, due to the subtle differences induced by the change of orders in the steps. This is likely to lead to a high code maintenance burden in the future, for instance when extending the program to many more pipeline instances, which can use different step methods, different method parameters etc. In constrast, let us recall that, when using <italic>CytoPipeline</italic>, the <italic>R</italic> code itself stays the same, as all differences are explicitly described in the input <italic>json</italic> file. This <italic>json</italic> file is easier to maintain and extend than the <italic>R</italic> scripts represented in Fig. <xref rid="Fig13" ref-type="fig">13</xref>.<fig id="Fig13"><label>Fig. 13</label><caption><p>Structure of the <italic>R</italic> script implementations of the <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines. The common parts are shown in white, <italic>PeacoQC</italic>-based pipeline specific parts in yellow, and <italic>flowAI</italic>-based pipeline specific parts in red. Between the two pipelines, 79% of the code is in common, and the pipeline specific parts are not fully gathered in one single location</p></caption><graphic xlink:href="12859_2024_5691_Fig13_HTML" id="MO13"/></fig></p>
    </sec>
    <sec id="Sec20">
      <title>CytoPipeline provides a standardized and user-friendly tool for visual investigations</title>
      <p id="Par64">We have presented a series of use cases of <italic>CytoPipeline</italic> visualizations. In all these use cases, we took advantage of the same set of visualization tools, in a standardized way, but translated into different contexts, whatever the underlying methods used for the pre-processing pipelines. Also during the investigation of the benchmarking results, visual comparisons could be made with a ground truth manual gating, again using the same tools. Besides, the interactive GUI applications, implemented in <italic>CytoPipelineGUI</italic>, provide user interactivity and facilitate the investigation process. As stated in the introduction, these visual assessments are extremely important for the scientists, as they provide a unique mean to:<list list-type="bullet"><list-item><p id="Par65">visually control for the quality of the data samples, and acquire insight on the corresponding sample variability;</p></list-item><list-item><p id="Par66">visually check the robustness of the methods used in a given pre-processing pipeline, including the adequacy of the chosen user input parameters;</p></list-item><list-item><p id="Par67">visually compare different pre-processing pipeline settings. This can range from comparing different possible choices of method for a particular step, to assessing which one of two or more competing pipelines, possibly mixing different step methods in different orders, is performing better for the considered dataset.</p></list-item></list></p>
    </sec>
    <sec id="Sec21">
      <title>CytoPipeline allows user intuitive insight into benchmarking results</title>
      <p id="Par68">As part of this work, we have implemented a benchmarking comparing two competing pre-processing pipelines, with the main objective of showing the benefits of using <italic>CytoPipeline</italic> visualization tools, as a complement to the benchmarking itself. We showed that detailed comparison plots help the user investigating some specific benchmarking results, hence getting better intuition into the benchmarking outcome. We have indeed demonstrated that there can be numerous reasons why a pipeline instance performs better than another on specific samples, and it is key for the scientist to get a clear view of these reasons, and their possible links with sample characteristics. Therefore, we think that <italic>CytoPipeline</italic> is a powerful tool for interpreting the outcome of benchmarking studies.</p>
    </sec>
    <sec id="Sec22">
      <title>Using the proportion of events kept at each step as a diagnostic tool</title>
      <p id="Par69">As was shown in various figures in the Results section (see e.g. Fig. <xref rid="Fig12" ref-type="fig">12</xref>), <italic>CytoPipelineGUI</italic> computes the number of events that are retained at each step (shown as subtitles in the individual density plots). Tracking these changes throughout the pre-processing steps of a pipeline for different samples is a useful quality control. This can be implemented using some of the <italic>CytoPipeline</italic> functions, and is shown on Fig. <xref rid="Fig14" ref-type="fig">14</xref>.<fig id="Fig14"><label>Fig. 14</label><caption><p>Plots showing the proportion of retained events at each pre-processing step, for each sample. On the left, the <italic>PeacoQC</italic>-based pipeline shows, for sample <italic>D91_C07</italic>, a sharp drop in the last <italic>remove_dead_cells</italic> step. On the right, the <italic>flowAI</italic>-based pipeline does not show the same phenomenon</p></caption><graphic xlink:href="12859_2024_5691_Fig14_HTML" id="MO14"/></fig></p>
    </sec>
    <sec id="Sec23">
      <title>Limitations and possible extensions of the work</title>
      <p id="Par70">The <italic>CytoPipeline</italic> suite of <italic>R</italic> packages can be positioned as a tool to facilitate the design, testing and comparison of pre-processing pipelines for the end user. It is not meant to be:<list list-type="bullet"><list-item><p id="Par71">A novel pre-processing pipeline in itself, as it does not provide new methods for the various pre-processing steps (although it includes some functions calling some widely used methods), nor an innovative way to combine some of these.</p></list-item><list-item><p id="Par72">A tool facilitating benchmarking automation, like <italic>pipeComp</italic>. For example, unlike <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>], <italic>CytoPipeline</italic> does not provide any optimization solution to reduce the amount of CPU time and memory to run a potentially huge amount of (combinations of) possible pipelines. However, as mentioned before, <italic>CytoPipeline</italic> is used to facilitate the interpretation of results produced with benchmarking tools.</p></list-item></list>Regarding scalability, one should distinguish CPU and memory from hard drive storage requirements. CPU- and memory-wise, <italic>CytoPipeline</italic> has no particular issues when dealing with large number of samples, as long as each single fcs file can fully reside in memory. Indeed, as described in the Methods section, the engine that executes pre-processing pipelines supports both sequential and parallel file processing, and benefits from all multi-tasking scheduling options provided by the <italic>BiocParallel</italic> [<xref ref-type="bibr" rid="CR26">26</xref>] package. However, storage-wise, caching data at each step leads to large storage needs when processing many files. Typically, when analysing datasets including hundreds of fcs files, with several millions of events, compared across several pipelines and many processing steps, storage needs can require several terabytes. In those cases, users of <italic>CytoPipeline</italic> will typically need to call on high capacity storage facilities.</p>
      <p id="Par73">Another limitation of our work is the following: while <italic>CytoPipelineGUI</italic> is a powerful visualization tool for exploring specific pipeline steps for one or two samples, it does not provide an overall quality control of all samples at once. In that sense, it would be useful, especially for large datasets, to provide a global view of how samples differ at each pre-processing step. As mentioned above, one such diagnostic view can be obtained, by plotting the fraction of retained events at each pre-processing step (Fig. <xref rid="Fig14" ref-type="fig">14</xref>). Another promising approach focuses on the visualisation of all samples at once to identify specific outliers [<xref ref-type="bibr" rid="CR33">33</xref>].</p>
      <p id="Par74">Finally, another possible extension would be to further develop <italic>CytoPipeline</italic>, as to not only include the building and assessment of pre-processing steps, but also include support for subsequent steps of the data analysis: batch correction, population identification, etc.</p>
    </sec>
  </sec>
  <sec id="Sec24">
    <title>Conclusion</title>
    <p id="Par75">In this work, we have introduced a suite of <italic>R</italic> packages, <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, that helps building, visualizing and assessing pre-processing pipelines for flow cytometry data. We have demonstrated several use cases on a real life dataset, and highlighted several concrete benefits of these tools. For the new user, the packages come with ample documentation and tutorial videos, accessible through the package vignettes. We trust that using <italic>CytoPipeline</italic> will favour productivity in testing and assessing alternative data pre-processing pipelines, with the aim of designing good pre-processing and QC solutions for each particular context. The latter can be the specific type of biological sample, technology used (conventional flow cytometry, cytof, spectral flow cytometry), panel composition, experimental design etc., which in turn highly depend on the biological question at hand.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec25">
      <title>Supplementary Information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2024_5691_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1.</bold> Supplementary tables, figures and pipeline configuration files.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par80">Note that <italic>CytoPipeline</italic> also provides methods to define a pipeline and its steps programmatically in <italic>R</italic>, without providing a text file as an input.</p>
    </fn>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>Conceptualization: PH, LG; Methodology: PH, LG, DL, SD; Software: PH, LG; Data collection: BB, MH; Writing - original draft: PH, BB; Writing - review &amp; editing: LG, DL, ST, SD, MH, MT; Supervision: LG, DL, ST, MT.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was funded by GlaxoSmithKline Biologicals S.A., under a cooperative research and development agreement between GlaxoSmithKline Biologicals S.A. and de Duve Institute (UCLouvain).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Raw flow cytometry data files, as well as the manual gating information considered as the ground truth for the benchmarking, are available on Zenodo (DOI:10.5281/zenodo.8425840).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>All code needed to reproduce the results presented in the current article is available on the following GitHub repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/UCLouvain-CBIO/2023-CytoPipeline-code">https://github.com/UCLouvain-CBIO/2023-CytoPipeline-code</ext-link>, of which a release has been archived on Zenodo (DOI:10.5281/zenodo.8425840).</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent to participate</title>
      <p id="Par76">Not applicable.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p id="Par77">Not applicable.</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par78">P.H. is a student at the de Duve Institute (UCLouvain) and participates in a post graduate studentship program at GSK; B.B. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; S.D. is employee of the GSK group of companies and reports ownership of GSK shares; M.H. is employee of the GSK group of companies; M.T. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; S.T. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; D.L. is employee of the GSK group of companies and reports ownership of GSK shares; L.G. reports no competing interest.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McKinnon</surname>
            <given-names>KM</given-names>
          </name>
        </person-group>
        <article-title>Flow cytometry: an overview</article-title>
        <source>Curr Protoc Immunol.</source>
        <year>2018</year>
        <volume>120</volume>
        <fpage>511</fpage>
        <lpage>5111</lpage>
        <pub-id pub-id-type="doi">10.1002/cpim.40</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lambrecht</surname>
            <given-names>BN</given-names>
          </name>
        </person-group>
        <article-title>Computational flow cytometry: helping to make sense of high-dimensional immunology data</article-title>
        <source>Nat Rev Immunol</source>
        <year>2016</year>
        <volume>16</volume>
        <issue>7</issue>
        <fpage>449</fpage>
        <lpage>462</lpage>
        <pub-id pub-id-type="doi">10.1038/nri.2016.56</pub-id>
        <?supplied-pmid 27320317?>
        <pub-id pub-id-type="pmid">27320317</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Couckuyt</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Emmaneel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Aerts</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Analyzing high-dimensional cytometry data using FlowSOM</article-title>
        <source>Nat Protoc</source>
        <year>2021</year>
        <volume>16</volume>
        <issue>8</issue>
        <fpage>3775</fpage>
        <lpage>3801</lpage>
        <pub-id pub-id-type="doi">10.1038/s41596-021-00550-0</pub-id>
        <?supplied-pmid 34172973?>
        <pub-id pub-id-type="pmid">34172973</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nowicka</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Krieg</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Crowell</surname>
            <given-names>HL</given-names>
          </name>
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Hartmann</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Guglietta</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>CyTOF workflow: differential discovery in high-throughput high-dimensional cytometry datasets</article-title>
        <source>F1000Res.</source>
        <year>2017</year>
        <volume>6</volume>
        <fpage>748</fpage>
        <pub-id pub-id-type="doi">10.12688/f1000research.11622.1</pub-id>
        <?supplied-pmid 28663787?>
        <pub-id pub-id-type="pmid">28663787</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <name>
            <surname>Marañón</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Data processing workflow for large-scale immune monitoring studies by mass cytometry</article-title>
        <source>Comput Struct Biotechnol J</source>
        <year>2021</year>
        <volume>19</volume>
        <fpage>3160</fpage>
        <lpage>3175</lpage>
        <pub-id pub-id-type="doi">10.1016/j.csbj.2021.05.032</pub-id>
        <?supplied-pmid 34141137?>
        <pub-id pub-id-type="pmid">34141137</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ashhurst</surname>
            <given-names>TM</given-names>
          </name>
          <name>
            <surname>Marsh-Wakefield</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Putri</surname>
            <given-names>GH</given-names>
          </name>
          <name>
            <surname>Spiteri</surname>
            <given-names>AG</given-names>
          </name>
          <name>
            <surname>Shinko</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Read</surname>
            <given-names>MN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integration, exploration, and analysis of high-dimensional single-cell cytometry data using Spectre</article-title>
        <source>Cytometry A</source>
        <year>2022</year>
        <volume>101</volume>
        <issue>3</issue>
        <fpage>237</fpage>
        <lpage>253</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24350</pub-id>
        <?supplied-pmid 33840138?>
        <pub-id pub-id-type="pmid">33840138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Martorell Marugán</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Protocol for large scale whole blood immune monitoring by mass cytometry and Cyto Quality Pipeline</article-title>
        <source>STAR Protoc.</source>
        <year>2022</year>
        <volume>3</volume>
        <issue>4</issue>
        <fpage>101697</fpage>
        <pub-id pub-id-type="doi">10.1016/j.xpro.2022.101697</pub-id>
        <?supplied-pmid 36353363?>
        <pub-id pub-id-type="pmid">36353363</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liechti</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Ashhurst</surname>
            <given-names>TM</given-names>
          </name>
          <name>
            <surname>Stanley</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Prlic</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>An updated guide for the perplexed: cytometry in the high-dimensional era</article-title>
        <source>Nat Immunol</source>
        <year>2021</year>
        <volume>22</volume>
        <issue>10</issue>
        <fpage>1190</fpage>
        <lpage>1197</lpage>
        <pub-id pub-id-type="doi">10.1038/s41590-021-01006-z</pub-id>
        <?supplied-pmid 34489590?>
        <pub-id pub-id-type="pmid">34489590</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mazza</surname>
            <given-names>EMC</given-names>
          </name>
          <name>
            <surname>Brummelman</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Alvisi</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Roberto</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>De Paoli</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Zanon</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Background fluorescence and spreading error are major contributors of variability in high-dimensional flow cytometry data visualization by t-distributed stochastic neighboring embedding</article-title>
        <source>Cytometry A</source>
        <year>2018</year>
        <volume>93</volume>
        <issue>8</issue>
        <fpage>785</fpage>
        <lpage>792</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23566</pub-id>
        <?supplied-pmid 30107099?>
        <pub-id pub-id-type="pmid">30107099</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Finak</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Perez</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Weng</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Optimizing transformations for automated, high throughput analysis of flow cytometry data</article-title>
        <source>BMC Bioinform</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>546</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-546</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Emmaneel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Sichien</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Marañón</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PeacoQC: peak-based selection of high quality cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2022</year>
        <volume>101</volume>
        <issue>4</issue>
        <fpage>325</fpage>
        <lpage>338</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24501</pub-id>
        <?supplied-pmid 34549881?>
        <pub-id pub-id-type="pmid">34549881</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>den Braanker</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Bongenaar</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lubberts</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>How to prepare spectral flow cytometry datasets for high dimensional data analysis: a practical workflow</article-title>
        <source>Front Immunol</source>
        <year>2021</year>
        <volume>12</volume>
        <fpage>768113</fpage>
        <pub-id pub-id-type="doi">10.3389/fimmu.2021.768113</pub-id>
        <pub-id pub-id-type="pmid">34868024</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>VJ</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Anders</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Carvalho</surname>
            <given-names>BS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Orchestrating high-throughput genomic analysis with Bioconductor</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <issue>2</issue>
        <fpage>115</fpage>
        <lpage>121</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3252</pub-id>
        <?supplied-pmid 25633503?>
        <pub-id pub-id-type="pmid">25633503</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Monaco</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Poidinger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>de Magalhães</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Larbi</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>flowAI: automatic and interactive anomaly discerning tools for flow cytometry data</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>16</issue>
        <fpage>2473</fpage>
        <lpage>2480</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw191</pub-id>
        <?supplied-pmid 27153628?>
        <pub-id pub-id-type="pmid">27153628</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fletez-Brant</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Špidlen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Roederer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chattopadhyay</surname>
            <given-names>PK</given-names>
          </name>
        </person-group>
        <article-title>flowClean: automated identification and removal of fluorescence anomalies in flow cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>5</issue>
        <fpage>461</fpage>
        <lpage>471</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.22837</pub-id>
        <?supplied-pmid 26990501?>
        <pub-id pub-id-type="pmid">26990501</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Meskas</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Yokosawa</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Segat</surname>
            <given-names>GC</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
        </person-group>
        <article-title>flowCut: an R package for automated removal of outlier events and flagging of files based on time versus fluorescence analysis</article-title>
        <source>Cytometry A</source>
        <year>2023</year>
        <volume>103</volume>
        <issue>1</issue>
        <fpage>71</fpage>
        <lpage>81</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24670</pub-id>
        <?supplied-pmid 35796000?>
        <pub-id pub-id-type="pmid">35796000</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Song</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>BY</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Yu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>GN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A comparison framework and guideline of clustering methods for mass cytometry data</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>297</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1917-7</pub-id>
        <?supplied-pmid 31870419?>
        <pub-id pub-id-type="pmid">31870419</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>MD</given-names>
          </name>
        </person-group>
        <article-title>Comparison of clustering methods for high-dimensional single-cell flow and mass cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>12</issue>
        <fpage>1084</fpage>
        <lpage>1096</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23030</pub-id>
        <?supplied-pmid 27992111?>
        <pub-id pub-id-type="pmid">27992111</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cheung</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Campbell</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Braybrook</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Petzing</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Assessment of automated flow cytometry data analysis tools within cell and gene therapy manufacturing</article-title>
        <source>Int J Mol Sci</source>
        <year>2022</year>
        <volume>23</volume>
        <issue>6</issue>
        <fpage>3224</fpage>
        <pub-id pub-id-type="doi">10.3390/ijms23063224</pub-id>
        <?supplied-pmid 35328645?>
        <pub-id pub-id-type="pmid">35328645</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Aghaeepour</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Chattopadhyay</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chikina</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Dhaene</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kursa</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A benchmark for evaluation of algorithms for identification of cellular correlates of clinical outcomes</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>1</issue>
        <fpage>16</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.22732</pub-id>
        <?supplied-pmid 26447924?>
        <pub-id pub-id-type="pmid">26447924</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Germain</surname>
            <given-names>PL</given-names>
          </name>
          <name>
            <surname>Sonrel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>MD</given-names>
          </name>
        </person-group>
        <article-title>pipeComp, a general framework for the evaluation of computational pipelines, reveals performant single cell RNA-seq preprocessing tools</article-title>
        <source>Genome Biol</source>
        <year>2020</year>
        <volume>21</volume>
        <issue>1</issue>
        <fpage>227</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-020-02136-7</pub-id>
        <?supplied-pmid 32873325?>
        <pub-id pub-id-type="pmid">32873325</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Su</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Tian</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Dong</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Hickey</surname>
            <given-names>PF</given-names>
          </name>
          <name>
            <surname>Freytag</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ritchie</surname>
            <given-names>ME</given-names>
          </name>
        </person-group>
        <article-title>Cell Bench: R/Bioconductor software for comparing single-cell RNA-seq analysis methods</article-title>
        <source>Bioinformatics</source>
        <year>2020</year>
        <volume>36</volume>
        <issue>7</issue>
        <fpage>2288</fpage>
        <lpage>2290</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz889</pub-id>
        <?supplied-pmid 31778143?>
        <pub-id pub-id-type="pmid">31778143</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Selega A, Campbell KR.: Multi-objective Bayesian optimization with heuristic objectives for biomedical and molecular data analysis workflows. Preprint at <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/early/2022/06/12/2022.06.08.495370">https://www.biorxiv.org/content/early/2022/06/12/2022.06.08.495370</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Spidlen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Parks</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Goldberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bray</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Bierre</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Data file standard for flow cytometry, version FCS 3.1</article-title>
        <source>Cytometry A.</source>
        <year>2010</year>
        <volume>77</volume>
        <issue>1</issue>
        <fpage>97</fpage>
        <lpage>100</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.20825</pub-id>
        <?supplied-pmid 19937951?>
        <pub-id pub-id-type="pmid">19937951</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Pezoa F, Reutter JL, Suarez F, Ugarte M, Vrgoč D. Foundations of JSON schema. In: Proceedings of the 25th International Conference on World Wide Web. International World Wide Web Conferences Steering Committee; 2016. p. 263–273.</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Morgan M, Wang J, Obenchain V, Lang M, Thompson R, Turaga N.: BiocParallel: Bioconductor facilities for parallel evaluation. R package version 1.34.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/BiocParallel">https://bioconductor.org/packages/BiocParallel</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Shepherd L, Morgan M.: BiocFileCache: Manage Files Across Sessions. R package version 2.8.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/BiocFileCache">https://bioconductor.org/packages/BiocFileCache</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Chang W, Cheng J, Allaire J, Sievert C, Schloerke B, Xie Y, et al.: shiny: Web Application Framework for R. Available from: <ext-link ext-link-type="uri" xlink:href="https://shiny.posit.co/">https://shiny.posit.co/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Ellis B, Haaland P, Hahne F, Le Meur N, Gopalakrishnan N, Spidlen J, et al.: flowCore: Basic structures for flow cytometry data. R package version 2.12.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/flowCore">https://bioconductor.org/packages/flowCore</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lo</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Hahne</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>flowClust: a Bioconductor package for automated gating of flow cytometry data</article-title>
        <source>BMC Bioinform</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>145</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-145</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Parks</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Roederer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>WA</given-names>
          </name>
        </person-group>
        <article-title>A new “Logicle” display method avoids deceptive effects of logarithmic scaling for low signals and compensated data</article-title>
        <source>Cytometry A</source>
        <year>2006</year>
        <volume>69</volume>
        <issue>6</issue>
        <fpage>541</fpage>
        <lpage>551</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.20258</pub-id>
        <?supplied-pmid 16604519?>
        <pub-id pub-id-type="pmid">16604519</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Finak</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>CytoML for cross-platform cytometry data sharing</article-title>
        <source>Cytometry A</source>
        <year>2018</year>
        <volume>93</volume>
        <issue>12</issue>
        <fpage>1189</fpage>
        <lpage>1196</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23663</pub-id>
        <?supplied-pmid 30551257?>
        <pub-id pub-id-type="pmid">30551257</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Hauchamps P, Gatto L.: CytoMDS: Low Dimensions projection of cytometry samples. R package version 0.99.8. Available from: <ext-link ext-link-type="uri" xlink:href="https://uclouvain-cbio.github.io/CytoMDS">https://uclouvain-cbio.github.io/CytoMDS</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10877884</article-id>
    <article-id pub-id-type="publisher-id">5691</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-024-05691-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>CytoPipeline and CytoPipelineGUI: a Bioconductor R package suite for building and visualizing automated pre-processing pipelines for flow cytometry data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Hauchamps</surname>
          <given-names>Philippe</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bayat</surname>
          <given-names>Babak</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Delandre</surname>
          <given-names>Simon</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hamrouni</surname>
          <given-names>Mehdi</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Toussaint</surname>
          <given-names>Marie</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Temmerman</surname>
          <given-names>Stephane</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Lin</surname>
          <given-names>Dan</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Gatto</surname>
          <given-names>Laurent</given-names>
        </name>
        <address>
          <email>laurent.gatto@uclouvain.be</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/022em3k58</institution-id><institution-id institution-id-type="GRID">grid.16549.3f</institution-id><institution>Computational Biology and Bioinformatics, de duve Institute, </institution><institution>UCLouvain, </institution></institution-wrap>Brussels, Belgium </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.425090.a</institution-id><institution-id institution-id-type="ISNI">0000 0004 0468 9597</institution-id><institution>GSK, </institution></institution-wrap>Rixensart, Belgium </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>20</day>
      <month>2</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>20</day>
      <month>2</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>25</volume>
    <elocation-id>80</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>2</day>
        <month>2</month>
        <year>2024</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">With the increase of the dimensionality in flow cytometry data over the past years, there is a growing need to replace or complement traditional manual analysis (i.e. iterative 2D gating) with automated data analysis pipelines. A crucial part of these pipelines consists of pre-processing and applying quality control filtering to the raw data, in order to use high quality events in the downstream analyses. This part can in turn be split into a number of elementary steps: signal compensation or unmixing, scale transformation, debris, doublets and dead cells removal, batch effect correction, etc. However, assembling and assessing the pre-processing part can be challenging for a number of reasons. First, each of the involved elementary steps can be implemented using various methods and R packages. Second, the order of the steps can have an impact on the downstream analysis results. Finally, each method typically comes with its specific, non standardized diagnostic and visualizations, making objective comparison difficult for the end user.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">Here, we present <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, two <italic>R</italic> packages to build, compare and assess pre-processing pipelines for flow cytometry data. To exemplify these new tools, we present the steps involved in designing a pre-processing pipeline on a real life dataset and demonstrate different visual assessment use cases. We also set up a benchmarking comparing two pre-processing pipelines differing by their quality control methods, and show how the package visualization utilities can provide crucial user insight into the obtained benchmark metrics.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3"><italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic> are two Bioconductor <italic>R</italic> packages that help building, visualizing and assessing pre-processing pipelines for flow cytometry data. They increase productivity during pipeline development and testing, and complement benchmarking tools, by providing user intuitive insight into benchmarking results.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-024-05691-z.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Flow cytometry</kwd>
      <kwd>Automated data analysis pipeline</kwd>
      <kwd>Pre-processing</kwd>
      <kwd>Quality control</kwd>
      <kwd>Visualization</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par4">With recent advances in flow cytometry technologies, it has become possible to measure up to 50 markers simultaneously for the same single cells [<xref ref-type="bibr" rid="CR1">1</xref>]. As an immediate benefit, scientists now have access to richer flow cytometry experimental data. However, these advances also come at a cost, i.e. a more complex data analysis task. Indeed, traditional ’manual gating’ data analysis procedures, which proceed by iterative hierarchical 2D representations of the data guided by biological knowledge, are unable to thoroughly extract the signal of interest from such high-dimensional data [<xref ref-type="bibr" rid="CR2">2</xref>]. There is therefore a need to complement such manual, expert-based approaches with <italic>computational flow cytometry</italic>, i.e. a set of computational algorithms and methods for automated, reproducible and data-driven flow cytometry data analysis [<xref ref-type="bibr" rid="CR2">2</xref>].</p>
    <p id="Par5">Those computational flow cytometry approaches translate into so-called data analysis pipelines. Examples of such automated pipelines have been published in the recent litterature (e.g. [<xref ref-type="bibr" rid="CR3">3</xref>–<xref ref-type="bibr" rid="CR7">7</xref>]). These consist of a series of data processing steps that are executed, one after the other, with the output of one step becoming the input of the next step. Schematically, for a typical flow cytometry data analysis, these numerous steps can usually be grouped into three big parts, coming after initial data sample acquisition:<list list-type="bullet"><list-item><p id="Par6"><italic>data pre-processing and quality control</italic>, which consists in both filtering undesirable and low quality events, and increasing the signal to noise ratio of the raw data, in order to feed the downstream steps with data of the highest possible quality;</p></list-item><list-item><p id="Par7"><italic>population identification</italic>, which aims at labelling the events with names of cell populations of interest;</p></list-item><list-item><p id="Par8"><italic>downstream statistical analysis</italic>, which can range from the simplest descriptive count/frequencies per population, to building complex prediction models for an outcome of interest, possibly for a high number of samples.</p></list-item></list>In what follows, we will mainly focus on the data pre-processing part, which can itself be split into several sub-tasks, or <italic>steps</italic> [<xref ref-type="bibr" rid="CR8">8</xref>]: compensation, scale transformation, control (and possibly removal) of batch effects, control of signal stability in time (<italic>QC in time</italic>), filtering of undesirable events like debris, doublets and dead cells. All these steps are crucial to avoid that the subsequent analysis gets perturbed with erroneous signal (see e.g. [<xref ref-type="bibr" rid="CR9">9</xref>] for compensation, [<xref ref-type="bibr" rid="CR10">10</xref>] for scale transformation, [<xref ref-type="bibr" rid="CR11">11</xref>] for signal stability in time, and [<xref ref-type="bibr" rid="CR12">12</xref>] for other steps).</p>
    <p id="Par9">However, building good, automated pre-processing pipelines, suitable for the particular type of biological samples and biological question, can be challenging for a number of reasons. First, for each elementary step, there might exist a number of different computational methods, each of those having numerous parameters available to the user. For example, looking only into methods available on the Bioconductor project [<xref ref-type="bibr" rid="CR13">13</xref>] for controlling the signal stability (<italic>QC in time</italic>), one finds at least four different methods available: <italic>flowAI</italic> [<xref ref-type="bibr" rid="CR14">14</xref>], <italic>flowClean</italic> [<xref ref-type="bibr" rid="CR15">15</xref>], <italic>PeacoQC</italic> [<xref ref-type="bibr" rid="CR11">11</xref>], <italic>flowCut</italic> [<xref ref-type="bibr" rid="CR16">16</xref>], and each of these methods comes with 7 to 11 different parameters. Second, the order of steps is not always set in stone, and applying different orders can lead to different outcomes, an effect coined steps interaction. These two facts lead to what we refer to as the <italic>combinatorial problem of designing pipelines</italic>, which means that, as the number of necessary elementary steps increases, the number of possible pipeline designs grows exponentially. As a consequence, for the user, it becomes time consuming to build and assess even only a few of the possible step combinations, let alone testing a representative sample of them in a systematic manner.</p>
    <p id="Par10">On top of that combinatorial problem, the user is also faced with a lack of generic, standardized and user-friendly tools to evaluate and compare data pre-processing pipelines. On the one hand, each single pre-processing step method might come with its own approach for diagnostic and visualization (e.g. ad hoc plots, html or pdf reports), which allows the user neither to standardize the comparison process, nor to easily investigate the links and interactions between the different steps. On the other hand, there are a number of benchmarking studies comparing computational methods for flow cytometry data [<xref ref-type="bibr" rid="CR17">17</xref>–<xref ref-type="bibr" rid="CR20">20</xref>], but they tend to focus on only one part of the pipeline, which is usually the downstream analysis. Finally, there also exist some generic tools and frameworks to systematize the benchmarking process, including the interactions between different steps, such as for example <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>] and <italic>CellBench</italic> [<xref ref-type="bibr" rid="CR22">22</xref>], and as well as some attempts to formally model the pipeline optimization problem in mathematical terms [<xref ref-type="bibr" rid="CR23">23</xref>]. However, what is lacking for the end user is the ability to intuitively interpret the results of such benchmarkings. In other words, could one translate that a pipeline <italic>A</italic> outperforms a pipeline <italic>B</italic>, with respect to a specific performance metric, in terms of the obtained data characteristics, or number of filtered events. Therefore, there is still a need for flow cytometry practitioner-focused standardized tools for visual comparison of pre-processing pipelines.</p>
    <p id="Par11">Here, we present <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, two <italic>R</italic> packages aimed at facilitating the design and visual comparison of pre-processing pipelines for flow cytometry data. We describe the concepts underlying the software, provide some illustrative examples and demonstrate the use of the accompanying visualization utilities. We show that these new tools can help increasing the productivity during pipeline development and testing, and that they can complement benchmarking tools and studies, by providing the user with intuitive insight into benchmarking results. The <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic> packages are available on Bioconductor [<xref ref-type="bibr" rid="CR13">13</xref>], as of version 3.17 and 3.18, respectively.</p>
  </sec>
  <sec id="Sec2">
    <title>Methods</title>
    <sec id="Sec3">
      <title>Implementation</title>
      <p id="Par12">In what follows, we assume that we have a dataset, provided as a set of files in Flow Cytometry Standard (<italic>fcs</italic>) format [<xref ref-type="bibr" rid="CR24">24</xref>], on which we would like to apply a data pre-processing pipeline.</p>
      <p id="Par13">The <italic>CytoPipeline</italic> suite is composed of two main <italic>R</italic> packages, <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>. While <italic>CytoPipeline</italic> is the main package, providing support for pipeline definition, running, monitoring and basic plotting functions, <italic>CytoPipelineGUI</italic> provides two interactive GUI applications enabling users to interactively explore and visualize the pipeline results. The <italic>CytoPipeline</italic> framework is based on two main concepts, namely <italic>CytoPipeline</italic> and <italic>CytoProcessingStep</italic>. A <italic>CytoPipeline</italic> object centralizes the pipeline definition, and specifies the run order of the different pipeline steps. These steps materialize as <italic>CytoProcessingStep</italic> objects, which store pipeline step names and the corresponding <italic>R</italic> functions that will be called at execution time. These functions are either provided within the <italic>CytoPipeline</italic> package itself, exported from third party packages, or coded by the user themself. Together with the function name to be called, a <italic>CytoProcessingStep</italic> object also contains the list of parameters that are used as arguments to the function.</p>
      <p id="Par14">When creating a <italic>CytoPipeline</italic> object, the user can provide the description of the pipeline as a text file in <italic>json</italic> format [<xref ref-type="bibr" rid="CR25">25</xref>]. Figure <xref rid="Fig1" ref-type="fig">1</xref> shows the typical structure of such a <italic>json</italic> file. Note that, in practice, two different sets of processing steps, or pipelines, are described:<list list-type="bullet"><list-item><p id="Par15">A <italic>scaleTransformProcessingSteps</italic> pipeline, which describes the set of successive steps needed to generate the scale transformations that will be applied to the different channels of each of the <italic>fcs</italic> files that are included in the dataset. The <italic>CytoPipeline</italic> engine will run this pipeline first, and only once, prior to running the pre-processing on each <italic>fcs</italic> file.</p></list-item><list-item><p id="Par16">A <italic>flowFramesPreProcessingSteps</italic> pipeline, which describes the set of pre-processing steps that will be applied on each of the different <italic>fcs</italic> file independently.</p></list-item></list>Steps in both pipelines are described in the exact same way, i.e. by providing a user-chosen name for the step, the corresponding function that needs to be called by the engine upon running, and the set of arguments (i.e. the list of parameter names and corresponding values) that need to be provided to the function. Note that, on top of these explicitely defined arguments, the running engine will also take the output of each step as an implicit additional argument to the function called by the subsequent step.<fig id="Fig1"><label>Fig. 1</label><caption><p>Structure of the user provided <italic>json</italic> file that describes a <italic>CytoPipeline</italic> object. The first pipeline (i.e. <italic>“scaleTransformProcessingSteps”</italic>) specifies how the preliminary calculation of the scale transformations is performed. Here only its first two steps are described. The first step, named <italic>“my_scale_transform_step1”</italic>, consists in calling the <italic>“scaleTransFormFunc1”</italic> function, with 3 parameters (<italic>“paramName1”</italic>, <italic>“paramName2”</italic> and <italic>“paramName3”</italic> provided as arguments, taking the specified <italic>“value1”</italic>, <italic>“value2”</italic> and <italic>“value3”</italic> value respectively. The second step, named <italic>“my_scale_transform_step2”</italic>, calls the <italic>“scaleTransFormFunc2”</italic>, with only one single parameter, i.e. <italic>“paramName4”</italic> taking <italic>“value4”</italic> as value. The second pipeline (i.e. <italic>“flowFramesPreProcessingSteps”</italic>) specifies the set of pre-processing steps performed on each data file independently. Here again, only the first two steps are described. The first one, named <italic>“my_fcsfile_preprocessing_step1”</italic> calls the <italic>“preprocessingFunc1”</italic> function with two parameters, while the second one, named <italic>“my_fcsfile_preprocessing_step2”</italic> calls the <italic>“preprocessingFunc2”</italic> function with no parameter (apart from the output of the previous step which is always used as an implicit additional argument)</p></caption><graphic xlink:href="12859_2024_5691_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par17">The standard process for using <italic>CytoPipeline</italic> to build, run and inspect pre-processing pipelines is the following:<list list-type="bullet"><list-item><p id="Par18">define the pipeline by specifying the different steps using a descriptive text file, in <italic>json</italic> format;<xref ref-type="fn" rid="Fn1">1</xref></p></list-item><list-item><p id="Par19">run the pipeline, possibly for several data files in parallel, which involves writing and executing a short <italic>R</italic> script (see following sections);</p></list-item><list-item><p id="Par20">monitor the execution process thanks to a <italic>CytoPipeline</italic> provided workflow visualization utility;</p></list-item><list-item><p id="Par21">visualize and compare the results at different stages, using the <italic>CytoPipelineGUI</italic> interactive GUI applications.</p></list-item></list>In terms of technical infrastructure, the <italic>CytoPipeline</italic> package suite makes itself internal use of several technical <italic>R</italic> packages:<list list-type="bullet"><list-item><p id="Par22"><italic>BiocParallel</italic> [<xref ref-type="bibr" rid="CR26">26</xref>] enabling parallel pre-processing of <italic>fcs</italic> sample files;</p></list-item><list-item><p id="Par23"><italic>BiocFileCache</italic> [<xref ref-type="bibr" rid="CR27">27</xref>] enabling storage (i.e. <italic>caching</italic>) of all intermediary results for further inspection;</p></list-item><list-item><p id="Par24"><italic>shiny</italic> [<xref ref-type="bibr" rid="CR28">28</xref>] for interactive visualizations.</p></list-item></list></p>
    </sec>
    <sec id="Sec4">
      <title>Illustrative dataset</title>
      <p id="Par25">In order to demonstrate <italic>CytoPipeline</italic> functionalities, we make use of an illustrative dataset, the <italic>HBV chronic mouse</italic> dataset. This dataset was collected during a preclinical study aimed at assessing the effect of different therapeutic vaccine regimens on the immune response of Hepatitis B Virus transduced mice.</p>
      <p id="Par26">In this study, 56 male and female HLA.A2/DRB1 transgenic mice (transgenic for the human HLA-A2 and HLA-DRB1 molecules) were used. HLA.A2/DRB1 mice from groups 1, 2 and 4 were transduced at day 0 with adeno-associated virus serotype 2/8 (AAV2/8-HBV) vector carrying a replication-competent HBV DNA genome and randomized before immunization with 4 doses of vaccine candidate, based on level of HBs circulating antigen detected in the sera at day 21, age and gender proportions. Mice from group 3 were not transduced with AAV2/8-HBV viral vector and were immunized with four doses of vaccine candidate and finally, mice from group 5 were not transduced and received four doses of NaCl solution. Upon sacrifice, livers were collected, perfused with Phosphate Buffered Saline (PBS) to remove blood cells and after enzymatic treatment, lymphocytes were isolated, and stained with different monoclonal antibodies. The stained cells were acquired by flow cytometry using a BD Symphony A5 flow cytometer - the same instrument for all biological samples - and analyzed using the FlowJo v10.8 Software (BD Life Sciences).</p>
      <p id="Par27">Animal husbandry and experimental procedures were ethically reviewed and carried out in accordance with European Directive 2010/63/EU and the GlaxoSmithKline Biologicals’ policy on the care, welfare and treatment of animals, in GSK animal facilities located in Rixensart, Belgium (AAALAC accredited). The ethical protocol of the GSK in vivo study was approved by the local GSK ethical committee.</p>
      <p id="Par28">This experiment resulted in the acquisition of 55 different <italic>fcs</italic> raw data file - one sample could not be acquired - with a flow cytometry panel of 12 different channels. The <italic>HBV chronic mouse</italic> dataset is available on Zenodo (DOI:10.5281/zenodo.8425840).</p>
    </sec>
    <sec id="Sec5">
      <title>Applied pre-processing pipelines</title>
      <sec id="Sec6">
        <title>Pipeline set-up</title>
        <p id="Par29">For the purpose of illustrating <italic>CytoPipeline</italic> functionalities, the 55 raw data files of the <italic>HBV chronic mouse</italic> dataset were used as input of two different pre-processing pipelines. Each pipeline was composed of the following steps:<list list-type="bullet"><list-item><p id="Par30">Reading of the raw <italic>fcs</italic> sample files, using the <italic>flowCore</italic> package [<xref ref-type="bibr" rid="CR29">29</xref>].</p></list-item><list-item><p id="Par31">Margin events removal, which consists in identifying and removing the outliers using the <italic>PeacoQC</italic> package [<xref ref-type="bibr" rid="CR11">11</xref>]. In short, manual boundaries per channel, corresponding to the instrument detection limits, are applied, and all events falling outside these boundaries are removed.</p></list-item><list-item><p id="Par32">Signal compensation, which consists in applying an existing compensation matrix. This matrix was generated by the flow cytometer at data acquisition time, and subsequently manually adjusted by the expert scientist.</p></list-item><list-item><p id="Par33"><italic>QC in time</italic>, which consists in eliminating parts of the signal that are not stable in time, using one of the corresponding QC algorithms (see below).</p></list-item><list-item><p id="Par34">Doublet removal, which consists in keeping the events that have a similar area vs. height ratio of the FSC channel signal pulse, and eliminating the doublets, which have a significantly higher ratio. This was performed using an ad hoc implementation in the <italic>CytoPipeline</italic> package.</p></list-item><list-item><p id="Par35">Debris removal, which consists in clustering the events in the (FSC-A, SSC-A) 2D representation, targetting a number of clusters provided by the user. After the clusters are obtained, the cluster of which the centroid lies nearest to the origin, i.e. with the smallest FSC-A (size) and smallest SSC-A (content, granularity), is considered as containing debris and removed. This was done using the <italic>flowClust</italic> package [<xref ref-type="bibr" rid="CR30">30</xref>].</p></list-item><list-item><p id="Par36">Scale transformation, which consists in automatically estimating the parameters of a <italic>logicle</italic> transformation [<xref ref-type="bibr" rid="CR31">31</xref>], using the <italic>flowCore</italic> package [<xref ref-type="bibr" rid="CR29">29</xref>]. The obtained scale transformations were applied on all 55 sample files, and the parameters were estimated on an aggregation of a subset of 4 randomly chosen sample <italic>fcs</italic> files, after margin events removal and signal compensation.</p></list-item><list-item><p id="Par37">Dead cells removal, which consists in automatically setting a threshold between live cells and dead cells in the corresponding fluorescent ’Live &amp; Dead’ channel dimension, using the <italic>flowDensity</italic> package. The events having a ’Live &amp; Dead’ intensity above the found threshold are eliminated as dead cells.</p></list-item></list>However, the two pre-processing pipelines essentially differed by the method used for the <italic>QC in time</italic> step, as one used the <italic>PeacoQC</italic> package [<xref ref-type="bibr" rid="CR11">11</xref>], while the other used the <italic>flowAI</italic> package [<xref ref-type="bibr" rid="CR14">14</xref>]. In addition, the step order was also different, as the <italic>PeacoQC</italic> method is based on a peak detection algorithm which needs to run on compensated, scaled transformed data [<xref ref-type="bibr" rid="CR11">11</xref>], while the <italic>flowAI</italic> method is advised to be applied on raw data [<xref ref-type="bibr" rid="CR14">14</xref>]. Figure <xref rid="Fig2" ref-type="fig">2</xref> outlines the different steps applied in the pre-processing of each <italic>fcs</italic> files, for both the <italic>PeacoQC</italic>-based pipeline, and the <italic>flowAI</italic>-based pipeline.<fig id="Fig2"><label>Fig. 2</label><caption><p>Workflow of the subsequent steps applied in the pre-processing of each <italic>fcs</italic> file, for both pipelines. These plots have been generated using the <italic>CytoPipeline</italic> package</p></caption><graphic xlink:href="12859_2024_5691_Fig2_HTML" id="MO2"/></fig></p>
        <p id="Par38">More detailed information on packages, versions and methods underlying each step (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Tables S1, S2 and S3), as well as the <italic>json</italic> configuration files defining respectively the <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines are available in the Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
      </sec>
      <sec id="Sec7">
        <title>Running the pipelines and visualizing the results</title>
        <p id="Par39">In order to create the <italic>CytoPipeline</italic> objects representing the pipelines, run them and visualizing the results - including monitoring of the pipeline execution - a short <italic>R</italic> script needs to be written and executed. An example of such <italic>R</italic> script is provided in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1. Note that, as a result of the centralization of the pipeline definition, the code is very simple and concise, as for example, creating and running the pipeline boils down to essentially two <italic>R</italic> statements. Also, note that it is the same <italic>R</italic> code that triggers the execution of both pre-processing pipelines described in the previous section (except for the selection of the appropriate input <italic>json</italic> file and the choice of the experiment name under which to store the results). The distinctive part of the pipeline is located in the input <italic>json</italic> file, which describes the pipelines steps and their execution order.</p>
      </sec>
    </sec>
    <sec id="Sec8">
      <title>Example benchmarking</title>
      <p id="Par40">Aiming at illustrating the use of <italic>CytoPipeline</italic> to provide insights into benchmarking results, we designed a benchmarking, which consisted in comparing the outcome of the two competing <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines described in the previous section, using the <italic>HBV chronic mouse</italic> dataset, to a ground truth. The latter was obtained by submitting the 55 raw data <italic>fcs</italic> files to an expert scientist, who manually pre-processed the files, gated the events using FlowJo. The obtained FlowJo workspace file was subsequently automatically processed using the <italic>CytoML</italic> package [<xref ref-type="bibr" rid="CR32">32</xref>] version 2.12.0, and incorporated into a dedicated <italic>CytoPipeline</italic> ground truth pipeline for comparison with the two automated pipelines.</p>
      <p id="Par41">Regarding the benchmark evaluation metrics, for each single <italic>fcs</italic> file, the final output of each pipeline was compared to the ground truth, in terms of number of events, and the following metrics were calculated: sensitivity, specificity, precision and recall, which are defined as follows: let<list list-type="bullet"><list-item><p id="Par42"><italic>G</italic> (resp. <italic>B</italic>) be the set of events that are considered as <bold>G</bold>ood (resp. <bold>B</bold>ad) in the manual gating i.e. in the ground truth;</p></list-item><list-item><p id="Par43"><inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_G$$\end{document}</tex-math><mml:math id="M2"><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq1.gif"/></alternatives></inline-formula> (resp <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_B$$\end{document}</tex-math><mml:math id="M4"><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq2.gif"/></alternatives></inline-formula>) be the set of events that are flagged as good (resp. flagged as bad) by the considered automated pipeline.</p></list-item></list>We can additionally define the following sets of events:<list list-type="bullet"><list-item><p id="Par44"><inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_{G,\text { correct}} = F_G \cap G$$\end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub><mml:mo>∩</mml:mo><mml:mi>G</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq3.gif"/></alternatives></inline-formula>, the set of events that are correctly flagged as good;</p></list-item><list-item><p id="Par45"><inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_{B,\text { correct}} = F_B \cap B$$\end{document}</tex-math><mml:math id="M8"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mo>∩</mml:mo><mml:mi>B</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq4.gif"/></alternatives></inline-formula>, the set of events that are correctly flagged as bad.</p></list-item></list>The chosen evaluation metrics are then defined as:</p>
      <p id="Par46"><inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\text {sensitivity} = \frac{|F_{B,\text { correct}}|}{|B|}; \text {specificity} = \frac{|F_{G,\text { correct}}|}{|G|}; \text {precision} = \frac{|F_{B,\text { correct}}|}{|F_B|}; \text {recall} = \frac{|F_{G,\text { correct}}|}{|F_G|}$$\end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:mtext>sensitivity</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>B</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>specificity</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>precision</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>recall</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:mfrac></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq5.gif"/></alternatives></inline-formula>, where |<italic>A</italic>| stands for the number of elements in the set A.</p>
      <p id="Par47">The benchmark was set up and performed using the <italic>pipeComp</italic> package [<xref ref-type="bibr" rid="CR21">21</xref>], version 1.10.0. Indeed, <italic>pipeComp</italic> is a convenient tool to efficiently automate multiple alternative pipelines to be compared in the benchmark, as well as to automate the calculation of the evaluation metrics for each dataset used as benchmark input.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Results</title>
    <sec id="Sec10">
      <title>Visual assessment and comparison of pipeline outputs</title>
      <p id="Par48">We used <italic>CytoPipeline</italic> to define both <italic>PeacoQC</italic> and <italic>flowAI</italic>-based pre-processing pipelines, as described in the Methods section, on the <italic>HBV chronic mouse</italic> dataset. We obtained results in the form of sets of data matrices (or <italic>flowFrames</italic>) after each step for each pre-processing pipeline. In the following paragraphs, we present some <italic>CytoPipeline</italic> visual assessment plots, according to 6 different use cases (Table <xref rid="Tab1" ref-type="table">1</xref>). Use case #1 consists in visualizing a run and monitoring the status of the different steps. Use cases #2 to #5 consist in either looking at ’what happened’ within a single pipeline for a single biological sample in isolation (use case #2), or comparing two different situations (flow frames) involving different pipelines (use cases #3 and #4), or involving different biological samples within the same pipeline (use case #5). Finally, use case #6 consists in assessing, and possibly modifying, the scale transformations obtained during a pipeline execution.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Use cases of visual assessment and comparison of pipeline outputs. When the use case involves comparing two <italic>flowFrames </italic>obtained from different steps and/or different pipelines (i.e. use cases #2 to #4), or different samples (i.e. use case #5) the 3 columns ’sample’, ’pipeline’ and ’output’ designate the initial <italic>flowFrame </italic>(referring to Fig. <xref rid="Fig2" ref-type="fig">2</xref>), while the 3 columns ’compared sample’, ’compared pipeline’ and ’compared output’ designate the <italic>flowFrame </italic>that is compared to the initial <italic>flowFrame</italic></p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Use case</th><th align="left">Description</th><th align="left">Sample</th><th align="left">Pipeline</th><th align="left">Output (cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>)</th><th align="left">Compared sample</th><th align="left">Compared pipeline</th><th align="left">Compared output (cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>)</th></tr></thead><tbody><tr><td align="left">#1</td><td align="left">Monitoring a run</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">All</td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td></tr><tr><td align="left">#2</td><td align="left">Visualizing the effect of a single pipeline step</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 2 (before ’compensate’)</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 3 (after ’compensate’)</td></tr><tr><td align="left">#3</td><td align="left">Comparing the outcome of a pipeline step with different parameter values</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 6 (after 'remove_debris'), run with 3 clusters</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 6 (after 'remove_debris'), run with 2 clusters</td></tr><tr><td align="left">#4</td><td align="left">Comparing two different methods for one or several step(s)</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells')</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>flowAI</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td></tr><tr><td align="left">#5</td><td align="left">Comparing two different biological samples</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td><td align="left"><italic>D93_B05</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td></tr><tr><td align="left">#6</td><td align="left">Visualization and update of generate scale transformations</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td></tr></tbody></table></table-wrap></p>
      <sec id="Sec11">
        <title>Use case #1: monitoring a run</title>
        <p id="Par49">As all the intermediate results produced during pipeline execution are saved (see Methods/Implementation section), it is possible to generate a summary workflow view, consecutive to a run. Figure <xref rid="Fig3" ref-type="fig">3</xref> shows an example of such a display, obtained after running the <italic>flowAI</italic>-based pipeline described above, where there was a spelling error in one of the parameter names of the <italic>“remove_debris”</italic> step. On top of showing the sequence of steps, a colour code is used to highlight which of the steps have run to completion, and which of the steps need to be re-run. Here, for the selected sample, the pipeline ran correctly until the <italic>“remove_doublets”</italic> step (green nodes), but did not produce any output for the subsequent steps (orange nodes), which is due to the spelling error in the definition of the <italic>“remove_debris”</italic> step. Based on this summarized visual information, the user can now dig into the flagged problematic step, and/or track the particular characteristics of the sample which generated the error. More details on the colour code used in this plot can be found in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S2.<fig id="Fig3"><label>Fig. 3</label><caption><p>Use case #1: summary workflow view of the run - green nodes correspond to steps that ran to completion for the selected sample file, orange nodes correspond to steps that have not generated an output yet</p></caption><graphic xlink:href="12859_2024_5691_Fig3_HTML" id="MO3"/></fig></p>
      </sec>
      <sec id="Sec12">
        <title>Use case #2: visualizing the effect of a single pipeline step</title>
        <p id="Par50">In Fig. <xref rid="Fig4" ref-type="fig">4</xref>, the user is visually assessing two consecutive states of the <italic>flowFrame</italic> of sample <italic>D91_G01</italic>, within the same run of the <italic>PeacoQC</italic>-based pipeline. To evaluate the effect of the compensation step, the <italic>“before compensation”</italic> (output 2, cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>) and the <italic>“after compensation”</italic> (output 3) states of the pipeline are visually compared. Note that this visualization can be done according to any pair of selected channels/markers (2D distribution representation), or according to a 1D marginal distribution representation for any selected channel/marker. Here, the (CD8, CD38) 2D view shows, on the left, that the fluorescence of the dye BB700 (CD38) spills into the CD8 channel. On the right, application of a pre-computed compensation matrix (see Methods section) has rectified the distribution of the two markers, revealing different ranges of CD38 (an activation marker) between the CD8+ and CD8- populations. A corresponding screenshot of the interactive GUI application, implemented in the <italic>CytoPipelineGUI</italic> package, can be found in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S3.<fig id="Fig4"><label>Fig. 4</label><caption><p>Use case #2: effect of a single pipeline step - here, the compensation step of the <italic>PeacoQC</italic>-based pipeline for sample <italic>D91_G01</italic>. On the left, spillover of the BB700 (CD38) dye fluorescence into the CD8 channel creates a visual artefact, with events wrongly flagged as double positive CD8+ CD38+. On the right, compensation has rectified the bivariate distribution of the two markers</p></caption><graphic xlink:href="12859_2024_5691_Fig4_HTML" id="MO4"/></fig></p>
      </sec>
      <sec id="Sec13">
        <title>Use case #3: comparing the outcome of a pipeline step with different parameter values</title>
        <p id="Par51">This use case involves running the same pipeline, with the same steps but with amended values for one or several steps, in order to investigate which parameter combination performs better. An illustrating example is shown in Fig. <xref rid="Fig5" ref-type="fig">5</xref>, where the outcome of the debris removal step is compared when applying two different user input number of clusters (three on the left plot, vs. two on the middle plot). On the right plot, events coloured in red are the ones that are eliminated when applying the debris removal step when the number of clusters is two, but not eliminated when the number of clusters is three. Let us recall that the debris elimination step consists in clustering the events in a fixed number of clusters, followed by the elimination of the cluster nearest to the origin - see Methods section. Here, specifically, the user can conclude that the debris removal algorithm (based on <italic>flowClust</italic> package) does a better job selecting the target events when the appropriate number of target clusters is used, i.e. two clusters, as on the middle plot. This is because the cell population of interest, here a population of lymphocytes extracted from mice liver tissues, naturally groups into one single cluster in the (FSC-A, SSC-A) 2D representation. As a consequence, in this case, two is the optimal number of clusters (one cluster of debris, one cluster of lymphocytes). Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S4 illustrates the removal of events during the debris removal step, for the 2 clusters and the 3 clusters cases.<fig id="Fig5"><label>Fig. 5</label><caption><p>Use case #3: comparison of two different parameter settings for the debris removal step, on sample <italic>D91_G01</italic>. The setting with two clusters (in the middle) better eliminates undesirable events than the setting with three clusters (on the left). On the right, an explicit comparison between the two <italic>flowFrames</italic> is performed. Red dots correspond to events that are present on the left hand side plot, but not present on the middle plot, while blue dots correspond to events that are present on both plots</p></caption><graphic xlink:href="12859_2024_5691_Fig5_HTML" id="MO5"/></fig></p>
      </sec>
      <sec id="Sec14">
        <title>Use case #4: comparing two different methods for one or several steps</title>
        <p id="Par52">This use case is a generalization of the preceeding one, where the user wants to compare the performance of two different methods for one or several steps of the pre-processing pipeline. For instance, Fig. <xref rid="Fig6" ref-type="fig">6</xref> provides a comparison between the <italic>PeacoQC</italic>-based and the <italic>flowAI</italic>-based pipelines, applied on a particular biological sample of the <italic>HBV chronic mouse</italic> dataset. This comparison, obtained by plotting one specific channel (here the <italic>FSC-A</italic>) as a function of time, reveals that <italic>flowAI</italic> removes time chunks more aggressively than <italic>PeacoQC</italic>, for the current sample. Note that this comparison can also be done for any 2D combination of makers (not shown here).<fig id="Fig6"><label>Fig. 6</label><caption><p>Use case #4: comparison of the final state results, for sample <italic>D91_A01</italic>, between the <italic>PeacoQC</italic>-based pipeline and the <italic>flowAI</italic>-based pipeline - here using a (<italic>FSC-A</italic> vs. <italic>Time</italic>) plot. On the left, the end state of the <italic>PeacoQC</italic>-based pipeline is shown, while the end state of the <italic>flowAI</italic>-based pipeline is shown on the middle plot. On the right, an explicit comparison between the two <italic>flowFrames</italic> is performed. Red dots correspond to events that are present on the left hand side plot, but not present on the middle plot, while blue dots correspond to events that are present on both plots. This figure reveals that, for this particular sample, <italic>flowAI</italic> tends to remove time chunks more aggressively than <italic>PeacoQC</italic></p></caption><graphic xlink:href="12859_2024_5691_Fig6_HTML" id="MO6"/></fig></p>
      </sec>
      <sec id="Sec15">
        <title>Use case #5: comparing two different biological samples</title>
        <p id="Par53">It is also possible to compare two different biological samples of the same dataset, at any specific step of any pipeline. This allows e.g. to check that the methods used for the various pre-processing steps perform consistently across the whole dataset. One example is shown in Fig. <xref rid="Fig7" ref-type="fig">7</xref>, where two different samples are displayed in a 2D plot with the <italic>FSC-A</italic> and <italic>Live &amp;Dead</italic> channels. In this case, the two samples show very similar bivariate distributions. Based on this 2D representation, one could conclude that the pre-processing pipeline has correctly selected the target cell population in both cases. This would however need careful confirmation based on other 2D combinations of markers, e.g. <italic>FSC-H</italic> vs. <italic>FSC-A</italic> (for doublets elimination), and <italic>FSC-A</italic> vs. <italic>SSC-A</italic> (for debris elimination).<fig id="Fig7"><label>Fig. 7</label><caption><p>Use case #5: comparison of the final state results between two different biological samples (on the left: sample <italic>D91_A01</italic> and on the right: sample <italic>D93_B05</italic>), within the same <italic>PeacoQC</italic>-based pipeline. For the particular channels chosen (<italic>Live &amp;Dead</italic> vs. <italic>FSC-A</italic>), the two samples show very similar bivariate distributions. Based on this 2D representation, one could conclude that the pre-processing pipeline has correctly selected the target cell population in both cases</p></caption><graphic xlink:href="12859_2024_5691_Fig7_HTML" id="MO7"/></fig></p>
      </sec>
      <sec id="Sec16">
        <title>Use case #6: visualization and update of generated scale transformations</title>
        <p id="Par54">Besides the <italic>flowFrame</italic> comparison tool, <italic>CytoPipelineGUI</italic> also provides a second interactive GUI application, which is aimed at inspecting the scale transformations obtained from the corresponding <italic>scaleTransformProcessingSteps</italic> pipeline (see Methods/Implementation section). If the shape of the distribution after transformation needs adjustment (for example for better separation of negative and positive populations for a specific marker), the user can manually adapt the scale transformation parameters, interactively assess the impact of their modifications, and apply these modifications to the scale transformations for further use in the pre-processing pipelines (Fig. <xref rid="Fig8" ref-type="fig">8</xref>). These manual adjustments can be very useful, for example when the automatic transformation parameter adjustment algorithm has not worked satisfactorily. Figure <xref rid="Fig9" ref-type="fig">9</xref> shows an example where the <italic>logicle</italic> transformation [<xref ref-type="bibr" rid="CR31">31</xref>] applied on marker CD38 (left) shows spurious density oscillations in the negative domain. Manually adjusting the <italic>positive decimals</italic> parameter of the <italic>logicle</italic> transformation leads to a better looking density plot, where one can more easily distinguish CD38-, CD38+ and CD38++ populations.<fig id="Fig8"><label>Fig. 8</label><caption><p>Use case #6: screenshot of the <italic>CytoPipelineGUI</italic> interactive GUI application enabling the inspection, manual adjustment and save of pipeline generated scale transformations. Here the user is visualizing the transformation applied on marker CD38, for sample <italic>D91_G01</italic></p></caption><graphic xlink:href="12859_2024_5691_Fig8_HTML" id="MO8"/></fig><fig id="Fig9"><label>Fig. 9</label><caption><p>Manual parameters adjustment of the <italic>logicle</italic> transformation applied on marker CD38, for sample <italic>D91_G01</italic>. On the left, the density plot shows spurious oscillations in the negative domain. On the right, manual adjustment on the <italic>positive decimals</italic> parameter of the <italic>logicle</italic> transformation leads to a better looking transformed density, where one can more easily identify CD38-, CD38+ and CD38++ populations</p></caption><graphic xlink:href="12859_2024_5691_Fig9_HTML" id="MO9"/></fig></p>
      </sec>
    </sec>
    <sec id="Sec17">
      <title>Benchmarking results</title>
      <p id="Par55">As mentioned in the Methods section, we used <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>] to perform a benchmarking exercise, comparing two different pre-processing pipelines, i.e. the <italic>PeacoQC</italic>-based and the <italic>flowAI</italic>-based pipelines, on the 55 sample files of the <italic>HBV chronic mouse</italic> dataset, and calculating evaluation metrics in terms of how well the automated pipelines could match the manual pre-processing performed by an expert scientist (’ground truth’). A global assessment shows comparable results between the two competing pipelines, consistently across all metrics (Fig. <xref rid="Fig10" ref-type="fig">10</xref>). However, when directly contrasting sample by sample results (Fig. <xref rid="Fig11" ref-type="fig">11</xref>) one can identify that the pipeline performance is rather heterogeneous across the 55 biological samples.<fig id="Fig10"><label>Fig. 10</label><caption><p>Box plots of the distributions of calculated evaluation metrics per sample, for the two competing pipelines. Globally, both pipelines perform very similarly, for all four evaluation metrics, i.e. sensitivity, specificity, precision and recall</p></caption><graphic xlink:href="12859_2024_5691_Fig10_HTML" id="MO10"/></fig><fig id="Fig11"><label>Fig. 11</label><caption><p>Scatter plots comparing the two pre-processing pipelines, each dot representing one of the 55 samples. Three specific samples are highlighted in red, corresponding to very different comparative behaviour of the two competing pipelines. Sample <italic>D91_C07</italic> is a unique sample for which the <italic>flowAI</italic>-based pipeline has a high specificity, but the <italic>PeacoQC</italic>-based pipeline has very low specificity. Sample <italic>D93_A05</italic> is one of the samples leading to low specificity for both pipelines, while <italic>sample D91_D03</italic> is representative of the samples for which both pipelines provide good specificity</p></caption><graphic xlink:href="12859_2024_5691_Fig11_HTML" id="MO11"/></fig></p>
      <p id="Par56">In order to better understand the behaviour of the two competing automated pipelines on different samples, we selected three different samples, corresponding to different locations into the specificity plot of Fig. <xref rid="Fig11" ref-type="fig">11</xref>. We then used <italic>CytoPipelineGUI</italic> to inspect the results at different steps, for the two automated pipelines as well as for the ’ground truth’:<list list-type="bullet"><list-item><p id="Par57">Sample <italic>D91_C07</italic> was an outlier for which the <italic>PeacoQC</italic>-based pipeline obtained an almost zero specificity, while <italic>flowAI</italic>-based pipeline specificity was around an acceptable level of above 0.8. However, as shown in Fig. <xref rid="Fig12" ref-type="fig">12</xref>, this was not due to the different <italic>QC in time</italic> algorithm (<italic>PeacoQC</italic> vs. <italic>flowAI</italic>), but to a lack of robustness of the dead cells removal algorithm, leading to an interaction phenomenon by which almost all events were removed in the dead cell removal step of the <italic>PeacoQC</italic>-based pipeline.</p></list-item><list-item><p id="Par58">Sample <italic>D93_A05</italic> resulted in a very low specificity for both pipelines. Investigation using <italic>CytoPipelineGUI</italic> revealed that this sample was in fact one of the low quality samples wherein the interesting cell population was a small minority of the events, while there was a great abundance of debris and dead cells (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S5). As a consequence, both pipelines were unable to automatically select the correct cell population, regardless of the <italic>QC in time</italic> method used.</p></list-item><list-item><p id="Par59">Sample <italic>D91_D03</italic> was an example where both automatic pipelines performed adequately without major issues. Here, the difference in metrics is effectively related to the choice of <italic>QC in time</italic> method. Looking at a specific visualization where time is displayed on the x axis (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S6), and based on both qualitative plot inspection and number of events comparison with the manual gating ground truth, <italic>CytoPipelineGUI</italic> reveals that <italic>flowAI</italic> method is too agressive in this case, while <italic>PeacoQC</italic> is too liberal.</p></list-item></list><fig id="Fig12"><label>Fig. 12</label><caption><p>Comparison between the dead cells removal step between the <italic>flowAI</italic> pipeline (<bold>A</bold>), and the <italic>PeacoQC</italic>-based pipeline (<bold>B</bold>), on sample <italic>D91_C07</italic>. While the input set of events look very similar (left plots of panels <bold>A and B</bold>), the dead cells removal step of the <italic>PeacoQC</italic>-based pipeline (right plot of panel B) wrongly removes most of the events. This reveals a lack of robustness of the algorithm, unrelated to the <italic>QC in time</italic> method used (<italic>flowAI</italic> vs. <italic>PeacoQC</italic>)</p></caption><graphic xlink:href="12859_2024_5691_Fig12_HTML" id="MO12"/></fig></p>
      <p id="Par60">Note that the conclusions of these visual inspections are particularly precious to the scientist in charge of building the data analysis pipelines, who is now able to get precise and accurate insight into why one pipeline performs better than the other, for specific samples. In particular, they are much better equipped to distinguish between an intrinsic performance difference between some competing methods, and surprising artefacts like a side effect of low sample quality or an interaction between two different steps.</p>
    </sec>
  </sec>
  <sec id="Sec18">
    <title>Discussion</title>
    <sec id="Sec19">
      <title>CytoPipeline, a flexible framework for building and running pre-processing pipelines</title>
      <p id="Par61">In this work, we have demonstrated the use of the <italic>CytoPipeline</italic> suite by implementing pre-processing pipelines on the <italic>HBV chronic mouse</italic> dataset. The implementation of <italic>CytoPipeline</italic>, with a centralized specification of the pipeline definition in a <italic>json</italic> file, leads to a better design of the pipeline code. As a result, we believe that the user productivity, when coding and testing different pipelines, can be greatly improved.</p>
      <p id="Par62">In order to illustrate this, we implemented the two <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based competing pipelines, described in Methods, in two <italic>R</italic> scripts, without using <italic>CytoPipeline</italic> objects, and looked into the duplication effort as well as the future extensibility of the code. These pieces of code are provided in the <italic>2023-CytoPipeline-code</italic> GitHub repository (see Code Availability in Declarations section).</p>
      <p id="Par63">Figure <xref rid="Fig13" ref-type="fig">13</xref> provides a schematic comparison between these two pieces of code, as well as indicative number of code lines. Of course, these relates to one particular implementation, as there are countless ways to program the same pipelines. What is interesting to note, though, is that there is a high proportion of code duplication, but the differences are not only located in one single place, due to the subtle differences induced by the change of orders in the steps. This is likely to lead to a high code maintenance burden in the future, for instance when extending the program to many more pipeline instances, which can use different step methods, different method parameters etc. In constrast, let us recall that, when using <italic>CytoPipeline</italic>, the <italic>R</italic> code itself stays the same, as all differences are explicitly described in the input <italic>json</italic> file. This <italic>json</italic> file is easier to maintain and extend than the <italic>R</italic> scripts represented in Fig. <xref rid="Fig13" ref-type="fig">13</xref>.<fig id="Fig13"><label>Fig. 13</label><caption><p>Structure of the <italic>R</italic> script implementations of the <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines. The common parts are shown in white, <italic>PeacoQC</italic>-based pipeline specific parts in yellow, and <italic>flowAI</italic>-based pipeline specific parts in red. Between the two pipelines, 79% of the code is in common, and the pipeline specific parts are not fully gathered in one single location</p></caption><graphic xlink:href="12859_2024_5691_Fig13_HTML" id="MO13"/></fig></p>
    </sec>
    <sec id="Sec20">
      <title>CytoPipeline provides a standardized and user-friendly tool for visual investigations</title>
      <p id="Par64">We have presented a series of use cases of <italic>CytoPipeline</italic> visualizations. In all these use cases, we took advantage of the same set of visualization tools, in a standardized way, but translated into different contexts, whatever the underlying methods used for the pre-processing pipelines. Also during the investigation of the benchmarking results, visual comparisons could be made with a ground truth manual gating, again using the same tools. Besides, the interactive GUI applications, implemented in <italic>CytoPipelineGUI</italic>, provide user interactivity and facilitate the investigation process. As stated in the introduction, these visual assessments are extremely important for the scientists, as they provide a unique mean to:<list list-type="bullet"><list-item><p id="Par65">visually control for the quality of the data samples, and acquire insight on the corresponding sample variability;</p></list-item><list-item><p id="Par66">visually check the robustness of the methods used in a given pre-processing pipeline, including the adequacy of the chosen user input parameters;</p></list-item><list-item><p id="Par67">visually compare different pre-processing pipeline settings. This can range from comparing different possible choices of method for a particular step, to assessing which one of two or more competing pipelines, possibly mixing different step methods in different orders, is performing better for the considered dataset.</p></list-item></list></p>
    </sec>
    <sec id="Sec21">
      <title>CytoPipeline allows user intuitive insight into benchmarking results</title>
      <p id="Par68">As part of this work, we have implemented a benchmarking comparing two competing pre-processing pipelines, with the main objective of showing the benefits of using <italic>CytoPipeline</italic> visualization tools, as a complement to the benchmarking itself. We showed that detailed comparison plots help the user investigating some specific benchmarking results, hence getting better intuition into the benchmarking outcome. We have indeed demonstrated that there can be numerous reasons why a pipeline instance performs better than another on specific samples, and it is key for the scientist to get a clear view of these reasons, and their possible links with sample characteristics. Therefore, we think that <italic>CytoPipeline</italic> is a powerful tool for interpreting the outcome of benchmarking studies.</p>
    </sec>
    <sec id="Sec22">
      <title>Using the proportion of events kept at each step as a diagnostic tool</title>
      <p id="Par69">As was shown in various figures in the Results section (see e.g. Fig. <xref rid="Fig12" ref-type="fig">12</xref>), <italic>CytoPipelineGUI</italic> computes the number of events that are retained at each step (shown as subtitles in the individual density plots). Tracking these changes throughout the pre-processing steps of a pipeline for different samples is a useful quality control. This can be implemented using some of the <italic>CytoPipeline</italic> functions, and is shown on Fig. <xref rid="Fig14" ref-type="fig">14</xref>.<fig id="Fig14"><label>Fig. 14</label><caption><p>Plots showing the proportion of retained events at each pre-processing step, for each sample. On the left, the <italic>PeacoQC</italic>-based pipeline shows, for sample <italic>D91_C07</italic>, a sharp drop in the last <italic>remove_dead_cells</italic> step. On the right, the <italic>flowAI</italic>-based pipeline does not show the same phenomenon</p></caption><graphic xlink:href="12859_2024_5691_Fig14_HTML" id="MO14"/></fig></p>
    </sec>
    <sec id="Sec23">
      <title>Limitations and possible extensions of the work</title>
      <p id="Par70">The <italic>CytoPipeline</italic> suite of <italic>R</italic> packages can be positioned as a tool to facilitate the design, testing and comparison of pre-processing pipelines for the end user. It is not meant to be:<list list-type="bullet"><list-item><p id="Par71">A novel pre-processing pipeline in itself, as it does not provide new methods for the various pre-processing steps (although it includes some functions calling some widely used methods), nor an innovative way to combine some of these.</p></list-item><list-item><p id="Par72">A tool facilitating benchmarking automation, like <italic>pipeComp</italic>. For example, unlike <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>], <italic>CytoPipeline</italic> does not provide any optimization solution to reduce the amount of CPU time and memory to run a potentially huge amount of (combinations of) possible pipelines. However, as mentioned before, <italic>CytoPipeline</italic> is used to facilitate the interpretation of results produced with benchmarking tools.</p></list-item></list>Regarding scalability, one should distinguish CPU and memory from hard drive storage requirements. CPU- and memory-wise, <italic>CytoPipeline</italic> has no particular issues when dealing with large number of samples, as long as each single fcs file can fully reside in memory. Indeed, as described in the Methods section, the engine that executes pre-processing pipelines supports both sequential and parallel file processing, and benefits from all multi-tasking scheduling options provided by the <italic>BiocParallel</italic> [<xref ref-type="bibr" rid="CR26">26</xref>] package. However, storage-wise, caching data at each step leads to large storage needs when processing many files. Typically, when analysing datasets including hundreds of fcs files, with several millions of events, compared across several pipelines and many processing steps, storage needs can require several terabytes. In those cases, users of <italic>CytoPipeline</italic> will typically need to call on high capacity storage facilities.</p>
      <p id="Par73">Another limitation of our work is the following: while <italic>CytoPipelineGUI</italic> is a powerful visualization tool for exploring specific pipeline steps for one or two samples, it does not provide an overall quality control of all samples at once. In that sense, it would be useful, especially for large datasets, to provide a global view of how samples differ at each pre-processing step. As mentioned above, one such diagnostic view can be obtained, by plotting the fraction of retained events at each pre-processing step (Fig. <xref rid="Fig14" ref-type="fig">14</xref>). Another promising approach focuses on the visualisation of all samples at once to identify specific outliers [<xref ref-type="bibr" rid="CR33">33</xref>].</p>
      <p id="Par74">Finally, another possible extension would be to further develop <italic>CytoPipeline</italic>, as to not only include the building and assessment of pre-processing steps, but also include support for subsequent steps of the data analysis: batch correction, population identification, etc.</p>
    </sec>
  </sec>
  <sec id="Sec24">
    <title>Conclusion</title>
    <p id="Par75">In this work, we have introduced a suite of <italic>R</italic> packages, <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, that helps building, visualizing and assessing pre-processing pipelines for flow cytometry data. We have demonstrated several use cases on a real life dataset, and highlighted several concrete benefits of these tools. For the new user, the packages come with ample documentation and tutorial videos, accessible through the package vignettes. We trust that using <italic>CytoPipeline</italic> will favour productivity in testing and assessing alternative data pre-processing pipelines, with the aim of designing good pre-processing and QC solutions for each particular context. The latter can be the specific type of biological sample, technology used (conventional flow cytometry, cytof, spectral flow cytometry), panel composition, experimental design etc., which in turn highly depend on the biological question at hand.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec25">
      <title>Supplementary Information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2024_5691_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1.</bold> Supplementary tables, figures and pipeline configuration files.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par80">Note that <italic>CytoPipeline</italic> also provides methods to define a pipeline and its steps programmatically in <italic>R</italic>, without providing a text file as an input.</p>
    </fn>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>Conceptualization: PH, LG; Methodology: PH, LG, DL, SD; Software: PH, LG; Data collection: BB, MH; Writing - original draft: PH, BB; Writing - review &amp; editing: LG, DL, ST, SD, MH, MT; Supervision: LG, DL, ST, MT.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was funded by GlaxoSmithKline Biologicals S.A., under a cooperative research and development agreement between GlaxoSmithKline Biologicals S.A. and de Duve Institute (UCLouvain).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Raw flow cytometry data files, as well as the manual gating information considered as the ground truth for the benchmarking, are available on Zenodo (DOI:10.5281/zenodo.8425840).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>All code needed to reproduce the results presented in the current article is available on the following GitHub repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/UCLouvain-CBIO/2023-CytoPipeline-code">https://github.com/UCLouvain-CBIO/2023-CytoPipeline-code</ext-link>, of which a release has been archived on Zenodo (DOI:10.5281/zenodo.8425840).</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent to participate</title>
      <p id="Par76">Not applicable.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p id="Par77">Not applicable.</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par78">P.H. is a student at the de Duve Institute (UCLouvain) and participates in a post graduate studentship program at GSK; B.B. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; S.D. is employee of the GSK group of companies and reports ownership of GSK shares; M.H. is employee of the GSK group of companies; M.T. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; S.T. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; D.L. is employee of the GSK group of companies and reports ownership of GSK shares; L.G. reports no competing interest.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McKinnon</surname>
            <given-names>KM</given-names>
          </name>
        </person-group>
        <article-title>Flow cytometry: an overview</article-title>
        <source>Curr Protoc Immunol.</source>
        <year>2018</year>
        <volume>120</volume>
        <fpage>511</fpage>
        <lpage>5111</lpage>
        <pub-id pub-id-type="doi">10.1002/cpim.40</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lambrecht</surname>
            <given-names>BN</given-names>
          </name>
        </person-group>
        <article-title>Computational flow cytometry: helping to make sense of high-dimensional immunology data</article-title>
        <source>Nat Rev Immunol</source>
        <year>2016</year>
        <volume>16</volume>
        <issue>7</issue>
        <fpage>449</fpage>
        <lpage>462</lpage>
        <pub-id pub-id-type="doi">10.1038/nri.2016.56</pub-id>
        <?supplied-pmid 27320317?>
        <pub-id pub-id-type="pmid">27320317</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Couckuyt</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Emmaneel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Aerts</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Analyzing high-dimensional cytometry data using FlowSOM</article-title>
        <source>Nat Protoc</source>
        <year>2021</year>
        <volume>16</volume>
        <issue>8</issue>
        <fpage>3775</fpage>
        <lpage>3801</lpage>
        <pub-id pub-id-type="doi">10.1038/s41596-021-00550-0</pub-id>
        <?supplied-pmid 34172973?>
        <pub-id pub-id-type="pmid">34172973</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nowicka</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Krieg</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Crowell</surname>
            <given-names>HL</given-names>
          </name>
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Hartmann</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Guglietta</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>CyTOF workflow: differential discovery in high-throughput high-dimensional cytometry datasets</article-title>
        <source>F1000Res.</source>
        <year>2017</year>
        <volume>6</volume>
        <fpage>748</fpage>
        <pub-id pub-id-type="doi">10.12688/f1000research.11622.1</pub-id>
        <?supplied-pmid 28663787?>
        <pub-id pub-id-type="pmid">28663787</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <name>
            <surname>Marañón</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Data processing workflow for large-scale immune monitoring studies by mass cytometry</article-title>
        <source>Comput Struct Biotechnol J</source>
        <year>2021</year>
        <volume>19</volume>
        <fpage>3160</fpage>
        <lpage>3175</lpage>
        <pub-id pub-id-type="doi">10.1016/j.csbj.2021.05.032</pub-id>
        <?supplied-pmid 34141137?>
        <pub-id pub-id-type="pmid">34141137</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ashhurst</surname>
            <given-names>TM</given-names>
          </name>
          <name>
            <surname>Marsh-Wakefield</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Putri</surname>
            <given-names>GH</given-names>
          </name>
          <name>
            <surname>Spiteri</surname>
            <given-names>AG</given-names>
          </name>
          <name>
            <surname>Shinko</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Read</surname>
            <given-names>MN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integration, exploration, and analysis of high-dimensional single-cell cytometry data using Spectre</article-title>
        <source>Cytometry A</source>
        <year>2022</year>
        <volume>101</volume>
        <issue>3</issue>
        <fpage>237</fpage>
        <lpage>253</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24350</pub-id>
        <?supplied-pmid 33840138?>
        <pub-id pub-id-type="pmid">33840138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Martorell Marugán</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Protocol for large scale whole blood immune monitoring by mass cytometry and Cyto Quality Pipeline</article-title>
        <source>STAR Protoc.</source>
        <year>2022</year>
        <volume>3</volume>
        <issue>4</issue>
        <fpage>101697</fpage>
        <pub-id pub-id-type="doi">10.1016/j.xpro.2022.101697</pub-id>
        <?supplied-pmid 36353363?>
        <pub-id pub-id-type="pmid">36353363</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liechti</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Ashhurst</surname>
            <given-names>TM</given-names>
          </name>
          <name>
            <surname>Stanley</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Prlic</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>An updated guide for the perplexed: cytometry in the high-dimensional era</article-title>
        <source>Nat Immunol</source>
        <year>2021</year>
        <volume>22</volume>
        <issue>10</issue>
        <fpage>1190</fpage>
        <lpage>1197</lpage>
        <pub-id pub-id-type="doi">10.1038/s41590-021-01006-z</pub-id>
        <?supplied-pmid 34489590?>
        <pub-id pub-id-type="pmid">34489590</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mazza</surname>
            <given-names>EMC</given-names>
          </name>
          <name>
            <surname>Brummelman</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Alvisi</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Roberto</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>De Paoli</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Zanon</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Background fluorescence and spreading error are major contributors of variability in high-dimensional flow cytometry data visualization by t-distributed stochastic neighboring embedding</article-title>
        <source>Cytometry A</source>
        <year>2018</year>
        <volume>93</volume>
        <issue>8</issue>
        <fpage>785</fpage>
        <lpage>792</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23566</pub-id>
        <?supplied-pmid 30107099?>
        <pub-id pub-id-type="pmid">30107099</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Finak</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Perez</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Weng</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Optimizing transformations for automated, high throughput analysis of flow cytometry data</article-title>
        <source>BMC Bioinform</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>546</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-546</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Emmaneel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Sichien</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Marañón</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PeacoQC: peak-based selection of high quality cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2022</year>
        <volume>101</volume>
        <issue>4</issue>
        <fpage>325</fpage>
        <lpage>338</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24501</pub-id>
        <?supplied-pmid 34549881?>
        <pub-id pub-id-type="pmid">34549881</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>den Braanker</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Bongenaar</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lubberts</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>How to prepare spectral flow cytometry datasets for high dimensional data analysis: a practical workflow</article-title>
        <source>Front Immunol</source>
        <year>2021</year>
        <volume>12</volume>
        <fpage>768113</fpage>
        <pub-id pub-id-type="doi">10.3389/fimmu.2021.768113</pub-id>
        <pub-id pub-id-type="pmid">34868024</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>VJ</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Anders</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Carvalho</surname>
            <given-names>BS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Orchestrating high-throughput genomic analysis with Bioconductor</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <issue>2</issue>
        <fpage>115</fpage>
        <lpage>121</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3252</pub-id>
        <?supplied-pmid 25633503?>
        <pub-id pub-id-type="pmid">25633503</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Monaco</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Poidinger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>de Magalhães</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Larbi</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>flowAI: automatic and interactive anomaly discerning tools for flow cytometry data</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>16</issue>
        <fpage>2473</fpage>
        <lpage>2480</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw191</pub-id>
        <?supplied-pmid 27153628?>
        <pub-id pub-id-type="pmid">27153628</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fletez-Brant</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Špidlen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Roederer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chattopadhyay</surname>
            <given-names>PK</given-names>
          </name>
        </person-group>
        <article-title>flowClean: automated identification and removal of fluorescence anomalies in flow cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>5</issue>
        <fpage>461</fpage>
        <lpage>471</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.22837</pub-id>
        <?supplied-pmid 26990501?>
        <pub-id pub-id-type="pmid">26990501</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Meskas</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Yokosawa</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Segat</surname>
            <given-names>GC</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
        </person-group>
        <article-title>flowCut: an R package for automated removal of outlier events and flagging of files based on time versus fluorescence analysis</article-title>
        <source>Cytometry A</source>
        <year>2023</year>
        <volume>103</volume>
        <issue>1</issue>
        <fpage>71</fpage>
        <lpage>81</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24670</pub-id>
        <?supplied-pmid 35796000?>
        <pub-id pub-id-type="pmid">35796000</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Song</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>BY</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Yu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>GN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A comparison framework and guideline of clustering methods for mass cytometry data</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>297</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1917-7</pub-id>
        <?supplied-pmid 31870419?>
        <pub-id pub-id-type="pmid">31870419</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>MD</given-names>
          </name>
        </person-group>
        <article-title>Comparison of clustering methods for high-dimensional single-cell flow and mass cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>12</issue>
        <fpage>1084</fpage>
        <lpage>1096</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23030</pub-id>
        <?supplied-pmid 27992111?>
        <pub-id pub-id-type="pmid">27992111</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cheung</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Campbell</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Braybrook</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Petzing</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Assessment of automated flow cytometry data analysis tools within cell and gene therapy manufacturing</article-title>
        <source>Int J Mol Sci</source>
        <year>2022</year>
        <volume>23</volume>
        <issue>6</issue>
        <fpage>3224</fpage>
        <pub-id pub-id-type="doi">10.3390/ijms23063224</pub-id>
        <?supplied-pmid 35328645?>
        <pub-id pub-id-type="pmid">35328645</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Aghaeepour</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Chattopadhyay</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chikina</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Dhaene</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kursa</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A benchmark for evaluation of algorithms for identification of cellular correlates of clinical outcomes</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>1</issue>
        <fpage>16</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.22732</pub-id>
        <?supplied-pmid 26447924?>
        <pub-id pub-id-type="pmid">26447924</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Germain</surname>
            <given-names>PL</given-names>
          </name>
          <name>
            <surname>Sonrel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>MD</given-names>
          </name>
        </person-group>
        <article-title>pipeComp, a general framework for the evaluation of computational pipelines, reveals performant single cell RNA-seq preprocessing tools</article-title>
        <source>Genome Biol</source>
        <year>2020</year>
        <volume>21</volume>
        <issue>1</issue>
        <fpage>227</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-020-02136-7</pub-id>
        <?supplied-pmid 32873325?>
        <pub-id pub-id-type="pmid">32873325</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Su</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Tian</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Dong</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Hickey</surname>
            <given-names>PF</given-names>
          </name>
          <name>
            <surname>Freytag</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ritchie</surname>
            <given-names>ME</given-names>
          </name>
        </person-group>
        <article-title>Cell Bench: R/Bioconductor software for comparing single-cell RNA-seq analysis methods</article-title>
        <source>Bioinformatics</source>
        <year>2020</year>
        <volume>36</volume>
        <issue>7</issue>
        <fpage>2288</fpage>
        <lpage>2290</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz889</pub-id>
        <?supplied-pmid 31778143?>
        <pub-id pub-id-type="pmid">31778143</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Selega A, Campbell KR.: Multi-objective Bayesian optimization with heuristic objectives for biomedical and molecular data analysis workflows. Preprint at <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/early/2022/06/12/2022.06.08.495370">https://www.biorxiv.org/content/early/2022/06/12/2022.06.08.495370</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Spidlen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Parks</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Goldberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bray</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Bierre</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Data file standard for flow cytometry, version FCS 3.1</article-title>
        <source>Cytometry A.</source>
        <year>2010</year>
        <volume>77</volume>
        <issue>1</issue>
        <fpage>97</fpage>
        <lpage>100</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.20825</pub-id>
        <?supplied-pmid 19937951?>
        <pub-id pub-id-type="pmid">19937951</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Pezoa F, Reutter JL, Suarez F, Ugarte M, Vrgoč D. Foundations of JSON schema. In: Proceedings of the 25th International Conference on World Wide Web. International World Wide Web Conferences Steering Committee; 2016. p. 263–273.</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Morgan M, Wang J, Obenchain V, Lang M, Thompson R, Turaga N.: BiocParallel: Bioconductor facilities for parallel evaluation. R package version 1.34.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/BiocParallel">https://bioconductor.org/packages/BiocParallel</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Shepherd L, Morgan M.: BiocFileCache: Manage Files Across Sessions. R package version 2.8.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/BiocFileCache">https://bioconductor.org/packages/BiocFileCache</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Chang W, Cheng J, Allaire J, Sievert C, Schloerke B, Xie Y, et al.: shiny: Web Application Framework for R. Available from: <ext-link ext-link-type="uri" xlink:href="https://shiny.posit.co/">https://shiny.posit.co/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Ellis B, Haaland P, Hahne F, Le Meur N, Gopalakrishnan N, Spidlen J, et al.: flowCore: Basic structures for flow cytometry data. R package version 2.12.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/flowCore">https://bioconductor.org/packages/flowCore</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lo</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Hahne</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>flowClust: a Bioconductor package for automated gating of flow cytometry data</article-title>
        <source>BMC Bioinform</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>145</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-145</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Parks</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Roederer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>WA</given-names>
          </name>
        </person-group>
        <article-title>A new “Logicle” display method avoids deceptive effects of logarithmic scaling for low signals and compensated data</article-title>
        <source>Cytometry A</source>
        <year>2006</year>
        <volume>69</volume>
        <issue>6</issue>
        <fpage>541</fpage>
        <lpage>551</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.20258</pub-id>
        <?supplied-pmid 16604519?>
        <pub-id pub-id-type="pmid">16604519</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Finak</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>CytoML for cross-platform cytometry data sharing</article-title>
        <source>Cytometry A</source>
        <year>2018</year>
        <volume>93</volume>
        <issue>12</issue>
        <fpage>1189</fpage>
        <lpage>1196</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23663</pub-id>
        <?supplied-pmid 30551257?>
        <pub-id pub-id-type="pmid">30551257</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Hauchamps P, Gatto L.: CytoMDS: Low Dimensions projection of cytometry samples. R package version 0.99.8. Available from: <ext-link ext-link-type="uri" xlink:href="https://uclouvain-cbio.github.io/CytoMDS">https://uclouvain-cbio.github.io/CytoMDS</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10877884</article-id>
    <article-id pub-id-type="publisher-id">5691</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-024-05691-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>CytoPipeline and CytoPipelineGUI: a Bioconductor R package suite for building and visualizing automated pre-processing pipelines for flow cytometry data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Hauchamps</surname>
          <given-names>Philippe</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bayat</surname>
          <given-names>Babak</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Delandre</surname>
          <given-names>Simon</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hamrouni</surname>
          <given-names>Mehdi</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Toussaint</surname>
          <given-names>Marie</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Temmerman</surname>
          <given-names>Stephane</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Lin</surname>
          <given-names>Dan</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Gatto</surname>
          <given-names>Laurent</given-names>
        </name>
        <address>
          <email>laurent.gatto@uclouvain.be</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/022em3k58</institution-id><institution-id institution-id-type="GRID">grid.16549.3f</institution-id><institution>Computational Biology and Bioinformatics, de duve Institute, </institution><institution>UCLouvain, </institution></institution-wrap>Brussels, Belgium </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.425090.a</institution-id><institution-id institution-id-type="ISNI">0000 0004 0468 9597</institution-id><institution>GSK, </institution></institution-wrap>Rixensart, Belgium </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>20</day>
      <month>2</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>20</day>
      <month>2</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>25</volume>
    <elocation-id>80</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>11</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>2</day>
        <month>2</month>
        <year>2024</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">With the increase of the dimensionality in flow cytometry data over the past years, there is a growing need to replace or complement traditional manual analysis (i.e. iterative 2D gating) with automated data analysis pipelines. A crucial part of these pipelines consists of pre-processing and applying quality control filtering to the raw data, in order to use high quality events in the downstream analyses. This part can in turn be split into a number of elementary steps: signal compensation or unmixing, scale transformation, debris, doublets and dead cells removal, batch effect correction, etc. However, assembling and assessing the pre-processing part can be challenging for a number of reasons. First, each of the involved elementary steps can be implemented using various methods and R packages. Second, the order of the steps can have an impact on the downstream analysis results. Finally, each method typically comes with its specific, non standardized diagnostic and visualizations, making objective comparison difficult for the end user.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">Here, we present <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, two <italic>R</italic> packages to build, compare and assess pre-processing pipelines for flow cytometry data. To exemplify these new tools, we present the steps involved in designing a pre-processing pipeline on a real life dataset and demonstrate different visual assessment use cases. We also set up a benchmarking comparing two pre-processing pipelines differing by their quality control methods, and show how the package visualization utilities can provide crucial user insight into the obtained benchmark metrics.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3"><italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic> are two Bioconductor <italic>R</italic> packages that help building, visualizing and assessing pre-processing pipelines for flow cytometry data. They increase productivity during pipeline development and testing, and complement benchmarking tools, by providing user intuitive insight into benchmarking results.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-024-05691-z.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Flow cytometry</kwd>
      <kwd>Automated data analysis pipeline</kwd>
      <kwd>Pre-processing</kwd>
      <kwd>Quality control</kwd>
      <kwd>Visualization</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par4">With recent advances in flow cytometry technologies, it has become possible to measure up to 50 markers simultaneously for the same single cells [<xref ref-type="bibr" rid="CR1">1</xref>]. As an immediate benefit, scientists now have access to richer flow cytometry experimental data. However, these advances also come at a cost, i.e. a more complex data analysis task. Indeed, traditional ’manual gating’ data analysis procedures, which proceed by iterative hierarchical 2D representations of the data guided by biological knowledge, are unable to thoroughly extract the signal of interest from such high-dimensional data [<xref ref-type="bibr" rid="CR2">2</xref>]. There is therefore a need to complement such manual, expert-based approaches with <italic>computational flow cytometry</italic>, i.e. a set of computational algorithms and methods for automated, reproducible and data-driven flow cytometry data analysis [<xref ref-type="bibr" rid="CR2">2</xref>].</p>
    <p id="Par5">Those computational flow cytometry approaches translate into so-called data analysis pipelines. Examples of such automated pipelines have been published in the recent litterature (e.g. [<xref ref-type="bibr" rid="CR3">3</xref>–<xref ref-type="bibr" rid="CR7">7</xref>]). These consist of a series of data processing steps that are executed, one after the other, with the output of one step becoming the input of the next step. Schematically, for a typical flow cytometry data analysis, these numerous steps can usually be grouped into three big parts, coming after initial data sample acquisition:<list list-type="bullet"><list-item><p id="Par6"><italic>data pre-processing and quality control</italic>, which consists in both filtering undesirable and low quality events, and increasing the signal to noise ratio of the raw data, in order to feed the downstream steps with data of the highest possible quality;</p></list-item><list-item><p id="Par7"><italic>population identification</italic>, which aims at labelling the events with names of cell populations of interest;</p></list-item><list-item><p id="Par8"><italic>downstream statistical analysis</italic>, which can range from the simplest descriptive count/frequencies per population, to building complex prediction models for an outcome of interest, possibly for a high number of samples.</p></list-item></list>In what follows, we will mainly focus on the data pre-processing part, which can itself be split into several sub-tasks, or <italic>steps</italic> [<xref ref-type="bibr" rid="CR8">8</xref>]: compensation, scale transformation, control (and possibly removal) of batch effects, control of signal stability in time (<italic>QC in time</italic>), filtering of undesirable events like debris, doublets and dead cells. All these steps are crucial to avoid that the subsequent analysis gets perturbed with erroneous signal (see e.g. [<xref ref-type="bibr" rid="CR9">9</xref>] for compensation, [<xref ref-type="bibr" rid="CR10">10</xref>] for scale transformation, [<xref ref-type="bibr" rid="CR11">11</xref>] for signal stability in time, and [<xref ref-type="bibr" rid="CR12">12</xref>] for other steps).</p>
    <p id="Par9">However, building good, automated pre-processing pipelines, suitable for the particular type of biological samples and biological question, can be challenging for a number of reasons. First, for each elementary step, there might exist a number of different computational methods, each of those having numerous parameters available to the user. For example, looking only into methods available on the Bioconductor project [<xref ref-type="bibr" rid="CR13">13</xref>] for controlling the signal stability (<italic>QC in time</italic>), one finds at least four different methods available: <italic>flowAI</italic> [<xref ref-type="bibr" rid="CR14">14</xref>], <italic>flowClean</italic> [<xref ref-type="bibr" rid="CR15">15</xref>], <italic>PeacoQC</italic> [<xref ref-type="bibr" rid="CR11">11</xref>], <italic>flowCut</italic> [<xref ref-type="bibr" rid="CR16">16</xref>], and each of these methods comes with 7 to 11 different parameters. Second, the order of steps is not always set in stone, and applying different orders can lead to different outcomes, an effect coined steps interaction. These two facts lead to what we refer to as the <italic>combinatorial problem of designing pipelines</italic>, which means that, as the number of necessary elementary steps increases, the number of possible pipeline designs grows exponentially. As a consequence, for the user, it becomes time consuming to build and assess even only a few of the possible step combinations, let alone testing a representative sample of them in a systematic manner.</p>
    <p id="Par10">On top of that combinatorial problem, the user is also faced with a lack of generic, standardized and user-friendly tools to evaluate and compare data pre-processing pipelines. On the one hand, each single pre-processing step method might come with its own approach for diagnostic and visualization (e.g. ad hoc plots, html or pdf reports), which allows the user neither to standardize the comparison process, nor to easily investigate the links and interactions between the different steps. On the other hand, there are a number of benchmarking studies comparing computational methods for flow cytometry data [<xref ref-type="bibr" rid="CR17">17</xref>–<xref ref-type="bibr" rid="CR20">20</xref>], but they tend to focus on only one part of the pipeline, which is usually the downstream analysis. Finally, there also exist some generic tools and frameworks to systematize the benchmarking process, including the interactions between different steps, such as for example <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>] and <italic>CellBench</italic> [<xref ref-type="bibr" rid="CR22">22</xref>], and as well as some attempts to formally model the pipeline optimization problem in mathematical terms [<xref ref-type="bibr" rid="CR23">23</xref>]. However, what is lacking for the end user is the ability to intuitively interpret the results of such benchmarkings. In other words, could one translate that a pipeline <italic>A</italic> outperforms a pipeline <italic>B</italic>, with respect to a specific performance metric, in terms of the obtained data characteristics, or number of filtered events. Therefore, there is still a need for flow cytometry practitioner-focused standardized tools for visual comparison of pre-processing pipelines.</p>
    <p id="Par11">Here, we present <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, two <italic>R</italic> packages aimed at facilitating the design and visual comparison of pre-processing pipelines for flow cytometry data. We describe the concepts underlying the software, provide some illustrative examples and demonstrate the use of the accompanying visualization utilities. We show that these new tools can help increasing the productivity during pipeline development and testing, and that they can complement benchmarking tools and studies, by providing the user with intuitive insight into benchmarking results. The <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic> packages are available on Bioconductor [<xref ref-type="bibr" rid="CR13">13</xref>], as of version 3.17 and 3.18, respectively.</p>
  </sec>
  <sec id="Sec2">
    <title>Methods</title>
    <sec id="Sec3">
      <title>Implementation</title>
      <p id="Par12">In what follows, we assume that we have a dataset, provided as a set of files in Flow Cytometry Standard (<italic>fcs</italic>) format [<xref ref-type="bibr" rid="CR24">24</xref>], on which we would like to apply a data pre-processing pipeline.</p>
      <p id="Par13">The <italic>CytoPipeline</italic> suite is composed of two main <italic>R</italic> packages, <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>. While <italic>CytoPipeline</italic> is the main package, providing support for pipeline definition, running, monitoring and basic plotting functions, <italic>CytoPipelineGUI</italic> provides two interactive GUI applications enabling users to interactively explore and visualize the pipeline results. The <italic>CytoPipeline</italic> framework is based on two main concepts, namely <italic>CytoPipeline</italic> and <italic>CytoProcessingStep</italic>. A <italic>CytoPipeline</italic> object centralizes the pipeline definition, and specifies the run order of the different pipeline steps. These steps materialize as <italic>CytoProcessingStep</italic> objects, which store pipeline step names and the corresponding <italic>R</italic> functions that will be called at execution time. These functions are either provided within the <italic>CytoPipeline</italic> package itself, exported from third party packages, or coded by the user themself. Together with the function name to be called, a <italic>CytoProcessingStep</italic> object also contains the list of parameters that are used as arguments to the function.</p>
      <p id="Par14">When creating a <italic>CytoPipeline</italic> object, the user can provide the description of the pipeline as a text file in <italic>json</italic> format [<xref ref-type="bibr" rid="CR25">25</xref>]. Figure <xref rid="Fig1" ref-type="fig">1</xref> shows the typical structure of such a <italic>json</italic> file. Note that, in practice, two different sets of processing steps, or pipelines, are described:<list list-type="bullet"><list-item><p id="Par15">A <italic>scaleTransformProcessingSteps</italic> pipeline, which describes the set of successive steps needed to generate the scale transformations that will be applied to the different channels of each of the <italic>fcs</italic> files that are included in the dataset. The <italic>CytoPipeline</italic> engine will run this pipeline first, and only once, prior to running the pre-processing on each <italic>fcs</italic> file.</p></list-item><list-item><p id="Par16">A <italic>flowFramesPreProcessingSteps</italic> pipeline, which describes the set of pre-processing steps that will be applied on each of the different <italic>fcs</italic> file independently.</p></list-item></list>Steps in both pipelines are described in the exact same way, i.e. by providing a user-chosen name for the step, the corresponding function that needs to be called by the engine upon running, and the set of arguments (i.e. the list of parameter names and corresponding values) that need to be provided to the function. Note that, on top of these explicitely defined arguments, the running engine will also take the output of each step as an implicit additional argument to the function called by the subsequent step.<fig id="Fig1"><label>Fig. 1</label><caption><p>Structure of the user provided <italic>json</italic> file that describes a <italic>CytoPipeline</italic> object. The first pipeline (i.e. <italic>“scaleTransformProcessingSteps”</italic>) specifies how the preliminary calculation of the scale transformations is performed. Here only its first two steps are described. The first step, named <italic>“my_scale_transform_step1”</italic>, consists in calling the <italic>“scaleTransFormFunc1”</italic> function, with 3 parameters (<italic>“paramName1”</italic>, <italic>“paramName2”</italic> and <italic>“paramName3”</italic> provided as arguments, taking the specified <italic>“value1”</italic>, <italic>“value2”</italic> and <italic>“value3”</italic> value respectively. The second step, named <italic>“my_scale_transform_step2”</italic>, calls the <italic>“scaleTransFormFunc2”</italic>, with only one single parameter, i.e. <italic>“paramName4”</italic> taking <italic>“value4”</italic> as value. The second pipeline (i.e. <italic>“flowFramesPreProcessingSteps”</italic>) specifies the set of pre-processing steps performed on each data file independently. Here again, only the first two steps are described. The first one, named <italic>“my_fcsfile_preprocessing_step1”</italic> calls the <italic>“preprocessingFunc1”</italic> function with two parameters, while the second one, named <italic>“my_fcsfile_preprocessing_step2”</italic> calls the <italic>“preprocessingFunc2”</italic> function with no parameter (apart from the output of the previous step which is always used as an implicit additional argument)</p></caption><graphic xlink:href="12859_2024_5691_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par17">The standard process for using <italic>CytoPipeline</italic> to build, run and inspect pre-processing pipelines is the following:<list list-type="bullet"><list-item><p id="Par18">define the pipeline by specifying the different steps using a descriptive text file, in <italic>json</italic> format;<xref ref-type="fn" rid="Fn1">1</xref></p></list-item><list-item><p id="Par19">run the pipeline, possibly for several data files in parallel, which involves writing and executing a short <italic>R</italic> script (see following sections);</p></list-item><list-item><p id="Par20">monitor the execution process thanks to a <italic>CytoPipeline</italic> provided workflow visualization utility;</p></list-item><list-item><p id="Par21">visualize and compare the results at different stages, using the <italic>CytoPipelineGUI</italic> interactive GUI applications.</p></list-item></list>In terms of technical infrastructure, the <italic>CytoPipeline</italic> package suite makes itself internal use of several technical <italic>R</italic> packages:<list list-type="bullet"><list-item><p id="Par22"><italic>BiocParallel</italic> [<xref ref-type="bibr" rid="CR26">26</xref>] enabling parallel pre-processing of <italic>fcs</italic> sample files;</p></list-item><list-item><p id="Par23"><italic>BiocFileCache</italic> [<xref ref-type="bibr" rid="CR27">27</xref>] enabling storage (i.e. <italic>caching</italic>) of all intermediary results for further inspection;</p></list-item><list-item><p id="Par24"><italic>shiny</italic> [<xref ref-type="bibr" rid="CR28">28</xref>] for interactive visualizations.</p></list-item></list></p>
    </sec>
    <sec id="Sec4">
      <title>Illustrative dataset</title>
      <p id="Par25">In order to demonstrate <italic>CytoPipeline</italic> functionalities, we make use of an illustrative dataset, the <italic>HBV chronic mouse</italic> dataset. This dataset was collected during a preclinical study aimed at assessing the effect of different therapeutic vaccine regimens on the immune response of Hepatitis B Virus transduced mice.</p>
      <p id="Par26">In this study, 56 male and female HLA.A2/DRB1 transgenic mice (transgenic for the human HLA-A2 and HLA-DRB1 molecules) were used. HLA.A2/DRB1 mice from groups 1, 2 and 4 were transduced at day 0 with adeno-associated virus serotype 2/8 (AAV2/8-HBV) vector carrying a replication-competent HBV DNA genome and randomized before immunization with 4 doses of vaccine candidate, based on level of HBs circulating antigen detected in the sera at day 21, age and gender proportions. Mice from group 3 were not transduced with AAV2/8-HBV viral vector and were immunized with four doses of vaccine candidate and finally, mice from group 5 were not transduced and received four doses of NaCl solution. Upon sacrifice, livers were collected, perfused with Phosphate Buffered Saline (PBS) to remove blood cells and after enzymatic treatment, lymphocytes were isolated, and stained with different monoclonal antibodies. The stained cells were acquired by flow cytometry using a BD Symphony A5 flow cytometer - the same instrument for all biological samples - and analyzed using the FlowJo v10.8 Software (BD Life Sciences).</p>
      <p id="Par27">Animal husbandry and experimental procedures were ethically reviewed and carried out in accordance with European Directive 2010/63/EU and the GlaxoSmithKline Biologicals’ policy on the care, welfare and treatment of animals, in GSK animal facilities located in Rixensart, Belgium (AAALAC accredited). The ethical protocol of the GSK in vivo study was approved by the local GSK ethical committee.</p>
      <p id="Par28">This experiment resulted in the acquisition of 55 different <italic>fcs</italic> raw data file - one sample could not be acquired - with a flow cytometry panel of 12 different channels. The <italic>HBV chronic mouse</italic> dataset is available on Zenodo (DOI:10.5281/zenodo.8425840).</p>
    </sec>
    <sec id="Sec5">
      <title>Applied pre-processing pipelines</title>
      <sec id="Sec6">
        <title>Pipeline set-up</title>
        <p id="Par29">For the purpose of illustrating <italic>CytoPipeline</italic> functionalities, the 55 raw data files of the <italic>HBV chronic mouse</italic> dataset were used as input of two different pre-processing pipelines. Each pipeline was composed of the following steps:<list list-type="bullet"><list-item><p id="Par30">Reading of the raw <italic>fcs</italic> sample files, using the <italic>flowCore</italic> package [<xref ref-type="bibr" rid="CR29">29</xref>].</p></list-item><list-item><p id="Par31">Margin events removal, which consists in identifying and removing the outliers using the <italic>PeacoQC</italic> package [<xref ref-type="bibr" rid="CR11">11</xref>]. In short, manual boundaries per channel, corresponding to the instrument detection limits, are applied, and all events falling outside these boundaries are removed.</p></list-item><list-item><p id="Par32">Signal compensation, which consists in applying an existing compensation matrix. This matrix was generated by the flow cytometer at data acquisition time, and subsequently manually adjusted by the expert scientist.</p></list-item><list-item><p id="Par33"><italic>QC in time</italic>, which consists in eliminating parts of the signal that are not stable in time, using one of the corresponding QC algorithms (see below).</p></list-item><list-item><p id="Par34">Doublet removal, which consists in keeping the events that have a similar area vs. height ratio of the FSC channel signal pulse, and eliminating the doublets, which have a significantly higher ratio. This was performed using an ad hoc implementation in the <italic>CytoPipeline</italic> package.</p></list-item><list-item><p id="Par35">Debris removal, which consists in clustering the events in the (FSC-A, SSC-A) 2D representation, targetting a number of clusters provided by the user. After the clusters are obtained, the cluster of which the centroid lies nearest to the origin, i.e. with the smallest FSC-A (size) and smallest SSC-A (content, granularity), is considered as containing debris and removed. This was done using the <italic>flowClust</italic> package [<xref ref-type="bibr" rid="CR30">30</xref>].</p></list-item><list-item><p id="Par36">Scale transformation, which consists in automatically estimating the parameters of a <italic>logicle</italic> transformation [<xref ref-type="bibr" rid="CR31">31</xref>], using the <italic>flowCore</italic> package [<xref ref-type="bibr" rid="CR29">29</xref>]. The obtained scale transformations were applied on all 55 sample files, and the parameters were estimated on an aggregation of a subset of 4 randomly chosen sample <italic>fcs</italic> files, after margin events removal and signal compensation.</p></list-item><list-item><p id="Par37">Dead cells removal, which consists in automatically setting a threshold between live cells and dead cells in the corresponding fluorescent ’Live &amp; Dead’ channel dimension, using the <italic>flowDensity</italic> package. The events having a ’Live &amp; Dead’ intensity above the found threshold are eliminated as dead cells.</p></list-item></list>However, the two pre-processing pipelines essentially differed by the method used for the <italic>QC in time</italic> step, as one used the <italic>PeacoQC</italic> package [<xref ref-type="bibr" rid="CR11">11</xref>], while the other used the <italic>flowAI</italic> package [<xref ref-type="bibr" rid="CR14">14</xref>]. In addition, the step order was also different, as the <italic>PeacoQC</italic> method is based on a peak detection algorithm which needs to run on compensated, scaled transformed data [<xref ref-type="bibr" rid="CR11">11</xref>], while the <italic>flowAI</italic> method is advised to be applied on raw data [<xref ref-type="bibr" rid="CR14">14</xref>]. Figure <xref rid="Fig2" ref-type="fig">2</xref> outlines the different steps applied in the pre-processing of each <italic>fcs</italic> files, for both the <italic>PeacoQC</italic>-based pipeline, and the <italic>flowAI</italic>-based pipeline.<fig id="Fig2"><label>Fig. 2</label><caption><p>Workflow of the subsequent steps applied in the pre-processing of each <italic>fcs</italic> file, for both pipelines. These plots have been generated using the <italic>CytoPipeline</italic> package</p></caption><graphic xlink:href="12859_2024_5691_Fig2_HTML" id="MO2"/></fig></p>
        <p id="Par38">More detailed information on packages, versions and methods underlying each step (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Tables S1, S2 and S3), as well as the <italic>json</italic> configuration files defining respectively the <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines are available in the Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
      </sec>
      <sec id="Sec7">
        <title>Running the pipelines and visualizing the results</title>
        <p id="Par39">In order to create the <italic>CytoPipeline</italic> objects representing the pipelines, run them and visualizing the results - including monitoring of the pipeline execution - a short <italic>R</italic> script needs to be written and executed. An example of such <italic>R</italic> script is provided in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1. Note that, as a result of the centralization of the pipeline definition, the code is very simple and concise, as for example, creating and running the pipeline boils down to essentially two <italic>R</italic> statements. Also, note that it is the same <italic>R</italic> code that triggers the execution of both pre-processing pipelines described in the previous section (except for the selection of the appropriate input <italic>json</italic> file and the choice of the experiment name under which to store the results). The distinctive part of the pipeline is located in the input <italic>json</italic> file, which describes the pipelines steps and their execution order.</p>
      </sec>
    </sec>
    <sec id="Sec8">
      <title>Example benchmarking</title>
      <p id="Par40">Aiming at illustrating the use of <italic>CytoPipeline</italic> to provide insights into benchmarking results, we designed a benchmarking, which consisted in comparing the outcome of the two competing <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines described in the previous section, using the <italic>HBV chronic mouse</italic> dataset, to a ground truth. The latter was obtained by submitting the 55 raw data <italic>fcs</italic> files to an expert scientist, who manually pre-processed the files, gated the events using FlowJo. The obtained FlowJo workspace file was subsequently automatically processed using the <italic>CytoML</italic> package [<xref ref-type="bibr" rid="CR32">32</xref>] version 2.12.0, and incorporated into a dedicated <italic>CytoPipeline</italic> ground truth pipeline for comparison with the two automated pipelines.</p>
      <p id="Par41">Regarding the benchmark evaluation metrics, for each single <italic>fcs</italic> file, the final output of each pipeline was compared to the ground truth, in terms of number of events, and the following metrics were calculated: sensitivity, specificity, precision and recall, which are defined as follows: let<list list-type="bullet"><list-item><p id="Par42"><italic>G</italic> (resp. <italic>B</italic>) be the set of events that are considered as <bold>G</bold>ood (resp. <bold>B</bold>ad) in the manual gating i.e. in the ground truth;</p></list-item><list-item><p id="Par43"><inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_G$$\end{document}</tex-math><mml:math id="M2"><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq1.gif"/></alternatives></inline-formula> (resp <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_B$$\end{document}</tex-math><mml:math id="M4"><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq2.gif"/></alternatives></inline-formula>) be the set of events that are flagged as good (resp. flagged as bad) by the considered automated pipeline.</p></list-item></list>We can additionally define the following sets of events:<list list-type="bullet"><list-item><p id="Par44"><inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_{G,\text { correct}} = F_G \cap G$$\end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub><mml:mo>∩</mml:mo><mml:mi>G</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq3.gif"/></alternatives></inline-formula>, the set of events that are correctly flagged as good;</p></list-item><list-item><p id="Par45"><inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F_{B,\text { correct}} = F_B \cap B$$\end{document}</tex-math><mml:math id="M8"><mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mo>∩</mml:mo><mml:mi>B</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq4.gif"/></alternatives></inline-formula>, the set of events that are correctly flagged as bad.</p></list-item></list>The chosen evaluation metrics are then defined as:</p>
      <p id="Par46"><inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\text {sensitivity} = \frac{|F_{B,\text { correct}}|}{|B|}; \text {specificity} = \frac{|F_{G,\text { correct}}|}{|G|}; \text {precision} = \frac{|F_{B,\text { correct}}|}{|F_B|}; \text {recall} = \frac{|F_{G,\text { correct}}|}{|F_G|}$$\end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:mtext>sensitivity</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>B</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>specificity</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>G</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>precision</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>B</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mi>B</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:mfrac><mml:mo>;</mml:mo><mml:mtext>recall</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mrow><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>correct</mml:mtext></mml:mrow></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>F</mml:mi><mml:mi>G</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:mfrac></mml:mrow></mml:math><inline-graphic xlink:href="12859_2024_5691_Article_IEq5.gif"/></alternatives></inline-formula>, where |<italic>A</italic>| stands for the number of elements in the set A.</p>
      <p id="Par47">The benchmark was set up and performed using the <italic>pipeComp</italic> package [<xref ref-type="bibr" rid="CR21">21</xref>], version 1.10.0. Indeed, <italic>pipeComp</italic> is a convenient tool to efficiently automate multiple alternative pipelines to be compared in the benchmark, as well as to automate the calculation of the evaluation metrics for each dataset used as benchmark input.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Results</title>
    <sec id="Sec10">
      <title>Visual assessment and comparison of pipeline outputs</title>
      <p id="Par48">We used <italic>CytoPipeline</italic> to define both <italic>PeacoQC</italic> and <italic>flowAI</italic>-based pre-processing pipelines, as described in the Methods section, on the <italic>HBV chronic mouse</italic> dataset. We obtained results in the form of sets of data matrices (or <italic>flowFrames</italic>) after each step for each pre-processing pipeline. In the following paragraphs, we present some <italic>CytoPipeline</italic> visual assessment plots, according to 6 different use cases (Table <xref rid="Tab1" ref-type="table">1</xref>). Use case #1 consists in visualizing a run and monitoring the status of the different steps. Use cases #2 to #5 consist in either looking at ’what happened’ within a single pipeline for a single biological sample in isolation (use case #2), or comparing two different situations (flow frames) involving different pipelines (use cases #3 and #4), or involving different biological samples within the same pipeline (use case #5). Finally, use case #6 consists in assessing, and possibly modifying, the scale transformations obtained during a pipeline execution.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Use cases of visual assessment and comparison of pipeline outputs. When the use case involves comparing two <italic>flowFrames </italic>obtained from different steps and/or different pipelines (i.e. use cases #2 to #4), or different samples (i.e. use case #5) the 3 columns ’sample’, ’pipeline’ and ’output’ designate the initial <italic>flowFrame </italic>(referring to Fig. <xref rid="Fig2" ref-type="fig">2</xref>), while the 3 columns ’compared sample’, ’compared pipeline’ and ’compared output’ designate the <italic>flowFrame </italic>that is compared to the initial <italic>flowFrame</italic></p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Use case</th><th align="left">Description</th><th align="left">Sample</th><th align="left">Pipeline</th><th align="left">Output (cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>)</th><th align="left">Compared sample</th><th align="left">Compared pipeline</th><th align="left">Compared output (cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>)</th></tr></thead><tbody><tr><td align="left">#1</td><td align="left">Monitoring a run</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">All</td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td></tr><tr><td align="left">#2</td><td align="left">Visualizing the effect of a single pipeline step</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 2 (before ’compensate’)</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 3 (after ’compensate’)</td></tr><tr><td align="left">#3</td><td align="left">Comparing the outcome of a pipeline step with different parameter values</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 6 (after 'remove_debris'), run with 3 clusters</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 6 (after 'remove_debris'), run with 2 clusters</td></tr><tr><td align="left">#4</td><td align="left">Comparing two different methods for one or several step(s)</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells')</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>flowAI</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td></tr><tr><td align="left">#5</td><td align="left">Comparing two different biological samples</td><td align="left"><italic>D91_A01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td><td align="left"><italic>D93_B05</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Output 7 (after ’remove_dead_cells’)</td></tr><tr><td align="left">#6</td><td align="left">Visualization and update of generate scale transformations</td><td align="left"><italic>D91_G01</italic></td><td align="left"><italic>PeacoQC</italic></td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td><td align="left">Not applicable</td></tr></tbody></table></table-wrap></p>
      <sec id="Sec11">
        <title>Use case #1: monitoring a run</title>
        <p id="Par49">As all the intermediate results produced during pipeline execution are saved (see Methods/Implementation section), it is possible to generate a summary workflow view, consecutive to a run. Figure <xref rid="Fig3" ref-type="fig">3</xref> shows an example of such a display, obtained after running the <italic>flowAI</italic>-based pipeline described above, where there was a spelling error in one of the parameter names of the <italic>“remove_debris”</italic> step. On top of showing the sequence of steps, a colour code is used to highlight which of the steps have run to completion, and which of the steps need to be re-run. Here, for the selected sample, the pipeline ran correctly until the <italic>“remove_doublets”</italic> step (green nodes), but did not produce any output for the subsequent steps (orange nodes), which is due to the spelling error in the definition of the <italic>“remove_debris”</italic> step. Based on this summarized visual information, the user can now dig into the flagged problematic step, and/or track the particular characteristics of the sample which generated the error. More details on the colour code used in this plot can be found in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S2.<fig id="Fig3"><label>Fig. 3</label><caption><p>Use case #1: summary workflow view of the run - green nodes correspond to steps that ran to completion for the selected sample file, orange nodes correspond to steps that have not generated an output yet</p></caption><graphic xlink:href="12859_2024_5691_Fig3_HTML" id="MO3"/></fig></p>
      </sec>
      <sec id="Sec12">
        <title>Use case #2: visualizing the effect of a single pipeline step</title>
        <p id="Par50">In Fig. <xref rid="Fig4" ref-type="fig">4</xref>, the user is visually assessing two consecutive states of the <italic>flowFrame</italic> of sample <italic>D91_G01</italic>, within the same run of the <italic>PeacoQC</italic>-based pipeline. To evaluate the effect of the compensation step, the <italic>“before compensation”</italic> (output 2, cf. Fig. <xref rid="Fig2" ref-type="fig">2</xref>) and the <italic>“after compensation”</italic> (output 3) states of the pipeline are visually compared. Note that this visualization can be done according to any pair of selected channels/markers (2D distribution representation), or according to a 1D marginal distribution representation for any selected channel/marker. Here, the (CD8, CD38) 2D view shows, on the left, that the fluorescence of the dye BB700 (CD38) spills into the CD8 channel. On the right, application of a pre-computed compensation matrix (see Methods section) has rectified the distribution of the two markers, revealing different ranges of CD38 (an activation marker) between the CD8+ and CD8- populations. A corresponding screenshot of the interactive GUI application, implemented in the <italic>CytoPipelineGUI</italic> package, can be found in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S3.<fig id="Fig4"><label>Fig. 4</label><caption><p>Use case #2: effect of a single pipeline step - here, the compensation step of the <italic>PeacoQC</italic>-based pipeline for sample <italic>D91_G01</italic>. On the left, spillover of the BB700 (CD38) dye fluorescence into the CD8 channel creates a visual artefact, with events wrongly flagged as double positive CD8+ CD38+. On the right, compensation has rectified the bivariate distribution of the two markers</p></caption><graphic xlink:href="12859_2024_5691_Fig4_HTML" id="MO4"/></fig></p>
      </sec>
      <sec id="Sec13">
        <title>Use case #3: comparing the outcome of a pipeline step with different parameter values</title>
        <p id="Par51">This use case involves running the same pipeline, with the same steps but with amended values for one or several steps, in order to investigate which parameter combination performs better. An illustrating example is shown in Fig. <xref rid="Fig5" ref-type="fig">5</xref>, where the outcome of the debris removal step is compared when applying two different user input number of clusters (three on the left plot, vs. two on the middle plot). On the right plot, events coloured in red are the ones that are eliminated when applying the debris removal step when the number of clusters is two, but not eliminated when the number of clusters is three. Let us recall that the debris elimination step consists in clustering the events in a fixed number of clusters, followed by the elimination of the cluster nearest to the origin - see Methods section. Here, specifically, the user can conclude that the debris removal algorithm (based on <italic>flowClust</italic> package) does a better job selecting the target events when the appropriate number of target clusters is used, i.e. two clusters, as on the middle plot. This is because the cell population of interest, here a population of lymphocytes extracted from mice liver tissues, naturally groups into one single cluster in the (FSC-A, SSC-A) 2D representation. As a consequence, in this case, two is the optimal number of clusters (one cluster of debris, one cluster of lymphocytes). Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S4 illustrates the removal of events during the debris removal step, for the 2 clusters and the 3 clusters cases.<fig id="Fig5"><label>Fig. 5</label><caption><p>Use case #3: comparison of two different parameter settings for the debris removal step, on sample <italic>D91_G01</italic>. The setting with two clusters (in the middle) better eliminates undesirable events than the setting with three clusters (on the left). On the right, an explicit comparison between the two <italic>flowFrames</italic> is performed. Red dots correspond to events that are present on the left hand side plot, but not present on the middle plot, while blue dots correspond to events that are present on both plots</p></caption><graphic xlink:href="12859_2024_5691_Fig5_HTML" id="MO5"/></fig></p>
      </sec>
      <sec id="Sec14">
        <title>Use case #4: comparing two different methods for one or several steps</title>
        <p id="Par52">This use case is a generalization of the preceeding one, where the user wants to compare the performance of two different methods for one or several steps of the pre-processing pipeline. For instance, Fig. <xref rid="Fig6" ref-type="fig">6</xref> provides a comparison between the <italic>PeacoQC</italic>-based and the <italic>flowAI</italic>-based pipelines, applied on a particular biological sample of the <italic>HBV chronic mouse</italic> dataset. This comparison, obtained by plotting one specific channel (here the <italic>FSC-A</italic>) as a function of time, reveals that <italic>flowAI</italic> removes time chunks more aggressively than <italic>PeacoQC</italic>, for the current sample. Note that this comparison can also be done for any 2D combination of makers (not shown here).<fig id="Fig6"><label>Fig. 6</label><caption><p>Use case #4: comparison of the final state results, for sample <italic>D91_A01</italic>, between the <italic>PeacoQC</italic>-based pipeline and the <italic>flowAI</italic>-based pipeline - here using a (<italic>FSC-A</italic> vs. <italic>Time</italic>) plot. On the left, the end state of the <italic>PeacoQC</italic>-based pipeline is shown, while the end state of the <italic>flowAI</italic>-based pipeline is shown on the middle plot. On the right, an explicit comparison between the two <italic>flowFrames</italic> is performed. Red dots correspond to events that are present on the left hand side plot, but not present on the middle plot, while blue dots correspond to events that are present on both plots. This figure reveals that, for this particular sample, <italic>flowAI</italic> tends to remove time chunks more aggressively than <italic>PeacoQC</italic></p></caption><graphic xlink:href="12859_2024_5691_Fig6_HTML" id="MO6"/></fig></p>
      </sec>
      <sec id="Sec15">
        <title>Use case #5: comparing two different biological samples</title>
        <p id="Par53">It is also possible to compare two different biological samples of the same dataset, at any specific step of any pipeline. This allows e.g. to check that the methods used for the various pre-processing steps perform consistently across the whole dataset. One example is shown in Fig. <xref rid="Fig7" ref-type="fig">7</xref>, where two different samples are displayed in a 2D plot with the <italic>FSC-A</italic> and <italic>Live &amp;Dead</italic> channels. In this case, the two samples show very similar bivariate distributions. Based on this 2D representation, one could conclude that the pre-processing pipeline has correctly selected the target cell population in both cases. This would however need careful confirmation based on other 2D combinations of markers, e.g. <italic>FSC-H</italic> vs. <italic>FSC-A</italic> (for doublets elimination), and <italic>FSC-A</italic> vs. <italic>SSC-A</italic> (for debris elimination).<fig id="Fig7"><label>Fig. 7</label><caption><p>Use case #5: comparison of the final state results between two different biological samples (on the left: sample <italic>D91_A01</italic> and on the right: sample <italic>D93_B05</italic>), within the same <italic>PeacoQC</italic>-based pipeline. For the particular channels chosen (<italic>Live &amp;Dead</italic> vs. <italic>FSC-A</italic>), the two samples show very similar bivariate distributions. Based on this 2D representation, one could conclude that the pre-processing pipeline has correctly selected the target cell population in both cases</p></caption><graphic xlink:href="12859_2024_5691_Fig7_HTML" id="MO7"/></fig></p>
      </sec>
      <sec id="Sec16">
        <title>Use case #6: visualization and update of generated scale transformations</title>
        <p id="Par54">Besides the <italic>flowFrame</italic> comparison tool, <italic>CytoPipelineGUI</italic> also provides a second interactive GUI application, which is aimed at inspecting the scale transformations obtained from the corresponding <italic>scaleTransformProcessingSteps</italic> pipeline (see Methods/Implementation section). If the shape of the distribution after transformation needs adjustment (for example for better separation of negative and positive populations for a specific marker), the user can manually adapt the scale transformation parameters, interactively assess the impact of their modifications, and apply these modifications to the scale transformations for further use in the pre-processing pipelines (Fig. <xref rid="Fig8" ref-type="fig">8</xref>). These manual adjustments can be very useful, for example when the automatic transformation parameter adjustment algorithm has not worked satisfactorily. Figure <xref rid="Fig9" ref-type="fig">9</xref> shows an example where the <italic>logicle</italic> transformation [<xref ref-type="bibr" rid="CR31">31</xref>] applied on marker CD38 (left) shows spurious density oscillations in the negative domain. Manually adjusting the <italic>positive decimals</italic> parameter of the <italic>logicle</italic> transformation leads to a better looking density plot, where one can more easily distinguish CD38-, CD38+ and CD38++ populations.<fig id="Fig8"><label>Fig. 8</label><caption><p>Use case #6: screenshot of the <italic>CytoPipelineGUI</italic> interactive GUI application enabling the inspection, manual adjustment and save of pipeline generated scale transformations. Here the user is visualizing the transformation applied on marker CD38, for sample <italic>D91_G01</italic></p></caption><graphic xlink:href="12859_2024_5691_Fig8_HTML" id="MO8"/></fig><fig id="Fig9"><label>Fig. 9</label><caption><p>Manual parameters adjustment of the <italic>logicle</italic> transformation applied on marker CD38, for sample <italic>D91_G01</italic>. On the left, the density plot shows spurious oscillations in the negative domain. On the right, manual adjustment on the <italic>positive decimals</italic> parameter of the <italic>logicle</italic> transformation leads to a better looking transformed density, where one can more easily identify CD38-, CD38+ and CD38++ populations</p></caption><graphic xlink:href="12859_2024_5691_Fig9_HTML" id="MO9"/></fig></p>
      </sec>
    </sec>
    <sec id="Sec17">
      <title>Benchmarking results</title>
      <p id="Par55">As mentioned in the Methods section, we used <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>] to perform a benchmarking exercise, comparing two different pre-processing pipelines, i.e. the <italic>PeacoQC</italic>-based and the <italic>flowAI</italic>-based pipelines, on the 55 sample files of the <italic>HBV chronic mouse</italic> dataset, and calculating evaluation metrics in terms of how well the automated pipelines could match the manual pre-processing performed by an expert scientist (’ground truth’). A global assessment shows comparable results between the two competing pipelines, consistently across all metrics (Fig. <xref rid="Fig10" ref-type="fig">10</xref>). However, when directly contrasting sample by sample results (Fig. <xref rid="Fig11" ref-type="fig">11</xref>) one can identify that the pipeline performance is rather heterogeneous across the 55 biological samples.<fig id="Fig10"><label>Fig. 10</label><caption><p>Box plots of the distributions of calculated evaluation metrics per sample, for the two competing pipelines. Globally, both pipelines perform very similarly, for all four evaluation metrics, i.e. sensitivity, specificity, precision and recall</p></caption><graphic xlink:href="12859_2024_5691_Fig10_HTML" id="MO10"/></fig><fig id="Fig11"><label>Fig. 11</label><caption><p>Scatter plots comparing the two pre-processing pipelines, each dot representing one of the 55 samples. Three specific samples are highlighted in red, corresponding to very different comparative behaviour of the two competing pipelines. Sample <italic>D91_C07</italic> is a unique sample for which the <italic>flowAI</italic>-based pipeline has a high specificity, but the <italic>PeacoQC</italic>-based pipeline has very low specificity. Sample <italic>D93_A05</italic> is one of the samples leading to low specificity for both pipelines, while <italic>sample D91_D03</italic> is representative of the samples for which both pipelines provide good specificity</p></caption><graphic xlink:href="12859_2024_5691_Fig11_HTML" id="MO11"/></fig></p>
      <p id="Par56">In order to better understand the behaviour of the two competing automated pipelines on different samples, we selected three different samples, corresponding to different locations into the specificity plot of Fig. <xref rid="Fig11" ref-type="fig">11</xref>. We then used <italic>CytoPipelineGUI</italic> to inspect the results at different steps, for the two automated pipelines as well as for the ’ground truth’:<list list-type="bullet"><list-item><p id="Par57">Sample <italic>D91_C07</italic> was an outlier for which the <italic>PeacoQC</italic>-based pipeline obtained an almost zero specificity, while <italic>flowAI</italic>-based pipeline specificity was around an acceptable level of above 0.8. However, as shown in Fig. <xref rid="Fig12" ref-type="fig">12</xref>, this was not due to the different <italic>QC in time</italic> algorithm (<italic>PeacoQC</italic> vs. <italic>flowAI</italic>), but to a lack of robustness of the dead cells removal algorithm, leading to an interaction phenomenon by which almost all events were removed in the dead cell removal step of the <italic>PeacoQC</italic>-based pipeline.</p></list-item><list-item><p id="Par58">Sample <italic>D93_A05</italic> resulted in a very low specificity for both pipelines. Investigation using <italic>CytoPipelineGUI</italic> revealed that this sample was in fact one of the low quality samples wherein the interesting cell population was a small minority of the events, while there was a great abundance of debris and dead cells (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S5). As a consequence, both pipelines were unable to automatically select the correct cell population, regardless of the <italic>QC in time</italic> method used.</p></list-item><list-item><p id="Par59">Sample <italic>D91_D03</italic> was an example where both automatic pipelines performed adequately without major issues. Here, the difference in metrics is effectively related to the choice of <italic>QC in time</italic> method. Looking at a specific visualization where time is displayed on the x axis (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S6), and based on both qualitative plot inspection and number of events comparison with the manual gating ground truth, <italic>CytoPipelineGUI</italic> reveals that <italic>flowAI</italic> method is too agressive in this case, while <italic>PeacoQC</italic> is too liberal.</p></list-item></list><fig id="Fig12"><label>Fig. 12</label><caption><p>Comparison between the dead cells removal step between the <italic>flowAI</italic> pipeline (<bold>A</bold>), and the <italic>PeacoQC</italic>-based pipeline (<bold>B</bold>), on sample <italic>D91_C07</italic>. While the input set of events look very similar (left plots of panels <bold>A and B</bold>), the dead cells removal step of the <italic>PeacoQC</italic>-based pipeline (right plot of panel B) wrongly removes most of the events. This reveals a lack of robustness of the algorithm, unrelated to the <italic>QC in time</italic> method used (<italic>flowAI</italic> vs. <italic>PeacoQC</italic>)</p></caption><graphic xlink:href="12859_2024_5691_Fig12_HTML" id="MO12"/></fig></p>
      <p id="Par60">Note that the conclusions of these visual inspections are particularly precious to the scientist in charge of building the data analysis pipelines, who is now able to get precise and accurate insight into why one pipeline performs better than the other, for specific samples. In particular, they are much better equipped to distinguish between an intrinsic performance difference between some competing methods, and surprising artefacts like a side effect of low sample quality or an interaction between two different steps.</p>
    </sec>
  </sec>
  <sec id="Sec18">
    <title>Discussion</title>
    <sec id="Sec19">
      <title>CytoPipeline, a flexible framework for building and running pre-processing pipelines</title>
      <p id="Par61">In this work, we have demonstrated the use of the <italic>CytoPipeline</italic> suite by implementing pre-processing pipelines on the <italic>HBV chronic mouse</italic> dataset. The implementation of <italic>CytoPipeline</italic>, with a centralized specification of the pipeline definition in a <italic>json</italic> file, leads to a better design of the pipeline code. As a result, we believe that the user productivity, when coding and testing different pipelines, can be greatly improved.</p>
      <p id="Par62">In order to illustrate this, we implemented the two <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based competing pipelines, described in Methods, in two <italic>R</italic> scripts, without using <italic>CytoPipeline</italic> objects, and looked into the duplication effort as well as the future extensibility of the code. These pieces of code are provided in the <italic>2023-CytoPipeline-code</italic> GitHub repository (see Code Availability in Declarations section).</p>
      <p id="Par63">Figure <xref rid="Fig13" ref-type="fig">13</xref> provides a schematic comparison between these two pieces of code, as well as indicative number of code lines. Of course, these relates to one particular implementation, as there are countless ways to program the same pipelines. What is interesting to note, though, is that there is a high proportion of code duplication, but the differences are not only located in one single place, due to the subtle differences induced by the change of orders in the steps. This is likely to lead to a high code maintenance burden in the future, for instance when extending the program to many more pipeline instances, which can use different step methods, different method parameters etc. In constrast, let us recall that, when using <italic>CytoPipeline</italic>, the <italic>R</italic> code itself stays the same, as all differences are explicitly described in the input <italic>json</italic> file. This <italic>json</italic> file is easier to maintain and extend than the <italic>R</italic> scripts represented in Fig. <xref rid="Fig13" ref-type="fig">13</xref>.<fig id="Fig13"><label>Fig. 13</label><caption><p>Structure of the <italic>R</italic> script implementations of the <italic>PeacoQC</italic>-based and <italic>flowAI</italic>-based pipelines. The common parts are shown in white, <italic>PeacoQC</italic>-based pipeline specific parts in yellow, and <italic>flowAI</italic>-based pipeline specific parts in red. Between the two pipelines, 79% of the code is in common, and the pipeline specific parts are not fully gathered in one single location</p></caption><graphic xlink:href="12859_2024_5691_Fig13_HTML" id="MO13"/></fig></p>
    </sec>
    <sec id="Sec20">
      <title>CytoPipeline provides a standardized and user-friendly tool for visual investigations</title>
      <p id="Par64">We have presented a series of use cases of <italic>CytoPipeline</italic> visualizations. In all these use cases, we took advantage of the same set of visualization tools, in a standardized way, but translated into different contexts, whatever the underlying methods used for the pre-processing pipelines. Also during the investigation of the benchmarking results, visual comparisons could be made with a ground truth manual gating, again using the same tools. Besides, the interactive GUI applications, implemented in <italic>CytoPipelineGUI</italic>, provide user interactivity and facilitate the investigation process. As stated in the introduction, these visual assessments are extremely important for the scientists, as they provide a unique mean to:<list list-type="bullet"><list-item><p id="Par65">visually control for the quality of the data samples, and acquire insight on the corresponding sample variability;</p></list-item><list-item><p id="Par66">visually check the robustness of the methods used in a given pre-processing pipeline, including the adequacy of the chosen user input parameters;</p></list-item><list-item><p id="Par67">visually compare different pre-processing pipeline settings. This can range from comparing different possible choices of method for a particular step, to assessing which one of two or more competing pipelines, possibly mixing different step methods in different orders, is performing better for the considered dataset.</p></list-item></list></p>
    </sec>
    <sec id="Sec21">
      <title>CytoPipeline allows user intuitive insight into benchmarking results</title>
      <p id="Par68">As part of this work, we have implemented a benchmarking comparing two competing pre-processing pipelines, with the main objective of showing the benefits of using <italic>CytoPipeline</italic> visualization tools, as a complement to the benchmarking itself. We showed that detailed comparison plots help the user investigating some specific benchmarking results, hence getting better intuition into the benchmarking outcome. We have indeed demonstrated that there can be numerous reasons why a pipeline instance performs better than another on specific samples, and it is key for the scientist to get a clear view of these reasons, and their possible links with sample characteristics. Therefore, we think that <italic>CytoPipeline</italic> is a powerful tool for interpreting the outcome of benchmarking studies.</p>
    </sec>
    <sec id="Sec22">
      <title>Using the proportion of events kept at each step as a diagnostic tool</title>
      <p id="Par69">As was shown in various figures in the Results section (see e.g. Fig. <xref rid="Fig12" ref-type="fig">12</xref>), <italic>CytoPipelineGUI</italic> computes the number of events that are retained at each step (shown as subtitles in the individual density plots). Tracking these changes throughout the pre-processing steps of a pipeline for different samples is a useful quality control. This can be implemented using some of the <italic>CytoPipeline</italic> functions, and is shown on Fig. <xref rid="Fig14" ref-type="fig">14</xref>.<fig id="Fig14"><label>Fig. 14</label><caption><p>Plots showing the proportion of retained events at each pre-processing step, for each sample. On the left, the <italic>PeacoQC</italic>-based pipeline shows, for sample <italic>D91_C07</italic>, a sharp drop in the last <italic>remove_dead_cells</italic> step. On the right, the <italic>flowAI</italic>-based pipeline does not show the same phenomenon</p></caption><graphic xlink:href="12859_2024_5691_Fig14_HTML" id="MO14"/></fig></p>
    </sec>
    <sec id="Sec23">
      <title>Limitations and possible extensions of the work</title>
      <p id="Par70">The <italic>CytoPipeline</italic> suite of <italic>R</italic> packages can be positioned as a tool to facilitate the design, testing and comparison of pre-processing pipelines for the end user. It is not meant to be:<list list-type="bullet"><list-item><p id="Par71">A novel pre-processing pipeline in itself, as it does not provide new methods for the various pre-processing steps (although it includes some functions calling some widely used methods), nor an innovative way to combine some of these.</p></list-item><list-item><p id="Par72">A tool facilitating benchmarking automation, like <italic>pipeComp</italic>. For example, unlike <italic>pipeComp</italic> [<xref ref-type="bibr" rid="CR21">21</xref>], <italic>CytoPipeline</italic> does not provide any optimization solution to reduce the amount of CPU time and memory to run a potentially huge amount of (combinations of) possible pipelines. However, as mentioned before, <italic>CytoPipeline</italic> is used to facilitate the interpretation of results produced with benchmarking tools.</p></list-item></list>Regarding scalability, one should distinguish CPU and memory from hard drive storage requirements. CPU- and memory-wise, <italic>CytoPipeline</italic> has no particular issues when dealing with large number of samples, as long as each single fcs file can fully reside in memory. Indeed, as described in the Methods section, the engine that executes pre-processing pipelines supports both sequential and parallel file processing, and benefits from all multi-tasking scheduling options provided by the <italic>BiocParallel</italic> [<xref ref-type="bibr" rid="CR26">26</xref>] package. However, storage-wise, caching data at each step leads to large storage needs when processing many files. Typically, when analysing datasets including hundreds of fcs files, with several millions of events, compared across several pipelines and many processing steps, storage needs can require several terabytes. In those cases, users of <italic>CytoPipeline</italic> will typically need to call on high capacity storage facilities.</p>
      <p id="Par73">Another limitation of our work is the following: while <italic>CytoPipelineGUI</italic> is a powerful visualization tool for exploring specific pipeline steps for one or two samples, it does not provide an overall quality control of all samples at once. In that sense, it would be useful, especially for large datasets, to provide a global view of how samples differ at each pre-processing step. As mentioned above, one such diagnostic view can be obtained, by plotting the fraction of retained events at each pre-processing step (Fig. <xref rid="Fig14" ref-type="fig">14</xref>). Another promising approach focuses on the visualisation of all samples at once to identify specific outliers [<xref ref-type="bibr" rid="CR33">33</xref>].</p>
      <p id="Par74">Finally, another possible extension would be to further develop <italic>CytoPipeline</italic>, as to not only include the building and assessment of pre-processing steps, but also include support for subsequent steps of the data analysis: batch correction, population identification, etc.</p>
    </sec>
  </sec>
  <sec id="Sec24">
    <title>Conclusion</title>
    <p id="Par75">In this work, we have introduced a suite of <italic>R</italic> packages, <italic>CytoPipeline</italic> and <italic>CytoPipelineGUI</italic>, that helps building, visualizing and assessing pre-processing pipelines for flow cytometry data. We have demonstrated several use cases on a real life dataset, and highlighted several concrete benefits of these tools. For the new user, the packages come with ample documentation and tutorial videos, accessible through the package vignettes. We trust that using <italic>CytoPipeline</italic> will favour productivity in testing and assessing alternative data pre-processing pipelines, with the aim of designing good pre-processing and QC solutions for each particular context. The latter can be the specific type of biological sample, technology used (conventional flow cytometry, cytof, spectral flow cytometry), panel composition, experimental design etc., which in turn highly depend on the biological question at hand.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec25">
      <title>Supplementary Information</title>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2024_5691_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1.</bold> Supplementary tables, figures and pipeline configuration files.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par80">Note that <italic>CytoPipeline</italic> also provides methods to define a pipeline and its steps programmatically in <italic>R</italic>, without providing a text file as an input.</p>
    </fn>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>Conceptualization: PH, LG; Methodology: PH, LG, DL, SD; Software: PH, LG; Data collection: BB, MH; Writing - original draft: PH, BB; Writing - review &amp; editing: LG, DL, ST, SD, MH, MT; Supervision: LG, DL, ST, MT.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was funded by GlaxoSmithKline Biologicals S.A., under a cooperative research and development agreement between GlaxoSmithKline Biologicals S.A. and de Duve Institute (UCLouvain).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Raw flow cytometry data files, as well as the manual gating information considered as the ground truth for the benchmarking, are available on Zenodo (DOI:10.5281/zenodo.8425840).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>All code needed to reproduce the results presented in the current article is available on the following GitHub repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/UCLouvain-CBIO/2023-CytoPipeline-code">https://github.com/UCLouvain-CBIO/2023-CytoPipeline-code</ext-link>, of which a release has been archived on Zenodo (DOI:10.5281/zenodo.8425840).</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent to participate</title>
      <p id="Par76">Not applicable.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p id="Par77">Not applicable.</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par78">P.H. is a student at the de Duve Institute (UCLouvain) and participates in a post graduate studentship program at GSK; B.B. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; S.D. is employee of the GSK group of companies and reports ownership of GSK shares; M.H. is employee of the GSK group of companies; M.T. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; S.T. is employee of the GSK group of companies, reports ownership of GSK shares and is listed as inventor on patent(s) owned by the GSK group of companies; D.L. is employee of the GSK group of companies and reports ownership of GSK shares; L.G. reports no competing interest.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McKinnon</surname>
            <given-names>KM</given-names>
          </name>
        </person-group>
        <article-title>Flow cytometry: an overview</article-title>
        <source>Curr Protoc Immunol.</source>
        <year>2018</year>
        <volume>120</volume>
        <fpage>511</fpage>
        <lpage>5111</lpage>
        <pub-id pub-id-type="doi">10.1002/cpim.40</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lambrecht</surname>
            <given-names>BN</given-names>
          </name>
        </person-group>
        <article-title>Computational flow cytometry: helping to make sense of high-dimensional immunology data</article-title>
        <source>Nat Rev Immunol</source>
        <year>2016</year>
        <volume>16</volume>
        <issue>7</issue>
        <fpage>449</fpage>
        <lpage>462</lpage>
        <pub-id pub-id-type="doi">10.1038/nri.2016.56</pub-id>
        <?supplied-pmid 27320317?>
        <pub-id pub-id-type="pmid">27320317</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Couckuyt</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Emmaneel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Aerts</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Analyzing high-dimensional cytometry data using FlowSOM</article-title>
        <source>Nat Protoc</source>
        <year>2021</year>
        <volume>16</volume>
        <issue>8</issue>
        <fpage>3775</fpage>
        <lpage>3801</lpage>
        <pub-id pub-id-type="doi">10.1038/s41596-021-00550-0</pub-id>
        <?supplied-pmid 34172973?>
        <pub-id pub-id-type="pmid">34172973</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nowicka</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Krieg</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Crowell</surname>
            <given-names>HL</given-names>
          </name>
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Hartmann</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Guglietta</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>CyTOF workflow: differential discovery in high-throughput high-dimensional cytometry datasets</article-title>
        <source>F1000Res.</source>
        <year>2017</year>
        <volume>6</volume>
        <fpage>748</fpage>
        <pub-id pub-id-type="doi">10.12688/f1000research.11622.1</pub-id>
        <?supplied-pmid 28663787?>
        <pub-id pub-id-type="pmid">28663787</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <name>
            <surname>Marañón</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Data processing workflow for large-scale immune monitoring studies by mass cytometry</article-title>
        <source>Comput Struct Biotechnol J</source>
        <year>2021</year>
        <volume>19</volume>
        <fpage>3160</fpage>
        <lpage>3175</lpage>
        <pub-id pub-id-type="doi">10.1016/j.csbj.2021.05.032</pub-id>
        <?supplied-pmid 34141137?>
        <pub-id pub-id-type="pmid">34141137</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ashhurst</surname>
            <given-names>TM</given-names>
          </name>
          <name>
            <surname>Marsh-Wakefield</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Putri</surname>
            <given-names>GH</given-names>
          </name>
          <name>
            <surname>Spiteri</surname>
            <given-names>AG</given-names>
          </name>
          <name>
            <surname>Shinko</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Read</surname>
            <given-names>MN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integration, exploration, and analysis of high-dimensional single-cell cytometry data using Spectre</article-title>
        <source>Cytometry A</source>
        <year>2022</year>
        <volume>101</volume>
        <issue>3</issue>
        <fpage>237</fpage>
        <lpage>253</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24350</pub-id>
        <?supplied-pmid 33840138?>
        <pub-id pub-id-type="pmid">33840138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Martorell Marugán</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Saeys</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Protocol for large scale whole blood immune monitoring by mass cytometry and Cyto Quality Pipeline</article-title>
        <source>STAR Protoc.</source>
        <year>2022</year>
        <volume>3</volume>
        <issue>4</issue>
        <fpage>101697</fpage>
        <pub-id pub-id-type="doi">10.1016/j.xpro.2022.101697</pub-id>
        <?supplied-pmid 36353363?>
        <pub-id pub-id-type="pmid">36353363</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liechti</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Ashhurst</surname>
            <given-names>TM</given-names>
          </name>
          <name>
            <surname>Stanley</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Prlic</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>An updated guide for the perplexed: cytometry in the high-dimensional era</article-title>
        <source>Nat Immunol</source>
        <year>2021</year>
        <volume>22</volume>
        <issue>10</issue>
        <fpage>1190</fpage>
        <lpage>1197</lpage>
        <pub-id pub-id-type="doi">10.1038/s41590-021-01006-z</pub-id>
        <?supplied-pmid 34489590?>
        <pub-id pub-id-type="pmid">34489590</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mazza</surname>
            <given-names>EMC</given-names>
          </name>
          <name>
            <surname>Brummelman</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Alvisi</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Roberto</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>De Paoli</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Zanon</surname>
            <given-names>V</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Background fluorescence and spreading error are major contributors of variability in high-dimensional flow cytometry data visualization by t-distributed stochastic neighboring embedding</article-title>
        <source>Cytometry A</source>
        <year>2018</year>
        <volume>93</volume>
        <issue>8</issue>
        <fpage>785</fpage>
        <lpage>792</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23566</pub-id>
        <?supplied-pmid 30107099?>
        <pub-id pub-id-type="pmid">30107099</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Finak</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Perez</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Weng</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Optimizing transformations for automated, high throughput analysis of flow cytometry data</article-title>
        <source>BMC Bioinform</source>
        <year>2010</year>
        <volume>11</volume>
        <fpage>546</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-546</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Emmaneel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Quintelier</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Sichien</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Rybakowska</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Marañón</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Alarcón-Riquelme</surname>
            <given-names>ME</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PeacoQC: peak-based selection of high quality cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2022</year>
        <volume>101</volume>
        <issue>4</issue>
        <fpage>325</fpage>
        <lpage>338</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24501</pub-id>
        <?supplied-pmid 34549881?>
        <pub-id pub-id-type="pmid">34549881</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>den Braanker</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Bongenaar</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lubberts</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>How to prepare spectral flow cytometry datasets for high dimensional data analysis: a practical workflow</article-title>
        <source>Front Immunol</source>
        <year>2021</year>
        <volume>12</volume>
        <fpage>768113</fpage>
        <pub-id pub-id-type="doi">10.3389/fimmu.2021.768113</pub-id>
        <pub-id pub-id-type="pmid">34868024</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>VJ</given-names>
          </name>
          <name>
            <surname>Gentleman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Anders</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Carlson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Carvalho</surname>
            <given-names>BS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Orchestrating high-throughput genomic analysis with Bioconductor</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <issue>2</issue>
        <fpage>115</fpage>
        <lpage>121</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3252</pub-id>
        <?supplied-pmid 25633503?>
        <pub-id pub-id-type="pmid">25633503</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Monaco</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Poidinger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>de Magalhães</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Larbi</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>flowAI: automatic and interactive anomaly discerning tools for flow cytometry data</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>16</issue>
        <fpage>2473</fpage>
        <lpage>2480</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw191</pub-id>
        <?supplied-pmid 27153628?>
        <pub-id pub-id-type="pmid">27153628</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fletez-Brant</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Špidlen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Roederer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chattopadhyay</surname>
            <given-names>PK</given-names>
          </name>
        </person-group>
        <article-title>flowClean: automated identification and removal of fluorescence anomalies in flow cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>5</issue>
        <fpage>461</fpage>
        <lpage>471</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.22837</pub-id>
        <?supplied-pmid 26990501?>
        <pub-id pub-id-type="pmid">26990501</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Meskas</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Yokosawa</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Segat</surname>
            <given-names>GC</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
        </person-group>
        <article-title>flowCut: an R package for automated removal of outlier events and flagging of files based on time versus fluorescence analysis</article-title>
        <source>Cytometry A</source>
        <year>2023</year>
        <volume>103</volume>
        <issue>1</issue>
        <fpage>71</fpage>
        <lpage>81</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.24670</pub-id>
        <?supplied-pmid 35796000?>
        <pub-id pub-id-type="pmid">35796000</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Song</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>BY</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Yu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>GN</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A comparison framework and guideline of clustering methods for mass cytometry data</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>297</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1917-7</pub-id>
        <?supplied-pmid 31870419?>
        <pub-id pub-id-type="pmid">31870419</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weber</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>MD</given-names>
          </name>
        </person-group>
        <article-title>Comparison of clustering methods for high-dimensional single-cell flow and mass cytometry data</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>12</issue>
        <fpage>1084</fpage>
        <lpage>1096</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23030</pub-id>
        <?supplied-pmid 27992111?>
        <pub-id pub-id-type="pmid">27992111</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cheung</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Campbell</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>RJ</given-names>
          </name>
          <name>
            <surname>Braybrook</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Petzing</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Assessment of automated flow cytometry data analysis tools within cell and gene therapy manufacturing</article-title>
        <source>Int J Mol Sci</source>
        <year>2022</year>
        <volume>23</volume>
        <issue>6</issue>
        <fpage>3224</fpage>
        <pub-id pub-id-type="doi">10.3390/ijms23063224</pub-id>
        <?supplied-pmid 35328645?>
        <pub-id pub-id-type="pmid">35328645</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Aghaeepour</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Chattopadhyay</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chikina</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Dhaene</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Van Gassen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kursa</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A benchmark for evaluation of algorithms for identification of cellular correlates of clinical outcomes</article-title>
        <source>Cytometry A</source>
        <year>2016</year>
        <volume>89</volume>
        <issue>1</issue>
        <fpage>16</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.22732</pub-id>
        <?supplied-pmid 26447924?>
        <pub-id pub-id-type="pmid">26447924</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Germain</surname>
            <given-names>PL</given-names>
          </name>
          <name>
            <surname>Sonrel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>MD</given-names>
          </name>
        </person-group>
        <article-title>pipeComp, a general framework for the evaluation of computational pipelines, reveals performant single cell RNA-seq preprocessing tools</article-title>
        <source>Genome Biol</source>
        <year>2020</year>
        <volume>21</volume>
        <issue>1</issue>
        <fpage>227</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-020-02136-7</pub-id>
        <?supplied-pmid 32873325?>
        <pub-id pub-id-type="pmid">32873325</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Su</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Tian</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Dong</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Hickey</surname>
            <given-names>PF</given-names>
          </name>
          <name>
            <surname>Freytag</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ritchie</surname>
            <given-names>ME</given-names>
          </name>
        </person-group>
        <article-title>Cell Bench: R/Bioconductor software for comparing single-cell RNA-seq analysis methods</article-title>
        <source>Bioinformatics</source>
        <year>2020</year>
        <volume>36</volume>
        <issue>7</issue>
        <fpage>2288</fpage>
        <lpage>2290</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz889</pub-id>
        <?supplied-pmid 31778143?>
        <pub-id pub-id-type="pmid">31778143</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Selega A, Campbell KR.: Multi-objective Bayesian optimization with heuristic objectives for biomedical and molecular data analysis workflows. Preprint at <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/early/2022/06/12/2022.06.08.495370">https://www.biorxiv.org/content/early/2022/06/12/2022.06.08.495370</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Spidlen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Parks</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Goldberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bray</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Bierre</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Data file standard for flow cytometry, version FCS 3.1</article-title>
        <source>Cytometry A.</source>
        <year>2010</year>
        <volume>77</volume>
        <issue>1</issue>
        <fpage>97</fpage>
        <lpage>100</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.20825</pub-id>
        <?supplied-pmid 19937951?>
        <pub-id pub-id-type="pmid">19937951</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Pezoa F, Reutter JL, Suarez F, Ugarte M, Vrgoč D. Foundations of JSON schema. In: Proceedings of the 25th International Conference on World Wide Web. International World Wide Web Conferences Steering Committee; 2016. p. 263–273.</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">Morgan M, Wang J, Obenchain V, Lang M, Thompson R, Turaga N.: BiocParallel: Bioconductor facilities for parallel evaluation. R package version 1.34.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/BiocParallel">https://bioconductor.org/packages/BiocParallel</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Shepherd L, Morgan M.: BiocFileCache: Manage Files Across Sessions. R package version 2.8.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/BiocFileCache">https://bioconductor.org/packages/BiocFileCache</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Chang W, Cheng J, Allaire J, Sievert C, Schloerke B, Xie Y, et al.: shiny: Web Application Framework for R. Available from: <ext-link ext-link-type="uri" xlink:href="https://shiny.posit.co/">https://shiny.posit.co/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Ellis B, Haaland P, Hahne F, Le Meur N, Gopalakrishnan N, Spidlen J, et al.: flowCore: Basic structures for flow cytometry data. R package version 2.12.0. Available from: <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/flowCore">https://bioconductor.org/packages/flowCore</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lo</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Hahne</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Brinkman</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>flowClust: a Bioconductor package for automated gating of flow cytometry data</article-title>
        <source>BMC Bioinform</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>145</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-145</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Parks</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Roederer</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>WA</given-names>
          </name>
        </person-group>
        <article-title>A new “Logicle” display method avoids deceptive effects of logarithmic scaling for low signals and compensated data</article-title>
        <source>Cytometry A</source>
        <year>2006</year>
        <volume>69</volume>
        <issue>6</issue>
        <fpage>541</fpage>
        <lpage>551</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.20258</pub-id>
        <?supplied-pmid 16604519?>
        <pub-id pub-id-type="pmid">16604519</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Finak</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Gottardo</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>CytoML for cross-platform cytometry data sharing</article-title>
        <source>Cytometry A</source>
        <year>2018</year>
        <volume>93</volume>
        <issue>12</issue>
        <fpage>1189</fpage>
        <lpage>1196</lpage>
        <pub-id pub-id-type="doi">10.1002/cyto.a.23663</pub-id>
        <?supplied-pmid 30551257?>
        <pub-id pub-id-type="pmid">30551257</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Hauchamps P, Gatto L.: CytoMDS: Low Dimensions projection of cytometry samples. R package version 0.99.8. Available from: <ext-link ext-link-type="uri" xlink:href="https://uclouvain-cbio.github.io/CytoMDS">https://uclouvain-cbio.github.io/CytoMDS</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
