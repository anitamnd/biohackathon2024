<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8627104</article-id>
    <article-id pub-id-type="pmid">34837944</article-id>
    <article-id pub-id-type="publisher-id">4453</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-021-04453-5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Efficient iterative Hi-C scaffolder based on N-best neighbors</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Guan</surname>
          <given-names>Dengfeng</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>McCarthy</surname>
          <given-names>Shane A.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ning</surname>
          <given-names>Zemin</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Wang</surname>
          <given-names>Guohua</given-names>
        </name>
        <address>
          <email>ghwang@hit.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Wang</surname>
          <given-names>Yadong</given-names>
        </name>
        <address>
          <email>ydwang@hit.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Durbin</surname>
          <given-names>Richard</given-names>
        </name>
        <address>
          <email>rd109@cam.ac.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.19373.3f</institution-id><institution-id institution-id-type="ISNI">0000 0001 0193 3564</institution-id><institution>Center for Bioinformatics, </institution><institution>Harbin Institute of Technology, </institution></institution-wrap>Harbin, 150001 China </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.5335.0</institution-id><institution-id institution-id-type="ISNI">0000000121885934</institution-id><institution>Department of Genetics, </institution><institution>University of Cambridge, </institution></institution-wrap>Cambridge, CB2 3EH UK </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="GRID">grid.10306.34</institution-id><institution-id institution-id-type="ISNI">0000 0004 0606 5382</institution-id><institution>Wellcome Sanger Institute, </institution></institution-wrap>Wellcome Genome Campus, Cambridge, CB10 1SA UK </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="GRID">grid.9227.e</institution-id><institution-id institution-id-type="ISNI">0000000119573309</institution-id><institution>Institute of Zoology, </institution><institution>Chinese Academy of Sciences, </institution></institution-wrap>Beijing, 100101 China </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>27</day>
      <month>11</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>11</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <volume>22</volume>
    <elocation-id>569</elocation-id>
    <history>
      <date date-type="received">
        <day>2</day>
        <month>5</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>7</day>
        <month>9</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Â© The Author(s) 2021, corrected publication 2021</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Efficient and effective genome scaffolding tools are still in high demand for generating reference-quality assemblies. While long read data itself is unlikely to create a chromosome-scale assembly for most eukaryotic species, the inexpensive Hi-C sequencing technology, capable of capturing the chromosomal profile of a genome, is now widely used to complete the task. However, the existing Hi-C based scaffolding tools either require a priori chromosome number as input, or lack the ability to build highly continuous scaffolds.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">We design and develop a novel Hi-C based scaffolding tool, pin_hic, which takes advantage of contact information from Hi-C reads to construct a scaffolding graph iteratively based on N-best neighbors of contigs. Subsequent to scaffolding, it identifies potential misjoins and breaks them to keep the scaffolding accuracy. Through our tests on three long read based de novo assemblies from three different species, we demonstrate that pin_hic is more efficient than current standard state-of-art tools, and it can generate much more continuous scaffolds, while achieving a higher or comparable accuracy.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">Pin_hic is an efficient Hi-C based scaffolding tool, which can be useful for building chromosome-scale assemblies. As many sequencing projects have been launched in the recent years, we believe pin_hic has potential to be applied in these projects and makes a meaningful contribution.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-021-04453-5.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Hi-C</kwd>
      <kwd>Scaffolding</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100001809</institution-id>
            <institution>National Natural Science Foundation of China</institution>
          </institution-wrap>
        </funding-source>
        <award-id>2017YFC0907503</award-id>
        <award-id>2018YFC0910504</award-id>
        <award-id>2017YFC1201201</award-id>
        <principal-award-recipient>
          <name>
            <surname>Wang</surname>
            <given-names>Yadong</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100004440</institution-id>
            <institution>Wellcome Trust</institution>
          </institution-wrap>
        </funding-source>
        <award-id>WT207492</award-id>
        <principal-award-recipient>
          <name>
            <surname>Durbin</surname>
            <given-names>Richard</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>Â© The Author(s) 2021</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par4">Genome assembly is still one of the most essential problems in bioinformatics. For eukaryotic genomes, which are typically hundreds to thousands of Mb long, the only way to obtain their sequences is through assembling from millions of much shorter fragments. Recent development of sequencing technologies, including next generation sequencing (NGS) and single molecule long read sequencing, has enabled thousands of novel species to be sequenced [<xref ref-type="bibr" rid="CR1">1</xref>â<xref ref-type="bibr" rid="CR4">4</xref>].</p>
    <p id="Par5">The inexpensive and high throughput NGS technologies boosted the rate of de novo genome sequencing. Numerous important species were sequenced by using NGS. For example, the first giant panda genome was sequenced and assembled using NGS data with various insert sizes by the SOAPDenovo [<xref ref-type="bibr" rid="CR5">5</xref>] assembler in 2010 [<xref ref-type="bibr" rid="CR6">6</xref>], which achieved a 40Â kb contig N50 and an assembly size of 2.25Â Gb, covering 94% of the real genome. However due to the complexity of the sequence and the limited read size, NGS assembly usually yields highly fragmented contigs, which impedes further genomic studies.</p>
    <p id="Par6">The advent of long read sequencing technologies, such as PacBio Single Molecule Real-Time (SMRT) sequencing technology and Oxford Nanopore Technologies (ONT), is now revolutionizing genome assembly studies. These technologies, which give read length two orders of magnitude or much longer than NGS, are leading to unprecedentedly complete and continuous genome assemblies. Chin et al. published a PacBio long read based de novo assembler âFalcon-unzipâ for generating haplotype-phased assemblies [<xref ref-type="bibr" rid="CR1">1</xref>] in 2016, where they described how the assembler could produce an Arabidopsis thaliana primary assembly with 8Â Mb contig N50, which is about 8000 times larger than that of the SOAPDenovo assembly based on NGS reads.</p>
    <p id="Par7">Even though a long read based assembly itself can usually reach a megabase scale contig N50 [<xref ref-type="bibr" rid="CR7">7</xref>], this is still far from routinely assembling to chromosome scale. Large genome assembly projects, such as Vertebrate Genomes Project (VGP), strategically combine multiple long range sequencing data, such as PacBio sequencing data, linked reads data [<xref ref-type="bibr" rid="CR8">8</xref>], optical mapping data [<xref ref-type="bibr" rid="CR9">9</xref>] and Hi-C data to construct reliably chromosome-scale assemblies. Hi-C in particular is empowered to build chromosome-scale assemblies [<xref ref-type="bibr" rid="CR10">10</xref>, <xref ref-type="bibr" rid="CR11">11</xref>].</p>
    <p id="Par8">Hi-C sequencing technology is based on Chromosome Confirmation Capture technology, where fragments of DNA that are physically close are ligated with a labelled nucleotide at the ligation junction, enabling selective purification of chimeric DNA ligation junctions followed by deep sequencing [<xref ref-type="bibr" rid="CR12">12</xref>, <xref ref-type="bibr" rid="CR13">13</xref>]. Since sequences on the same chromosome tend to be in proximity, Hi-C interactions provide informative evidence for ordering and orienting contigs, making use of two properties: (1) the intra-chromosomal interaction frequency is significantly higher than the inter-chromosomal interaction frequency; (2) the intra-chromosomal interaction frequency decays with genomic distance [<xref ref-type="bibr" rid="CR10">10</xref>].</p>
    <p id="Par9">Several tools have been developed to achieve chromosome scale scaffolds based on Hi-C data in the last few years. DNATri [<xref ref-type="bibr" rid="CR14">14</xref>] and LACHESIS [<xref ref-type="bibr" rid="CR13">13</xref>] are perhaps the earliest tools using Hi-C reads for scaffolding. DNATri utilizes an average-linkage hierarchical clustering algorithm on a distance matrix derived from the contact matrix, to cluster and assemble the contigs. LACHESIS builds scaffolds through three steps: (1) Contig clustering: it tallies the number of links between contig pairs, and merges contigs using hierarchical agglomerative clustering until the cluster number is the same as a user-specified chromosome number; (2) contig ordering: it constructs a graph for each cluster, whose vertices are composed of the contigs and the edge weight is represented by the normalized link numbers. It then finds a âtrunkâ in the minimum spanning tree (MST) of this graph and adds vertices not belonging to the âtrunkâ back to it; (3) contig orienting: it builds a weighted directed acyclic graph (WDAG) for each direction of a contig, and determines the contig orientations by seeking the maximum weighted path in the WDAG. 3D-DNA [<xref ref-type="bibr" rid="CR11">11</xref>], SALSA1 [<xref ref-type="bibr" rid="CR15">15</xref>] and SALSA2 [<xref ref-type="bibr" rid="CR16">16</xref>] are three more recent tools. All these tools correct the input draft assembly before scaffolding. 3D-DNA applies the best neighbor strategy to assemble the contigs into one âmegascaffoldâ and then breaks it into a number of chromosomes. SALSA1 collects the link numbers between contig pairs and normalizes them by a count of enzyme cutting sites; it then orders and orients the contigs through building a directed acyclic graph (DAG) by processing the maximum weighted links iteratively. SALSA2 is an upgrade from SALSA1 that can process an input assembly graph. SALSA2 also uses the best neighbor strategy to select the best joining candidates and reduce inversion errors, and it can stop scaffolding iteration automatically.</p>
    <p id="Par10">Here, we present another Hi-C scaffolding approach and provide an implementation in the pin_hic software. Pin_hic uses N-best neighbor strategy to order and orient contigs and an iterative weighted linking approach to further elongate them, which we show can obtain chromosome-scale scaffolds without requiring to know the chromosome number. It also applies a robust method to diagnose misjoins regardless of scaffold length, which improves the scaffolding accuracy. Furthermore, to maintain the information of the scaffolding graph, we also proposed a new format âSATâ. In our experiments on three draft assemblies from three different species, pin_hic outperforms the state-of-art tool SALSA2 by up to 1.4 times in continuity while achieving higher or comparable accuracy, and up to 1.7 times in speed.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Overview</title>
      <p id="Par11">Given raw Hi-C reads, a draft assembly and a number of iterations, we generate chromosome-scale scaffolds with the following steps:<list list-type="bullet"><list-item><p id="Par12">Step 1. Map the Hi-C read pairs to the draft assembly independently.</p></list-item><list-item><p id="Par13">Step 2. Build a contact matrix counting the number of linking read pairs between contig ends based on the bam files, and the SAT file if it exists.</p></list-item><list-item><p id="Par14">Step 3. Construct a scaffolding graph based on N-best neighbors of contigs with the contact matrix, make joins, and output the results in âSATâ format.</p></list-item><list-item><p id="Par15">Step 4. Check if all iterations are finished, if so, go to Step 5, otherwise repeat Step 2 to 4 using the alignment files and the new SAT file output in the last step as inputs.</p></list-item><list-item><p id="Par16">Step 5. Search for misjoins in the final SAT file, break at any detected mis-joins, and output the final scaffold sequences.</p></list-item></list></p>
      <p id="Par17">The whole pipeline is illustrated in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1. Major steps are described in details in the following sections.</p>
    </sec>
    <sec id="Sec4">
      <title>Contact matrix calculation</title>
      <p id="Par18">Given raw Hi-C reads and a draft assembly, we first map the reads to the draft assembly with âbwa memâ using settings of â-SPâ to skip read pairing and mate pair rescue [<xref ref-type="bibr" rid="CR17">17</xref>], and a relatively large mismatch penalty 10 to seek more consistent target sequences.</p>
      <p id="Par19">Given the resulting alignment bam files and the current contigs (scaffolds in the next iteration), we then calculate the contact matrix with the following steps:<list list-type="bullet"><list-item><p id="Par20">Step 1. Each contig <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i$$\end{document}</tex-math><mml:math id="M2"><mml:mi>i</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq1.gif"/></alternatives></inline-formula> is split into three equal parts, the middle part is ignored in calculation, and the first and third part denoted as contig <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ih$$\end{document}</tex-math><mml:math id="M4"><mml:mrow><mml:mi mathvariant="italic">ih</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq2.gif"/></alternatives></inline-formula> and contig <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$it$$\end{document}</tex-math><mml:math id="M6"><mml:mrow><mml:mi mathvariant="italic">it</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq3.gif"/></alternatives></inline-formula> represents 5â and 3â ends of the contig respectively.</p></list-item><list-item><p id="Par21">Step 2. A list of tuples <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$t$$\end{document}</tex-math><mml:math id="M8"><mml:mi>t</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq4.gif"/></alternatives></inline-formula>
<inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(jy,c_{ix,jy})$$\end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mi>y</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mi>y</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq5.gif"/></alternatives></inline-formula> is initialised for each contig ix to record the number of linking read pairs (contact number) with contig <inline-formula id="IEq6"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$jy$$\end{document}</tex-math><mml:math id="M12"><mml:mrow><mml:mi mathvariant="italic">jy</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq6.gif"/></alternatives></inline-formula>, while <inline-formula id="IEq7"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$jy$$\end{document}</tex-math><mml:math id="M14"><mml:mrow><mml:mi mathvariant="italic">jy</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq7.gif"/></alternatives></inline-formula> is the contig index and <inline-formula id="IEq8"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$c_{ix,jy}$$\end{document}</tex-math><mml:math id="M16"><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mi>y</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq8.gif"/></alternatives></inline-formula> is the contact number.</p></list-item><list-item><p id="Par22">Step 3. All the read pairs in the bam files are evaluated, with a read pair contributing to the counts only if it satisfies the following three conditions:<list list-type="bullet"><list-item><p id="Par23">Both 5â² ends of a read pair are mapped to different contigs unambiguously without soft or hard clippings.</p></list-item><list-item><p id="Par24">Mapping qualities are no less than <inline-formula id="IEq9"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$q$$\end{document}</tex-math><mml:math id="M18"><mml:mi>q</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq9.gif"/></alternatives></inline-formula> (default: 10).</p></list-item><list-item><p id="Par25">Not a duplicated read pair.</p></list-item></list></p></list-item><list-item><p id="Par26">Step 4. All qualified read paris are tallied for contig <inline-formula id="IEq10"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ix$$\end{document}</tex-math><mml:math id="M20"><mml:mrow><mml:mi mathvariant="italic">ix</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq10.gif"/></alternatives></inline-formula> and contig <inline-formula id="IEq11"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$jy$$\end{document}</tex-math><mml:math id="M22"><mml:mrow><mml:mi mathvariant="italic">jy</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq11.gif"/></alternatives></inline-formula>, and the tuples are output as a contact matrix.</p></list-item></list></p>
      <p id="Par27">Here, pin_hic splits contigs into three equal parts, to reduce misjoins. This is different from other tools like SALSA2, LACHESIS, which split contigs into two halves and accumulate their arrangement evidence. Since in a regular case, more contacts will occur at the ends of the contigs, the unexpected contacts occurring in the middle of the contigs can lead to misjoins. Besides, unlike SALSA2 which generates an intermediate bed file during each iteration, pin_hic always uses the original bam file(s) as inputs which allows it to use much less disk space.</p>
      <p id="Par28">Normally, to produce more continuous scaffolds, users may need to perform this contact matrix calculation multiple times, they may expect to know the scaffolding graphs in each iteration as well. In such a case, pin_hic uses its own SAT format to record the scaffolding graph. Details of the SAT format, which is derived from the widely used âgraph fragment assemblyâ (GFA) format [<xref ref-type="bibr" rid="CR18">18</xref>] and was designed to carry more details of the graph than the traditional âAGPâ format, are described in the âSAT formatâ section. In each iteration, if the SAT file is used as an input, the paths (scaffolds) will be construct first and each original contig in the draft assembly will keep a record of its corresponding scaffold and their start positions on that scaffold, so that target positions in the bam files can be converted into positions in the scaffolds internally by pin_hic.</p>
    </sec>
    <sec id="Sec5">
      <title>Contact matrix normalization</title>
      <p id="Par29">After we obtain the contact matrix <inline-formula id="IEq12"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$M$$\end{document}</tex-math><mml:math id="M24"><mml:mi>M</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq12.gif"/></alternatives></inline-formula>, we normalize it with Eq.Â <xref rid="Equ1" ref-type="">1</xref> to remove the effects of noisy hits in long contigs.<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$nc= \frac{{c}_{ix,jy}}{{l}_{i}/3+{l}_{j}/3}$$\end{document}</tex-math><mml:math id="M26" display="block"><mml:mrow><mml:mi>n</mml:mi><mml:mi>c</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mi>y</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:msub><mml:mi>l</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">/</mml:mo><mml:mn>3</mml:mn><mml:mo>+</mml:mo><mml:msub><mml:mi>l</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">/</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:math><graphic xlink:href="12859_2021_4453_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula>where <inline-formula id="IEq13"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$l_{i}$$\end{document}</tex-math><mml:math id="M28"><mml:msub><mml:mi>l</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq13.gif"/></alternatives></inline-formula> and <inline-formula id="IEq14"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$l_{j}$$\end{document}</tex-math><mml:math id="M30"><mml:msub><mml:mi>l</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq14.gif"/></alternatives></inline-formula> are the length of contig <inline-formula id="IEq15"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i$$\end{document}</tex-math><mml:math id="M32"><mml:mi>i</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq15.gif"/></alternatives></inline-formula> and contig <inline-formula id="IEq16"><alternatives><tex-math id="M33">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$j$$\end{document}</tex-math><mml:math id="M34"><mml:mi>j</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq16.gif"/></alternatives></inline-formula> respectively. We also ignore contig pairs with contact number less than <inline-formula id="IEq17"><alternatives><tex-math id="M35">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$w$$\end{document}</tex-math><mml:math id="M36"><mml:mi>w</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq17.gif"/></alternatives></inline-formula> to avoid short contigs having fairly large normalized contact numbers. For a contig <inline-formula id="IEq18"><alternatives><tex-math id="M37">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ix$$\end{document}</tex-math><mml:math id="M38"><mml:mrow><mml:mi mathvariant="italic">ix</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq18.gif"/></alternatives></inline-formula>, we choose contig <inline-formula id="IEq19"><alternatives><tex-math id="M39">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$jy$$\end{document}</tex-math><mml:math id="M40"><mml:mrow><mml:mi mathvariant="italic">jy</mml:mi></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq19.gif"/></alternatives></inline-formula> with top <inline-formula id="IEq20"><alternatives><tex-math id="M41">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$N$$\end{document}</tex-math><mml:math id="M42"><mml:mi>N</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq20.gif"/></alternatives></inline-formula> normalized contact numbers as its N-best neighbors. Here, we use summation of contig lengths to reduce noises from long contigs, some other methods like LACHESIS also use multiplication of contig lengths as the denominator in Eq.Â <xref rid="Equ1" ref-type="">1</xref> for normalization. Based on our experiments, we showed that the former is more useful to decrease misjoins.</p>
    </sec>
    <sec id="Sec6">
      <title>Scaffolding graph construction</title>
      <p id="Par30">After normalization, we then construct a scaffolding graph through our N-best neighbor algorithm. The time complexity of the algorithm is <inline-formula id="IEq21"><alternatives><tex-math id="M43">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$O(|V | + |E|)$$\end{document}</tex-math><mml:math id="M44"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="false">|</mml:mo><mml:mo>+</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">|</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq21.gif"/></alternatives></inline-formula>, where <inline-formula id="IEq22"><alternatives><tex-math id="M45">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$|V |$$\end{document}</tex-math><mml:math id="M46"><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq22.gif"/></alternatives></inline-formula> represents the number of vertices, <inline-formula id="IEq23"><alternatives><tex-math id="M47">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$|E|$$\end{document}</tex-math><mml:math id="M48"><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq23.gif"/></alternatives></inline-formula> is the number of edges in the graph. The steps of the algorithm (Algorithm 1) are described as followed:<list list-type="bullet"><list-item><p id="Par31">Step 1. Define <inline-formula id="IEq24"><alternatives><tex-math id="M49">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$SG = (V, E)$$\end{document}</tex-math><mml:math id="M50"><mml:mrow><mml:mi>S</mml:mi><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq24.gif"/></alternatives></inline-formula> as an undirected graph, whose vertices are composed of the 5â² and 3â² ends of the contigs mentioned in the last section (Fig.Â <xref rid="Fig1" ref-type="fig">1</xref>a): one contig <inline-formula id="IEq25"><alternatives><tex-math id="M51">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i$$\end{document}</tex-math><mml:math id="M52"><mml:mi>i</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq25.gif"/></alternatives></inline-formula> generates two vertices <inline-formula id="IEq26"><alternatives><tex-math id="M53">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{ih}$$\end{document}</tex-math><mml:math id="M54"><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi mathvariant="italic">ih</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq26.gif"/></alternatives></inline-formula> and <inline-formula id="IEq27"><alternatives><tex-math id="M55">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{it}$$\end{document}</tex-math><mml:math id="M56"><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi mathvariant="italic">it</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq27.gif"/></alternatives></inline-formula>, where <inline-formula id="IEq28"><alternatives><tex-math id="M57">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{ih}$$\end{document}</tex-math><mml:math id="M58"><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi mathvariant="italic">ih</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq28.gif"/></alternatives></inline-formula> represents the 5â² of the contig and <inline-formula id="IEq29"><alternatives><tex-math id="M59">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{it}$$\end{document}</tex-math><mml:math id="M60"><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi mathvariant="italic">it</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq29.gif"/></alternatives></inline-formula> the 3â².</p></list-item><list-item><p id="Par32">Step 2. Create edges <inline-formula id="IEq30"><alternatives><tex-math id="M61">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$E$$\end{document}</tex-math><mml:math id="M62"><mml:mi>E</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq30.gif"/></alternatives></inline-formula> based on the matrix <inline-formula id="IEq31"><alternatives><tex-math id="M63">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$M$$\end{document}</tex-math><mml:math id="M64"><mml:mi>M</mml:mi></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq31.gif"/></alternatives></inline-formula>. An edge exists between <inline-formula id="IEq32"><alternatives><tex-math id="M65">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{ia}$$\end{document}</tex-math><mml:math id="M66"><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi mathvariant="italic">ia</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq32.gif"/></alternatives></inline-formula> and <inline-formula id="IEq33"><alternatives><tex-math id="M67">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{jb}$$\end{document}</tex-math><mml:math id="M68"><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:mi mathvariant="italic">jb</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq33.gif"/></alternatives></inline-formula>, if and only if <inline-formula id="IEq34"><alternatives><tex-math id="M69">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{i}$$\end{document}</tex-math><mml:math id="M70"><mml:msub><mml:mi>V</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq34.gif"/></alternatives></inline-formula> is among the N-best neighbors (default: 3) of <inline-formula id="IEq35"><alternatives><tex-math id="M71">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{j}$$\end{document}</tex-math><mml:math id="M72"><mml:msub><mml:mi>V</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2021_4453_Article_IEq35.gif"/></alternatives></inline-formula> and vice versa.</p></list-item><list-item><p id="Par33">Step 3. Perform a pruning process so that there is at most one edge per vertex, by only keeping the edge with unique maximum weight. If two or more edges have the same maximum weight, all edges linked to the vertex are removed.</p></list-item><list-item><p id="Par34">Step 4. Add edges between the 5â and 3â vertex of each contig, and traverse the graph to find all the components, which are scaffolds. If there is a loop in the scaffolding graph, we choose an arbitrary vertex as the beginning and its predecessor as the end. At last, we output all the vertices, edges, paths and other information about the scaffolding graph, such as the weight between a contig pair, into a SAT file.</p></list-item></list><fig id="Fig1"><label>Fig. 1</label><caption><p>Scaffolding graph and SAT format example. <bold>a</bold> AÂ scaffolding graph. The graph containing 22 vertices and 9 edges is formed by 11 contigs, each contig is split into two vertices, the text below each hexagon is the contig name. Numbers along with the edges are normalized weights, and the grey edges are removed by the pruning process. <bold>b</bold> AÂ SAT example. All the contigs are represented as sequences (âSâ) in the SAT file, edges are defined as links and tagged as âLâ, three scaffolds obtained from <bold>a</bold> are labelled as paths (âPâ) and three scaffolds are gathered in the assembly set tagged as âAâ, and current assembly is tagged as âCâ</p></caption><graphic xlink:href="12859_2021_4453_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par35">FigureÂ <xref rid="Fig1" ref-type="fig">1</xref> gives an example in which there are 22 vertices and 9 edges in the graph. After pruning, all the grey edges are deleted and only five red edges remain. There are 6 paths in the graph, 3 of them formed by a single contig, 1 cyclic path is built by contig 11F, 13F and 19F, two acyclic paths are formed by contig 01F, 04F, 06F and 03F, 07F respectively.<graphic position="anchor" xlink:href="12859_2021_4453_Figa_HTML" id="MO2"/></p>
    </sec>
    <sec id="Sec7">
      <title>Misjoin detection</title>
      <p id="Par36">Even though we normalize edge weights by contig lengths, a large scaffold, especially a complete chromosome, based on our observations, is prone to be misjoined with other chromosomes (Fig.Â <xref rid="Fig4" ref-type="fig">4</xref>a). To resolve this problem, we employ an extra step after scaffolding to make breaks at the potential misjoins.</p>
      <p id="Par37">During the procedure, we take the bam files and the final scaffolding SAT file as inputs, and obtain scaffolds and their corresponding contigs from the SAT file. We gather read pairs which meet the following requirements:<list list-type="bullet"><list-item><p id="Par38">Both 5' ends of a read pair are mapped to the same contig or adjacent contigs in the same scaffold unambiguously without soft or hard clippings.</p></list-item><list-item><p id="Par39">Mapping qualities are no less than q (default: 10).</p></list-item><list-item><p id="Par40">Not a duplicated read pair.</p></list-item></list></p>
      <p id="Par41">We then use these read pairs to calculate the physical spanning coverage for each base, and collect maximum coverage for each contig and each join between adjacent contigs. We then break at the joins whose maximum coverage is less than p% (default 30%) of that of each of their neighboring contigs. This method is based on the assumption that misjoins between contigs tend to have many fewer spanning read pairs than equivalent regions within the contigs themselves.</p>
    </sec>
    <sec id="Sec8">
      <title>SAT format</title>
      <p id="Par42">To retain the scaffolding graph information and employ the information in further process, we define a new file format called âSATâ format, which is inspired by the âGFAâ format and extended to keep scaffolding information.</p>
      <p id="Par43">We use the âSâ tag to represent the contigs with the second field after âSâ being the contig ID, the third field the contig length, and forth optional field for contig sequence.</p>
      <p id="Par44">We use âLâ to represent edges, with a plus or minus sign to represent the 5' and 3' ends of the contig respectively, and we also add a tag âwtâ to record the edge weight.</p>
      <p id="Par45">We use âPâ to represent a path (scaffold), with the second field of âPâ being the scaffold ID, the third the scaffold length, and the fourth being the components of the scaffold.</p>
      <p id="Par46">Then we add further tags âAâ to represent the set of scaffolds and âCâ to represent the current scaffold set. These tags support the iterative usage of the file.</p>
      <p id="Par47">FigureÂ <xref rid="Fig1" ref-type="fig">1</xref> gives a simple example of SAT format. To facilitate our users, we have supplied a tool called âsatoolâ (<ext-link ext-link-type="uri" xlink:href="https://github.com/dfguan/satool">https://github.com/dfguan/satool</ext-link>) to visualize and convert SAT format to the AGP format used by NCBI and others to represent chromosomal scaffolds.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Results</title>
    <p id="Par48">To assess the performance of pin_hic, we conducted three experiments on three different VGP assemblies, and compared our results with the state-of-art scaffolding tool SALSA2 and 3D-DNA. The benchmarks include computational resource consumption, scaffolds continuity and correctness, since 3D-DNA implements parallelization internally, we ignored its consumption of computational resource.</p>
    <p id="Par49">Both SALSA2 and pin_hic were run in default mode on a LSF HPC cluster. SALSA2 read alignment and filtering were done by the recommended Arima mapping pipeline, pin_hic used the alignments directly from bwa and filtered the read pairs internally. The CPU runtime and peak memory for scaffolding are collected by the LSF platform.</p>
    <sec id="Sec10">
      <title>Assembly collection</title>
      <p id="Par50">We collected three VGP assemblies, which were all built at chromosome scale, including an <italic>Anabas testudineus</italic> (common name: climbing fish, At for short) assembly, a <italic>Takifugu rubripes</italic> (common name: Tiger puffer, Tr for short), and a <italic>Calypte anna</italic> (common name: Annaâs hummingbird, Ca for short). All assemblies were split at each run of Ns to get the original contigs. Assembly metrics for each species is listed in Table <xref rid="Tab1" ref-type="table">1</xref>.<table-wrap id="Tab1"><label>Table 1</label><caption><p>The statistic of genome assembly metrics</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left">NCBI Assembly ID</th><th align="left">Genome size (Mb)</th><th align="left"># Scaffold</th><th align="left">Scaffold N50 (Mb)</th><th align="left"># Contig</th><th align="left">Contig N50 (Mb)</th><th align="left">BUSCO complete genes (%)</th></tr></thead><tbody><tr><td align="left">At</td><td align="left">GCA_900324465.2</td><td char="." align="char">556</td><td char="." align="char">50</td><td char="." align="char">25.06</td><td char="." align="char">316</td><td char="." align="char">7.06</td><td char="." align="char">97.5</td></tr><tr><td align="left">Tr</td><td align="left">GCF_901000725.2</td><td char="." align="char">384</td><td char="." align="char">128</td><td char="." align="char">16.71</td><td char="." align="char">530</td><td char="." align="char">3.14</td><td char="." align="char">96.6</td></tr><tr><td align="left">Ca</td><td align="left">GCA_003957555.2</td><td char="." align="char">1060</td><td char="." align="char">159</td><td char="." align="char">74.08</td><td char="." align="char">586</td><td char="." align="char">14.52</td><td char="." align="char">93.9</td></tr></tbody></table></table-wrap></p>
      <p id="Par51">For At, we used the fAnaTes1.2 assembly with a scaffold N50 of 25.06Â Mb, containing 316 contigs with 7.06Â Mb contig N50. The Tr assembly has a scaffold N50 of 16.71Â Mb, having 530 contigs with 3.14Â Mb contig N50; Ca assembly has a scaffold N50 of 74.08Â Mb, after removing two contigs less than 1Â kb, it has 586 contigs and contig N50 of 14.52Â Mb.</p>
      <p id="Par52">The split At, Tr and Ca assemblies have 97.5%, 96.6% and 93.9% complete genes count using BUSCO [<xref ref-type="bibr" rid="CR19">19</xref>] analysis, showing all the contigs having a high completeness. Below we use Ats to refer to the split At assembly, Trs for the split Tr assembly, and Cas for the split Ca assembly.</p>
    </sec>
    <sec id="Sec11">
      <title>Hi-C reads collection and preprocessing</title>
      <p id="Par53">As is displayed in Table <xref rid="Tab2" ref-type="table">2</xref>, we collected 341Â M, 128Â M and 515Â M Hi-C read pairs for At, Tr and Ca respectively, which were all sequenced in Arima Genomics, using MboI and HinfI enzyme. Before scaffolding, we mapped all Hi-C read pairs to the contigs, and preprocessed the Hi-C reads with recommended Arima mapping pipeline (<ext-link ext-link-type="uri" xlink:href="https://github.com/ArimaGenomics/mapping_pipeline">https://github.com/ArimaGenomics/mapping_pipeline</ext-link>) for SALSA2.<table-wrap id="Tab2"><label>Table 2</label><caption><p>The statistic of Hi-C reads alignment results</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left"># Read pairs (M)</th><th align="left"># Intra-contig read pairs (M)</th><th align="left"># Inter-contig read pairs (M)</th></tr></thead><tbody><tr><td align="left">Ats</td><td char="." align="char">341</td><td char="." align="char">155</td><td char="." align="char">85</td></tr><tr><td align="left">Trs</td><td char="." align="char">128</td><td char="." align="char">52</td><td char="." align="char">32</td></tr><tr><td align="left">Cas</td><td char="." align="char">515</td><td char="." align="char">193</td><td char="." align="char">198</td></tr></tbody></table></table-wrap></p>
      <p id="Par54">After mapping, we performed a statistic on read pairs aligned intra and inter contigs. As is shown in Table <xref rid="Tab2" ref-type="table">2</xref>, all split assemblies have over 25% mapped to inter contigs, which can be used for scaffolding. Ca has most inter-contig read pairs, although Tr has only 128Â M Hi-C read pairs, it still has 32Â M inter-contig read pairs for scaffolding.</p>
    </sec>
    <sec id="Sec12">
      <title>Scaffolding results evaluation</title>
      <p id="Par55">The scaffolding results are shown in Table <xref rid="Tab3" ref-type="table">3</xref>, in which theÂ best results are highlighted in bold. In the experiments, bothÂ SALSA2Â and 3D-DNA were run in default settings without error correction before scaffolding. Pin_hic was run in default settings which uses three iterations, summation normalization and three-part split method. We assessed their accuracy using QUAST-LG [<xref ref-type="bibr" rid="CR20">20</xref>] with the chromosome-scale assemblies mentioned in the last section.<table-wrap id="Tab3"><label>Table 3</label><caption><p>The scaffolding results of primary contigs from three species</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left"># sequence</th><th align="left">Largest (Mb)</th><th align="left">NG50 (Mb)</th><th align="left">NGA50 (Mb)</th><th align="left">Reloc</th><th align="left">Inv</th><th align="left">Tran</th><th align="left">RAM (GB)</th><th align="left">Runtime (CPU hrs)</th></tr></thead><tbody><tr><td align="left">Ats-org<sup>1</sup></td><td align="left">316</td><td char="." align="char">16.97</td><td char="." align="char">7.06</td><td char="." align="char">â</td><td align="left">â</td><td align="left">â</td><td align="left">â</td><td char="." align="char">â</td><td char="." align="char">â</td></tr><tr><td align="left">Ats-phc<sup>2</sup></td><td align="left">93</td><td char="." align="char">34.17</td><td char="." align="char">24.11</td><td char="." align="char">17.83</td><td align="left">67</td><td align="left"><bold>10</bold></td><td align="left"><bold>0</bold></td><td char="." align="char">2.94</td><td char="." align="char"><bold>1.62</bold></td></tr><tr><td align="left">Ats-sal<sup>3</sup></td><td align="left">124</td><td char="." align="char">28.24</td><td char="." align="char">20.93</td><td char="." align="char">12.47</td><td align="left"><bold>64</bold></td><td align="left">18</td><td align="left"><bold>0</bold></td><td char="." align="char"><bold>2.22</bold></td><td char="." align="char">1.80</td></tr><tr><td align="left">Ats-3d<sup>4</sup></td><td align="left">95</td><td char="." align="char"><bold>232.83</bold></td><td char="." align="char"><bold>131.30</bold></td><td char="." align="char"><bold>18.81</bold></td><td align="left">85</td><td align="left">19</td><td align="left">39</td><td char="." align="char">â</td><td char="." align="char">â</td></tr><tr><td align="left">Trs-org</td><td align="left">530</td><td char="." align="char">13.38</td><td char="." align="char">3.28</td><td char="." align="char">â</td><td align="left">â</td><td align="left">â</td><td align="left">â</td><td char="." align="char">â</td><td char="." align="char">â</td></tr><tr><td align="left">Trs-phc</td><td align="left">267</td><td char="." align="char">28.10</td><td char="." align="char">15.75</td><td char="." align="char"><bold>9.32</bold></td><td align="left"><bold>62</bold></td><td align="left"><bold>13</bold></td><td align="left"><bold>9</bold></td><td char="." align="char"><bold>0.98</bold></td><td char="." align="char"><bold>0.78</bold></td></tr><tr><td align="left">Trs-sal</td><td align="left">273</td><td char="." align="char">26.82</td><td char="." align="char">11.11</td><td char="." align="char">5.85</td><td align="left">82</td><td align="left">16</td><td align="left">10</td><td char="." align="char">1.44</td><td char="." align="char">1.08</td></tr><tr><td align="left">Trs-3d</td><td align="left">653</td><td char="." align="char"><bold>28.63</bold></td><td char="." align="char"><bold>16.81</bold></td><td char="." align="char">6.00</td><td align="left">286</td><td align="left">35</td><td align="left">108</td><td char="." align="char">â</td><td char="." align="char">â</td></tr><tr><td align="left">Cas-org</td><td align="left">586</td><td char="." align="char">48.75</td><td char="." align="char">14.52</td><td char="." align="char">â</td><td align="left">â</td><td align="left">â</td><td align="left">â</td><td char="." align="char">â</td><td char="." align="char">â</td></tr><tr><td align="left">Cas-phc</td><td align="left">242</td><td char="." align="char"><bold>184.75</bold></td><td char="." align="char">44.74</td><td char="." align="char">28.65</td><td align="left">106</td><td align="left"><bold>9</bold></td><td align="left">12</td><td char="." align="char"><bold>4.54</bold></td><td char="." align="char"><bold>2.43</bold></td></tr><tr><td align="left">Cas-sal</td><td align="left">299</td><td char="." align="char">179.32</td><td char="." align="char">35.40</td><td char="." align="char">22.55</td><td align="left"><bold>85</bold></td><td align="left">12</td><td align="left"><bold>6</bold></td><td char="." align="char">4.74</td><td char="." align="char">4.02</td></tr><tr><td align="left">Cas-3d</td><td align="left">14</td><td char="." align="char">84.57</td><td char="." align="char"><bold>84.57</bold></td><td char="." align="char"><bold>35.40</bold></td><td align="left">196</td><td align="left">24</td><td align="left">113</td><td char="." align="char">â</td><td char="." align="char">â</td></tr></tbody></table><table-wrap-foot><p>The best results are highlighted in bold</p><p><sup>1</sup>Original primary contigs</p><p><sup>2</sup>pin_hic scaffolding result</p><p><sup>3</sup>SALSA2 scaffolding result</p><p><sup>4</sup>3D-DNA scaffolding result</p></table-wrap-foot></table-wrap></p>
      <sec id="Sec13">
        <title>Memory consumption and speed</title>
        <p id="Par56">As is shown in Table <xref rid="Tab3" ref-type="table">3</xref>, pin_hic is more efficient than SALSA2, its speed is around 11%â65% faster than that of SALSA2. And it consumes less memory for all the cases except Ats scaffolding, in which it still has a comparable memory consumption.</p>
      </sec>
      <sec id="Sec14">
        <title>Scaffold continuity</title>
        <p id="Par57">As is shown in Table <xref rid="Tab3" ref-type="table">3</xref>, 3D-DNA owns the largest scaffolds and NG50s for all the species, except for Cas where pin_hic is the winner of the largest scaffold, indicating its capacity of generating more continuous than the other tools. However, its largest scaffold of Ats is about 7 times larger than that of the reference assembly, which implies misjoins in the scaffold. By contrast, both pin_hic and SALSA2 have obtained the largest scaffolds with proper lengths, especially for pin_hic, the largest 34.17Â Mb scaffold is consistent with the VGP curated assembly, which shows its ability in producing correct scaffolds. For pin_hic, all NG50s are improved by at least 3 times than those of the original assemblies, the scaffold NG50 of Trs is improved by 4.8 times.</p>
        <p id="Par58">NGA50, reflecting both scaffolding correctness and continuity, is another important measurement for scaffold evaluation. Both 3D-DNA and pin_hic have larger NGA50s than that of SALSA2s. However, 3D-DNA achieves a higher NGA50 with a cost of scaffolding accuracy, which we will discuss in the following section. The NGA50s of pin_hic are at least 27% larger than those of SALSA2, and 59% larger than SALSA2 on Trs scaffolds, which indicates pin_hic can generate highly accurate assembly.</p>
      </sec>
      <sec id="Sec15">
        <title>Scaffold correctness</title>
        <p id="Par59">As is shown in Table <xref rid="Tab3" ref-type="table">3</xref>, pin_hic has less misjoins than SALSA2 on Ats and Trs scaffolds, and has 24 more misjoins than SALSA2 on Cas scaffolds. Through analyzing standard deviation (SD) on Cas contig lengths, we discovered the misjoin number may be proportional to SD, a larger SD is prone to lead to more misjoins in pin_hic scaffolds. Both SALSA2 and pin_hic has majority of relocation errors, taking at least 74% of all their misjoins. 3D-DNA has most misjoins, especially it contains much more translocation error than the other tools, which needs further manual correction as it is designed.</p>
        <p id="Par60">To further validate the correctness of the scaffolds, we made circos plots to display the consistency between the scaffolds and the reference genomes by using Jupiterplot [<xref ref-type="bibr" rid="CR21">21</xref>]. The plots of Ats scaffolds are shown in Fig.Â <xref rid="Fig2" ref-type="fig">2</xref>. In these figures, scaffolds consisting of 90% of the reference genome size, are selected to map to the VGP fAnaTes1.2 assembly, the chromosomes of the assemblyÂ are displayed on the left side and the scaffolds on the right, the interrupting ribbons are the visible mis-assemblies. 3D-DNA contains numbers of misjoins which requires further manual curation. As for SALSA2, although no translocation occurs, there are at least 5 visible relocations within its scaffolds, while no apparent mis-assemblies are observed in pin_hic scaffolds, which implies its higher accuracy than SALSA2 in the Ats scaffolds. Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figs. S4, S5 showing Cas and Trs circos plots indicating the similar situations.<fig id="Fig2"><label>Fig. 2</label><caption><p>Scaffolds consistency plots of Ats scaffolds. <bold>a</bold> Pin_hic scaffolds, <bold>b</bold> SALSA2 scaffolds and <bold>c</bold> 3D-DNA scaffolds. The largest 21, 27 and 4 scaffolds from pin_hic, SALSA2 and 3D-DNA scaffolds, consisting of 90% (NG90) of the genome, are aligned to the VGP fAnaTes1.2 assembly. The chromosomes are displayed incrementally from 1 to 23 on the left side and the scaffolds are located on the right side of the ring. Connections show aligned regions over 10Â kb. Large-scale mis-assemblies are visible as interrupting ribbons. Pin_hic scaffoldings are neat, no clear misjoins are found, while SALSA2 scaffolds contain about 5 relocations, and 3D-DNA scaffolds contain numerous misjoins</p></caption><graphic xlink:href="12859_2021_4453_Fig2_HTML" id="MO4"/></fig></p>
      </sec>
    </sec>
    <sec id="Sec16">
      <title>Misjoin detection evaluation</title>
      <p id="Par61">The final step in pin_hic scaffolding process is misjoin detection, to prove efficacy of the method, we mapped the scaffolds onto their reference genomes, and made the dotplots based on the alignment results by a public Dotplot tool (<ext-link ext-link-type="uri" xlink:href="https://github.com/dnanexus/dot">https://github.com/dnanexus/dot</ext-link>). As is demonstrated in Fig.Â <xref rid="Fig3" ref-type="fig">3</xref>, where the Ats scaffolds were mapped to its reference genome. Before misjoin detection, it contains several misjoins, a few independent chromosomes are chained together. For example, the scaffold âu000000232â is made up of five complete chromosomes. After misjoin detection, all the visible misjoined contigs are separated, the scaffolds is aligned consistently to the reference, which proves robustness of the misjoin detection method. We observed same situations for Trs and Cas scaffolds in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figs. S2, S3.<fig id="Fig3"><label>Fig. 3</label><caption><p>Alignment dotplots for pin_hic Ats scaffolds before and after mis-join detection. <bold>a</bold> pin_hic scaffolds alignment before misjoin detection and <bold>b</bold> pin_hic scaffolds alignment after misjoin detection. Both scaffolds are aligned to the VGP fAnaTes1.2 reference genome. Before misjoin detection, several chromosome-scale scaffolds are concatenated together, after the process, all the large misjoined scaffolds are corrected, the scaffolds are aligned to the reference genome more consistently</p></caption><graphic xlink:href="12859_2021_4453_Fig3_HTML" id="MO5"/></fig></p>
      <p id="Par62">In Fig.Â <xref rid="Fig4" ref-type="fig">4</xref>, we give an example to explain the details of the misjoin identification method. We extracted the scaffold âu000000232â from the Ats scaffolds before misjoin detection, which is composed of 43 contigs and 121Â Mb long, and made a heatmap using HiGlass [<xref ref-type="bibr" rid="CR22">22</xref>] based on the read pairs map to this scaffold and a coverage plot. As is illustrated in Fig.Â <xref rid="Fig4" ref-type="fig">4</xref>, the HiGlass heatmap implies five independent chromosomes were joined together, meanwhile the physical coverage plot shows fairly low local minima at the misjoins. The program made 4 breaks (red crosses in the coverage plot) in the scaffolds, and separated the scaffold into six scaffolds correctly, which proves the method can work properly to find the misjoins. The other low-coverage joins caused by missing or short sequences are not broken.<fig id="Fig4"><label>Fig. 4</label><caption><p>Misjoin detection on a Ats scaffold. <bold>a</bold> HiGlass heatmap of âu000000232â in Ats scaffolds. The five independent blocks showing no evidence to be joined together were put together due to noises. <bold>b</bold> Physical coverage plot based on the misjoin detection algorithm. The joins which have much lower coverage than their neighbors are recognized as misjoins and broken (the red crosses)</p></caption><graphic xlink:href="12859_2021_4453_Fig4_HTML" id="MO3"/></fig></p>
    </sec>
    <sec id="Sec17">
      <title>Pin_hic performance in different modes</title>
      <p id="Par63">To measure the effects of different normalization and split methods. Pin_hic were implemented and tested in four different modes: default, 3m, 2s, 2m. Default mode represents the default settings of pin_hic (i.e., three-part split and summation normalization method). The number before the letter represents how many parts a contig is split into, and m, s represents multiplication and summation normalization method respectively. All tests were run in three iterations. The results are shown in Table <xref rid="Tab4" ref-type="table">4</xref>, best results are highlighted in bold.<table-wrap id="Tab4"><label>Table 4</label><caption><p>The scaffolding results in different modes</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left"># sequence</th><th align="left">Largest (Mb)</th><th align="left">NG50 (Mb)</th><th align="left">NGA50 (Mb)</th><th align="left">Reloc</th><th align="left">Inv</th><th align="left">Tran</th><th align="left">RAM (GB)</th><th align="left">Runtime (CPU hrs)</th></tr></thead><tbody><tr><td align="left">Ats-phc<sup>1</sup></td><td align="left">93</td><td char="." align="char"><bold>34.17</bold></td><td char="." align="char"><bold>24.11</bold></td><td char="." align="char">17.83</td><td align="left"><bold>67</bold></td><td align="left"><bold>10</bold></td><td align="left"><bold>0</bold></td><td char="." align="char">2.94</td><td char="." align="char"><bold>1.62</bold></td></tr><tr><td align="left">Ats-phc-2s</td><td align="left">89</td><td char="." align="char">32.64</td><td char="." align="char"><bold>24.11</bold></td><td char="." align="char">18.39</td><td align="left">72</td><td align="left">12</td><td align="left"><bold>0</bold></td><td char="." align="char">3.76</td><td char="." align="char">1.72</td></tr><tr><td align="left">Ats-phc-3m</td><td align="left"><bold>53</bold></td><td char="." align="char">28.84</td><td char="." align="char">21.98</td><td char="." align="char"><bold>18.81</bold></td><td align="left">73</td><td align="left">18</td><td align="left">5</td><td char="." align="char">2.91</td><td char="." align="char">1.84</td></tr><tr><td align="left">Ats-phc-2m</td><td align="left"><bold>53</bold></td><td char="." align="char">28.34</td><td char="." align="char">21.83</td><td char="." align="char"><bold>18.81</bold></td><td align="left">71</td><td align="left">15</td><td align="left">5</td><td char="." align="char">2.91</td><td char="." align="char">1.73</td></tr><tr><td align="left">Trs-phc</td><td align="left">267</td><td char="." align="char">28.10</td><td char="." align="char"><bold>15.75</bold></td><td char="." align="char">9.32</td><td align="left"><bold>62</bold></td><td align="left"><bold>13</bold></td><td align="left"><bold>9</bold></td><td char="." align="char"><bold>0.98</bold></td><td char="." align="char">0.78</td></tr><tr><td align="left">Trs-phc-2s</td><td align="left">250</td><td char="." align="char">28.04</td><td char="." align="char">15.45</td><td char="." align="char">9.32</td><td align="left">70</td><td align="left">21</td><td align="left"><bold>9</bold></td><td char="." align="char">0.99</td><td char="." align="char">0.63</td></tr><tr><td align="left">Trs-phc-3m</td><td align="left">207</td><td char="." align="char">27.95</td><td char="." align="char">14.73</td><td char="." align="char">8.94</td><td align="left">81</td><td align="left">16</td><td align="left">23</td><td char="." align="char">0.82</td><td char="." align="char"><bold>0.50</bold></td></tr><tr><td align="left">Trs-phc-2m</td><td align="left"><bold>191</bold></td><td char="." align="char"><bold>29.07</bold></td><td char="." align="char">14.25</td><td char="." align="char"><bold>9.52</bold></td><td align="left">81</td><td align="left">26</td><td align="left">12</td><td char="." align="char"><bold>0.98</bold></td><td char="." align="char">0.63</td></tr><tr><td align="left">Cas-phc</td><td align="left">242</td><td char="." align="char"><bold>184.75</bold></td><td char="." align="char">44.74</td><td char="." align="char"><bold>28.65</bold></td><td align="left"><bold>106</bold></td><td align="left"><bold>9</bold></td><td align="left"><bold>12</bold></td><td char="." align="char"><bold>4.54</bold></td><td char="." align="char"><bold>2.43</bold></td></tr><tr><td align="left">Cas-phc-2s</td><td align="left">223</td><td char="." align="char">326.93*</td><td char="." align="char">43.88</td><td char="." align="char"><bold>28.65</bold></td><td align="left">111</td><td align="left">12</td><td align="left">18</td><td char="." align="char"><bold>4.54</bold></td><td char="." align="char">2.88</td></tr><tr><td align="left">Cas-phc-3m</td><td align="left">163</td><td char="." align="char">170.93</td><td char="." align="char"><bold>45.83</bold></td><td char="." align="char"><bold>28.65</bold></td><td align="left">119</td><td align="left">11</td><td align="left">32</td><td char="." align="char"><bold>4.54</bold></td><td char="." align="char">2.62</td></tr><tr><td align="left">Cas-phc-2m</td><td align="left"><bold>154</bold></td><td char="." align="char">107.91</td><td char="." align="char">39.24</td><td char="." align="char"><bold>28.65</bold></td><td align="left">115</td><td align="left">14</td><td align="left">32</td><td char="." align="char"><bold>4.54</bold></td><td char="." align="char">3.11</td></tr></tbody></table><table-wrap-foot><p>The best results are highlighted in bold</p><p>*Chromosomes are misjoined</p><p><sup>1</sup>pin_hic default scaffolding mode</p></table-wrap-foot></table-wrap></p>
      <p id="Par64">As is shown in the table, different mode of pin_hic has slight effects on resource consumption and shows no clear pattern.</p>
      <p id="Par65">As for scaffolding continuity, pin_hic 2m mode has the largest NGA50 than the other modes, and has the least scaffold numbers, however its NG50 and largest scaffold is smaller than the default mode.</p>
      <p id="Par66">As for scaffolding correctness, we observed more misjoins, especiallyÂ moreÂ translocation errors, in 3m and 2m mode. To balance scaffolding efficiency, scaffolding correctness and continuity, pin_hic use three-part split and summation normalization method as its default mode.</p>
    </sec>
    <sec id="Sec18">
      <title>Pin_hic performance with multiple iterations</title>
      <p id="Par67">To investigate the effects of number of iterations on pin_hic performance, we ran pin_hic from 1 to 6 iterations on all the split assemblies, and collected N50s, corrected N50s after misjoin detection and CPU runtime for each iteration. FigureÂ <xref rid="Fig5" ref-type="fig">5</xref> shows the performance for Ats scaffolds. As is displayed, the CPU runtime (the blue line) is almost linear to the iteration numbers. Scaffold N50 (the green line) before misjoin detection increases drastically from 21.23Â Mb (1st iteration) to 39.55Â Mb (3rd iteration), which indicates most true positive links are exhausted during these periods. It finally reaches the scaffold N50 of 364.44Â Mb. This large scaffold N50 is not affecting the misjoin method, the corrected N50 remains constant at 25.18Â Mb scaffold N50 after the third round, which reflects robustness of the mis-join detection algorithm. Pin_hic iteration performances for the other two scaffolds are demonstrated in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S6.<fig id="Fig5"><label>Fig. 5</label><caption><p>pin_hic Ats scaffolding results of multiple iterations. The runtime (dark green line) increases linearly with the iterations, while the scaffold N50 grows rapidly at the second and third round, it finally reaches 364Â Mb at round 6. Even though the contigs are highly expanded, the corrected scaffold N50 keeps constant at 25Â Mb since the third round</p></caption><graphic xlink:href="12859_2021_4453_Fig5_HTML" id="MO6"/></fig></p>
    </sec>
  </sec>
  <sec id="Sec19">
    <title>Conclusions</title>
    <p id="Par68">Building an accurate and chromosome-scale assembly is still one of the major challenges in genomic studies. In this paper, we proposed a new Hi-C scaffolding method for generating chromosome-scale scaffolds through iterative weighted linking, it uses N-best neighbor strategy to resolve non-reciprocal best neighbor issue and exploit all possible links, and a robust method to discover misjoins in scaffolds and improve scaffolding accuracy based on comparison of maximum physical coverages of the joins and their neighboring contigs, which is theoretically and practically unaffected by the scaffold lengths. Moreover, we defined a novel âSATâ format to keep a scaffolding graph, which can be used in further genomic analysis, such as manual curation.</p>
    <p id="Par69">Through our experiments on four long-read based de novo assemblies from three different species, we demonstrate that pin_hic can generate more continuous assembly than the start-of-art tool SALSA2, while achieving higher or comparable accuracyÂ than 3D-DNA and SALSA2, it is also proved to be more efficient. Further, pin_hic program is implemented in C programming language, its only dependency is zlib, which makes it easy to compile and install, and easy to be integrated into modern assembly pipelines.</p>
    <p id="Par70">Although pin_hic has great potential to be applied in the real de novo sequencing projects, it required some further improvements: (1) It assumes the input assembly contains no mis-assemblies, so no module is designed to resolve chimeric assemblies, the misjoin detection algorithm can make breaks on joins, however it can not find mis-assemblies within a contig; (2) It still depends on users to specify the number of iterations, however users may set up a small number leading to short scaffolds. Although misjoin detection method is not affected by the scaffold lengths, user can choose a large number to produce more continuous results, it is useful to develop a automatic stop mechanism to save runtime. (3) Unlike mate pair reads, the distance and the relative orientation between Hi-C read pairs are not known, which makes it hard to determine gap sizes in a scaffold.</p>
    <p id="Par71">All the assemblies used in this study are based on long reads, which have natural advantages in read length over NGS reads and are able to span moderately repetitive regions and allow those regions to be built correctly. The advances in long reads assemblers have been stimulating the prosperity of long reads assembly. With long reads, we are capable of generating more continuous, more correct and more complete genomes than ever. This has enabled us to produce more accurate structural variant calling results, discover more novel genes, etc. However due to the complexity of eukaryotic genomes, long reads assemblies are typically inadequate to provide complete profile of the genomes, one still needs long-range sequencing technologies such as Hi-C to restore chromosomal structures of the assemblies.</p>
    <p id="Par72">The advent of long read and long-range Hi-C sequencing technology has opened a new era, in which the chromosome-scale assemblies can be generated automatically and productively. As many de novo sequencing projects have been launched in recent years, such as Darwin Tree of Life (DToL) Project (<ext-link ext-link-type="uri" xlink:href="https://www.sanger.ac.uk/">https://www.sanger.ac.uk/</ext-link> science/collaboration/darwin-tree-life-project) and Vertebrate Genomes Project (VGP) (<ext-link ext-link-type="uri" xlink:href="https://vertebrategenomesproject.org">https://vertebrategenomesproject.org</ext-link>), we believe pin_hic has potential to be applied in these projects and accelerates production of chromosome-scale assemblies in the near future.</p>
  </sec>
  <sec id="Sec20">
    <title>Availability and requirements</title>
    <p id="Par73">
      <list list-type="bullet">
        <list-item>
          <p id="Par74">Project name: pin_hic.</p>
        </list-item>
        <list-item>
          <p id="Par75">Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/dfguan/pin_hic">https://github.com/dfguan/pin_hic</ext-link>.</p>
        </list-item>
        <list-item>
          <p id="Par76">Operating system(s): Linux, MacOS.</p>
        </list-item>
        <list-item>
          <p id="Par77">Programming language: C.</p>
        </list-item>
        <list-item>
          <p id="Par78">Other requirements: gcc.</p>
        </list-item>
        <list-item>
          <p id="Par79">License MIT Any restrictions to use by non-academics: None.</p>
        </list-item>
      </list>
    </p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Information</title>
    <sec id="Sec21">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2021_4453_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1.</bold> Supplementary note.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
    <fn>
      <p>
        <bold>Change history</bold>
      </p>
      <p>12/31/2021</p>
      <p>A Correction to this paper has been published: 10.1186/s12859-021-04537-2</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>The <italic>Anabas testudineus</italic> and <italic>Takifugu rubripes</italic> genome was sequenced at the Sanger Institute as part of the Vertebrate Genomes Project, and we thank members of the Sanger Institute DNA pipelines group for generating the sequence data and Byrappa Venkatesh for providing the sample. And we thank the Sanger GRIT team for manual curation of these assemblies.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors' contributions</title>
    <p>D.G. and R.D. conceived the study, D.G. developed the software, D.G. and Z.N. designed and performed the experiments, D.G. drafted the manuscript. R.D., S.M., N.M., Y.W. and G.W. edited and improved the manuscript. All authors have read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>D.G. and Y.W. were supported by the National Key Research and Development Program of China (Nos.: 2017YFC0907503, 2018YFC0910504 and 2017YFC1201201), and D.G. was supported by the National Natural Science Foundation of China (Nos.: 32100329) and the China Scholarship Council. S.M. and R.D. were supported by Wellcome grant WT207492. The funders had no role in the design of the study, data collection, data analysis, interpretation of results, or writing of the paper.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Datasets used in the experiments are listed as follows: At: The original assembly and reference genome is available at NCBI with Genbank accession: GCA 900324465.2. The Hi-C data is deposited in NCBI with accessions ERR4179331-ERR4179339 and can also be downloaded with the command: âaws s3 -no-sign-request sync s3://genomeark/species/Anabas_testudineus/fAnaTes1/genomic_data/arima/â. Ca: The original assembly and reference genome is available at NCBI with Genbank accession: GCF 003957555.1. The Hi-C data can be downloaded with the command: âaws s3 -no-sign-request sync s3://genomeark/species/Calypte_anna/bCalAnn1/genomic_data/arima/â. Tr: The original assembly and reference genome is available at NCBI with RefSeq accession: GCF 901000725.2. The Hi-C data is deposited in NCBI with accessions ERR4179374-ERR4179378, and can also be downloaded with the command: âaws s3 -no-sign-request sync s3://genomeark/species/Takifugu_rubripes/fTakRub1/genomic_data/arima/â.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent to participate</title>
      <p id="Par80">Not applicable.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p id="Par81">Not applicable.</p>
    </notes>
    <notes id="FPar3" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par82">R.D. is a consultant for Dovetail Inc.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chin</surname>
            <given-names>C-S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Phased diploid genome assembly with single-molecule real-time sequencing</article-title>
        <source>Nat Methods</source>
        <year>2016</year>
        <volume>13</volume>
        <issue>12</issue>
        <fpage>1050</fpage>
        <lpage>1054</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4035</pub-id>
        <pub-id pub-id-type="pmid">27749838</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Howe</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The zebrafish reference genome sequence and its relationship to the human genome</article-title>
        <source>Nature</source>
        <year>2013</year>
        <volume>496</volume>
        <issue>7446</issue>
        <fpage>498</fpage>
        <lpage>503</lpage>
        <pub-id pub-id-type="doi">10.1038/nature12111</pub-id>
        <pub-id pub-id-type="pmid">23594743</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Berlin</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Bergman</surname>
            <given-names>NH</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <issue>5</issue>
        <fpage>722</fpage>
        <lpage>736</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.215087.116</pub-id>
        <pub-id pub-id-type="pmid">28298431</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Sequence assembly demystified</article-title>
        <source>Nat Rev Genet</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>3</issue>
        <fpage>157</fpage>
        <lpage>167</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg3367</pub-id>
        <pub-id pub-id-type="pmid">23358380</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>De novo assembly of human genomes with massively parallel short read sequencing</article-title>
        <source>Genome Res</source>
        <year>2010</year>
        <volume>20</volume>
        <issue>2</issue>
        <fpage>265</fpage>
        <lpage>272</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.097261.109</pub-id>
        <pub-id pub-id-type="pmid">20019144</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The sequence and de novo assembly of the giant panda genome</article-title>
        <source>Nature</source>
        <year>2010</year>
        <volume>463</volume>
        <issue>7279</issue>
        <fpage>311</fpage>
        <lpage>317</lpage>
        <pub-id pub-id-type="doi">10.1038/nature08696</pub-id>
        <pub-id pub-id-type="pmid">20010809</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sohn</surname>
            <given-names>J-I</given-names>
          </name>
          <name>
            <surname>Nam</surname>
            <given-names>J-W</given-names>
          </name>
        </person-group>
        <article-title>The present and future of de novo whole-genome assembly</article-title>
        <source>Brief Bioinform</source>
        <year>2018</year>
        <volume>19</volume>
        <issue>1</issue>
        <fpage>23</fpage>
        <lpage>40</lpage>
        <pub-id pub-id-type="pmid">27742661</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yeo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Coombe</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>ARCS: scaffolding genome drafts with linked reads</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>5</issue>
        <fpage>725</fpage>
        <lpage>731</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx675</pub-id>
        <pub-id pub-id-type="pmid">29069293</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lam</surname>
            <given-names>ET</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genome mapping on nanochannel arrays for structural variation analysis and sequence assembly</article-title>
        <source>Nat Biotechnol</source>
        <year>2012</year>
        <volume>30</volume>
        <issue>8</issue>
        <fpage>771</fpage>
        <lpage>776</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2303</pub-id>
        <pub-id pub-id-type="pmid">22797562</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lieberman-Aiden</surname>
            <given-names>E</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Comprehensive mapping of long-range interactions reveals folding principles of the human genome</article-title>
        <source>Science</source>
        <year>2009</year>
        <volume>326</volume>
        <issue>5950</issue>
        <fpage>289</fpage>
        <lpage>293</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1181369</pub-id>
        <pub-id pub-id-type="pmid">19815776</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dudchenko</surname>
            <given-names>O</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>De novo assembly of the aedes aegypti genome using Hi-C yields chromosome-length scaffolds</article-title>
        <source>Science</source>
        <year>2017</year>
        <volume>356</volume>
        <issue>6333</issue>
        <fpage>92</fpage>
        <lpage>95</lpage>
        <pub-id pub-id-type="doi">10.1126/science.aal3327</pub-id>
        <pub-id pub-id-type="pmid">28336562</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Belton</surname>
            <given-names>J-M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Hi-C: a comprehensive technique to capture the conformation of genomes</article-title>
        <source>Methods</source>
        <year>2012</year>
        <volume>58</volume>
        <issue>3</issue>
        <fpage>268</fpage>
        <lpage>276</lpage>
        <pub-id pub-id-type="doi">10.1016/j.ymeth.2012.05.001</pub-id>
        <pub-id pub-id-type="pmid">22652625</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Burton</surname>
            <given-names>JN</given-names>
          </name>
          <name>
            <surname>Adey</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Patwardhan</surname>
            <given-names>RP</given-names>
          </name>
          <name>
            <surname>Qiu</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Kitzman</surname>
            <given-names>JO</given-names>
          </name>
          <name>
            <surname>Shendure</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Chromosome-scale scaffolding of de novo genome assemblies based on chromatin interactions</article-title>
        <source>Nat Biotechnol</source>
        <year>2013</year>
        <volume>31</volume>
        <issue>12</issue>
        <fpage>1119</fpage>
        <lpage>1125</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2727</pub-id>
        <pub-id pub-id-type="pmid">24185095</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kaplan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Dekker</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>High-throughput genome scaffolding from in vivo DNA interaction frequency</article-title>
        <source>Nat Biotechnol</source>
        <year>2013</year>
        <volume>31</volume>
        <issue>12</issue>
        <fpage>1143</fpage>
        <lpage>1147</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2768</pub-id>
        <pub-id pub-id-type="pmid">24270850</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ghurye</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bickhart</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Chin</surname>
            <given-names>C-S</given-names>
          </name>
        </person-group>
        <article-title>Scaffolding of long read assemblies using long range contact information</article-title>
        <source>BMC Genomics</source>
        <year>2017</year>
        <volume>18</volume>
        <issue>1</issue>
        <fpage>527</fpage>
        <pub-id pub-id-type="doi">10.1186/s12864-017-3879-z</pub-id>
        <pub-id pub-id-type="pmid">28701198</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ghurye</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rhie</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Schmitt</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Selvaraj</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Integrating Hi-C links with assembly graphs for chromosome-scale assembly</article-title>
        <source>PLoS Comput Biol</source>
        <year>2019</year>
        <volume>15</volume>
        <issue>8</issue>
        <fpage>1007273</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1007273</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Li, H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. PREPRINT 00. 2013.</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap and miniasm: fast mapping and de novo assembly for noisy long sequences</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>14</issue>
        <fpage>2103</fpage>
        <lpage>2110</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw152</pub-id>
        <pub-id pub-id-type="pmid">27153593</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>SimÃ£o</surname>
            <given-names>FA</given-names>
          </name>
          <name>
            <surname>Waterhouse</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Ioannidis</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Kriventseva</surname>
            <given-names>EV</given-names>
          </name>
          <name>
            <surname>Zdobnov</surname>
            <given-names>EM</given-names>
          </name>
        </person-group>
        <article-title>BUSCO: assessing genome assembly and annotation completeness with single-copy orthologs</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>19</issue>
        <fpage>3210</fpage>
        <lpage>3212</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv351</pub-id>
        <pub-id pub-id-type="pmid">26059717</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mikheenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Versatile genome assembly evaluation with QUAST-LG</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>13</issue>
        <fpage>142</fpage>
        <lpage>150</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty266</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Chu, J. Jupiter plot: a circos-based tool to visualize genome assembly consistency. Zenodo. 2018. <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/1241235#.XA92q2hKiUk">https://zenodo.org/record/1241235#.XA92q2hKiUk</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kerpedjiev</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>HiGlass: web-based visual exploration and analysis of genome interaction maps</article-title>
        <source>Genome Biol</source>
        <year>2018</year>
        <volume>19</volume>
        <issue>1</issue>
        <fpage>125</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-018-1486-1</pub-id>
        <pub-id pub-id-type="pmid">30143029</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
