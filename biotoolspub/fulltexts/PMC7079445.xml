<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7079445</article-id>
    <article-id pub-id-type="publisher-id">3428</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-020-3428-7</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>LCQS: an efficient <underline>l</underline>ossless <underline>c</underline>ompression tool of <underline>q</underline>uality <underline>s</underline>cores with random access functionality</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Fu</surname>
          <given-names>Jiabing</given-names>
        </name>
        <address>
          <email>fu.jb@mail.scut.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ke</surname>
          <given-names>Bixin</given-names>
        </name>
        <address>
          <email>ke.bixin@mail.scut.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Dong</surname>
          <given-names>Shoubin</given-names>
        </name>
        <address>
          <email>sbdong@scut.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1764 3838</institution-id><institution-id institution-id-type="GRID">grid.79703.3a</institution-id><institution>School of Computer Science &amp; Engineering, South China University of Technology, </institution></institution-wrap>Wushan Road, Guangzhou, 510006 China </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1764 3838</institution-id><institution-id institution-id-type="GRID">grid.79703.3a</institution-id><institution>Communication &amp; Computer Network Lab of Guangdong, South China University of Technology, </institution></institution-wrap>Wushan Road, Guangzhou, 510006 China </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>18</day>
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>18</day>
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>21</volume>
    <elocation-id>109</elocation-id>
    <history>
      <date date-type="received">
        <day>29</day>
        <month>12</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>24</day>
        <month>2</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Advanced sequencing machines dramatically speed up the generation of genomic data, which makes the demand of efficient compression of sequencing data extremely urgent and significant. As the most difficult part of the standard sequencing data format FASTQ, compression of the quality score has become a conundrum in the development of FASTQ compression. Existing lossless compressors of quality scores mainly utilize specific patterns generated by specific sequencer and complex context modeling techniques to solve the problem of low compression ratio. However, the main drawbacks of these compressors are the problem of weak robustness which means unstable or even unavailable results of sequencing files and the problem of slow compression speed. Meanwhile, some compressors attempt to construct a fine-grained index structure to solve the problem of slow random access decompression speed. However, they solve the problem at the sacrifice of compression speed and at the expense of large index files, which makes them inefficient and impractical. Therefore, an efficient lossless compressor of quality scores with strong robustness, high compression ratio, fast compression and random access decompression speed is urgently needed and of great significance.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">In this paper, based on the idea of maximizing the use of hardware resources, LCQS, a lossless compression tool specialized for quality scores, was proposed. It consists of four sequential processing steps: partitioning, indexing, packing and parallelizing. Experimental results reveal that LCQS outperforms all the other state-of-the-art compressors on all criteria except for the compression speed on the dataset SRR1284073. Furthermore, LCQS presents strong robustness on all the test datasets, with its acceleration ratios of compression speed increasing by up to 29.1x, its file size reducing by up to 28.78%, and its random access decompression speed increasing by up to 2.1x. Additionally, LCQS also exhibits strong scalability. That is, the compression speed increases almost linearly as the size of input dataset increases.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3">The ability to handle all different kinds of quality scores and superiority in compression ratio and compression speed make LCQS a high-efficient and advanced lossless quality score compressor, along with its strength of fast random access decompression. Our tool LCQS can be downloaded from <ext-link ext-link-type="uri" xlink:href="https://github.com/SCUT-CCNL/LCQS">https://github.com/SCUT-CCNL/LCQS</ext-link>and freely available for non-commercial usage.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Quality score</kwd>
      <kwd>Lossless compression</kwd>
      <kwd>Random access</kwd>
      <kwd>Robust</kwd>
      <kwd>Efficient</kwd>
      <kwd>Parallelization</kwd>
      <kwd>ZPAQ</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution> Natural Science Foundation of Guangdong Province</institution>
        </funding-source>
        <award-id>2015A03030817</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Natural Science Foundation of China (CN)</institution>
        </funding-source>
        <award-id>61976239</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>Innovation Foundation of High-end Scientific Research Institutions of Zhongshan City of China</institution>
        </funding-source>
        <award-id>2019AG031</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Driven by the enormous scientific success of world-wide HGP (Human Genome Project), NGS (Next Generation Sequencing) has made tremendous progress in recent decades and thus enables high throughput of the production of the FASTQ files [<xref ref-type="bibr" rid="CR1">1</xref>] at a low cost. Data storage and transmission become the main bottleneck of genomic data related analysis. As the affiliated sequencing error measurement of genomic sequence read, quality scores occupy at least 70% storage space of lossless compressed FASTQ file [<xref ref-type="bibr" rid="CR2">2</xref>]. The high randomness caused by the noise of the quality score have made the compression of FASTQ low-efficient. However, quality scores in the FASTQ file play an indispensable role in many subsequent analyses (such as sequence alignment and variant calling) and thus cannot be discarded directly [<xref ref-type="bibr" rid="CR3">3</xref>]. Therefore, the demand for a specialized and efficient lossless compressor for quality score becomes urgent and significant.</p>
    <p>The dominant view of the current challenge of compression tools lies in that they should be able to compress large files in a short time and with a limit amount of memory. Therefore, the performance of a lossless compressor is determined by the following four criteria:
<list list-type="order"><list-item><p>Compression Ratio: the less bits it uses to restore the original file, the better ratio it has;</p></list-item><list-item><p>Compression Speed: the less time it uses to transform the original file into compressed form, the better speed it has;</p></list-item><list-item><p>Decompression Speed: the less time it uses to restore the original file from its compressed form, the better speed it has;</p></list-item><list-item><p>Memory Usage: the less memory it uses to compress or decompress the original file, the better performance it has.</p></list-item></list></p>
    <p>Consequently, improving these four criteria to the utmost becomes critical to developing an outstanding lossless compressor. However, these four criteria are not independent but mutually restrictive. Most existing lossless quality score compressors [<xref ref-type="bibr" rid="CR4">4</xref>–<xref ref-type="bibr" rid="CR6">6</xref>] adopt the design pattern of “sacrificing one for another” in the classic evaluating paradigm of “Compression Ratio, Compression Speed, Decompression Speed, and Memory usage”. For instance, some compressors try to sacrifice the compression ratio by applying a simple probability model to compress or decompress at a very high speed. Many compressors try to sacrifice the robustness by fixing the length of quality scores to improve the compression ratio. However, varied length quality scores are an essential part of many critical intermediate files (e.g., SAM format file [<xref ref-type="bibr" rid="CR7">7</xref>]) generated during the variant calling procedure. The complicated probability model is applied to model quality scores accurately to improve the compression ratio at the sacrifice of compression speed. It is challenging to balance the four criteria, which makes the design of an efficient compressor almost impossible.</p>
    <p>However, the current challenge proposed by the majority is a general challenge for any data compression problems and is only one kind of existing challenges. This broad understanding of the current challenge might not apply to the compression of specific data since challenge should vary from scene to scene in the context of quality scores which is the focus of our research. Quality score, as the measurement of the level of confidence of an individual sequenced base call, has its particular way of usage and is commonly used to act as backups in store for future’s specific look-up. Therefore, random access decompression of quality scores is more important than complete decompression. A new evaluating paradigm of “Compression Ratio, Compression Speed, Random Access Decompression Speed, and Memory usage” could be more appropriate for the lossless compression algorithm of quality score. This exclusive property of quality score compression makes it relatively easy to improve all the four criteria together due to sharply weakened impact of decompression speed, and more attention paid to optimize the other three criteria. A recent excellent lossless quality score compressor AQUa [<xref ref-type="bibr" rid="CR8">8</xref>] adopts the new evaluating paradigm above and provides fast random access decompression support. However, huge sacrifices of compression speed and extra size of index files prevent it from practical usage. Meanwhile, AQUa can only handle quality score lines with the same length and has the drawback to dealing with the quality score with varied lengths. However, an advanced compression tool should possess the ability to compress any different forms of quality scores. The more input sources it can handle, the better robustness it has. Hence, a new evaluative criterion Robustness is fleshed out in the evaluative paradigm.</p>
    <p>However, theoretically speaking, for an unknown genomic dataset, it is impossible to balance the five criteria of the new evaluative paradigm of “Robustness, Compression ratio, Compression speed, Random Access Decompression speed and Memory usage” at the same time since there is no free lunch. That is, reducing more redundancy on more various forms of quality score naturally needs more searching time and more memory in finding data redundancy. Therefore, we do not follow the line of the majority who focus on achieving better results based on as fewer memory resources as possible. That is, memory usage should not be as less as possible. On the contrary, memory usage should be utilized to the most as long as it does not become a performance bottleneck of other hardware resources. In the same vein, CPU should be utilized to the most to achieve higher parallelization. That is, we utilize the hardware resource to the utmost to improve compression performance to take full advantage of easy-access and well-developed hardware resources to deal with the “No Free Lunch” dilemma.</p>
    <p>Based on the analysis above, we remove the memory usage criteria and propose an new lossless quality score compression algorithm evaluating paradigm of “Robustness, Compression Ratio, Compression Speed and Random Access Decompression Speed”. This paradigm is motivated by the idea of utilizing the hardware resource to the utmost. In this paper, we use the ratio of memory usage and CPU usage to guide the utilization of hardware resources. To sum up, under the condition that the ratio of memory usage and CPU usage is controlled to be less than a proper value, the current goal and challenge for quality score compression are to satisfy the following four criteria:
<list list-type="order"><list-item><p>High Robustness: Whether the quality score’s length is varied or not, the quality score’s coding standard is varied or not, quality score’s species is human or not, the compression tool can compress any of them and obtain a stable compressed result;</p></list-item><list-item><p>High Compression Ratio: For any different kinds of quality scores, the compression tool can provide a competitive compression ratio;</p></list-item><list-item><p>High Compression Speed: For quality score file of small size (usually non-human genomic data), the compression tool can provide a competitive compression speed when compared with a state-of-the-art compression tool using an ordinary computer. For medium and large size quality score file, the compression tool possesses the property of high scalability and can provide a much more competitive compression speed when compared with other state-of-the-art compression tools through utilizing the more advanced hardware resource to the utmost;</p></list-item><list-item><p>High Random Access Decompression Speed: For compressed results of any size, fast and stable line-wise random access decompression and look-ups should be supported.</p></list-item></list></p>
    <p>In this paper, we aim at optimizing all the four criteria in the new evaluating paradigm at the same time as we can and designing an efficient lossless quality score compressor with random access decompression functionality. Our compressor LCQS includes four sequential processing steps: partitioning, indexing, packing, and parallelizing. Our framework is illustrated in Fig. <xref rid="Fig1" ref-type="fig">1</xref>. Regarding robustness, Fig. <xref rid="Fig1" ref-type="fig">1</xref> shows that we proposed and applied several general prior observations but prohibited any specific priors. Regarding compression ratio, a robust data partition method (see step 1 in Fig. <xref rid="Fig1" ref-type="fig">1</xref>) based on general prior is proposed to capture different patterns of quality score content within a file. Furthermore, a complicated context mixing probabilistic modeling algorithm (see step 4 in Fig. <xref rid="Fig1" ref-type="fig">1</xref>) is used to capture the underlined pattern accurately to the utmost. Regarding compression speed, an adaptive quality score packing algorithm (see step 3 in Fig. <xref rid="Fig1" ref-type="fig">1</xref>) is proposed to reduce the content needed to be modeled. Furthermore, a parallelization strategy based on SIMD technique (see step 4 in Fig. <xref rid="Fig1" ref-type="fig">1</xref>) is used to optimize existing classical compression library libzpaq to speed up the modeling procedure of each piece of content. Regarding random access decompression speed, a light-weight index design (see step 2 in Fig. <xref rid="Fig1" ref-type="fig">1</xref>) is proposed to support fast and stable line-wise quality score random access decompression. More details about the four steps are discussed in the next section.
<fig id="Fig1"><label>Fig. 1</label><caption><p>The framework of Proposed Lossless Compressor LCQS</p></caption><graphic xlink:href="12859_2020_3428_Fig1_HTML" id="MO1"/></fig></p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p>In this paper, robustness is the primary objective and is emphasized at the very beginning phase of algorithm design since we aim to design a practical and general compressor. The robustness of compressors lays based on general prior and thus the selection of general prior becomes crucial. This paper holds the idea that a good selection of general priors should be dated back to its origin. Back to the generation process of quality scores, we find that the content of the quality score is determined by two factors:
<list list-type="order"><list-item><p>the original probability confidence level generated by different sequencing machines;</p></list-item><list-item><p>the storage format standard established by different communities;</p></list-item></list></p>
    <p>Therefore, general priors should exhibit invariability among different sequencing machines and different communities. Based on the above analyses, this paper selects three general priors:
<list list-type="order"><list-item><p>The ASCII values of quality score lie in the interval ranging from 33 to 104 due to the data format standard;</p></list-item><list-item><p>Quality score value follows very uneven distribution due to the effectiveness of sequencing machine;</p></list-item><list-item><p>Quality scores are generated by a mixture of different source distributions due to the inevitable disturbance produced during the process of sequencing machines estimating the sequence base’s confidence [<xref ref-type="bibr" rid="CR6">6</xref>].</p></list-item></list></p>
    <p>As is shown in Fig. <xref rid="Fig1" ref-type="fig">1</xref>, data compression can be viewed as a combination of various transformations, probabilistic modeling techniques and encoding strategies [<xref ref-type="bibr" rid="CR9">9</xref>]. Data transformations and probabilistic modeling become the key to the optimization of compression methods since encoding techniques are mature and perform very well with theoretical guarantee. In this paper, all the data transformations and models proposed are designed based on only the three general priors and are discussed in detail in Fig. <xref rid="Fig1" ref-type="fig">1</xref>. “<xref rid="Sec3" ref-type="sec">Quality score line partition method</xref>” section is designed to improve the compression ratio. “<xref rid="Sec4" ref-type="sec">Light-Weight index design method</xref>” section is incorporated to support random access decompression functionality. “<xref rid="Sec5" ref-type="sec">Adaptive k-mer packing method</xref>” and “<xref rid="Sec6" ref-type="sec">Parallelization method for libzpaq using SIMD technique</xref>” sections are two optimized procedures for compression speed.</p>
    <sec id="Sec3">
      <title>Quality score line partition method</title>
      <p>As is shown in Fig. <xref rid="Fig1" ref-type="fig">1</xref>, quality score lines within one quality score file might exhibit differences, which validates the third general prior mentioned before. Some lossless compressors [<xref ref-type="bibr" rid="CR6">6</xref>, <xref ref-type="bibr" rid="CR10">10</xref>] attempt to apply different clustering methods to split the original fixed length quality score into several blocks. However, there are two main drawbacks:
<list list-type="order"><list-item><p>Weak robustness. It does not work on varied length quality scores. Strong specific assumption is made to cluster better, which reduces the compressors’ robustness;</p></list-item><list-item><p>Low compression/decompression speed. Too much time is used to cluster the quality scores as accurately as possible. However, it might not be a wise trade-off to achieve slight improvements in the compression ratio by wasting too much time. As is noted by AQUa [<xref ref-type="bibr" rid="CR8">8</xref>], multi-pass quality score compression method is not suitable for real-time quality score compression. Furthermore, single-pass compressors can minimize the latency between sequencing and genomic data analysis. Therefore, a robust and coarse partition method is appropriate.</p></list-item></list></p>
      <p>In this paper, quality score line is represented by k-mers (refer to the substrings of length k) to ensure compression ratio and robustness since k-mer contains high-order context information and can be used to represent varied-length quality score line. With a view to both simple and validity, quality score lines here are represented by k-mers. Meanwhile, quality score lines tend to be similar when they share high-frequency k-mers and vice versa. Therefore, higher weight should be assigned to high-frequency k-mers and low-frequency k-mers should be assigned lower weight. To speed up the weight assignment process, we do weight assignments by utilizing only a subset of the dataset since we assume that the subset and whole dataset follow the same distribution. Specifically, the first M lines (Default 10<sup>5</sup> lines) of the dataset were analyzed. The information of each k-mer’s occurrences and the total occurrences of all k-mers are then collected. The weight of one k-mer is assigned as the ratio of its occurrences to the total occurrences of all k-mers. The weight of each quality score line equals to the ratio of the sum of all its k-mers’ weights to the number of the k-mers within it. The maximum weight among the M sampling quality score line is obtained and is used to normalize all the other quality score line weights. Finally, quality score would be partitioned into several parts according to their different line weights. In this paper, only two clusters are generated since it is good enough to achieve a better balance between time and space. Step 1 (see Fig. <xref rid="Fig1" ref-type="fig">1</xref>) is the quality score line partition method and is illustrated in Algorithm 1 in Additional file <xref rid="MOESM1" ref-type="media">1</xref>.</p>
    </sec>
    <sec id="Sec4">
      <title>Light-Weight index design method</title>
      <p>As is shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>, once data streams 0 and 1 are obtained, data blocks to be compressed would be generated. The construction work of the index should be made and completed before feeding them into the next step to support line-wise random access decompression function. Two fixed-size buffers (A and B) are maintained to partition the two data streams into data blocks. For buffer A, the content of one quality score line would be copied into buffer A if it belongs to data stream 0. Meanwhile, a newline would be copied into buffer A to keep track of the order information if it belongs to data stream 1. For buffer B, the content of one quality score line would be copied into buffer B if it belongs to data stream 1. Furthermore, the content of one quality score line would be discarded if it belongs to data stream 0.
<fig id="Fig2"><label>Fig. 2</label><caption><p>The Procedure of Light-weight Index Method: Step 2</p></caption><graphic xlink:href="12859_2020_3428_Fig2_HTML" id="MO2"/></fig></p>
      <p>In order to achieve load balance, the buffer would be emptied and fed into the next step only when the size of the buffer exceeds a predefined threshold. Meanwhile, in order to keep the performance of random access decompression much more stable, buffer A would be forced to be emptied when buffer B is emptied for consecutive three times. Once two buffers are emptied for the next packing phase, the index information would be recorded. Regarding buffer A, the start position, the end position and the number of newline before A are recorded one by one in the sequential order of data stream 0. Regarding buffer B, only the start position and end position are recorded one by one in the sequential order of data stream 1 since the third entry can be inferred from the index information of A. Given a line-wise random access range such as [a, b], all the compressed data blocks of stream 0 and 1 whose range is overlapped with [a, b] would be extracted through looking up the index range information of the compressed data block. Once all needed compressed data blocks are decompressed and merged, the result content of range [a, b] is obtained. Normally, most of the range interval of the random access operation would not exceed the range of one data block and the number of data blocks needed to be decompressed would not exceed four (one A and three B). In the worst situation, the number of data blocks needed to be decompressed would not exceed eight (two A and six B) when the range interval of random access operation contains the boundary of two continuous block A.</p>
    </sec>
    <sec id="Sec5">
      <title>Adaptive k-mer packing method</title>
      <p>As is mentioned in the introduction section, a complicated context mixing probabilistic modeling algorithm ZPAQ would be applied to capture the underlined pattern of quality score accurately. To reduce the negative effect of compression speed, we need to improve the compression speed to the best of our ability. In a nutshell, two solutions are proposed:
<list list-type="order"><list-item><p>reducing the content that needs to be modeled;</p></list-item><list-item><p>reducing the time used to model each unit of the content.</p></list-item></list></p>
      <p>As is shown in Fig. <xref rid="Fig1" ref-type="fig">1</xref>, the first one discussed in this section is usually completed in the data transformation phase while the second one as the focus of next section is usually optimized in the probabilistic modeling phase. Inspired by Bonfield and Mahoney [<xref ref-type="bibr" rid="CR4">4</xref>] and the first general prior, packing techniques are applied to reduce the content that needs to be accurately modeled. Specifically, quality score k-mers in which each quality score value ranges from 33 to 104 are losslessly transformed into a single-digit number ranging from 1 to 255 through a one-to-one mapping rule. Nevertheless, this paper adaptively packs k-mer based on real distribution of quality score value. It is different from Mahoney’s method which applies the same fixed mapping rule to all different kinds of quality score datasets exhibiting different distributions. Adaptive k-mer packing is shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref> and is implemented as follows:
<list list-type="order"><list-item><p>Obtaining the quality score value which has the highest occurrences and denoting it as C. As is shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>, the mapping rule is fixed once C is obtained. The reason why we choose the quality score with the highest occurrences as the boundary of transformation interval lies in that it possesses the highest possibility of forming k-mer as many as possible through combination with other quality score values. The more k-mer satisfies the transformation conditions, the more content it can reduce;
<fig id="Fig3"><label>Fig. 3</label><caption><p>The Procedure of Adaptive k-mer Packing Method: Step 3</p></caption><graphic xlink:href="12859_2020_3428_Fig3_HTML" id="MO3"/></fig></p></list-item><list-item><p>Grouping and mapping of the quality score. As is shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>, for each quality score, the priority of grouping and mapping of k-mers increases from left to right (1⇒255). Details about the packing procedure of Fig. <xref rid="Fig3" ref-type="fig">3</xref> can be seen in the implementation details of the adaptive k-mer packing method which is presented in the Additional file <xref rid="MOESM2" ref-type="media">2</xref>. The whole mapping procedures are visualized in detail in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. Meanwhile, an example is provided to understand the adaptive k-mer mapping method better. The mapping is one-to-one so quality score value can be easily unpacked in a reverse way.</p></list-item></list></p>
    </sec>
    <sec id="Sec6">
      <title>Parallelization method for libzpaq using SIMD technique</title>
      <p>Complicated probabilistic modeling means slow modeling speed. To further improve the modeling speed and reduce the modeled content discussed in “<xref rid="Sec5" ref-type="sec">Adaptive k-mer packing method</xref>” section, this paper attempts to use SIMD and Multithreading techniques to shorten the time of modeling each unit content.</p>
      <p>Libzpaq [<xref ref-type="bibr" rid="CR11">11</xref>] was born in 2009 and written by Matt Mahoney. It is a state-of-the-art backend open-source compression library and is widely used all around the world. It possesses excellent performance on the compression ratio at the expense of slow compression speed. Therefore, code optimization is always the focus of libzpaq compression community. Libzpaq’s compression speed has been highly optimized and dramatically improved in continuously iterated versions by utilizing different kinds of accelerating techniques. However, there is still some distance away from practical usage. Once its compression speed becomes acceptable in practical usage, existing excellent quality score compressors (not limited to quality score compression) would become acceptable since many compressors [<xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR5">5</xref>, <xref ref-type="bibr" rid="CR10">10</xref>, <xref ref-type="bibr" rid="CR12">12</xref>] use libzpaq as their backend compressor. Thus, it is of great importance to optimize libzpaq’s performance of compression speed.</p>
      <p>This paper analyzes all the points which have the potential to speed up to optimize libzpaq. From the perspective of theoretical analysis, the predictor of libzpaq should be very time-consuming since libzpaq’s main work is to accurately predict the compressed source using highly complex context mixing probabilistic model to achieve excellent performance on compression ratio. From the perspective of experimental analysis, the libzpaq library’s predictor module is always time-consuming, which validates our assumption. After further investigating the predictor module, this paper finally selects two submodules (Update and Predict Module of Predictor) of libzpaq as our primary optimized points and uses SIMD techniques to rewrite the libzpaq using C++ programing language. Currently, libzpaq compression library has JIT and NON-JIT versions. Although only JIT version of libzpaq is used in our compressor LCQS, we optimize libzpaq library for both versions to make it much more universal for uses for other purposes by other compressors. Furthermore, we not only incorporate the optimized libzpaq code into LCQS but also pack it into an independent component which can be easily called in other compressors.</p>
    </sec>
  </sec>
  <sec id="Sec7" sec-type="results">
    <title>Results</title>
    <p>This section describes experimental setups in detail and validates the effectiveness of our proposed lossless quality score compressor LCQS. We compare our tool with three state-of-the-art compressors on recognized benchmark datasets in terms of the following four new criteria of efficiency: Robustness, Compression Ratio, Compression Speed and Random Access Decompression Speed. Meanwhile, as an independent component, compression library libzpaq is also tested and compared.</p>
    <sec id="Sec8">
      <title>Benchmark datasets selection</title>
      <p>Datasets with different statistical properties would result in a strong bias on the performance of the compressors. Thus, much attention should be paid to choose test datasets to evaluate the effectiveness of proposed compressors. With huge demand and rapid development of genomic information compression, the standardization of genomic data benchmark becomes urgent. Currently, the MPEG HTS compression working group, is aware of the urgency and is building up the genomic data benchmark. Nevertheless, as is noted by Numanagic et al. [<xref ref-type="bibr" rid="CR9">9</xref>], the size of the datasets compiled by MPEG HTS compression working group consists of approximately 4 TB and is expecting a rise in the future. Numanagc et al. [<xref ref-type="bibr" rid="CR9">9</xref>] establishes a new acceptable and reasonable benchmark from the MPEG datasets. We choose it as our test benchmark. Besides, to test the performance of compressing large genomic files, we also collect high coverage reads for NA12878 from the public website [<xref ref-type="bibr" rid="CR13">13</xref>]. Only the quality score part of the benchmark FASTQ datasets samples [<xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR14">14</xref>] is extracted, and thus their sizes are different from their original FASTQ files. For the datasets from 1_01 to 5_02, quality scores are extracted directly from the corresponding FASTQ file. Besides, we extract the quality scores of the eight large datasets (ERR091571_1.fastq 47 GB, ERR091571_2.fastq 47 GB, ERR091572_1.fastq 47 GB, ERR091572_2.fastq 47 GB, ERR091573_1.fastq 47 GB, ERR091573_2.fastq 47 GB, ERR091574_1.fastq 49 GB, ERR091574_2.fastq 49 GB) from the public website [<xref ref-type="bibr" rid="CR13">13</xref>]. Then we preprocess the eight large datasets into the quality score dataset ERR09157 and denotes ERR09157 as 6_01. Detailed information about the obtained quality score datasets is presented in Table <xref rid="Tab1" ref-type="table">1</xref>. It is clear from Table <xref rid="Tab1" ref-type="table">1</xref> that the test datasets have good diversity since they consist of datasets with different species, different technologies, different sequencing depths, different lengths and different sizes. Therefore, comparing results tested on that benchmark would be representative and convincing.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Detailed Descriptions of Test Quality Score Datasets</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Code</th><th align="left">Filename(quality score only)</th><th align="left">Organism</th><th align="left">Technology</th><th align="left">Coverage</th><th align="left">Length</th><th align="left">Size(MB)</th></tr></thead><tbody><tr><td align="left">1_01</td><td align="left">SRR554369_1</td><td align="left">P.Aeruginosa</td><td align="left">Illumina GAIIx</td><td align="left">50x</td><td align="left">100</td><td align="left">160</td></tr><tr><td align="left">1_02</td><td align="left">SRR554369_2</td><td align="left">P.Aeruginosa</td><td align="left">Illumina GAIIx</td><td align="left">50x</td><td align="left">100</td><td align="left">160</td></tr><tr><td align="left">2_01</td><td align="left">MH0001_081026_clean.1</td><td align="left">H.Sapiensgut</td><td align="left">Illumina GAII</td><td align="left">Unknown</td><td align="left">44</td><td align="left">500</td></tr><tr><td align="left">2_02</td><td align="left">MH0001_081026_clean.2</td><td align="left">H.Sapiensgut</td><td align="left">Illumina GAII</td><td align="left">Unknown</td><td align="left">44</td><td align="left">500</td></tr><tr><td align="left">3_01</td><td align="left">SRR1284073</td><td align="left">E.Coli</td><td align="left">PacBio</td><td align="left">140x</td><td align="left">Varied</td><td align="left">620</td></tr><tr><td align="left">4_01</td><td align="left">SRR327342_1</td><td align="left">S.Cerevisiae</td><td align="left">Illumina GAII</td><td align="left">175x</td><td align="left">75</td><td align="left">918</td></tr><tr><td align="left">4_02</td><td align="left">SRR327342_2</td><td align="left">S.Cerevisiae</td><td align="left">Illumina GAII</td><td align="left">175x</td><td align="left">75</td><td align="left">1090</td></tr><tr><td align="left">5_02</td><td align="left">SRR870667_2</td><td align="left">T.Cacao</td><td align="left">Illumina GAIIx</td><td align="left">35x</td><td align="left">74</td><td align="left">4952</td></tr><tr><td align="left">5_01</td><td align="left">SRR870667_1</td><td align="left">T.Cacao</td><td align="left">Illumina GAIIx</td><td align="left">35x</td><td align="left">74</td><td align="left">7197</td></tr><tr><td align="left">6_01</td><td align="left">ERR09157</td><td align="left">Human</td><td align="left">Illumina</td><td align="left">Unknown</td><td align="left">101</td><td align="left">166,142</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec9">
      <title>Benchmark compressors selection</title>
      <p>To better evaluate the performance of our proposed lossless quality score compressor LCQS, both general and specialized lossless benchmark compressors are selected. Concerning general benchmark compressors, it is easy to make choices and two excellent compressors (7-zip and Gzip) are selected. Concerning specialized benchmark compressors, it is difficult to make choices. Since our compressor is in a lossless manner, the related tool on specialized quality score compression is rare, which makes the work of choosing benchmark compressors difficult. Fortunately, quality score is one part of FASTQ file and many FASTQ compressors integrated the functionality of quality score compression in recent decades. However, without a deep understanding of the source code of the compressor, a simple calculation of separate and visible compressed results (e.g. Fastqz [<xref ref-type="bibr" rid="CR4">4</xref>], Scalce [<xref ref-type="bibr" rid="CR15">15</xref>]) would produce a wrong or bias compression ratio. Besides, the results of compression speed of quality score in FASTQ cannot be collected. Based on the above considerations, all FASTQ compressors are excluded. This paper chooses AQUa [<xref ref-type="bibr" rid="CR8">8</xref>] as the specialized benchmark compressor to better evaluate the compression performance and random access decompression functionality under the new evaluating paradigm since AQUa is state-of-the-art and the only one that can provide random access decompression support.</p>
      <p>Detailed information about the comparison compressors can be seen in Table <xref rid="Tab2" ref-type="table">2</xref>. All experiments are tested on the same Linux server (Intel(R) CPU E5-2670 @ 2.60GHz, 16 CPU cores). The cache is cleared before every experiment test to avoid the effect caused the caching technique of the operating system.
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Detailed Descriptions of Benchmark Compressors</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Compressors</th><th align="left">Parameters</th><th align="left">Source URLs</th></tr></thead><tbody><tr><td align="left">LCQS</td><td align="left">k=4, α= 0.1 (they are defined in step 1)</td><td align="left"><ext-link ext-link-type="uri" xlink:href="https://github.com/SCUT-CCNL/LCQS">https://github.com/SCUT-CCNL/LCQS</ext-link></td></tr><tr><td align="left">AQUa</td><td align="left">windowsize=1, cabacgrouping=10485760</td><td align="left"><ext-link ext-link-type="uri" xlink:href="https://github.com/tparidae/AQUa">https://github.com/tparidae/AQUa</ext-link></td></tr><tr><td align="left">7-zip</td><td align="left">-mx9</td><td align="left"><ext-link ext-link-type="uri" xlink:href="https://www.7-zip.org/">https://www.7-zip.org/</ext-link></td></tr><tr><td align="left">Gzip</td><td align="left">-9</td><td align="left"><ext-link ext-link-type="uri" xlink:href="https://www.gnu.org/software/gzip/">https://www.gnu.org/software/gzip/</ext-link></td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec10">
      <title>Benchmark criteria selection</title>
      <p>To evaluate the performance of our proposed lossless compressor LCQS more comprehensively, as is mentioned in the introduction part, four criteria named Robustness, Compression Ratio, Compression Speed and Random Access Decompression Speed are chosen as the benchmark criteria in this paper. To accurately quantify the criteria, we redefine these four criteria clearly as follows:
<list list-type="order"><list-item><p>Robustness is calculated using the ratio of the number of the datasets that compressor can both compress and random access decompress to the number of benchmark datasets.</p></list-item><list-item><p>Compression Ratio is calculated using the ratio of the size of megabytes of the compressed datasets (With the index used for random access excluded) to the size of megabytes of the original benchmark dataset. Since Gzip and 7-zip do not support random access operation and the index is used only when random access decompression operation is carried out, the size of the metadata index used for random access decompression is excluded when calculating compression ratio. The size of the metadata index is excluded here and would be in store for assisting the evaluation of the performance of random access decompression to evaluate the performance of benchmark compressors much more general and fairer.</p></list-item><list-item><p>Compression Speed is calculated using the ratio of the size of megabytes of the original benchmark dataset to the time of seconds used to compress the dataset.</p></list-item><list-item><p>Random Access Decompression Speed is calculated using the ratio of the number of thousand lines of the given random access range interval to the time of seconds used to random access decompress it.</p></list-item></list></p>
    </sec>
    <sec id="Sec11">
      <title>Comparison results among benchmark compressors</title>
      <p>The four criteria mentioned in “<xref rid="Sec10" ref-type="sec">Benchmark criteria selection</xref>” section are evaluated in detail one by one in this section. The best compression results for each dataset in all the following tables are bolded and “-” mean that this file cannot be compressed or random access decompressed by that compressor.</p>
      <sec id="Sec12">
        <title>Performance of robustness and compression ratio</title>
        <p>Table <xref rid="Tab3" ref-type="table">3</xref> shows the compression ratio results which compared LCQS with the other three compressors. Regarding robustness, AQUa [<xref ref-type="bibr" rid="CR8">8</xref>] performs the worst. LCQS, together with Gzip and 7-zip, perform the best and can compress all the benchmark datasets. Regarding the compression ratio, LCQS outperforms all the datasets with an obvious advantage and file sizes have reduced by up to 18.92%, 16.68% and 28.78% respectively when benchmarking LCQS against AQUa, 7-zip at best compression mode and Gzip at best compression mode. Therefore, LCQS performs the best on both robustness and compression ratio and thus its effectiveness is validated. Detailed comparison results are presented in Table <xref rid="Tab3" ref-type="table">3</xref>.
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Comparison Results of Compression Ratio</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Datasets</th><th align="left" colspan="4">Compression Ratio</th><th align="left" colspan="3">LCQS File Size Reduction Versus (%)</th></tr><tr><th align="left"/><th align="left">LCQS</th><th align="left">AQUa</th><th align="left">7-zip best</th><th align="left">Gzip best</th><th align="left">AQUa</th><th align="left">7-zip best</th><th align="left">Gzip best</th></tr></thead><tbody><tr><td align="left">1_01</td><td align="left"><bold>3.4388</bold></td><td align="left">2.9726</td><td align="left">2.9351</td><td align="left">2.5884</td><td align="left">13.56</td><td align="left">14.65</td><td align="left">24.73</td></tr><tr><td align="left">1_02</td><td align="left"><bold>3.3241</bold></td><td align="left">2.9296</td><td align="left">2.8668</td><td align="left">2.5365</td><td align="left">11.87</td><td align="left">13.76</td><td align="left">23.69</td></tr><tr><td align="left">2_01</td><td align="left"><bold>3.5023</bold></td><td align="left">3.1762</td><td align="left">3.1570</td><td align="left">2.8401</td><td align="left">9.31</td><td align="left">9.86</td><td align="left">18.91</td></tr><tr><td align="left">2_02</td><td align="left"><bold>2.4592</bold></td><td align="left">2.1817</td><td align="left">2.2387</td><td align="left">2.0756</td><td align="left">11.29</td><td align="left">8.97</td><td align="left">15.60</td></tr><tr><td align="left">3_01</td><td align="left"><bold>2.5911</bold></td><td align="left">-</td><td align="left">2.3159</td><td align="left">2.1041</td><td align="left">-</td><td align="left">10.62</td><td align="left">18.80</td></tr><tr><td align="left">4_01</td><td align="left"><bold>2.7909</bold></td><td align="left">2.5730</td><td align="left">2.5093</td><td align="left">2.2453</td><td align="left">7.81</td><td align="left">10.09</td><td align="left">19.55</td></tr><tr><td align="left">4_02</td><td align="left"><bold>2.5749</bold></td><td align="left">2.3483</td><td align="left">2.3099</td><td align="left">2.0933</td><td align="left">8.80</td><td align="left">10.29</td><td align="left">18.70</td></tr><tr><td align="left">5_02</td><td align="left"><bold>2.8598</bold></td><td align="left">2.5795</td><td align="left">2.5400</td><td align="left">2.2735</td><td align="left">9.80</td><td align="left">11.18</td><td align="left">20.50</td></tr><tr><td align="left">5_01</td><td align="left"><bold>3.2533</bold></td><td align="left">2.8602</td><td align="left">2.8276</td><td align="left">2.4974</td><td align="left">12.08</td><td align="left">13.09</td><td align="left">23.23</td></tr><tr><td align="left">6_01</td><td align="left"><bold>3.9660</bold></td><td align="left">3.2156</td><td align="left">3.3046</td><td align="left">2.8245</td><td align="left"><bold>18.92</bold></td><td align="left"><bold>16.68</bold></td><td align="left"><bold>28.78</bold></td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec13">
        <title>Performance of compression speed</title>
        <p>Table <xref rid="Tab4" ref-type="table">4</xref> shows the compression speed results which compared LCQS with the other three compressors. Regarding the compression speed, LCQS outperforms almost all benchmark datasets except the result on dataset 3_01 compressed by Gzip. The acceleration ratios have increased by up to 29.1x, 8.4x, and 4.3x when benchmarking LCQS against AQUa, 7-zip at best compression mode and Gzip at best compression mode respectively. Besides, LCQS’s compression speed tends to scale linearly with the increasing datasets to be compressed due to its high parallelization characteristic. Our test computer has 16 hyper-threaded cores and LCQS can occupy almost all the whole 3200% CPU. To be concluded, LCQS has superior advantages over compression speed and is expected to be applied in real practical scenarios of large datasets due to its high scalability.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Comparison Results of Compression Speed</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Datasets</th><th align="left" colspan="4">Compression Speed (MB/s)</th><th align="left" colspan="3">LCQS Accelerating Ratio Versus%</th></tr><tr><th align="left"/><th align="left">LCQS</th><th align="left">AQUa</th><th align="left">7-zip best</th><th align="left">Gzip best</th><th align="left">AQUa</th><th align="left">7-zip best</th><th align="left">Gzip best</th></tr></thead><tbody><tr><td align="left">1_01</td><td align="left"><bold>2.32</bold></td><td align="left">0.31</td><td align="left">1.09</td><td align="left">2.25</td><td align="left">648%</td><td align="left">113%</td><td align="left">3%</td></tr><tr><td align="left">1_02</td><td align="left"><bold>2.29</bold></td><td align="left">0.31</td><td align="left">1.04</td><td align="left">1.79</td><td align="left">639%</td><td align="left">120%</td><td align="left">28%</td></tr><tr><td align="left">2_01</td><td align="left"><bold>5.15</bold></td><td align="left">0.30</td><td align="left">1.35</td><td align="left">1.58</td><td align="left">1617%</td><td align="left">281%</td><td align="left">226%</td></tr><tr><td align="left">2_02</td><td align="left"><bold>4.55</bold></td><td align="left">0.26</td><td align="left">1.34</td><td align="left">1.88</td><td align="left">1650%</td><td align="left">240%</td><td align="left">142%</td></tr><tr><td align="left">3_01</td><td align="left">4.63</td><td align="left">-</td><td align="left">0.98</td><td align="left"><bold>5.84</bold></td><td align="left">-</td><td align="left">372%</td><td align="left">-21%</td></tr><tr><td align="left">4_01</td><td align="left"><bold>5.92</bold></td><td align="left">0.31</td><td align="left">0.99</td><td align="left">2.39</td><td align="left">1810%</td><td align="left">498%</td><td align="left">148%</td></tr><tr><td align="left">4_02</td><td align="left"><bold>6.12</bold></td><td align="left">0.31</td><td align="left">0.88</td><td align="left">3.84</td><td align="left">1874%</td><td align="left">595%</td><td align="left">59%</td></tr><tr><td align="left">5_02</td><td align="left"><bold>6.33</bold></td><td align="left">0.31</td><td align="left">1.00</td><td align="left">2.03</td><td align="left">1942%</td><td align="left">533%</td><td align="left">212%</td></tr><tr><td align="left">5_01</td><td align="left"><bold>9.29</bold></td><td align="left">0.31</td><td align="left">0.99</td><td align="left">1.75</td><td align="left">2897%</td><td align="left"><bold>838%</bold></td><td align="left"><bold>431%</bold></td></tr><tr><td align="left">6_01</td><td align="left"><bold>9.63</bold></td><td align="left">0.32</td><td align="left">1.09</td><td align="left">2.28</td><td align="left"><bold>2909%</bold></td><td align="left">783%</td><td align="left">322%</td></tr></tbody></table></table-wrap></p>
        <p>Table <xref rid="Tab5" ref-type="table">5</xref> shows that all the ratio of Memory Usage(GB) to CPU Usage(Thread) (hereinafter called M/C in Table <xref rid="Tab5" ref-type="table">5</xref>) of LCQS can be controlled to be less than 0.54 and about 0.45 on average, which can be satisfied by almost all ordinary computers. That is, memory usage of LCQS will not influence LCQS’s high scalability and thus makes LCQS a practical quality score compression tool for almost all computing platforms. Although the high scalability of LCQS has already outperformed all other compressors, it has not yet shown its best performance due to the hardware limit. The compression speed of LCQS would be boosted when more CPU cores are available. On the contrary, the other three compared compressors exhibit relatively low efficiency of utilizing the hardware resources (here, CPU and memory) when compared with LCQS, especially for Gzip, which results in the fall of compression performance.
<table-wrap id="Tab5"><label>Table 5</label><caption><p>Comparison Results of CPU Usage and MEMORY Usage</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Datasets</th><th align="left" colspan="4">AVERAGE CPU USAGE(%)</th><th align="left" colspan="4">AVERAGE MEMORY USAGE(GB)</th><th align="left">M/C</th></tr><tr><th align="left"/><th align="left">LCQS</th><th align="left">AQUa</th><th align="left">7-zip best</th><th align="left">Gzip best</th><th align="left">LCQS</th><th align="left">AQUa</th><th align="left">7-zip best</th><th align="left">Gzip best</th><th align="left">LCQS</th></tr></thead><tbody><tr><td align="left">1_01</td><td align="left"><bold>400</bold></td><td align="left">104</td><td align="left">176</td><td align="left">99</td><td align="left">1.32</td><td align="left">0.57</td><td align="left">0.58</td><td align="left"><bold>0.0016</bold></td><td align="left"><bold>0.33</bold></td></tr><tr><td align="left">1_02</td><td align="left"><bold>382</bold></td><td align="left">104</td><td align="left">175</td><td align="left">99</td><td align="left">1.26</td><td align="left">0.57</td><td align="left">0.56</td><td align="left"><bold>0.0017</bold></td><td align="left">0.33</td></tr><tr><td align="left">2_01</td><td align="left"><bold>900</bold></td><td align="left">105</td><td align="left">180</td><td align="left">100</td><td align="left">3.82</td><td align="left">0.6</td><td align="left">0.63</td><td align="left"><bold>0.0016</bold></td><td align="left">0.42</td></tr><tr><td align="left">2_02</td><td align="left"><bold>1036</bold></td><td align="left">105</td><td align="left">175</td><td align="left">99</td><td align="left">4.6</td><td align="left">0.61</td><td align="left">0.64</td><td align="left"><bold>0.0016</bold></td><td align="left">0.44</td></tr><tr><td align="left">3_01</td><td align="left"><bold>1298</bold></td><td align="left">-</td><td align="left">157</td><td align="left">99</td><td align="left">6.12</td><td align="left">-</td><td align="left">0.65</td><td align="left"><bold>0.0017</bold></td><td align="left">0.47</td></tr><tr><td align="left">4_01</td><td align="left"><bold>1635</bold></td><td align="left">105</td><td align="left">168</td><td align="left">99</td><td align="left">7.52</td><td align="left">0.63</td><td align="left">0.65</td><td align="left"><bold>0.0016</bold></td><td align="left">0.46</td></tr><tr><td align="left">4_02</td><td align="left"><bold>2030</bold></td><td align="left">105</td><td align="left">165</td><td align="left">99</td><td align="left">9.26</td><td align="left">0.63</td><td align="left">0.66</td><td align="left"><bold>0.0016</bold></td><td align="left">0.46</td></tr><tr><td align="left">5_02</td><td align="left"><bold>2932</bold></td><td align="left">104</td><td align="left">173</td><td align="left">100</td><td align="left">15.6</td><td align="left">0.63</td><td align="left">0.67</td><td align="left"><bold>0.0016</bold></td><td align="left">0.53</td></tr><tr><td align="left">5_01</td><td align="left"><bold>2932</bold></td><td align="left">105</td><td align="left">177</td><td align="left">100</td><td align="left">14.37</td><td align="left">0.66</td><td align="left">0.67</td><td align="left"><bold>0.0016</bold></td><td align="left">0.49</td></tr><tr><td align="left">6_01</td><td align="left"><bold>3161</bold></td><td align="left">105</td><td align="left">172</td><td align="left">100</td><td align="left">16.99</td><td align="left">0.66</td><td align="left">0.67</td><td align="left"><bold>0.0016</bold></td><td align="left">0.54</td></tr></tbody></table></table-wrap></p>
      </sec>
      <sec id="Sec14">
        <title>Performance of random access decompression speed</title>
        <p>Table <xref rid="Tab6" ref-type="table">6</xref> shows the results of random decompression speed and the extra size of the metadata index of the original file. The specific interval for each dataset is randomly generated for interval sizes ranging from 40000 to 160000. Then, random access decompression operation is applied on the specific interval.
<table-wrap id="Tab6"><label>Table 6</label><caption><p>Comparison of Random Access Decompression Functionality</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Datasets</th><th align="left" colspan="6">Random Access Decompression Speed (Thousand lines / s)</th><th align="left" colspan="2">Extra index size (%)</th></tr><tr><th align="left"/><th align="left" colspan="3">LCQS</th><th align="left" colspan="3">AQUa</th><th align="left">LCQS</th><th align="left">AQUa</th></tr><tr><th align="left"/><th align="left">40000</th><th align="left">80000</th><th align="left">160000</th><th align="left">40000</th><th align="left">80000</th><th align="left">160000</th><th align="left"/><th align="left"/></tr></thead><tbody><tr><td align="left">1_01</td><td align="left"><bold>0.65</bold></td><td align="left"><bold>1.27</bold></td><td align="left"><bold>2.67</bold></td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">40.73</td></tr><tr><td align="left">1_02</td><td align="left"><bold>0.63</bold></td><td align="left"><bold>1.21</bold></td><td align="left"><bold>2.42</bold></td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">40.73</td></tr><tr><td align="left">2_01</td><td align="left"><bold>0.55</bold></td><td align="left"><bold>1.07</bold></td><td align="left"><bold>2.11</bold></td><td align="left">0.53</td><td align="left">0.83</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">92.94</td></tr><tr><td align="left">2_02</td><td align="left"><bold>0.53</bold></td><td align="left"><bold>1.03</bold></td><td align="left"><bold>2.05</bold></td><td align="left">0.24</td><td align="left">0.47</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">93.46</td></tr><tr><td align="left">3_01</td><td align="left"><bold>0.59</bold></td><td align="left"><bold>1.00</bold></td><td align="left"><bold>1.63</bold></td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">-</td></tr><tr><td align="left">4_01</td><td align="left"><bold>0.67</bold></td><td align="left"><bold>1.31</bold></td><td align="left"><bold>2.29</bold></td><td align="left">0.33</td><td align="left">0.75</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">65.85</td></tr><tr><td align="left">4_02</td><td align="left"><bold>0.61</bold></td><td align="left"><bold>1.16</bold></td><td align="left"><bold>2.32</bold></td><td align="left">0.47</td><td align="left">0.61</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">55.7</td></tr><tr><td align="left">5_02</td><td align="left"><bold>0.45</bold></td><td align="left"><bold>0.94</bold></td><td align="left"><bold>1.90</bold></td><td align="left">0.35</td><td align="left">0.78</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">56.62</td></tr><tr><td align="left">5_01</td><td align="left"><bold>0.63</bold></td><td align="left"><bold>1.23</bold></td><td align="left"><bold>2.29</bold></td><td align="left">0.26</td><td align="left">0.40</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">39.18</td></tr><tr><td align="left">6_01</td><td align="left"><bold>0.52</bold></td><td align="left"><bold>1.05</bold></td><td align="left"><bold>1.44</bold></td><td align="left">0.40</td><td align="left">0.65</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">41.79</td></tr><tr><td align="left">Average</td><td align="left"><bold>0.58</bold></td><td align="left"><bold>1.13</bold></td><td align="left"><bold>2.11</bold></td><td align="left">0.37</td><td align="left">0.64</td><td align="left">-</td><td align="left"><bold>0</bold></td><td align="left">58.56</td></tr></tbody></table></table-wrap></p>
        <p>Concerning the time needed to random access to the given lines, our proposed LCQS outperforms all the ten benchmark datasets and exhibits high and stable performance when compared with AQUa. Regarding the random access decompression speed of thousand lines per second, our LCQS outperforms all the ten benchmark datasets and the acceleration ratios have increased by up to 1.4x and 2.1x when benchmarking LCQS against AQUa at the range interval of 40000 and 80000 respectively. Furthermore, LCQS exhibits strong scalability since the speed tends to scale almost linearly with the increasing range interval. Regarding the extra file size introduced by achieving random access decompression function, LCQS does not need any extra index size since the light-weight index occupies only several bytes’ space and has already been packed into the compressed file.</p>
        <p>On the contrary, AQUa designs a fine-grained and uncompressed index structure to enable ultrafast random access to the compressed file. Therefore, AQUa needs a large index file whose size ranges from 58.56% (average) to 93.46% (worst case) of the size of its uncompressed file. Concerning the robustness of random access decompression, different from AQUa which fails to apply operations with some range intervals and some benchmark datasets, LCQS can complete all random access operations with any range intervals on all benchmark datasets.</p>
      </sec>
    </sec>
    <sec id="Sec15">
      <title>Optimization of libzpaq library using sIMD technique</title>
      <p>Table <xref rid="Tab7" ref-type="table">7</xref> shows the result which compared optimized libzpaq using SIMD technique LCQS with the original libzpaq. As is mentioned in “<xref rid="Sec6" ref-type="sec">Parallelization method for libzpaq using SIMD technique</xref>” section, two main versions of JIT and NON-JIT are both optimized using the same SIMD technique. Our optimized library libzpaq outperforms both original JIT and NON-JIT version and makes some big improvements on the compression speed by up to 22.35% and 22.95% respectively. Detailed information can be seen in Table <xref rid="Tab7" ref-type="table">7</xref>.
<table-wrap id="Tab7"><label>Table 7</label><caption><p>Optimization Result of Libzpaq Library Using SIMD</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Datasets</th><th align="left" colspan="2">Improvements (%)</th></tr><tr><th align="left"/><th align="left">JIT</th><th align="left">NON-JIT</th></tr></thead><tbody><tr><td align="left">1_01</td><td align="left"><bold>22.35</bold></td><td align="left">18.63</td></tr><tr><td align="left">1_02</td><td align="left">20.33</td><td align="left">21.55</td></tr><tr><td align="left">2_01</td><td align="left">16.15</td><td align="left">16.43</td></tr><tr><td align="left">2_02</td><td align="left">16.35</td><td align="left">16.17</td></tr><tr><td align="left">3_01</td><td align="left">16.17</td><td align="left">19.17</td></tr><tr><td align="left">4_01</td><td align="left">16.75</td><td align="left">19.96</td></tr><tr><td align="left">4_02</td><td align="left">16.52</td><td align="left">19.16</td></tr><tr><td align="left">5_02</td><td align="left">12.27</td><td align="left">19.47</td></tr><tr><td align="left">5_01</td><td align="left">15.96</td><td align="left"><bold>22.95</bold></td></tr></tbody></table></table-wrap></p>
    </sec>
  </sec>
  <sec id="Sec16" sec-type="conclusion">
    <title>Conclusions</title>
    <p>Tremendous progress of NGS in recent decades enables high throughput of the production of the FASTQ files. However, it also poses a big challenge to the existing lossless quality score compression tools. Therefore, LCQS, as an efficient lossless compression method of quality scores with random access functionality, is proposed in this paper.</p>
    <p>The performance of LCQS was evaluated on ten benchmark real-world quality score datasets. Experimental results reveal that our compressor LCQS outperforms all compared compressors on all criteria except for the compression speed on the dataset SRR1284073. LCQS also exhibits the strongest scalability and thus is an efficient lossless compressor for practical usage. Meanwhile, an independent optimized backend compression library is developed and can be easily applied to boost the existing compression tools of quality score or bioinformatics-related data.</p>
    <p>For future work, we attempt to improve the compression ratio by incorporating the existing deep learning techniques to capture the complex context information of quality scores and investigate the possibility of speed-up of libzpaq by utilizing GPU hardware. Besides, we would try to redesign and apply our quality score (In FASTQ format files) compressor LCQS for the varied length quality scores in SAM format file.</p>
  </sec>
  <sec id="Sec17">
    <title>Availability and requirements</title>
    <p>Project name: LCQS Project website: <ext-link ext-link-type="uri" xlink:href="https://github.com/SCUT-CCNL/LCQS">https://github.com/SCUT-CCNL/LCQS</ext-link>Operating systems: Linux Programming language: C/C++ Other requirements: GCC compiler (Version 4.9+ is better)License: The MIT License Any restrictions to use by non-academics: For commercial use, please contact the authors.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec18">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2020_3428_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1</bold> The procedure of quality score line partition: step 1.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2020_3428_MOESM2_ESM.pdf">
            <caption>
              <p><bold>Additional file 2</bold> Implementation details of adaptive k-mer packing method.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>CPU</term>
        <def>
          <p>Central Processing Unit</p>
        </def>
      </def-item>
      <def-item>
        <term>GB</term>
        <def>
          <p>GigaByte</p>
        </def>
      </def-item>
      <def-item>
        <term>GPU</term>
        <def>
          <p>Graphic Processing Unit</p>
        </def>
      </def-item>
      <def-item>
        <term>HGP</term>
        <def>
          <p>Human Genome Project</p>
        </def>
      </def-item>
      <def-item>
        <term>HTS</term>
        <def>
          <p>High-throughput Sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>JIT</term>
        <def>
          <p>Just-In-Time</p>
        </def>
      </def-item>
      <def-item>
        <term>MB</term>
        <def>
          <p>MegaByte</p>
        </def>
      </def-item>
      <def-item>
        <term>MPEG</term>
        <def>
          <p>Moving Picture Experts Group</p>
        </def>
      </def-item>
      <def-item>
        <term>NGS</term>
        <def>
          <p>Next Generation Sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>SAM</term>
        <def>
          <p>Sequence Alignment Map</p>
        </def>
      </def-item>
      <def-item>
        <term>SIMD</term>
        <def>
          <p>Single instruction, multiple data</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s12859-020-3428-7.</p>
  </sec>
  <ack>
    <p>We would like to thank the Editor and the Reviewers for their precious comments on this work which helped improve the quality of this paper. We would like to thank Mr. Yong Zhang and Yuxin Chen of Beijing Genomics Institute (BGI) for great help and guidance in the processing of genomic data in our research.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>JF and SD conceived the algorithm. BK and JF developed the program. JF, SD and BK designed and performed the experiments. JF and SD wrote, reviewed and revised the manuscript. SD guided the project. The author(s) read and approved the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work is funded by Natural Science Foundation of Guangdong Province (2015A03030817), National Natural Science Foundation of China (61976239) and Innovation Foundation of High-end Scientific Research Institutions of Zhongshan City of China (2019AG031). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p>The datasets used in the experiment are publicly available on the website https://trace.ncbi.nlm.nih.gov/Traces/sra/ and http://smash.cs.berkeley.edu/datasets.html, so the ethics approval is not required.</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p>Not applicable.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <mixed-citation publication-type="other">FASTQ File Format. <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/FASTQ_format">https://en.wikipedia.org/wiki/FASTQ_format</ext-link>. Accessed 10 Sept 2018.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hernaez</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ochoa</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Weissman</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Bilgin</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>A cluster-based approach to compression of quality scores</article-title>
        <source>Proceedings of Data Compression Conference</source>
        <year>2016</year>
        <publisher-loc>Snowbird</publisher-loc>
        <publisher-name>IEEE</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ochoa</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Hernaez</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Goldfeder</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Weissman</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Ashley</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Effect of lossy compression of quality scores on variant calling</article-title>
        <source>Brief Bioinform</source>
        <year>2017</year>
        <volume>18</volume>
        <issue>2</issue>
        <fpage>183</fpage>
        <lpage>94</lpage>
        <?supplied-pmid 26966283?>
        <pub-id pub-id-type="pmid">26966283</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bonfield</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Mahoney</surname>
            <given-names>MV</given-names>
          </name>
        </person-group>
        <article-title>Compression of fastq and sam format sequencing data</article-title>
        <source>PloS ONE</source>
        <year>2013</year>
        <volume>8</volume>
        <issue>3</issue>
        <fpage>59190</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0059190</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nicolae</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pathak</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Rajasekaran</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Lfqc: a lossless compression algorithm for fastq files</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>20</issue>
        <fpage>3276</fpage>
        <lpage>81</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv384</pub-id>
        <pub-id pub-id-type="pmid">26093148</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hernaez</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ochoa</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Rao</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ganesan</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Weissmans</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Qvz: lossy compression of quality values</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>19</issue>
        <fpage>3122</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv330</pub-id>
        <pub-id pub-id-type="pmid">26026138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <mixed-citation publication-type="other">SAM file format. <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/SAM_(file_format)">https://en.wikipedia.org/wiki/SAM_(file_format)</ext-link>. Accessed 10 Sept 2018.</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Paridaens</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Van Wallendael</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>De Neve</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Lambert</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Aqua: an adaptive framework for compression of sequencing quality scores with random access functionality</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>3</issue>
        <fpage>425</fpage>
        <lpage>33</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx607</pub-id>
        <pub-id pub-id-type="pmid">29028894</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Numanagić</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Bonfield</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Hach</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Comparison of high-throughput sequencing data compression tools</article-title>
        <source>Nat Methods</source>
        <year>2016</year>
        <volume>13</volume>
        <issue>12</issue>
        <fpage>1005</fpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4037</pub-id>
        <pub-id pub-id-type="pmid">27776113</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <mixed-citation publication-type="other">Fu JB, Ma YC, Ke BX, Dong SB. Proceedings of Bioinformatics and Biomedicine In: Bilgin A, et al., editors. Shenzhen: IEEE: 2016. p. 864–9.</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <mixed-citation publication-type="other">ZPAQ. <ext-link ext-link-type="uri" xlink:href="http://mattmahoney.net/dc/zpaq.html">http://mattmahoney.net/dc/zpaq.html</ext-link>. Accessed 10 Sept 2018.</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huang</surname>
            <given-names>ZA</given-names>
          </name>
          <name>
            <surname>Wen</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Deng</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Sun</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>Lw-fqzip 2: a parallelized reference-based compression of fastq files</article-title>
        <source>BMC Bioinformatics</source>
        <year>2017</year>
        <volume>18</volume>
        <issue>1</issue>
        <fpage>179</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-017-1588-x</pub-id>
        <pub-id pub-id-type="pmid">28320326</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <mixed-citation publication-type="other">Dataset Description. <ext-link ext-link-type="uri" xlink:href="http://smash.cs.berkeley.edu/datasets.html">http://smash.cs.berkeley.edu/datasets.html</ext-link>. Accessed 10 Sept 2018.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <mixed-citation publication-type="other">Dataset Description. <ext-link ext-link-type="uri" xlink:href="https://github.com/sfu-compbio/compression-benchmark/blob/master/samples.md">https://github.com/sfu-compbio/compression-benchmark/blob/master/samples.md</ext-link>. Accessed 10 Sept 2018.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Faraz</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ibrahim</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Can</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>S Cenk</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Scalce: boosting sequence compression algorithms using locally consistent encoding</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>23</issue>
        <fpage>3051</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts593</pub-id>
        <pub-id pub-id-type="pmid">23047557</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
