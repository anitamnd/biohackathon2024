<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Front Neuroinform</journal-id>
    <journal-id journal-id-type="iso-abbrev">Front Neuroinform</journal-id>
    <journal-id journal-id-type="publisher-id">Front. Neuroinform.</journal-id>
    <journal-title-group>
      <journal-title>Frontiers in Neuroinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1662-5196</issn>
    <publisher>
      <publisher-name>Frontiers Media S.A.</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7358899</article-id>
    <article-id pub-id-type="doi">10.3389/fninf.2020.00031</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Neuroscience</subject>
        <subj-group>
          <subject>Methods</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Pycabnn: Efficient and Extensible Software to Construct an Anatomical Basis for a Physiologically Realistic Neural Network Model</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Wichert</surname>
          <given-names>Ines</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff2">
          <sup>2</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/956659/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Jee</surname>
          <given-names>Sanghun</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff3">
          <sup>3</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/931483/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>De Schutter</surname>
          <given-names>Erik</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff4">
          <sup>4</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/132/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hong</surname>
          <given-names>Sungho</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="corresp" rid="c001">
          <sup>*</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/262352/overview"/>
      </contrib>
    </contrib-group>
    <aff id="aff1"><sup>1</sup><institution>Computational Neuroscience Unit, Okinawa Institute of Science and Technology</institution>, <addr-line>Onna</addr-line>, <country>Japan</country></aff>
    <aff id="aff2"><sup>2</sup><institution>Bernstein Center for Computational Neuroscience Berlin</institution>, <addr-line>Berlin</addr-line>, <country>Germany</country></aff>
    <aff id="aff3"><sup>3</sup><institution>Department of Life Science, Korea University</institution>, <addr-line>Seoul</addr-line>, <country>South Korea</country></aff>
    <aff id="aff4"><sup>4</sup><institution>Theoretical Neurobiology, University of Antwerp</institution>, <addr-line>Antwerpen</addr-line>, <country>Belgium</country></aff>
    <author-notes>
      <fn fn-type="edited-by">
        <p>Edited by: Gaute T. Einevoll, Norwegian University of Life Sciences, Norway</p>
      </fn>
      <fn fn-type="edited-by">
        <p>Reviewed by: Michael Wolfgang Reimann, École Polytechnique Fédérale de Lausanne, Switzerland; William W. Lytton, SUNY Downstate Medical Center, United States</p>
      </fn>
      <corresp id="c001">*Correspondence: Sungho Hong, <email>shhong@oist.jp</email></corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>07</day>
      <month>7</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>14</volume>
    <elocation-id>31</elocation-id>
    <history>
      <date date-type="received">
        <day>16</day>
        <month>3</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>16</day>
        <month>6</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2020 Wichert, Jee, De Schutter and Hong.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <copyright-holder>Wichert, Jee, De Schutter and Hong</copyright-holder>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License (CC BY). The use, distribution or reproduction in other forums is permitted, provided the original author(s) and the copyright owner(s) are credited and that the original publication in this journal is cited, in accordance with accepted academic practice. No use, distribution or reproduction is permitted which does not comply with these terms.</license-p>
      </license>
    </permissions>
    <abstract>
      <p>Physiologically detailed models of neural networks are an important tool for studying how biophysical mechanisms impact neural information processing. An important, fundamental step in constructing such a model is determining where neurons are placed and how they connect to each other, based on known anatomical properties and constraints given by experimental data. Here we present an open-source software tool, pycabnn, that is dedicated to generating an anatomical model, which serves as the basis of a full network model. In pycabnn, we implemented efficient algorithms for generating physiologically realistic cell positions and for determining connectivity based on extended geometrical structures such as axonal and dendritic morphology. We demonstrate the capabilities and performance of pycabnn by using an example, a network model of the cerebellar granular layer, which requires generating more than half a million cells and computing their mutual connectivity. We show that pycabnn is efficient enough to carry out all the required tasks on a laptop computer within reasonable runtime, although it can also run in a parallel computing environment. Written purely in Python with limited external dependencies, pycabnn is easy to use and extend, and it can be a useful tool for computational neural network studies in the future.</p>
    </abstract>
    <kwd-group>
      <kwd>neural network model</kwd>
      <kwd>anatomical basis</kwd>
      <kwd>cell position</kwd>
      <kwd>network connectivity</kwd>
      <kwd>cerebellum</kwd>
      <kwd>cerebellar granule cell</kwd>
      <kwd>Python</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source id="cn001">Okinawa Institute of Science and Technology Graduate University<named-content content-type="fundref-id">10.13039/501100004199</named-content></funding-source>
      </award-group>
    </funding-group>
    <counts>
      <fig-count count="6"/>
      <table-count count="0"/>
      <equation-count count="1"/>
      <ref-count count="29"/>
      <page-count count="11"/>
      <word-count count="0"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="S1">
    <title>Introduction</title>
    <p>Physiologically realistic neural network simulations are becoming increasingly important in neurobiology studies as they allow investigating experimentally identified biophysical features of a system (<xref rid="B11" ref-type="bibr">Einevoll et al., 2019</xref>). However, a large number of network models rely on random anatomical configurations, such as a random positioning of cells in space, and/or random connectivity between them, even when physiological realism is pursued. Those models contradict a growing number of experimental discoveries that reveal non-random anatomical features in diverse neural systems. For example, the locations of cells are not entirely random (<xref rid="B29" ref-type="bibr">Yellott, 1983</xref>; <xref rid="B9" ref-type="bibr">Eglen, 2012</xref>; <xref rid="B16" ref-type="bibr">Jiao et al., 2014</xref>; <xref rid="B19" ref-type="bibr">Maruoka et al., 2017</xref>; <xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>). The probability of electric and synaptic connections between two cells depends on their mutual distance (<xref rid="B7" ref-type="bibr">Dugué et al., 2009</xref>; <xref rid="B23" ref-type="bibr">Rieubland et al., 2014</xref>).</p>
    <p>Furthermore, recent computational studies demonstrated the functional importance of specific connectivity. In a network, distance limits the spreading of activity from one neuron to others and therefore contributes to localized activity (<xref rid="B21" ref-type="bibr">Pyle and Rosenbaum, 2017</xref>; <xref rid="B24" ref-type="bibr">Rosenbaum et al., 2017</xref>). Also, if a network has geometric regularity in axonal morphology, patterning of network activity in 3D can emerge (<xref rid="B26" ref-type="bibr">Sudhakar et al., 2017</xref>). However, there have not been many easily usable tools that address specifically and systematically the problem of building an anatomical foundation of a neural network model.</p>
    <p>In this paper, we present <italic>pycabnn</italic>, a Python tool for Constructing an Anatomical Basis of a Neural Network model. Pycabnn determines positions of cellular structures such as neurons and presynaptic terminals and finds their connectivity, based on experimental measured conditions and physiologically plausible assumptions.</p>
    <p>Pycabnn is originally created as a replacement of our previous software, the Boundary Representation Language (BREP), used for constructing a network model of the cerebellar granular layer (<xref rid="B26" ref-type="bibr">Sudhakar et al., 2017</xref>). BREP was written in scheme and compiled into a native binary executable by Chicken Scheme<sup><xref ref-type="fn" rid="footnote1">1</xref></sup> to be deployed in large-scale, multi-cpu computing environments such as cluster supercomputers. In contrast, in designing pycabnn, we emphasized making it portable, expandable, and easy to use. To this end, pycabnn is written purely in the Python language with limited external dependencies on widely used scientific packages, such as <italic>numpy</italic> and <italic>scikit-learn</italic>. It can be used flexibly in diverse computing environments, ranging from a laptop computer to a cluster supercomputer. The Python basis of pycabnn also makes it easy to add enhancements in algorithms and implementations, which significantly improve the performance, compared to BREP. Furthermore, pycabnn specifically aims making a structural basis, and can be used independently of how the network model is finally implemented or which simulation platform is used.</p>
    <p>We will explain our core algorithms and how they are implemented in detail in the Methods section. Then, in Results, we will demonstrate a module in pycabnn for generating positions of cells. We will explain the motivation for our core algorithms and experimental backgrounds and show an example of generating positions for various types of cells in a model of the cerebellar granular layer.</p>
    <p>We will continue to use the example of the cerebellar granular layer network to demonstrate how another module in pycabnn can be used to find connectivity between neurons. Lastly, we will compare the characteristics and simulation results of a pycabnn-generated model to a similar model that we published in <xref rid="B26" ref-type="bibr">Sudhakar et al. (2017)</xref>.</p>
  </sec>
  <sec id="S2">
    <title>Methods</title>
    <p>Pycabnn is an open-source package available at <ext-link ext-link-type="uri" xlink:href="https://github.com/CNS-oist/pycabnn">https://github.com/CNS-oist/pycabnn</ext-link>. The documentation for installation and usage can be found in that repository. A list of external packages that pycabnn depends on can be found in “requirements.txt” and “optional-requirements.txt” file in the repository.</p>
    <sec id="S2.SS1">
      <title>Generation of Cell Positions</title>
      <p>For cell bodies and other quasi-spherical cellular structures, we used a stochastic spatial sampling algorithm called Poisson disk sampling (PDS). PDS efficiently generates points covering a space uniformly, or based on a given distribution, with a given minimal distance between them and simulates stochastic dense packing of semi-hard spheres in space. In pycabnn, we implemented a variant of the Bridson algorithm (<xref rid="B4" ref-type="bibr">Bridson, 2007</xref>), which uses cubic voxels whose sides are given by <inline-formula><mml:math id="INEQ1"><mml:mrow><mml:mi>r</mml:mi><mml:mo>/</mml:mo><mml:msqrt><mml:mi>D</mml:mi></mml:msqrt></mml:mrow></mml:math></inline-formula> where <italic>r</italic> is the minimal distance between points and <italic>D</italic> is the dimensionality of the space.</p>
      <p>Initially, we mark all the voxels “eligible.” Then, we randomly select 20% of the eligible voxels and generate a random point in each selected voxel as cell position candidate. We compute mutual distances of the points and accept only the points satisfying the minimal distance condition (&gt;<italic>r</italic>). The voxels with accepted points are marked “ineligible.” Then, we begin the next round of random voxel selection with the remaining eligible voxels and perform candidate generation. We track a rejection rate of generated candidates to avoid voxels with histories of many rejections. This procedure is repeated until we reach a target number of points or run out of eligible voxels.</p>
      <p>We also implemented the maximal PDS algorithm (<xref rid="B8" ref-type="bibr">Ebeida et al., 2012</xref>), which generates points until it is impossible to add another point without violating the minimal distance condition. Our implementation of this maximal PDS is mostly the same as the Bridson sampling described above, except for an additional subdivision of voxels step: When the number of newly added points becomes smaller than 0.06% of the target number of points during the Bridson sampling procedure, we split all the eligible voxels (ancestors) into subvoxels (descendants) whose sides are a half of the parent voxel sides. We then remove all the subvoxels that are completely within a minimal distance from any of the previously generated points. Then, random points are generated only within the remaining subvoxels. If a point is accepted, an ancestor voxel containing the point is marked ineligible, just like in the Bridson algorithm, and all of its descendants (subvoxels) are removed. This subdivision step can be performed multiple times, i.e., subvoxels are divided into even smaller subvoxels whenever the number of newly added points becomes too small. As the number of accepted samples increases, the volume that eligible subvoxels can occupy eventually starts to decrease, and this accelerates the sampling procedure.</p>
      <p>Our implementation can also generate point clouds that represent multiple cell types mixed together. Rather than spawning them simultaneously, we build one point cloud per cell type sequentially. At each stage, cell positions are generated in the same way with additional rejection rules imposed by previously generated other types of cells.</p>
      <p>In some cases, cellular structures are not always distributed isotropically. For example, in the cerebellar cortex, mossy fibers are generally oriented in a sagittal direction, which results in an anisotropic distribution of synaptic terminals (<xref rid="B27" ref-type="bibr">Sultan, 2001</xref>). This can be represented by applying a scaling factor to relevant coordinates (see below).</p>
      <p>So far, all the algorithms are for packing hard spheres, but cellular structures are soft and allow small deformations for more irregular packing, leading to important differences between the generated and real cellular distribution. For example, in the case of densely packed hard spheres, the number of nearest neighbors would sharply drop as their mutual distance becomes below the minimal distance, while soft spheres would show a more continuous change, just as in experimental data (e.g., <xref ref-type="fig" rid="F4">Figure 4B</xref>). To introduce this additional irregularity, we first subtracted a small <italic>softness margin</italic> from the minimal distance, generated cell positions, and then added small Gaussian noise with standard deviation equal to the softness margin to the generated coordinates. The value of the softness margin can be determined in a several ways. If there is experimental data to compute a histogram of the nearest neighbor distances (e.g., <xref ref-type="fig" rid="F4">Figure 4B</xref> inset), a suitable softness margin can be found by comparing the histograms of the experimental and pycabnn-generated data. A softness margin can also be estimated from cell size variability data. Specifically, for a softness margin δ, we add a random number, drawn from a normal distribution <italic>N</italic>(0, δ<sup>2</sup>), to each cell position coordinate. Therefore, cell size would have a standard deviation of 2δ, which can be compared with the experimental data. In the worst case, without any data, a softness margin can be set by a reasonable assumption about how well a cell body can be compressed.</p>
    </sec>
    <sec id="S2.SS2">
      <title>Algorithms for Generating Connectivity</title>
      <sec id="S2.SS2.SSS1">
        <title>Overview</title>
        <p>Experimental data for electric and synaptic connectivity is often given in the form of a probability density function of the cell-to-cell distance or axon-to-dendrite distance, as described by the so-called Peter’s rule (<xref rid="B22" ref-type="bibr">Rees et al., 2017</xref>). In pycabnn, finding connections between spatially extended structures such as axons and dendrites takes the following steps. We first generate the locations of cell somata and then point cloud representations of dendrites and axons by using suitable generators, provided by users. Each point cloud is stored in a data structure, <italic>Query_point</italic>, along with other relevant information per point such as identifiers for the cells and compartments that they belong to. Then, we use an efficient search for the nearest neighbors with the point clouds to identify axodendritic or dendrodendritic connections and also generate necessary information for building a simulation, such as identification of pre-/post-synaptic cells, locations of synapses, axonal propagation delays, etc. Next, we explain how we perform the nearest neighbor search on the point clouds.</p>
      </sec>
      <sec id="S2.SS2.SSS2">
        <title>Algorithm for the Nearest Neighbor Search</title>
        <p>In pycabnn, the core algorithm is the K-d tree-based nearest neighbor search, implemented in a Python machine-learning package, <italic>scikit-learn</italic><sup><xref ref-type="fn" rid="footnote2">2</xref></sup>. In pycabnn, one point cloud representing either the origin or the target structure is organized in the K-d tree whereas the points of the other structure are used one by one as query points.</p>
        <p>Briefly, K-d trees are binary search trees that embed points in a <italic>k</italic>-dimensional space. To construct one from a point cloud, we first choose an arbitrary starting point and one of the spatial dimensions. Then, we define a hyperplane that passes through the point and is perpendicular to the chosen axis. This plane separates all points into a left and a right subtree. Next, we choose another axis and perpendicular hyperplane to separate the points in the subtrees again. This step is repeated with circling around the <italic>k</italic> axes until there is only one node left in each subtree, which is then called a leaf node.</p>
        <p>When searching for the nearest neighbor of a query point, we first walk down the tree. For each node, we check which side of the hyperplane that goes through the node contains points that are closer to the query point. This procedure is easy since we only have to compare the coordinate of a single axis. The step is performed until we reach a leaf node, which we then register as the “current best.” Then, we walk back up the tree. This time, we check for every node that we visit whether the other side of the hyperplane which goes through the point contains a point that is closer to the query point than the current best. That is the case when the hyperplane intersects with a hypersphere around the query point with a radius of the current best distance. If there is an intersection, we move down to the other subtree. If the leaf node that we find in this process is closer to the query point than the “current best,” we register it as a new “current best.” Then, we again walk up the tree. This iterative process terminates when we reach the root node. In order to find all points within a certain critical radius (ranged search), a similar search is performed, although this time every point that lies within this radius is stored. This algorithm enables a fast search of nearest neighbors, <italic>O</italic>(<italic>kn</italic>log<italic>n</italic>) with <italic>k</italic> being the number of dimensions and <italic>n</italic> being the number of points (<xref rid="B6" ref-type="bibr">Clarkson, 1983</xref>).</p>
      </sec>
      <sec id="S2.SS2.SSS3">
        <title>Additional Speedup Implementations</title>
        <p>In addition to the nearest neighbor search method in 3D, we also devised and used a 2D projection method, which takes advantage of regularity in the geometry of axon bundles. For example, in the cerebellar cortex, parallel fibers are densely packed, long (a few millimeters) axons that extend along a transverse axis. To represent the fibers in a 3D scheme, we need to generate at least a hundred or more points per axon. However, since they approximately only run in a transverse direction, we can represent them as points projected to a 2D sagittal plane (<xref ref-type="fig" rid="F1">Figure 1</xref>). After projection, a two-dimensional tree can be used to find connections, and as they are now only represented by one point, it is sufficient to only perform one nearest neighbor search per axon. The only additional comparison in the projected axis is necessary to check whether the found points lie within the axonal stretch, making true nearest neighbors in 3D. This method dramatically increases both speed and resource efficiency. Apart from these advantages, this method leads to a more realistic connection density along an axon, since connections are found in a cylindrical region around the axon rather than on the bead-like structure from radii around finite sampled points, which can lead to inaccuracies due to discretization.</p>
        <fig id="F1" position="float">
          <label>FIGURE 1</label>
          <caption>
            <p>Projection method. An example neuron with an extended morphology (blue) is innervated by multiple axons (black lines), running parallel in 3D. Black dots are axon endpoints and dotted lines are extrapolations of the axons. We project the morphology to a 2D plane (gray), which is orthogonal to the axon direction. The axons are also projected as points (x marks). The axon-cell intersection points are first found in the 2D projection plane (red x’s) and are backtraced to determine whether they correspond to true intersection points in 3D (red dot) or not (yellow dot).</p>
          </caption>
          <graphic xlink:href="fninf-14-00031-g001"/>
        </fig>
        <p>To further speed up the process and make effective use of computing power, the search process can be parallelized and performed in cluster supercomputers. We employed a parallel map-and-reduce model of computation and incorporated the package <italic>ipyparallel</italic><sup><xref ref-type="fn" rid="footnote3">3</xref></sup>, which provides an easy-to-use implementation. In the beginning, we generated point clouds for given cell types, which are packaged in the <italic>Query_point</italic> data structure. Given a source and target point cloud, a K-d tree is constructed from the bigger one at a master computing node, and distributed to multiple worker nodes. Then, we grouped points in the other cloud into chunks, and scattered them to the workers for the parallel nearest neighbor searches. Finally, the results are gathered back to the master node to be saved as files.</p>
      </sec>
    </sec>
    <sec id="S2.SS3">
      <title>Program Structure</title>
      <p><xref ref-type="fig" rid="F2">Figure 2</xref> shows the workflow with pycabnn. We begin with a specification of the model such as the model size, etc. Then, the positions of cells belonging to each type are generated sequentially, and <italic>Cell_pop</italic> objects are created based on them. After that, for each cell type, we render a point cloud by calling a rendering method of the <italic>Cell_pop</italic> module, which is stored in a <italic>Query_point</italic> object with relevant information, such as the IDs of enclosing segments. When the <italic>Query_point</italic>s are ready, we use the <italic>Connector</italic> objects to generate connectivity from one cell type to another. The last step outputs a list of (source cell ID, target cell ID, target segment ID, distance, etc.) and stores it in one or multiple files.</p>
      <fig id="F2" position="float">
        <label>FIGURE 2</label>
        <caption>
          <p>Overview of the structure of pycabnn. After sequentially generating cell body positions of given neuron types (blue), point clouds representing morphological structures are generated (green) and stored in <italic>Query_point</italic> data structures with other information for simulation. Those <italic>Query_point</italic> data are then fed into <italic>Connector’</italic>s (red) that perform the nearest neighbor search and generate connectivity data in a format that a simulator can take as an input.</p>
        </caption>
        <graphic xlink:href="fninf-14-00031-g002"/>
      </fig>
    </sec>
    <sec id="S2.SS4">
      <title>Data Generation and Simulation Procedure</title>
      <p>For an example of cell position generation in section “Generation of Cell Positions,” we created a position model of the granular layer, with a size of 700 μm (mediolateral) × 700 μm (sagittal) × 200 μm (vertical) in the rodent cerebellum. We sequentially generated Golgi cells (GoC), glomeruli (Glo), and granule cells (GC). We chose this order since we considered that generating the GC positions lastly would be better for replicating the dense volume-filling by GCs seen in experimental data (<xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>).</p>
      <p>For each cell type, we first computed the target number of cells, <italic>n</italic><sub><italic>cell</italic></sub>, from experimental data of the cell densities (see section “Results”). When the target volume is <italic>V</italic>, the predicted minimal distance based on the complete filling assumption, <italic>d</italic><sub><italic>c</italic></sub>, is</p>
      <disp-formula id="S2.Ex1">
        <mml:math id="M1">
          <mml:mrow>
            <mml:mrow>
              <mml:mi>V</mml:mi>
              <mml:mo>=</mml:mo>
              <mml:mrow>
                <mml:mrow>
                  <mml:msub>
                    <mml:mi>n</mml:mi>
                    <mml:mrow>
                      <mml:mi>c</mml:mi>
                      <mml:mo>⁢</mml:mo>
                      <mml:mi>e</mml:mi>
                      <mml:mo>⁢</mml:mo>
                      <mml:mi>l</mml:mi>
                      <mml:mo>⁢</mml:mo>
                      <mml:mi>l</mml:mi>
                    </mml:mrow>
                  </mml:msub>
                  <mml:mo>⋅</mml:mo>
                  <mml:mfrac>
                    <mml:mn>4</mml:mn>
                    <mml:mn>3</mml:mn>
                  </mml:mfrac>
                </mml:mrow>
                <mml:mo>⁢</mml:mo>
                <mml:mpadded width="+2.8pt">
                  <mml:mi mathvariant="normal">π</mml:mi>
                </mml:mpadded>
                <mml:mo>⁢</mml:mo>
                <mml:mpadded width="+5.6pt">
                  <mml:msup>
                    <mml:mrow>
                      <mml:mo>(</mml:mo>
                      <mml:mfrac>
                        <mml:msub>
                          <mml:mi>d</mml:mi>
                          <mml:mi>c</mml:mi>
                        </mml:msub>
                        <mml:mn>2</mml:mn>
                      </mml:mfrac>
                      <mml:mo>)</mml:mo>
                    </mml:mrow>
                    <mml:mn>3</mml:mn>
                  </mml:msup>
                </mml:mpadded>
              </mml:mrow>
              <mml:mo rspace="8.1pt">⟹</mml:mo>
              <mml:msub>
                <mml:mi>d</mml:mi>
                <mml:mi>c</mml:mi>
              </mml:msub>
              <mml:mo>=</mml:mo>
              <mml:msup>
                <mml:mrow>
                  <mml:mo>(</mml:mo>
                  <mml:mfrac>
                    <mml:mrow>
                      <mml:mpadded width="+2.8pt">
                        <mml:mn>6</mml:mn>
                      </mml:mpadded>
                      <mml:mo>⁢</mml:mo>
                      <mml:mi>V</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mpadded width="+2.8pt">
                        <mml:mi mathvariant="normal">π</mml:mi>
                      </mml:mpadded>
                      <mml:mo>⁢</mml:mo>
                      <mml:msub>
                        <mml:mi>n</mml:mi>
                        <mml:mrow>
                          <mml:mi>c</mml:mi>
                          <mml:mo>⁢</mml:mo>
                          <mml:mi>e</mml:mi>
                          <mml:mo>⁢</mml:mo>
                          <mml:mi>l</mml:mi>
                          <mml:mo>⁢</mml:mo>
                          <mml:mi>l</mml:mi>
                        </mml:mrow>
                      </mml:msub>
                    </mml:mrow>
                  </mml:mfrac>
                  <mml:mo>)</mml:mo>
                </mml:mrow>
                <mml:mrow>
                  <mml:mn>1</mml:mn>
                  <mml:mo>/</mml:mo>
                  <mml:mn>3</mml:mn>
                </mml:mrow>
              </mml:msup>
            </mml:mrow>
            <mml:mo>.</mml:mo>
          </mml:mrow>
        </mml:math>
      </disp-formula>
      <p>Initially, we set the first minimal distance to test, <italic>d</italic><sub>1</sub>, to a value slightly larger than <italic>d</italic><sub><italic>c</italic></sub>. Then, we iteratively searched for a threshold value, <italic>d</italic><sub>θ</sub>, where a slight increase causes the number of generated cells to become smaller than <italic>n</italic><sub><italic>cell</italic></sub>. We also considered the anisotropy in the Glo distribution such that the Glo-to-Glo distance is about three times larger in the mediolateral than parasagittal direction (<xref rid="B27" ref-type="bibr">Sultan, 2001</xref>), and used a squeezed coordinate system for Glos (see section “Generation of Cell Positions” for details of this procedure). Since our algorithms are stochastic, the same minimal distance parameter can lead to cell distributions with a different density. To check this, we ran the maximal PDS algorithm with <italic>d</italic><sub>θ</sub> to generate as many cells as possible and monitored whether the deviation in their density from the target is small (&lt;0.01%).</p>
      <p>Furthermore, to avoid boundary effects, we generated cells in an extended volume that is 50 μm larger in every axis than the target volume and removed all the cells contained in 25 μm-wide strips at boundaries. Then, all the coordinates are shifted by 25 μm so that the lowest corner of the volume becomes (<italic>x</italic>, <italic>y</italic>, <italic>z</italic>) = (0, 0, 0) again. All the cell positions are generated with a MacBook Pro (2.9 GHz Intel Core i7 with 16 GB RAM; Apple Inc., CA, United States) in single-core mode.</p>
      <p>In section “Generation of Connectivity,” we generated the connectivity for a published network model (<xref rid="B26" ref-type="bibr">Sudhakar et al., 2017</xref>). For a better comparison of results, we used the same cellular positions as one of the simulations in the study, instead of the cell position generator of pycabnn. Then, we ran BREP, the software used in <xref rid="B26" ref-type="bibr">Sudhakar et al. (2017)</xref>, and pycabnn with the same cell position data, in the OIST <italic>sango</italic> cluster supercomputer with 120 cores (Intel Xeon E5-2680v3, 5 GB RAM per cpu). We ran the performance tests of pycabnn with the same setup as mentioned above.</p>
      <p>Network simulations, based on the connections by BREP or pycabnn, ran in the <italic>sango</italic> cluster computer with 200 cores (see above). We used the exactly the same model code<sup><xref ref-type="fn" rid="footnote4">4</xref></sup> built on the NEURON 7.4 simulation platform and used identical parameters to those reported in <xref rid="B26" ref-type="bibr">Sudhakar et al. (2017)</xref> other than the connectivity. The simulation paradigm was the same as for Figures 2E–H in <xref rid="B26" ref-type="bibr">Sudhakar et al. (2017)</xref> (with gap junctions) where a small number of mossy fibers fired at 60 Hz, beginning from <italic>t</italic> = 500 ms.</p>
    </sec>
  </sec>
  <sec id="S3">
    <title>Results</title>
    <p>Here, we show an example of how pycabnn is used and demonstrate its performance with a network model for the granular layer of the rodent cerebellar cortex. Briefly, this model is composed of two cell types, excitatory granular cells (GC) and inhibitory Golgi cells (GoC). Both types of neurons receive external inputs from mossy fibers (MF) that enter from the bottom of the granular layer, and branch to form glomeruli (Glo), distinctive intertwinings between MF presynaptic terminals, GC dendrites, and GoC axons. Each GC emits a long axon that initially ascends in a vertical direction, and bifurcates in another region called the molecular layer, to travel extensively in a transverse/mediolateral direction. GoCs receive excitatory inputs both from the ascending segment (ascending axon; AA) and the transversely stretched part (parallel fiber; PF), in addition to the MF input.</p>
    <sec id="S3.SS1">
      <title>Generation of Cell Positions</title>
      <p>In many neural systems, positions of the cells are not entirely random but often follow patterns similar to densely packed soft granules, such as retinal cells (<xref rid="B29" ref-type="bibr">Yellott, 1983</xref>; <xref rid="B9" ref-type="bibr">Eglen, 2012</xref>; <xref rid="B16" ref-type="bibr">Jiao et al., 2014</xref>; <xref rid="B19" ref-type="bibr">Maruoka et al., 2017</xref>; <xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>; <xref rid="B29" ref-type="bibr">Yellott, 1983</xref>; <xref rid="B16" ref-type="bibr">Jiao et al., 2014</xref>), cortical neurons in microcolumns (<xref rid="B19" ref-type="bibr">Maruoka et al., 2017</xref>), etc. Cerebellar GCs also show a large peak in their pair correlation function, and therefore the distance to the nearest neighbor is typically around the average diameter of GCs, suggesting that they are densely packed (<xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>). The cell position generator of pycabnn employs an efficient algorithm, called the Poisson disk sampling (PDS), for generating points in a densely packed system, with a capability to generate heterogeneous cell populations (see section “Methods”). In particular, we implemented the maximal PDS algorithm by <xref rid="B8" ref-type="bibr">Ebeida et al. (2012)</xref> that finds a maximal filling of a volume by balls, in which an additional ball cannot be inserted without violating a minimal distance condition. For example, <xref ref-type="fig" rid="F3">Figure 3</xref> shows uniformly distributed points in 2D, generated by the algorithm, as the positions of mossy fibers (MF) entering the cerebellar granular layer, with a density ρ<sub>MF</sub> = 1650 mm<sup>–2</sup> (<xref rid="B26" ref-type="bibr">Sudhakar et al., 2017</xref>) and mutual spacing <italic>r</italic><sub>MF</sub> = 20.9 μm.</p>
      <fig id="F3" position="float">
        <label>FIGURE 3</label>
        <caption>
          <p>Example of generated points by the Poisson disk sampling method. Samples are generated by the maximal PDS algorithm in 2D. The density and mutual spacing were given by ρ<sub>MF</sub> = 1650 mm<sup>– 2</sup> (<xref rid="B26" ref-type="bibr">Sudhakar et al., 2017</xref>) and <italic>r</italic><sub>MF</sub> = 20.9 μm, respectively, while each point is plotted with a diameter of 8 μm for visual clarity. Scale bar: 100 μm.</p>
        </caption>
        <graphic xlink:href="fninf-14-00031-g003"/>
      </fig>
      <p>By using the maximal PDS method in pycabnn, we sequentially generated GoCs, Glos, and GCs in a volume of 700 μm (mediolateral) × 700 μm (sagittal) × 200 μm (vertical), with densities ρ<sub>GoC</sub> = 9500 mm<sup>–3</sup> (<xref rid="B7" ref-type="bibr">Dugué et al., 2009</xref>) and ρ<sub>GC</sub> = 1.9 × 10<sup>6</sup> mm<sup>–3</sup> (<xref rid="B2" ref-type="bibr">Billings et al., 2014</xref>). For Glos, we used that each GC makes synapses to 4.5 glomeruli on average and also each glomerulus receives 15 GC dendrites on average (<xref rid="B20" ref-type="bibr">Palay and Chan-Palay, 1974</xref>), which leads to a number of glomeruli per GC = 4.5/15 = 0.3. Therefore, we used ρ<sub>Glo</sub> = 0.57 × 10<sup>6</sup> mm<sup>–3</sup>.</p>
      <p>For each cell type in this model, we determined a minimal mutual distance between cells that can achieve maximal filling of the volume with a given density, e.g., the filling where we cannot add one more cell without violating the minimal mutual distance. We found that a minimal mutual distance for GoCs was <italic>r</italic><sub>GoC</sub> = 45 μm, with a softness margin (see section “Methods”) of 1 μm, which we set by the assumption that a GoC somata is as soft as glomeruli (see below). Note that <italic>r</italic><sub>GoC</sub> is well above the diameter of GoCs, <italic>d</italic><sub>GoC</sub> = 27 μm (<xref rid="B25" ref-type="bibr">Solinas et al., 2007</xref>).</p>
      <p>Glomeruli are known to occupy about one-third of the whole volume (<xref rid="B2" ref-type="bibr">Billings et al., 2014</xref>) and are also anisotropically distributed as their mutual distance tends to be about three times larger in sagittal than in mediolateral direction (<xref rid="B27" ref-type="bibr">Sultan, 2001</xref>). To satisfy these two conditions, we generated glomeruli in a virtual, squeezed volume, which is created by shrinking the sagittal axis of the original volume by 1/3 and tuned the minimal distance <italic>r</italic><sub>Glo</sub> in this squeezed volume. The glomerulus density ρ<sub>Glo</sub> estimated above predicts <italic>r</italic><sub>glo</sub> ≈ 7–9 μm, which is close to experimentally measured sizes of glomeruli in rats [8–12 and 6–9 μm along the longer and shorter axis, respectively (<xref rid="B15" ref-type="bibr">Jakab and Hámori, 1988</xref>)]. Therefore, we assumed that the minimal mutual distance between glomeruli is given by a glomerulus diameter, <italic>d</italic><sub>Glo</sub> = <italic>r</italic><sub>Glo</sub>. This diameter was also used to determine how GoCs and glomeruli avoid each other. We estimated that a softness margin of 1 μm approximately corresponds to the size variability of glomeruli above (<xref rid="B15" ref-type="bibr">Jakab and Hámori, 1988</xref>). With this softness margin, we found that, if <italic>r</italic><sub>glo</sub> = <italic>d</italic><sub>Glo</sub> = 8.39 μm, glomeruli filled the given squeezed volume with ρ<sub>Glo</sub> with approximate maximality. Lastly, we performed a similar procedure for GCs and obtained the minimal distance/diameter of a GC, <italic>r</italic><sub>GC</sub> = <italic>d</italic><sub>GC</sub> = 6.15 μm and a softness margin of 0.2 μm, which we estimated by comparing the nearest neighbor density histogram with that from the experimental data (see section “Methods” and below). This is close to but slightly smaller than an experimental measurement <italic>d</italic><sub>GC</sub> = 6.7 μm (<xref rid="B2" ref-type="bibr">Billings et al., 2014</xref>). This can be caused by our model GCs being semi-hard spheres, while real GCs and glomeruli are soft structures. Therefore, they can have larger average sizes than our models but can be squeezed better to fill the same volume.</p>
      <p><xref ref-type="fig" rid="F4">Figure 4A</xref> shows an example of generated cell populations, demonstrating that pycabnn produced the cell locations without any significant overlap within given minimal distances and/or cell body sizes. The quantitative analysis further confirmed this. Particularly for GCs, we computed a histogram of distances between two nearest neighboring cells (<xref ref-type="fig" rid="F4">Figure 4B</xref>) and this showed a peak at an average cell diameter <italic>d</italic><sub>GC</sub> = 6.15 μm that sharply declines as distance decreases. This proves that neighboring GCs are never significantly closer to each other than a GC diameter and are most likely touching each other, as in tight packing. The pair correlation function, computed by averaging the density functions around each GC, shows similar properties (<xref ref-type="fig" rid="F4">Figure 4C</xref>). Around each GC, there is no cell within 5 μm and the density of other GCs again peaks at <italic>d</italic><sub>GC</sub> = 6.15 μm. Notably, there is no significant secondary or further peak beyond that point, which would be present if GCs formed a lattice-like structure. These two features in the generated GC positions are qualitatively congruent with experimental data from human cerebellum (<xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>; <xref ref-type="fig" rid="F4">Figures 4B,C</xref> insets), which proves that our algorithm indeed produces realistic cell positions.</p>
      <fig id="F4" position="float">
        <label>FIGURE 4</label>
        <caption>
          <p>Generated cell locations in the cerebellar granular layer. <bold>(A)</bold> Sequential generation of Golgi cells (Left), glomeruli (Middle), and granule cells (Right) in a model of the granular layer in the rodent cerebellum. A small fraction of the cells is shown in a sagittal plane (<italic>x</italic>: sagittal, <italic>y</italic>: vertical direction). Scale bar: 100 μm. Physiological diameters (Golgi: 27 μm; Glomerulus: 8.39 μm; Granule: 6.15 μm) and density parameters (<xref rid="B2" ref-type="bibr">Billings et al., 2014</xref>; <xref rid="B26" ref-type="bibr">Sudhakar et al., 2017</xref>) are used. <bold>(B,C)</bold>. Nearest neighbor distribution <bold>(B)</bold> and pair correlation function <bold>(C)</bold> of the model granule cells. Insets are based on experimental data from human cerebellum (<xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>). Peak locations are different in insets since they are based on human data where the granule cells are smaller ([diameter: 4.00 ± 0.02 μm (<xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>)].</p>
        </caption>
        <graphic xlink:href="fninf-14-00031-g004"/>
      </fig>
    </sec>
    <sec id="S3.SS2">
      <title>Generation of Connectivity</title>
      <sec id="S3.SS2.SSS1">
        <title>Finding Connectivity by Cell-to-Cell Distance</title>
        <p>When experimental data for connectivity is given by the probability to connect or connection strength with respect to cell body-to-cell body distance, generating connections based on cell locations is comparatively easy.</p>
        <p>Connections from glomeruli to GCs were generated by a simple distance-based search scheme as described in <xref rid="B26" ref-type="bibr">Sudhakar et al. (2017)</xref>, which finds possible connections to distinct neighboring glomeruli within a certain range from each GC, rather than fixing the number of connections per GC. Here, we additionally considered that GCs prefer making connections to glomeruli in a sagittal direction and therefore their dendrites are stretched about four times longer in a sagittal than mediolateral direction (<xref rid="B14" ref-type="bibr">Houston et al., 2017</xref>). We incorporated this by performing our ranged search in a coordinate system that is squeezed by 1/4 in sagittal direction, similar to the coordinate scaling that we used for generating glomeruli positions.</p>
        <p>With this procedure and the cell positions determined as described in the previous section, we got realistic 4.43 ± 1.37 connections per GC when the search range in mediolateral direction was <italic>r</italic><sub><italic>GC–Glo</italic></sub> = 7.85 μm. In this case, the GC-to-Glo distance, or length of our model GC dendrite was 13.47 ± 5.81 μm, which is close to reported estimates from experimental data (<xref rid="B12" ref-type="bibr">Hámori and Somogyi, 1983</xref>; <xref rid="B2" ref-type="bibr">Billings et al., 2014</xref>).</p>
        <p>Notably, when the cell positions were purely random, we found 4.25 ± 2.12 connections per GC, and therefore a variability in GC-Glo connections increased by 56% compared to our maximal volume-filling model. Thus, there are far less outlier GCs in the volume-filling model. For example, in the random position model, GCs with more than seven or less than three connections were 7 and 21% of all GCs, respectively. On the other hand, in the volume-filling model, those GCs were only 1 and 7%, respectively. This shows that the volume-filling model provides a natural uniformization mechanism for the number of GC inputs. Similar input uniformization in densely packed neurons has also been reported previously (<xref rid="B29" ref-type="bibr">Yellott, 1983</xref>; <xref rid="B16" ref-type="bibr">Jiao et al., 2014</xref>). Our cell position and connectivity model suggests that dense packing of neurons, which explains a comparatively small volume of the cerebellum (<xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>), is related to similar functional advantages, such as improved sampling of inputs (<xref rid="B29" ref-type="bibr">Yellott, 1983</xref>) by GCs.</p>
      </sec>
      <sec id="S3.SS2.SSS2">
        <title>Finding Connectivity by Tracking Axons</title>
        <p>Establishing connectivity becomes more complicated when we need to consider extended axonal and dendritic geometry. In our example of the cerebellar granular layer, GC axons have a unique geometric feature that makes it inadequate to determine GC-to-GoC connectivity by simple distance-based rules. GC axons vertically rise from a cell body in the granular layer to branching points in the molecular layer, forming ascending axons (AA). Then, they bifurcate and elongate parallelly in a transverse direction for a few millimeters, called parallel fibers (PF). Both parts have presynaptic terminals and can make excitatory synaptic connections with other types of neurons. To fully account for this geometric configuration, it is necessary to virtually construct GC axons and track them to find potential synaptic connections with GoCs.</p>
        <p>As in our previous model (<xref rid="B26" ref-type="bibr">Sudhakar et al., 2017</xref>), we used a GoC model with two apical and two basal dendrites, both oriented randomly with a preference toward the sagittal direction. Again, as in this model, we represented them by point clouds, each containing 25 and 12 points sampled uniformly along each of the apical and basal dendrites, respectively (<xref ref-type="fig" rid="F5">Figure 5A</xref>). Note that each dendrite is segmented via the lambda rule (<xref rid="B13" ref-type="bibr">Hines and Carnevale, 1997</xref>) and all the points carry information about to which dendrites and segments they belong. This information is stored in a <italic>Query_point</italic> structure with the positions. Due to their lengths, each GC axon needs to be represented by more than at least a few hundred points. We took advantage of their geometric properties that AAs and PFs run in parallel in a vertical and transverse direction, respectively, and used a 2D projection scheme. It represents each structure as its intersection point with the plane perpendicular to it, together with endpoint coordinates in the projected direction (<xref ref-type="fig" rid="F1">Figure 1</xref>; see section “Methods”).</p>
        <fig id="F5" position="float">
          <label>FIGURE 5</label>
          <caption>
            <p>Example synaptic connections of GoC and GC axons. <bold>(A)</bold> Model GoCs (cyan: apical, magenta: basal dendrites) representing their extended morphologies. Black dots are sampling points in point clouds. Only four GoCs are shown for clarity. <bold>(B)</bold> An example synaptic connection (red dot) between a GoC and PF segment of GC axon (black line), shown in 3D (Top) and in an <italic>x-z</italic> plane (Bottom). A black dot represents a GC emitting the axon. <bold>(C)</bold> The same figure as <bold>(B)</bold> for an AA-GoC connection example. <italic>x</italic>: mediolateral, <italic>y</italic>: parasagittal, <italic>z</italic>: vertical axis.</p>
          </caption>
          <graphic xlink:href="fninf-14-00031-g005"/>
        </fig>
        <p>With generated point clouds for the two populations, pycabnn correctly identified candidate synaptic connections both for AAs and PFs (<xref ref-type="fig" rid="F5">Figures 5B,C</xref>). Compared to our previously used software BREP, pycabnn showed much superior performance. In parallel runs on a cluster computer with 120 cores, pycabnn ran 2.6 times faster (pycabnn: 333.31 ± 3.8 s, averaged over 5 runs; BREP: 864.24 ± 38.27 s, averaged over 17 runs), given the same initial cell positions. The speedup in the cluster computer could have been limited by communication cost between nodes. Indeed, on a laptop computer in single-core mode, the runtime of pycabnn was comparable to that of BREP in the cluster computing environment (829.21 ± 37.30 s, averaged over 5 runs).</p>
        <p>Other than performance differences, we found that BREP and pycabnn generated similar connectivity structures for the network model. For example, the number of synaptic connections per GoC shows a very similar distribution, both for the AA and PF case (<xref ref-type="fig" rid="F6">Figures 6A,B</xref>). When we ran the network model simulation in <xref rid="B26" ref-type="bibr">Sudhakar et al. (2017)</xref>; see section “Methods” based on the pycabnn-generated connectivity, the result was also comparable to the BREP-based model. It showed, for example, the characteristic oscillation of GoC firing, dependent on the mossy fiber firing rate (<xref ref-type="fig" rid="F6">Figure 6C</xref>).</p>
        <fig id="F6" position="float">
          <label>FIGURE 6</label>
          <caption>
            <p>The network model constructed by pycabnn replicates connectivity and behavior. <bold>(A)</bold> The number of synaptic connections between ascending axons (AA) and GoCs in the Sudhakar et al. model (left, gray) and pycabnn (right, black). <bold>(B)</bold> The same figure as A, for parallel fiber axons (PF). <bold>(C)</bold> Firing of GoCs in the Sudhakar et al. model (top, gray) and network constructed by pycabnn (bottom, black). The same data is plotted in time vs. GoC <italic>x</italic> positions (left) and also <italic>y</italic> positions (right). <italic>x</italic>: mediolateral, <italic>y</italic>: parasagittal, <italic>z</italic>: vertical axis.</p>
          </caption>
          <graphic xlink:href="fninf-14-00031-g006"/>
        </fig>
        <p>In summary, this result demonstrates that the dendritic/axonal morphology generation and connectivity determination of pycabnn produces correct, expected results, given the specifications of a network model, and with high efficiency.</p>
      </sec>
    </sec>
  </sec>
  <sec id="S4">
    <title>Discussion</title>
    <p>We introduce pycabnn, a software tool to construct an anatomical basis for a physiological, large-scale neural network simulation. Pycabnn is built with efficient algorithms for two stages of building a model, generating positions of neurons and determining their mutual connectivity. In the first part, we implemented efficient algorithms for stochastic packing of spheres that can be used for making a volume-filling model of cell distribution. In the second part, pycabnn uses a fast search algorithm for nearest neighbors using a K-d tree method, to determine connectivity based on the distance between cellular structures.</p>
    <p>We tested pycabnn with a physiologically detailed model of the cerebellar granular layer. We found that pycabnn can generate cell positions that are congruent with recent experimental data. As for the connectivity part, we confirmed that pycabnn generates connectivity that is closely compatible with an existing network model and simulation, showing very similar activity patterns to the previous model built with our previous software, BREP. BREP was written in scheme and compiled to a native binary program to run on distributed multiple CPUs. However, the connectivity generation by pycabnn was more efficient than by BREP, though pycabnn was written Python, an interpreted scripting language. Furthermore, the same model can be built on a single laptop computer with a reasonable runtime.</p>
    <p>The cell placement algorithm of pycabnn is suited for building a maximal volume-filling model of cell distribution. This is inspired by the experimental findings of quasi-random neuronal distributions in diverse neural systems. In particular, our major target system, the cerebellar cortex, has been shown to have such features, which were replicated by our pycabnn model. A maximal volume-filling model predicted the sizes of glomeruli and GCs given their densities based on an assumption that the volume is maximally occupied. Those sizes were close to experimental measurements, confirming that indeed the cerebellar granular layer is a densely packed system (<xref rid="B28" ref-type="bibr">Töpperwien et al., 2018</xref>). The maximal volume-filling model had implications for synaptic connectivity, primarily reducing the variability in GC-to-glomerulus connections formed by a distance-based search. It has been noted that a quasi-random cell distribution is advantageous since each neuron can sample its inputs with enhanced uniformity (<xref rid="B29" ref-type="bibr">Yellott, 1983</xref>; <xref rid="B16" ref-type="bibr">Jiao et al., 2014</xref>). This illustrates the importance of having a good cell placement model for building a network model, which was our original motivation for implementing this step in pycabnn.</p>
    <p>In particular, the average number of GC-to-glomerulus connection per GC has been repeatedly related to optimal input/output information transfer by GCs (<xref rid="B18" ref-type="bibr">Marr, 1969</xref>; <xref rid="B2" ref-type="bibr">Billings et al., 2014</xref>; <xref rid="B17" ref-type="bibr">Litwin-Kumar et al., 2017</xref>). However, the variability of connection and how it impacts information processing have been rarely studied. Our realistic position model of both GCs and glomeruli suggests that the comparatively small volume of the cerebellum resulting in dense packing of the cells contributes to reducing the connection variability and improves the information transfer by GCs, for example by uniformizing the dimensionality expansion of the mossy fiber inputs (<xref rid="B17" ref-type="bibr">Litwin-Kumar et al., 2017</xref>). However, a quantitative study on the impact of the connection variability is much beyond the scope of this paper, and we will leave it to future study.</p>
    <p>When determining network connectivity, pycabnn assumes that experimental data constraining the connections are given by the so-called Peter’s rule (<xref rid="B22" ref-type="bibr">Rees et al., 2017</xref>), predicting synapses based on the distance between cells or extended cellular structures such as dendrites and axons. Implementing this can sound straightforward, but several optimizations were made to achieve sufficient efficiency in pycabnn. For example, in the nearest neighbor search, due to the difference in complexity of building a K-d tree and performing a single search, it is generally faster to make a tree with a bigger point cloud if searches are performed between two unequal-sized clouds of a source and target. Therefore, in our implementation of the nearest neighbor search, a K-d tree is always made from a bigger point cloud and search results are adaptively repackaged depending on whether the tree is built from a source or target. Also, we implemented a 2D projection scheme (<xref ref-type="fig" rid="F1">Figure 1</xref>) that takes advantage of geometric regularity in axonal and dendritic morphology. This is particularly useful in our main application, the cerebellar cortex, where parallel fibers and ascending axons from GCs run parallel to each in one direction but can be potentially useful in other systems with similar geometrical properties. Compared to our previous software, BREP, which also used the K-d tree for connectivity determination, pycabnn ran much faster due to these implementation details designed for efficiency.</p>
    <p>By using the Peter’s rule, pycabnn inevitably shares its issues. First, Peter’s rule just describes the proportion of synapses and therefore it may not describe the general network structure. Second, it is not enough to make synapses just based on distance between axons and dendrites, since there can be several factors affecting the formation of synapses, such as neurogeometry (location, orientation and branch morphometrics) and other synaptic features including spines, shafts, gap junctions, and terminal boutons. Last, depending on at which level Peter’s rule would be applied, different results will be obtained (<xref rid="B22" ref-type="bibr">Rees et al., 2017</xref>).</p>
    <p>Pycabnn has other limitations, and we will make improvements in those aspects in the future. First of all, cell position generation is limited to a model of volume filling by hard spheres. Our approach is comparable to a recent study by <xref rid="B5" ref-type="bibr">Casali et al. (2019)</xref>, who used a different method, the Bounded Self-Avoiding Random Walk Algorithm (BSRW), which also implements cell placement without overlapping between cells within critical ranges. However, in comparisons with the experimental data, which they did not do, the experimental data (<xref ref-type="fig" rid="F4">Figures 4B,C</xref> insets) clearly shows that the minimal distance distribution is rather smooth without a discontinuity, which is the feature that a model with packed hard spheres cannot achieve. We tried to circumvent this difficulty by including random perturbation set by a softness margin parameter. In comparison, other studies explicitly modeled the packing of soft discs in two dimensions and yielded very realistic cell distributions (<xref rid="B10" ref-type="bibr">Eglen et al., 2000</xref>; <xref rid="B16" ref-type="bibr">Jiao et al., 2014</xref>). However, it is also necessary to evaluate the cell-to-cell interactions in those schemes, which can be computationally expensive. There are known efficient algorithms for simulating many-body interactions, e.g., the Barnes-Hut method (<xref rid="B1" ref-type="bibr">Barnes and Hut, 1986</xref>) that can be adapted for our purpose.</p>
    <p>Another limitation is that pycabnn can generate duplicate connections: If cell structures are close to each other within a critical range over a long enough distance, pycabnn will find a cluster of multiple adjacent connections in a small region. Although multiple, clustered connections between an axon and dendrite have been observed in real systems (<xref rid="B3" ref-type="bibr">Bloss et al., 2018</xref>), many of them can arise as artifacts in the construction of a model. A simple, possible solution is to restrict the number of connections made between any two structures, which can be done in a post-processing step. Other promising potential improvements include handling of detailed morphology of neurons via point cloud generation from a reconstructed morphology and a scheme to divide a volume and process subvolumes in parallel, and merge results for further scaling-up.</p>
    <p>Pycabnn is an open-source program written almost purely in Python 3, with dependency only on a few widely used open-source science packages, which makes using and extending pycabnn easy. Pycabnn output, containing the structural basis, can be used with most of simulation platforms. Since large-scale imaging data of cell positions and connectivity are increasingly available, we believe pycabnn, as a tool to model those aspects, will be useful for computational neural network studies in the future.</p>
  </sec>
  <sec sec-type="data-availability" id="S5">
    <title>Data Availability Statement</title>
    <p>The datasets generated for this study, together with the codes, can be found in <ext-link ext-link-type="uri" xlink:href="https://github.com/CNS-OIST/pycabnn">https://github.com/CNS-OIST/pycabnn</ext-link>.</p>
  </sec>
  <sec id="S6">
    <title>Author Contributions</title>
    <p>SH and ED conceived the research. IW and SJ wrote an initial version of the software. IW, SJ, and SH tested and revised the software. All authors wrote the manuscript and approved the submitted version.</p>
  </sec>
  <sec id="conf1">
    <title>Conflict of Interest</title>
    <p>The authors declare that the research was conducted in the absence of any commercial or financial relationships that could be construed as a potential conflict of interest.</p>
  </sec>
</body>
<back>
  <fn-group>
    <fn fn-type="financial-disclosure">
      <p><bold>Funding.</bold> This work was supported by the Okinawa Institute of Science and Technology Graduate University.</p>
    </fn>
  </fn-group>
  <ack>
    <p>We thank Marieke Töpperwien and Tim Salditt for sharing experimental data and also for providing guides for how to use them. We also thank Keiko Tanaka-Yamamoto, Yukio Yamamoto, and Werner Van Geit for their helpful discussions.</p>
  </ack>
  <fn-group>
    <fn id="footnote1">
      <label>1</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://www.call-cc.org">https://www.call-cc.org</ext-link>
      </p>
    </fn>
    <fn id="footnote2">
      <label>2</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://scikit-learn.org">https://scikit-learn.org</ext-link>
      </p>
    </fn>
    <fn id="footnote3">
      <label>3</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/ipyparallel">https://pypi.org/project/ipyparallel</ext-link>
      </p>
    </fn>
    <fn id="footnote4">
      <label>4</label>
      <p>
        <ext-link ext-link-type="uri" xlink:href="https://senselab.med.yale.edu/ModelDB/ShowModel?model=232023">https://senselab.med.yale.edu/ModelDB/ShowModel?model=232023</ext-link>
      </p>
    </fn>
  </fn-group>
  <ref-list>
    <title>References</title>
    <ref id="B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barnes</surname><given-names>J.</given-names></name><name><surname>Hut</surname><given-names>P.</given-names></name></person-group> (<year>1986</year>). <article-title>A hierarchical O(N log N) force-calculation algorithm.</article-title>
<source><italic>Nature</italic></source>
<volume>324</volume>
<fpage>446</fpage>–<lpage>449</lpage>. <pub-id pub-id-type="doi">10.1038/324446a0</pub-id></mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Billings</surname><given-names>G.</given-names></name><name><surname>Piasini</surname><given-names>E.</given-names></name><name><surname>Lörincz</surname><given-names>A.</given-names></name><name><surname>Nusser</surname><given-names>Z.</given-names></name><name><surname>Silver</surname><given-names>R. A.</given-names></name></person-group> (<year>2014</year>). <article-title>Network structure within the cerebellar input layer enables lossless sparse encoding.</article-title>
<source><italic>Neuron</italic></source>
<volume>83</volume>
<fpage>960</fpage>–<lpage>974</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2014.07.020</pub-id>
<?supplied-pmid 25123311?><pub-id pub-id-type="pmid">25123311</pub-id></mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bloss</surname><given-names>E. B.</given-names></name><name><surname>Cembrowski</surname><given-names>M. S.</given-names></name><name><surname>Karsh</surname><given-names>B.</given-names></name><name><surname>Colonell</surname><given-names>J.</given-names></name><name><surname>Fetter</surname><given-names>R. D.</given-names></name><name><surname>Spruston</surname><given-names>N.</given-names></name></person-group> (<year>2018</year>). <article-title>Single excitatory axons form clustered synapses onto CA1 pyramidal cell dendrites.</article-title>
<source><italic>Nat. Neurosci.</italic></source>
<volume>21</volume>
<fpage>353</fpage>–<lpage>363</lpage>. <pub-id pub-id-type="doi">10.1038/s41593-018-0084-6</pub-id>
<?supplied-pmid 29459763?><pub-id pub-id-type="pmid">29459763</pub-id></mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Bridson</surname><given-names>R.</given-names></name></person-group> (<year>2007</year>). “<article-title>Fast Poisson disk sampling in arbitrary dimensions</article-title>,” in <source><italic>ACM SIGGRAPH 2007 sketches on - SIGGRAPH ’07</italic></source> (<publisher-loc>New York, NY</publisher-loc>: <publisher-name>ACM Press</publisher-name>).</mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Casali</surname><given-names>S.</given-names></name><name><surname>Marenzi</surname><given-names>E.</given-names></name><name><surname>Medini</surname><given-names>C.</given-names></name><name><surname>Casellato</surname><given-names>C.</given-names></name><name><surname>D’Angelo</surname><given-names>E.</given-names></name></person-group> (<year>2019</year>). <article-title>Reconstruction and simulation of a scaffold model of the cerebellar network.</article-title>
<source><italic>Front. Neuroinformatics</italic></source>
<volume>13</volume>:<issue>37</issue>. <pub-id pub-id-type="doi">10.3389/fninf.2019.00037</pub-id>
<?supplied-pmid 31156416?><pub-id pub-id-type="pmid">31156416</pub-id></mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Clarkson</surname><given-names>K. L.</given-names></name></person-group> (<year>1983</year>). “<article-title>Fast algorithms for the all nearest neighbors problem</article-title>,” in <source><italic>24th Annual Symposium on Foundations of Computer Science (sfcs 1983)</italic></source>, <publisher-loc>Piscataway, NJ</publisher-loc>: <publisher-name>IEEE</publisher-name>, <fpage>226</fpage>–<lpage>232</lpage>.</mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dugué</surname><given-names>G. P.</given-names></name><name><surname>Brunel</surname><given-names>N.</given-names></name><name><surname>Hakim</surname><given-names>V.</given-names></name><name><surname>Schwartz</surname><given-names>E.</given-names></name><name><surname>Chat</surname><given-names>M.</given-names></name><name><surname>Lévesque</surname><given-names>M.</given-names></name><etal/></person-group> (<year>2009</year>). <article-title>Electrical coupling mediates tunable low-frequency oscillations and resonance in the cerebellar golgi cell network.</article-title>
<source><italic>Neuron</italic></source>
<volume>61</volume>
<fpage>126</fpage>–<lpage>139</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2008.11.028</pub-id>
<?supplied-pmid 19146818?><pub-id pub-id-type="pmid">19146818</pub-id></mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ebeida</surname><given-names>M. S.</given-names></name><name><surname>Mitchell</surname><given-names>S. A.</given-names></name><name><surname>Patney</surname><given-names>A.</given-names></name><name><surname>Davidson</surname><given-names>A. A.</given-names></name><name><surname>Owens</surname><given-names>J. D.</given-names></name></person-group> (<year>2012</year>). <article-title>A simple algorithm for maximal poisson-disk sampling in high dimensions.</article-title>
<source><italic>Comput. Graphics Forum</italic></source>
<volume>31</volume>
<fpage>785</fpage>–<lpage>794</lpage>. <pub-id pub-id-type="doi">10.1111/j.1467-8659.2012.03059.x</pub-id></mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Eglen</surname><given-names>S. J.</given-names></name></person-group> (<year>2012</year>). “<article-title>Cellular spacing: analysis and modelling of retinal mosaics</article-title>,” in <source><italic>Computational Systems Neurobiology</italic></source>, <role>ed.</role>
<person-group person-group-type="editor"><name><surname>Le Novère</surname><given-names>N.</given-names></name></person-group> (<publisher-loc>Dordrecht</publisher-loc>: <publisher-name>Springer Netherlands</publisher-name>), <fpage>365</fpage>–<lpage>385</lpage>. <pub-id pub-id-type="doi">10.1007/978-94-007-3858-4_12</pub-id></mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eglen</surname><given-names>S. J.</given-names></name><name><surname>van Ooyen</surname><given-names>A.</given-names></name><name><surname>Willshaw</surname><given-names>D. J.</given-names></name></person-group> (<year>2000</year>). <article-title>Lateral cell movement driven by dendritic interactions is sufficient to form retinal mosaics.</article-title>
<source><italic>Netw. Comput. Neural Syst.</italic></source>
<volume>11</volume>
<fpage>103</fpage>–<lpage>118</lpage>. <pub-id pub-id-type="doi">10.1088/0954-898X_11_1_306</pub-id></mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Einevoll</surname><given-names>G. T.</given-names></name><name><surname>Destexhe</surname><given-names>A.</given-names></name><name><surname>Diesmann</surname><given-names>M.</given-names></name><name><surname>Grün</surname><given-names>S.</given-names></name><name><surname>Jirsa</surname><given-names>V.</given-names></name><name><surname>de Kamps</surname><given-names>M.</given-names></name><etal/></person-group> (<year>2019</year>). <article-title>The scientific case for brain simulations.</article-title>
<source><italic>Neuron</italic></source>
<volume>102</volume>
<fpage>735</fpage>–<lpage>744</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2019.03.027</pub-id>
<?supplied-pmid 31121126?><pub-id pub-id-type="pmid">31121126</pub-id></mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hámori</surname><given-names>J.</given-names></name><name><surname>Somogyi</surname><given-names>J.</given-names></name></person-group> (<year>1983</year>). <article-title>Differentiation of cerebellar mossy fiber synapses in the rat: a quantitative electron microscope study.</article-title>
<source><italic>J. Comp. Neurol.</italic></source>
<volume>220</volume>
<fpage>365</fpage>–<lpage>377</lpage>. <pub-id pub-id-type="doi">10.1002/cne.902200402</pub-id>
<?supplied-pmid 6643733?><pub-id pub-id-type="pmid">6643733</pub-id></mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hines</surname><given-names>M. L.</given-names></name><name><surname>Carnevale</surname><given-names>N. T.</given-names></name></person-group> (<year>1997</year>). <article-title>The NEURON simulation environment.</article-title>
<source><italic>Neural Comput.</italic></source>
<volume>9</volume>
<fpage>1179</fpage>–<lpage>1209</lpage>. <pub-id pub-id-type="doi">10.1162/neco.1997.9.6.1179</pub-id>
<?supplied-pmid 9248061?><pub-id pub-id-type="pmid">9248061</pub-id></mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Houston</surname><given-names>C. M.</given-names></name><name><surname>Diamanti</surname><given-names>E.</given-names></name><name><surname>Diamantaki</surname><given-names>M.</given-names></name><name><surname>Kutsarova</surname><given-names>E.</given-names></name><name><surname>Cook</surname><given-names>A.</given-names></name><name><surname>Sultan</surname><given-names>F.</given-names></name><etal/></person-group> (<year>2017</year>). <article-title>Exploring the significance of morphological diversity for cerebellar granule cell excitability.</article-title>
<source><italic>Sci. Rep.</italic></source>
<volume>7</volume>:<issue>46147</issue>. <pub-id pub-id-type="doi">10.1038/srep46147</pub-id>
<?supplied-pmid 28406156?><pub-id pub-id-type="pmid">28406156</pub-id></mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jakab</surname><given-names>R. L.</given-names></name><name><surname>Hámori</surname><given-names>J.</given-names></name></person-group> (<year>1988</year>). <article-title>Quantitative morphology and synaptology of cerebellar glomeruli in the rat.</article-title>
<source><italic>Anat. Embryol.</italic></source>
<volume>179</volume>
<fpage>81</fpage>–<lpage>88</lpage>. <pub-id pub-id-type="doi">10.1007/BF00305102</pub-id>
<?supplied-pmid 3213958?><pub-id pub-id-type="pmid">3213958</pub-id></mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jiao</surname><given-names>Y.</given-names></name><name><surname>Lau</surname><given-names>T.</given-names></name><name><surname>Hatzikirou</surname><given-names>H.</given-names></name><name><surname>Meyer-Hermann</surname><given-names>M.</given-names></name><name><surname>Joseph</surname><given-names>C. C.</given-names></name><name><surname>Torquato</surname><given-names>S.</given-names></name></person-group> (<year>2014</year>). <article-title>Avian photoreceptor patterns represent a disordered hyperuniform solution to a multiscale packing problem.</article-title>
<source><italic>Phys. Rev. E Stat. Nonlin. Soft Matter Phys.</italic></source>
<volume>89</volume>:<issue>022721</issue>. <pub-id pub-id-type="doi">10.1103/PhysRevE.89.022721</pub-id>
<?supplied-pmid 25353522?><pub-id pub-id-type="pmid">25353522</pub-id></mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Litwin-Kumar</surname><given-names>A.</given-names></name><name><surname>Harris</surname><given-names>K. D.</given-names></name><name><surname>Axel</surname><given-names>R.</given-names></name><name><surname>Sompolinsky</surname><given-names>H.</given-names></name><name><surname>Abbott</surname><given-names>L. F.</given-names></name></person-group> (<year>2017</year>). <article-title>Optimal degree of synaptic connectivity.</article-title>
<source><italic>Neuron</italic></source>
<volume>93</volume>
<fpage>1153</fpage>–<lpage>1164</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2017.01.030</pub-id>
<?supplied-pmid 28215558?><pub-id pub-id-type="pmid">28215558</pub-id></mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Marr</surname><given-names>D.</given-names></name></person-group> (<year>1969</year>). <article-title>A theory of cerebellar cortex.</article-title>
<source><italic>J. Physiol.</italic></source>
<volume>202</volume>
<fpage>437</fpage>–<lpage>470</lpage>. <pub-id pub-id-type="doi">10.1113/jphysiol.1969.sp008820</pub-id>
<?supplied-pmid 5784296?><pub-id pub-id-type="pmid">5784296</pub-id></mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Maruoka</surname><given-names>H.</given-names></name><name><surname>Nakagawa</surname><given-names>N.</given-names></name><name><surname>Tsuruno</surname><given-names>S.</given-names></name><name><surname>Sakai</surname><given-names>S.</given-names></name><name><surname>Yoneda</surname><given-names>T.</given-names></name><name><surname>Hosoya</surname><given-names>T.</given-names></name></person-group> (<year>2017</year>). <article-title>Lattice system of functionally distinct cell types in the neocortex.</article-title>
<source><italic>Science</italic></source>
<volume>358</volume>
<fpage>610</fpage>–<lpage>615</lpage>. <pub-id pub-id-type="doi">10.1126/science.aam6125</pub-id>
<?supplied-pmid 29097542?><pub-id pub-id-type="pmid">29097542</pub-id></mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Palay</surname><given-names>S. L.</given-names></name><name><surname>Chan-Palay</surname><given-names>V.</given-names></name></person-group> (<year>1974</year>). <source><italic>Cerebellar Cortex.</italic></source>
<publisher-loc>Berlin</publisher-loc>: <publisher-name>Springer</publisher-name>.</mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pyle</surname><given-names>R.</given-names></name><name><surname>Rosenbaum</surname><given-names>R.</given-names></name></person-group> (<year>2017</year>). <article-title>Spatiotemporal dynamics and reliable computations in recurrent spiking neural networks.</article-title>
<source><italic>Phys. Rev. Lett.</italic></source>
<volume>118</volume>:<issue>018103</issue>. <pub-id pub-id-type="doi">10.1103/PhysRevLett.118.018103</pub-id>
<?supplied-pmid 28106418?><pub-id pub-id-type="pmid">28106418</pub-id></mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rees</surname><given-names>C. L.</given-names></name><name><surname>Moradi</surname><given-names>K.</given-names></name><name><surname>Ascoli</surname><given-names>G. A.</given-names></name></person-group> (<year>2017</year>). <article-title>Weighing the evidence in peters’ rule: does neuronal morphology predict connectivity?</article-title>
<source><italic>Trends Neurosci.</italic></source>
<volume>40</volume>
<fpage>63</fpage>–<lpage>71</lpage>. <pub-id pub-id-type="doi">10.1016/j.tins.2016.11.007</pub-id>
<?supplied-pmid 28041634?><pub-id pub-id-type="pmid">28041634</pub-id></mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rieubland</surname><given-names>S.</given-names></name><name><surname>Roth</surname><given-names>A.</given-names></name><name><surname>Häusser</surname><given-names>M.</given-names></name></person-group> (<year>2014</year>). <article-title>Structured connectivity in cerebellar inhibitory networks.</article-title>
<source><italic>Neuron</italic></source>
<volume>81</volume>
<fpage>913</fpage>–<lpage>929</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2013.12.029</pub-id>
<?supplied-pmid 24559679?><pub-id pub-id-type="pmid">24559679</pub-id></mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rosenbaum</surname><given-names>R.</given-names></name><name><surname>Smith</surname><given-names>M. A.</given-names></name><name><surname>Kohn</surname><given-names>A.</given-names></name><name><surname>Rubin</surname><given-names>J. E.</given-names></name><name><surname>Doiron</surname><given-names>B.</given-names></name></person-group> (<year>2017</year>). <article-title>The spatial structure of correlated neuronal variability.</article-title>
<source><italic>Nat. Neurosci.</italic></source>
<volume>20</volume>
<fpage>107</fpage>–<lpage>114</lpage>. <pub-id pub-id-type="doi">10.1038/nn.4433</pub-id>
<?supplied-pmid 27798630?><pub-id pub-id-type="pmid">27798630</pub-id></mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Solinas</surname><given-names>S.</given-names></name><name><surname>Forti</surname><given-names>L.</given-names></name><name><surname>Cesana</surname><given-names>E.</given-names></name><name><surname>Mapelli</surname><given-names>J.</given-names></name><name><surname>De Schutter</surname><given-names>E.</given-names></name><name><surname>D’Angelo</surname><given-names>E.</given-names></name></person-group> (<year>2007</year>). <article-title>Computational reconstruction of pacemaking and intrinsic electroresponsiveness in cerebellar Golgi cells.</article-title>
<source><italic>Front. Cell. Neurosci.</italic></source>
<volume>1</volume>:<issue>2</issue>. <pub-id pub-id-type="doi">10.3389/neuro.03.002.2007</pub-id>
<?supplied-pmid 18946520?><pub-id pub-id-type="pmid">18946520</pub-id></mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sudhakar</surname><given-names>S. K.</given-names></name><name><surname>Hong</surname><given-names>S.</given-names></name><name><surname>Raikov</surname><given-names>I.</given-names></name><name><surname>Publio</surname><given-names>R.</given-names></name><name><surname>Lang</surname><given-names>C.</given-names></name><name><surname>Close</surname><given-names>T.</given-names></name><etal/></person-group> (<year>2017</year>). <article-title>Spatiotemporal network coding of physiological mossy fiber inputs by the cerebellar granular layer.</article-title>
<source><italic>PLoS Comput. Biol.</italic></source>
<volume>13</volume>:<issue>e1005754</issue>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005754</pub-id>
<?supplied-pmid 28934196?><pub-id pub-id-type="pmid">28934196</pub-id></mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sultan</surname><given-names>F.</given-names></name></person-group> (<year>2001</year>). <article-title>Distribution of mossy fibre rosettes in the cerebellum of cat and mice: evidence for a parasagittal organization at the single fibre level.</article-title>
<source><italic>Eur. J. Neurosci.</italic></source>
<volume>13</volume>
<fpage>2123</fpage>–<lpage>2130</lpage>. <pub-id pub-id-type="doi">10.1046/j.0953-816x.2001.01593.x</pub-id>
<?supplied-pmid 11422453?><pub-id pub-id-type="pmid">11422453</pub-id></mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Töpperwien</surname><given-names>M.</given-names></name><name><surname>van der Meer</surname><given-names>F.</given-names></name><name><surname>Stadelmann</surname><given-names>C.</given-names></name><name><surname>Salditt</surname><given-names>T.</given-names></name></person-group> (<year>2018</year>). <article-title>Three-dimensional virtual histology of human cerebellum by X-ray phase-contrast tomography.</article-title>
<source><italic>Proc. Natl. Acad. Sci. U.S.A.</italic></source>
<volume>115</volume>
<fpage>6940</fpage>–<lpage>6945</lpage>. <pub-id pub-id-type="doi">10.1073/pnas.1801678115</pub-id>
<?supplied-pmid 29915047?><pub-id pub-id-type="pmid">29915047</pub-id></mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yellott</surname><given-names>J. I.</given-names></name></person-group> (<year>1983</year>). <article-title>Spectral consequences of photoreceptor sampling in the rhesus retina.</article-title>
<source><italic>Science</italic></source>
<volume>221</volume>
<fpage>382</fpage>–<lpage>385</lpage>. <pub-id pub-id-type="doi">10.1126/science.6867716</pub-id>
<?supplied-pmid 6867716?><pub-id pub-id-type="pmid">6867716</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
