<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7203750</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btaa051</article-id>
    <article-id pub-id-type="publisher-id">btaa051</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Papers</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic>BioSeqZip</italic>: a collapser of NGS redundant reads for the optimization of sequence analysis</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0003-2672-7593</contrib-id>
        <name>
          <surname>Urgese</surname>
          <given-names>Gianvito</given-names>
        </name>
        <xref ref-type="corresp" rid="btaa051-cor1"/>
        <xref ref-type="aff" rid="btaa051-aff1">b1</xref>
        <!--<email>gianvito.urgese@polito.it</email>-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Parisi</surname>
          <given-names>Emanuele</given-names>
        </name>
        <xref ref-type="aff" rid="btaa051-aff2">b2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Scicolone</surname>
          <given-names>Orazio</given-names>
        </name>
        <xref ref-type="aff" rid="btaa051-aff2">b2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Di Cataldo</surname>
          <given-names>Santa</given-names>
        </name>
        <xref ref-type="aff" rid="btaa051-aff2">b2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ficarra</surname>
          <given-names>Elisa</given-names>
        </name>
        <xref ref-type="aff" rid="btaa051-aff2">b2</xref>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Valencia</surname>
          <given-names>Alfonso</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <aff id="btaa051-aff1"><label>b1</label><institution>Interuniversity Department of Regional and Urban Studies and Planning</institution>, Politecnico di Torino, Torino, <country country="IT">Italy</country></aff>
    <aff id="btaa051-aff2"><label>b2</label><institution>Department of Control and Computer Engineering</institution>, Politecnico di Torino, Torino, <country country="IT">Italy</country></aff>
    <author-notes>
      <corresp id="btaa051-cor1">To whom correspondence should be addressed. <email>gianvito.urgese@polito.it</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>5</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2020-01-30">
      <day>30</day>
      <month>1</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>30</day>
      <month>1</month>
      <year>2020</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>36</volume>
    <issue>9</issue>
    <fpage>2705</fpage>
    <lpage>2711</lpage>
    <history>
      <date date-type="received">
        <day>05</day>
        <month>9</month>
        <year>2019</year>
      </date>
      <date date-type="rev-recd">
        <day>20</day>
        <month>12</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>1</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Â© The Author(s) 2020. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btaa051.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>High-throughput next-generation sequencing can generate huge sequence files, whose analysis requires alignment algorithms that are typically very demanding in terms of memory and computational resources. This is a significant issue, especially for machines with limited hardware capabilities. As the redundancy of the sequences typically increases with coverage, collapsing such files into compact sets of non-redundant reads has the 2-fold advantage of reducing file size and speeding-up the alignment, avoiding to map the same sequence multiple times.</p>
      </sec>
      <sec id="s2">
        <title>Method</title>
        <p><italic>BioSeqZip</italic> generates compact and sorted lists of alignment-ready non-redundant sequences, keeping track of their occurrences in the raw files as well as of their quality score information. By exploiting a memory-constrained external sorting algorithm, it can be executed on either single- or multi-sample datasets even on computers with medium computational capabilities. On request, it can even re-expand the compacted files to their original state.</p>
      </sec>
      <sec id="s3">
        <title>Results</title>
        <p>Our extensive experiments on RNA-Seq data show that <italic>BioSeqZip</italic> considerably brings down the computational costs of a standard sequence analysis pipeline, with particular benefits for the alignment procedures that typically have the highest requirements in terms of memory and execution time. In our tests, <italic>BioSeqZip</italic> was able to compact 2.7 billion of reads into 963 million of unique tags reducing the size of sequence files up to 70% and speeding-up the alignment by 50% at least.</p>
      </sec>
      <sec id="s4">
        <title>Availability and implementation</title>
        <p><italic>BioSeqZip</italic> is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/bioinformatics-polito/BioSeqZip">https://github.com/bioinformatics-polito/BioSeqZip</ext-link>.</p>
      </sec>
      <sec id="s5">
        <title>Supplementary information</title>
        <p><ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/btaa051#supplementary-data">Supplementary data</ext-link> are available at <italic>Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <counts>
      <page-count count="7"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>In ultra-high-throughput sequencing, as many as 500 k sequencing-by-synthesis operations may be run in parallel, allowing the deep sequencing of DNA and RNA molecules in short time and producing a massive amount of data to be analyzed. With the ever-increasing production of new sequence data, and the continuous necessity of re-elaborating old data to extract hidden knowledge, new paradigms for data storage and analysis are becoming more and more critical (<xref rid="btaa051-B18" ref-type="bibr">Muir <italic>et al.</italic>, 2016</xref>).</p>
    <p>DNA and RNA reads are collected in the form of formatted files whose size can exceed a terabyte, typically storing two main types of information, both encoded by ASCII strings: (i) sequences, representing the bases of the biological molecules (RNA/DNA) and (ii) quality scores, representing the reliability level of each sequenced nucleotide.</p>
    <p>The analysis of such RNA/DNA sequences starts with preliminary steps that consist of filtering the reads based on quality thresholds. Then, the high-quality reads are trimmed from the adapters and either aligned on a known reference database or assembled to construct new unknown genomes.</p>
    <p>To have a more in-depth overview of the analysis flow, we can consider the example of RNA-Seq experiments. RNA-Seq reads, in either single-end (SE) or paired-end (PE) form, are first filtered based on their quality scores and trimmed from the adapters. Then, the most reliable reads (i.e. the ones with highest quality scores) are analyzed by applying one of three main strategies, as described by <xref rid="btaa051-B2" ref-type="bibr">Conesa <italic>et al.</italic> (2016)</xref>: (i) if a reference genome is available, reads are aligned to the genome with a gaped aligner. This approach allows the identification and quantification of known transcripts as well as the discovery of novel ones. (ii) If no novel transcript discovery is needed, reads can be mapped to the reference transcriptome by using an ungapped aligner. (iii) When no genome is available, reads are usually first assembled into transcripts. Then, reads are mapped back to the assembled reference transcriptome for quantification and annotation.</p>
    <p>As far as the alignment problem is concerned, several tools are available (<xref rid="btaa051-B17" ref-type="bibr">Mazzoni and Kadarmideen, 2016</xref>), mostly making use of suffix arrays to provide faster alignment compared to traditional Dynamic Programming methods (<xref rid="btaa051-B27" ref-type="bibr">Smith and Waterman, 1981</xref>; <xref rid="btaa051-B28" ref-type="bibr">Urgese <italic>et al.</italic>, 2014</xref>). Among the most representative: BWA (<xref rid="btaa051-B16" ref-type="bibr">Li and Durbin, 2009</xref>), Bowtie2 (<xref rid="btaa051-B15" ref-type="bibr">Langmead and Salzberg, 2012</xref>), STAR (<xref rid="btaa051-B5" ref-type="bibr">Dobin <italic>et al.</italic>, 2013</xref>), Rail-RNA (<xref rid="btaa051-B19" ref-type="bibr">Nellore <italic>et al.</italic>, 2017</xref>) and Yara (<xref rid="btaa051-B26" ref-type="bibr">Siragusa, 2015</xref>). Even though the computational time of the alignment is greatly reduced compared to classic algorithms, it still remains prohibitive for most of the mediumâlow computational systems, like the work-stations that are commonly used in most bio-labs.</p>
    <p>A possible solution to this problem is collapsing all the repeated reads into a single one, reducing the number of reads that need to be analyzed, and hence the size of the read file. The advantage of this solution is 2-fold: (i) the memory required for the storage can be reduced and (ii) more efficiently, the alignment algorithms can map each unique read to the reference only once, instead of multiple times.</p>
    <p>To the best of our knowledge, there exist in the literature a few tools that already provide a collapsing option, but with several significant limitations. First of all, none of the tools to date allows controlling memory consumption. This is a critical lack, as it may make impossible to execute the collapsing programs on mid-low end platforms. Most of the tools are also limited in the type of data that can be processed. <italic>SeqCluster (SC)</italic> (<xref rid="btaa051-B22" ref-type="bibr">Pantano <italic>et al.</italic>, 2011</xref>) can only collapse SE reads from small RNA-Seq datasets, while <italic>FastUniq (FU)</italic> (<xref rid="btaa051-B30" ref-type="bibr">Xu <italic>et al.</italic>, 2012</xref>) can only deal with PE reads. However, the popular <italic>FASTX-Toolkit</italic> (<italic>FXT</italic>) (<xref rid="btaa051-B12" ref-type="bibr">Gordon and Hannon, 2010</xref>) provides a simple function to collapse identical reads but does not keep any trace of the quality scores provided in the input files. On top of that, it cannot deal with PE samples. <italic>Super</italic>â<italic>Deduper</italic> (<italic>SD</italic>) (<xref rid="btaa051-B23" ref-type="bibr">Petersen <italic>et al.</italic>, 2015</xref>) is an interesting tool for PCR duplicate removal, as it examines only a small portion of each reads (called key) and automatically discards data containing unknown nucleotides (Ns). However, it is not able to solve the exact read collapsing problem. <italic>ParDRe</italic> (<italic>PDR</italic>) (<xref rid="btaa051-B11" ref-type="bibr">GonzÃ¡lez-DomÃ­nguez and Schmidt, 2016</xref>) has a reasonable run-time, but a significant memory consumption.</p>
    <p>The full list of the literature tools, with collapsing functionality, is reported in <xref rid="btaa051-T1" ref-type="table">TableÂ 1</xref>, together with a summary of their respective features. In the order: the possibility to deal with SE and PE sequences, the way the quality score of the input sequences is processed (i.e. <italic>AVG</italic>: by averaging the quality scores of the redundant reads per nucleotide, <italic>HIGH</italic>: by retaining the best score per nucleotide, <italic>SUM</italic>: by summing up base qualities scores), the possibility to set a user-defined memory bound to the alignment, the supported file formats. As it can be easily gathered from the table, none of the tools provides a fully functional collapsing option, as they all lack some essential features.</p>
    <table-wrap id="btaa051-T1" orientation="portrait" position="float">
      <label>Table 1.</label>
      <caption>
        <p>Features of the available collapsing tools, with our proposed tool <italic>BioSeqZip</italic> in the last row</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="left" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th align="left" rowspan="1" colspan="1">Tool</th>
            <th align="left" rowspan="1" colspan="1">SE</th>
            <th align="left" rowspan="1" colspan="1">PE</th>
            <th align="left" rowspan="1" colspan="1">Quality</th>
            <th align="left" rowspan="1" colspan="1">Memory bound</th>
            <th align="left" rowspan="1" colspan="1">File formats</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">
              <italic>FU</italic>
            </td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">High</td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">.fa.fq</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <italic>FXT</italic>
            </td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">.fa</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <italic>PDR</italic>
            </td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">High-AVG</td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">.fa.fq</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <italic>SC</italic>
            </td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">AVG</td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">.fa.fq</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <italic>SD</italic>
            </td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">High-sum</td>
            <td rowspan="1" colspan="1">No</td>
            <td rowspan="1" colspan="1">.fa.fq</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">
              <italic>BSZ</italic>
            </td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">AVG</td>
            <td rowspan="1" colspan="1">Yes</td>
            <td rowspan="1" colspan="1">.fa.fq.sam.bam.tag.tagq</td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <p>Collapsing procedures are widely adopted as a preliminary step for the alignment of sRNA-Seq on miRNA and other small non-coding RNA databases such as miRBase (<xref rid="btaa051-B13" ref-type="bibr">Griffiths-Jones <italic>et al.</italic>, 2006</xref>), miRGeneDB (<xref rid="btaa051-B8" ref-type="bibr">Fromm <italic>et al.</italic>, 2015</xref>, <xref rid="btaa051-B7475947" ref-type="bibr"> 2020</xref>) and piRBase (<xref rid="btaa051-B31" ref-type="bibr">Zhang <italic>et al.</italic>, 2014</xref>). Tools designed to quantify miRNA expression levels such as <italic>isomiR-SEA</italic> (<xref rid="btaa051-B29" ref-type="bibr">Urgese <italic>et al.</italic>, 2016</xref>), SeqBuster (<xref rid="btaa051-B21" ref-type="bibr">Pantano <italic>et al.</italic>, 2010</xref>), sRNAbench (<xref rid="btaa051-B1" ref-type="bibr">Barturen <italic>et al.</italic>, 2014</xref>) miRDeep2 (<xref rid="btaa051-B7" ref-type="bibr">FriedlÃ¤nder <italic>et al.</italic>, 2012</xref>) and others (<xref rid="btaa051-B4" ref-type="bibr">Desvignes <italic>et al.</italic>, 2019</xref>) take a simple file (defined as Tag file) as input, with the unique sequence in the first column and its number of occurrences in the second column, to minimize the number of calls to a computationally expensive alignment procedure. In our work, we leverage this concept and take it to a higher level.</p>
    <p>In this paper, we propose <italic>BioSeqZip</italic>; a new approach to collapse redundant reads generated by next-generation sequencing (NGS) machines. The functionality of our proposed solution is 3-fold: (i) a read collapsing technique based on the external sorting algorithm allows limiting memory usage (<xref rid="btaa051-B14" ref-type="bibr">Knuth, 1998</xref>). External sorting is required when the data being sorted do not fit into the RAM of a computing device and instead they must reside in the slower external memory (HDD or SSD). In our implementation, we use a hybrid sort-merge strategy. In the sorting phase, chunks of data small enough to fit in main memory are read, sorted and written out to a temporary file. In the merge phase, the sorted sub-files are combined into a single larger file. Thus, making the tool suitable not only to cluster computers, but even to medium systems with limited hardware capabilities. (ii) A multilevel collapsing procedure can be applied to compress even further the read files. Recurrent reads from different samples will be collapsed into a single file, where unique reads will occur only once. (iii) An integrated expansion procedure enables an easy restore of the read aligned files produced by mapping tools.</p>
    <p>As it can be gathered from <xref rid="btaa051-T1" ref-type="table">TableÂ 1</xref>, our proposed solution addresses the lack of functionalities of the collapsing tools available to date (see the last row of the table). <italic>BioSeqZip</italic> generates compact files of unique reads storing the number of collapsed sequences, so that the number of detected molecules can be considered in the alignment algorithms, as well as their quality score information. On top of that, it supports seven different file formats, allowing easy integration to several classes of alignment, mapping and assembly algorithms.</p>
    <p>To demonstrate the quality of our solutions, we tested the <italic>BioSeqZip</italic> compression module on 32 RNA-Seq samples from the Human BodyMap 2.0 dataset, collecting 2.34 billion of SE and PE reads. We assessed <italic>BioSeqZip</italic> performance in terms of run-time, memory consumption, reduction of reads number as well as of collapsed files size and compared our tool against five alternative tools in terms of both performance and usability. On top of that, we compared the performance of four different alignment algorithms on collapsed and raw/uncollapsed input files, respectively, with either SE or PE datasets.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <p>We propose <italic>BioSeqZip</italic> as a solution to the extensive computational time and memory requirements of NGS data analysis flows involving sequences, such as transcriptome/genome mapping and small RNA-Seq analysis. A common trait of these tasks is that they need to process all the reads of the sequenced samples multiple times before moving to the next steps of the analysis. Hence, these tasks are majorly benefited by the removal of redundant reads.</p>
    <p><italic>BioSeqZip</italic> is a read collapser that groups and counts the occurrence of the identical reads in the input sequence file, producing a minimal sorted list of unique reads (and the corresponding occurrence counts) ready for the alignment to a reference. The read collapsing can be obtained at two different levels: (i) at <italic>single-sample</italic> (SS) level, <italic>BioSeqZip</italic> collapses the redundant reads stored in a single file, producing a compacted output file with unique reads. (ii) At <italic>multi-sample</italic> (MS) level, <italic>BioSeqZip</italic> aggregates redundant reads from a dataset containing multiple sample files, allowing a supplementary level of aggregation.</p>
    <p>In both cases, if the input files provide quality information about the reads, <italic>BioSeqZip</italic> returns the collapsed sequences with a quality score, that is computed as the average consensus quality of the corresponding collapsed reads. On top of that, <italic>BioSeqZip</italic> allows to choose the format of the collapsed file (either Fastq, Fasta, Tagq or Tagsee <xref ref-type="supplementary-material" rid="sup1">Supplementary Text S1</xref> for the file format description). By doing so, the user can choose whether to maintain the quality information (and hence, bear the corresponding computational costs) or not, with a pay-for-what-you-use philosophy.</p>
    <p>Besides the read collapsing functionality, <italic>BioSeqZip</italic> implements also a re-expanding functionality, that is able to recover the original occurrences of each sequence to update, with the number of read occurrences, the alignment files generated by mapping algorithms.</p>
    <p>The functionalities of <italic>BioSeqZip</italic> are implemented into two main modules: a <italic>Collapser</italic> for compacting the redundant reads and an <italic>Expander</italic> for restoring aligned and compacted files. The modules were developed in C++ leveraging several packages of the SeqAn C++ bioinformatics library (<xref rid="btaa051-B6" ref-type="bibr">Doring <italic>et al.</italic>, 2008</xref>; <xref rid="btaa051-B24" ref-type="bibr">Reinert <italic>et al.</italic>, 2017</xref>). Most of our design choices were explicitly made to optimize the memory consumption and the computational performance on systems equipped with medium hardware resources. In the following, we describe the main design aspects, functionality and supported file formats of the <italic>Collapser</italic> and the <italic>Expander</italic> modules.</p>
    <sec>
      <title>2.1 <italic>BioSeqZip_Collapser</italic> module</title>
      <p>Collapsing the reads is a powerful strategy to reduce the computational time and complexity of the alignment steps of an RNA-Seq or DNA-Seq analysis pipeline. Indeed, in files with billion of reads, the same sequence will likely be analyzed multiple times. The collapser module collapses and counts the occurrence of redundant reads, that are detected based on their identical sequence. This new reduced collection of non-redundant sequences can be stored in a much smaller file and used for optimized alignment analysis. <italic>BioSeqZip_Collapser</italic> accepts as input Fasta, Fastq or SAM file formats and generates compact output with four different file formats: Fasta, Fastq, Tag and Tagq (<xref ref-type="supplementary-material" rid="sup1">Supplementary Text S1</xref>.1).</p>
      <p>All the input/output file formats can be optionally provided in compressed form (gzip).</p>
      <p>The most straightforward approach to collapsing reads is the one implemented by the <italic>fastx_collapser</italic> routine offered in <italic>FASTX-Toolkit</italic> (<xref rid="btaa051-B10" ref-type="bibr">Giardine <italic>et al.</italic>, 2005</xref>). This solution requires to first load all the reads into the main memory, then to sort them, and finally to collapse them into unique tags, while counting and storing occurrence of the redundant reads. However, this approach is hugely memory-intensive, as it requires to load in memory the entire file that is typically in the order of tens of GBs.</p>
      <p>Indeed, memory issues are always a critical aspect of NGS data analyses that typically exploit big data. As the dimension of the NGS files is generally huge, the amount of memory necessary to load a whole dataset will be overwhelming for mediumâsmall memory systems such as standard workstations and laptops, leading to the necessity of leveraging powerful machines such as clusters of compute nodes and servers. Thus, increasing the costs of the analysis.</p>
      <p><italic>BioSeqZip_Collapser</italic> overcomes such limitation by implementing a memory-constrained collapsing functionality. For this purpose, the user is asked to set the maximum amount of the memory that can be exploited by the program, based on the capabilities of the available hardware.</p>
      <p>The main steps of <italic>BioSeqZip_Collapser</italic> are shown in <xref ref-type="fig" rid="btaa051-F1">FigureÂ 1</xref>.</p>
      <fig id="btaa051-F1" orientation="portrait" position="float">
        <label>Fig. 1.</label>
        <caption>
          <p><italic>BioSeqZip</italic>_Collapser flowchart, with external sorting and collapsing steps highlighted in dashed boxes</p>
        </caption>
        <graphic xlink:href="btaa051f1"/>
      </fig>
      <p>In the first phase, we pass and check the input parameters: <italic>âinput</italic> and <italic>âmax-ram</italic> respectively for the input file storing the reads to be collapsed (either Fasta, Fastq, SAM or BAM) and the maximum amount of RAM allowed. A set of reads (<italic>T</italic><sub>size</sub>) are read from the input file to evaluate their memory occupancy (<italic>T</italic><sub>RAM</sub>). Then, we estimate the maximum number of reads (<italic>C</italic><sub>size</sub>) that can be loaded at the same time into memory without exceeding the memory constraint, set by the user (<italic>C</italic><sub>RAM</sub>), by computing the <xref ref-type="disp-formula" rid="E1">Equation (1)</xref> where <italic>Î±</italic> is an empirical correction factor.
<disp-formula id="E1"><label>(1)</label><mml:math id="M1"><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mtext>size</mml:mtext></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>Î±</mml:mo><mml:mo>Â·</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mtext>RAM</mml:mtext></mml:mrow></mml:msub><mml:mo>Â·</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mtext>size</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mtext>RAM</mml:mtext></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p>
      <p>The module implements a custom <italic>parallel external sorting</italic> procedure (<xref rid="btaa051-B14" ref-type="bibr">Knuth, 1998</xref>) that sorts the reads in chunks and generates <italic>M</italic> temporary files of sorted records. For clarity, in <xref ref-type="fig" rid="btaa051-F2">FigureÂ 2</xref> we show a schematic example of the External-Sort-Collapsing procedure. Each chunk of reads (of size 3, in the example of <xref ref-type="fig" rid="btaa051-F2">Fig.Â 2</xref>) is loaded into RAM, where it is alphabetically sorted by a multi-threaded function. Then, the sorted set of reads are collapsed and written on a temporary file on the disk (in dark-gray background). In the Â phase, the first <inline-formula id="IE1"><mml:math id="IM1"><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mtext>size</mml:mtext></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:mi>M</mml:mi></mml:mrow></mml:math></inline-formula> sequences from all the temporary files are loaded in <italic>M</italic> buffers. Then, an iterative selection-sort process is started, for identifying the overall occurrences count of each read. At each iteration, the tool appends a collapsed sequence to the output file, together with the corresponding occurrences count. Empty chunks are refilled with a portion of the temporary file from which the collapsed reads come. At the end of the mergeâcollapse procedure, the output file will contain all the collapsed reads and their corresponding occurrence count. If requested by the user, in case the input file provided a quality score per read, the procedure computes the average quality score of each block of collapsed reads, base-by-base.</p>
      <fig id="btaa051-F2" orientation="portrait" position="float">
        <label>Fig. 2.</label>
        <caption>
          <p>Example of read collapsing based on external sorting</p>
        </caption>
        <graphic xlink:href="btaa051f2"/>
      </fig>
      <p>Besides the aforementioned, <italic>BioSeqZip_Collapser</italic> supports two additional cases: (i) files with PE reads stored with the interleaved format, where mate 1 is in the even reads and mate 2 in the odd reads. (ii) Files with joined mates and fixed break-point, where the two mates are already in the same read.</p>
      <p>As far as file formats are concerned, six different input/output combinations are available, all optimized to minimize the number of required operations. More specifically, with Fastq input, the user can select any of the four output formats. With a Fasta format, however, the output can be either Tag or Fasta. Optionally, <italic>BioSeqZip_Collapser</italic> can be even forced to generate a collection of output files with constant size set by the user. In this case, the module generates multiple files of the set dimension, each storing a portion of the collapsed reads sorted in alphabetical order. This feature is particularly useful in cases where the read files must be distributed to an High Performance Computing Â cluster. For Fasta and Fastq output formats, the read count is appended to the identifier on the header line. By doing so, the output file can be easily handled by alignment programs without losing track of the original number of redundant reads before collapsing.</p>
      <p>If the input is not a single file, but a folder containing multiple files, the <italic>BioSeqZip_Collapser</italic> will implement a MS collapsing strategy. Even in this case, the procedure can generate any of the four possible output files, with a supplementary table reporting the ID of collapsed sequence in the first column, the sequence in the second column and its per-sample occurrence counts in the following columns. The information reported in this table can be eventually leveraged by the <italic>Expander</italic> module to recover the original occurrence of redundant reads in each sample.</p>
    </sec>
    <sec>
      <title>2.2 <italic>BioSeqZip_Expander</italic> module</title>
      <p>The files storing the collapsed reads can be given as input to the most common RNA-Seq and DNA-Seq analysis pipelines, thereby considerably reducing demands in terms of storage space and computational time. As already discussed, this is a significant advantage in case of systems with limited hardware resources that might not be powerful enough to host the analysis of redundant data.</p>
      <p>Especially for mapping and alignment procedures, the best practice would be to consider the complete available information at the same time (i.e. sequence, sequence occurrence count and average quality score). However, standard alignment tools are generally unable to leverage the occurrence count field of Fasta/Fastq files. Hence, the analyst is left with two options: (i) customizing the mapping procedure to consider the read counts during the alignment algorithm [We have adapted BWA and Yara aligners to consider the occurrences stored in the header of each read of the collapsed Fastq files, and the modified code is provided in two additional GitHub repositories (links provided in the Supplementary Availability section)]. (ii) Align the not-redundant reads and then re-expand the compact aligned files, exploiting the occurrence counts to replicate the original entries. The latter functionality is implemented by <italic>BioSeqZip_Expander</italic>. This module re-expands the output files of alignment/mapping tools by replicating each Tag by the occurrence count of each sample. By doing so, it restores an expanded collection of redundant sequences and corresponding mapping locations.</p>
      <p>Multi-mapped reads can be handled either with a random assignation strategy, as done by BWA (<xref rid="btaa051-B16" ref-type="bibr">Li and Durbin, 2009</xref>), or with a first position policy, like Yara (<xref rid="btaa051-B26" ref-type="bibr">Siragusa, 2015</xref>), where the additional locus are listed in a custom field of the SAM file.</p>
      <p><italic>BioSeqZip_Expander</italic> is meant for re-expanding the output of any alignment tool, to obtain the same output that would have been generated by aligning the raw non-collapsed sample. As long as each SAM record stores the original name of the aligned read, <italic>BioSeqZip_Expander</italic> is able to parse it and extract the number of times the sequence was found by the <italic>BioSeqZip_Collapser</italic> in the raw sample. Then, the target SAM record is written that number of time to the final output file, which represents the expanded alignment file. <italic>BioSeqZip_Expander</italic> can deal with the two most common file formats for alignment files: SAM and BAM.</p>
      <p>In the case of MS collapsing, <italic>BioSeqZip_Expander</italic> will exploit the supplementary table generated by the MS collapsing strategy to restore the correct number of read sequence and originally detected in each corresponding sample.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Results and discussion</title>
    <p>We tested <italic>BioSeqZip</italic> on a set of 32 transcriptomic samples of 16 different human tissues from the Human Body Map 2.0 Project (ERP000546). This set, characterized by the presence of both SE and PE reads, was generated with the HiSeq 2000 sequencing technology (<xref rid="btaa051-B20" ref-type="bibr">Ogasawara <italic>et al.</italic>, 2006</xref>).</p>
    <p>To assess our methodology, we evaluated four popular alignment tools on both collapsed and not collapsed reads. We decided to evaluate the quality and computational costs of the alignment, because it is the fundamental step of any sequencing data analysis.</p>
    <p>The experiments were performed on a Linux machine with 2âÃâ8 Intel cores clocked at 2.4âGHz (Xeon E5-2630), 128 GB RAM, 16 TB HDD SAS in RAID 6.</p>
    <p>In the following, we will show the performance of our read collapsing algorithm and the benefits of using tags representing collapsed sequences for mapping procedures. We collapsed Fastq files, hence retaining the average quality of the original files. A quality-agnostic compression would be twice as faster and produce collapsed files of half the size of the case reported here. Thus, the time and memory reported in our results should be considered as a worst-case scenario.</p>
    <sec>
      <title>3.1 SS and MS collapsing performance</title>
      <p>In this experiment, we collapsed reads from 16 SE and 16 PE human samples (see full list and details in <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S1</xref>). SE samples containing 1.26 billion of 75âbp reads, while PE samples comprisingÂ 1.28 billion of 50*2âbp Illumina reads. Both classes of samples sequenced with a 20Ã coverage at a genome size of 3.1 GB. Each sample contains 80 million of reads on average and occupies 17 GB on the disk for the SE and 26 GB for the PE.</p>
      <p>In our test, the raw files were collapsed using <italic>BioSeqZip_Collapser</italic>, first with a SS and then with a MS strategy. <xref rid="btaa051-T2" ref-type="table">TableÂ 2</xref> shows the results of the collapsing procedure, in terms of the number of reads, the total size of samples and run-time. The first column of the table makes explicit whether the considered samples are uncompressed (i.e. RAW), collapsed SS or collapsed MS. The second column indicates whether the samples are SE or PE reads. The following two columns report the number of reads and file size. Concerning RAW and SSs, the sum of the corresponding sizes for each sample is reported. While for MSs, the results were produced by the MS collapse procedure. Finally, the last three columns of the table report the overall collapsing time and the gain [computed with <xref ref-type="disp-formula" rid="E2">Equation (2)</xref>] of the collapsing, in terms of number of reads to be aligned and size of the file on the disk.
<disp-formula id="E2"><label>(2)</label><mml:math id="M2"><mml:mrow><mml:msub><mml:mrow><mml:mrow><mml:mtext>Gain</mml:mtext></mml:mrow></mml:mrow><mml:mo>%</mml:mo></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>â</mml:mo><mml:mfrac><mml:mrow><mml:mtext>Collapsed</mml:mtext></mml:mrow><mml:mrow><mml:mtext>Raw</mml:mtext></mml:mrow></mml:mfrac></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>Â·</mml:mo><mml:mn>100.</mml:mn></mml:mrow></mml:math></disp-formula></p>
      <table-wrap id="btaa051-T2" orientation="portrait" position="float">
        <label>Table 2.</label>
        <caption>
          <p>SS and MS collapsing performance</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th colspan="2" rowspan="1">Sample<hr/></th>
              <th rowspan="2" colspan="1">No. of reads (G)</th>
              <th rowspan="2" colspan="1">Size (GB)</th>
              <th rowspan="2" colspan="1">Collapse time (s)</th>
              <th colspan="2" rowspan="1">Gain<hr/></th>
            </tr>
            <tr>
              <th rowspan="1" colspan="1">Status</th>
              <th rowspan="1" colspan="1">Type</th>
              <th rowspan="1" colspan="1">No. of reads (%)</th>
              <th rowspan="1" colspan="1">Size (%)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="2" colspan="1">RAW</td>
              <td rowspan="1" colspan="1">PE</td>
              <td rowspan="1" colspan="1">1.28</td>
              <td rowspan="1" colspan="1">390</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">0</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">SE</td>
              <td rowspan="1" colspan="1">1.26</td>
              <td rowspan="1" colspan="1">252</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">0</td>
            </tr>
            <tr>
              <td rowspan="2" colspan="1">SS</td>
              <td rowspan="1" colspan="1">PE</td>
              <td rowspan="1" colspan="1">0.59</td>
              <td rowspan="1" colspan="1">141</td>
              <td rowspan="1" colspan="1">9633</td>
              <td rowspan="1" colspan="1">53.7</td>
              <td rowspan="1" colspan="1">63.8</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">SE</td>
              <td rowspan="1" colspan="1">0.39</td>
              <td rowspan="1" colspan="1">64</td>
              <td rowspan="1" colspan="1">6106</td>
              <td rowspan="1" colspan="1">69.4</td>
              <td rowspan="1" colspan="1">74.6</td>
            </tr>
            <tr>
              <td rowspan="2" colspan="1">MS</td>
              <td rowspan="1" colspan="1">PE</td>
              <td rowspan="1" colspan="1">0.54</td>
              <td rowspan="1" colspan="1">134</td>
              <td rowspan="1" colspan="1">12Â 708</td>
              <td rowspan="1" colspan="1">57.7</td>
              <td rowspan="1" colspan="1">65.6</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">SE</td>
              <td rowspan="1" colspan="1">0.28</td>
              <td rowspan="1" colspan="1">47</td>
              <td rowspan="1" colspan="1">7763</td>
              <td rowspan="1" colspan="1">78.0</td>
              <td rowspan="1" colspan="1">81.4</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>Some interesting observations can be gathered from <xref rid="btaa051-T2" ref-type="table">TableÂ 2</xref>. First of all, SE samples achieved higher collapsing rate than PE samples. This is due to the exact collapsing algorithm leveraged by <italic>BioSeqZip</italic>, that has better performance for shorter sequences, assuming similar datasets sizes. More specifically, collapsing all the SE samples with a SS strategy leads to a reduction in the number of reads to be analyzed of â¼70%, whereas the storage requirements are reduced to a quarter. MS collapsing leads to an even better gain in terms of the number of reads and files size, but it comes at the cost of higher run-time (30% higher in the worst case). In <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S4.2</xref>, we propose a collapsing experiment on a WGS DNA-Seq sample from <xref rid="btaa051-B25" ref-type="bibr">Scherer <italic>et al</italic>. (2019)</xref>, showing the benefit of the collapsing strategy on this type of data.</p>
      <p>Different values of the memory constraints translate into a different number of intermediate files that are generated during the collapsing (the lower the memory limit, the higher the number of disk operations). To clarify the relation between memory limit and performance, we run an additional experiment by collapsing three random files, at 4, 8, 16 and 32 GB limits by using 4 threads. The run-time in seconds was respectively 1062, 1098, 1172 and 840. This analysis highlights that the run-time required for collapsing a sample increases as the size of the buffer used for storing the sequences increases, up to the amount of memory that can contain the full file to be collapsed (more details in Supplementary Section S4.3).</p>
    </sec>
    <sec>
      <title>3.2 Alignment performance on collapsed samples</title>
      <p>To assess the impact on alignment performance of both SS and MS collapsing, we proceeded as follows: (i) we performed SS collapsing of all the samples. Then, each collapsed file was aligned to the Human transcriptome (<xref rid="btaa051-B3" ref-type="bibr">Cunningham <italic>et al.</italic>, 2015</xref>) using four popular read mappers: respectively, BWA, Bowtie2, Yara and STAR. Alongside, the raw uncollapsed files were also aligned using the same tools, to measure the alignment time on the original number of reads. (ii) We performed MS collapsing of the whole dataset, measuring both execution time and RAM requirements (always within the input constraint). Thus, we obtained a single collapsed Fastq output file and a table of read occurrences for the whole dataset. Then, we run the mappers on the Fastq file, assessing the execution time of the alignment as well as the storage size of the mapped reads.</p>
      <p>In both experiments, we did not run the Expander module, which is conceived as an optional feature in regular downstream analysis.</p>
      <p>The obtained results are plotted in <xref ref-type="fig" rid="btaa051-F3">FigureÂ 3</xref>, where we show the gain of aligning collapsed files (either SS or MS) instead of raw ones, using alignment time as the figure of merit in <xref ref-type="disp-formula" rid="E2">Equation (2)</xref>. For the SS files, the collective gains of the individual samples of the dataset are reported in the form of a box-plot, while an asterisk represents the gain of MS. As can be gathered from the plots of <xref ref-type="fig" rid="btaa051-F3">FigureÂ 3</xref>, the benefits of collapsing were consistently high for all the mapping tools. More specifically, the average alignment time speed-up attested between 50% and 70% in case of SS collapsing and between 36% and 73% for MS collapsing.</p>
      <fig id="btaa051-F3" orientation="portrait" position="float">
        <label>Fig. 3.</label>
        <caption>
          <p>Gain of aligning collapsed files, using alignment time as the figure of merit</p>
        </caption>
        <graphic xlink:href="btaa051f3"/>
      </fig>
      <p>If we take into account the storage requirements, the impact of collapsing was even more significant, as the mapping file size was reduced by 71% with SS and up to 80% with MS collapsing, respectively. On top of that, we registered a significant reduction in the size of the collapsed alignment files. Indeed, for the overall alignment files the total disk occupancy of raw files aligned was 4.7 TB while SS aligned files occupy 1.9 TB with a reduction of 60%. However, the best size reduction was achieved when aligning MS collapsed files, obtaining a disk space reduction of 66%.</p>
      <p>To estimate the run-time benefits of using collapsed files, in <xref ref-type="fig" rid="btaa051-F4">FigureÂ 4</xref> we show the results obtained by aligning the raw SE and PE files alongside the SS collapsed. In this plot, to have a complete view, we took into account even the additional computational time needed by <italic>BioSeqZip</italic> to collapse the sequence files (blue portion of the bars). As it can be gathered from <xref ref-type="fig" rid="btaa051-F4">FigureÂ 4</xref>, applying <italic>BioSeqZip</italic> had a significant impact on the computational time required by alignment and mapping procedures. The highest impact was for the tool STAR, for which time reduced from 19 to 7âh for SE and from 27 to 10âh for PE, with reductions attesting between 55% and 63%, respectively. Collapsing was very advantageous also for BWA and Bowtie2. The weakest impact was for Yara mapper, for which the alignment time of samples of the size considered in our tests is already minimal. Nonetheless, as it is visible from the blue portion of the stacked bars, the additional computational time required for collapsing the sequence file is always a small fraction of the overall time needed to execute the alignment on the raw reads (red bars). Hence, the collapsing is advantageous even in the worst-case scenario.</p>
      <fig id="btaa051-F4" orientation="portrait" position="float">
        <label>Fig. 4.</label>
        <caption>
          <p>Alignment performance on raw and collapsed files</p>
        </caption>
        <graphic xlink:href="btaa051f4"/>
      </fig>
      <p>To avoid possible inconsistencies, in our tests we verified the coherence of the raw and collapsed alignment files, by checking that the same number of reads where mapped by the tools to the same genome location of the alignments produced using the raw Fastq files.</p>
      <p>In the last mapping experiment, we analyzed SE samples of BodyMap with either BioSeqZip_Collapser + STAR + BioSeqZip_Expander (BSZ_C+STAR+BSZ_E) and Rail-RNA alone and compared the two runs in terms of both execution time and memory consumption (full analysis in Supplementary Section S4.4). From this experiment, we obtained that the combination of BSZ_C+STAR+BSZ_E outperformed Rail-RNA by 68% (15.29 versus 47.37âh). Note that the comparison is limited to time and memory performance of the two pipelines, without in-depth evaluation of the accuracy and consistency of the provided output.</p>
    </sec>
    <sec>
      <title>3.3 Comparison with alternative collapsers</title>
      <p>For this test, we randomly selected three SE and three PE samples (listed with blue background in <xref ref-type="supplementary-material" rid="sup1">Supplementary Table S3</xref>) and used them to compare the compression performance achieved by <italic>BioSeqZip</italic> with other tools available in the literature. The SE samples (labeled E890, E894 and E902) contain respectively 64, 77 and 82 million of 75âbp reads, with a disk space occupancy of â¼19, 22 and 24 GB. The PE samples (labeled E873, E882 and E886) are characterized by 82, 74 and 83 million of 50*2 bp reads, with a disk space occupancy of 25, 22 and 25 GB.</p>
      <p>In our test, the raw files were collapsed using <italic>BioSeqZip_Collapser (BSZ)</italic>, <italic>Fast Unique (FU)</italic>, <italic>FASTX-</italic><italic>Toolkit (FXT)</italic>, <italic>ParDRe (PD)</italic>, <italic>SeqClaster (SC)</italic> and <italic>Super Deduper (SD)</italic>, respectively. In case a tool did not support either PE (e.g. <italic>FXT</italic> and <italic>SC</italic>) or SE (e.g. <italic>FU</italic>), we implemented a specific adapter to convert SE into PE and <italic>vice</italic>â<italic>versa</italic>. Indeed, some of the tools considered in our test match the collapser requirements only partially, because they were not specifically designed for this task (see <xref rid="btaa051-T1" ref-type="table">TableÂ 1</xref>). All the tools were executed with default parameters, killing the process if running for more than 5000âs.</p>
      <p><xref ref-type="fig" rid="btaa051-F5">FigureÂ 5</xref> reports six groups of bars, one per tool, showing the performance in terms of total computational time spent for collapsing the three SE and the three PE samples, respectively. As it can be observed from <xref ref-type="fig" rid="btaa051-F5">FigureÂ 5</xref>, <italic>BioSeqZip</italic> was faster than all the other tools except for <italic>Super Deduper</italic>. However, <italic>Super Deduper</italic> collapses the reads by only looking at the first bases of the sequence. Thus, it generates over-collapsed files where reads with a different sequence are often grouped together (more details in <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1</xref>, where the collapsing efficiency of each tool is duly reported). <italic>FASTX</italic> was close to our tool when dealing with SE samples, but on the other hand it completely overlooks quality information and generates only Fasta files as output format. Similarly, <italic>ParDRe</italic> obtained a performance comparable to <italic>BioSeqZip</italic> on PE samples, but even in this case not all the identical reads were detected and collapsed (details in <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1</xref>).</p>
      <fig id="btaa051-F5" orientation="portrait" position="float">
        <label>Fig. 5.</label>
        <caption>
          <p>Collapsing performance of different collapsing tools. Total computational time for collapsing SE and PE samples, respectively</p>
        </caption>
        <graphic xlink:href="btaa051f5"/>
      </fig>
      <p>As already pointed out, a major distinguishing point of our implementation is the possibility to impose a maximum limit of memory that can never be exceeded. In <xref ref-type="fig" rid="btaa051-F6">FigureÂ 6</xref>, we report the memory consumption of <italic>BioSeqZip</italic> with an imposed memory limit of 8 GB and show the memory consumption of all the other tools for comparison.The amount of RAM used impacts on the speed of <italic>BioSeqZip</italic>. The more RAM we use, the lesser reading/writing operations we perform on the disk. Since the disk operations are the bottleneck of our algorithm, reducing the number of these operations has a positive impact on the overall run-time of the <italic>BioSeqZip</italic> collapsing procedure. As can be gathered from <xref ref-type="fig" rid="btaa051-F6">FigureÂ 6</xref>, three tools out of six reached peeks of 78 GB when dealing with PE samples. Only <italic>FXT</italic> and <italic>SD</italic> were close to the 8 GB limit, even though, unlike our solution, there is no specific guarantee that this constraint is always respected. In our tests, <italic>FXT</italic> tool reached a peak of RAM consumption close to 13 GB, but without keeping tracks of quality information. As already discussed, <italic>Super Deduper</italic> obtained the best performance only in theory, as it over-collapsed non-identical reads.</p>
      <fig id="btaa051-F6" orientation="portrait" position="float">
        <label>Fig. 6.</label>
        <caption>
          <p>Memory usage of collapser tools</p>
        </caption>
        <graphic xlink:href="btaa051f6"/>
      </fig>
      <p>In summary, <italic>BioSeqZip</italic> provides the best advantages in terms of run-time and memory usage. Moreover, it generates alphabetically sorted files, which is very useful to reduce the complexity of downstream analysis.</p>
    </sec>
    <sec>
      <title>3.4 Overall impact of <italic>BioSeqZip</italic> on alignment</title>
      <p>In this last section, we aggregate the outcome of the previous tests to estimate the overall advantages of <italic>BioSeqZip</italic> in terms of reduction of the file size on disk and of computational time spent for the mapping.</p>
      <p>As far as disk usage is concerned, the overall size of the collapsed files, plus mapped files obtained using collapsed files as input, was 2.1 TB for SS and 1.8 TB for MS, against 5.4 TB of the RAW files. More specifically, <italic>BioSeqZip</italic> was able to reduce 2.54 billion of reads into 980 million of unique tags, in &lt;4.4âh of computations.</p>
      <p>In <xref rid="btaa051-T3" ref-type="table">TableÂ 3</xref>, we show details about alignment time of BWA, Bowtie2, Yara and STAR on raw and SS collapsed reads, respectively. The last column of the table reports the gain, using the execution time of the alignment procedures on raw and SS collapsed files as the figure of merit in <xref ref-type="disp-formula" rid="E2">Equation (2)</xref>. As it can be gathered from the table, when using Yara on collapsed files we observed a gain of 48%. The alignment time reduction was even more significant for the other mapping tools: 57% for BWA, 55% for Bowtie2 and 68% for STAR.</p>
      <table-wrap id="btaa051-T3" orientation="portrait" position="float">
        <label>Table 3.</label>
        <caption>
          <p>Overall impact of <italic>BioSeqZip</italic> on the alignment time</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="2" colspan="1">Mapper tool</th>
              <th colspan="3" rowspan="1">Alignment time (h)<hr/></th>
            </tr>
            <tr>
              <th rowspan="1" colspan="1">Raw read file</th>
              <th rowspan="1" colspan="1">Collapsed tag file</th>
              <th rowspan="1" colspan="1">Gain (%)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Yara</td>
              <td rowspan="1" colspan="1">9.1</td>
              <td rowspan="1" colspan="1">4.7</td>
              <td rowspan="1" colspan="1">48</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">BWA</td>
              <td rowspan="1" colspan="1">16.3</td>
              <td rowspan="1" colspan="1">7.05</td>
              <td rowspan="1" colspan="1">57</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Bowtie2</td>
              <td rowspan="1" colspan="1">21.2</td>
              <td rowspan="1" colspan="1">9.5</td>
              <td rowspan="1" colspan="1">55</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">STAR</td>
              <td rowspan="1" colspan="1">47.2</td>
              <td rowspan="1" colspan="1">15.2</td>
              <td rowspan="1" colspan="1">68</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>Based on the values of <xref rid="btaa051-T3" ref-type="table">TableÂ 3</xref>, we can estimate a total saved time equal to 57.3âh, which provides the overall figure of merit of the impact of <italic>BioSeqZip</italic> on alignment time.</p>
    </sec>
  </sec>
  <sec>
    <title>4 Conclusion</title>
    <p>In this paper, we presented <italic>BioSeqZip</italic>, a read collapsing tool that can reduce the huge sequence files generated by high-throughput NGS machines to compact sets of non-redundant reads.</p>
    <p>As we extensively demonstrated in our experiments, <italic>BioSeqZip</italic> brings down the computational requirements of sequence analysis pipelines, with particular benefits for the alignment techniques, that are typically the ones with the highest computational costs.</p>
    <p>In summary, the virtues of our approach are manifold:</p>
    <list list-type="bullet">
      <list-item>
        <p>it is hardware-adaptive, as it is able to constrain RAM utilization based on a user-defined threshold depending on the hardware capabilities of the system.</p>
      </list-item>
      <list-item>
        <p>it is flexible, as it supports all the main sequencing file formats, and operates at either an SS or an MS level.</p>
      </list-item>
      <list-item>
        <p>it is exhaustive, as it maintains track of read quality information and read occurrence counts while collapsing the redundant sequences, allowing easy restoration of the original data.</p>
      </list-item>
    </list>
    <p>Besides alignment, we firmly believe that the complete analysis pipeline will significantly benefit from the application of our collapsing strategy. With minor modifications, mapping and alignment tools may even directly leverage the occurrence counts information provided by the compressed files to skip the re-expansion phase and speed-up the mapping process (BWA and Yara are already available). Exploiting sorting and merging operations, performed by <italic>BioSeqZip</italic> during the collapsing phase, the mapped files (in SAM/BAM formats) will be ready for further analysis as-is, without needing any supplementary manipulations. Thus, in perspective, the computational costs of the overall analysis can be reduced even further.</p>
    <p>Sure indeed, the collapsing provided by <italic>BioSeqZip</italic> comes at a possible cost of losing the read-specific quality. However, in case of need the original quality value can be easily recovered from the full uncollapsed Fastq.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>btaa051_Supplementary_Data</label>
      <media xlink:href="btaa051_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We would like to heartily thank Marta Malandra for her precious help in the graphical editing, Francesco Barchi for his valuable support in solving algorithmic challenges and Elena Grassi for her useful suggestions.</p>
    <p><italic>Financial Support</italic>: none declared. </p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </ack>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btaa051-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Barturen</surname><given-names>G.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>sRNAbench: profiling of small RNAs and its sequence variants in single or multi-species high-throughput experiments</article-title>. <source>Methods Next Gen. Seq</source>., <volume>1</volume>, <fpage>21</fpage>â<lpage>31</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa051-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Conesa</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>A survey of best practices for RNA-Seq data analysis</article-title>. <source>Genome Biol</source>., <volume>17</volume>, <fpage>1</fpage>.<pub-id pub-id-type="pmid">26753840</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cunningham</surname><given-names>F.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Ensembl 2015</article-title>. <source>Nucleic Acids Res</source>., <volume>43</volume>, <fpage>D662</fpage>â<lpage>669</lpage>.<pub-id pub-id-type="pmid">25352552</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Desvignes</surname><given-names>T.</given-names></name></person-group><etal>et al</etal> (<year>2019</year>) 
<article-title>Unification of miRNA and isomiR research: the mirGFF3 format and the mirtop API</article-title>. <source>Bioinformatics</source>, <volume>36</volume>, <fpage>698</fpage>â<lpage>703</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa051-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Dobin</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) 
<article-title>Star: ultrafast universal RNA-Seq aligner</article-title>. <source>Bioinformatics</source>, <volume>29</volume>, <fpage>15</fpage>â<lpage>21</lpage>.<pub-id pub-id-type="pmid">23104886</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Doring</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2008</year>) 
<article-title>SeqAn an efficient, generic C++ library for sequence analysis</article-title>. <source>BMC Bioinformatics</source>, <volume>9</volume>, <fpage>11</fpage>.<pub-id pub-id-type="pmid">18184432</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>FriedlÃ¤nder</surname><given-names>M.R.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>miRDeep2 accurately identifies known and hundreds of novel microRNA genes in seven animal clades</article-title>. <source>Nucleic Acids Res</source>., <volume>40</volume>, <fpage>37</fpage>â<lpage>52</lpage>.<pub-id pub-id-type="pmid">21911355</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B7475947">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Fromm</surname><given-names>B.</given-names></name></person-group><etal>et al</etal> (<year>2020</year>) 
<article-title>MirGeneDB 2.0: the metazoan microRNA complement</article-title>. <source>Nucleic Acids Research</source>, <volume>48</volume>, <fpage>D132</fpage>â<lpage>D141</lpage>.<pub-id pub-id-type="pmid">31598695</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Fromm</surname><given-names>B.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>A uniform system for the annotation of vertebrate microRNA genes and the evolution of the human microRNAome</article-title>. <source>Annu. Rev. Genet</source>., <volume>49</volume>, <fpage>213</fpage>â<lpage>242</lpage>.<pub-id pub-id-type="pmid">26473382</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Giardine</surname><given-names>B.</given-names></name></person-group><etal>et al</etal> (<year>2005</year>) 
<article-title>Galaxy: a platform for interactive large-scale genome analysis</article-title>. <source>Genome Res</source>., <volume>15</volume>, <fpage>1451</fpage>â<lpage>1455</lpage>.<pub-id pub-id-type="pmid">16169926</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>GonzÃ¡lez-DomÃ­nguez</surname><given-names>J.</given-names></name>, <name name-style="western"><surname>Schmidt</surname><given-names>B.</given-names></name></person-group> (<year>2016</year>) 
<article-title><italic>ParDRe</italic>: faster parallel duplicated reads removal tool for sequencing studies</article-title>. <source>Bioinformatics</source>, <volume>32</volume>, <fpage>1562</fpage>â<lpage>1564</lpage>.<pub-id pub-id-type="pmid">26803159</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B12">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Gordon</surname><given-names>A.</given-names></name>, <name name-style="western"><surname>Hannon</surname><given-names>G.</given-names></name></person-group> (<year>2010</year>) FASTX-Toolkit. <italic>FASTQ/A short-reads preprocessing tools (unpublished)</italic>, <bold>5</bold>.</mixed-citation>
    </ref>
    <ref id="btaa051-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Griffiths-Jones</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2006</year>) 
<article-title>miRBase: microRNA sequences, targets and gene nomenclature</article-title>. <source>Nucleic Acids Res</source>., <volume>34 (Suppl. 1</volume>), <fpage>D140</fpage>â<lpage>144</lpage>.<pub-id pub-id-type="pmid">16381832</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B14">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Knuth</surname><given-names>D.E.</given-names></name></person-group> (<year>1998</year>) <source>The Art of Computer Programming: Sorting and Searching</source>. Vol. <volume>3</volume>
<publisher-name> 2nd ed. Addison Wesley Longman Publishing Co., Redwood City, CA.</publisher-name></mixed-citation>
    </ref>
    <ref id="btaa051-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Langmead</surname><given-names>B.</given-names></name>, <name name-style="western"><surname>Salzberg</surname><given-names>S.L.</given-names></name></person-group> (<year>2012</year>) 
<article-title>Fast gapped-read alignment with Bowtie2</article-title>. <source>Nat. Methods</source>, <volume>9</volume>, <fpage>357</fpage>â<lpage>359</lpage>.<pub-id pub-id-type="pmid">22388286</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>H.</given-names></name>, <name name-style="western"><surname>Durbin</surname><given-names>R.</given-names></name></person-group> (<year>2009</year>) 
<article-title>Fast and accurate short read alignment with burrowsâwheeler transform</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>1754</fpage>â<lpage>1760</lpage>.<pub-id pub-id-type="pmid">19451168</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Mazzoni</surname><given-names>G.</given-names></name>, <name name-style="western"><surname>Kadarmideen</surname><given-names>H.N.</given-names></name></person-group> (<year>2016</year>) 
<article-title>Computational methods for quality check, preprocessing and normalization of RNA-Seq data for systems biology and analysis</article-title>. <source>Syst. Biol. Anim. Prod. Health</source>, <volume>2</volume>, <fpage>61</fpage>â<lpage>77</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa051-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Muir</surname><given-names>P.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>The real cost of sequencing: scaling computation to keep pace with data generation</article-title>. <source>Genome Biol</source>., <volume>17</volume>, <fpage>53</fpage>.<pub-id pub-id-type="pmid">27009100</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Nellore</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>Rail-RNA: scalable analysis of RNA-Seq splicing and coverage</article-title>. <source>Bioinformatics</source>, <volume>33</volume>, <fpage>4033</fpage>â<lpage>4040</lpage>.<pub-id pub-id-type="pmid">27592709</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Ogasawara</surname><given-names>O.</given-names></name></person-group><etal>et al</etal> (<year>2006</year>) 
<article-title>BodyMap-Xs: anatomical breakdown of 17 million animal ESTs for cross-species comparison of gene expression</article-title>. <source>Nucleic Acids Res</source>., <volume>34</volume> (Suppl. 1), <fpage>D628</fpage>â<lpage>631</lpage>.<pub-id pub-id-type="pmid">16381946</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Pantano</surname><given-names>L.</given-names></name></person-group><etal>et al</etal> (<year>2010</year>) 
<article-title>SeqBuster, a bioinformatic tool for the processing and analysis of small RNAs datasets, reveals ubiquitous miRNA modifications in human embryonic cells</article-title>. <source>Nucleic Acids Res</source>., <volume>38</volume>, <fpage>e34</fpage>.<pub-id pub-id-type="pmid">20008100</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Pantano</surname><given-names>L.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>A non-biased framework for the annotation and classification of the non-miRNA small RNA transcriptome</article-title>. <source>Bioinformatics</source>, <volume>27</volume>, <fpage>3202</fpage>â<lpage>3203</lpage>.<pub-id pub-id-type="pmid">21976421</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B23">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Petersen</surname><given-names>K.R.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) <italic>Super Deduper</italic>, fast PCR duplicate detection in Fastq files. In <italic>Proceedings of the 6th ACM Conference on Bioinformatics, Computational Biology and Health Informatics</italic>, ACM, pp. <fpage>491</fpage>â<lpage>492</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa051-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Reinert</surname><given-names>K.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>The SeqAn C++ template library for efficient sequence analysis: a resource for programmers</article-title>. <source>J. Biotechnol</source>., <volume>261</volume>, <fpage>157</fpage>â<lpage>168</lpage>.<pub-id pub-id-type="pmid">28888961</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Scherer</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2019</year>) 
<article-title>Towards best practice in cancer mutation detection with whole genome and whole-exome sequencing</article-title>. <source>Nat. Biotechnol</source>. doi: 10.1101/626440.</mixed-citation>
    </ref>
    <ref id="btaa051-B26">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Siragusa</surname><given-names>E.</given-names></name></person-group> (<year>2015</year>) Approximate string matching for high-throughput sequencing. PhD Thesis, Freie UniversitÃ¤t Berlin.</mixed-citation>
    </ref>
    <ref id="btaa051-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Smith</surname><given-names>T.F.</given-names></name>, <name name-style="western"><surname>Waterman</surname><given-names>M.S.</given-names></name></person-group> (<year>1981</year>) 
<article-title>Comparison of biosequences</article-title>. <source>Adv. Appl. Math</source>., <volume>2</volume>, <fpage>482</fpage>â<lpage>489</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa051-B28">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Urgese</surname><given-names>G.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) Dynamic gap selector: a smith waterman sequence alignment algorithm with affine gap model optimisation. In <italic> IWBBIO</italic>, Copicentro Granada SL, Granada, pp. <fpage>1347</fpage>â<lpage>1358</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa051-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Urgese</surname><given-names>G.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>isomiR-SEA: an RNA-Seq analysis tool for miRNAs/isomiRs expression level profiling and miRNA-mRNA interaction sites evaluation</article-title>. <source>BMC Bioinformatics</source>, <volume>17</volume>, <fpage>148</fpage>. doi: 10.1186/s12859-016-0958-0.<pub-id pub-id-type="pmid">27036505</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Xu</surname><given-names>H.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title><italic>FastUniq</italic>: a fast <italic>de novo</italic> duplicates removal tool for paired short reads</article-title>. <source>PLoS One</source>, <volume>7</volume>, <fpage>e52249</fpage>.<pub-id pub-id-type="pmid">23284954</pub-id></mixed-citation>
    </ref>
    <ref id="btaa051-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zhang</surname><given-names>P.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>piRBase: a web resource assisting piRNA functional study</article-title>. <source>Database</source>, <volume>2014</volume>, bau110.</mixed-citation>
    </ref>
  </ref-list>
</back>
