<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4647709</article-id>
    <article-id pub-id-type="publisher-id">818</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-015-0818-3</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>misFinder: identify mis-assemblies in an unbiased manner using reference and paired-end reads</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Zhu</surname>
          <given-names>Xiao</given-names>
        </name>
        <address>
          <email>zhuxiao.hit@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
        <xref ref-type="aff" rid="Aff2"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Leung</surname>
          <given-names>Henry C. M.</given-names>
        </name>
        <address>
          <email>cmleung2@cs.hku.hk</email>
        </address>
        <xref ref-type="aff" rid="Aff3"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Wang</surname>
          <given-names>Rongjie</given-names>
        </name>
        <address>
          <email>rjwang.hit@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="Aff2"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Chin</surname>
          <given-names>Francis Y. L.</given-names>
        </name>
        <address>
          <email>chin@cs.hku.hk</email>
        </address>
        <xref ref-type="aff" rid="Aff3"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Yiu</surname>
          <given-names>Siu Ming</given-names>
        </name>
        <address>
          <email>smyiu@cs.hku.hk</email>
        </address>
        <xref ref-type="aff" rid="Aff3"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Quan</surname>
          <given-names>Guangri</given-names>
        </name>
        <address>
          <email>grquan@hit.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff2"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Li</surname>
          <given-names>Yajie</given-names>
        </name>
        <address>
          <email>148077246@qq.com</email>
        </address>
        <xref ref-type="aff" rid="Aff4"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zhang</surname>
          <given-names>Rui</given-names>
        </name>
        <address>
          <email>282661708@qq.com</email>
        </address>
        <xref ref-type="aff" rid="Aff4"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Jiang</surname>
          <given-names>Qinghua</given-names>
        </name>
        <address>
          <email>qhjiang@hit.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff5"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Liu</surname>
          <given-names>Bo</given-names>
        </name>
        <address>
          <email>bo.liu@hit.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff2"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Dong</surname>
          <given-names>Yucui</given-names>
        </name>
        <address>
          <email>dongyucui521@yeah.net</email>
        </address>
        <xref ref-type="aff" rid="Aff6"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zhou</surname>
          <given-names>Guohui</given-names>
        </name>
        <address>
          <email>zhou_ghui@163.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Wang</surname>
          <given-names>Yadong</given-names>
        </name>
        <address>
          <phone>+86-451-86413316</phone>
          <email>ydwang@hit.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff2"/>
      </contrib>
      <aff id="Aff1"><label/>College of Computer Sciences and Information Engineering, Harbin Normal University, Harbin, Heilongjiang China </aff>
      <aff id="Aff2"><label/>Center for Bioinformatics, School of Computer Sciences and Technology, Harbin Institute of Technology, Harbin, Heilongjiang China </aff>
      <aff id="Aff3"><label/>Department of Computer Science, University of Hong Kong, Pokfulam Road, Hong Kong, China </aff>
      <aff id="Aff4"><label/>The Fourth Affiliated Hospital of Harbin Medical University, Harbin, Heilongjiang China </aff>
      <aff id="Aff5"><label/>School of Life Science and Technology, Harbin Institute of Technology, Harbin, Heilongjiang China </aff>
      <aff id="Aff6"><label/>Department of Immunology, Harbin Medical University, Harbin, Heilongjiang China </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>16</day>
      <month>11</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>16</day>
      <month>11</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2015</year>
    </pub-date>
    <volume>16</volume>
    <elocation-id>386</elocation-id>
    <history>
      <date date-type="received">
        <day>25</day>
        <month>4</month>
        <year>2015</year>
      </date>
      <date date-type="accepted">
        <day>6</day>
        <month>11</month>
        <year>2015</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Â© Zhu et al. 2015</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>Because of the short read length of high throughput sequencing data, assembly errors are introduced in genome assembly, which may have adverse impact to the downstream data analysis. Several tools have been developed to eliminate these errors by either 1) comparing the assembled sequences with some similar reference genome, or 2) analyzing paired-end reads aligned to the assembled sequences and determining inconsistent features alone mis-assembled sequences. However, the former approach cannot distinguish real structural variations between the target genome and the reference genome while the latter approach could have many false positive detections (correctly assembled sequence being considered as mis-assembled sequence).</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We present misFinder, a tool that aims to identify the assembly errors with high accuracy in an unbiased way and correct these errors at their mis-assembled positions to improve the assembly accuracy for downstream analysis. It combines the information of reference (or close related reference) genome and aligned paired-end reads to the assembled sequence. Assembly errors and correct assemblies corresponding to structural variations can be detected by comparing the genome reference and assembled sequence. Different types of assembly errors can then be distinguished from the mis-assembled sequence by analyzing the aligned paired-end reads using multiple features derived from coverage and consistence of insert distance to obtain high confident error calls.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>We tested the performance of misFinder on both simulated and real paired-end reads data, and misFinder gave accurate error calls with only very few miscalls. And, we further compared misFinder with QUAST and REAPR. misFinder outperformed QUAST and REAPR by 1) identified more true positive mis-assemblies with very few false positives and false negatives, and 2) distinguished the correct assemblies corresponding to structural variations from mis-assembled sequence. misFinder can be freely downloaded from <ext-link ext-link-type="uri" xlink:href="https://github.com/hitbio/misFinder">https://github.com/hitbio/misFinder</ext-link>.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s12859-015-0818-3) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>Â© The Author(s) 2015</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Background</title>
    <p>The high throughput sequencing (HTS) technologies [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>] have been a major transformation in the way scientists extract genetic information from biological systems, revealing limitless insight about the genome, transcriptome, and epigenome of many species. One major step of analysis is combining the overlapped reads (fragments of DNA sampled from genomes) to reconstruct the original genome sequence of the target species, called <italic>assembly</italic>. However, the lengths of reads (typically 50â250 base pairs [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR4">4</xref>]) generated by HTS technologies are much shorter than those of the traditional Sanger sequencing (typically about 800 base pairs [<xref ref-type="bibr" rid="CR5">5</xref>]) and the sequencing error rate is usually higher (1-2Â % compared with 0.1Â %). In addition, there are many repetitive sequences along the genomes. All the above features will make the assembling process difficult and will introduce mis-assembled genome sequence.</p>
    <p>Many assembly methods [<xref ref-type="bibr" rid="CR6">6</xref>â<xref ref-type="bibr" rid="CR12">12</xref>] have been developed to deal with these challenges and they have steadily improved in recent years. However, the problem of mis-assembly is still unsolved [<xref ref-type="bibr" rid="CR13">13</xref>] and the assembly errors will have adverse impact to downstream analysis [<xref ref-type="bibr" rid="CR14">14</xref>]. There are two main approaches for determining mis-assembled sequences depending on whether we have a similar reference genome for the target genome (the genome we perform sequencing).</p>
    <sec id="Sec2">
      <title>Reference-based approach</title>
      <p>If the genome reference for the target organism is available, mis-assembled sequences, e.g., misjoins and erroneous insertions/deletions, can be detected by comparative analysis of the reference sequence and the assembled genome sequence. However, a good genome reference is usually not available. When the target genome and the reference genome are not the same, there are some differences caused by structural variations between them. Mauve [<xref ref-type="bibr" rid="CR15">15</xref>] regards these differences as assembly errors directly without further analysis, which may affect the final result (many false positive mis-assembly detections). GAGE [<xref ref-type="bibr" rid="CR14">14</xref>] and QUAST [<xref ref-type="bibr" rid="CR16">16</xref>] regard these differences as erroneous indels (i.e., erroneous insertions/deletions) or misjoins. All these tools do not distinguish whether the differences caused by assembly errors or by structural variations, therefore further analysis is required to determine which differences are due to mis-assembly to prevent introducing false error calls.</p>
    </sec>
    <sec id="Sec3">
      <title><italic>De novo</italic> approach</title>
      <p>If a reference is unavailable, the alignment of the raw reads to their assembly provides indirect measures of assembly quality, e.g., high variation in coverage depth alone mis-assembled sequence, inconsistent insert distance when aligning paired-end reads to mis-assembled sequence, etc. This information can then be used to detect single-base changes, repeat condensation or expansion, false segmental duplications and other mis-assemblies. CGAL [<xref ref-type="bibr" rid="CR17">17</xref>] and ALE [<xref ref-type="bibr" rid="CR18">18</xref>] both produce a summary likelihood score of an assembly. ALE also reports four likelihood scores for each base representing the probability that an assembly is correct. However, they lack the ability to transform metrics to accurate error calls [<xref ref-type="bibr" rid="CR19">19</xref>]. REAPR [<xref ref-type="bibr" rid="CR19">19</xref>] reports a single score for each base for accuracy derived from just a few metrics, such as the coverage depth distribution, it may tend to introduce some false error calls since the real reads data usually are uneven, and it also tends to break the scaffolds in their gap regions by mistake (false errors).</p>
      <p>Both reference-based and <italic>de novo</italic> approach may partially solve the mis-assembly problem. However, reference-based approach cannot distinguish real structure variations and mis-assembled sequences while <italic>de novo</italic> approach can have many false positive detections because of the uneven sampling in real data. A better performance can be achieved by combining both approaches in determining mis-assembled sequences.</p>
      <p>In this article, we present misFinder, a tool that aims to identify the assembly errors with high accuracy in an unbiased way (unbiased means that distinguish the assembly errors and correct assemblies corresponding to structural variations, without introducing false error detections) and correct these errors at their mis-assembled positions to improve the assembly accuracy for downstream analysis. It uses the reference (or close related reference) to find the differences between the scaffolds and the reference, and uses paired-end reads to validate these differences to determine whether they are assembly errors or correct assemblies corresponding to structural variations rather than regarding them as errors directly with some biases. In order to distinguish the assembly errors and correct assemblies corresponding to structural variations, misFinder analyzes the patterns of each type of assembly errors, and then applies multiple features derived from coverage and consistence of paired-end reads for these errors to obtain high confident error calls and pinpoint the correct assemblies corresponding to structural variations, thus resulting assembly error calls with high accuracy in an unbiased way.</p>
    </sec>
  </sec>
  <sec id="Sec4" sec-type="materials|methods">
    <title>Methods</title>
    <p>The workflow of misFinder to identify assembly errors is shown in Fig.Â <xref rid="Fig1" ref-type="fig">1</xref>. misFinder is based on BLASTN [<xref ref-type="bibr" rid="CR20">20</xref>], assembly (contigs/scaffolds), genome reference and paired-end reads from Solexa sequencing technology are its input, with aims to identify the mis-assemblies i.e., the assembly errors, and correct these errors to increase the accuracy of the assembly. It consists of three major steps: (1) Identify the differences between scaffolds and reference using BLASTN alignment; (2) Compute the breakpoints according to paired-end reads alignment information; (3) Validate the differences according to paired-end reads alignment information to distinguish the assembly errors and correct assemblies corresponding to structural variations. The algorithm of misFinder will be described in details in the following sections.<fig id="Fig1"><label>Fig. 1</label><caption><p>Workflow of misFinder. MisFinder consists of three major steps. (1) Identify putative mis-assembles. Scaffolds (contigs) and genome reference are first used to generate the BLASTN alignments followed by the alignment processing that the redundant alignments will be removed, and then the putative mis-assembles are identified according to their non-redundant alignments. (2) Breakpoint computation. Paired-end reads are aligned to the scaffolds to make the breakpoints more accurate. (3) Mis-assembly validation. Putative mis-assemblies are validated according to the alignment information of paired-end reads on scaffolds</p></caption><graphic xlink:href="12859_2015_818_Fig1_HTML" id="MO1"/></fig></p>
    <sec id="Sec5">
      <title>Identify differences between scaffolds and reference</title>
      <sec id="Sec6">
        <title>Align scaffolds to reference</title>
        <p>misFinder is based on the alignments of BLASTN (version 2.2.25+ and higher) [<xref ref-type="bibr" rid="CR20">20</xref>], a well-established long-range nucleotide sequence alignment program for producing accurate long-range sequence alignments, which is particularly suitable for capturing the scaffolds alignment information. As BLAT [<xref ref-type="bibr" rid="CR21">21</xref>] does not produce single hit for distances &gt;750 kbp [<xref ref-type="bibr" rid="CR22">22</xref>], and according to our experiments, it tends to break single well-aligned segments into multiple small pieces as it produces gapped alignments, and the most important, it may miss well-aligned segments sometimes, while these situations does not occur for BLASTN which is well-known and always tries to produce continuous alignments as large as possible. Therefore, we choose BLASTN as our long-sequence alignment tool.</p>
        <p>misFinder uses BLASTN in multiple threads approach to compute the alignments, First, the scaffolds are divided into equal-sized parts to run BLASTN independently with multiple threads; and then, the sub-alignments for each thread are merged to generate the whole alignment results for further analysis.</p>
      </sec>
      <sec id="Sec7">
        <title>Obtain non-redundant alignments</title>
        <p>If a scaffold is aligned to genome reference uniquely, we keep its alignment information without additional requirements. Otherwise, we select the several best aligned segments that cover the whole scaffold, and other alignments are removed as they are short and redundant to the alignment of the whole scaffold. As the alignments from BLASTN are already sorted in descending order according to their scores, so we first choose the best aligned segment as the start segment, and select its adjacent segments one by one to the 3â² end of the scaffold until no adjacent ones, and then the adjacent ones are selected to the 5â² end of the scaffold in the same way. For selecting the adjacent segment, the candidates should have an overlap or a gap no more than 1 kbp by default according to the BLASTN alignments, and select the one of the minimal overlap or gap size. If there are no adjacent segments, the segment that has the minimal overlap or gap size according to the scaffold position is selected. These selected segments cover the whole scaffold and are placed according to their positions in scaffold. Other unselected segments are redundant and are removed.</p>
      </sec>
      <sec id="Sec8">
        <title>Identify differences using BLASTN</title>
        <p>After analyzing the non-redundant alignment information of scaffolds generated by BLASTN, four kinds of patters are observed (Fig.Â <xref rid="Fig2" ref-type="fig">2</xref>). Some scaffolds can perfectly match with reference (Fig.Â <xref rid="Fig2" ref-type="fig">2a</xref>), and there will be no assembly errors within these scaffolds. Other three most common kinds of differences, i.e., misjoin, insertion and deletion, may be due to assembly errors (Fig.Â <xref rid="Fig2" ref-type="fig">2b</xref>-<xref rid="Fig2" ref-type="fig">d</xref>). The misjoin may be caused by joining segments with large distance or different strands in genome, or by joining segments between different chromosomes (e.g., in eukaryotes) or between chromosome and plasmid (in bacteria). The insertion/deletion may be caused by incorrectly expanded/collapsed repetitive sequences during assembly, or may be caused by structural variation between the target genome and reference genome. Note that the scaffold segments with no alignment information are treated as insertion, and they may be caused by sequencing errors or by novel sequences compared to the genome reference. BLASTN tends to break the alignment at these regions of differences, and these differences have high possibility to be assembly errors. misFinder identifies these differences as putative mis-assemblies which needs further validations to determine whether they are true assembly errors.<fig id="Fig2"><label>Fig. 2</label><caption><p>Overview of differences between scaffolds and reference according to BLASTN alignments. Solid lines indicate reference (top) and scaffolds (bottom) respectively, red lines indicate unaligned segments, dashed lines between reference and scaffolds indicate alignment borders. <bold>a</bold> Scaffold is perfectly aligned to the genome reference. <bold>b</bold> Insertion or deletion error in scaffolds. An insertion/deletion error in scaffold causes alignment breaks, and the scaffold will be split into several aligned segments separated by the insertion/deletion error. <bold>c</bold> Misjoin in scaffold. Assembly errors caused by joining distinct genome regions with large distance (top left), by joining segments which can be aligned to different reference strands (top right), or by joining segments between different chromosomes (in eukaryotes) or between chromosome and plasmid (in bacteria) (bottom left). The yellow solid line indicates the region of reverse strand of the reference region. <bold>d</bold> Scaffolds that have entirely no alignment information (left) or have partial unaligned segments relative to the scaffold (right). We treat these situations as insertions that may be caused by assembly errors or by novel sequences in target genome</p></caption><graphic xlink:href="12859_2015_818_Fig2_HTML" id="MO2"/></fig></p>
      </sec>
    </sec>
    <sec id="Sec9">
      <title>Compute breakpoints</title>
      <p>After analyzing the alignments of the scaffolds to the genome reference, three common types of mis-assemblies, including misjoin, erroneous insertion and erroneous deletion, are observed at the positions of differences according to their alignment information. Before calling assembly errors, it is necessary to get the scaffold regions which have differences that may contain assembly errors for misjoin, erroneous insertion/deletion. We call such scaffold region as <italic>breakpoint region</italic> with left margin <italic>M</italic><sub><italic>L</italic></sub> and right margin <italic>M</italic><sub><italic>R</italic></sub>. According to our observations, the normal regions have well aligned read pairs and relative even read coverage depth (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1), and whereas for the three types of mis-assemblies, they have different error patterns in their breakpoint regions, which can be used for error calling (see section âValidate assembly errorsâ).</p>
      <p>Since the target genome and the reference genome are not exactly the same, there are usually some differences between them, i.e., structural variations (SVs). Therefore, in order to distinguish assembly errors and correct assemblies corresponding to structural variations, paired-end reads are aligned to scaffolds to call the mis-assemblies using multiple kinds of information extracted from the paired reads data (see section âValidate assembly errorsâ). Note that, for the reads fall into repeat regions, their best alignments are randomly selected to prevent the correct regions from having zero read coverage, and we call these reads with multiple aligned positions as <italic>multiple aligned reads</italic>, misFinder marks these multiple aligned reads for further analysis.</p>
      <sec id="Sec10">
        <title>Breakpoint region for misjoins</title>
        <p>Misjoin in scaffold can be depicted in Fig.Â <xref rid="Fig3" ref-type="fig">3</xref>. For the scaffold with misjoin, the whole scaffold will be divided into several large segments after BLASTN alignment, and these segments can be aligned to different reference regions respectively, with different strands or long distance of distinct regions, e.g., more than several kilo bases, or can be aligned to different chromosomes (e.g., in eukaryotes) or between chromosome and plasmid (in bacteria). The misjoins are caused by repeats which are not correctly resolved by assembly algorithm.<fig id="Fig3"><label>Fig. 3</label><caption><p>Misjoin in scaffold. After aligning the misjoined scaffold to reference, it will be split into two sub-segments according to the alignment information, and the two sub-segments are aligned with different reference strands or aligned to distinct regions with long distance. And these two sub-segments overlap each other due to the repeat (middle thick red lines) whose erroneous tails around margins <italic>M</italic>
<sub><italic>L</italic></sub> and <italic>M</italic>
<sub><italic>R</italic></sub> will be trimmed</p></caption><graphic xlink:href="12859_2015_818_Fig3_HTML" id="MO3"/></fig></p>
        <p>As BLASTN usually produces some mismatched bases around repeat margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub>, misFinder trims the segment tails containing mismatched bases to get the margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub> (Fig.Â <xref rid="Fig3" ref-type="fig">3</xref>). This repeat region between <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub> is a breakpoint region that may contain assembly errors. For BLASTN alignments, the adjacent two misjoined segments usually have some overlaps, and it is observed that there are many multiple aligned reads (reads with multiple aligned positions in scaffolds) in the region, and the scaffold should be split into two small pieces if the breakpoint region contains a misjoin assembly error.</p>
      </sec>
      <sec id="Sec11">
        <title>Breakpoint region for erroneous insertions</title>
        <p>Scaffolds usually have some erroneous insertions in the middle, and they also usually have some unaligned segments at the ends, we treat all of the above two cases as insertion errors, which can be illustrated in Fig.Â <xref rid="Fig4" ref-type="fig">4a</xref>-<xref rid="Fig4" ref-type="fig">c</xref>. For the insertion error at the end of scaffolds, the end usually contains some erroneous bases, and there are usually only single-end reads covering the breakpoint region without paired-end reads. For the insertion error in the middle of scaffold, it has two flanking well-aligned segments at both sides of it, and the paired-end reads aligned on the two segments have a larger insert size than normal regions. The insertion error has a breakpoint region with margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub> which can be easily determined from alignments directly.<fig id="Fig4"><label>Fig. 4</label><caption><p>Insertion/deletion error in scaffold. <bold>a</bold>-<bold>b</bold> An insertion error at scaffold end. There are usually only single-end reads can be aligned to the erroneous ends. <bold>c</bold> An insertion error in the middle of two well-aligned segments whose paired-end reads have a larger insert size than normal regions. <bold>d</bold> A deletion error in the middle of two well-aligned segments whose paired-end reads have a smaller fragment size than normal regions. <italic>M</italic>
<sub><italic>L</italic></sub> and <italic>M</italic>
<sub><italic>R</italic></sub> are the left margin and the right margin for the insertion (or deletion) error, respectively</p></caption><graphic xlink:href="12859_2015_818_Fig4_HTML" id="MO4"/></fig></p>
      </sec>
      <sec id="Sec12">
        <title>Breakpoint region for deletions</title>
        <p>Scaffolds also usually contain some erroneous deletions which can be illustrated in Fig.Â <xref rid="Fig4" ref-type="fig">4d</xref>. Unlike erroneous insertion, the erroneous deletion is a missing sequence with two well-aligned segments around it, and the aligned paired-end reads on the two segments have a shorter insert size than that of normal regions. The deletion error also has a breakpoint region with margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub> which can be easily determined from alignments directly.</p>
      </sec>
    </sec>
    <sec id="Sec13">
      <title>Validate assembly errors</title>
      <p>After aligning paired-end reads to scaffolds, there are several features that are different with the normal regions for these putative mis-assemblies, including abnormal (high or low) coverage, some disagreements (majority nucleotide differs no much with others), multiple aligned reads (reads with multiple aligned positions), fragment size difference (difference of distance of two 5â² ends of a read pair and the library insert size), and discordant read pairs (erroneous orientations or abnormal fragment size difference, e.g., &gt;3 * standard deviation). The mis-assembled regions typically have high or low coverage (even zero coverage), much more discordant read pairs than other normal regions. So that, the putative mis-assemblies could be validated by using the paired-end reads aligned to the scaffolds. The <italic>high coverage</italic> means that the breakpoint region has more than one 50-bp sub-region whose coverage is higher than 1.5 fold of the average coverage of that scaffold, while the <italic>low coverage</italic> means that it has more than one 50-bp sub-region whose coverage is lower than 0.5 fold of the average coverage of that scaffold. And for the discordant read pairs, we calculate the ratio of the discordant read pairs and all the read pairs in the breakpoint region, named <italic>discordant ratio</italic>, and the breakpoint region with much more discordant read pairs usually has a high discordant ratio, say &gt;0.1. And for the breakpoint region larger than 500 base pairs, we calculate the discordant ratio for each 500-bp sub-region.</p>
      <p>As the single-cell data typically have highly uneven sequencing depth, we re-define the sub-regions of high coverage and low coverage in the case of single-cell sequencing data. For a scaffold, we compute the average coverage of each 50-bp sub-region, and then calculate the mean coverage and standard deviation of the coverage of these sub-regions of the scaffold. The <italic>high coverage</italic> means that the breakpoint region has more than one 50-bp sub-region whose coverage is at least 1.5 fold of the standard deviation higher than the mean coverage of that scaffold, while the <italic>low coverage</italic> means that it has more than one 50-bp sub-regions whose coverage is at least 1.5 fold of the standard deviation lower than the mean coverage of that scaffold.</p>
      <p>Since different errors appear different patterns, we applied different methods to validate their correctness. The misjoins could be validated using the abnormal coverage, disagreements, multiple aligned reads, and the insertion/deletion errors could be validated using the abnormal coverage, discordant read pairs and the fragment size difference.</p>
      <sec id="Sec14">
        <title>Validate misjoins</title>
        <p>After aligning paired-end reads to scaffolds, it is observed that there are some differences between the breakpoint region (repeat region) and other normal regions around the margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub> (Fig.Â <xref rid="Fig3" ref-type="fig">3</xref>, Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S2-S3). The patterns of misjoins are described as below.</p>
        <p>In misjoin regions, there are usually some disagreements and abnormal coverage around margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub>. This is caused by the repeats that come from different genome regions which are incorrectly joined by assembly algorithm. Even though one end of the paired-end reads can be aligned to the scaffold, the other end may be aligned with some mismatched bases which usually have the same position in scaffold (Fig.Â <xref rid="Fig3" ref-type="fig">3</xref>, Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S2-S3). For a base in scaffold, there will be many aligned reads covering it, the read count is called <italic>coverage</italic> which consists of the counts of A, C, G and T, respectively. If the majority nucleotide differs no much with others, e.g., the percent of the majority &lt;0.8, we call the nucleotide in scaffold a <italic>disagreement</italic>. For misjoins, there are usually some disagreements around breakpoint margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub>, whereas the normal regions usually have no disagreements (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1). Also, for the breakpoint region with margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub>, some nucleotides may also have abnormal high or low coverage (even zero coverage), and these abnormal coverage usually indicates assembly error.</p>
        <p>After aligning paired-end reads to scaffolds, most of the reads are uniquely aligned in normal regions, and there are usually some multiple aligned reads in misjoin regions with margins <italic>M</italic><sub><italic>L</italic></sub> and <italic>M</italic><sub><italic>R</italic></sub> (Fig.Â <xref rid="Fig3" ref-type="fig">3</xref>). This is also caused by repeats, the repeat regions usually have more multiple aligned reads than that of other normal regions. Therefore, for a breakpoint region of misjoin, we compute the percentage of the multiple aligned reads, named <italic>multi-align ratio</italic>, to determine whether this difference is caused by repeats. High values of the multi-align ratio (e.g., &gt;0.1) may indicate the assembly error.</p>
        <p>Therefore, in summary, the putative misjoin is a validated assembly error if it satisfies at least one of the following two conditions: (1) it has abnormal coverage or more than 1 disagreement; (2) the multi-align ratio is high, say &gt;0.1. Otherwise, it may be due to structural variation that needs further analysis (see section âDistinguish correct assemblies corresponding to structural variationsâ).</p>
      </sec>
      <sec id="Sec15">
        <title>Validate insertion errors</title>
        <p>After placing paired-end reads to their most likely locations in scaffolds and computing the breakpoint regions of insertion errors (Fig.Â <xref rid="Fig4" ref-type="fig">4a</xref>-<xref rid="Fig4" ref-type="fig">c</xref>), misFinder analyzes the aligned reads around the breakpoint regions. For the insertion error in the middle, misFinder identifies the paired-end reads whose two ends are aligned to the two flanking sub-segments, and then calculates the fragment size of the paired-end reads. If the difference of the fragment size and the library insert size is close to the size of the inserted sequence, e.g., &lt;2 * standard deviation, then it may indicate an assembly error. Moreover, it may contain some disagreements, low coverage, and many discordant read pairs with large fragment size (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4). Therefore, in order to call the assembly error with high confidence, the putative insertion error in the middle of a scaffold is a validated assembly error if: (1) the difference of the fragment size and the library insert size is close to the size of the inserted sequence, and (2) it satisfies at least two of the following conditions: (i) it has disagreements; (ii) low coverage; and (iii) many discordant read pairs with large fragment size, e.g., discordant ratioâ&gt;â0.1.</p>
        <p>For the insertion errors whose differences of the fragment size and the library insert size are not close to the size of the inserted sequences, the length of inserted sequences are usually larger than the read length. They usually have some disagreements in the breakpoint regions, and we calculate the number of disagreements per kilo base pairs in the breakpoint regions. Therefore, these putative insertion errors in the middle of scaffolds are validated assembly errors if they have more than one disagreement per kilo base pairs in their breakpoint regions.</p>
        <p>Moreover, for the insertion error at the 5â²/3â² end of a scaffold, as it has no paired-end reads for most cases, misFinder calculates the read coverage at the scaffold end, and if there are some disagreements or zero-coverage nucleotides, then it should be a true erroneous insertion sequence.</p>
      </sec>
      <sec id="Sec16">
        <title>Validate deletion errors</title>
        <p>In contrast with insertion error, the deletion error has a missing sequence in scaffolds (Fig.Â <xref rid="Fig4" ref-type="fig">4d</xref>). misFinder identifies the paired-end reads whose two ends are aligned to the two flanking sub-segments, and then calculates the fragment size of these paired-end reads. If the difference of the library insert size and the fragment size is close to the size of the deleted sequence, e.g., &lt;2 * standard deviation, then it may indicate an assembly error. It may contain some disagreements, high or low coverage (even zero-coverage), and some discordant read pairs with erroneous orientation or small fragment size in the breakpoint region (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5). Therefore, in order to call the assembly error with high confidence, the putative deletion error is a validated assembly error if: (1) the difference of the library insert size and the fragment size is close to the size of the deleted sequence, and (2) it satisfies at least two of the following conditions: (i) it has disagreements; (ii) high or low coverage (even zero-coverage); and (iii) many discordant read pairs with erroneous orientation or small fragment size, e.g., discordant ratioâ&gt;â0.1.</p>
        <p>Similar with the insertion errors, for the deletion errors whose differences of the fragment size and the library insert size are not close to the size of the deleted sequences, the length of deleted sequences are usually larger than the read length. They usually have some disagreements in the breakpoint regions, and we calculate the number of disagreements per kilo base pairs in the breakpoint regions. Therefore, these putative deletion errors in the scaffolds are validated assembly errors if they have more than one disagreement per kilo base pairs in their breakpoint regions.</p>
      </sec>
    </sec>
    <sec id="Sec17">
      <title>Distinguish correct assemblies corresponding to structural variations</title>
      <p>After validating the potential mis-assemblies, assembly errors are identified, and there are still some differences due to structural variations that are not validated as assembly errors, and they may need further analysis. In order to distinguish these correct assemblies corresponding to structural variations with high confidence, we perform the correct assembly analysis to determine them.</p>
      <p>For the correctly assembled scaffold regions, they usually have the same patterns as the normal regions, while for assembly errors their patterns differ significantly with the normal regions, which can be used to determine the correct assemblies from the differences that are not been identified as assembly errors in previous section. For the difference between the scaffold and reference that is not identified as assembly error, if its breakpoint region has even coverage, no disagreements, and very few discordant read pairs (e.g., discordant ratio &lt;0.1), it should be a correct assembly whose difference is caused by structural variations; otherwise, misFinder output it as a warning that may need further analysis.</p>
      <p>After the analysis, some novel sequences could be identified, e.g., novel sequences of 9 kbp and 4.6 kbp in <italic>S.pombe</italic> strain jb1168 were identified, and they should be correct assemblies rather than assembly errors (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S6-S7).</p>
    </sec>
  </sec>
  <sec id="Sec18" sec-type="results">
    <title>Results</title>
    <sec id="Sec19">
      <title>Detection of assembly errors on simulated data</title>
      <p>Genome assembly usually contains some common errors such as misjoins of distinct genomic regions, erroneous insertions and deletions. To test misFinderâs ability to detect such errors, we used GemSIM [<xref ref-type="bibr" rid="CR23">23</xref>] to generate 50Ã simulated Illumina short reads data on <italic>Escherichia coli</italic> K12 MG1655 (refSeq: NC_000913.2, genome size 4.64 Mbp), with mean insert size 368Â bp and standard deviation 61Â bp. Next, these paired-end reads data were assembled using MaSuRCA (v2.2.1) [<xref ref-type="bibr" rid="CR24">24</xref>], and 71 scaffolds were generated. Finally, the misFinder was performed to identify assembly errors in the scaffolds using the genome reference and paired-end short reads data. Note that the differences between the assembly and reference could be directly treated as errors without considering structural variations for simulated reads data.</p>
      <p>According to our experiments, MaSuRCA produced more assembly errors (especially the fatal misjoins) than other assemblers on <italic>E.coli</italic> and <italic>S.pombe</italic> genomes. MaSuRCA generated more mis-assembled contigs than other assemblers, and the detailed information can be seen in our previous work [<xref ref-type="bibr" rid="CR12">12</xref>], therefore, MaSuRCA was chosen to be the assembler for the experiments of <italic>E.coli</italic> and <italic>S.pombe</italic> genomes to give better presentations for the performance of misFinder on identifying the assembly errors and structural variations.</p>
      <p>We tested misFinder by first aligning the assembly to the reference using BLASTN (v2.2.25+) [<xref ref-type="bibr" rid="CR20">20</xref>] with option â-best_hit_overhang 0.1â to reduce the redundant short align segments. The remaining redundant short segments were further removed to obtain non-redundant align segments, therefore most of the scaffolds each had only one large align segment with only a few mismatched bases, e.g., insertions/deletions and mismatches. Then, the paired-end reads were aligned to the assembly to assist in extracting the suspicious mis-assembly breakpoint regions before analyzing their alignment information. Finally, 27 assembly errors including 3 misjoins, 20 insertion errors and 4 deletion errors were identified according to multiple features of their paired-end reads information (Fig.Â <xref rid="Fig5" ref-type="fig">5</xref>).<fig id="Fig5"><label>Fig. 5</label><caption><p>Visualization of misFinder output for identifying assembly errors on <italic>E.coli</italic> simulated data. The running results of misFinder are shown using Circos [<xref ref-type="bibr" rid="CR30">30</xref>]. The ideogram (green) shows the circularized selected scaffolds containing errors and structural variations. The scatter plot shows the identified assembly errors (red circles for misjoins, orange circles for indel errors) and correct assemblies (blue circles for correct indels, green circles for false misjoins) corresponding to structural variations by misFinder. There are 27 assembly errors and 8 correct assemblies corresponding to artificial SVs. The disagreement plot marks the disagreement for each base in scaffolds. The zero coverage plot marks each nucleotide with zero coverage. The multi-align ratio plot shows the ratio of multiple aligned reads for each region of 500Â bp, ranging from 0 to 1. The discordant ratio plot shows the discordant ratio of discordant read pairs for each 500-bp region in scaffolds, ranging from 0 to 1. The last plot shows the read coverage in scaffolds</p></caption><graphic xlink:href="12859_2015_818_Fig5_HTML" id="MO5"/></fig></p>
      <p>We checked all these identified assembly errors manually, and found all of them were true assembly errors and correctly identified by misFinder without introducing mis-identification errors, which may indicate misFinderâs high accuracy of identification of assembly errors.</p>
    </sec>
    <sec id="Sec20">
      <title>Distinguish assembly errors and correct assemblies corresponding to structural variations on simulated data</title>
      <p>Since the target genome and the reference genome usually are not the same, they may contain some structural variations (SVs), and for the difference between the assembly and reference, it may be caused by assembly errors or it is a correct assembly corresponding to SVs, therefore it needs to determine whether the difference is caused by assembly error or it is a correct assembly corresponding to SVs when performing the assembly error call.</p>
      <p>To test the ability of misFinder to call assembly errors and correct assemblies corresponding to SVs, we introduced six different modifications into the <italic>E.coli</italic> genome reference to analog the SVs, these modifications included one duplicated sequence (segment size 1 kbp), one large relocation (segment size 57 kbp), two insertions (70Â bp and 30Â bp) and two deletions (70Â bp and 30Â bp) (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S8). The similarity between the artificially modified reference and the original reference is 99.97Â %. We treated this mutated reference as new high quality reference, and treated the assembly as the target genome in which some differences may be due to SVs rather than assembly errors. Then, the scaffolds and paired-end reads data in previous section were directly used again to test the performance of misFinder on identification of the assembly errors and the correct assemblies with SVs that were correctly assembled. As the duplicated sequence introduced one difference and the large relocation produced three differences at their joined positions, there were eight differences between the target genome and the reference. As a result, misFinder successfully identified all the 27 assembly errors that were already detected in previous section without introducing miscalled errors, and moreover, it determined all the eight differences caused by SVs as correct assemblies (Fig.Â <xref rid="Fig5" ref-type="fig">5</xref>).</p>
      <p>From the above two experiments on simulated short reads data, it shows that misFinder has good ability for identifying the assembly errors and correct assemblies corresponding to SVs with high accuracy by using the reference and paired-end reads data.</p>
    </sec>
    <sec id="Sec21">
      <title>Performance on <italic>E.coli</italic> single-cell data</title>
      <p>We tested the performance of misFinder on <italic>E.coli</italic> K12 strain MG1655 single cell data. The single-cell sequencing data (<italic>E. coli</italic>, first single cell MDA, lane 1) [<xref ref-type="bibr" rid="CR25">25</xref>] were downloaded from <ext-link ext-link-type="uri" xlink:href="http://bix.ucsd.edu/projects/singlecell/nbt_data.html">http://bix.ucsd.edu/projects/singlecell/nbt_data.html</ext-link>, with mean insert size 282Â bp and standard deviation 65Â bp, sequencing depth ~600Ã. The MaSuRCA assembly and the artificially modified reference in previous section were used again to test the performance of misFinder on identifying assembly errors and structural variations on highly uneven sequencing data.</p>
      <p>The experiments for single-cell reads data were carried out on an Intel(R) Xeon(R) Core-16 CPU 2.67-GHz server supplied with 24Â GB memory. The single-cell sequencing data option â-sc 1â was specified then performing the experiments using 16 threads, the running time was 8Â min and the memory consumption was 2.4Â GB, and all the 27 assembly errors and 8 structural variations were successfully identified without introducing other miscalls (result was not shown), which may indicate that misFinder has good performance not only on uniform distribution coverage data but also on highly uneven sequencing data (e.g., single-cell sequencing).</p>
    </sec>
    <sec id="Sec22">
      <title>Detection of assembly errors on real data</title>
      <p>To test the performance of misFinder on real sequence data, we applied it to <italic>Schizosaccharomyces pobme</italic> strain jb1168 real short paired-end reads data by using the same assembler MaSuRCA [<xref ref-type="bibr" rid="CR24">24</xref>]. The paired-end reads data (SRA: ERX174934) of <italic>S.pombe</italic> were downloaded from NCBI, with mean insert size 380Â bp and standard deviation 82Â bp. Since the reference of strain jb1168 is not available, we used the high quality reference of its close strain 972Â h- (genome size 12.59 Mbp) which consists of three chromosomes and one mitochondrion (refSeqs: NC_003424.3, NC_003423.3, NC_003421.2 and NC_001326.1). For the assembly of the <italic>S.pombe</italic> strain jb1168, there were some assembly errors introduced during the assembly step, and moreover, the target genome and the reference genome were not exactly the same, there were some structural variations between them. Therefore, misFinder was used to find the assembly errors and correct assemblies corresponding to structural variations.</p>
      <p>First, <italic>de novo</italic> assembly was carried out using MaSuRCA, and produced 465 scaffolds. Then, misFinder was applied to identify the assembly errors and distinguish the correct assemblies corresponding to SVs in the scaffolds by using the <italic>S.pombe</italic> strain 972h- reference and paired-end reads data. misFinder identified 116 assembly errors and 22 correct assemblies corresponding to structural variations with only three false positives and one false negative. For the 116 assembly errors, there were 22 misjoins, 49 erroneous insertions and 45 erroneous deletions; and for the 22 correct assemblies, there were 13 insertions, 6 deletions and 3 false misjoins, ranging from several base pairs to several kilos of nucleotides.</p>
      <p>These assembly errors and correct assemblies corresponding to SVs were all manually checked by aligning their paired-end reads to see the coverage, disagreements and discordant read pairs and etc., using BLASTN [<xref ref-type="bibr" rid="CR20">20</xref>] alignments and IGV [<xref ref-type="bibr" rid="CR26">26</xref>]. For the 116 identified errors, there were only 3 false positives; and for the 22 correct assemblies, there was only one miscalls.</p>
      <p>FigureÂ <xref rid="Fig6" ref-type="fig">6</xref> showed 10 scaffolds with the most typical errors and correct assemblies corresponding to variations were selected and analyzed by manually comparing the scaffolds with the reference sequence using ACT [<xref ref-type="bibr" rid="CR27">27</xref>], and by visualizing their aligned paired-end reads using IGV [<xref ref-type="bibr" rid="CR26">26</xref>]. In the figure, the erroneous regions had some disagreements, low coverage, many discordant read pairs, and other abnormal features, whereas the correct assembly regions had well supported paired-end reads, even coverage and no disagreements.<fig id="Fig6"><label>Fig. 6</label><caption><p>Visualization of misFinder output for identifying assembly errors on selected 10 scaffolds of most errors for <italic>S.pombe</italic> real data. The running results of misFinder are shown using Circos [<xref ref-type="bibr" rid="CR30">30</xref>]. The ideogram (green) shows the circularized selected scaffolds. The scatter plot shows the marked assembly errors (red circles for misjoins, orange circles for indel errors) and correct assemblies (blue circles for correct indels, green circles for false misjoins) corresponding to structural variations identified by misFinder. The disagreement plot marks the disagreement for each base in scaffolds. The zero coverage plot marks each nucleotide with zero coverage. The multi-align ratio plot shows the ratio of multiple aligned reads for each region of 500Â bp, ranging from 0 to 1. The discordant ratio plot shows the discordant ratio of discordant read pairs for each 500-bp region in scaffolds, ranging from 0 to 1. The last plot shows the read coverage in scaffolds. <bold>a</bold>, <bold>b</bold> show zoomed regions in the figure. <bold>a</bold> An identified assembly error of 55Â bp deletion error in scaffolds was visualized using ACT (I) and IGV (II). <bold>b</bold> A detected correct assembly corresponding to structural variation of 3 kbp copy number variation in scaffolds was visualized using ACT (I) and IGV (II)</p></caption><graphic xlink:href="12859_2015_818_Fig6_HTML" id="MO6"/></fig></p>
      <p>From the above three experiments, it shows that misFinder has good performance on identification of assembly errors with only few false positives, and it also pinpoints the correct assemblies corresponding to structural variations with high accuracy, which indicates the great power of misFinder to detect the assembly errors using genome reference and multiple features extracted from paired-end reads data, thus could help to increase the accuracy of assembly results for downstream analysis.</p>
    </sec>
    <sec id="Sec23">
      <title>Corrected assembly statistics</title>
      <p>To highlight the performance of misFinder on mis-assembly identification, we evaluated it on both the accuracy of mis-assembly identification and the continuity of the corrected assembly using the assemblies of <italic>E.coli</italic> and <italic>S.pombe</italic> on simulated and real Illumina paired-end reads data. The <italic>E.coli</italic> and <italic>S.pombe</italic> assembly data were used again to perform the experiments, and the artificially modified reference was used as the high quality <italic>E.coli</italic> genome reference, and there were some differences between these two target genomes and their genome references.</p>
      <p>In order to test the performance of misFinder on large genome, human chromosome 14 (refSeq: NT_026437.12, reference size 88.29 Mbp) simulated data were used to perform the experiments. The simulated data were generated using GemSIM [<xref ref-type="bibr" rid="CR23">23</xref>], with length 100Â bp, mean insert size 369Â bp and standard deviation 45Â bp. We chose CABOG [<xref ref-type="bibr" rid="CR28">28</xref>] to perform the assembly because CABOG produced more errors than other tools according to our previous work [<xref ref-type="bibr" rid="CR11">11</xref>, <xref ref-type="bibr" rid="CR12">12</xref>].</p>
      <p>We compare the N50 size of the assemblies before and after the correction (indicated as N50_cor). Since QUAST [<xref ref-type="bibr" rid="CR16">16</xref>] just computed mis-assembly statistics rather than correcting errors, we chose the metrics NA50 as the corrected N50. And we computed the following mis-assembly statistics, including true positives (TP, the assembly errors correctly determined), false positives (FP, correct assembly were incorrectly considered as assembly errors), false negatives (FN, assembly errors could not be determined), precision (<italic>Precision</italic>â=â<italic>TP</italic>/(<italic>TP</italic>â+â<italic>FP</italic>)) and true positive rate (TPR, <italic>TPR</italic>â=â<italic>TP</italic>/(<italic>TP</italic>â+â<italic>FN</italic>)). Precision is the fraction of identified assembly errors that are true, while true positive rate TPR (also known as recall or sensitivity) is the fraction of true assembly errors that are identified.</p>
      <p>We also further compared misFinder with the reference-based approach QUAST (v2.3) [<xref ref-type="bibr" rid="CR16">16</xref>] and the <italic>de novo</italic> approach REAPR (v1.0.17) [<xref ref-type="bibr" rid="CR19">19</xref>] on the same datasets, and recorded their running time and memory consuming. The experiments for the <italic>E.coli</italic> simulated reads data and <italic>S.pombe</italic> real reads data were carried out on a 64-bit Linux machine with an Intel(R) Core-2 CPU 2.53-GHz supplied with 3Â GB memory, and the results were shown in TablesÂ <xref rid="Tab1" ref-type="table">1</xref> and <xref rid="Tab2" ref-type="table">2</xref>, respectively. The experiments for the human chromosome 14 simulated reads data were carried out on a 64-bit Linux server with 64 Intel(R) Xeon(R) CPUs of 2.00-GHz supplied with 1Â TB memory, and the results were shown in TableÂ <xref rid="Tab3" ref-type="table">3</xref>.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Performance on assembly of <italic>E.coli</italic> simulated reads data</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>#scf</th><th>N50 (kbp)</th><th>#scf_cor</th><th>N50_cor (kbp)</th><th>#Misass (TP,FP,FN)<sup>a</sup>
</th><th>Precision</th><th>TPR</th><th>#Corr.<sup>b</sup>
</th><th>Time (min)</th><th>Memory (GB)</th></tr></thead><tbody><tr><td>misFinder</td><td>71</td><td char="." align="char">172.8</td><td><bold>74</bold></td><td char="." align="char"><bold>172.8</bold></td><td><bold>27 / 0 / 1</bold></td><td char="." align="char"><bold>1.0</bold></td><td char="." align="char"><bold>0.964</bold></td><td><bold>8</bold></td><td>2</td><td char="." align="char">0.8</td></tr><tr><td>QUAST</td><td>71</td><td char="." align="char">172.8</td><td>-<sup>c</sup>
</td><td char="." align="char">151.2</td><td>27 / 9 / 1</td><td char="." align="char">0.75</td><td char="." align="char"><bold>0.964</bold></td><td>-</td><td><bold>1</bold></td><td char="." align="char"><bold>0.4</bold></td></tr><tr><td>REAPR</td><td>71</td><td char="." align="char">172.8</td><td><bold>74</bold></td><td char="." align="char"><bold>172.8</bold></td><td>13 / 0 / 15</td><td char="." align="char"><bold>1.0</bold></td><td char="." align="char">0.464</td><td>-</td><td>17</td><td char="." align="char"><bold>0.4</bold></td></tr></tbody></table><table-wrap-foot><p><sup>a</sup>Number of Assembly errors were called by misFinder, QUAST and REAPR, including TP (true positives) and FP (false positives), while FN (false negatives) is the number of assembly errors that were not called</p><p><sup>b</sup>Number of correct assemblies corresponding to structural variations called by misFinder</p><p><sup>c</sup>QUAST did not output the number of broken scaffolds</p><p>The bold data reflected the best values for each column</p></table-wrap-foot></table-wrap><table-wrap id="Tab2"><label>Table 2</label><caption><p>Performance on assembly of <italic>S.pombe</italic> real reads data</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>#scf</th><th>N50 (kbp)</th><th>#scf_cor</th><th>N50_cor (kbp)</th><th>#Misass (TP,FP,FN)<sup>a</sup>
</th><th>Precision</th><th>TPR</th><th>#Corr.<sup>b</sup>
</th><th>Time (min)</th><th>Memory (GB)</th></tr></thead><tbody><tr><td>misFinder</td><td>465</td><td char="." align="char">64.7</td><td><bold>481</bold></td><td char="." align="char"><bold>61.6</bold></td><td><bold>113 / 3 / 9</bold></td><td char="." align="char"><bold>0.974</bold></td><td char="." align="char"><bold>0.926</bold></td><td><bold>22</bold></td><td>11</td><td char="." align="char">1.0</td></tr><tr><td>QUAST</td><td>465</td><td char="." align="char">64.7</td><td>-<sup>c</sup>
</td><td char="." align="char"><bold>61.6</bold></td><td>80 / 115 / 42</td><td char="." align="char">0.410</td><td char="." align="char">0.656</td><td>-</td><td><bold>2</bold></td><td char="." align="char"><bold>0.8</bold></td></tr><tr><td>REAPR</td><td>465</td><td char="." align="char">64.7</td><td>668</td><td char="." align="char">40.1</td><td>59 / 891 / 63</td><td char="." align="char">0.062</td><td char="." align="char">0.484</td><td>-</td><td>128</td><td char="." align="char"><bold>0.8</bold></td></tr></tbody></table><table-wrap-foot><p><sup>a</sup>Number of Assembly errors were called by misFinder, QUAST and REAPR, including TP (true positives) and FP (false positives), while FN (false negatives) is the number of assembly errors that were not called</p><p><sup>b</sup>Number of correct assemblies corresponding to structural variations called by misFinder</p><p><sup>c</sup>QUAST did not output the number of broken scaffolds</p><p>The bold data reflected the best values for each column</p></table-wrap-foot></table-wrap><table-wrap id="Tab3"><label>Table 3</label><caption><p>Performance on assembly of human chromosome 14 simulated reads data</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>#scf</th><th>N50 (kbp)</th><th>#scf_cor</th><th>N50_cor (kbp)</th><th>#Misass (TP,FP,FN)<sup>a</sup>
</th><th>Precision</th><th>TPR</th><th>#Corr.<sup>b</sup>
</th><th>Time (min)</th><th>Memory (GB)</th></tr></thead><tbody><tr><td>misFinder</td><td>2114</td><td char="." align="char">82.8</td><td>2552</td><td char="." align="char">69.9</td><td><bold>787 / 0 / 95</bold></td><td char="." align="char"><bold>1.0</bold></td><td char="." align="char"><bold>0.892</bold></td><td><bold>12</bold></td><td><bold>21</bold></td><td>30<sup>c</sup>
</td></tr><tr><td>QUAST</td><td>2114</td><td char="." align="char">82.8</td><td>-<sup>d</sup>
</td><td char="." align="char">69.4</td><td>602 / 282 / 265</td><td char="." align="char">0.681</td><td char="." align="char">0.694</td><td>-</td><td>107</td><td><bold>4</bold></td></tr><tr><td>REAPR</td><td>2114</td><td char="." align="char">82.8</td><td><bold>2322</bold></td><td char="." align="char"><bold>75.3</bold></td><td>469 / 140 / 428</td><td char="." align="char">0.770</td><td char="." align="char">0.523</td><td>-</td><td>171</td><td>5.8</td></tr></tbody></table><table-wrap-foot><p><sup>a</sup>Number of Assembly errors were called by misFinder, QUAST and REAPR, including TP (true positives) and FP (false positives), while FN (false negatives) is the number of assembly errors that were not called</p><p><sup>b</sup>Number of correct assemblies corresponding to structural variations called by misFinder</p><p><sup>c</sup>Memory usage of misFinder: Blastn 30Â GB, error identification 4.5Â GB</p><p><sup>d</sup>QUAST did not output the number of broken scaffolds</p><p>The bold data reflected the best values for each column</p></table-wrap-foot></table-wrap></p>
      <sec id="Sec24">
        <title>Performance on assembly of <italic>E.coli</italic> simulated reads data</title>
        <p>For the results in TableÂ <xref rid="Tab1" ref-type="table">1</xref> on <italic>E.coli</italic>, misFinder identified 27 true positives in scaffolds, with 1 false negative and no false positives, the highest precision (100Â %) and true positive rate (96.4Â %). In the scaffolds, there were three large misjoins of distinct genome regions, misFinder correctly identified all of them and broke the scaffolds at their breakpoints. QUAST identified 36 mis-assemblies, however, there were 9 false positives and 1 false negative, and most of the false positives were corresponding to structural variations, so its precision was only 75Â %. misFinder found 8 correct assemblies corresponding to structural variations using the artificially mutated genome reference, whereas QUAST also found these 8 correct assemblies, but it treated them as assembly errors. REAPR identified 13 errors without false positives, however, 15 assemblies errors were missing called, so the true positive rate TPR was only 46.4Â %.</p>
        <p>The corrected N50 size of misFinder and REAPR did not dropped (172.8 kbp), whereas the corrected N50 size of QUAST dropped from 172.8 kbp to 151.2 kbp, because it incorrectly broke the scaffolds at their breakpoint regions of differences due to structural variations. QUAST had the least time consumption (1Â min), REAPR is the most time consuming (17Â min), misFinder is moderate on time consumption (2Â min), which is because that misFinder and REAPR performed the time consuming paired-end reads alignment while QUAST did not. QUAST and REAPR had the least memory usage (0.4Â GB), and misFinder cost more memory (0.8Â GB).</p>
      </sec>
      <sec id="Sec25">
        <title>Performance on assembly of <italic>S.pombe</italic> real reads data</title>
        <p>For the <italic>S.pombe</italic> assembly in TableÂ <xref rid="Tab2" ref-type="table">2</xref>, misFinder identified 116 errors including 113 true positives and 3 false positives (precision 97.4Â %), with only 9 false negatives, and it also identified 22 correct assemblies corresponding to structural variations. In scaffolds, misFinder detected 22 misjoins and broke the scaffolds at their breakpoints. For QUAST, it identified 195 errors including 80 true positive errors and 115 false positives (precision 41Â %), and with 42 false negatives. REAPR identified 950 errors including 59 true positives and 891 false positives (precision 6.2Â %), and with 63 false negatives. misFinder detected more true positives than QUAST and REAPR, while QUAST and REAPR generated more false positives than misFinder.</p>
        <p>misFinder had the highest precision (97.4Â %), while these values of QUAST and REAPR were only 41Â % and 6.2Â %, respectively. QUAST and REAPR treated gaps between contigs in scaffolds as errors directly, while these gaps were caused by lack of read coverage and they were normal and common in scaffolds, so misFinder just report these gaps rather than treat them as errors. Moreover, QUAST treated all the differences as assembly errors directly without considering structural variations, thus introduced some false positives, e.g., there were 5 false positives caused by structural variations in the 115 false positives identified by QUAST, but misFinder could distinguish these correct assemblies corresponding to structural variations.</p>
        <p>misFinder had the highest true positive rate (92.6Â %), while these values of QUAST and REAPR were 65.6Â % and 48.4Â %, respectively. misFinder and QUAST employed the reference to anchor differences which may be assembly errors and generated accurate results, while QUAST had some missing calls in the scaffolds and introduced some false negatives. REAPR used the inconsistence information of read coverage which was not reliable on some error regions, thus resulted in some false negatives.</p>
        <p>From the results, it can be seen that misFinder could give accurate assembly error calls, it is because that misFinder adopted a mixed approach to combine the high quality reference and paired-end reads information, and applied the genome reference information to locate the differences between the assembly and the reference, and then aligned the paired-end reads information to validate these differences according to multiple characteristics, such as disagreements, coverage, discordant reads and multiple aligned reads information.</p>
        <p>misFinder and QUAST had slight decrease on N50 size which dropped from 64.7 kbp to 61.6 kbp, while for REAPR, the N50 size dropped dramatically from 64.7 kbp to 40.1 kbp, that was because REAPR broke scaffolds at assembly errors over gaps, and many gaps were caused by lack of read coverage which were normal and common in scaffolds, thus introduced false broken, whereas misFinder just broke scaffolds at regions of misjoins instead. QUAST was the fastest (2Â min) and REAPR was the most time consuming (128Â min), while misFinder was moderate on running time (11Â min) and memory consumption (1.0Â GB).</p>
        <p>From the above experiments, misFinder had better performance than QUAST and REAPR on both simulated and real paired-end reads data. It generated more accurate assembly error calls because it combined the reference-based approach and <italic>de novo</italic> approach to fully utilize the information of high quality reference and paired-end reads in an unbiased way. It identified true positive mis-assemblies with few false positives and false negatives; it also distinguished the correct assemblies corresponding to structural variations from mis-assembled sequences.</p>
      </sec>
      <sec id="Sec26">
        <title>Performance on assembly of human chromosome 14 simulated reads data</title>
        <p>Human chromosome 14 simulated short reads data were used to test the performance of misFinder on large genomes. Six modifications were introduced to the human chromosome 14 (refSeq: NT_026437.12, reference size 88.29 Mbp), including one large relocation (segment size 70 kbp), one duplicated sequence (segment size 1.4 kbp), two insertions (70Â bp and 30Â bp) and two deletions (70Â bp and 30Â bp) (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S9). We treated this mutated reference as new high quality reference, and treated the CABOG assembly as the target genome in which some differences may be due to SVs rather than assembly errors. As the duplicated sequence introduced one difference and the large relocation produced three differences at their joined positions, there were eight differences between the target genome and the reference. Moreover, we compared misFinder with QUAST and REAPR, and the results were shown in TableÂ <xref rid="Tab3" ref-type="table">3</xref>.</p>
        <p>From the table, misFinder identified 787 true positives in scaffolds, with only 95 false negatives and no false positives, the highest precision (100Â %) and true positive rate (89.2Â %). QUAST identified 602 true positive mis-assemblies, however, there were 282 false positives and 265 false negatives, in which 6 false positives were corresponding to structural variations, so its precision and true positive rate were only 68.1Â % and 69.4Â %, respectively. misFinder found 12 correct assemblies in which 8 were corresponding to structural variations, whereas QUAST found only 6 of these 8 correct assemblies, but it treated them as assembly errors. REAPR identified 469 true positives with 140 false positives and 428 false negatives, so its precision and true positive rate were only 77Â % and 52.3Â %, respectively.</p>
        <p>We checked the 4 false structural variations, and all these miscalls were caused by highly repetitive short tandem repeats with lengths larger than the read length (e.g., 100Â bp), and one typical example was the deletion error of length 10 base pairs, which was caused by the highly repetitive short tandem repeat in the form of âCTTTCTTTâ¦CTTTCCTTTCCTTTâ¦CCTTTâ with CTTT and CCTTT repeated many times, and reads in the genome region were well-aligned and without abnormal patterns because of the short size of the deleted sequence, so this case was difficult to be distinguished between the assembly error and structural variation. Therefore, misFinder identified these 8 structural variations correctly and miscalled other 4 assembly errors as structural variations.</p>
        <p>misFinder and QUAST had decrease on N50 size which dropped from 82.8 kbp to 69 kbp, while for REAPR, the N50 size dropped slightly from 82.8 kbp to 75.3 kbp, that was because REAPR had much more false negatives than misFinder and QUAST, resulting in many assembly errors undetected.</p>
        <p>misFinder had the least time consuming (21Â min) and the highest memory consumption (30Â GB), because it used 64 threads to perform the BLASTN alignment, and each thread required about 0.5Â GB memory, thus it had the fastest speed and highest memory usage. If the thread number is half reduced to 32, the memory consumption will half reduced accordingly, and the running time may be doubled to about 40Â min. Besides the BLASTN memory consumption, other parts of misFinder were low (4.5Â GB). QUAST and REAPR took much more time (107Â min and 171Â min) and less memory usage (4Â GB and 5.8Â GB).</p>
      </sec>
    </sec>
    <sec id="Sec27">
      <title>Performance on close reference genomes with different similarities</title>
      <p>In order to illustrate the impact of similarities on the performance between close genomes, four <italic>E.coli</italic> reference genomes with similarities ranging from 70.41Â % to 99.56Â % compared to <italic>E.coli</italic> K12 MG1655 (refSeq: NC_000913.2, genome size 4.64 Mbp), including <italic>E.coli</italic> O157:H7 str. Sakai (refSeq: NC_002695.1, genome size 5.5 Mbp, similarity 70.41Â %), <italic>E.coli</italic> HS (refSeq: NC_009800.1, genome size 4.64 Mbp, similarity 83.56Â %), and two close genome <italic>E.coli</italic> K12 DH10B (refSeq: NC_010473.1, genome size 4.69 Mbp, similarity 94.0Â %) and <italic>E.coli</italic> K12 W3110 (refSeq: NC_007779.1, genome size 4.65 Mbp, similarity 99.56Â %). The 50Ã <italic>E.coli</italic> K12 MG1655 simulated data and MaSuRCA assembly were used again to test their performances using above different reference genomes. As the main purpose of our work is to identify assembly errors to improve the assembly quality, we analyzed the identified errors and calculated the precision (<italic>Precision</italic>â=â<italic>TP</italic>/(<italic>TP</italic>â+â<italic>FP</italic>)) for the number of true errors among the identified errors for different reference genomes, and the results were shown in TableÂ <xref rid="Tab4" ref-type="table">4</xref>.<table-wrap id="Tab4"><label>Table 4</label><caption><p>Performance on close reference genomes with different similarities for the assembly of <italic>E.coli</italic> simulated reads data</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Strain</th><th>Similarity compared to <italic>E.coli</italic> K12 MG1655</th><th>#Identified errors</th><th>#True errors</th><th>Precision</th></tr></thead><tbody><tr><td><italic>E.coli</italic> O157:H7 str. Sakai</td><td char="." align="char">0.7041</td><td>46</td><td>34</td><td char="." align="char">0.7391</td></tr><tr><td><italic>E.coli</italic> HS</td><td char="." align="char">0.8356</td><td>38</td><td>32</td><td char="." align="char">0.8421</td></tr><tr><td><italic>E.coli</italic> K12 DH10B</td><td char="." align="char">0.94</td><td>30</td><td>29</td><td char="." align="char">0.9667</td></tr><tr><td><italic>E.coli</italic> K12 W3110</td><td char="." align="char">0.9956</td><td>30</td><td>30</td><td char="." align="char">1.0</td></tr></tbody></table></table-wrap></p>
      <p>From the table, it can be seen that the precision increased with the increase of the genome similarity. The <italic>E.coli</italic> strain Sakai had the lowest similarity (70.41Â %) compared to the strain K12 MG1655 while the strain K12 W3110 had the highest similarity (99.56Â %), and misFinder had the highest precision (100Â %) on the strain K12 W3110 and the lowest precision (73.91Â %) on the strain Sakai. misFinder identified more assembly errors on the strain Sakai than on other strains, however, some of the identified errors were false errors, they were miscalled because these scaffold regions were not well aligned to the reference, and some paired-end reads were also incorrectly aligned to these regions and caused some abnormal patterns (e.g., disagreements and abnormal coverage depth), even though these regions were correctly assembled and could be perfectly aligned to the <italic>E.coli</italic> K12 MG1655 reference.</p>
      <p>For the reference genome of lower similarity, there will be more scaffold regions that could not be well aligned to the reference, and some regions may contain incorrectly aligned paired-end reads with some abnormal patterns even though these scaffold regions are correctly assembled, thus these regions may be error prone to be miscalled, whereas they may be ignored when using a higher similarity reference genome as they might be well aligned to the higher similarity reference. Therefore, higher similarity reference genome may lead to better results, and we recommend the similarity of the close reference as much higher as possible.</p>
    </sec>
    <sec id="Sec28">
      <title>Performance on identifying structural variations</title>
      <p>One of the main features of misFinder is finding SVs between a close reference and an assembly, we tested misFinder on <italic>E.coli</italic> K12 MG1655 and <italic>S.pombe</italic> jb1168 genomes and compared its performance with Lumpy (v0.2.11) [<xref ref-type="bibr" rid="CR29">29</xref>], a well-known SV finding tool, and the results were shown in TableÂ <xref rid="Tab5" ref-type="table">5</xref>. The <italic>E.coli</italic> MG1655 simulated reads data and the artificially modified reference, and the <italic>S.pombe</italic> jb1168 real reads data (SRA: ERX174934) and the close reference of <italic>S.pombe</italic> 972Â h- were used again to perform the experiments.<table-wrap id="Tab5"><label>Table 5</label><caption><p>Performance on identifying structural variations for <italic>E.coli</italic> and <italic>S.pombe</italic> genomes</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th/><th colspan="3">misFinder</th><th colspan="3">Lumpy</th></tr><tr><th>Organism</th><th>Close reference genome</th><th>TP,FP,FN</th><th>Precision</th><th>TPR</th><th>TP,FP,FN</th><th>Precision</th><th>TPR</th></tr></thead><tbody><tr><td><italic>E.coli</italic> MG1655</td><td><italic>E.coli</italic> MG1655 artificially mutated reference</td><td>8/0/0</td><td>1.0</td><td>1.0</td><td>4/1/4</td><td>0.8</td><td>0.5</td></tr><tr><td><italic>S.pombe</italic> jb1168</td><td><italic>S.pombe</italic> 972Â h-</td><td>21/1/1</td><td>0.9545</td><td>0.9545</td><td>3/3/19</td><td>0.5</td><td>0.1364</td></tr></tbody></table></table-wrap></p>
      <p>We computed the following statistics, including true positives (TP, the SVs correctly determined), false positives (FP, false SVs were incorrectly considered as SVs), false negatives (FN, SVs could not be determined), precision (<italic>Precision</italic>â=â<italic>TP</italic>/(<italic>TP</italic>â+â<italic>FP</italic>)) and true positive rate (TPR, <italic>TPR</italic>â=â<italic>TP</italic>/(<italic>TP</italic>â+â<italic>FN</italic>)). Precision is the fraction of identified SVs that are true, while true positive rate TPR (also known as recall or sensitivity) is the fraction of true SVs that are identified. As the assembly of the mitochondrion of <italic>S.pombe</italic> (refSeq: NC_001326.1) were fragmented too much (scaffolds were typically 300â500Â bp in length), it was difficult to determine whether the identified SVs were true or false, so the mitochondrion of <italic>S.pombe</italic> was excluded from the analysis.</p>
      <p>According to the results, misFinder identified more structural variations with fewer false positives and fewer false negatives, and obtained better precision and higher true positive rate TPR on both of the two genomes than Lumpy on identifying structural variations. For the <italic>E.coli</italic> genome, there were 8 structural variations according to the artificially modifications (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S8), misFinder identified all of them without introducing false positives and false negatives, whereas Lumpy discovered only 5 SVs with one false positive and 4 false negatives. For the <italic>S.pombe</italic> genome, misFinder identified 22 SVs with one false positive and one false negative, whereas Lumpy discovered only 6 SVs with 3 false positives and 19 false negatives, resulting the presision and TPR were only 0.5 and 0.14, respectively.</p>
      <p>Moreover, there were some novel sequences in <italic>S.pombe</italic> jb1168 compared to <italic>S.pombe</italic> 972Â h-, misFinder identified these novel sequences as structural variations while Lumpy could not find these novel sequences because Lumpy does not contain the assembly process. For example, there were 5 novel sequences in <italic>S.pombe</italic> jb1168 with lengths ranging from 1 kbp to 9 kbp compared to <italic>S.pombe</italic> 972Â h-, but Lumpy could not find these novel sequences.</p>
    </sec>
  </sec>
  <sec id="Sec29" sec-type="discussion">
    <title>Discussion</title>
    <p>We have developed an open-source mis-assembly identification method, misFinder, which identifies the assembly errors by combining the reference and paired-end reads information. The main purpose of our work is to improve the assembly quality by identifying the mis-assemblies excluding the differences caused by structural variations between the target genome and the reference genome.</p>
    <p>There are many repeats (or duplicated sequences) in genome, and they are difficult to be resolved in assembly. Therefore, assembly is usually broken in these repeat regions, and as a result, the repetitive sequences appear at the scaffold ends in most cases, only a few repeats occur in the inner parts of scaffolds. This is consistent with our experiments.</p>
    <p>For the repeats, they should be considered together with the scaffolds they belonged to, even though they have multiple aligned locations in the reference. So, if the repeats are well aligned to the reference together with their scaffolds, the other locations of the repeats will not be considered in our method. Therefore, most of the duplicated sequences have no much impact to the mis-assembly identifications.</p>
    <p>For the structural variation identification, paired-end reads are aligned to the reference (not the scaffolds, and in fact, assembly is usually not performed in most cases), and some abnormal patterns of paired-end reads are applied to call structural variations. However, in our method, scaffolds are first aligned to the reference to determine their differences, and these differences may be caused either by mis-assemblies or by structural variations. And then, paired-end reads are aligned to the scaffolds (not the reference) to distinguish mis-assemblies using those abnormal patterns of paired-end reads. And according to our experiments, the differences that are due to structural variations usually have no abnormal patterns, thus can be excluded. Note that we only consider the scaffold regions that have differences with the reference rather than other well aligned scaffold regions.</p>
    <p>However, some assembly errors caused by highly repetitive short tandem repeats are difficult to be correctly resolved, some of them may be miscalled as structural variations because the lengths of inserted/deleted sequences are typically short (10â20Â bp) and their breakpoint regions usually have well-aligned paired-end reads and no abnormal patterns. Some of these short tandem repeats are difficult to be resolved by misFinder and may cause some mis-identifications, and the lengths of these highly repetitive short tandem repeats are usually longer than the read length, and we think that increase the read length may help to identify these assembly errors more accurately.</p>
    <p>Moreover, some scaffold regions have some mismatches and abnormal coverage depth even though these regions are perfectly aligned to the reference. The reason is that these regions are similar with some other genomic regions which are not successfully reconstructed during assembly (we call these regions as missing regions), and paired-end reads derived from these missing regions are incorrectly aligned to the similar regions with some mismatches, and as a result, abnormal patterns are shown in some well aligned scaffold regions (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S10). But, these regions are well aligned to the reference (they have no differences), so they are correctly constructed, and we do not consider these well aligned regions to prevent miscalls in our method.</p>
  </sec>
  <sec id="Sec30" sec-type="conclusion">
    <title>Conclusions</title>
    <p>Even though there is a high-quality genome reference, for genome sequencing (even the same species), there are usually some differences between the target genome and the reference genome as the two genomes are not exactly the same. For the assembly of a target genome, it may contain many differences may be caused by assembly errors or structural variations. When calling the assembly errors, if we do not consider the differences between the target genome and the reference genome, the results may contain some biases.</p>
    <p>In this article, we present misFinder, a tool that aims to identify the assembly errors with high accuracy in an unbiased way and correct these errors at their misjoined positions to improve the assembly accuracy before downstream analysis. It uses the reference (or close related reference) to find the differences between the scaffolds and the reference, and uses multiple features extracted from the paired-end reads to validate these differences to determine whether they are assembly errors or correct assemblies corresponding to structural variations. Experiments showed that misFinder could identify the assembly errors with fewer miscalls, and the correction almost has no much impacts on the continuity of the assembly both for simulated <italic>E.coli</italic> reads data and real <italic>S.pombe</italic> dataset. Human chromosome 14 experiments showed that misFinder could identify the assembly errors and correct them to improve the assembly quality for large genomes.</p>
  </sec>
  <sec id="Sec31">
    <title>Availability of supporting data</title>
    <p>misFinder was implemented in C language on Linux x86_64 machine. The source code can be freely downloaded from <ext-link ext-link-type="uri" xlink:href="https://github.com/hitbio/misFinder">https://github.com/hitbio/misFinder</ext-link>.</p>
  </sec>
</body>
<back>
  <app-group>
    <app id="App1">
      <sec id="Sec32">
        <title>Additional file</title>
        <p>
          <media position="anchor" xlink:href="12859_2015_818_MOESM1_ESM.doc" id="MOESM1">
            <label>Additional file 1:</label>
            <caption>
              <p><bold>Pattern screenshots for assembly errors.</bold> The file gives screenshots of different patterns for assembly errors, including misjoins, insertions and deletions for the assembly on <italic>E.coli</italic> simulated paired-end short reads data. The file also gives the screenshots of identified novel sequences for the <italic>S.pombe</italic> strain jb1168 genome comparing to the reference of <italic>S.pombe</italic> strain 972Â h-. The file still gives some detailed information for the artificially modified references for <italic>E.coli</italic> and human chromosome 14. (DOC 2626 kb)</p>
            </caption>
          </media>
        </p>
      </sec>
    </app>
  </app-group>
  <fn-group>
    <fn>
      <p>
        <bold>Competing interests</bold>
      </p>
      <p>The authors declare that they have no competing interests.</p>
    </fn>
    <fn>
      <p>
        <bold>Authorsâ contributions</bold>
      </p>
      <p>XZ developed the computational methodologies and implementation, run the studies and drafted the manuscript. HCML and RW performed the experiments, analyzed the data and drafted the manuscript. SMY, FYLC contributed to guide the developments and analysis and reviewed of the manuscript. GQ guided the development and gave useful ideas in early studies. YL, RZ, QJ, BL, YD and GZ analyzed the results and gave some suggestions. YW conceived and managed the study, guided the development and analysis. All authors reviewed and approved the final manuscript.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>This work was partially supported by the National Nature Science Foundation of China (61173085, 61571152 and 81402054), the National High-Tech Research and Development Program (863) of China (2012AA02A601, 2012AA020409, and 2012AA02A604, 2012AA02A616), the Hong Kong GRF (HKU 7111/12E, HKU 719709E and 719611E), the Shenzhen Basic Research Project (NO.JCYJ20120618143038947), the Outstanding Researcher Award (102009124), Natural Science Foundation of Heilongjiang Province (41400298-9-15057 and F201214), Heilongjiang Province and China Postdoctoral Projects (LBH-Z14138 and 2014Â M560272), and the Scientific Research Fund of Heilongjiang Provincial Education Department (12541240).</p>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shendure</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Porreca</surname>
            <given-names>GJ</given-names>
          </name>
          <name>
            <surname>Reppas</surname>
            <given-names>NB</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>XX</given-names>
          </name>
          <name>
            <surname>McCutcheon</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Rosenbaum</surname>
            <given-names>AM</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Accurate multiplex polony sequencing of an evolved bacterial genome</article-title>
        <source>Science</source>
        <year>2005</year>
        <volume>309</volume>
        <issue>5741</issue>
        <fpage>1728</fpage>
        <lpage>1732</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1117389</pub-id>
        <?supplied-pmid 16081699?>
        <pub-id pub-id-type="pmid">16081699</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Margulies</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Egholm</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Altman</surname>
            <given-names>WE</given-names>
          </name>
          <name>
            <surname>Attiya</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bader</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Bemben</surname>
            <given-names>LA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genome sequencing in microfabricated high-density picolitre reactors</article-title>
        <source>Nature</source>
        <year>2005</year>
        <volume>437</volume>
        <issue>7057</issue>
        <fpage>376</fpage>
        <lpage>380</lpage>
        <?supplied-pmid 16056220?>
        <pub-id pub-id-type="pmid">16056220</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schatz</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Assembly of large genomes using second-generation sequencing</article-title>
        <source>Genome Res</source>
        <year>2010</year>
        <volume>20</volume>
        <issue>9</issue>
        <fpage>1165</fpage>
        <lpage>1173</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.101360.109</pub-id>
        <?supplied-pmid 20508146?>
        <pub-id pub-id-type="pmid">20508146</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Treangen</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Repetitive DNA and next-generation sequencing: computational challenges and solutions</article-title>
        <source>Nat Rev Genet</source>
        <year>2012</year>
        <volume>13</volume>
        <issue>1</issue>
        <fpage>36</fpage>
        <lpage>46</lpage>
        <pub-id pub-id-type="pmid">22124482</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Flicek</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Sense from sequence reads: methods for alignment and assembly</article-title>
        <source>Nat Methods</source>
        <year>2009</year>
        <volume>6</volume>
        <issue>11 Suppl</issue>
        <fpage>S6</fpage>
        <lpage>S12</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1376</pub-id>
        <?supplied-pmid 19844229?>
        <pub-id pub-id-type="pmid">19844229</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>
        <source>Genome Res</source>
        <year>2008</year>
        <volume>18</volume>
        <issue>5</issue>
        <fpage>821</fpage>
        <lpage>829</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.074492.107</pub-id>
        <?supplied-pmid 18349386?>
        <pub-id pub-id-type="pmid">18349386</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Simpson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Schein</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>ABySS: A parallel assembler for short read sequence data</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>19</volume>
        <issue>6</issue>
        <fpage>1117</fpage>
        <lpage>1123</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.089532.108</pub-id>
        <?supplied-pmid 19251739?>
        <pub-id pub-id-type="pmid">19251739</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Qian</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Fang</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Shi</surname>
            <given-names>Z</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>De novo assembly of human genomes with massively parallel short read sequencing</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>20</volume>
        <issue>2</issue>
        <fpage>265</fpage>
        <lpage>272</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.097261.109</pub-id>
        <?supplied-pmid 20019144?>
        <pub-id pub-id-type="pmid">20019144</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Peng</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Leung</surname>
            <given-names>HCM</given-names>
          </name>
          <name>
            <surname>Yiu</surname>
            <given-names>SM</given-names>
          </name>
          <name>
            <surname>Chin</surname>
            <given-names>FYL</given-names>
          </name>
        </person-group>
        <article-title>IDBA - A Practical Iterative de Bruijn Graph De Novo Assembler</article-title>
        <source>Res Comput Mol Biol Proc</source>
        <year>2010</year>
        <volume>6044</volume>
        <fpage>426</fpage>
        <lpage>440</lpage>
        <pub-id pub-id-type="doi">10.1007/978-3-642-12683-3_28</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Peng</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Leung</surname>
            <given-names>HC</given-names>
          </name>
          <name>
            <surname>Yiu</surname>
            <given-names>SM</given-names>
          </name>
          <name>
            <surname>Chin</surname>
            <given-names>FY</given-names>
          </name>
        </person-group>
        <article-title>IDBA-UD: a de novo assembler for single-cell and metagenomic sequencing data with highly uneven depth</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>11</issue>
        <fpage>1420</fpage>
        <lpage>1428</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts174</pub-id>
        <?supplied-pmid 22495754?>
        <pub-id pub-id-type="pmid">22495754</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other">Zhu X, Leung HCM, Chin FYL, Yiu SM, Quan G, Liu B, et al. PERGA: A Paired-End Read Guided De Novo Assembler for Extending Contigs Using SVM Approach. In: Proceedings of the International Conference on Bioinformatics, Computational Biology and Biomedical Informatics; Washington DC, USA: ACM; 2013. p 161â70.</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhu</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Leung</surname>
            <given-names>HC</given-names>
          </name>
          <name>
            <surname>Chin</surname>
            <given-names>FY</given-names>
          </name>
          <name>
            <surname>Yiu</surname>
            <given-names>SM</given-names>
          </name>
          <name>
            <surname>Quan</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>B</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>PERGA: A Paired-End Read Guided <italic>De Novo</italic> Assembler for Extending Contigs Using SVM and Look Ahead Approach</article-title>
        <source>PLoS ONE</source>
        <year>2014</year>
        <volume>9</volume>
        <issue>12</issue>
        <fpage>e114253</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0114253</pub-id>
        <?supplied-pmid 25461763?>
        <pub-id pub-id-type="pmid">25461763</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kersey</surname>
            <given-names>PJ</given-names>
          </name>
          <name>
            <surname>Staines</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Lawson</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kulesha</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Derwent</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Humphrey</surname>
            <given-names>JC</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Ensembl Genomes: an integrative resource for genome-scale data from non-vertebrate species</article-title>
        <source>Nucleic Acids Res</source>
        <year>2012</year>
        <volume>40</volume>
        <issue>Database issue</issue>
        <fpage>D91</fpage>
        <lpage>97</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkr895</pub-id>
        <?supplied-pmid 22067447?>
        <pub-id pub-id-type="pmid">22067447</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Zimin</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Puiu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Magoc</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>GAGE: A critical evaluation of genome assemblies and assembly algorithms</article-title>
        <source>Genome Res</source>
        <year>2012</year>
        <volume>22</volume>
        <issue>3</issue>
        <fpage>557</fpage>
        <lpage>567</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.131383.111</pub-id>
        <?supplied-pmid 22147368?>
        <pub-id pub-id-type="pmid">22147368</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Darling</surname>
            <given-names>AE</given-names>
          </name>
          <name>
            <surname>Tritt</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Eisen</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Facciotti</surname>
            <given-names>MT</given-names>
          </name>
        </person-group>
        <article-title>Mauve assembly metrics</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <issue>19</issue>
        <fpage>2756</fpage>
        <lpage>2757</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr451</pub-id>
        <?supplied-pmid 21810901?>
        <pub-id pub-id-type="pmid">21810901</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Vyahhi</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Tesler</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>QUAST: quality assessment tool for genome assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>8</issue>
        <fpage>1072</fpage>
        <lpage>1075</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt086</pub-id>
        <?supplied-pmid 23422339?>
        <pub-id pub-id-type="pmid">23422339</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rahman</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>CGAL: computing genome assembly likelihoods</article-title>
        <source>Genome Biol</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>1</issue>
        <fpage>R8</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-1-r8</pub-id>
        <?supplied-pmid 23360652?>
        <pub-id pub-id-type="pmid">23360652</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Clark</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Egan</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Frazier</surname>
            <given-names>PI</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>ALE: a generic assembly likelihood evaluation framework for assessing the accuracy of genome and metagenome assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>4</issue>
        <fpage>435</fpage>
        <lpage>443</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts723</pub-id>
        <?supplied-pmid 23303509?>
        <pub-id pub-id-type="pmid">23303509</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunt</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kikuchi</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sanders</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Newbold</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berriman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Otto</surname>
            <given-names>TD</given-names>
          </name>
        </person-group>
        <article-title>REAPR: a universal tool for genome assembly evaluation</article-title>
        <source>Genome Biol</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>5</issue>
        <fpage>R47</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-5-r47</pub-id>
        <?supplied-pmid 23710727?>
        <pub-id pub-id-type="pmid">23710727</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J Mol Biol</source>
        <year>1990</year>
        <volume>215</volume>
        <issue>3</issue>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
        <?supplied-pmid 2231712?>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kent</surname>
            <given-names>WJ</given-names>
          </name>
        </person-group>
        <article-title>BLAT--the BLAST-like alignment tool</article-title>
        <source>Genome Res</source>
        <year>2002</year>
        <volume>12</volume>
        <issue>4</issue>
        <fpage>656</fpage>
        <lpage>664</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.229202.ArticlepublishedonlinebeforeMarch2002</pub-id>
        <?supplied-pmid 11932250?>
        <pub-id pub-id-type="pmid">11932250</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Wallis</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>Kandoth</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Kalicki-Veizer</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Mungall</surname>
            <given-names>KL</given-names>
          </name>
          <name>
            <surname>Mungall</surname>
            <given-names>AJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>BreakFusion: targeted assembly-based identification of gene fusions in whole transcriptome paired-end sequencing data</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>14</issue>
        <fpage>1923</fpage>
        <lpage>1924</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts272</pub-id>
        <?supplied-pmid 22563071?>
        <pub-id pub-id-type="pmid">22563071</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McElroy</surname>
            <given-names>KE</given-names>
          </name>
          <name>
            <surname>Luciani</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>GemSIM: general, error-model based simulator of next-generation sequencing data</article-title>
        <source>BMC Genomics</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>74</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-13-74</pub-id>
        <?supplied-pmid 22336055?>
        <pub-id pub-id-type="pmid">22336055</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zimin</surname>
            <given-names>AV</given-names>
          </name>
          <name>
            <surname>Marcais</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Puiu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Roberts</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Yorke</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>The MaSuRCA genome assembler</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>14</issue>
        <fpage>2669</fpage>
        <lpage>2677</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt476</pub-id>
        <?supplied-pmid 23990416?>
        <pub-id pub-id-type="pmid">23990416</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chitsaz</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Yee-Greenbaum</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Tesler</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Lombardo</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Dupont</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Badger</surname>
            <given-names>JH</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Efficient de novo assembly of single-cell bacterial genomes from short-read data sets</article-title>
        <source>Nature Biotech</source>
        <year>2011</year>
        <volume>29</volume>
        <issue>10</issue>
        <fpage>915</fpage>
        <lpage>921</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.1966</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thorvaldsdottir</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Robinson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Mesirov</surname>
            <given-names>JP</given-names>
          </name>
        </person-group>
        <article-title>Integrative Genomics Viewer (IGV): high-performance genomics data visualization and exploration</article-title>
        <source>Brief Bioinform</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>2</issue>
        <fpage>178</fpage>
        <lpage>192</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbs017</pub-id>
        <?supplied-pmid 22517427?>
        <pub-id pub-id-type="pmid">22517427</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Carver</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Rutherford</surname>
            <given-names>KM</given-names>
          </name>
          <name>
            <surname>Berriman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rajandream</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Barrell</surname>
            <given-names>BG</given-names>
          </name>
          <name>
            <surname>Parkhill</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>ACT: the Artemis Comparison Tool</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <issue>16</issue>
        <fpage>3422</fpage>
        <lpage>3423</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti553</pub-id>
        <?supplied-pmid 15976072?>
        <pub-id pub-id-type="pmid">15976072</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Miller</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Venter</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Brownley</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Aggressive assembly of pyrosequencing reads with mates</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <issue>24</issue>
        <fpage>2818</fpage>
        <lpage>2824</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btn548</pub-id>
        <?supplied-pmid 18952627?>
        <pub-id pub-id-type="pmid">18952627</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Layer</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Chiang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>IM</given-names>
          </name>
        </person-group>
        <article-title>LUMPY: a probabilistic framework for structural variant discovery</article-title>
        <source>Genome Biol</source>
        <year>2014</year>
        <volume>15</volume>
        <issue>6</issue>
        <fpage>R84</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2014-15-6-r84</pub-id>
        <?supplied-pmid 24970577?>
        <pub-id pub-id-type="pmid">24970577</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Krzywinski</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Schein</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Connors</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gascoyne</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Horsman</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Circos: an information aesthetic for comparative genomics</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>19</volume>
        <issue>9</issue>
        <fpage>1639</fpage>
        <lpage>1645</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.092759.109</pub-id>
        <?supplied-pmid 19541911?>
        <pub-id pub-id-type="pmid">19541911</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
