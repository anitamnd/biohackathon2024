<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Res Notes</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Res Notes</journal-id>
    <journal-title-group>
      <journal-title>BMC Research Notes</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1756-0500</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">11010338</article-id>
    <article-id pub-id-type="pmid">38605369</article-id>
    <article-id pub-id-type="publisher-id">6753</article-id>
    <article-id pub-id-type="doi">10.1186/s13104-024-06753-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Note</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PySmooth: a Python tool for the removal and correction of genotyping errors</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Soibam</surname>
          <given-names>Benjamin</given-names>
        </name>
        <address>
          <email>soibamb@uhd.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Roman</surname>
          <given-names>Gregg</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.410446.3</institution-id><institution-id institution-id-type="ISNI">0000 0000 9477 8817</institution-id><institution>Department of computer science and engineering technology, </institution><institution>University of Houston- Downtown, </institution></institution-wrap>Houston, TX One Main St, 77002 USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/02teq1165</institution-id><institution-id institution-id-type="GRID">grid.251313.7</institution-id><institution-id institution-id-type="ISNI">0000 0001 2169 2489</institution-id><institution>Department of Biomolecular Sciences, School of Pharmacy, </institution><institution>University of Mississippi, </institution></institution-wrap>415W Faser Hall, University, Oxford, Mississippi, MS 38677-1848 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>11</day>
      <month>4</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>11</day>
      <month>4</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>17</volume>
    <elocation-id>103</elocation-id>
    <history>
      <date date-type="received">
        <day>16</day>
        <month>8</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>3</month>
        <year>2024</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Summary</title>
        <p id="Par1">In genetic mapping studies involving many individuals, genome-wide markers such as single nucleotide polymorphisms (SNPs) can be detected using different methods. However, it comes with some errors. Some SNPs associated with diseases can be in regions encoding long noncoding RNAs (lncRNAs). Therefore, identifying the errors in genotype file and correcting them is crucial for accurate genetic mapping studies. We develop a Python tool called PySmooth, that offers an easy-to-use command line interface for the removal and correction of genotyping errors. PySmooth uses the approach of a previous tool called SMOOTH with some modifications. It inputs a genotype file, detects errors and corrects them. PySmooth provides additional features such as imputing missing data, better user-friendly usage, generates summary and visualization files, has flexible parameters, and handles more genotype codes.</p>
      </sec>
      <sec>
        <title>Availability and implementation</title>
        <p id="Par2">PySmooth is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/lncRNAAddict/PySmooth">https://github.com/lncRNAAddict/PySmooth</ext-link>.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s13104-024-06753-4.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>SNPS</kwd>
      <kwd>QTLs</kwd>
      <kwd>SMOOTH</kwd>
      <kwd>genotype mapping and correction</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000057</institution-id>
            <institution>National Institute of General Medical Sciences</institution>
          </institution-wrap>
        </funding-source>
        <award-id>R15GM137254</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Science Foundation</institution>
        </funding-source>
        <award-id>NSF 2135305</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">SMOOTH is a statistical method for the successful removal of genotyping errors from high-density genetic linkage maps [<xref ref-type="bibr" rid="CR1">1</xref>]. In high-density genetic maps, a genotyping error is exhibited as a singleton [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>], which is a locus with an assigned genotype different from its neighboring loci. SMOOTH uses a simple statistical method to identify singleton and this approach is still used in current studies [<xref ref-type="bibr" rid="CR3">3</xref>–<xref ref-type="bibr" rid="CR5">5</xref>] before performing Quantitative trait loci (QTL) analysis. However, SMOOTH has various drawbacks that prevent a more user-friendly experience. The code was written in PASCAL which is not very user-friendly. Only three genotype codes are allowed in the input genotype file for SMOOTH: ‘A’ for homozygous, ‘B’ for heterozygous, and ‘U’ for missing data. There are cases when a genotype file that contains four genotype codes (for example recombinant lines which are descendants of two different parents: parents 1 and 2) representing homozygous parent 1, homozygous parent 2, heterozygous, and missing data. This can’t be handled by SMOOTH directly because SMOOTH doesn’t differentiate between homozygous parent 1, homozygous parent 2. To run SMOOTH for such files, one can apply SMOOTH in two different ways. One approach is to assign homozygous parents 1 and 2 the same genotype code ‘A’. The second approach is to treat genotype code of one homozygous parent as missing labels and apply SMOOTH. This will be repeated by masking the other homozygous parent labels. These are not ideal ways to correct genotype error or identify singletons because the genotype codes representing the homozygosity of the other parental map is ignored. Original SMOOTH doesn’t generate visualizations and summary files that reports the number and locations of detected singletons. SMOOTH assigns a score that represents the probability that the marker is a singleton based on the genotype calls of the marker’s neighbors. An initial threshold is applied to the score to identify singletons. It goes through an iterative process where in each step a new score is assigned, and the threshold is decreased at each iteration until a lower threshold is reached [<xref ref-type="bibr" rid="CR1">1</xref>]. SMOOTH implementation doesn’t allow the user to test different threshold values. The user must manually separate genotype file into multiple files, each file representing a unique chromosome.</p>
    <p id="Par4">Here, we present a Python implementation of SMOOTH called PySmooth which offers an easy-to-use command line interface and solves the drawbacks mentioned above. PySmooth reads the input genotype file and identifies singletons based on the algorithm described in SMOOTH with some modifications to allow four genotype codes, and flexible parameters. Unlike SMOOTH which doesn’t correct the singletons and missing data, PySmooth corrects genotype errors using a k-nearest algorithm [<xref ref-type="bibr" rid="CR6">6</xref>]. At each step, PySmooth generates summary files and visualizations that can be inspected by the user for further interpretation.</p>
  </sec>
  <sec id="Sec2">
    <title>Main text</title>
    <sec id="Sec3" sec-type="materials|methods">
      <title>Materials and methods</title>
      <p id="Par5">PySmooth was implemented in Python 3.8. The command-line interface software takes a genotype file as input identifies singletons, and imputes missing data and singletons based on the k-nearest neighbor algorithm [<xref ref-type="bibr" rid="CR6">6</xref>]. Unlike SMOOTH, the user doesn’t have to create separate genotype files for each unique chromosome. PySmooth detects the unique number of chromosomes and runs the algorithm separately on each chromosome. The user also has the option to provide a list of chromosomes to be processed. PySmooth primarily processes the input file in three stages.</p>
      <p id="Par6">In the first stage, PySmooth inspects the input genotype file (Fig. <xref rid="Fig1" ref-type="fig">1</xref>A), generates a summary text file (Fig. <xref rid="Fig1" ref-type="fig">1</xref>B) and a bar plot that summarize the statistics of different genotype codes in the genotype file. It also generates a heatmap plot of the samples, where genotype codes are uniquely color-coded (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). In the second stage, PySmooth assigns a singleton score (<italic>S</italic><sub><italic>i</italic></sub>) to a marker locus <italic>i</italic> by comparing the genotype code at locus <italic>i</italic> with genotype codes within a defined number of loci L flanking locus <italic>i</italic> on either side. 30 loci closest to locus <italic>i</italic> were used (15 loci to the left and 15 to the right). Therefore, L can be written as L = {<italic>j: j &lt; = 15</italic>, and <italic>j ≠ i</italic>}. Singleton score (<italic>S</italic><sub><italic>i</italic></sub>) to a marker locus <italic>i</italic> is defined as:<disp-formula id="Equa"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \frac{\sum _{j L}{{y}_{ij}w}_{j }}{\sum _{j L}{w}_{j}}$$\end{document}</tex-math><graphic xlink:href="13104_2024_6753_Article_Equa.gif" position="anchor"/></alternatives></disp-formula></p>
      <p id="Par7">
        <fig id="Fig1">
          <label>Fig. 1</label>
          <caption>
            <p>Example files of PySmooth. (<bold>a</bold>) Example input genotype file. The first row is the header. Each subsequent row represents a unique marker. The first three columns represent the chromosome name, location, and identification name of the marker, respectively. The fourth and fifth column represent reference/major allele and alternate allele, respectively. These columns can be left blank if not known. A heatmap representing this genotype file is shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>a. (<bold>b</bold>) Example statistics file corresponding the input genotype file. For each sample the frequency and percentage of each type of genotype call are reported (A: homozygous 1, B: homozygous 2, H: heterozygous, U: missing). A corresponding bar plot is shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>d. (<bold>c</bold>) Example file indicating the number of singletons detected. In each sample (row), the number and percentage of singletons detected (‘S_count’ and ‘S_count_perc’) are reported. Also reported are the number of original A, B, H genotype calls which were detected as Singletons (S)</p>
          </caption>
          <graphic xlink:href="13104_2024_6753_Figa_HTML" id="d33e307"/>
        </fig>
      </p>
      <p id="Par8">with, <italic>y</italic><sub><italic>ij</italic></sub>= 1 if the markers at locus <italic>i</italic> and locus <italic>j</italic> have different genotype codes assigned and <italic>w</italic><sub><italic>j</italic></sub> are the weights assigned to the flanking neighbors. SMOOTH uses a similar formula to compute the singleton score but its implementation only allows three genetic codes in the input file [<xref ref-type="bibr" rid="CR1">1</xref>]. Same values of the weights used in SMOOTH [<xref ref-type="bibr" rid="CR1">1</xref>] are used in PySmooth. Like SMOOTH, a high threshold of 0.99 is used to identify singletons from the singleton scores. It goes through a sequence of iterations with decreasing thresholds by gap of 0.02 until 0.70 is reached. Unlike SMOOTH, PySmooth provides the user an option to input the thresholds and the gap allowing experimentation with different values for thresholds and gap. After the second stage where the singletons are identified, PySmooth generates a new genotype file with the singletons marked as “S” and summary file that indicates how many of each original genotype code were switched to singleton “S” (Fig. <xref rid="Fig1" ref-type="fig">1</xref>C). A bar plot, a summary file and a heatmap (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) are also generated after the second stage. In the third stage, PySmooth imputes the missing genotype and the singleton using a k-nearest neighbor algorithm [<xref ref-type="bibr" rid="CR6">6</xref>] with a default value of k = 30. The user has the option to adjust this parameter. The default value of 30 is chosen because 30 closest neighbors are used to score singletons in PySmooth. After the third stage, PySmooth generates the corrected genotype file along with bar plot, heatmap, and a summary file. The summary files generated by PySmooth can be opened as excel spreadsheets and investigated further by the users.</p>
      <p id="Par9">
        <fig id="Fig2">
          <label>Fig. 2</label>
          <caption>
            <p>Example color-coded heatmap and bar plots generated by PySmooth. (<bold>a</bold>) Color-coded heatmaps of the original genotype file from Fig. <xref rid="Fig1" ref-type="fig">1</xref>a. After singletons identification by PySmooth, the heatmap is shown in (<bold>b</bold>), and after genotype correction, the heatmap is shown in (<bold>c</bold>). The heatmap in (<bold>c</bold>) doesn’t contain singletons and missing labels. Each column in the heatmap represents a sample, the rows represent the markers. Corresponding bar plots of original genotype file, after singletons identification, and correction are shown in (<bold>d</bold>), (<bold>e</bold>), and (<bold>f</bold>), respectively. The y-axis represents the percentage of each genotype label in the samples. A, B, H, S, and U represent reference parent homozygous, alternate parent homozygous, heterozygous, singletons, and missing data, respectively</p>
          </caption>
          <graphic xlink:href="13104_2024_6753_Figb_HTML" id="d33e379"/>
        </fig>
      </p>
    </sec>
    <sec id="Sec4">
      <title>Usage and examples</title>
      <p id="Par10">PySmooth can run on windows, Linux, MacOs, and computing cluster systems with python and required python dependencies installed. PySmooth offers an easy-to-use command line interface to run a complete analysis through one main script called “<italic>run_smooth.py</italic>”. The only required input to execute <italic>run_smooth.py</italic> is an input genotype file (e.g. my_genotype.csv). All output files will have a prefix “test” by default. To run PySmooth analysis, the user can simply execute the following python command.</p>
      <p id="Par11">
python run_smooth.py -i my_genotype_file.csv</p>
      <p id="Par12">
PySmooth also offers several options to control the name of the output files, the chromosomes to be analyzed, number of k-nearest neighbors, thresholds, and gap values for singletons identification as shown below with options -o, -c, -l, -u, -g, -k, respectively. An example command is shown below which will generate all output files with the prefix “my_output”.</p>
      <p id="Par13">
python run_smooth.py -i my_genotype_file.csv -o my_output -c chr1,chr2,chr3 -l 0.80 -u 0.98 -g 0.02 -k 34</p>
      <p id="Par14">
The above command executes PySmooth for three chromosomes chr1, chr2, and chr3, and uses the number of k-nearest neighbors, upper threshold, lower threshold, and gap values for singletons identification as 34, 0.98, 0.80, and 0.02 respectively.</p>
    </sec>
    <sec id="Sec5">
      <title>Example input file and outputs</title>
      <p id="Par15">We tested PySmooth on an example input genotype file named “my_genotype_file.csv” (Additional file 1). The first, second, and third columns indicate the chromosome name, position, and name of the marker, respectively. The fourth and the fifth column indicates the “reference” allele and the alternate allele, respectively. If there is no information for these two columns, they can be left blank or filled with “NA”. The subsequent columns indicate the genotype calls of the samples. Four genotype codes can be used. A, B, H, and U represent reference parent homozygous, alternate parent homozygous, heterozygous, and missing data, respectively.</p>
      <p id="Par16">If the command “python run_smooth.py -i my_genotype_file.csv -o my_output” is executed, since this specific input genotype file contains only one chromosome (chr1), PySmooth generates three output summary files (Additional file 1) that contain percentages of homozygous, heterozygous calls for each individual for the raw genotype file, after singleton detection, and after error correction, respectively. The files not only indicate the number of singletons detected in each sample but also the fraction from each category of genotype calls detected as singletons. Three bar plot files (Additional file 1), that visualize the output summary files are also generated. Three heatmap files (Additional file 1) are also generated that visualize a color-coded image of different genotype codes in the original file, after singleton detection, and after error correction, respectively. Finally, PySmooth also outputs the genotype file with singletons and the final genotype file after correction of the singletons.</p>
    </sec>
    <sec id="Sec6">
      <title>PySmooth versus SMOOTH</title>
      <p id="Par17">To compare the accuracy of PySmooth and SMOOTH in predicting singletons in a genotype file, we simulated an F<sub>2</sub> population consisting of 120 individuals and six chromosomes with 5720 marker locations. Using a Poisson distribution of λ = 1, recombination breakpoints were introduced in the F<sub>2</sub> population. Each marker locus was labeled with one the three possible genotypes: ‘A’ (homozygous where the allele is inherited from one parent), ‘H’ (heterozygous locus with alleles from both parents), and ‘B’ (alternative homozygous locus where the allele is inherited from the other parent). Errors and missing values were introduced to the genotype file that represent the F<sub>2</sub> population by randomly mislabelling 20% of the loci and marking another 10% of the loci as missing. PySmooth and SMOOTH were both applied to the same genotype file that contains errors and missing values. Two metrics were computed: percentage of introduced errors which were correctly predicted as singletons and percentage of correctly labeled loci which were incorrectly predicted as singletons. An accurate tool should have a higher and lower value of the first and the second metric, respectively. We found that PySmooth achieved superior accuracy by correctly predicting 96.64% of the introduced errors as singletons compared to 73.32% by SMOOTH. PySmooth predicted only 0.03% of the correct genotype labels as singletons compared to 24% misprediction by SMOOTH. When the error rate was increased to 30%, PySmooth was able to recover 82.47% of the introduced errors as singletons compared to 68% by SMOOTH. These results show that PySmooth performs better than SMOOTH.</p>
    </sec>
    <sec id="Sec7">
      <title>Limitations</title>
      <p id="Par18">Our tool PySmooth offers several improvements over the SMOOTH tool by allowing a user-friendly command interface, summary and visualization files, more genotype codes, flexible parameters, and correcting genotype errors.</p>
      <p id="Par19">The main limitation of the current version of PySmooth is the lack of the feature of parallel processing to reduce computation time in large genotype files. One can leverage multiple cores and process different chromosomes simultaneously to reduce computation time. However, this can be overcome manually with the current version of PySmooth. Users can execute PySmooth in computing clusters or systems with multiple cores for different chromosomes simultaneously in parallel to reduce computing time. For this, the user must manually create different files that correspond to different chromosomes and execute PySmooth on these files separately. In the future version of PySmooth, an automated multi-core processing feature will be incorporated.</p>
      <p id="Par20">There is only feature of the marker in a genotype file which is its position. In the genotype file, markers which are close to each other will most likely have the same genotype call. Therefore, K-nearest neighbor was used to impute missing data because of its reliance on distance between data points. In future versions of PySmooth, we plan to add more methods which the user can choose from.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec10">
      <title>Electronic Supplementary Material</title>
      <p>Below is the link to the electronic supplementary material.</p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13104_2024_6753_MOESM1_ESM.zip">
            <caption>
              <p>Additional file 1</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Not applicable.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>Implementation of software, writing, data analysis, manuscript writing and editing: B.SProject conception, overall direction of the project, writing, editing: B.S and GWR. All authors reviewed the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported by the National Science Foundation grant number NSF 2135305 to GWR and partially supported by National Institute of General Medical Sciences of the National Institutes of Health, grant number R15GM137254 to BS.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>PySmooth is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/lncRNAAddict/PySmooth">https://github.com/lncRNAAddict/PySmooth</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar2">
      <title>Ethics approval and consent to participate</title>
      <p id="Par21">Not applicable.</p>
    </notes>
    <notes id="FPar3">
      <title>Consent for publication</title>
      <p id="Par22">Not applicable.</p>
    </notes>
    <notes id="FPar1" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par23">The authors declare no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>van Os</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Stam</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Visser</surname>
            <given-names>RGF</given-names>
          </name>
          <name>
            <surname>van Eck</surname>
            <given-names>HJ</given-names>
          </name>
        </person-group>
        <article-title>SMOOTH: a statistical method for successful removal of genotyping errors from high-density genetic linkage data</article-title>
        <source>Theor Appl Genet</source>
        <year>2005</year>
        <volume>112</volume>
        <fpage>187</fpage>
        <lpage>94</lpage>
        <pub-id pub-id-type="doi">10.1007/s00122-005-0124-y</pub-id>
        <?supplied-pmid 16258753?>
        <pub-id pub-id-type="pmid">16258753</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hong</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Construction and analysis of high-density linkage map using high-throughput sequencing data</article-title>
        <source>PLoS ONE</source>
        <year>2014</year>
        <volume>9</volume>
        <fpage>e98855</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0098855</pub-id>
        <?supplied-pmid 24905985?>
        <pub-id pub-id-type="pmid">24905985</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Guo</surname>
            <given-names>Z-H</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>P-F</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>G-Q</given-names>
          </name>
          <name>
            <surname>Hu</surname>
            <given-names>J-Y</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Y-L</given-names>
          </name>
          <name>
            <surname>Xia</surname>
            <given-names>E-H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genome sequences provide insights into the Reticulate Origin and Unique traits of Woody Bamboos</article-title>
        <source>Mol Plant</source>
        <year>2019</year>
        <volume>12</volume>
        <fpage>1353</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1016/j.molp.2019.05.009</pub-id>
        <?supplied-pmid 31145999?>
        <pub-id pub-id-type="pmid">31145999</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Wei Q, Wang W, Hu T, Hu H, Wang J, Bao C. Construction of a SNP-Based genetic map using SLAF-Seq and QTL analysis of morphological traits in Eggplant. Front Genet. 2020;11.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ma</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>X-A</given-names>
          </name>
          <name>
            <surname>Xu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>X</given-names>
          </name>
        </person-group>
        <article-title>Identification of quantitative trait loci associated with upper temperature tolerance in turbot, Scophthalmus maximus</article-title>
        <source>Sci Rep</source>
        <year>2021</year>
        <volume>11</volume>
        <fpage>21920</fpage>
        <pub-id pub-id-type="doi">10.1038/s41598-021-01062-3</pub-id>
        <?supplied-pmid 34753974?>
        <pub-id pub-id-type="pmid">34753974</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cover</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hart</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Nearest neighbor pattern classification</article-title>
        <source>IEEE Trans Inf Theory</source>
        <year>1967</year>
        <volume>13</volume>
        <fpage>21</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1109/TIT.1967.1053964</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Res Notes</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Res Notes</journal-id>
    <journal-title-group>
      <journal-title>BMC Research Notes</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1756-0500</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">11010338</article-id>
    <article-id pub-id-type="pmid">38605369</article-id>
    <article-id pub-id-type="publisher-id">6753</article-id>
    <article-id pub-id-type="doi">10.1186/s13104-024-06753-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Note</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PySmooth: a Python tool for the removal and correction of genotyping errors</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Soibam</surname>
          <given-names>Benjamin</given-names>
        </name>
        <address>
          <email>soibamb@uhd.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Roman</surname>
          <given-names>Gregg</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.410446.3</institution-id><institution-id institution-id-type="ISNI">0000 0000 9477 8817</institution-id><institution>Department of computer science and engineering technology, </institution><institution>University of Houston- Downtown, </institution></institution-wrap>Houston, TX One Main St, 77002 USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/02teq1165</institution-id><institution-id institution-id-type="GRID">grid.251313.7</institution-id><institution-id institution-id-type="ISNI">0000 0001 2169 2489</institution-id><institution>Department of Biomolecular Sciences, School of Pharmacy, </institution><institution>University of Mississippi, </institution></institution-wrap>415W Faser Hall, University, Oxford, Mississippi, MS 38677-1848 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>11</day>
      <month>4</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>11</day>
      <month>4</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>17</volume>
    <elocation-id>103</elocation-id>
    <history>
      <date date-type="received">
        <day>16</day>
        <month>8</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>3</month>
        <year>2024</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Summary</title>
        <p id="Par1">In genetic mapping studies involving many individuals, genome-wide markers such as single nucleotide polymorphisms (SNPs) can be detected using different methods. However, it comes with some errors. Some SNPs associated with diseases can be in regions encoding long noncoding RNAs (lncRNAs). Therefore, identifying the errors in genotype file and correcting them is crucial for accurate genetic mapping studies. We develop a Python tool called PySmooth, that offers an easy-to-use command line interface for the removal and correction of genotyping errors. PySmooth uses the approach of a previous tool called SMOOTH with some modifications. It inputs a genotype file, detects errors and corrects them. PySmooth provides additional features such as imputing missing data, better user-friendly usage, generates summary and visualization files, has flexible parameters, and handles more genotype codes.</p>
      </sec>
      <sec>
        <title>Availability and implementation</title>
        <p id="Par2">PySmooth is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/lncRNAAddict/PySmooth">https://github.com/lncRNAAddict/PySmooth</ext-link>.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s13104-024-06753-4.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>SNPS</kwd>
      <kwd>QTLs</kwd>
      <kwd>SMOOTH</kwd>
      <kwd>genotype mapping and correction</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000057</institution-id>
            <institution>National Institute of General Medical Sciences</institution>
          </institution-wrap>
        </funding-source>
        <award-id>R15GM137254</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Science Foundation</institution>
        </funding-source>
        <award-id>NSF 2135305</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">SMOOTH is a statistical method for the successful removal of genotyping errors from high-density genetic linkage maps [<xref ref-type="bibr" rid="CR1">1</xref>]. In high-density genetic maps, a genotyping error is exhibited as a singleton [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>], which is a locus with an assigned genotype different from its neighboring loci. SMOOTH uses a simple statistical method to identify singleton and this approach is still used in current studies [<xref ref-type="bibr" rid="CR3">3</xref>–<xref ref-type="bibr" rid="CR5">5</xref>] before performing Quantitative trait loci (QTL) analysis. However, SMOOTH has various drawbacks that prevent a more user-friendly experience. The code was written in PASCAL which is not very user-friendly. Only three genotype codes are allowed in the input genotype file for SMOOTH: ‘A’ for homozygous, ‘B’ for heterozygous, and ‘U’ for missing data. There are cases when a genotype file that contains four genotype codes (for example recombinant lines which are descendants of two different parents: parents 1 and 2) representing homozygous parent 1, homozygous parent 2, heterozygous, and missing data. This can’t be handled by SMOOTH directly because SMOOTH doesn’t differentiate between homozygous parent 1, homozygous parent 2. To run SMOOTH for such files, one can apply SMOOTH in two different ways. One approach is to assign homozygous parents 1 and 2 the same genotype code ‘A’. The second approach is to treat genotype code of one homozygous parent as missing labels and apply SMOOTH. This will be repeated by masking the other homozygous parent labels. These are not ideal ways to correct genotype error or identify singletons because the genotype codes representing the homozygosity of the other parental map is ignored. Original SMOOTH doesn’t generate visualizations and summary files that reports the number and locations of detected singletons. SMOOTH assigns a score that represents the probability that the marker is a singleton based on the genotype calls of the marker’s neighbors. An initial threshold is applied to the score to identify singletons. It goes through an iterative process where in each step a new score is assigned, and the threshold is decreased at each iteration until a lower threshold is reached [<xref ref-type="bibr" rid="CR1">1</xref>]. SMOOTH implementation doesn’t allow the user to test different threshold values. The user must manually separate genotype file into multiple files, each file representing a unique chromosome.</p>
    <p id="Par4">Here, we present a Python implementation of SMOOTH called PySmooth which offers an easy-to-use command line interface and solves the drawbacks mentioned above. PySmooth reads the input genotype file and identifies singletons based on the algorithm described in SMOOTH with some modifications to allow four genotype codes, and flexible parameters. Unlike SMOOTH which doesn’t correct the singletons and missing data, PySmooth corrects genotype errors using a k-nearest algorithm [<xref ref-type="bibr" rid="CR6">6</xref>]. At each step, PySmooth generates summary files and visualizations that can be inspected by the user for further interpretation.</p>
  </sec>
  <sec id="Sec2">
    <title>Main text</title>
    <sec id="Sec3" sec-type="materials|methods">
      <title>Materials and methods</title>
      <p id="Par5">PySmooth was implemented in Python 3.8. The command-line interface software takes a genotype file as input identifies singletons, and imputes missing data and singletons based on the k-nearest neighbor algorithm [<xref ref-type="bibr" rid="CR6">6</xref>]. Unlike SMOOTH, the user doesn’t have to create separate genotype files for each unique chromosome. PySmooth detects the unique number of chromosomes and runs the algorithm separately on each chromosome. The user also has the option to provide a list of chromosomes to be processed. PySmooth primarily processes the input file in three stages.</p>
      <p id="Par6">In the first stage, PySmooth inspects the input genotype file (Fig. <xref rid="Fig1" ref-type="fig">1</xref>A), generates a summary text file (Fig. <xref rid="Fig1" ref-type="fig">1</xref>B) and a bar plot that summarize the statistics of different genotype codes in the genotype file. It also generates a heatmap plot of the samples, where genotype codes are uniquely color-coded (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). In the second stage, PySmooth assigns a singleton score (<italic>S</italic><sub><italic>i</italic></sub>) to a marker locus <italic>i</italic> by comparing the genotype code at locus <italic>i</italic> with genotype codes within a defined number of loci L flanking locus <italic>i</italic> on either side. 30 loci closest to locus <italic>i</italic> were used (15 loci to the left and 15 to the right). Therefore, L can be written as L = {<italic>j: j &lt; = 15</italic>, and <italic>j ≠ i</italic>}. Singleton score (<italic>S</italic><sub><italic>i</italic></sub>) to a marker locus <italic>i</italic> is defined as:<disp-formula id="Equa"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \frac{\sum _{j L}{{y}_{ij}w}_{j }}{\sum _{j L}{w}_{j}}$$\end{document}</tex-math><graphic xlink:href="13104_2024_6753_Article_Equa.gif" position="anchor"/></alternatives></disp-formula></p>
      <p id="Par7">
        <fig id="Fig1">
          <label>Fig. 1</label>
          <caption>
            <p>Example files of PySmooth. (<bold>a</bold>) Example input genotype file. The first row is the header. Each subsequent row represents a unique marker. The first three columns represent the chromosome name, location, and identification name of the marker, respectively. The fourth and fifth column represent reference/major allele and alternate allele, respectively. These columns can be left blank if not known. A heatmap representing this genotype file is shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>a. (<bold>b</bold>) Example statistics file corresponding the input genotype file. For each sample the frequency and percentage of each type of genotype call are reported (A: homozygous 1, B: homozygous 2, H: heterozygous, U: missing). A corresponding bar plot is shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>d. (<bold>c</bold>) Example file indicating the number of singletons detected. In each sample (row), the number and percentage of singletons detected (‘S_count’ and ‘S_count_perc’) are reported. Also reported are the number of original A, B, H genotype calls which were detected as Singletons (S)</p>
          </caption>
          <graphic xlink:href="13104_2024_6753_Figa_HTML" id="d33e307"/>
        </fig>
      </p>
      <p id="Par8">with, <italic>y</italic><sub><italic>ij</italic></sub>= 1 if the markers at locus <italic>i</italic> and locus <italic>j</italic> have different genotype codes assigned and <italic>w</italic><sub><italic>j</italic></sub> are the weights assigned to the flanking neighbors. SMOOTH uses a similar formula to compute the singleton score but its implementation only allows three genetic codes in the input file [<xref ref-type="bibr" rid="CR1">1</xref>]. Same values of the weights used in SMOOTH [<xref ref-type="bibr" rid="CR1">1</xref>] are used in PySmooth. Like SMOOTH, a high threshold of 0.99 is used to identify singletons from the singleton scores. It goes through a sequence of iterations with decreasing thresholds by gap of 0.02 until 0.70 is reached. Unlike SMOOTH, PySmooth provides the user an option to input the thresholds and the gap allowing experimentation with different values for thresholds and gap. After the second stage where the singletons are identified, PySmooth generates a new genotype file with the singletons marked as “S” and summary file that indicates how many of each original genotype code were switched to singleton “S” (Fig. <xref rid="Fig1" ref-type="fig">1</xref>C). A bar plot, a summary file and a heatmap (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) are also generated after the second stage. In the third stage, PySmooth imputes the missing genotype and the singleton using a k-nearest neighbor algorithm [<xref ref-type="bibr" rid="CR6">6</xref>] with a default value of k = 30. The user has the option to adjust this parameter. The default value of 30 is chosen because 30 closest neighbors are used to score singletons in PySmooth. After the third stage, PySmooth generates the corrected genotype file along with bar plot, heatmap, and a summary file. The summary files generated by PySmooth can be opened as excel spreadsheets and investigated further by the users.</p>
      <p id="Par9">
        <fig id="Fig2">
          <label>Fig. 2</label>
          <caption>
            <p>Example color-coded heatmap and bar plots generated by PySmooth. (<bold>a</bold>) Color-coded heatmaps of the original genotype file from Fig. <xref rid="Fig1" ref-type="fig">1</xref>a. After singletons identification by PySmooth, the heatmap is shown in (<bold>b</bold>), and after genotype correction, the heatmap is shown in (<bold>c</bold>). The heatmap in (<bold>c</bold>) doesn’t contain singletons and missing labels. Each column in the heatmap represents a sample, the rows represent the markers. Corresponding bar plots of original genotype file, after singletons identification, and correction are shown in (<bold>d</bold>), (<bold>e</bold>), and (<bold>f</bold>), respectively. The y-axis represents the percentage of each genotype label in the samples. A, B, H, S, and U represent reference parent homozygous, alternate parent homozygous, heterozygous, singletons, and missing data, respectively</p>
          </caption>
          <graphic xlink:href="13104_2024_6753_Figb_HTML" id="d33e379"/>
        </fig>
      </p>
    </sec>
    <sec id="Sec4">
      <title>Usage and examples</title>
      <p id="Par10">PySmooth can run on windows, Linux, MacOs, and computing cluster systems with python and required python dependencies installed. PySmooth offers an easy-to-use command line interface to run a complete analysis through one main script called “<italic>run_smooth.py</italic>”. The only required input to execute <italic>run_smooth.py</italic> is an input genotype file (e.g. my_genotype.csv). All output files will have a prefix “test” by default. To run PySmooth analysis, the user can simply execute the following python command.</p>
      <p id="Par11">
python run_smooth.py -i my_genotype_file.csv</p>
      <p id="Par12">
PySmooth also offers several options to control the name of the output files, the chromosomes to be analyzed, number of k-nearest neighbors, thresholds, and gap values for singletons identification as shown below with options -o, -c, -l, -u, -g, -k, respectively. An example command is shown below which will generate all output files with the prefix “my_output”.</p>
      <p id="Par13">
python run_smooth.py -i my_genotype_file.csv -o my_output -c chr1,chr2,chr3 -l 0.80 -u 0.98 -g 0.02 -k 34</p>
      <p id="Par14">
The above command executes PySmooth for three chromosomes chr1, chr2, and chr3, and uses the number of k-nearest neighbors, upper threshold, lower threshold, and gap values for singletons identification as 34, 0.98, 0.80, and 0.02 respectively.</p>
    </sec>
    <sec id="Sec5">
      <title>Example input file and outputs</title>
      <p id="Par15">We tested PySmooth on an example input genotype file named “my_genotype_file.csv” (Additional file 1). The first, second, and third columns indicate the chromosome name, position, and name of the marker, respectively. The fourth and the fifth column indicates the “reference” allele and the alternate allele, respectively. If there is no information for these two columns, they can be left blank or filled with “NA”. The subsequent columns indicate the genotype calls of the samples. Four genotype codes can be used. A, B, H, and U represent reference parent homozygous, alternate parent homozygous, heterozygous, and missing data, respectively.</p>
      <p id="Par16">If the command “python run_smooth.py -i my_genotype_file.csv -o my_output” is executed, since this specific input genotype file contains only one chromosome (chr1), PySmooth generates three output summary files (Additional file 1) that contain percentages of homozygous, heterozygous calls for each individual for the raw genotype file, after singleton detection, and after error correction, respectively. The files not only indicate the number of singletons detected in each sample but also the fraction from each category of genotype calls detected as singletons. Three bar plot files (Additional file 1), that visualize the output summary files are also generated. Three heatmap files (Additional file 1) are also generated that visualize a color-coded image of different genotype codes in the original file, after singleton detection, and after error correction, respectively. Finally, PySmooth also outputs the genotype file with singletons and the final genotype file after correction of the singletons.</p>
    </sec>
    <sec id="Sec6">
      <title>PySmooth versus SMOOTH</title>
      <p id="Par17">To compare the accuracy of PySmooth and SMOOTH in predicting singletons in a genotype file, we simulated an F<sub>2</sub> population consisting of 120 individuals and six chromosomes with 5720 marker locations. Using a Poisson distribution of λ = 1, recombination breakpoints were introduced in the F<sub>2</sub> population. Each marker locus was labeled with one the three possible genotypes: ‘A’ (homozygous where the allele is inherited from one parent), ‘H’ (heterozygous locus with alleles from both parents), and ‘B’ (alternative homozygous locus where the allele is inherited from the other parent). Errors and missing values were introduced to the genotype file that represent the F<sub>2</sub> population by randomly mislabelling 20% of the loci and marking another 10% of the loci as missing. PySmooth and SMOOTH were both applied to the same genotype file that contains errors and missing values. Two metrics were computed: percentage of introduced errors which were correctly predicted as singletons and percentage of correctly labeled loci which were incorrectly predicted as singletons. An accurate tool should have a higher and lower value of the first and the second metric, respectively. We found that PySmooth achieved superior accuracy by correctly predicting 96.64% of the introduced errors as singletons compared to 73.32% by SMOOTH. PySmooth predicted only 0.03% of the correct genotype labels as singletons compared to 24% misprediction by SMOOTH. When the error rate was increased to 30%, PySmooth was able to recover 82.47% of the introduced errors as singletons compared to 68% by SMOOTH. These results show that PySmooth performs better than SMOOTH.</p>
    </sec>
    <sec id="Sec7">
      <title>Limitations</title>
      <p id="Par18">Our tool PySmooth offers several improvements over the SMOOTH tool by allowing a user-friendly command interface, summary and visualization files, more genotype codes, flexible parameters, and correcting genotype errors.</p>
      <p id="Par19">The main limitation of the current version of PySmooth is the lack of the feature of parallel processing to reduce computation time in large genotype files. One can leverage multiple cores and process different chromosomes simultaneously to reduce computation time. However, this can be overcome manually with the current version of PySmooth. Users can execute PySmooth in computing clusters or systems with multiple cores for different chromosomes simultaneously in parallel to reduce computing time. For this, the user must manually create different files that correspond to different chromosomes and execute PySmooth on these files separately. In the future version of PySmooth, an automated multi-core processing feature will be incorporated.</p>
      <p id="Par20">There is only feature of the marker in a genotype file which is its position. In the genotype file, markers which are close to each other will most likely have the same genotype call. Therefore, K-nearest neighbor was used to impute missing data because of its reliance on distance between data points. In future versions of PySmooth, we plan to add more methods which the user can choose from.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec10">
      <title>Electronic Supplementary Material</title>
      <p>Below is the link to the electronic supplementary material.</p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13104_2024_6753_MOESM1_ESM.zip">
            <caption>
              <p>Additional file 1</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Not applicable.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>Implementation of software, writing, data analysis, manuscript writing and editing: B.SProject conception, overall direction of the project, writing, editing: B.S and GWR. All authors reviewed the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported by the National Science Foundation grant number NSF 2135305 to GWR and partially supported by National Institute of General Medical Sciences of the National Institutes of Health, grant number R15GM137254 to BS.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>PySmooth is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/lncRNAAddict/PySmooth">https://github.com/lncRNAAddict/PySmooth</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar2">
      <title>Ethics approval and consent to participate</title>
      <p id="Par21">Not applicable.</p>
    </notes>
    <notes id="FPar3">
      <title>Consent for publication</title>
      <p id="Par22">Not applicable.</p>
    </notes>
    <notes id="FPar1" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par23">The authors declare no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>van Os</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Stam</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Visser</surname>
            <given-names>RGF</given-names>
          </name>
          <name>
            <surname>van Eck</surname>
            <given-names>HJ</given-names>
          </name>
        </person-group>
        <article-title>SMOOTH: a statistical method for successful removal of genotyping errors from high-density genetic linkage data</article-title>
        <source>Theor Appl Genet</source>
        <year>2005</year>
        <volume>112</volume>
        <fpage>187</fpage>
        <lpage>94</lpage>
        <pub-id pub-id-type="doi">10.1007/s00122-005-0124-y</pub-id>
        <?supplied-pmid 16258753?>
        <pub-id pub-id-type="pmid">16258753</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hong</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Construction and analysis of high-density linkage map using high-throughput sequencing data</article-title>
        <source>PLoS ONE</source>
        <year>2014</year>
        <volume>9</volume>
        <fpage>e98855</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0098855</pub-id>
        <?supplied-pmid 24905985?>
        <pub-id pub-id-type="pmid">24905985</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Guo</surname>
            <given-names>Z-H</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>P-F</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>G-Q</given-names>
          </name>
          <name>
            <surname>Hu</surname>
            <given-names>J-Y</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Y-L</given-names>
          </name>
          <name>
            <surname>Xia</surname>
            <given-names>E-H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genome sequences provide insights into the Reticulate Origin and Unique traits of Woody Bamboos</article-title>
        <source>Mol Plant</source>
        <year>2019</year>
        <volume>12</volume>
        <fpage>1353</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1016/j.molp.2019.05.009</pub-id>
        <?supplied-pmid 31145999?>
        <pub-id pub-id-type="pmid">31145999</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Wei Q, Wang W, Hu T, Hu H, Wang J, Bao C. Construction of a SNP-Based genetic map using SLAF-Seq and QTL analysis of morphological traits in Eggplant. Front Genet. 2020;11.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ma</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>X-A</given-names>
          </name>
          <name>
            <surname>Xu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>X</given-names>
          </name>
        </person-group>
        <article-title>Identification of quantitative trait loci associated with upper temperature tolerance in turbot, Scophthalmus maximus</article-title>
        <source>Sci Rep</source>
        <year>2021</year>
        <volume>11</volume>
        <fpage>21920</fpage>
        <pub-id pub-id-type="doi">10.1038/s41598-021-01062-3</pub-id>
        <?supplied-pmid 34753974?>
        <pub-id pub-id-type="pmid">34753974</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cover</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hart</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Nearest neighbor pattern classification</article-title>
        <source>IEEE Trans Inf Theory</source>
        <year>1967</year>
        <volume>13</volume>
        <fpage>21</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1109/TIT.1967.1053964</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Res Notes</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Res Notes</journal-id>
    <journal-title-group>
      <journal-title>BMC Research Notes</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1756-0500</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">11010338</article-id>
    <article-id pub-id-type="pmid">38605369</article-id>
    <article-id pub-id-type="publisher-id">6753</article-id>
    <article-id pub-id-type="doi">10.1186/s13104-024-06753-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Note</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PySmooth: a Python tool for the removal and correction of genotyping errors</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Soibam</surname>
          <given-names>Benjamin</given-names>
        </name>
        <address>
          <email>soibamb@uhd.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Roman</surname>
          <given-names>Gregg</given-names>
        </name>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.410446.3</institution-id><institution-id institution-id-type="ISNI">0000 0000 9477 8817</institution-id><institution>Department of computer science and engineering technology, </institution><institution>University of Houston- Downtown, </institution></institution-wrap>Houston, TX One Main St, 77002 USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ROR">https://ror.org/02teq1165</institution-id><institution-id institution-id-type="GRID">grid.251313.7</institution-id><institution-id institution-id-type="ISNI">0000 0001 2169 2489</institution-id><institution>Department of Biomolecular Sciences, School of Pharmacy, </institution><institution>University of Mississippi, </institution></institution-wrap>415W Faser Hall, University, Oxford, Mississippi, MS 38677-1848 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>11</day>
      <month>4</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>11</day>
      <month>4</month>
      <year>2024</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2024</year>
    </pub-date>
    <volume>17</volume>
    <elocation-id>103</elocation-id>
    <history>
      <date date-type="received">
        <day>16</day>
        <month>8</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>3</month>
        <year>2024</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2024</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Summary</title>
        <p id="Par1">In genetic mapping studies involving many individuals, genome-wide markers such as single nucleotide polymorphisms (SNPs) can be detected using different methods. However, it comes with some errors. Some SNPs associated with diseases can be in regions encoding long noncoding RNAs (lncRNAs). Therefore, identifying the errors in genotype file and correcting them is crucial for accurate genetic mapping studies. We develop a Python tool called PySmooth, that offers an easy-to-use command line interface for the removal and correction of genotyping errors. PySmooth uses the approach of a previous tool called SMOOTH with some modifications. It inputs a genotype file, detects errors and corrects them. PySmooth provides additional features such as imputing missing data, better user-friendly usage, generates summary and visualization files, has flexible parameters, and handles more genotype codes.</p>
      </sec>
      <sec>
        <title>Availability and implementation</title>
        <p id="Par2">PySmooth is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/lncRNAAddict/PySmooth">https://github.com/lncRNAAddict/PySmooth</ext-link>.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s13104-024-06753-4.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>SNPS</kwd>
      <kwd>QTLs</kwd>
      <kwd>SMOOTH</kwd>
      <kwd>genotype mapping and correction</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000057</institution-id>
            <institution>National Institute of General Medical Sciences</institution>
          </institution-wrap>
        </funding-source>
        <award-id>R15GM137254</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>National Science Foundation</institution>
        </funding-source>
        <award-id>NSF 2135305</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© BioMed Central Ltd., part of Springer Nature 2024</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">SMOOTH is a statistical method for the successful removal of genotyping errors from high-density genetic linkage maps [<xref ref-type="bibr" rid="CR1">1</xref>]. In high-density genetic maps, a genotyping error is exhibited as a singleton [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>], which is a locus with an assigned genotype different from its neighboring loci. SMOOTH uses a simple statistical method to identify singleton and this approach is still used in current studies [<xref ref-type="bibr" rid="CR3">3</xref>–<xref ref-type="bibr" rid="CR5">5</xref>] before performing Quantitative trait loci (QTL) analysis. However, SMOOTH has various drawbacks that prevent a more user-friendly experience. The code was written in PASCAL which is not very user-friendly. Only three genotype codes are allowed in the input genotype file for SMOOTH: ‘A’ for homozygous, ‘B’ for heterozygous, and ‘U’ for missing data. There are cases when a genotype file that contains four genotype codes (for example recombinant lines which are descendants of two different parents: parents 1 and 2) representing homozygous parent 1, homozygous parent 2, heterozygous, and missing data. This can’t be handled by SMOOTH directly because SMOOTH doesn’t differentiate between homozygous parent 1, homozygous parent 2. To run SMOOTH for such files, one can apply SMOOTH in two different ways. One approach is to assign homozygous parents 1 and 2 the same genotype code ‘A’. The second approach is to treat genotype code of one homozygous parent as missing labels and apply SMOOTH. This will be repeated by masking the other homozygous parent labels. These are not ideal ways to correct genotype error or identify singletons because the genotype codes representing the homozygosity of the other parental map is ignored. Original SMOOTH doesn’t generate visualizations and summary files that reports the number and locations of detected singletons. SMOOTH assigns a score that represents the probability that the marker is a singleton based on the genotype calls of the marker’s neighbors. An initial threshold is applied to the score to identify singletons. It goes through an iterative process where in each step a new score is assigned, and the threshold is decreased at each iteration until a lower threshold is reached [<xref ref-type="bibr" rid="CR1">1</xref>]. SMOOTH implementation doesn’t allow the user to test different threshold values. The user must manually separate genotype file into multiple files, each file representing a unique chromosome.</p>
    <p id="Par4">Here, we present a Python implementation of SMOOTH called PySmooth which offers an easy-to-use command line interface and solves the drawbacks mentioned above. PySmooth reads the input genotype file and identifies singletons based on the algorithm described in SMOOTH with some modifications to allow four genotype codes, and flexible parameters. Unlike SMOOTH which doesn’t correct the singletons and missing data, PySmooth corrects genotype errors using a k-nearest algorithm [<xref ref-type="bibr" rid="CR6">6</xref>]. At each step, PySmooth generates summary files and visualizations that can be inspected by the user for further interpretation.</p>
  </sec>
  <sec id="Sec2">
    <title>Main text</title>
    <sec id="Sec3" sec-type="materials|methods">
      <title>Materials and methods</title>
      <p id="Par5">PySmooth was implemented in Python 3.8. The command-line interface software takes a genotype file as input identifies singletons, and imputes missing data and singletons based on the k-nearest neighbor algorithm [<xref ref-type="bibr" rid="CR6">6</xref>]. Unlike SMOOTH, the user doesn’t have to create separate genotype files for each unique chromosome. PySmooth detects the unique number of chromosomes and runs the algorithm separately on each chromosome. The user also has the option to provide a list of chromosomes to be processed. PySmooth primarily processes the input file in three stages.</p>
      <p id="Par6">In the first stage, PySmooth inspects the input genotype file (Fig. <xref rid="Fig1" ref-type="fig">1</xref>A), generates a summary text file (Fig. <xref rid="Fig1" ref-type="fig">1</xref>B) and a bar plot that summarize the statistics of different genotype codes in the genotype file. It also generates a heatmap plot of the samples, where genotype codes are uniquely color-coded (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). In the second stage, PySmooth assigns a singleton score (<italic>S</italic><sub><italic>i</italic></sub>) to a marker locus <italic>i</italic> by comparing the genotype code at locus <italic>i</italic> with genotype codes within a defined number of loci L flanking locus <italic>i</italic> on either side. 30 loci closest to locus <italic>i</italic> were used (15 loci to the left and 15 to the right). Therefore, L can be written as L = {<italic>j: j &lt; = 15</italic>, and <italic>j ≠ i</italic>}. Singleton score (<italic>S</italic><sub><italic>i</italic></sub>) to a marker locus <italic>i</italic> is defined as:<disp-formula id="Equa"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \frac{\sum _{j L}{{y}_{ij}w}_{j }}{\sum _{j L}{w}_{j}}$$\end{document}</tex-math><graphic xlink:href="13104_2024_6753_Article_Equa.gif" position="anchor"/></alternatives></disp-formula></p>
      <p id="Par7">
        <fig id="Fig1">
          <label>Fig. 1</label>
          <caption>
            <p>Example files of PySmooth. (<bold>a</bold>) Example input genotype file. The first row is the header. Each subsequent row represents a unique marker. The first three columns represent the chromosome name, location, and identification name of the marker, respectively. The fourth and fifth column represent reference/major allele and alternate allele, respectively. These columns can be left blank if not known. A heatmap representing this genotype file is shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>a. (<bold>b</bold>) Example statistics file corresponding the input genotype file. For each sample the frequency and percentage of each type of genotype call are reported (A: homozygous 1, B: homozygous 2, H: heterozygous, U: missing). A corresponding bar plot is shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>d. (<bold>c</bold>) Example file indicating the number of singletons detected. In each sample (row), the number and percentage of singletons detected (‘S_count’ and ‘S_count_perc’) are reported. Also reported are the number of original A, B, H genotype calls which were detected as Singletons (S)</p>
          </caption>
          <graphic xlink:href="13104_2024_6753_Figa_HTML" id="d33e307"/>
        </fig>
      </p>
      <p id="Par8">with, <italic>y</italic><sub><italic>ij</italic></sub>= 1 if the markers at locus <italic>i</italic> and locus <italic>j</italic> have different genotype codes assigned and <italic>w</italic><sub><italic>j</italic></sub> are the weights assigned to the flanking neighbors. SMOOTH uses a similar formula to compute the singleton score but its implementation only allows three genetic codes in the input file [<xref ref-type="bibr" rid="CR1">1</xref>]. Same values of the weights used in SMOOTH [<xref ref-type="bibr" rid="CR1">1</xref>] are used in PySmooth. Like SMOOTH, a high threshold of 0.99 is used to identify singletons from the singleton scores. It goes through a sequence of iterations with decreasing thresholds by gap of 0.02 until 0.70 is reached. Unlike SMOOTH, PySmooth provides the user an option to input the thresholds and the gap allowing experimentation with different values for thresholds and gap. After the second stage where the singletons are identified, PySmooth generates a new genotype file with the singletons marked as “S” and summary file that indicates how many of each original genotype code were switched to singleton “S” (Fig. <xref rid="Fig1" ref-type="fig">1</xref>C). A bar plot, a summary file and a heatmap (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) are also generated after the second stage. In the third stage, PySmooth imputes the missing genotype and the singleton using a k-nearest neighbor algorithm [<xref ref-type="bibr" rid="CR6">6</xref>] with a default value of k = 30. The user has the option to adjust this parameter. The default value of 30 is chosen because 30 closest neighbors are used to score singletons in PySmooth. After the third stage, PySmooth generates the corrected genotype file along with bar plot, heatmap, and a summary file. The summary files generated by PySmooth can be opened as excel spreadsheets and investigated further by the users.</p>
      <p id="Par9">
        <fig id="Fig2">
          <label>Fig. 2</label>
          <caption>
            <p>Example color-coded heatmap and bar plots generated by PySmooth. (<bold>a</bold>) Color-coded heatmaps of the original genotype file from Fig. <xref rid="Fig1" ref-type="fig">1</xref>a. After singletons identification by PySmooth, the heatmap is shown in (<bold>b</bold>), and after genotype correction, the heatmap is shown in (<bold>c</bold>). The heatmap in (<bold>c</bold>) doesn’t contain singletons and missing labels. Each column in the heatmap represents a sample, the rows represent the markers. Corresponding bar plots of original genotype file, after singletons identification, and correction are shown in (<bold>d</bold>), (<bold>e</bold>), and (<bold>f</bold>), respectively. The y-axis represents the percentage of each genotype label in the samples. A, B, H, S, and U represent reference parent homozygous, alternate parent homozygous, heterozygous, singletons, and missing data, respectively</p>
          </caption>
          <graphic xlink:href="13104_2024_6753_Figb_HTML" id="d33e379"/>
        </fig>
      </p>
    </sec>
    <sec id="Sec4">
      <title>Usage and examples</title>
      <p id="Par10">PySmooth can run on windows, Linux, MacOs, and computing cluster systems with python and required python dependencies installed. PySmooth offers an easy-to-use command line interface to run a complete analysis through one main script called “<italic>run_smooth.py</italic>”. The only required input to execute <italic>run_smooth.py</italic> is an input genotype file (e.g. my_genotype.csv). All output files will have a prefix “test” by default. To run PySmooth analysis, the user can simply execute the following python command.</p>
      <p id="Par11">
python run_smooth.py -i my_genotype_file.csv</p>
      <p id="Par12">
PySmooth also offers several options to control the name of the output files, the chromosomes to be analyzed, number of k-nearest neighbors, thresholds, and gap values for singletons identification as shown below with options -o, -c, -l, -u, -g, -k, respectively. An example command is shown below which will generate all output files with the prefix “my_output”.</p>
      <p id="Par13">
python run_smooth.py -i my_genotype_file.csv -o my_output -c chr1,chr2,chr3 -l 0.80 -u 0.98 -g 0.02 -k 34</p>
      <p id="Par14">
The above command executes PySmooth for three chromosomes chr1, chr2, and chr3, and uses the number of k-nearest neighbors, upper threshold, lower threshold, and gap values for singletons identification as 34, 0.98, 0.80, and 0.02 respectively.</p>
    </sec>
    <sec id="Sec5">
      <title>Example input file and outputs</title>
      <p id="Par15">We tested PySmooth on an example input genotype file named “my_genotype_file.csv” (Additional file 1). The first, second, and third columns indicate the chromosome name, position, and name of the marker, respectively. The fourth and the fifth column indicates the “reference” allele and the alternate allele, respectively. If there is no information for these two columns, they can be left blank or filled with “NA”. The subsequent columns indicate the genotype calls of the samples. Four genotype codes can be used. A, B, H, and U represent reference parent homozygous, alternate parent homozygous, heterozygous, and missing data, respectively.</p>
      <p id="Par16">If the command “python run_smooth.py -i my_genotype_file.csv -o my_output” is executed, since this specific input genotype file contains only one chromosome (chr1), PySmooth generates three output summary files (Additional file 1) that contain percentages of homozygous, heterozygous calls for each individual for the raw genotype file, after singleton detection, and after error correction, respectively. The files not only indicate the number of singletons detected in each sample but also the fraction from each category of genotype calls detected as singletons. Three bar plot files (Additional file 1), that visualize the output summary files are also generated. Three heatmap files (Additional file 1) are also generated that visualize a color-coded image of different genotype codes in the original file, after singleton detection, and after error correction, respectively. Finally, PySmooth also outputs the genotype file with singletons and the final genotype file after correction of the singletons.</p>
    </sec>
    <sec id="Sec6">
      <title>PySmooth versus SMOOTH</title>
      <p id="Par17">To compare the accuracy of PySmooth and SMOOTH in predicting singletons in a genotype file, we simulated an F<sub>2</sub> population consisting of 120 individuals and six chromosomes with 5720 marker locations. Using a Poisson distribution of λ = 1, recombination breakpoints were introduced in the F<sub>2</sub> population. Each marker locus was labeled with one the three possible genotypes: ‘A’ (homozygous where the allele is inherited from one parent), ‘H’ (heterozygous locus with alleles from both parents), and ‘B’ (alternative homozygous locus where the allele is inherited from the other parent). Errors and missing values were introduced to the genotype file that represent the F<sub>2</sub> population by randomly mislabelling 20% of the loci and marking another 10% of the loci as missing. PySmooth and SMOOTH were both applied to the same genotype file that contains errors and missing values. Two metrics were computed: percentage of introduced errors which were correctly predicted as singletons and percentage of correctly labeled loci which were incorrectly predicted as singletons. An accurate tool should have a higher and lower value of the first and the second metric, respectively. We found that PySmooth achieved superior accuracy by correctly predicting 96.64% of the introduced errors as singletons compared to 73.32% by SMOOTH. PySmooth predicted only 0.03% of the correct genotype labels as singletons compared to 24% misprediction by SMOOTH. When the error rate was increased to 30%, PySmooth was able to recover 82.47% of the introduced errors as singletons compared to 68% by SMOOTH. These results show that PySmooth performs better than SMOOTH.</p>
    </sec>
    <sec id="Sec7">
      <title>Limitations</title>
      <p id="Par18">Our tool PySmooth offers several improvements over the SMOOTH tool by allowing a user-friendly command interface, summary and visualization files, more genotype codes, flexible parameters, and correcting genotype errors.</p>
      <p id="Par19">The main limitation of the current version of PySmooth is the lack of the feature of parallel processing to reduce computation time in large genotype files. One can leverage multiple cores and process different chromosomes simultaneously to reduce computation time. However, this can be overcome manually with the current version of PySmooth. Users can execute PySmooth in computing clusters or systems with multiple cores for different chromosomes simultaneously in parallel to reduce computing time. For this, the user must manually create different files that correspond to different chromosomes and execute PySmooth on these files separately. In the future version of PySmooth, an automated multi-core processing feature will be incorporated.</p>
      <p id="Par20">There is only feature of the marker in a genotype file which is its position. In the genotype file, markers which are close to each other will most likely have the same genotype call. Therefore, K-nearest neighbor was used to impute missing data because of its reliance on distance between data points. In future versions of PySmooth, we plan to add more methods which the user can choose from.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec10">
      <title>Electronic Supplementary Material</title>
      <p>Below is the link to the electronic supplementary material.</p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13104_2024_6753_MOESM1_ESM.zip">
            <caption>
              <p>Additional file 1</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>Not applicable.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>Implementation of software, writing, data analysis, manuscript writing and editing: B.SProject conception, overall direction of the project, writing, editing: B.S and GWR. All authors reviewed the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported by the National Science Foundation grant number NSF 2135305 to GWR and partially supported by National Institute of General Medical Sciences of the National Institutes of Health, grant number R15GM137254 to BS.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>PySmooth is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/lncRNAAddict/PySmooth">https://github.com/lncRNAAddict/PySmooth</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar2">
      <title>Ethics approval and consent to participate</title>
      <p id="Par21">Not applicable.</p>
    </notes>
    <notes id="FPar3">
      <title>Consent for publication</title>
      <p id="Par22">Not applicable.</p>
    </notes>
    <notes id="FPar1" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par23">The authors declare no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>van Os</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Stam</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Visser</surname>
            <given-names>RGF</given-names>
          </name>
          <name>
            <surname>van Eck</surname>
            <given-names>HJ</given-names>
          </name>
        </person-group>
        <article-title>SMOOTH: a statistical method for successful removal of genotyping errors from high-density genetic linkage data</article-title>
        <source>Theor Appl Genet</source>
        <year>2005</year>
        <volume>112</volume>
        <fpage>187</fpage>
        <lpage>94</lpage>
        <pub-id pub-id-type="doi">10.1007/s00122-005-0124-y</pub-id>
        <?supplied-pmid 16258753?>
        <pub-id pub-id-type="pmid">16258753</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hong</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Construction and analysis of high-density linkage map using high-throughput sequencing data</article-title>
        <source>PLoS ONE</source>
        <year>2014</year>
        <volume>9</volume>
        <fpage>e98855</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0098855</pub-id>
        <?supplied-pmid 24905985?>
        <pub-id pub-id-type="pmid">24905985</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Guo</surname>
            <given-names>Z-H</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>P-F</given-names>
          </name>
          <name>
            <surname>Yang</surname>
            <given-names>G-Q</given-names>
          </name>
          <name>
            <surname>Hu</surname>
            <given-names>J-Y</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Y-L</given-names>
          </name>
          <name>
            <surname>Xia</surname>
            <given-names>E-H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Genome sequences provide insights into the Reticulate Origin and Unique traits of Woody Bamboos</article-title>
        <source>Mol Plant</source>
        <year>2019</year>
        <volume>12</volume>
        <fpage>1353</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1016/j.molp.2019.05.009</pub-id>
        <?supplied-pmid 31145999?>
        <pub-id pub-id-type="pmid">31145999</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Wei Q, Wang W, Hu T, Hu H, Wang J, Bao C. Construction of a SNP-Based genetic map using SLAF-Seq and QTL analysis of morphological traits in Eggplant. Front Genet. 2020;11.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ma</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>X-A</given-names>
          </name>
          <name>
            <surname>Xu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>X</given-names>
          </name>
        </person-group>
        <article-title>Identification of quantitative trait loci associated with upper temperature tolerance in turbot, Scophthalmus maximus</article-title>
        <source>Sci Rep</source>
        <year>2021</year>
        <volume>11</volume>
        <fpage>21920</fpage>
        <pub-id pub-id-type="doi">10.1038/s41598-021-01062-3</pub-id>
        <?supplied-pmid 34753974?>
        <pub-id pub-id-type="pmid">34753974</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cover</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hart</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Nearest neighbor pattern classification</article-title>
        <source>IEEE Trans Inf Theory</source>
        <year>1967</year>
        <volume>13</volume>
        <fpage>21</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1109/TIT.1967.1053964</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
