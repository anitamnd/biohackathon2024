<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9889960</article-id>
    <article-id pub-id-type="pmid">36722204</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad020</article-id>
    <article-id pub-id-type="publisher-id">btad020</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Paper</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Capturing variation in metagenomic assembly graphs with MetaCortex</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-6298-1014</contrib-id>
        <name>
          <surname>Martin</surname>
          <given-names>Samuel</given-names>
        </name>
        <aff><institution>Earlham Institute</institution>, Norwich NR4 7UZ, <country country="GB">UK</country></aff>
        <xref rid="btad020-FM1" ref-type="author-notes"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ayling</surname>
          <given-names>Martin</given-names>
        </name>
        <aff><institution>Earlham Institute</institution>, Norwich NR4 7UZ, <country country="GB">UK</country></aff>
        <xref rid="btad020-FM1" ref-type="author-notes"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Patrono</surname>
          <given-names>Livia</given-names>
        </name>
        <aff><institution>Robert Koch Institute</institution>, 13353 Berlin, <country country="DE">Germany</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Caccamo</surname>
          <given-names>Mario</given-names>
        </name>
        <aff><institution>NIAB EMR</institution>, Kent ME19 6BJ, <country country="GB">UK</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Murcia</surname>
          <given-names>Pablo</given-names>
        </name>
        <aff><institution>MRC-University of Glasgow Centre for Virus Research</institution>, Glasgow G61 1QH, <country country="GB">UK</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-3044-4297</contrib-id>
        <name>
          <surname>Leggett</surname>
          <given-names>Richard M</given-names>
        </name>
        <aff><institution>Earlham Institute</institution>, Norwich NR4 7UZ, <country country="GB">UK</country></aff>
        <xref rid="btad020-cor1" ref-type="corresp"/>
        <!--richard.leggett@earlham.ac.uk-->
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Birol</surname>
          <given-names>Inanc</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <fn id="btad020-FM1">
        <p>The authors wish it to be known that, in their opinion, the first two authors should be regarded as Joint First Authors.</p>
      </fn>
      <corresp id="btad020-cor1">To whom correspondence should be addressed. <email>richard.leggett@earlham.ac.uk</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>1</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-01-12">
      <day>12</day>
      <month>1</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>12</day>
      <month>1</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>1</issue>
    <elocation-id>btad020</elocation-id>
    <history>
      <date date-type="received">
        <day>20</day>
        <month>6</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>10</day>
        <month>11</month>
        <year>2022</year>
      </date>
      <date date-type="editorial-decision">
        <day>27</day>
        <month>12</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>11</day>
        <month>1</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>31</day>
        <month>1</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Â© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad020.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>The assembly of contiguous sequence from metagenomic samples presents a particular challenge, due to the presence of multiple species, often closely related, at varying levels of abundance. Capturing diversity within species, for example, viral haplotypes, or bacterial strain-level diversity, is even more challenging.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We present MetaCortex, a metagenome assembler that captures intra-species diversity by searching for signatures of local variation along assembled sequences in the underlying assembly graph and outputting these sequences in sequence graph format. We show that MetaCortex produces accurate assemblies with higher genome coverage and contiguity than other popular metagenomic assemblers on mock viral communities with high levels of strain-level diversity and on simulated communities containing simulated strains.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>Source code is freely available to download from <ext-link xlink:href="https://github.com/SR-Martin/metacortex" ext-link-type="uri">https://github.com/SR-Martin/metacortex</ext-link>, is implemented in C and supported on MacOS and Linux. The version used for the results presented in this article is available at doi.<ext-link xlink:href="http://org/10.5281/zenodo.7273627" ext-link-type="uri">org/10.5281/zenodo.7273627</ext-link>.</p>
      </sec>
      <sec id="s5">
        <title>Supplementary information</title>
        <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Biotechnology and Biological Sciences Research Council</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000268</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>The well-documented increase in yield and reduction in the cost of DNA sequencing technologies has led to a rapid increase in the use of shotgun approaches for studying metagenomic samples (<xref rid="btad020-B28" ref-type="bibr">Mitchell <italic toggle="yes">et al.</italic>, 2018</xref>). A first analysis step is often the taxonomic classification of reads by comparison with reference databases. However, deeper analysis is enabled by assembling sequence data to form a longer contiguous sequence (contigs). Such assembly may facilitate improved classification, clustering of sequences (particularly where reference genomes are unavailable) or analysis at the scale of genes.</p>
    <p>There are two fundamental approaches for the assembly of sequencing data: overlap-layout-consensus (OLC) assembly and de Bruijn graph assembly. We recommend the reader consult (<xref rid="btad020-B2" ref-type="bibr">Ayling, 2020</xref>) for a more thorough overview. In OLC assembly, each read is compared to every other read and reads that overlap well are merged together to form contigs. The de Bruijn graph technique utilizes directed graphs to represent the k-mers (short sequences of length <italic toggle="yes">k</italic>) present in a set of reads, and this representation of the read set turns the assembly problem into a graph traversal problem. Traversing a graph has a lower order of time complexity than OLC and so the computational time to perform an assembly can be significantly reduced. Furthermore, the amount of memory required to build the graph is proportional to the total k-mers present in the sample, rather than the total number of reads. This is particularly important as new generations of sequencing technologies are producing ever greater amounts of data.</p>
    <p>Metagenomic assembly presents several challenges beyond those of <italic toggle="yes">de novo</italic> genomic assembly. The main additional difficulties are unknown diversity and unknown species abundance (<xref rid="btad020-B2" ref-type="bibr">Ayling, 2020</xref>). Given two sufficiently distinct genomes, one can find a (possibly very large) k-mer size such that the genomes do not share k-mers. Thus, it can be inferred that for large enough k, subgraphs representing distinct species are mostly disconnected and existing assembly techniques from <italic toggle="yes">de novo</italic> genome assembly may be used on each disconnected subgraph. However, in practice, such a <italic toggle="yes">k</italic> is likely to be far larger than the read size, and so impractical for de Bruijn graph construction. Furthermore, it is often not the case that a metagenomic sample consists solely of diverse species, and separating closely related species, or many strains of a single species, is a difficult task, particularly at low abundance.</p>
    <p>The problem of capturing diversity below the species level in an assembly presents an even bigger challenge. The genomes of different strains from a single species can differ by single nucleotide polymorphisms (SNPs), large-scale structural variation and anything in between. In many ways, the challenges faced here are similar to those faced when separating haplotypes in <italic toggle="yes">de novo</italic> assembly, where much of the same sequence is shared between haplotypes. In this case, one can use the ploidy of the organism and the k-mer coverages to guide the assembly. However, in the metagenomic case, we do not necessarily know what the expected coverage of each strain is, and in low abundance cases, it will be difficult to distinguish a SNP from a sequencing error (<xref rid="btad020-B33" ref-type="bibr">Quince, 2021</xref>). The challenge is at its most stark when studying viral metagenomes. Due to their short replication times, large population sizes and lack of proofreading mechanisms [coronaviruses are a notable exception (<xref rid="btad020-B9" ref-type="bibr">Denison, 2011</xref>)], viruses can evolve extremely rapidly. As such, viruses are often referred to as a quasispecies consisting of a set of related strains; and the genome sequence of a strain is sometimes referred to as a haplotype (<xref rid="btad020-B14" ref-type="bibr">Gregori, 2016</xref>).</p>
    <p>Due to the throughput of current next-generation sequencing technologies, it is possible to have a metagenomic dataset consisting of several terabytes of reads [e.g. the NovaSeq 6000 is capable of producing up to 6000 Gb of sequencing data in a single run (<ext-link xlink:href="https://www.illumina.com/systems/sequencing-platforms.html" ext-link-type="uri">https://www.illumina.com/systems/sequencing-platforms.html</ext-link>, accessed September 2022)]. Many assemblers are incapable of assembling such large datasets within realistic time and memory constraints. One strategy to make the problem tractable is to subsample the read set to obtain a much smaller one which can then be assembled. This process will usually not affect the assemblies of high-abundance species in the sample [in fact, it can improve them (<xref rid="btad020-B16" ref-type="bibr">Hug, 2016</xref>)], but there is evidence that the assemblies of the low-abundance species will be incomplete and of poorer quality (<xref rid="btad020-B8" ref-type="bibr">Cattonaro, 2018</xref>).</p>
    <p>Many current short-read metagenomic assemblers utilize the de Bruijn graph paradigm. Popular examples include Ray Meta (<xref rid="btad020-B6" ref-type="bibr">Boisvert, 2012</xref>), MEGAHIT (<xref rid="btad020-B25" ref-type="bibr">Li, 2015</xref>), MetaVelvet (<xref rid="btad020-B29" ref-type="bibr">Namiki, 2012</xref>) and metaSPAdes (<xref rid="btad020-B30" ref-type="bibr">Nurk, 2017</xref>). A key part of the implementation of all these tools is to collapse an assembly graph into linear sequences (usually in the form of a FASTA file). This facilitates easy downstream analysis, but the act of converting the assembly graph into a linear sequence has the effect of removing the understanding of sequence diversity that is implicit in the graph (<xref rid="btad020-B7" ref-type="bibr">Brown, 2020</xref>). Several assemblers have been created specifically for the assembly of viral quasispecies, such as SAVAGE (<xref rid="btad020-B3" ref-type="bibr">Baaijens, 2017</xref>) and VICUNA (<xref rid="btad020-B39" ref-type="bibr">Yang, 2012</xref>). These tools are able to assemble the haplotypes present in an isolated sample but may be less effective at assembling quasi-species from metagenomic samples. Within the genome assembly world, there is a growing awareness of the importance of capturing the genome graph in the output from assembly tools. This has resulted in the development of the FASTG format (<ext-link xlink:href="http://fastg.sourceforge.net" ext-link-type="uri">http://fastg.sourceforge.net</ext-link>, accessed 25 May 2021) and, more recently and with wider adoption, the graphical fragment assembly (GFA) format for assembly graph files (<ext-link xlink:href="https://github.com/GFA-spec/GFA-spec" ext-link-type="uri">https://github.com/GFA-spec/GFA-spec</ext-link>, accessed 25 May 2021). These have been implemented in a number of tools including recent versions of ABySS (<xref rid="btad020-B18" ref-type="bibr">Jackman, 2017</xref>), SPAdes (<xref rid="btad020-B5" ref-type="bibr">Bankevich, 2012</xref>), metaSPAdes and SDG (<xref rid="btad020-B38" ref-type="bibr">Yanes, 2019</xref>). Other tools have addressed the problem of analysing the quantity of sequencing data that is currently available, particularly in metagenomics. For example, MetaGraph can construct a de Bruijn graph from petabases of sequencing data for sequence querying and assembly (<xref rid="btad020-B20" ref-type="bibr">Karasikov, 2020</xref>). Within the metagenomics world, several recent tools have focused on identifying and assembling strain-level variation from assembly graphs. STRONG uses multiple metagenome samples from a time series to identify strains <italic toggle="yes">de novo</italic> from an assembly graph, and performs coassembly and genome binning (<xref rid="btad020-B33" ref-type="bibr">Quince, 2021</xref>). The tool spacegraphcats can perform a local search of an assembly graph to identify variation that is not present in reference sequences (<xref rid="btad020-B7" ref-type="bibr">Brown, 2020</xref>), and the tool KOMB uses assembly graphs to identify copy number variants and structural variants in a metagenomic read set (<xref rid="btad020-B4" ref-type="bibr">Balaji, 2022</xref>).</p>
    <p>Here, we introduce MetaCortex, a de Bruijn graph metagenomic assembler that is built upon data structures and graph-traversal algorithms developed for the Cortex assembler (<xref rid="btad020-B17" ref-type="bibr">Iqbal, 2012</xref>). As well as performing metagenomic assembly with standard FASTA output, MetaCortex generates sequence graph files that preserve intra-species variation (e.g. viral haplotypes) and implements a new graph traversal algorithm to output variant contig sequences. Whilst MetaCortex can be used to assemble any metagenomic dataset, we have developed features to specifically target metagenomic datasets with high levels of strain diversity (e.g. viral communities) and to represent this diversity in the resulting assembly. MetaCortex captures variation by looking for signatures of polymorphisms in the de Bruijn graph constructed from the reads and represents this in sequence graph format (both FASTG and GFA v2) and the usual FASTA format. The sequence graph provides information on local variation, such as SNPs and indels, along each contig identified by MetaCortex. By using the efficient data structures from Cortex, MetaCortex is capable of utilizing all k-mers from large metagenomic datasets and able to perform assemblies from these datasets on a single CPU. One of the novel features of Cortex was to introduce coloured de Bruijn graphs. This is not yet utilized by MetaCortex, but the code has been written to allow an easy implementation in future versions.</p>
    <p>We show that MetaCortex is able to produce highly contiguous assemblies capturing almost all genome level diversity and with a low level of misassemblies. By outputting sequence graph files, we were able to capture strain-level diversity that is not present in the contigs and use this to manually assemble contigs that were specific to individual strains in a sample.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <p>To test MetaCortex, we assembled real Illumina read sets from two mock communities of 12 viruses, at varying levels of abundance; a real human gut sample which was subsequently <italic toggle="yes">in silico</italic> mixed with real reads from a lab mix of five strains of HIV in equal abundance; and two simulated read sets from communities with high levels of strain variation. In each case, we assembled the dataset using the Subtractive Walk (SW) algorithm with delta value equal to 0.8 (see Section 3). The minimum coverage parameter was set to 10, except for the lower coverage simulated datasets, where it was set to 5. The parameters for the HIV dataset were adjusted to suit this dataset.</p>
    <p>To compare MetaCortexâs performance with that of existing <italic toggle="yes">de novo</italic> metagenome assemblers, we also assembled the same datasets using MEGAHIT (v1.1.1), Ray Meta (v2.3.1), MetaVelvet (v1.2.02), metaSPAdes (v3.14) and IDBA-UD (v1.1.2) (<xref rid="btad020-B32" ref-type="bibr">Peng, 2012</xref>). For each assembler, we assembled each dataset using a range of parameters where these were available. For MetaCortex and Ray Meta, we used k-mer values equal to 31, 63, 95 and 127. For MetaVelvet, we used k-mer values equal to 31, 63 and 95. Since MEGAHIT uses several k-mer values when constructing an assembly, we varied the âmin-count parameter (with values default, 5, 10 and 20) for each dataset. The assemblies by metaSPAdes were created using the default options. For the real sequence data, we used trim-galore v0.5.0 (<ext-link xlink:href="https://github.com/FelixKrueger/TrimGalore" ext-link-type="uri">https://github.com/FelixKrueger/TrimGalore</ext-link>, accessed November 2020) [a wrapper script around Cutadapt (<xref rid="btad020-B26" ref-type="bibr">Martin, 2011</xref>)], to trim low-quality bases and adapter sequence from the reads, with the flags âpaired and âretain_unpaired where appropriate. Since this can break the pairing of paired-end reads and result in single-ended reads, we assembled these sets using both âpaired + unpaired singleâ and âsingle onlyâ modes, for the assemblers where this was possible. The assemblies by IDBA-UD either failed, or were still running after 62âdays, so the results for this assembler are not provided.</p>
    <p>Statistics on the assemblies were obtained using MetaQUAST (<xref rid="btad020-B27" ref-type="bibr">Mikheenko, 2016</xref>), which by default considers only those contigs greater than 500âbp in length. A position on a contig is considered a misassembly by MetaQUAST if either the left flanking sequence aligns over 1 kb away from the right flanking sequence on a reference genome; flanking sequences overlap on more than 1 kb; or flanking sequences align to different strands, chromosomes or genomes (i.e. chimeric assemblies). We set the flag âambiguity-usageâ equal to one, so that only the best alignment from each contig is used when calculating certain statistics. Here, for each dataset, we present a single assembly from each assembler, that we judged to be the best (based on genome coverage and error rates). Full results for all assemblies are available in the <xref rid="sup1" ref-type="supplementary-material">Supplementary Materials</xref>, along with the commands used.</p>
    <sec>
      <title>2.1 Assembly of sequenced mock viral communities</title>
      <p>For our first benchmark, we assessed how well MetaCortex performs metagenomic assembly on simple mock communities compared to other current assemblers. Two mock communities of 12 viruses, each containing 2 ssDNA viruses and 10 dsDNA viruses, were assembled from real Illumina read data made available for benchmarking purposes (<xref rid="btad020-B34" ref-type="bibr">Roux, 2016</xref>).</p>
      <p>For both mocks, IDBA-UD was still running after 60âdays, with 8 CPUs assigned. The assemblies by MetaVelvet were either killed by the Linux Out of Memory (OOM) killer after running out of memory, with 3TB of RAM allocated, or they recovered an insignificant total genome fraction, and so are not reported here. For MockB, metaSPAdes failed after running out of memory, with 3TB of RAM allocated. This is beyond the memory limits for many researchers, and the usual strategy at this point is to either use an assembler with lower resource requirements [such as MEGAHIT, as in e.g. <xref rid="btad020-B21" ref-type="bibr">Kim (2021)</xref>] or assemble a much smaller subsample of reads instead. However, recent studies suggest that subsampling can drastically reduce the length and proportion of conserved genes in the subsequent assembly when compared to the assembly of the full dataset (<xref rid="btad020-B8" ref-type="bibr">Cattonaro, 2018</xref>).</p>
      <p>The first community, Mock A, was composed of the dsDNA viruses each (theoretically) at 9.82% abundance and the ssDNA viruses at 0.92%. The read set consisted of 2 Ã 250 bp paired-end reads, sequenced on the Illumina MiSeq platform, with a total read count of 96âm, including reads from host DNA. Using MetaCortex (<italic toggle="yes">k</italic>â=â95), we were able to assemble 99.89% of the viral genomes with no misassemblies. Mismatch and indel rates were very low, at 4.43 per 100 kb and 3.44 per 100 kb, respectively. Individual genome coverages ranged from 100% to 99.56%. Eight virus genomes were each assembled in a single contig, while the assembly of all other genomes ranged from 8 to 40 contigs. <xref rid="btad020-F1" ref-type="fig">FigureÂ 1B</xref> shows that the assembly by MetaCortex is the most contiguous.</p>
      <fig position="float" id="btad020-F1">
        <label>Fig. 1.</label>
        <caption>
          <p>(<bold>A</bold>) Genome coverages for Mock A and Mock B for assemblies presented in <xref rid="btad020-T1" ref-type="table">TablesÂ 1</xref> and <xref rid="btad020-T2" ref-type="table">2</xref>. Each cross indicates the assembled percent of a genome in the mock. A cross at 0% indicates that a known genome in the sample was not present in the assembly. (<bold>B</bold>) NGA50 by viral species for assemblies presented in <xref rid="btad020-T1" ref-type="table">TablesÂ 1</xref> and <xref rid="btad020-T2" ref-type="table">2</xref></p>
        </caption>
        <graphic xlink:href="btad020f1" position="float"/>
      </fig>
      <p><xref rid="btad020-T1" ref-type="table">TableÂ 1</xref> shows the assembly statistics as produced by MEGAHIT (paired, min countâ=â20), MetaCortex (<italic toggle="yes">k</italic>â=â95), metaSPAdes (default) and Ray Meta (paired, <italic toggle="yes">kâ</italic>=â31). Only the assembly by metaSPAdes recovers a higher genome fraction than the assembly by MetaCortex, with an extra 0.012%. However, metaSPAdes recovered only four species at 100% (compared with six for MetaCortex) and seven in a single contig (compared with eight for MetaCortex). The assembly by MetaCortex was the most contiguous (<xref rid="btad020-F1" ref-type="fig">Fig.Â 1B</xref>) and has error rates almost identical to metaSPAdes (which had the lowest), with only a slightly higher indel rate. The assembly by MEGAHIT recovered a similar genome fraction across most species in the mock (<xref rid="btad020-F1" ref-type="fig">Fig.Â 1A</xref>), but the assembly was less contiguous (<xref rid="btad020-F1" ref-type="fig">Fig.Â 1B</xref>) and had the highest mismatch rate and the most misassemblies. Notably, the assembly by Ray Meta failed to assemble any of the genome of the ssDNA phage alpha3.</p>
      <table-wrap position="float" id="btad020-T1">
        <label>Table 1.</label>
        <caption>
          <p>Summary statistics for assemblies of Mock A</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="center" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th rowspan="1" colspan="1">Genome fraction (%)</th>
              <th rowspan="1" colspan="1">Genomes covered &gt; 50%</th>
              <th rowspan="1" colspan="1">Contigs</th>
              <th rowspan="1" colspan="1">Misassemblies</th>
              <th rowspan="1" colspan="1">Mismatch rate</th>
              <th rowspan="1" colspan="1">Indel rate</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">98.233</td>
              <td rowspan="1" colspan="1">11/12</td>
              <td rowspan="1" colspan="1">1902</td>
              <td rowspan="1" colspan="1">3</td>
              <td rowspan="1" colspan="1">75.7</td>
              <td rowspan="1" colspan="1">3.33</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">99.886</td>
              <td rowspan="1" colspan="1">12/12</td>
              <td rowspan="1" colspan="1">339</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">4.43</td>
              <td rowspan="1" colspan="1">3.44</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">metaSPAdes</td>
              <td rowspan="1" colspan="1">99.898</td>
              <td rowspan="1" colspan="1">12/12</td>
              <td rowspan="1" colspan="1">2259</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">4.43</td>
              <td rowspan="1" colspan="1">3.12</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">97.652</td>
              <td rowspan="1" colspan="1">11/12</td>
              <td rowspan="1" colspan="1">1737</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">9.06</td>
              <td rowspan="1" colspan="1">3.02</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn1">
            <p><italic toggle="yes">Note</italic>: The contigs field describes the number of contigs in the assembly of length greater than or equal to 500âbp. Misassemblies are defined in the text above and include chimeric assemblies. Mismatch and indel rates are the number of occurrences per 100 kb. The NGA50 for each genome in the sample can be found in Figure 1B.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <p>The total aligned length of the assembly by MetaCortex was 1.09 Mb, out of a total assembly length of 5.7 Mb. We used BLAST to query the longest unaligned contigs (greater than 100 kb) against the nt database. This revealed that each had alignments to one of Pseudoalteromonas or <italic toggle="yes">Cellulophaga baltica</italic>. These were host species that the mock community was grown on, so this represents legitimate assembly of DNA present in the sample. Including these species in the reference list for MetaQUAST, we had a total aligned length of 4.96 Mb, of which 3.87 Mb aligned to <italic toggle="yes">C.baltica</italic> over 143 contigs (covering 82.03% of the <italic toggle="yes">C.baltica</italic> genome).</p>
      <p>The second community, Mock B, consisted of the dsDNA viruses at 3.51% abundance, and the two ssDNA viruses each at 32.47% abundance. The read set consisted of 98m 2 Ã 250 bp paired-end reads. <xref rid="btad020-T2" ref-type="table">TableÂ 2</xref> shows the assembly statistics as produced by MEGAHIT (single, min countâ=â20), MetaCortex (<italic toggle="yes">k</italic>â=â63) and Ray Meta (single, <italic toggle="yes">k</italic>â=â31). Using MetaCortex we assembled 99.71% of the community, with a single misassembly. The percent of individual genomes recovered ranged from 100% (for five genomes) to 98.744%. Seven virus genomes were assembled in a single contig, and the assembly of all other genomes varied from between 6 and 25 contigs. As was the case in Mock A, â¼3.80 Mb of unaligned contigs were found to align to <italic toggle="yes">C.baltica</italic>, covering 81.804% of its genome.</p>
      <table-wrap position="float" id="btad020-T2">
        <label>Table 2.</label>
        <caption>
          <p>Summary statistics for assemblies of Mock B</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="center" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th rowspan="1" colspan="1">Genome fraction (%)</th>
              <th rowspan="1" colspan="1">Genomes covered &gt; 50%</th>
              <th rowspan="1" colspan="1">Contigs</th>
              <th rowspan="1" colspan="1">Misassemblies</th>
              <th rowspan="1" colspan="1">Mismatch rate</th>
              <th rowspan="1" colspan="1">Indel rate</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">94.15</td>
              <td rowspan="1" colspan="1">11/12</td>
              <td rowspan="1" colspan="1">1762</td>
              <td rowspan="1" colspan="1">2</td>
              <td rowspan="1" colspan="1">15.66</td>
              <td rowspan="1" colspan="1">3.65</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">99.711</td>
              <td rowspan="1" colspan="1">12/12</td>
              <td rowspan="1" colspan="1">735</td>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">7.23</td>
              <td rowspan="1" colspan="1">3.45</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">95.582</td>
              <td rowspan="1" colspan="1">12/12</td>
              <td rowspan="1" colspan="1">2240</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">4.63</td>
              <td rowspan="1" colspan="1">2.91</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>MetaCortex recovered the largest genome fraction, with a similar fraction recovered to Mock A. The assembly by MetaCortex was also the most contiguous (<xref rid="btad020-F1" ref-type="fig">Fig.Â 1B</xref>), although this time it contained a single misassembly (one more than Ray Meta) and had error rates between those in the assemblies by Ray Meta and MEGAHIT (<xref rid="btad020-T2" ref-type="table">TableÂ 2</xref>).</p>
    </sec>
    <sec>
      <title>2.2 Assembly of sequenced HIV lab mix</title>
      <p>In order to evaluate MetaCortexâs ability to capture variants in a real metagenomic sample, we created a read set containing five well-studied strains of HIV-1 (89.6, HXB2, JR-CSF, NL4-3 and YU2) in equal abundance that was bioinformatically mixed with reads from a human preterm baby gut sample. Reads and reference sequences for each HIV strain were made available in <xref rid="btad020-B11" ref-type="bibr">Di Giallonardo (2014)</xref> (SRA run SRR961514). Each strain was between 93% and 97% identical to the other strains, and the read set consisted of 308âMb of Illumina 2 Ã 250 bp reads. Reads from the human gut sample were taken from (<xref rid="btad020-B24" ref-type="bibr">Leggett, 2020</xref>) (ENA run accession ERR2099157), consisting of 10.5âGb of Illumina 2 Ã 250 bp reads. After mixing, reads from the HIV mix consisted of about 2.8%, representing about 0.56% per strain.</p>
      <p>To increase the sensitivity of MetaCortexâs ability to capture strain-level variation, we set the SW delta parameter to 0.4 and the min coverage parameter to 25. With these values, MetaCortex (SW, <italic toggle="yes">k</italic>â=â127) assembled 82.563% of the five HIV genomes across 31 contigs with no misassemblies.</p>
      <p><xref rid="btad020-T3" ref-type="table">TableÂ 3</xref> shows the best assemblies as produced by MEGAHIT (paired, min countâ=â5), MetaCortex (<italic toggle="yes">k</italic>â=â127), metaSPAdes (default), MetaVelvet (<italic toggle="yes">k</italic>â=â95) and Ray Meta (paired, <italic toggle="yes">k</italic>â=â127). <xref rid="btad020-F2" ref-type="fig">Figure 2A</xref> shows the individual coverages for each of the strains in these assemblies, and <xref rid="btad020-F2" ref-type="fig">Fig. 2B</xref> shows the NGA50s. The assembly by MetaCortex produced the assembly with the highest genome fraction and fewest misassemblies. Only Ray Meta produced an assembly with a significantly lower mismatch rate, but this contained more misassemblies and a smaller genome fraction. Another assembly by Ray Meta (see <xref rid="sup1" ref-type="supplementary-material">Supplementary Materials</xref>) contained a smaller genome fraction (70.089%) with no misassemblies but higher mismatch and indel rates (76.67 and 11.8, respectively).</p>
      <table-wrap position="float" id="btad020-T3">
        <label>Table 3.</label>
        <caption>
          <p>Summary statistics for assemblies of 5-strain HIV mix</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="center" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th rowspan="1" colspan="1">Genome fraction (%)</th>
              <th rowspan="1" colspan="1">Contigs</th>
              <th rowspan="1" colspan="1">HIV-aligned contigs</th>
              <th rowspan="1" colspan="1">Misassemblies</th>
              <th rowspan="1" colspan="1">mismatch rate</th>
              <th rowspan="1" colspan="1">Indel rate</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">36.153</td>
              <td rowspan="1" colspan="1">5075</td>
              <td rowspan="1" colspan="1">43</td>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">2744.27</td>
              <td rowspan="1" colspan="1">68.61</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">82.563</td>
              <td rowspan="1" colspan="1">4635</td>
              <td rowspan="1" colspan="1">31</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">508.2</td>
              <td rowspan="1" colspan="1">10.1</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">metaSPAdes</td>
              <td rowspan="1" colspan="1">36.153</td>
              <td rowspan="1" colspan="1">3409</td>
              <td rowspan="1" colspan="1">10</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">1424.3</td>
              <td rowspan="1" colspan="1">0</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">MetaVelvet</td>
              <td rowspan="1" colspan="1">2.011</td>
              <td rowspan="1" colspan="1">3661</td>
              <td rowspan="1" colspan="1">3</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">1747.17</td>
              <td rowspan="1" colspan="1">0</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">72.597</td>
              <td rowspan="1" colspan="1">1243</td>
              <td rowspan="1" colspan="1">43</td>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">74.03</td>
              <td rowspan="1" colspan="1">8.54</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <sec>
        <title>2.2.1âGFA output captures strain-level variation and facilitates visualization</title>
        <p>As an alternative way to capture strain-level diversity, we assembled the same dataset as above using MetaCortex's MC algorithm, with the sequence graph output enabled and the minimum coverage parameter set to 25. This creates a sequence graph showing local variation along each contig in the assembly (see <xref rid="btad020-F3" ref-type="fig">Fig. 3B</xref>). This allows us to examine local variation along the contigs identified by MetaCortex without having to disentangle the larger assembly graph. For comparison, <xref rid="btad020-F3" ref-type="fig">Figure 3A</xref> highlights the contigs from the metaSPAdes assembly that map to the HIV genomes within the assembly graph output produced by metaSPAdes [and visualized using Bandage (<xref rid="btad020-B37" ref-type="bibr">Wick, 2015</xref>)]. These sequences are embedded within a much larger and more complex connected graph. On the other hand, <xref rid="btad020-F3" ref-type="fig">Figure 3C</xref> represents the FASTA output from the Ray Meta assembly in sequence graph form. Here, we have no information about local variation and connectedness without performing further analyses.</p>
        <fig position="float" id="btad020-F2">
          <label>Fig. 2.</label>
          <caption>
            <p>Assemblies of HIV-5-strain dataset. (<bold>A</bold>) Coverage for each viral species for each assembler. (<bold>B</bold>) NGA50s for each strain per assembler. (<bold>C</bold>) Visualization of GFA sequence graph output from MetaCortex. The sequence graph shows a single contig assembled by MetaCortex, with local variation shown by branching sequences</p>
          </caption>
          <graphic xlink:href="btad020f2" position="float"/>
        </fig>
        <p>Next, we used BLAST (<xref rid="btad020-B1" ref-type="bibr">Altschul, 1990</xref>) to map each contig against a database consisting of the reference genomes for each HIV strain. We found one contig of length 9166 bp (about the length of the HIV genome) that mapped well to the reference genomes. We extracted this contig, and the corresponding sequence graph elements into new files. <xref rid="btad020-F2" ref-type="fig">Figure 2C</xref> shows the sequence graph corresponding to this contig from the MetaCortex sequence graph output, as visualized by GfaViz (<xref rid="btad020-B13" ref-type="bibr">Gonnella, 2019</xref>).</p>
        <fig position="float" id="btad020-F3">
          <label>Fig. 3.</label>
          <caption>
            <p>(<bold>A</bold>) Portion of assembly graph produced by metaSPAdes. Highlighted area shows sequences that mapped to the HIV reference genomes. (<bold>B</bold>) Portion of sequence graph produced by MetaCortex. Highlighted area represents the single contig that mapped to the HIV reference genomes. (<bold>C</bold>) FASTA output from Ray Meta represented as a sequence graph</p>
          </caption>
          <graphic xlink:href="btad020f3" position="float"/>
        </fig>
        <p>To demonstrate that this sequence graph contains more information than the corresponding contig, we constructed one contig for each of the five strains present in the sample. First, we created a mapping of each sequence in the graph to a database of the reference genomes using BLAST. Then, we constructed contigs in the following way. For each strain, a walk is performed through the sequence graph, where at each branch, the branch whose sequence has the highest score for the strain is chosen. Scores are calculated as the mapping identity multiplied by the proportion of the alignment covering the query (in ambiguous cases, the branch corresponding to the original contig is chosen). Each walk corresponds to a contig, which forms the strain-level contig. A python script to parse the GFA file and BLAST mapping and construct the individual strain assemblies is available in the MetaCortex repository, under scripts/strain_assembly.py.</p>
        <p>Next, we used dnadiff [part of MUMmer (<xref rid="btad020-B22" ref-type="bibr">Kurtz, 2004</xref>)] to compare each strain-specific contig and the original contig to the strainâs reference sequence. We found that the strain-specific contigs had alignments with a higher average identity to the corresponding reference strain and contained far fewer SNPs and indels (<xref rid="btad020-T4" ref-type="table">TableÂ 4</xref>).</p>
        <table-wrap position="float" id="btad020-T4">
          <label>Table 4.</label>
          <caption>
            <p>Summary statistics comparing each strain-specific assembly to the base assembly</p>
          </caption>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col valign="top" align="left" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
              <col valign="top" align="center" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <th rowspan="1" colspan="1"/>
                <th colspan="2" rowspan="1">NL4-3<hr/></th>
                <th colspan="2" rowspan="1">JR-CSF<hr/></th>
                <th colspan="2" rowspan="1">HXB2<hr/></th>
                <th colspan="2" rowspan="1">89.6<hr/></th>
                <th colspan="2" rowspan="1">YU2<hr/></th>
              </tr>
              <tr>
                <th rowspan="1" colspan="1"/>
                <th rowspan="1" colspan="1">Original</th>
                <th rowspan="1" colspan="1">Strain specific</th>
                <th rowspan="1" colspan="1">Original</th>
                <th rowspan="1" colspan="1">Strain specific</th>
                <th rowspan="1" colspan="1">Original</th>
                <th rowspan="1" colspan="1">Strain specific</th>
                <th rowspan="1" colspan="1">Original</th>
                <th rowspan="1" colspan="1">Strain specific</th>
                <th rowspan="1" colspan="1">Original</th>
                <th rowspan="1" colspan="1">Strain specific</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td rowspan="1" colspan="1">Total length</td>
                <td rowspan="1" colspan="1">9166</td>
                <td rowspan="1" colspan="1">9125</td>
                <td rowspan="1" colspan="1">9166</td>
                <td rowspan="1" colspan="1">9166</td>
                <td rowspan="1" colspan="1">9166</td>
                <td rowspan="1" colspan="1">9126</td>
                <td rowspan="1" colspan="1">9166</td>
                <td rowspan="1" colspan="1">9139</td>
                <td rowspan="1" colspan="1">9166</td>
                <td rowspan="1" colspan="1">9155</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Aligned bases ref (%)</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">99.98</td>
                <td rowspan="1" colspan="1">99.98</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Aligned bases query (%)</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">99.98</td>
                <td rowspan="1" colspan="1">99.98</td>
                <td rowspan="1" colspan="1">100</td>
                <td rowspan="1" colspan="1">100</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Avg identity</td>
                <td rowspan="1" colspan="1">96.04</td>
                <td rowspan="1" colspan="1">97.17</td>
                <td rowspan="1" colspan="1">97.39</td>
                <td rowspan="1" colspan="1">99.19</td>
                <td rowspan="1" colspan="1">95.81</td>
                <td rowspan="1" colspan="1">96.70</td>
                <td rowspan="1" colspan="1">93.82</td>
                <td rowspan="1" colspan="1">96.41</td>
                <td rowspan="1" colspan="1">94.81</td>
                <td rowspan="1" colspan="1">95.69</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Total SNPs</td>
                <td rowspan="1" colspan="1">278</td>
                <td rowspan="1" colspan="1">192</td>
                <td rowspan="1" colspan="1">180</td>
                <td rowspan="1" colspan="1">75</td>
                <td rowspan="1" colspan="1">318</td>
                <td rowspan="1" colspan="1">259</td>
                <td rowspan="1" colspan="1">419</td>
                <td rowspan="1" colspan="1">226</td>
                <td rowspan="1" colspan="1">394</td>
                <td rowspan="1" colspan="1">330</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Total indels</td>
                <td rowspan="1" colspan="1">83</td>
                <td rowspan="1" colspan="1">58</td>
                <td rowspan="1" colspan="1">11</td>
                <td rowspan="1" colspan="1">1</td>
                <td rowspan="1" colspan="1">81</td>
                <td rowspan="1" colspan="1">55</td>
                <td rowspan="1" colspan="1">72</td>
                <td rowspan="1" colspan="1">9</td>
                <td rowspan="1" colspan="1">56</td>
                <td rowspan="1" colspan="1">33</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </sec>
    </sec>
    <sec>
      <title>2.3 Assembly of simulated viral and bacterial datasets</title>
      <p>We tested MetaCortexâs performance on two simulated communities, one viral and one bacterial, both with a high amount of strain-level variation and highly variable compositions. For both communities, we used the software CAMISIM (<xref rid="btad020-B12" ref-type="bibr">Fritz, 2019</xref>) to simulate the community composition, strain-level variants and 15âGb of Illumina 2 Ã 150 bp paired-end reads, with a HiSeq 2500 error profile. The simulated viral reads had variable but very high coverage, with coverage ranging from 44370Ã to 143673Ã for individual taxa across 10 genomes. Previous studies have suggested that the ability of assembly tools to deal with ultra-high coverage genomes is an important but often under-appreciated aspect of virome analysis, particularly when using library preparation methods that increase overall sequencing depth in order to improve recovery of low abundance genomes (<xref rid="btad020-B36" ref-type="bibr">Sutton, 2019</xref>). The simulated bacterial reads had variable coverage, with coverage ranging from 0.38Ã to 2557Ã for individual taxa.</p>
      <p>Using the reference genomes (both real and simulated), we were able to compare the performance of MetaCortex, MEGAHIT, Ray Meta, metaSPAdes and MetaVelvet, on these datasets. Since the reads were simulated without adapter sequence, we assembled them without adapter trimming and used only the paired-end assembly mode for Ray Meta and MEGAHIT.</p>
      <p>The viral community consisted of six species: Human mastadenovirus F, Human herpesvirus 5, Human respiratory syncytial virus, Influenza B virus, Reovirus 3 and Zika virus; and four simulated strains of Influenza B virus. Each simulated strain had between 99.93% and 99.95% of bases aligned to the genome it was simulated from, with an average alignment identity of between 97.09% and 99.63%. The composition of the community is shown in <xref rid="btad020-F4" ref-type="fig">FigureÂ 4A</xref>, and we simulated 150âbp long paired-end reads for a total of 14.7 Gb. The results in <xref rid="btad020-T5" ref-type="table">TableÂ 5</xref> show the best assemblies using parameters: MEGAHIT (paired, default parameters), MetaCortex (<italic toggle="yes">k</italic>â=â63, min coverageâ=â5), metaSPAdes (default parameters) and Ray Meta (paired, <italic toggle="yes">k</italic>â=â63).</p>
      <fig position="float" id="btad020-F4">
        <label>Fig. 4.</label>
        <caption>
          <p>(<bold>A</bold>) Compositions of simulated communities. (<bold>B</bold>) Coverage per species for each assembler. (<bold>C</bold>) NGA50s of each species by assembler (log scale)</p>
        </caption>
        <graphic xlink:href="btad020f4" position="float"/>
      </fig>
      <table-wrap position="float" id="btad020-T5">
        <label>Table 5.</label>
        <caption>
          <p>Summary statistics for assemblies of simulated viral community</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="center" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="center" span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th rowspan="1" colspan="1">Genome fraction (%)</th>
              <th rowspan="1" colspan="1">Genomes covered &gt; 50%</th>
              <th rowspan="1" colspan="1">Contigs</th>
              <th rowspan="1" colspan="1">Misassemblies</th>
              <th rowspan="1" colspan="1">Mismatch rate</th>
              <th rowspan="1" colspan="1">Indel rate</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">98.709</td>
              <td rowspan="1" colspan="1">10/10</td>
              <td rowspan="1" colspan="1">1017</td>
              <td rowspan="1" colspan="1">17</td>
              <td rowspan="1" colspan="1">550.91</td>
              <td rowspan="1" colspan="1">1.55</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">98.777</td>
              <td rowspan="1" colspan="1">10/10</td>
              <td rowspan="1" colspan="1">2833</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">370.21</td>
              <td rowspan="1" colspan="1">2.33</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">metaSPAdes</td>
              <td rowspan="1" colspan="1">92.550</td>
              <td rowspan="1" colspan="1">8/10</td>
              <td rowspan="1" colspan="1">23</td>
              <td rowspan="1" colspan="1">0</td>
              <td rowspan="1" colspan="1">54.12</td>
              <td rowspan="1" colspan="1">0.83</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">77.241</td>
              <td rowspan="1" colspan="1">3/10</td>
              <td rowspan="1" colspan="1">14</td>
              <td rowspan="1" colspan="1">3</td>
              <td rowspan="1" colspan="1">10.59</td>
              <td rowspan="1" colspan="1">0</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>For this dataset, MetaCortex recovered the highest overall genome fraction (98.78%), with individual genome fractions ranging from 95.27% to 99.91% and had no misassemblies. MEGAHIT recovered a similar genome fraction but had significantly more misassemblies and a higher mismatch rate. Both Ray Meta and metaSPAdes recovered smaller genome fractions (77â93%), although with lower error rates (<xref rid="btad020-T5" ref-type="table">TableÂ 5</xref>). Individual genome coverage for each assembler is displayed in <xref rid="btad020-F4" ref-type="fig">FigureÂ 4B</xref>. MetaCortex achieved the highest NGA50 for the simulated strains (which were also the least abundant) but had lower NGA50 values for some of the other species (<xref rid="btad020-F4" ref-type="fig">Fig.Â 4C</xref>). The assemblies by MetaVelvet either failed to complete, or recovered an insignificant genome fraction, and so are not reported.</p>
      <p>The bacterial community consisted of four species randomly chosen from the well-known MBARC-26 mock community (<xref rid="btad020-B35" ref-type="bibr">Singer, 2016</xref>): <italic toggle="yes">Terriglobus roseus</italic>, <italic toggle="yes">Salmonella bongori</italic>, <italic toggle="yes">Fervidobacterium pennivorans</italic> and <italic toggle="yes">Sediminispirochaeta smaragdinae</italic>; plus two strains simulated from <italic toggle="yes">S.bongori</italic>, and four strains simulated from <italic toggle="yes">F.pennivorans</italic>. Each simulated strain had between 99.98% and 100.00% of bases aligning to the genome it was simulated from, with an average alignment identity of between 97.76% and 99.44%. Using CAMISIM, we simulated 14.9 Gb of 150âbp paired-end reads, with the abundances as shown in <xref rid="btad020-F4" ref-type="fig">FigureÂ 4A</xref>. <xref rid="btad020-T6" ref-type="table">TableÂ 6</xref> shows the best assemblies from each assembler we tested, with parameters: MEGAHIT (paired, default parameters), MetaCortex (<italic toggle="yes">k</italic>â=â63, min coverageâ=â5), metaSPAdes (default parameters), MetaVelvet (<italic toggle="yes">k</italic>â=â95) and Ray Meta (paired, <italic toggle="yes">k</italic>â=â31).</p>
      <table-wrap position="float" id="btad020-T6">
        <label>Table 6.</label>
        <caption>
          <p>Summary statistics for assemblies of simulated bacterial community</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="center" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th rowspan="1" colspan="1">Genome fraction (%)</th>
              <th rowspan="1" colspan="1">Genomes covered &gt; 50%</th>
              <th rowspan="1" colspan="1">Contigs</th>
              <th rowspan="1" colspan="1">Misassemblies</th>
              <th rowspan="1" colspan="1">Mismatch rate</th>
              <th rowspan="1" colspan="1">Indel rate</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">65.786</td>
              <td rowspan="1" colspan="1">6/10</td>
              <td rowspan="1" colspan="1">6602</td>
              <td rowspan="1" colspan="1">128</td>
              <td rowspan="1" colspan="1">420.37</td>
              <td rowspan="1" colspan="1">2.85</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">71.276</td>
              <td rowspan="1" colspan="1">6/10</td>
              <td rowspan="1" colspan="1">5119</td>
              <td rowspan="1" colspan="1">94</td>
              <td rowspan="1" colspan="1">446.07</td>
              <td rowspan="1" colspan="1">5.32</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">metaSPAdes</td>
              <td rowspan="1" colspan="1">54.308</td>
              <td rowspan="1" colspan="1">4/10</td>
              <td rowspan="1" colspan="1">273</td>
              <td rowspan="1" colspan="1">1</td>
              <td rowspan="1" colspan="1">110.58</td>
              <td rowspan="1" colspan="1">2.13</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">MetaVelvet</td>
              <td rowspan="1" colspan="1">54.027</td>
              <td rowspan="1" colspan="1">5/10</td>
              <td rowspan="1" colspan="1">6904</td>
              <td rowspan="1" colspan="1">8</td>
              <td rowspan="1" colspan="1">235.81</td>
              <td rowspan="1" colspan="1">4.1</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">50.098</td>
              <td rowspan="1" colspan="1">4/10</td>
              <td rowspan="1" colspan="1">438</td>
              <td rowspan="1" colspan="1">4</td>
              <td rowspan="1" colspan="1">65.9</td>
              <td rowspan="1" colspan="1">0.78</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>MetaCortex again recovers the highest genome fraction (71%), with 6 out of 10 genomes recovered at at least 50%. This time, the assembly by MEGAHIT contained the most misassemblies, with MetaCortex containing significantly fewer, but still a high misassembly rate. The assemblies by metaSPAdes, MetaVelvet and Ray Meta contained far fewer misassemblies but assembled a much smaller proportion of the genomes present in the sample (27â54%). The assembly by MetaVelvet has the lowest error rates, with no misassemblies, but fails to assemble any sequence for six of the genomes in the community, and for two of the genomes assembles &lt;5%. The assembly by metaSPAdes also has low error rates but recovers significantly less of the genomes than MetaCortex, failing to assemble any of the least two abundant strains (<italic toggle="yes">F.pennivorans</italic>.1 and <italic toggle="yes">F.pennivorans</italic>.2) and &lt;7% of both <italic toggle="yes">F.pennivorans</italic>.3 and <italic toggle="yes">S.bongori</italic>.1.</p>
      <p>Both MetaCortex and MEGAHIT had a large number of misassemblies. The majority of misassembled blocks were in contigs aligned to <italic toggle="yes">S.bongori</italic> sim. 2 (the second genome simulated from <italic toggle="yes">S.bongori</italic>), at 65% and 66%, respectively. This genome was the most abundant and had a large read coverage of over 1000Ã. High coverage is known to cause misassemblies for single species <italic toggle="yes">de novo</italic> genome assembly, with 20Ãâ200Ã determined the ideal coverage range (<xref rid="btad020-B10" ref-type="bibr">Desai, 2013</xref>), so we hypothesized that this was the cause of the misassemblies. After subsampling the reads at 10% and reassembling with MetaCortex using the same parameters as before, we found that the number of misassembled blocks belonging to this genome was reduced by 50%. This highlights the difficulty in having a great enough sequencing depth to capture the least abundant genomes. Methods such as digital normalization can be used to address this (<xref rid="btad020-B15" ref-type="bibr">Howe, 2014</xref>).</p>
    </sec>
    <sec>
      <title>2.4 Assembly of human gut microbiome sample</title>
      <p>The primary focus of MetaCortex is on capturing connected strain-level variation in metagenomic assemblies. However, like other metagenome assemblers, MetaCortex can also be used to obtain metagenome-assembled genomes (MAGs). To demonstrate this, we assembled whole genome shotgun reads sequenced from a human gut microbiome sample. We downloaded 25.1âGb of reads sequenced using Illumina HiSeq 4000, from the study (<xref rid="btad020-B21" ref-type="bibr">Kim, 2021</xref>) (SRA run number SRR13060942). Using Trim Galore, we first trimmed adapter sequence and low-quality bases and then assembled the resulting reads using MetaCortex SW (with parameters <italic toggle="yes">k</italic>â=â63, min coverageâ=â2 and SW deltaâ=â0.8). Contigs of length &lt;500âbp were discarded, which left 123720 contigs, with an N50 of 5399 and a maximum length 879838. Using BLAST, we aligned the contigs to the nt database and found 41080 contigs had an alignment covering at least 90% of the contig with an average alignment identity of &gt;95%. Without a ground truth âanswerâ for this dataset, we were encouraged by this level of similarity to reference sequences, particularly considering there are still many uncharacterized species present in the gut microbiome.</p>
      <p>Using Bowtie2 (<xref rid="btad020-B23" ref-type="bibr">Langmead and Salzberg, 2012</xref>), we mapped the reads against the assembled contigs and binned contigs using MetaBAT2 (<xref rid="btad020-B19" ref-type="bibr">Kang, 2019</xref>), resulting in 155 genome bins. Since in this case, there was no ground truth to compare our assembly to, we used checkm (<xref rid="btad020-B31" ref-type="bibr">Parks, 2015</xref>) to assess the bins. This found 23 bins with a completeness level of &gt;50% (min 51.33% and max 91.37%) and maximum contamination of 9.22%. Of these bins, 11 were reported to have high levels of strain heterogeneity (&gt;50%), suggesting that the majority of contamination in these cases is coming from multiple closely related organisms.</p>
    </sec>
    <sec>
      <title>2.5 Resource usage</title>
      <p>We reassembled all datasets and recorded the maximum memory usage and time taken (both real time and total CPU time) for each assembler (<xref rid="btad020-T7" ref-type="table">TableÂ 7</xref>). In all cases, MEGAHIT takes the least time to perform assemblies. This is because MEGAHIT is multithreaded, but this also means that assemblies with MEGAHIT are non-deterministic and therefore not completely reproducible.</p>
      <table-wrap position="float" id="btad020-T7">
        <label>Table 7.</label>
        <caption>
          <p>Resource usage statistics for assemblies</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="center" span="1"/>
            <col valign="top" align="center" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1">Dataset</th>
              <th align="center" rowspan="1" colspan="1">Assembler</th>
              <th align="center" rowspan="1" colspan="1">Elapsed time</th>
              <th align="center" rowspan="1" colspan="1">Total CPU time</th>
              <th align="center" rowspan="1" colspan="1">Maximum memory usage (GB)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Viral mock A</td>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">02:01:09</td>
              <td rowspan="1" colspan="1">16:09:12</td>
              <td rowspan="1" colspan="1">15.67</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Viral mock A</td>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">20:05:38</td>
              <td rowspan="1" colspan="1">20:05:38</td>
              <td rowspan="1" colspan="1">37.57</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Viral mock A</td>
              <td rowspan="1" colspan="1">metaSPAdes</td>
              <td rowspan="1" colspan="1">7-13:33:54</td>
              <td rowspan="1" colspan="1">7-13:33:54</td>
              <td rowspan="1" colspan="1">142.49</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Viral mock A</td>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">3-12:29:55</td>
              <td rowspan="1" colspan="1">3-12:29:55</td>
              <td rowspan="1" colspan="1">49.80</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Viral mock B</td>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">01:43:23</td>
              <td rowspan="1" colspan="1">13:47:04</td>
              <td rowspan="1" colspan="1">16.11</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Viral mock B</td>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">17:44:49</td>
              <td rowspan="1" colspan="1">17:44:49</td>
              <td rowspan="1" colspan="1">34.43</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Viral mock B</td>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">2-17:40:31</td>
              <td rowspan="1" colspan="1">2-17:40:31</td>
              <td rowspan="1" colspan="1">29.09</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">HIV lab mix</td>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">01:12:37</td>
              <td rowspan="1" colspan="1">09:40:56</td>
              <td rowspan="1" colspan="1">7.39</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">HIV lab mix</td>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">05:35:08</td>
              <td rowspan="1" colspan="1">05:35:08</td>
              <td rowspan="1" colspan="1">31.29</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">HIV lab mix</td>
              <td rowspan="1" colspan="1">metaSPAdes</td>
              <td rowspan="1" colspan="1">19:48:48</td>
              <td rowspan="1" colspan="1">3-07:15:12</td>
              <td rowspan="1" colspan="1">67.92</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">HIV lab mix</td>
              <td rowspan="1" colspan="1">MetaVelvet</td>
              <td rowspan="1" colspan="1">04:02:22</td>
              <td rowspan="1" colspan="1">04:02:22</td>
              <td rowspan="1" colspan="1">37.01</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">HIV lab mix</td>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">2-00:04:05</td>
              <td rowspan="1" colspan="1">2-00:04:05</td>
              <td rowspan="1" colspan="1">29.11</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated viral</td>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">01:49:01</td>
              <td rowspan="1" colspan="1">14:32:08</td>
              <td rowspan="1" colspan="1">11.48</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated viral</td>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">1-12:42:56</td>
              <td rowspan="1" colspan="1">1-12:42:56</td>
              <td rowspan="1" colspan="1">187.54</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated viral</td>
              <td rowspan="1" colspan="1">metaSPAdes</td>
              <td rowspan="1" colspan="1">5-10:30:49</td>
              <td rowspan="1" colspan="1">10-21:01:38</td>
              <td rowspan="1" colspan="1">113.90</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated viral</td>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">5-09:31:57</td>
              <td rowspan="1" colspan="1">5-09:31:57</td>
              <td rowspan="1" colspan="1">282.82</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated bacterial</td>
              <td rowspan="1" colspan="1">MEGAHIT</td>
              <td rowspan="1" colspan="1">05:51:51</td>
              <td rowspan="1" colspan="1">1-22:54:48</td>
              <td rowspan="1" colspan="1">11.64</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated bacterial</td>
              <td rowspan="1" colspan="1">MetaCortex</td>
              <td rowspan="1" colspan="1">3-06:13:56</td>
              <td rowspan="1" colspan="1">3-06:13:56</td>
              <td rowspan="1" colspan="1">150.07</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated bacterial</td>
              <td rowspan="1" colspan="1">metaSPAdes</td>
              <td rowspan="1" colspan="1">4-12:53:31</td>
              <td rowspan="1" colspan="1">9-01:47:02</td>
              <td rowspan="1" colspan="1">189.53</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated bacterial</td>
              <td rowspan="1" colspan="1">MetaVelvet</td>
              <td rowspan="1" colspan="1">06:32:27</td>
              <td rowspan="1" colspan="1">06:32:27</td>
              <td rowspan="1" colspan="1">229.37</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Simulated bacterial</td>
              <td rowspan="1" colspan="1">Ray Meta</td>
              <td rowspan="1" colspan="1">4-17:58:07</td>
              <td rowspan="1" colspan="1">4-17:58:07</td>
              <td rowspan="1" colspan="1">211.61</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <fn id="tblfn2">
            <p><italic toggle="yes">Note</italic>: Times are in the format d-hh:mm:ss.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
    </sec>
  </sec>
  <sec>
    <title>3 Algorithm</title>
    <p>The main innovation that MetaCortex introduces is two new graph traversal algorithms for metagenomic datasets. The core algorithm, MetaCortex Consensus (MC) is able to produce FASTA, GFA and FASTG outputs. This is the option that should be selected to obtain sequence graphs. The SW algorithm produces only FASTA output but performs much faster than MC and attempts to write a single sequence for each variant that is detected. The user can also choose to only write unitigs (the maximal paths where each inner node has degree 2) as the FASTA output, by specifying the (existing) PerfectPath algorithm.</p>
    <p>First, reads are decomposed into k-mers, and a de Bruijn graph is constructed; this graph (which will likely consist of several disconnected subgraphs) can be initially pruned to remove nodes which form short âtipsâ, or which fail to meet a minimum level of coverage. Tips up to a length of 100 are pruned by default, and the default minimum coverage is 2 (these values can be modified with command line options). Following construction of the de Bruijn graph, one of the following metagenomic traversal algorithms is executed. Formal descriptions of the algorithms can be found in the <xref rid="sup1" ref-type="supplementary-material">Supplementary Materials</xref>.</p>
    <sec>
      <title>3.1 MetaCortex consensus algorithm</title>
      <p>In theory, in a metagenomic read set and given a large enough k-mer size, evolutionarily distinct species whose genomes do not share any k-mers are represented by distinct connected components in the de Bruijn graph. This algorithm seeks to find consensus paths through each connected component of the graph, representing the disparate species in the sample, and then represent the inter-species diversity by looking for local topological variation (e.g. bubbles) along each consensus path, and outputting this in sequence graph format (GFA and FASTQ). Thus, the final output is a sequence graph that represents several related taxa.</p>
      <p>For each node in the graph, the connected component containing this node is explored to find the highest coverage node and to determine the size of the component. If it is sufficiently large, it is traversed starting at the highest coverage node. At each branching point in the graph, the branch with the highest coverage is favoured if it meets a minimum coverage threshold (<xref rid="btad020-F5" ref-type="fig">Fig.Â 5A</xref>). However, should the paths from two other branches later join together (so that they form a bubble) and have higher coverage collectively, then the highest coverage of these two branches is chosen (<xref rid="btad020-F5" ref-type="fig">Fig.Â 5B</xref>). Traversal continues until a tip is reached, the highest coverage branch at a branching point has already been visited (e.g. in repeat regions), or there are no branches of sufficiently high coverage.</p>
      <fig position="float" id="btad020-F5">
        <label>Fig. 5.</label>
        <caption>
          <p>Depictions of de Bruijn graphs, with the coverage for each node represented. (<bold>A</bold>) The path chosen by MetaCortex Consensus, with the highest coverage node on the far left (highlighted in brown), and the chosen path following the lower edges of the graph (highlighted in orange). (<bold>B</bold>) The path chosen when two of the branches form a bubble. Because the two bubble branches, added together, represent a combined higher coverage than the top branch, a route through the bubble is selected for the path. (<bold>C</bold>) The progression of the SW algorithm. The numbers above the edges are the normalized coverage difference/delta. The first graph is before coverage subtraction, with the path chosen again following the lower edges of the graph (highlighted in orange). The second graph is after coverage subtraction. Nodes belonging to exactly one path are removed (now with coverage 0, shown in grey), whilst nodes that are shared between paths remain with reduced coverage. (A color version of this figure appears in the online version of this article)</p>
        </caption>
        <graphic xlink:href="btad020f5" position="float"/>
      </fig>
      <p>Once a path has been identified, the sequence it represents is written out to a FASTA file. Coverage statistics for the path are included in the header line. If the user has selected to have GFA2/FASTG output, the path is traversed to identify polymorphisms. At each node along the path, any branches that meet a minimum coverage threshold (and are not part of the original path) are explored, depth-first, with the highest coverage node taken at any subsequence branches. If at any point we return to a node on the original path at a position after the original branch, then this new path is written as an alternative path in the GFA file. The path traversal then continues from where the alternative path joins the original path.</p>
      <p>Next, each node from the connected component is removed from the graph, and a new connected component is explored. Thus, we obtain one contig and one sequence graph for each sufficiently large connected component.</p>
      <p>In many cases however (particularly if <italic toggle="yes">k</italic> is small), disparate species will share k-mers, and it is likely to be the case that the de Bruijn graph consists almost entirely of a single, large, connected component (e.g. <xref rid="btad020-F2" ref-type="fig">Fig.Â 2A</xref>), with several smaller components. To account for this, the â-Mâ flag can be specified. In this case, during the final node removal step of the algorithm, only nodes in the path are removed, and the remaining nodes in the connected component will be reconsidered. Thus, we obtain multiple contigs for each connected component.</p>
    </sec>
    <sec>
      <title>3.2 SW algorithm</title>
      <p>One of the key difficulties of metagenomic assembly is the presence of multiple distinct strains (or even distinct species) whose genomes share k-mers. This means that in the corresponding de Bruijn graph, some paths may represent portions of the genomes belonging to multiple strains, so it may be desirable to include these in multiple output sequences. The SW algorithm addresses this by not simply removing nodes that have already been traversed, but instead reducing their coverage, so that they may be traversed multiple times.</p>
      <p>The algorithm proceeds as follows. First, each node is examined, and for any that meet a minimum coverage requirement, the connected component they are contained in is explored to find the node with locally maximal coverage. (Note that unlike in MC, the whole component may not be explored, in order to speed up the process.) From this node, the highest coverage path is obtained and written to the FASTA file, as in MC, except that at branches, the highest coverage branch is always taken (i.e. bubbles are disregarded).</p>
      <p>Next, MetaCortex estimates the number of variants covering each node in the path. First, the lowest coverage node along the path is found, and this is assumed to have one variant covering it. There may be more than one node with the same minimal coverage, in which case, the node closest to the end of the path is chosen. Then, starting from the minimal coverage node, the path is walked in each direction, and at each step, the quantity <inline-formula id="IE1"><mml:math id="IM1" display="inline" overflow="scroll"><mml:mi mathvariant="normal">Î´</mml:mi></mml:math></inline-formula> is calculated, where
<disp-formula id="E1"><mml:math id="M1" display="block" overflow="scroll"><mml:mo>Î´</mml:mo><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mtext>current</mml:mtext></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mo>Â </mml:mo><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mtext>previous</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mtext>max</mml:mtext><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mtext>current</mml:mtext></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mtext>previous</mml:mtext></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:mrow></mml:mfrac></mml:math></disp-formula>and <inline-formula id="IE2"><mml:math id="IM2" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">c</mml:mi></mml:mrow><mml:mrow><mml:mtext>current</mml:mtext></mml:mrow></mml:msub></mml:math></inline-formula> is the coverage of the node at the current step, and <inline-formula id="IE3"><mml:math id="IM3" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="normal">c</mml:mi></mml:mrow><mml:mrow><mml:mtext>previous</mml:mtext></mml:mrow></mml:msub></mml:math></inline-formula> is the coverage of the node at the previous step. This results in a value between â1 and 1. If this value is less than <inline-formula id="IE4"><mml:math id="IM4" display="inline" overflow="scroll"><mml:mo>-</mml:mo><mml:msub><mml:mrow><mml:mo>Î</mml:mo></mml:mrow><mml:mrow><mml:mtext>SW</mml:mtext></mml:mrow></mml:msub></mml:math></inline-formula> (a value determined by the user with option âW, and set to 0.8 by default) then the number of variants covering this node is assigned the value of the number of variants covering the previous node plus 1; if it is greater than <inline-formula id="IE5"><mml:math id="IM5" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mo>Î</mml:mo></mml:mrow><mml:mrow><mml:mtext>SW</mml:mtext></mml:mrow></mml:msub></mml:math></inline-formula> the number of variants covering this node is assigned whichever is larger of the value of the number of variants at the previous node minus 1, and 1.</p>
      <p>After assigning a value to each node estimating the number of variants covering that node in the path, the coverage of nodes is adjusted in the following way. Nodes with 1 variant covering them are reduced to 0 and are essentially removed from the graph. Nodes with more than 1 variant covering them are reduced by an amount which is linearly interpolated from the nearest 1-variant nodes before and after this node in the path (<xref rid="btad020-F5" ref-type="fig">Fig.Â 5C</xref>). This process is repeated until all nodes have been examined.</p>
      <p>This algorithm is based on the assumption that, for any two adjacent nodes in the graph that represent k-mers that only appear consecutively in the metagenome (i.e. the first node has outdegree one, and the second node has indegree one), the change in coverage between them will be small compared to their coverage values. On the other hand, for any two adjacent nodes in the graph that represent k-mers that appear consecutively in the metagenome, but at least one of which also appears elsewhere (i.e. at least one of the outdegree of the first node and indegree of the second node is greater than one), the change in coverage between them may be significant compared to the coverage values. The relative change in coverage across the path is what the value <inline-formula id="IE6"><mml:math id="IM6" display="inline" overflow="scroll"><mml:mi mathvariant="normal">Î´</mml:mi></mml:math></inline-formula> measures. This assumption, however, is only true for samples that have been sequenced with shotgun metagenome sequencing, and for regions of low sequence complexity (e.g. repeat regions) this may not be the case.</p>
      <p>When choosing a value for the parameter <inline-formula id="IE7"><mml:math id="IM7" display="inline" overflow="scroll"><mml:msub><mml:mrow><mml:mo>Î</mml:mo></mml:mrow><mml:mrow><mml:mtext>SW</mml:mtext></mml:mrow></mml:msub></mml:math></inline-formula>, the user should choose smaller values if the dataset is expected to have high levels of strain diversity and the user wishes to capture this in the assembly. For datasets with less strain diversity, or if the user wishes to capture only dominant strains, higher values (closer to 1.0) should be chosen.</p>
    </sec>
  </sec>
  <sec>
    <title>4 Implementation</title>
    <p>MetaCortex uses Cortexâs hash table structure to store k-mer information and to encapsulate the de Bruijn graph structure. For reasons of memory efficiency, the maximum k-mer size must be specified when building MetaCortex. The default maximum value is 31, with 63, 95, 127, 160 or 192 also possible. The size of the hash table is user-defined and should be sufficient to contain the totality of the dataset being assembled (if when loading the reads into the hash table, it becomes full, the user is warned, but execution continues and no new k-mers are added to the hash table). Further details can be found in MetaCortexâs documentation and the cortex_var manual (<ext-link xlink:href="http://cortexassembler.sourceforge.net/cortex_var_user_manual.pdf" ext-link-type="uri">http://cortexassembler.sourceforge.net/cortex_var_user_manual.pdf</ext-link>, accessed November 2021).</p>
    <p>After the construction of the hash table from the read files, a binary representation of the de Bruijn graph can be written to disc and this can then be used as the input to later assemblies. This can be used to speed up assembly time for subsequent assemblies of the same dataset, or to parallelize the reading of FASTA or FASTQ files. In the latter case, the individual CTX files can be merged to construct a de Bruijn graph from the whole read set. <xref rid="btad020-F6" ref-type="fig">FigureÂ 6</xref> depicts a typical workflow.</p>
    <fig position="float" id="btad020-F6">
      <label>Fig. 6.</label>
      <caption>
        <p>Flow chart depicting typical MetaCortex workflow</p>
      </caption>
      <graphic xlink:href="btad020f6" position="float"/>
    </fig>
  </sec>
  <sec>
    <title>5 Discussion</title>
    <p>Compared to the challenge of assembling a single isolate species, metagenomic assembly presents significant additional hurdles related to the presence of closely related species and their differing abundance in a sample. These challenges can be particularly obvious in viral communities, where a rapid evolutionary rate can make it especially difficult to distinguish between and within quasispecies. In recent years, several new assembly tools have attempted to tackle the challenges of metagenomic assembly using various heuristic approaches. Most of these have adopted approaches which reduce assembly graphs to sets of contigs, losing the variation captured by the underlying graph structures. While this variation may still be present in an assembly graph, it can be difficult to untangle these graphs for further analysis (as demonstrated in <xref rid="btad020-F2" ref-type="fig">Fig.Â 2</xref>). We address this in MetaCortex, a new assembly tool that preserves strain interconnectedness by outputting sequence graph files as an alternative to contigs. In addition, a new SW algorithm enables MetaCortex to estimate the number of variants in each subgraph and to output representative contigs. This algorithm was able to recover a high proportion of five strains of HIV from a lab mixed community within a metagenomic dataset, and five strains (one real and four simulated) of influenza virus from a simulated viral community, without misassembly. The latter result is particularly encouraging, as several of these strains were at very low abundance in the sample.</p>
    <p>Overall, we found that MetaCortex consistently recovers a very high genome fraction when compared to other popular metagenome assemblers. In particular, our simulated datasets show that MetaCortex is especially effective at recovering the genomes of extremely low abundant species. For the assembly of viral communities, MetaCortex had low error rates comparable with the lowest of the other assemblers tested.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btad020_Supplementary_Data</label>
      <media xlink:href="btad020_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We are grateful to Kirsten McLay for helping to enable some of the laboratory work that led to this publication and to Nicola Soranzo for helping to make MetaCortex available via conda. This study was also supported in part by the NBI Computing Infrastructure for Science Group, which provides technical support and maintenance to Earlham Instituteâs high-performance computing cluster and storage systems.</p>
  </ack>
  <sec>
    <title>Funding</title>
    <p>This work was supported by the Biotechnology and Biological Sciences Research Council (BBSRC), part of UK Research and Innovation, through Responsive Mode award [BB/M004805/1]; Core Capability Grant [BB/CCG1720/1]; and Core Strategic Programme Grant [BB/CSP1720/1].</p>
    <p><italic toggle="yes">Conflict of Interest</italic>: none declared.</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>MetaCortex is open source and available to download from <ext-link xlink:href="https://github.com/SR-Martin/metacortex" ext-link-type="uri">https://github.com/SR-Martin/metacortex</ext-link>, or (for Linux users) via Conda. The version of the source code used for the results presented in this article has DOI 10.5281/zenodo.7273627. Full documentation, including instructions for installation, is available at <ext-link xlink:href="https://metacortex.readthedocs.io/en/latest/" ext-link-type="uri">https://metacortex.readthedocs.io/en/latest/</ext-link>. All assemblies, simulated reads and simulated genomes used in this article have been deposited online on Zenodo and can be found at doi.org/10.5281/zenodo.7298574.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad020-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Altschul</surname><given-names>S.F.</given-names></string-name></person-group><etal>et al</etal> (<year>1990</year>) <article-title>Basic local alignment search tool</article-title>. <source>J. Mol. Biol</source>., <volume>215</volume>, <fpage>403</fpage>â<lpage>410</lpage>.<pub-id pub-id-type="pmid">2231712</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ayling</surname><given-names>M.</given-names></string-name></person-group><etal>et al</etal> (<year>2020</year>) <article-title>New approaches for metagenome assembly with short reads</article-title>. <source>Brief. Bioinformatics</source>, <volume>21</volume>, <fpage>584</fpage>â<lpage>594</lpage>.<pub-id pub-id-type="pmid">30815668</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Baaijens</surname><given-names>J.A.</given-names></string-name></person-group><etal>et al</etal> (<year>2017</year>) <article-title>De novo assembly of viral quasispecies using overlap graphs</article-title>. <source>Genome Res</source>., <volume>27</volume>, <fpage>835</fpage>â<lpage>848</lpage>.<pub-id pub-id-type="pmid">28396522</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Balaji</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2022</year>) <article-title>KOMB: k-core based de novo characterization of copy number variation in microbiomes</article-title>. <source>Comput. Struct. Biotechnol. J</source>., <volume>20</volume>, <fpage>3208</fpage>â<lpage>3222</lpage>.<pub-id pub-id-type="pmid">35832621</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bankevich</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2012</year>) <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>. <source>J. Comput. Biol</source>., <volume>19</volume>, <fpage>455</fpage>â<lpage>477</lpage>.<pub-id pub-id-type="pmid">22506599</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Boisvert</surname><given-names>S.</given-names></string-name></person-group><etal>et al</etal> (<year>2012</year>) <article-title>Ray Meta: scalable de novo metagenome assembly and profiling</article-title>. <source>Genome Biol</source>., <volume>13</volume>, <fpage>R122</fpage>.<pub-id pub-id-type="pmid">23259615</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Brown</surname><given-names>C.T.</given-names></string-name></person-group><etal>et al</etal> (<year>2020</year>) <article-title>Exploring neighborhoods in large metagenome assembly graphs using spacegraphcats reveals hidden sequence diversity</article-title>. <source>Genome Biol</source>., <volume>21</volume>, <fpage>164</fpage>.<pub-id pub-id-type="pmid">32631445</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cattonaro</surname><given-names>F.</given-names></string-name></person-group><etal>et al</etal> (<year>2018</year>) <article-title>Do you cov me? Effect of coverage reduction on metagenome shotgun sequencing studies</article-title>. <source>F1000Res</source>., <volume>7</volume>, <fpage>1767</fpage>.<pub-id pub-id-type="pmid">32185014</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Denison</surname><given-names>M.R.</given-names></string-name></person-group><etal>et al</etal> (<year>2011</year>) <article-title>Coronaviruses</article-title>. <source>RNA Biol</source>., <volume>8</volume>, <fpage>270</fpage>â<lpage>279</lpage>.<pub-id pub-id-type="pmid">21593585</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Desai</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2013</year>) <article-title>Identification of optimum sequencing depth especially for de novo genome assembly of small genomes using next generation sequencing data</article-title>. <source>PLoS One</source>, <volume>8</volume>, <fpage>e60204</fpage>.<pub-id pub-id-type="pmid">23593174</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Di Giallonardo</surname><given-names>F.</given-names></string-name></person-group><etal>et al</etal> (<year>2014</year>) <article-title>Full-length haplotype reconstruction to infer the structure of heterogeneous virus populations</article-title>. <source>Nucleic Acids Res</source>., <volume>42</volume>, <fpage>e115</fpage>.<pub-id pub-id-type="pmid">24972832</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Fritz</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>CAMISIM: simulating metagenomes and microbial communities</article-title>. <source>Microbiome</source>, <volume>7</volume>, <fpage>17</fpage>.<pub-id pub-id-type="pmid">30736849</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gonnella</surname><given-names>G.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>GfaViz: flexible and interactive visualization of GFA sequence graphs</article-title>. <source>Bioinformatics</source>, <volume>35</volume>, <fpage>2853</fpage>â<lpage>2855</lpage>.<pub-id pub-id-type="pmid">30596893</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gregori</surname><given-names>G.</given-names></string-name></person-group><etal>et al</etal> (<year>2016</year>) <article-title>Viral quasispecies complexity measures</article-title>. <source>Virol</source>, <volume>493</volume>, <fpage>227</fpage>â<lpage>237</lpage>.</mixed-citation>
    </ref>
    <ref id="btad020-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Howe</surname><given-names>A.C.</given-names></string-name></person-group><etal>et al</etal> (<year>2014</year>) <article-title>Tackling soil diversity with the assembly of large, complex metagenomes</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>111</volume>, <fpage>4904</fpage>â<lpage>4909</lpage>.<pub-id pub-id-type="pmid">24632729</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hug</surname><given-names>L.A.</given-names></string-name></person-group><etal>et al</etal> (<year>2016</year>) <article-title>N- and C-cycling organisms in the subsurface</article-title>. <source>Environ. Microbiol</source>., <volume>18</volume>, <fpage>159</fpage>â<lpage>173</lpage>.<pub-id pub-id-type="pmid">26033198</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Iqbal</surname><given-names>Z.</given-names></string-name></person-group><etal>et al</etal> (<year>2012</year>) <article-title>De novo assembly and genotyping of variants using colored de Bruijn graphs</article-title>. <source>Nat. Genet</source>., <volume>44</volume>, <fpage>226</fpage>â<lpage>232</lpage>.<pub-id pub-id-type="pmid">22231483</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jackman</surname><given-names>S.D.</given-names></string-name></person-group><etal>et al</etal> (<year>2017</year>) <article-title>ABySS 2.0: resource-efficient assembly of large genomes using a bloom filter</article-title>. <source>Genome Res</source>., <volume>27</volume>, <fpage>768</fpage>â<lpage>777</lpage>.<pub-id pub-id-type="pmid">28232478</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kang</surname><given-names>D.D.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>MetaBAT 2: an adaptive binning algorithm for robust and efficient genome reconstruction from metagenome assemblies</article-title>. <source>PeerJ</source>, <volume>7</volume>, <fpage>e7359</fpage>.<pub-id pub-id-type="pmid">31388474</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B20">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Karasikov</surname><given-names>M.</given-names></string-name></person-group><etal>et al</etal> (<year>2020</year>) MetaGraph: indexing and analysing nucleotide archives at Petabase-scale. bioRxiv 2020.10.01.322164. <pub-id pub-id-type="doi">10.1101/2020.10.01.322164</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad020-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kim</surname><given-names>C.Y.</given-names></string-name></person-group><etal>et al</etal> (<year>2021</year>) <article-title>Human reference gut microbiome catalog including newly assembled genomes from under-represented Asian metagenomes</article-title>. <source>Genome Med</source>., <volume>13</volume>, <fpage>134</fpage>.<pub-id pub-id-type="pmid">34446072</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kurtz</surname><given-names>S.</given-names></string-name></person-group><etal>et al</etal> (<year>2004</year>) <article-title>Versatile and open software for comparing large genomes</article-title>. <source>Genome Biol</source>., <volume>5</volume>, <fpage>R12</fpage>.<pub-id pub-id-type="pmid">14759262</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Langmead</surname><given-names>B.</given-names></string-name>, <string-name><surname>Salzberg</surname><given-names>S.</given-names></string-name></person-group> (<year>2012</year>) <article-title>Fast gapped-read alignment with bowtie 2</article-title>. <source>Nat. Methods</source>, <volume>9</volume>, <fpage>357</fpage>â<lpage>359</lpage>.<pub-id pub-id-type="pmid">22388286</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Leggett</surname><given-names>R.M.</given-names></string-name></person-group><etal>et al</etal> (<year>2020</year>) <article-title>Rapid profiling of the preterm infant gut microbiota using nanopore sequencing aids pathogen diagnostics</article-title>. <source>Nat. Microbiol</source>., <volume>5</volume>, <fpage>430</fpage>â<lpage>442</lpage>.<pub-id pub-id-type="pmid">31844297</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>D.</given-names></string-name></person-group><etal>et al</etal> (<year>2015</year>) <article-title>MEGAHIT: an ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>1674</fpage>â<lpage>1676</lpage>.<pub-id pub-id-type="pmid">25609793</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Martin</surname><given-names>M.</given-names></string-name></person-group> (<year>2011</year>) <article-title>Cutadapt removes adapter sequences from high-throughput sequencing reads</article-title>. <source>EMBnet.journal</source>, <volume>17</volume>, <fpage>10</fpage>â<lpage>12</lpage>.</mixed-citation>
    </ref>
    <ref id="btad020-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mikheenko</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2016</year>) <article-title>MetaQUAST: evaluation of metagenome assemblies</article-title>. <source>Bioinformatics</source>, <volume>32</volume>, <fpage>1088</fpage>â<lpage>1090</lpage>.<pub-id pub-id-type="pmid">26614127</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mitchell</surname><given-names>A.L.</given-names></string-name></person-group><etal>et al</etal> (<year>2018</year>) <article-title>EBI Metagenomics in 2017: enriching the analysis of microbial communities, from sequence reads to assemblies</article-title>. <source>Nucleic Acids Res</source>., <volume>46</volume>, <fpage>D726</fpage>â<lpage>D735</lpage>.<pub-id pub-id-type="pmid">29069476</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Namiki</surname><given-names>T.</given-names></string-name></person-group><etal>et al</etal> (<year>2012</year>) <article-title>MetaVelvet: an extension of velvet assembler to de novo metagenome assembly from short sequence reads</article-title>. <source>Nucleic Acids Res</source>., <volume>40</volume>, <fpage>e155</fpage>.<pub-id pub-id-type="pmid">22821567</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nurk</surname><given-names>S.</given-names></string-name></person-group><etal>et al</etal> (<year>2017</year>) <article-title>metaSPAdes: a new versatile metagenomic assembler</article-title>. <source>Genome Res</source>., <volume>27</volume>, <fpage>824</fpage>â<lpage>834</lpage>.<pub-id pub-id-type="pmid">28298430</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Parks</surname><given-names>D.H.</given-names></string-name></person-group><etal>et al</etal> (<year>2015</year>) <article-title>CheckM: assessing the quality of microbial genomes recovered from isolates, single cells, and metagenomes</article-title>. <source>Genome Res</source>., <volume>25</volume>, <fpage>1043</fpage>â<lpage>1055</lpage>.<pub-id pub-id-type="pmid">25977477</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Peng</surname><given-names>Y.</given-names></string-name></person-group><etal>et al</etal> (<year>2012</year>) <article-title>IDBA-UD: a de novo assembler for single-cell and metagenomic sequencing data with highly uneven depth</article-title>. <source>Bioinformatics</source>, <volume>28</volume>, <fpage>1420</fpage>â<lpage>1428</lpage>.<pub-id pub-id-type="pmid">22495754</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Quince</surname><given-names>C.</given-names></string-name></person-group><etal>et al</etal> (<year>2021</year>) <article-title>STRONG: metagenomics strain resolution on assembly graphs</article-title>. <source>Genome Biol</source>, <volume>22</volume>, <fpage>214</fpage>.<pub-id pub-id-type="pmid">34311761</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Roux</surname><given-names>S.</given-names></string-name></person-group><etal>et al</etal> (<year>2016</year>) <article-title>Towards quantitative viromics for both double-stranded and single-stranded DNA viruses</article-title>. <source>PeerJ</source>, <volume>4</volume>, <fpage>e2777</fpage>.<pub-id pub-id-type="pmid">28003936</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Singer</surname><given-names>E.</given-names></string-name></person-group><etal>et al</etal> (<year>2016</year>) <article-title>Next generation sequencing data of a defined microbial mock community</article-title>. <source>Sci. Data</source>, <volume>3</volume>, <fpage>160081</fpage>.<pub-id pub-id-type="pmid">27673566</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sutton</surname><given-names>T.D.S.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>Choice of assembly software has a critical impact on virome characterisation</article-title>. <source>Microbiome</source>, <volume>7</volume>, <fpage>12</fpage>.<pub-id pub-id-type="pmid">30691529</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B37">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wick</surname><given-names>R.R.</given-names></string-name></person-group><etal>et al</etal> (<year>2015</year>) <article-title>Bandage: interactive visualisation of de novo genome assemblies</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>3350</fpage>â<lpage>3352</lpage>.<pub-id pub-id-type="pmid">26099265</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B38">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Yanes</surname><given-names>L.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>A sequence distance graph framework for genome assembly and analysis</article-title>. <source>F1000Res</source>., <volume>8</volume>, <fpage>1490</fpage>.<pub-id pub-id-type="pmid">31723420</pub-id></mixed-citation>
    </ref>
    <ref id="btad020-B39">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Yang</surname><given-names>X.</given-names></string-name></person-group><etal>et al</etal> (<year>2012</year>) <article-title>De novo assembly of highly diverse viral populations</article-title>. <source>BMC Genomics</source>, <volume>13</volume>, <fpage>475</fpage>.<pub-id pub-id-type="pmid">22974120</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
