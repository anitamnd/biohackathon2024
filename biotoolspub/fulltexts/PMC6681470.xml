<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6681470</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btz375</article-id>
    <article-id pub-id-type="publisher-id">btz375</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Ismb/Eccb 2019 Conference Proceedings</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Macromolecular Sequence, Structure, and Function</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>LinearFold: linear-time approximate RNA folding by 5'-to-3' dynamic programming and beam search</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Huang</surname>
          <given-names>Liang</given-names>
        </name>
        <xref ref-type="aff" rid="btz375-aff1">1</xref>
        <xref ref-type="aff" rid="btz375-aff2">2</xref>
        <xref ref-type="corresp" rid="btz375-cor1"/>
        <!--<email>liang.huang.sh@gmail.com</email>-->
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zhang</surname>
          <given-names>He</given-names>
        </name>
        <xref ref-type="aff" rid="btz375-aff2">2</xref>
        <xref ref-type="author-notes" rid="btz375-FM2"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Deng</surname>
          <given-names>Dezhong</given-names>
        </name>
        <xref ref-type="aff" rid="btz375-aff1">1</xref>
        <xref ref-type="author-notes" rid="btz375-FM2"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zhao</surname>
          <given-names>Kai</given-names>
        </name>
        <xref ref-type="aff" rid="btz375-aff1">1</xref>
        <xref ref-type="author-notes" rid="btz375-FM3"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Liu</surname>
          <given-names>Kaibo</given-names>
        </name>
        <xref ref-type="aff" rid="btz375-aff1">1</xref>
        <xref ref-type="aff" rid="btz375-aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hendrix</surname>
          <given-names>David A</given-names>
        </name>
        <xref ref-type="aff" rid="btz375-aff1">1</xref>
        <xref ref-type="aff" rid="btz375-aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Mathews</surname>
          <given-names>David H</given-names>
        </name>
        <xref ref-type="aff" rid="btz375-aff4">4</xref>
        <xref ref-type="aff" rid="btz375-aff5">5</xref>
        <xref ref-type="aff" rid="btz375-aff6">6</xref>
      </contrib>
    </contrib-group>
    <aff id="btz375-aff1"><label>1</label>School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, OR, USA</aff>
    <aff id="btz375-aff2"><label>2</label>Baidu Research USA, Sunnyvale, CA, USA</aff>
    <aff id="btz375-aff3"><label>3</label>Department of Biochemistry &amp; Biophysics, Oregon State University, University of Rochester Medical Center, Rochester, NY, USA</aff>
    <aff id="btz375-aff4"><label>4</label>Department of Biochemistry &amp; Biophysics, University of Rochester Medical Center, Rochester, NY, USA</aff>
    <aff id="btz375-aff5"><label>5</label>Center for RNA Biology, University of Rochester Medical Center, Rochester, NY, USA</aff>
    <aff id="btz375-aff6"><label>6</label>Department of Biostatistics &amp; Computational Biology, University of Rochester Medical Center, Rochester, NY, USA</aff>
    <author-notes>
      <corresp id="btz375-cor1">To whom correspondence should be addressed. <email>liang.huang.sh@gmail.com</email></corresp>
      <fn id="btz375-FM2">
        <p>He Zhang and Dezhong Deng authors wish it to be known that these authors contributed equally.</p>
      </fn>
      <fn id="btz375-FM3">
        <p>Present address: Google, Inc, New York, NY 10011, USA.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <month>7</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2019-07-05">
      <day>05</day>
      <month>7</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>05</day>
      <month>7</month>
      <year>2019</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>35</volume>
    <issue>14</issue>
    <fpage>i295</fpage>
    <lpage>i304</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2019. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2019</copyright-year>
      <license license-type="cc-by-nc" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btz375.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>Predicting the secondary structure of an ribonucleic acid (RNA) sequence is useful in many applications. Existing algorithms [based on dynamic programming] suffer from a major limitation: their runtimes scale cubically with the RNA length, and this slowness limits their use in genome-wide applications.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We present a novel alternative <italic>O</italic>(<italic>n</italic><sup>3</sup>)-time dynamic programming algorithm for RNA folding that is amenable to heuristics that make it run in <italic>O</italic>(<italic>n</italic>) time and <italic>O</italic>(<italic>n</italic>) space, while producing a high-quality approximation to the optimal solution. Inspired by incremental parsing for context-free grammars in computational linguistics, our alternative dynamic programming algorithm scans the sequence in a left-to-right (5′-to-3′) direction rather than in a bottom-up fashion, which allows us to employ the effective beam pruning heuristic. Our work, though inexact, is the first RNA folding algorithm to achieve linear runtime (and linear space) without imposing constraints on the output structure. Surprisingly, our approximate search results in even higher overall accuracy on a diverse database of sequences with known structures. More interestingly, it leads to significantly more accurate predictions on the longest sequence families in that database (16S and 23S Ribosomal RNAs), as well as improved accuracies for long-range base pairs (500+ nucleotides apart), both of which are well known to be challenging for the current models.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>Our source code is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/LinearFold/LinearFold">https://github.com/LinearFold/LinearFold</ext-link>, and our webserver is at <ext-link ext-link-type="uri" xlink:href="http://linearfold.org">http://linearfold.org</ext-link> (sequence limit: 100 000<italic>nt</italic>).</p>
      </sec>
      <sec id="s4">
        <title>Supplementary information</title>
        <p><xref ref-type="supplementary-material" rid="sup1">Supplementary data</xref> are available at <italic>Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">National Science Foundation</named-content>
          <named-content content-type="funder-identifier">10.13039/100000001</named-content>
        </funding-source>
        <award-id>IIS-1656051</award-id>
        <award-id>IIS-1817231</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">National Institutes of Health</named-content>
          <named-content content-type="funder-identifier">10.13039/100000002</named-content>
        </funding-source>
        <award-id>R56 AG053460</award-id>
        <award-id>R21 AG052950</award-id>
        <award-id>R01 GM076485</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="10"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Ribonucleic acid (RNA) is involved in numerous cellular processes (<xref rid="btz375-B13" ref-type="bibr">Eddy, 2001</xref>). The dual nature of RNA as both a genetic material and functional molecule led to the RNA World hypothesis, that RNA was the first molecule of life (<xref rid="btz375-B17" ref-type="bibr">Gilbert, 1986</xref>), and this dual nature has also been utilized to develop <italic>in vitro</italic> methods to evolve functional sequences (<xref rid="btz375-B24" ref-type="bibr">Joyce, 1994</xref>). Furthermore, RNA is an important drug target and agent (<xref rid="btz375-B4" ref-type="bibr">Angelbello <italic>et al.</italic>, 2018</xref>; <xref rid="btz375-B8" ref-type="bibr">Castanotto and Rossi, 2009</xref>; <xref rid="btz375-B9" ref-type="bibr">Childs-Disney <italic>et al.</italic>, 2007</xref>; <xref rid="btz375-B10" ref-type="bibr">Crooke, 2004</xref>; <xref rid="btz375-B16" ref-type="bibr">Gareiss <italic>et al.</italic>, 2008</xref>; <xref rid="btz375-B40" ref-type="bibr">Palde <italic>et al.</italic>, 2010</xref>; <xref rid="btz375-B45" ref-type="bibr">Sazani <italic>et al.</italic>, 2002</xref>).</p>
    <p>Predicting the secondary structure of an RNA sequence, defined as the set of all canonical base pairs (A–U, G–C, G–U, see <xref ref-type="fig" rid="btz375-F1">Fig. 1A</xref>), is an important and challenging problem (<xref rid="btz375-B20" ref-type="bibr">Hofacker and Lorenz, 2014</xref>; <xref rid="btz375-B46" ref-type="bibr">Seetin and Mathews, 2012</xref>). Knowing the structure reveals crucial information about the RNA’s function, which is useful in many applications ranging from ncRNA detection (<xref rid="btz375-B15" ref-type="bibr">Fu <italic>et al.</italic>, 2015</xref>; <xref rid="btz375-B18" ref-type="bibr">Gruber <italic>et al.</italic>, 2010</xref>; <xref rid="btz375-B53" ref-type="bibr">Washietl <italic>et al.</italic>, 2012</xref>) to the design of oligonucleotides for knockdown of message (<xref rid="btz375-B33" ref-type="bibr">Lu and Mathews, 2008</xref>; <xref rid="btz375-B49" ref-type="bibr">Tafer <italic>et al.</italic>, 2008</xref>). Since experimentally determining the structure is expensive and time-consuming, and given the overwhelming increase in genomic data (about 10<sup>21</sup> base-pairs per year) (<xref rid="btz375-B48" ref-type="bibr">Stephens <italic>et al.</italic>, 2015</xref>), computational methods have been widely used as an alternative to automatically predict the structure. Widely used systems such as RNAstructure (<xref rid="btz375-B34" ref-type="bibr">Mathews and Turner, 2006</xref>), Vienna RNAfold (<xref rid="btz375-B32" ref-type="bibr">Lorenz <italic>et al.</italic>, 2011</xref>), CONTRAfold (<xref rid="btz375-B12" ref-type="bibr">Do <italic>et al.</italic>, 2006</xref>) and CentroidFold (<xref rid="btz375-B43" ref-type="bibr">Sato <italic>et al.</italic>, 2009</xref>), all use virtually the same dynamic programming algorithm (<xref rid="btz375-B39" ref-type="bibr">Nussinov <italic>et al.</italic>, 1978</xref>; <xref rid="btz375-B60" ref-type="bibr">Zuker and Stiegler, 1981</xref>) to find the best-scoring (lowest free energy, maximum expected accuracy or best model score) structure (<xref rid="btz375-B34" ref-type="bibr">Mathews and Turner, 2006</xref>; <xref rid="btz375-B53" ref-type="bibr">Washietl <italic>et al.</italic>, 2012</xref>). However, this set of algorithms, borrowed from computational linguistics (<xref rid="btz375-B25" ref-type="bibr">Kasami, 1965</xref>; <xref rid="btz375-B57" ref-type="bibr">Younger, 1967</xref>), has a running time of <italic>O</italic>(<italic>n</italic><sup>3</sup>) that scales <italic>cubically</italic> with the sequence length <italic>n</italic>, which is too slow for long RNA sequences (<xref rid="btz375-B28" ref-type="bibr">Lange <italic>et al.</italic>, 2012</xref>).
</p>
    <fig id="btz375-F1" orientation="portrait" position="float">
      <label>Fig. 1.</label>
      <caption>
        <p>Summary of our work. (<bold>A</bold>) Secondary structure representations of <italic>E.coli</italic> tRNA<sup><italic>Gly</italic></sup>; (<bold>B</bold>) the corresponding dot-bracket format and an illustration of our algorithm, which scans the sequence left-to-right, and tags each nucleotide as ‘.’ (unpaired), ‘(’ (to be paired with a future nucleotide) or ‘)’ (paired with a previous nucleotide). (<bold>C</bold>) Comparison between our work and existing ones. <italic>L</italic> is the limit of pair distance in local folding methods (often ≤150), and <italic>b</italic> is the beam size in our work (default 100). Our algorithm, though approximate, is the first to achieve linear runtime without imposing constraints on the output structure</p>
      </caption>
      <graphic xlink:href="btz375f1"/>
    </fig>
    <p>As an alternative, faster algorithms that predict only a restricted subset of structures have been proposed. On the one hand, local folding methods such as Rfold (<xref rid="btz375-B26" ref-type="bibr">Kiryu <italic>et al.</italic>, 2008</xref>), Vienna RNAplfold (<xref rid="btz375-B6" ref-type="bibr">Bernhart <italic>et al.</italic>, 2006</xref>) and LocalFold (<xref rid="btz375-B28" ref-type="bibr">Lange <italic>et al.</italic>, 2012</xref>) run in linear time but only predict base pairs up to <italic>L</italic> nucleotides apart (<inline-formula id="IE1"><mml:math id="IM1"><mml:mrow><mml:mi>L</mml:mi><mml:mo>≤</mml:mo><mml:mn>150</mml:mn></mml:mrow></mml:math></inline-formula> in the literature; see <xref ref-type="fig" rid="btz375-F1">Fig. 1C</xref>). On the other hand, due to the prohibitive cubic runtime of standard methods, it has been a common practice to divide long RNA sequences into short segments (e.g. ≤700<italic>nt</italic>) and predict structures within each segment only (<xref rid="btz375-B3" ref-type="bibr">Andronescu <italic>et al.</italic>, 2007</xref>; <xref rid="btz375-B31" ref-type="bibr">Licon <italic>et al.</italic>, 2010</xref>; <xref rid="btz375-B55" ref-type="bibr">Watts <italic>et al.</italic>, 2009</xref>). All these local methods omit long-range base pairs, which theoretical and experimental studies have demonstrated to be common in natural RNAs, especially between the 5′ and 3′ ends (<xref rid="btz375-B27" ref-type="bibr">Lai <italic>et al.</italic>, 2018</xref>; <xref rid="btz375-B30" ref-type="bibr">Li and Reidys, 2018</xref>; <xref rid="btz375-B46" ref-type="bibr">Seetin and Mathews, 2012</xref>).</p>
    <p>We instead design <italic>LinearFold</italic>, an approximate algorithm that is the first in RNA folding to achieve linear runtime (and linear space) without imposing constraints on the output structure such as base pair distance. While the classical <italic>O</italic>(<italic>n</italic><sup>3</sup>)-time algorithm is bottom-up, making it hard to linearize, ours runs left-to-right (i.e. 5′-to-3′), incrementally tagging each nucleotide in the dot-bracket format (<xref ref-type="fig" rid="btz375-F1">Fig. 1B</xref>). While this naive version runs in the exponential time of <italic>O</italic>(3<sup><italic>n</italic></sup>), we borrow an efficient packing idea from computational linguistic (<xref rid="btz375-B51" ref-type="bibr">Tomita, 1988</xref>) that reduces the runtime back to <italic>O</italic>(<italic>n</italic><sup>3</sup>). This novel left-to-right <italic>O</italic>(<italic>n</italic><sup>3</sup>) dynamic program is also a contribution of this article. Furthermore, on top of this exact algorithm, we apply beam search, a popular heuristic to prune the search space (<xref rid="btz375-B22" ref-type="bibr">Huang and Sagae, 2010</xref>), which keeps only the top <italic>b</italic> highest-scoring (or lowest energy) states for each prefix of the input sequence, resulting in an <inline-formula id="IE2"><mml:math id="IM2"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="italic">nb</mml:mi><mml:mo> </mml:mo><mml:mtext>log</mml:mtext><mml:mo> </mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> time approximate search algorithm, where <italic>b</italic> is the beam size chosen by the user.</p>
    <p>Our approach can ‘linearize’ any dynamic programming-based pseudoknot-free RNA folding system. In particular, we demonstrate two versions of LinearFold, LinearFold-V using the thermodynamic free energy model (<xref rid="btz375-B36" ref-type="bibr">Mathews <italic>et al.</italic>, 2004</xref>) from Vienna RNAfold (<xref rid="btz375-B32" ref-type="bibr">Lorenz <italic>et al.</italic>, 2011</xref>), and LinearFold-C using the machine learned model from CONTRAfold (<xref rid="btz375-B12" ref-type="bibr">Do <italic>et al.</italic>, 2006</xref>). We evaluate our systems on a diverse dataset of RNA sequences with well-established structures, and show that while being substantially more efficient, LinearFold leads to even higher average accuracies over all families, and more interestingly, LinearFold is significantly more accurate than the exact search methods on the longest families, 16S and 23S Ribosomal RNAs. In addition, LinearFold is also more accurate on long-range base pairs, which is well known to be a challenging problem for the current models (<xref rid="btz375-B2" ref-type="bibr">Amman <italic>et al.</italic>, 2013</xref>).</p>
    <p>Finally, our work establishes a new connection among computational linguistics, compiler theory and RNA folding (see <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. SI 7</xref>).</p>
  </sec>
  <sec>
    <title>2 The LinearFold algorithm</title>
    <sec>
      <title>2.1 Problem formulation</title>
      <p>Given an RNA sequence <inline-formula id="IE3"><mml:math id="IM3"><mml:mrow><mml:mi mathvariant="bold">x</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo>…</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, where each <inline-formula id="IE4"><mml:math id="IM4"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mo stretchy="true">{</mml:mo><mml:mi mathvariant="bold">A</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">C</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">G</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">U</mml:mi><mml:mo stretchy="true">}</mml:mo></mml:mrow></mml:math></inline-formula>, the secondary structure prediction problem aims to find the best-scoring pseudoknot-free structure <inline-formula id="IE5"><mml:math id="IM5"><mml:mrow><mml:mover accent="true"><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">^</mml:mo></mml:mover></mml:mrow></mml:math></inline-formula> by maximizing a scoring function <inline-formula id="IE6"><mml:math id="IM6"><mml:mrow><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> (e.g. model score or negative free energy) where <bold>w</bold> are the model parameters:
<disp-formula id="E1"><label>(1)</label><mml:math id="M1"><mml:mrow><mml:mover accent="true"><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">^</mml:mo></mml:mover><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mi mathvariant="bold">a</mml:mi><mml:mi mathvariant="bold">rgmax</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="script">Y</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:munder><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula>
Here <inline-formula id="IE7"><mml:math id="IM7"><mml:mrow><mml:mi mathvariant="script">Y</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> is the set of all possible pseudoknot-free secondary structures for input <bold>x</bold> of length <italic>n</italic><disp-formula id="E2"><mml:math id="M2"><mml:mrow><mml:mo stretchy="true">{</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo stretchy="true">{</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="true">}</mml:mo></mml:mrow></mml:mrow><mml:mi>n</mml:mi></mml:msup><mml:mo>∣</mml:mo><mml:mtext>balanced</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo><mml:mtext>valid</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo>,</mml:mo><mml:mtext>pairs</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo><mml:mo stretchy="true">)</mml:mo><mml:mo stretchy="true">}</mml:mo></mml:mrow></mml:math></disp-formula>
where <inline-formula id="IE8"><mml:math id="IM8"><mml:mrow><mml:mtext>balanced</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> checks if <bold><italic>y</italic></bold> has balanced brackets, <inline-formula id="IE9"><mml:math id="IM9"><mml:mrow><mml:mtext>valid</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo>,</mml:mo><mml:mtext>pairs</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> checks if all pairs in <bold><italic>y</italic></bold> are valid (CG, AU, GU), and <inline-formula id="IE10"><mml:math id="IM10"><mml:mrow><mml:mtext>pairs</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> returns the set of (<italic>i</italic>, <italic>j</italic>) pairs where <italic>x<sub>i</sub></italic> and <italic>x<sub>j</sub></italic> form a base pair in <bold><italic>y</italic></bold>, e.g. <inline-formula id="IE11"><mml:math id="IM11"><mml:mrow><mml:mtext>pairs</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mo>‘</mml:mo><mml:mo>‘</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>.</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>’</mml:mo><mml:mo>’</mml:mo><mml:mo stretchy="true">)</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="true">{</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>5</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="true">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="true">)</mml:mo><mml:mo stretchy="true">}</mml:mo></mml:mrow></mml:math></inline-formula>. See <xref ref-type="supplementary-material" rid="sup1">Supplementary section A</xref> for detailed definitions.</p>
      <p>All dynamic programming-based prediction algorithms, including ours, require the scoring function <inline-formula id="IE12"><mml:math id="IM12"><mml:mrow><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo>,</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> to <italic>decompose</italic> to smaller structures. For simplicity of presentation, in the main text we will use a very simple decomposition to individual pairs and unpaired nucleotides:
<disp-formula id="E3"><label>(2)</label><mml:math id="M3"><mml:mrow><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo><mml:mo>=</mml:mo><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="true">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="true">)</mml:mo><mml:mo>∈</mml:mo><mml:mtext>pairs</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:munder><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>+</mml:mo><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mtext>unpaired</mml:mtext><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:munder><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mtext>unpaired</mml:mtext></mml:mrow></mml:msub></mml:mrow></mml:math></disp-formula>
In this framework, we can assign different scores for different pairs, and incur a penalty for each unpaired nucleotide. For the example in <xref ref-type="fig" rid="btz375-F2">Figure 2</xref>, we simply set <inline-formula id="IE13"><mml:math id="IM13"><mml:mrow><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mtext>CG</mml:mtext></mml:mrow></mml:msub><mml:mo>​</mml:mo><mml:mo>=</mml:mo><mml:mo>​</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mtext>AU</mml:mtext></mml:mrow></mml:msub><mml:mo>​</mml:mo><mml:mo>=</mml:mo><mml:mo>​</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mtext>GU</mml:mtext></mml:mrow></mml:msub><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>=</mml:mo><mml:mo>​</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE14"><mml:math id="IM14"><mml:mrow><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mtext>unpaired</mml:mtext></mml:mrow></mml:msub><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>=</mml:mo><mml:mo>​</mml:mo><mml:mo>−</mml:mo><mml:mn>0.1</mml:mn></mml:mrow></mml:math></inline-formula>; therefore, <inline-formula id="IE15"><mml:math id="IM15"><mml:mrow><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:mo>‘</mml:mo><mml:mo>‘</mml:mo><mml:mtext>CCAGG</mml:mtext><mml:mo>’</mml:mo><mml:mo>’</mml:mo><mml:mo>,</mml:mo><mml:mo>‘</mml:mo><mml:mo>‘</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>.</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>’</mml:mo><mml:mo>’</mml:mo><mml:mo stretchy="true">)</mml:mo><mml:mo>​</mml:mo><mml:mo>=</mml:mo><mml:mo>​</mml:mo><mml:mn>2</mml:mn><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mtext>CG</mml:mtext></mml:mrow></mml:msub><mml:mo>​</mml:mo><mml:mo>+</mml:mo><mml:mo>​</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mtext>unpaired</mml:mtext></mml:mrow></mml:msub><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>=</mml:mo><mml:mo>​</mml:mo><mml:mn>1.9</mml:mn></mml:mrow></mml:math></inline-formula>.
</p>
      <fig id="btz375-F2" orientation="portrait" position="float">
        <label>Fig. 2.</label>
        <caption>
          <p>Illustration of the LinearFold approach, using a short sequence CCAGG and the simple scoring function (<xref ref-type="disp-formula" rid="E3">Eq. 2</xref>). (<bold>A</bold>) An example state and an example (actually optimal) path, showing states (predicted prefix structures), actions (<inline-formula id="IE16"><mml:math id="IM16"><mml:mrow><mml:mi mathvariant="italic">push</mml:mi></mml:mrow></mml:math></inline-formula> ‘(’, <inline-formula id="IE17"><mml:math id="IM17"><mml:mrow><mml:mi mathvariant="italic">skip</mml:mi></mml:mrow></mml:math></inline-formula> ‘.’, and <inline-formula id="IE18"><mml:math id="IM18"><mml:mrow><mml:mi mathvariant="italic">pop</mml:mi></mml:mrow></mml:math></inline-formula> ‘)’), and stacks (unpaired open brackets, which are shown in bold in states). (<bold>B</bold>) Two example paths (the optimal one in blue and a suboptimal one in green) and two essential ideas of left-to-right dynamic programming: merging equivalent states with identical stacks (Idea 1) and packing temporarily equivalent states sharing the same stack top, and corresponding unpacking upon <inline-formula id="IE19"><mml:math id="IM19"><mml:mrow><mml:mi mathvariant="italic">pop</mml:mi></mml:mrow></mml:math></inline-formula> (Idea 2). (<bold>C</bold>) Illustration of beam search, which keeps top <italic>b</italic> states (those in the shaded region) per step (Idea 3). (<bold>D</bold>) The whole search space of the naive algorithm (<italic>O</italic>(3<sup><italic>n</italic></sup>) time). (<bold>E</bold>) Improving to <italic>O</italic>(2<sup><italic>n</italic></sup>) time with Idea 1. (<bold>F</bold>) Further improving to <italic>O</italic>(<italic>n</italic><sup>3</sup>) time with Idea 2. (<bold>G</bold>) Further improving to <italic>O</italic>(<italic>n</italic>) time (but with approximate search) with Idea 3. In B, F, and G, each green/blue arrow pair ?<bold>(</bold><inline-graphic xlink:href="btz375ilf9.jpg"/>?<bold>(.</bold> is actually a single arrow, denoting two paths temporarily packed as one; we draw paired arrows to highlight that two states <bold>.(</bold> and <bold>((</bold> are performing <inline-formula id="IE21"><mml:math id="IM20"><mml:mrow><mml:mi mathvariant="italic">skip</mml:mi></mml:mrow></mml:math></inline-formula> action together. Note the version up to Idea 2 is exact and worst-case <italic>O</italic>(<italic>n</italic><sup>3</sup>) time</p>
        </caption>
        <graphic xlink:href="btz375f2"/>
      </fig>
      <p>In reality, however, the actual scoring functions used by CONTRAfold, RNAfold, and our LinearFold are much more complex, and they decompose into individual loops. See <xref ref-type="supplementary-material" rid="sup1">Supplementary section B</xref> for details.</p>
    </sec>
    <sec>
      <title>2.2 Idea 0: Brute-force search: <italic>O</italic>(3<sup><italic>n</italic></sup>)</title>
      <p>The initial idea, introduced in <xref ref-type="fig" rid="btz375-F1">Figure 1B</xref>, is to scan the RNA sequence left-to-right, maintaining a <italic>stack</italic> along the way, and performing one of the three actions (push, skip or pop) at each step. More formally, we denote each <italic>state</italic> at step <italic>j</italic> (<italic>j </italic>=<italic> </italic>0…<italic>n</italic>) as a tuple along with a score <italic>s</italic>:
<disp-formula id="E4"><mml:math id="M4"><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula>
where <bold><italic>y</italic></bold> is the (sub)structure for the prefix <inline-formula id="IE22"><mml:math id="IM21"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:mo>…</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, and <italic>σ</italic> is the stack consisting of unmatched opening bracket positions in <bold><italic>y</italic></bold>. For example, in Step 4, if <bold><italic>y</italic></bold> = ‘<bold>(</bold>(.)’, then <italic>σ</italic> = [1] and <italic>s </italic>=<italic> </italic>0.9 (see <xref ref-type="fig" rid="btz375-F2">Fig. 2A</xref>); note that we denote open brackets in bold. Each state at step <italic>j</italic> can transition into a subsequent state of step <italic>j </italic>+<italic> </italic>1, taking one of the three actions:
<list list-type="order"><list-item><p><inline-formula id="IE23"><mml:math id="IM22"><mml:mrow><mml:mi mathvariant="italic">push</mml:mi></mml:mrow></mml:math></inline-formula>: label <inline-formula id="IE24"><mml:math id="IM23"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> as ‘(’ for it to be paired with a downstream nucleotide, and pushing <italic>j</italic> + 1 on to the stack, notated:
<disp-formula id="E8a"><mml:math id="M5"><mml:mrow><mml:mfrac><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>°</mml:mo><mml:mo> </mml:mo><mml:mo>‘</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>’</mml:mo><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>|</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:math></disp-formula></p></list-item><list-item><p><inline-formula id="IE25"><mml:math id="IM24"><mml:mrow><mml:mi mathvariant="italic">skip</mml:mi></mml:mrow></mml:math></inline-formula>: label <inline-formula id="IE26"><mml:math id="IM25"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> as ‘.’ (unpaired and skipped):
<disp-formula id="E8b"><mml:math id="M6"><mml:mrow><mml:mfrac><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>°</mml:mo><mml:mo>​</mml:mo><mml:mo> </mml:mo><mml:mo>‘</mml:mo><mml:mo/><mml:mo>.</mml:mo><mml:mo> </mml:mo><mml:mo>’</mml:mo><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mtext>unpaired</mml:mtext></mml:mrow></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:math></disp-formula></p></list-item><list-item><p><inline-formula id="IE27"><mml:math id="IM26"><mml:mrow><mml:mi mathvariant="italic">pop</mml:mi></mml:mrow></mml:math></inline-formula>: label <inline-formula id="IE28"><mml:math id="IM27"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> as ‘)’, paired with the upstream nucleotide <italic>x<sub>i</sub></italic> where <italic>i</italic> is the top of the stack, and pop <italic>i</italic> (if <inline-formula id="IE29"><mml:math id="IM28"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> pair is allowed):
<disp-formula id="E8c"><mml:math id="M7"><mml:mrow><mml:mfrac><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>|</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>°</mml:mo><mml:mo> </mml:mo><mml:mo>‘</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>’</mml:mo><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:math></disp-formula></p></list-item></list></p>
      <p>We start with the init state <inline-formula id="IE30"><mml:math id="IM29"><mml:mrow><mml:mo>〈</mml:mo><mml:mo>‘</mml:mo><mml:mo>’</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></inline-formula> and finish with any state <inline-formula id="IE31"><mml:math id="IM30"><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:math></inline-formula> with an empty stack (ensuring the output is a well-balanced dot-bracket sequence). See <xref ref-type="fig" rid="btz375-F2">Figure 2A</xref> for an example path for input sequence CCAGG, and <xref ref-type="fig" rid="btz375-F2">Figure 2D</xref> for all valid paths.</p>
      <p>The above procedure describes a naive exhaustive search without dynamic programming which has exponential runtime <italic>O</italic>(3<sup><italic>n</italic></sup>), as there are up to three actions per step (see <xref ref-type="fig" rid="btz375-F2">Fig. 2D</xref>).</p>
      <p>Next, <xref ref-type="fig" rid="btz375-F2">Figure 2B</xref> sketches the two key dynamic programming ideas that speed up this algorithm to <italic>O</italic>(<italic>n</italic><sup>3</sup>) by merging and packing states.</p>
    </sec>
    <sec>
      <title>2.3 Idea 1: merge states with identical stacks: <italic>O</italic>(2<sup><italic>n</italic></sup>)</title>
      <p>We first observe that different states can have the same stack; for example, in Step 5, both ‘.(.).’ and ‘((.))’ have the same empty stack (see <xref ref-type="fig" rid="btz375-F2">Fig. 2B</xref>, Idea 1); and in step 4, both ‘<bold>(</bold>…’ and ‘<bold>(</bold>(.)’ have the same stack [1] (see <xref ref-type="fig" rid="btz375-F2">Fig. 2D</xref>). These states can be merged, because even though they have different histories, going forward they are exactly equivalent. After merging we save the state with the highest score and discard all others which have no potential to lead to the optimal structure. More formally, we merge two states with the same stack:
<disp-formula id="E5"><mml:math id="M8"><mml:mrow><mml:mrow><mml:mrow><mml:mtable><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>′</mml:mo><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mi>s</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow><mml:mo>}</mml:mo></mml:mrow><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:mo>→</mml:mo><mml:mo>〈</mml:mo><mml:mo>σ</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>″</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>″</mml:mo><mml:mo>〉</mml:mo></mml:mrow></mml:math></disp-formula>
where
<disp-formula id="E6"><mml:math id="M9"><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>″</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>″</mml:mo><mml:mo>〉</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">{</mml:mo><mml:mrow><mml:mtable><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>〉</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mtext>if</mml:mtext><mml:mo> </mml:mo><mml:mi>s</mml:mi><mml:mo>&gt;</mml:mo><mml:mi>s</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>′</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>′</mml:mo><mml:mo>〉</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mtext>otherwise</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mrow></mml:mrow></mml:math></disp-formula>
This algorithm is faster but still has exponential <italic>O</italic>(2<sup><italic>n</italic></sup>) time as there are exponentially many different stacks (see <xref ref-type="fig" rid="btz375-F2">Fig. 2E</xref>).</p>
    </sec>
    <sec>
      <title>2.4 Idea 2: pack temporarily equivalent states: <italic>O</italic>(<italic>n</italic><sup>3</sup>)</title>
      <p>We further observe that even though some states have different stacks, they might share the same stack top. For example, in step 2, ‘.<bold>(</bold>’ and ‘<bold>((</bold>’ have [2] and [1, 2] as their stacks, resp., but with the same stack top 2. Our key insight is that two states with the same stack-top are ‘temporarily equivalent’ and can be ‘packed’ as they would behave equivalently until the stack-top open bracket is closed (i.e. matched), after which they ‘unpack’ and diverge. As shown in <xref ref-type="fig" rid="btz375-F2">Fig. 2B</xref> (Idea 2), both ‘.<bold>(</bold>’ and ‘<bold>((</bold>’ are looking for a ‘G’ to match with the stack top <italic>x</italic><sub>2</sub>=‘C’, and can be packed as ‘?<bold>(</bold>’ with stack […2] where ‘?’ and ‘…’ represent histories that are not important for now. After skipping the next nucleotide <italic>x</italic><sub>3</sub>=‘A’, they become ‘?<bold>(</bold>.’ and upon matching the next nucleotide <italic>x</italic><sub>4</sub>=‘G’ with the stack-top <italic>x</italic><sub>2</sub>=‘C’, they unpack, resulting in ‘.(.)’ and ‘<bold>(</bold>(.)’.</p>
      <p>More formally, two states <inline-formula id="IE32"><mml:math id="IM31"><mml:mrow><mml:mo>〈</mml:mo><mml:mo>σ</mml:mo><mml:mo>|</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>〉</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE33"><mml:math id="IM32"><mml:mrow><mml:mo>〈</mml:mo><mml:mo>σ</mml:mo><mml:mo>′</mml:mo><mml:mo>|</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>′</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>′</mml:mo><mml:mo>〉</mml:mo></mml:mrow></mml:math></inline-formula> sharing the same stack top can be packed:
<disp-formula id="E7"><mml:math id="M10"><mml:mrow><mml:mrow><mml:mrow><mml:mtable><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mo>〈</mml:mo><mml:mo>σ</mml:mo><mml:mo>|</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>〉</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mo>〈</mml:mo><mml:mo>σ</mml:mo><mml:mo>′</mml:mo><mml:mo>|</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>′</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>′</mml:mo><mml:mo>〉</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow><mml:mo>}</mml:mo></mml:mrow><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:mo>​</mml:mo><mml:mo>→</mml:mo><mml:mo>〈</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mo mathvariant="bold">(</mml:mo><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo>〉</mml:mo></mml:mrow></mml:math></disp-formula>
Note that (i) we only need two indices to index the packed state; (ii) we omit the ?’s since they contain no information; and (iii) somewhat counterintuitively, the resulting packed state’s (sub)structure and score, 〈<bold>(</bold>, 0〉 do not depend on the original states before packing. More formally, for any packed state <inline-formula id="IE35"><mml:math id="IM33"><mml:mrow><mml:mo>〈</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>〉</mml:mo></mml:mrow></mml:math></inline-formula>, its <bold>y</bold> is a substructure only for the substring <inline-formula id="IE36"><mml:math id="IM34"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>…</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, and its score <italic>s</italic> is also for that portion only, i.e. <inline-formula id="IE37"><mml:math id="IM35"><mml:mrow><mml:mi>s</mml:mi><mml:mo>=</mml:mo><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:mo>…</mml:mo><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>j</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. We can grow it by skip
<disp-formula id="E8"><mml:math id="M11"><mml:mrow><mml:mfrac><mml:mrow><mml:mo>〈</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>〉</mml:mo></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo> </mml:mo><mml:mo>°</mml:mo><mml:mo> </mml:mo><mml:mo>‘</mml:mo><mml:mo>.</mml:mo><mml:mo>’</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mrow><mml:mi mathvariant="normal">s</mml:mi><mml:mo>+</mml:mo><mml:mi mathvariant="normal">w</mml:mi></mml:mrow></mml:mrow><mml:mrow><mml:mtext>unpaired</mml:mtext></mml:mrow></mml:msub><mml:mo>〉</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:math></disp-formula>
or push actions
<disp-formula id="E9"><mml:math id="M12"><mml:mrow><mml:mfrac><mml:mrow><mml:mo>〈</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>〉</mml:mo></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold">(</mml:mi><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo>〉</mml:mo></mml:mrow></mml:mfrac><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula>
The pop action is more involved. If <italic>x<sub>i</sub></italic> and <inline-formula id="IE38"><mml:math id="IM36"><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> match, we pop <italic>i</italic>, but where can we find the ‘previous stack top’? It is <italic>not</italic> specified in the packed state. Therefore, we need to find a state <inline-formula id="IE39"><mml:math id="IM37"><mml:mrow><mml:mo>〈</mml:mo><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>′</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>′</mml:mo><mml:mo>〉</mml:mo></mml:mrow></mml:math></inline-formula> that combines with the current state:
<disp-formula id="E10"><mml:math id="M13"><mml:mrow><mml:mfrac><mml:mrow><mml:mo>〈</mml:mo><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>′</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>′</mml:mo><mml:mo>〉</mml:mo><mml:mo> </mml:mo><mml:mo>〈</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>〉</mml:mo></mml:mrow><mml:mrow><mml:mo>〈</mml:mo><mml:mi>k</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>〉</mml:mo><mml:mo>:</mml:mo><mml:mo>〈</mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo>′</mml:mo><mml:mo> </mml:mo><mml:mo>°</mml:mo><mml:mo> </mml:mo><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo> </mml:mo><mml:mo>°</mml:mo><mml:mo> </mml:mo><mml:mo> </mml:mo><mml:mo>‘</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>’</mml:mo><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo>′</mml:mo><mml:mo>+</mml:mo><mml:mi>s</mml:mi><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mrow><mml:mi>x</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>〉</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:math></disp-formula>
This version (see <xref ref-type="fig" rid="btz375-F2">Fig. 2F</xref>) runs in worst-case <italic>O</italic>(<italic>n</italic><sup>3</sup>) time, because the pop step involve three free indices. It guarantees to return the optimal-scoring structure. It is inspired by a well-established algorithm in natural language parsing (<xref rid="btz375-B22" ref-type="bibr">Huang and Sagae, 2010</xref>; <xref rid="btz375-B51" ref-type="bibr">Tomita, 1988</xref>); see <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure SI 7</xref>. Although this <italic>O</italic>(<italic>n</italic><sup>3</sup>) runtime is the same as those classical bottom-up ones, its unique left-to-right nature makes it amenable to <italic>O</italic>(<italic>n</italic>) beam search.</p>
    </sec>
    <sec>
      <title>2.5 Idea 3 (approximate search): beam pruning: <italic>O</italic>(<italic>n</italic>)</title>
      <p>We further employ beam pruning (<xref rid="btz375-B23" ref-type="bibr">Huang <italic>et al.</italic>, 2012</xref>), a popular heuristic widely used in computational linguistics, to reduce the complexity from <italic>O</italic>(<italic>n</italic><sup>3</sup>) to <italic>O</italic>(<italic>n</italic>), but with the cost of exact search. Basically, at each step <italic>j</italic>, we only keep the <italic>b</italic> top-scoring (lowest-energy) states and prune the other, less promising, ones (because they are less likely to be part of the optimal final structure). This results in an approximate search algorithm in <italic>O</italic>(<italic>nb</italic><sup>2</sup>) time, depicted in <xref ref-type="fig" rid="btz375-F2">Figure 2C and G</xref>. On top of beam search, we borrow <italic>k</italic>-best parsing (<xref rid="btz375-B21" ref-type="bibr">Huang and Chiang, 2005</xref>) to reduce the runtime to <inline-formula id="IE40"><mml:math id="IM38"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="italic">nb</mml:mi><mml:mo> </mml:mo><mml:mtext>log</mml:mtext><mml:mo> </mml:mo><mml:mi>b</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:math></inline-formula>. Here, the beam size <italic>b</italic> is a small constant (by default 100) so the overall runtime is linear in <italic>n</italic>. We will show that our approximate search achieves even higher overall accuracy than the classical exact search methods. The space complexity is <italic>O</italic>(<italic>nb</italic>). See <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure SI 6</xref> for the real system. There are two minor restrictions in our real system: the length of an interior loop is bounded by 30<italic>nt</italic> (a standard limit found in most existing RNA folding software such as CONTRAfold), so is the leftmost (5′-end) unpaired segment of a multiloop (new constraint). These conditions are valid for 37°C, and no violations were found in the ArchiveII dataset.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Results</title>
    <sec>
      <title>3.1 Efficiency and scalability</title>
      <p>We compare LinearFold’s efficiency with classical cubic-time algorithms represented by CONTRAfold (Version 2.02) and Vienna RNAfold (Version 2.4.10) (<ext-link ext-link-type="uri" xlink:href="http://contra.stanford.edu/">http://contra.stanford.edu/</ext-link> and <ext-link ext-link-type="uri" xlink:href="https://www.tbi.univie.ac.at/RNA/download/sourcecode/2_4_x/ViennaRNA-2.4.10.tar.gz">https://www.tbi.univie.ac.at/RNA/download/sourcecode/2_4_x/ViennaRNA-2.4.10.tar.gz</ext-link>). We use two datasets: (i) the ArchiveII dataset (<xref rid="btz375-B47" ref-type="bibr">Sloma and Mathews, 2016</xref>), a diverse set of RNA sequences with known structures (<ext-link ext-link-type="uri" xlink:href="http://rna.urmc.rochester.edu/pub/archiveII.tar.gz">http://rna.urmc.rochester.edu/pub/archiveII.tar.gz</ext-link>; we removed those sequences found in the S-Processed set, see <xref ref-type="supplementary-material" rid="sup1">Supplementary Table SI 1</xref> for details), and (ii) a sampled subset of RNAcentral (<xref rid="btz375-B50" ref-type="bibr">The RNAcentral Consortium, 2017</xref>) (<ext-link ext-link-type="uri" xlink:href="https://rnacentral.org/">https://rnacentral.org/</ext-link>), a comprehensive set of ncRNA sequences from many databases. While ArchiveII contains sequences of 3000<italic>nt</italic> or less, RNAcentral has many much longer ones, with the longest being 244 296<italic>nt</italic> (Homo Sapiens Transcript NONHSAT168677.1, from the NONCODE database (<xref rid="btz375-B59" ref-type="bibr">Zhao <italic>et al.</italic>, 2016</xref>)). We run all programs (compiled by GCC 4.9.0) on Linux, with 3.40GHz Intel Xeon E3-1231 CPU and 32G memory.</p>
      <p><xref ref-type="fig" rid="btz375-F3">Figure 3A</xref> shows that on the relatively short ArchiveII set, LinearFold’s runtime scales almost linearly with the sequence length, while the two baselines have superquadratic runtimes. On the much longer RNAcentral set, <xref ref-type="fig" rid="btz375-F3">Figure 3B</xref> shows strictly linear runtime for LinearFold and near-cubic runtimes for the baselines, which agrees with the asymptotic analyses and suggests that the minor deviations from the theoretical runtimes are due to the short sequence lengths in the ArchiveII set. For a sequence of ∼10 000<italic>nt</italic> (e.g. the HIV genome), LinearFold takes only 8 s, while the baselines take 4 min. For a sequence of 32 753<italic>nt</italic>, LinearFold takes 26 s, while CONTRAfold and RNAfold take 2 and 1.7 h, respectively.
</p>
      <fig id="btz375-F3" orientation="portrait" position="float">
        <label>Fig. 3.</label>
        <caption>
          <p>Efficiency and scalability of LinearFold. (<bold>A</bold>) Runtime comparisons on the ArchiveII dataset with the two baselines, CONTRAfold MFE and Vienna RNAfold. (<bold>B</bold>) Runtime comparisons on the RNAcentral dataset (log–log). (<bold>C</bold>) Memory usage comparisons (RNAcentral set, log–log). LinearFold uses <italic>O</italic>(<italic>n</italic>) time and memory, being substantially faster and slimmer than the <italic>O</italic>(<italic>n</italic><sup>3</sup>)-time, <italic>O</italic>(<italic>n</italic><sup>2</sup>)-space, baselines on long sequences</p>
        </caption>
        <graphic xlink:href="btz375f3"/>
      </fig>
      <p>In addition, LinearFold uses only <italic>O</italic>(<italic>n</italic>) memory (<xref ref-type="fig" rid="btz375-F3">Fig. 3C</xref>). The classical <italic>O</italic>(<italic>n</italic><sup>3</sup>)-time algorithm uses <italic>O</italic>(<italic>n</italic><sup>2</sup>) space, because it needs to solve the best-scoring substructure for each substring [<italic>i</italic>, <italic>j</italic>] bottom-up. LinearFold, in contrast, uses <italic>O</italic>(<italic>n</italic>) space thanks to left-to-right beam search, and is the first <italic>O</italic>(<italic>n</italic>)-space algorithm to be able to predict base pairs of unbounded distance. It is able to fold the longest sequence in RNAcentral (244 296<italic>nt</italic>) within 3 min, while neither CONTRAfold or RNAfold runs on anything longer than 32 767<italic>nt</italic> due to datastructure limitations. As a result, the sequence limit on our web server (10<sup>5</sup><italic>nt</italic>, see abstract) is 10× that of RNAfold web server (the previous largest), being by far the largest limit among all available servers (as of March 2019). The curve-fittings in <xref ref-type="fig" rid="btz375-F3">Figure 3</xref> were done log-log in gnuplot with <inline-formula id="IE41"><mml:math id="IM39"><mml:mrow><mml:mi>n</mml:mi><mml:mo>​</mml:mo><mml:mo>&gt;</mml:mo><mml:mo>​</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mn>10</mml:mn></mml:mrow></mml:mrow><mml:mn>3</mml:mn></mml:msup></mml:mrow></mml:math></inline-formula> in A, <inline-formula id="IE42"><mml:math id="IM40"><mml:mrow><mml:mi>n</mml:mi><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>&gt;</mml:mo><mml:mo>​</mml:mo><mml:mo> </mml:mo><mml:mn>3</mml:mn><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>×</mml:mo><mml:mo>​</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mn>10</mml:mn></mml:mrow></mml:mrow><mml:mn>3</mml:mn></mml:msup></mml:mrow></mml:math></inline-formula> in B, and <inline-formula id="IE43"><mml:math id="IM41"><mml:mrow><mml:mi>n</mml:mi><mml:mo>​</mml:mo><mml:mo>&gt;</mml:mo><mml:mo>​</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mn>10</mml:mn></mml:mrow></mml:mrow><mml:mn>4</mml:mn></mml:msup></mml:mrow></mml:math></inline-formula> in C, to focus on the asymptotics.</p>
    </sec>
    <sec>
      <title>3.2 Accuracy</title>
      <p>We next compare LinearFold with the two baselines in accuracy, reporting both positive predictive value (PPV, the fraction of predicted pairs in the known structure) and sensitivity (the fraction of known pairs predicted) on each RNA family in the ArchiveII dataset, allowing correctly predicted pairs to be offset by one position for one nucleotide as compared to the known structure (<xref rid="btz375-B47" ref-type="bibr">Sloma and Mathews, 2016</xref>); we also report exact match accuracies in <xref ref-type="supplementary-material" rid="sup1">Supplementary Table SI 2</xref>. We test statistical significance using a paired, one-sided permutation test, following (<xref rid="btz375-B1" ref-type="bibr">Aghaeepour and Hoos, 2013</xref>).</p>
      <p><xref ref-type="fig" rid="btz375-F4">Figure 4</xref> shows that LinearFold is more accurate than the baselines, and interestingly, this advantage is more pronunced on longer sequences. Individually, LinearFold-C (the LinearFold implementation of the CONTRAfold model) is significantly more accurate in sensitivity than CONTRAfold on one family (Group I Intron), and both PPV/sensitivity on two families (16S and 23S ribosomal RNAs), with the last two being the longest families in this dataset, where they have average lengths 1548<italic>nt</italic> and 2927<italic>nt</italic>, and enjoyed +3.56%/+3.09% and +8.65%/+5.66% (absolute) improvements in PPV/sensitivity, respectively. LinearFold-V (the LinearFold implementation of the Vienna RNAfold model) also outperforms RNAfold with significant improvements in PPV on two families (SRP and 16S rRNA), and both PPV/sensitivity on one family (Group I Intron). Overall (across all families), LinearFold-C outperforms CONTRAfold by +1.3%/+0.9% PPV/sensitivity, while LinearFold-V outperforms RNAfold by +0.3%/+0.2%. See <xref ref-type="supplementary-material" rid="sup1">Supplementary Table SI 1</xref> for details.
</p>
      <fig id="btz375-F4" orientation="portrait" position="float">
        <label>Fig. 4.</label>
        <caption>
          <p>Accuracy of LinearFold. (<bold>A</bold>) Each bar represents PPV/sensitivity averaged over all sequences in one family. Statistical significance is marked as <inline-formula id="IE44"><mml:math id="IM42"><mml:mrow><mml:mo>*</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>0.01</mml:mn><mml:mo>​</mml:mo><mml:mo>≤</mml:mo><mml:mo>​</mml:mo><mml:mi>P</mml:mi><mml:mo> </mml:mo><mml:mo>​</mml:mo><mml:mo>&lt;</mml:mo><mml:mo>​</mml:mo><mml:mn>0.05</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> or <inline-formula id="IE45"><mml:math id="IM43"><mml:mrow><mml:mo>*</mml:mo><mml:mo>*</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>P</mml:mi><mml:mo>​</mml:mo><mml:mo>&lt;</mml:mo><mml:mo>​</mml:mo><mml:mn>0.01</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. See Table 2 for details. (<bold>B</bold>) The overall accuracies, averaging over all families. (<bold>C</bold>) Each bar represents the overall PPV/sensitivity of all base pairs in a certain length range across all sequences. <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure SI 1</xref>. shows a similar result for LinearFold-V. Overall, LinearFold outperforms exact search baselines, especially on longer families and long-range pairs</p>
        </caption>
        <graphic xlink:href="btz375f4"/>
      </fig>
      <p>Long-range base pairs are notoriously difficult to predict under current models (<xref rid="btz375-B2" ref-type="bibr">Amman <italic>et al.</italic>, 2013</xref>). Interestingly, LinearFold is more accurate in both PPV and sensitivity than the exact search algorithm for long-range base pairs of nucleotides greater than 500 nucleotides apart, as shown in <xref ref-type="fig" rid="btz375-F4">Figure 4C</xref>. Combined with <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure SI 1</xref>, we conclude that LinearFold is more selective in predicting long-range base pairs (higher PPV), but nevertheless predicts <italic>more</italic> such pairs that are correct (higher Sensitivity). <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure SI 2B and C</xref> further shows that both LinearFold-C and LinearFold-V correct the severe overprediction of those long-range base pairs in exact search baselines.</p>
      <p>Interestingly, even though our algorithm scans 5′-to-3′, the accuracy does not degrade toward the 3′-end, shown in <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure SI 4</xref>.</p>
    </sec>
    <sec>
      <title>3.3 Search quality</title>
      <p>Above we used beam size 100. Now we investigate the impacts of varying beam size. We first study its impact on search quality. Since our search is approximate, we quantify the notion of <italic>search error</italic> (<xref rid="btz375-B22" ref-type="bibr">Huang and Sagae, 2010</xref>) as the difference in score or free energy between <inline-formula id="IE46"><mml:math id="IM44"><mml:mrow><mml:mover accent="true"><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">^</mml:mo></mml:mover></mml:mrow></mml:math></inline-formula>, the optimal structure returned by exact search, and <inline-formula id="IE47"><mml:math id="IM45"><mml:mrow><mml:mover accent="true"><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">¯</mml:mo></mml:mover></mml:mrow></mml:math></inline-formula>, the one found by our linear-time beam search, i.e.
<disp-formula id="E11"><mml:math id="M14"><mml:mrow><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo>,</mml:mo><mml:mrow><mml:mover accent="true"><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">^</mml:mo></mml:mover></mml:mrow><mml:mo stretchy="true">)</mml:mo><mml:mo>−</mml:mo><mml:mi>s</mml:mi><mml:msub><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mi mathvariant="bold">w</mml:mi></mml:msub><mml:mo stretchy="true">(</mml:mo><mml:mi mathvariant="bold">x</mml:mi><mml:mo>,</mml:mo><mml:mrow><mml:mover accent="true"><mml:mi mathvariant="bold-italic">y</mml:mi><mml:mo stretchy="true">¯</mml:mo></mml:mover></mml:mrow><mml:mo stretchy="true">)</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula>
The smaller this gap, the better the search quality. <xref ref-type="fig" rid="btz375-F5">Figure 5A</xref> shows that search error shrinks with beam size, quickly converging to 0 (exact search); <xref ref-type="fig" rid="btz375-F5">Figure 5B–C</xref> show that the search error (at <italic>b </italic>=<italic> </italic>100) grows linearly with sequence length, indicating that our search quality does not degrade with longer sequences (the average search error per nucleotide stays the same).
</p>
      <fig id="btz375-F5" orientation="portrait" position="float">
        <label>Fig. 5.</label>
        <caption>
          <p>Search error (model score gap or free energy gap ΔΔ<italic>G</italic>). (<bold>A</bold>) Average free energy gap (Vienna RNAfold vs. LinearFold-V) and model cost gap (CONTRAfold vs. LinearFold-C) with varying beam size; the search error shrinks with beam size, quickly converging to 0. (<bold>B</bold> and <bold>C</bold>) The search error (or gap) grows linearly with sequence length. Here, tmRNA is the outlier with disproportionally severe search errors, which can explain the slightly worse accuracies of LinearFold on tmRNA in <xref ref-type="fig" rid="btz375-F4">Figure 4A</xref>. See <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure SI 3</xref>. for a close-up on short sequences</p>
        </caption>
        <graphic xlink:href="btz375f5"/>
      </fig>
    </sec>
    <sec>
      <title>3.4 Impacts of beam size on prediction accuracy</title>
      <p><xref ref-type="fig" rid="btz375-F6">Figure 6A</xref> plots PPV and sensitivity as a function of beam size. LinearFold-C outperforms CONTRAfold MFE in both PPV and sensitivity with <inline-formula id="IE48"><mml:math id="IM46"><mml:mrow><mml:mi>b</mml:mi><mml:mo>≥</mml:mo></mml:mrow></mml:math></inline-formula> 75 and is stable with <inline-formula id="IE49"><mml:math id="IM47"><mml:mrow><mml:mi>b</mml:mi><mml:mo>∈</mml:mo><mml:mo stretchy="true">[</mml:mo><mml:mn>100</mml:mn><mml:mo>,</mml:mo><mml:mn>150</mml:mn><mml:mo stretchy="true">]</mml:mo></mml:mrow></mml:math></inline-formula>. <xref ref-type="fig" rid="btz375-F6">Figure 6B</xref> shows the tradeoff between PPV and sensitivity. Both PPV and sensitivity increase initially with beam size, culminating at <italic>b </italic>=<italic> </italic>120, and then decrease, converging to exact search. We do not tune the beam size on any dataset and use the round number of 100 as default. <xref ref-type="fig" rid="btz375-F6">Figure 6C–D</xref> shows a similar trend for LinearFold-V.
</p>
      <fig id="btz375-F6" orientation="portrait" position="float">
        <label>Fig. 6.</label>
        <caption>
          <p>Impacts of beam size on prediction accuracy. (<bold>A</bold> and <bold>C</bold>) PPV and sensitivity with varying beam size for LinearFold-C (A) and LinearFold-V (C); (<bold>B</bold> and <bold>D</bold>) PPV-sensitivity tradeoff for LinearFold-C (B) and LinearFold-V (D). Note that LinearFold with <italic>b</italic> = <italic>∞</italic> is exact search in <italic>O</italic>(<italic>n</italic><sup>3</sup>) time (Idea 2) and produces identical results to the baselines</p>
        </caption>
        <graphic xlink:href="btz375f6"/>
      </fig>
    </sec>
    <sec>
      <title>3.5 Example predictions: Group I intron, 16S &amp; 23S rRNAs</title>
      <p><xref ref-type="fig" rid="btz375-F7">Figure 7</xref> visualizes the predicted secondary structures from three RNA families: <italic>Cryptothallus mirabilis</italic> Group I Intron, <italic>Bacillus subtilis</italic> 16S rRNA and <italic>Escherichia coli</italic> 23S rRNA. We observe that LinearFold substantially reduces false positives (shown in red), especially on the CONTRAfold model. It also correctly predicts many (clusters of) long-range base pairs (true positives, shown in blue), e.g. in <italic>C.mirabilis</italic> Group I Intron with LinearFold-C (<xref ref-type="fig" rid="btz375-F7">Fig. 7D</xref>, pair distance 237<italic>nt</italic>), <italic>B.subtilis</italic> 16S rRNA with LinearFold-C (<xref ref-type="fig" rid="btz375-F7">Fig. 7E</xref>, pair distance 460<italic>nt</italic>), <italic>E.coli</italic> 23S rRNA with both LinearFold-C and LinearFold-V (<xref ref-type="fig" rid="btz375-F7">Fig. 7F and L</xref>, pair distance 582<italic>nt</italic>). This reconfirms LinearFold’s advantage in predicting long-range base pairs shown in <xref ref-type="fig" rid="btz375-F4">Figure 4C</xref>. Moreover, LinearFold is able to predict the longest 5′–3′ pairs, as shown in <italic>E. coli</italic> 23S rRNA with LinearFold-V (<xref ref-type="fig" rid="btz375-F7">Fig. 7L</xref>, pair distance 2901<italic>nt</italic>). In most cases (except LinearFold-V on <italic>B. subtilis</italic> 16S rRNA, <xref ref-type="fig" rid="btz375-F7">Fig. 7K</xref>), LinearFold improves substantially over the corresponding baselines. By contrast, local folding methods do not predict any long-range pairs, shown in <xref ref-type="fig" rid="btz375-F8">Fig. 8</xref>. We use <monospace>RNAfold –maxBPspan 150</monospace> for local folding, and this limit of 150 is the largest default limit in the local folding literature and softwares.
</p>
      <fig id="btz375-F7" orientation="portrait" position="float">
        <label>Fig. 7.</label>
        <caption>
          <p>Circular plots of the prediction results on three RNA sequences (from three different RNA families) comparing the baselines (A–C: CONTRAfold MFE; G–I: Vienna RNAfold) and our LinearFold (D–F: LinearFold-C; J–L: LinearFold-V). Correctly predicted base pairs are in blue (true positives), incorrectly predicted pairs in red (false positives) and missing true base pairs in light gray (false negatives). Each plot is clockwise from 5′ to 3′. We can observe that (i) our LinearFold greatly reduces the false positives, especially on CONTRAfold; (ii) our LinearFold correctly predicts many long-range pairs, e.g. LinearFold-C on all three sequences and LinearFold-V on <italic>E.coli</italic> 23S rRNA(L); (iii) our LinearFold is able to predict the longest 5′–3′ pairs, even with the beam size of 100, which is an order of magnitude smaller than the sequence lengths of 16S and 23S rRNAs. (iv) In almost all cases (except for LinearFold-V on <italic>B.subtilis</italic> 16S rRNA(K)), LinearFold substantially outperforms the corresponding baseline</p>
        </caption>
        <graphic xlink:href="btz375f7"/>
      </fig>
      <fig id="btz375-F8" orientation="portrait" position="float">
        <label>Fig. 8.</label>
        <caption>
          <p>Circular plots of prediction results using the local folding mode of Vienna RNAfold (which only predicts local pairs no more than 150<italic>nt</italic> apart) on the <italic>E.coli</italic> 23S rRNA (corresponding to <xref ref-type="fig" rid="btz375-F7"> Fig. 7I</xref>). Moreover, the <italic>O</italic>(<italic>nL</italic><sup>2</sup>)-time local folding (with default <italic>L </italic>=<italic> </italic>150) is twice as slow as the <inline-formula id="IE50"><mml:math id="IM48"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="italic">nb</mml:mi><mml:mo> </mml:mo><mml:mtext>log</mml:mtext><mml:mo> </mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>-time LinearFold-V (with default <italic>b </italic>=<italic> </italic>100)</p>
        </caption>
        <graphic xlink:href="btz375f8"/>
      </fig>
    </sec>
  </sec>
  <sec>
    <title>4 Discussion</title>
    <p>There are several reasons why our beam search algorithm, though approximate, outperforms the exact search baselines in terms of accuracy (esp. in 16S and 23S rRNAs and long-range base pairs).
<list list-type="order"><list-item><p>First, the scoring functions are imperfect, so it is totally possible for a suboptimal structure (in terms of model score or free energy) to be more accurate than the optimal-score structure. For example, it was well-studied that while the lowest free energy structure contains only 72.9% of the actual base pairs (given a dataset), a structure containing 86.1% of them can be found with a free energy within 4.8% of the optimal structure (<xref rid="btz375-B35" ref-type="bibr">Mathews <italic>et al.</italic>, 1999</xref>; <xref rid="btz375-B61" ref-type="bibr">Zuker <italic>et al.</italic>, 1991</xref>).</p></list-item><list-item><p>Secondly, the beam search algorithm prunes lower-scoring (sub)structures at each step, requiring the surviving (sub)structures and the final result to be highly scored for each prefix. Our results suggest that this extra constraint, like ‘regularization’, could compensate for the inaccuracy of the (physical or machine-learning) model, as LinearFold <italic>systematically</italic> picks a more accurate suboptimal structure without knowing the ground truth; indeed, this seemingly surprising phenomenon has been observed before in computational linguistics (<xref rid="btz375-B22" ref-type="bibr">Huang and Sagae, 2010</xref>) which inspired this work.</p></list-item><list-item><p>Finally, our LinearFold algorithm resembles cotranscriptional folding where RNA molecules start to fold immediately before being fully transcribed (<xref rid="btz375-B19" ref-type="bibr">Gultyaev <italic>et al.</italic>, 1995</xref>; <xref rid="btz375-B38" ref-type="bibr">Meyer and Miklós, 2004</xref>). This is analogous to psycholinguistic evidence that humans incrementally parse a sentence before it is fully read or heard (<xref rid="btz375-B14" ref-type="bibr">Frazier and Rayner, 1982</xref>). We hypothesize that some RNA sequences have evolved to fold co-transcriptionally (<xref rid="btz375-B38" ref-type="bibr">Meyer and Miklós, 2004</xref>), thus making our 5′-to-3′ incremental approach more accurate than bottom-up baselines. <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure SI 5B</xref> shows a slight preference for 5′-to-3′ order over 3′-to-5′.</p></list-item></list></p>
    <p>There are other algorithmic efforts to speed up RNA folding, including an <inline-formula id="IE51"><mml:math id="IM49"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="true">(</mml:mo><mml:msup><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mn>3</mml:mn></mml:msup><mml:mo>/</mml:mo><mml:mo> </mml:mo><mml:mtext>log</mml:mtext><mml:mo> </mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="true">)</mml:mo></mml:mrow></mml:math></inline-formula> algorithm using the Four-Russians method (<xref rid="btz375-B52" ref-type="bibr">Venkatachalam <italic>et al.</italic>, 2014</xref>), and two other sub-cubic algorithms inspired by fast matrix multiplication and context-free parsing (<xref rid="btz375-B7" ref-type="bibr">Bringmann <italic>et al.</italic>, 2016</xref>; <xref rid="btz375-B58" ref-type="bibr">Zakov <italic>et al.</italic>, 2011</xref>). We note that all of them are based on the classical cubic-time bottom-up algorithm, and thus orthogonal to our left-to-right approach. There also exists a linear-time algorithm (<xref rid="btz375-B41" ref-type="bibr">Rastegari and Condon, 2005</xref>) to analyze a <italic>given</italic> structure, but not to predict one <italic>de novo</italic>.</p>
  </sec>
  <sec>
    <title>5 Conclusion and future work</title>
    <p>We designed an <italic>O</italic>(<italic>n</italic>)-time, <italic>O</italic>(<italic>n</italic>)-space, approximate search algorithm, using incremental dynamic programming plus beam search, and apply this algorithm to both machine-learned and thermodynamic models. Besides the linearity in both time and memory (<xref ref-type="fig" rid="btz375-F3">Fig. 3</xref>), we also found:
<list list-type="order"><list-item><p>Though LinearFold uses only a fraction of time and memory compared with existing algorithms, our predicted structures are even more accurate overall in both PPV and sensitivity and on both machine-learned and thermodynamic models (see <xref ref-type="fig" rid="btz375-F4">Fig. 4</xref>).</p></list-item><list-item><p>The accuracy improvement of LinearFold is more pronunced on longer families such as 16S and 23S rRNAs (see <xref ref-type="fig" rid="btz375-F4">Figs 4 and 7</xref>).</p></list-item><list-item><p>LinearFold is also more accurate than the baselines at predicting long-range base pairs over 500<italic>nt</italic> apart (<xref ref-type="fig" rid="btz375-F4">Fig. 4C</xref>), which is well known to be challenging for the current models (<xref rid="btz375-B2" ref-type="bibr">Amman <italic>et al.</italic>, 2013</xref>).</p></list-item><list-item><p>Although the performance of LinearFold depends on the beam size <italic>b</italic>, the number of base pairs and the accuracy of prediction are stable when <italic>b</italic> is in the range of 100–200.</p></list-item></list></p>
    <p>There is a crucial difference between our LinearFold and local folding algorithms (<xref rid="btz375-B6" ref-type="bibr">Bernhart <italic>et al.</italic>, 2006</xref>; <xref rid="btz375-B26" ref-type="bibr">Kiryu <italic>et al.</italic>, 2008</xref>; <xref rid="btz375-B28" ref-type="bibr">Lange <italic>et al.</italic>, 2012</xref>) that can only predict pairs up to a certain distance. Theoretical and empirical studies found several evidences that <italic>unboundedly</italic> long-distance pairs are actually quite common in natural RNA structures: (i) the length of the longest base pair grows nearly linearly with sequence length <italic>n</italic> (<xref rid="btz375-B30" ref-type="bibr">Li and Reidys, 2018</xref>); (ii) the physical distance between the 5′–3′ ends in folded structures is short and nearly constant (<xref rid="btz375-B27" ref-type="bibr">Lai <italic>et al.</italic>, 2018</xref>; <xref rid="btz375-B29" ref-type="bibr">Leija-Martínez <italic>et al.</italic>, 2014</xref>; <xref rid="btz375-B56" ref-type="bibr">Yoffe <italic>et al.</italic>, 2011</xref>).</p>
    <p>Our work has several potential extensions.
<list list-type="order"><list-item><p>It is possible that LinearFold can be extended to calculate the partition function and base pair probabilities for natural RNA sequences with well-defined structures, since the classical method for that task, the <xref rid="btz375-B37" ref-type="bibr">McCaskill (1990)</xref> algorithm, is isomorphic in structure to the cubic-time algorithms that are used as baselines in this article.</p></list-item><list-item><p>This linear-time approach to calculate base pair probabilities should facilitate the linear-time identification of pseudoknots, by either replacing the cubic-time McCaskill algorithm with a linear-time one in those heuristic pseudoknot-prediction programs (<xref rid="btz375-B5" ref-type="bibr">Bellaousov and Mathews, 2010</xref>; <xref rid="btz375-B44" ref-type="bibr">Sato <italic>et al.</italic>, 2011</xref>), or linearizing a supercubic-time dynamic program for direct prediction with pseudoknots (<xref rid="btz375-B11" ref-type="bibr">Dirks and Pierce, 2003</xref>; <xref rid="btz375-B42" ref-type="bibr">Reeder and Giegerich, 2004</xref>).</p></list-item><list-item><p>We will test the hypothesis that our beams potentially capture cotranscriptional folding with empirical data on cotranscriptional folding (<xref rid="btz375-B54" ref-type="bibr">Watters <italic>et al.</italic>, 2016</xref>).</p></list-item><list-item><p>Being linear-time, LinearFold also facilitates faster parameter training than the cubic-time CONTRAfold using structured prediction methods (<xref rid="btz375-B23" ref-type="bibr">Huang <italic>et al.</italic>, 2012</xref>), and we envision a more accurate LinearFold using a model tailored to its own search.</p></list-item></list></p>
    <sec>
      <title>Author contributions</title>
      <p>L.H. conceived the idea and directed the project. L.H., D.D. and K.Z. designed algorithms. L.H. and D.D. wrote a Python prototype, and K.Z., D.D. and H.Z. wrote the fast C++ version. D.H.M. and D.H. guided the evaluation that H.Z. and D.D. carried out. L.H., D.D. and H.Z. wrote the manuscript; D.H.M. and D.H. revised it. K.L. made the webserver.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>btz375_Supplementary_Data</label>
      <media xlink:href="btz375_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We would like to thank the reviewers for suggestions, Rhiju Das for encouragement and early adoption of LinearFold into the EteRNA game, James Cross for help in algorithm design, Juneki Hong and Liang Zhang for proofreading.</p>
    <sec>
      <title>Funding</title>
      <p>This project was supported in part by National Science Foundation (IIS-1656051 and IIS-1817231 to L.H.), National Institutes of Health (R56 AG053460 and R21 AG052950 to D.H., and R01 GM076485 to D.H.M.).</p>
      <p><italic>Conflict of Interest</italic>: none declared.</p>
    </sec>
  </ack>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btz375-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Aghaeepour</surname><given-names>N.</given-names></name>, <name name-style="western"><surname>Hoos</surname><given-names>H.H.</given-names></name></person-group> (<year>2013</year>) 
<article-title>Ensemble-based prediction of RNA secondary structures</article-title>. <source>BMC Bioinformatics</source>, <volume>14</volume>, <fpage>1.</fpage><pub-id pub-id-type="pmid">23323762</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B2">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Amman</surname><given-names>F.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) <chapter-title>The trouble with long-range base pairs in RNA folding</chapter-title> In: Setubal,J.C. and Almeida,N.F. (eds) <source>Proceedings of the 8th Brazilian Symposium on Bioinformatics, BSB 2013, Recife, Brazil</source>, Lecture Notes in Bioinformatics (LNBI) 8213, pp. <fpage>1</fpage>–<lpage>11</lpage>, Springer International Publishing, Switzerland.</mixed-citation>
    </ref>
    <ref id="btz375-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Andronescu</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>2007</year>) 
<article-title>Efficient parameter estimation for RNA secondary structure prediction</article-title>. <source>Bioinformatics</source>, <volume>23</volume>, <fpage>i19</fpage>–<lpage>i28</lpage>.<pub-id pub-id-type="pmid">17646296</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Angelbello</surname><given-names>A.J.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Using genome sequence to enable the design of medicines and chemical probes</article-title>. <source>Chem. Rev</source>., <volume>118</volume>, <fpage>1599</fpage>–<lpage>1663</lpage>.<pub-id pub-id-type="pmid">29322778</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bellaousov</surname><given-names>S.</given-names></name>, <name name-style="western"><surname>Mathews</surname><given-names>D.H.</given-names></name></person-group> (<year>2010</year>) 
<article-title>Probknot: fast prediction of RNA secondary structure including pseudoknots</article-title>. <source>RNA</source>, <volume>16</volume>, <fpage>1870</fpage>–<lpage>1880</lpage>.<pub-id pub-id-type="pmid">20699301</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bernhart</surname><given-names>S.H.</given-names></name></person-group><etal>et al</etal> (<year>2006</year>) 
<article-title>Local RNA base pairing probabilities in large sequences</article-title>. <source>Bioinformatics</source>, <volume>22</volume>, <fpage>614</fpage>–<lpage>615</lpage>.<pub-id pub-id-type="pmid">16368769</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B7">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Bringmann</surname><given-names>K.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) Truly sub-cubic algorithms for language edit distance and RNA-folding via fast bounded-difference min-plus product. In: <italic>2016 IEEE 57th Annual Symposium on Foundations of Computer Science (FOCS) New Brunswick, NJ, USA,</italic> IEEE, pp. 375–384.</mixed-citation>
    </ref>
    <ref id="btz375-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Castanotto</surname><given-names>D.</given-names></name>, <name name-style="western"><surname>Rossi</surname><given-names>J.J.</given-names></name></person-group> (<year>2009</year>) 
<article-title>The promises and pitfalls of RNA-interference-based therapeutics</article-title>. <source>Nature</source>, <volume>457</volume>, <fpage>426</fpage>–<lpage>433</lpage>.<pub-id pub-id-type="pmid">19158789</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Childs-Disney</surname><given-names>J.L.</given-names></name></person-group><etal>et al</etal> (<year>2007</year>) 
<article-title>A small molecule microarray platform to select RNA internal loop-ligand interactions</article-title>. <source>ACS Chem. Biol</source>., <volume>2</volume>, <fpage>745</fpage>–<lpage>754</lpage>.<pub-id pub-id-type="pmid">17975888</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Crooke</surname><given-names>S.</given-names></name></person-group> (<year>2004</year>) 
<article-title>Antisense strategies</article-title>. <source>Curr. Mol. Med</source>., <volume>4</volume>, <fpage>465</fpage>–<lpage>487</lpage>.<pub-id pub-id-type="pmid">15267220</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Dirks</surname><given-names>R.M.</given-names></name>, <name name-style="western"><surname>Pierce</surname><given-names>N.A.</given-names></name></person-group> (<year>2003</year>) 
<article-title>A partition function algorithm for nucleic acid secondary structure including pseudoknots</article-title>. <source>J. Comput. Chem</source>., <volume>24</volume>, <fpage>1664</fpage>–<lpage>1677</lpage>.<pub-id pub-id-type="pmid">12926009</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Do</surname><given-names>C.</given-names></name></person-group><etal>et al</etal> (<year>2006</year>) 
<article-title>Contrafold: rNA secondary structure prediction without physics-based models</article-title>. <source>Bioinformatics</source>, <volume>22</volume>, <fpage>e90</fpage>–<lpage>e98</lpage>.<pub-id pub-id-type="pmid">16873527</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Eddy</surname><given-names>S.R.</given-names></name></person-group> (<year>2001</year>) 
<article-title>Non-coding RNA genes and the modern RNA world</article-title>. <source>Nat. Rev. Genet</source>., <volume>2</volume>, <fpage>919</fpage>–<lpage>929</lpage>.<pub-id pub-id-type="pmid">11733745</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Frazier</surname><given-names>L.</given-names></name>, <name name-style="western"><surname>Rayner</surname><given-names>K.</given-names></name></person-group> (<year>1982</year>) 
<article-title>Making and correcting errors during sentence comprehension: eye movements in the analysis of structurally ambiguous sentences</article-title>. <source>Cogn. Psychol</source>., <volume>14</volume>, <fpage>178</fpage>–<lpage>210</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Fu</surname><given-names>Y.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Discovery of novel ncRNA sequences in multiple genome alignments on the basis of conserved and stable secondary structures</article-title>. <source>PLoS One</source>, <volume>10</volume>, <fpage>e0130200.</fpage><pub-id pub-id-type="pmid">26075601</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gareiss</surname><given-names>P.C.</given-names></name></person-group><etal>et al</etal> (<year>2008</year>) 
<article-title>Dynamic combinatorial selection of molecules capable of inhibiting the (CUG) repeat RNA-MBNL1 interaction in vitro: discovery of lead compounds targeting myotonic dystrophy (DM1)</article-title>. <source>J. Am. Chem. Soc</source>., <volume>130</volume>, <fpage>16254</fpage>–<lpage>16261</lpage>.<pub-id pub-id-type="pmid">18998634</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gilbert</surname><given-names>W.</given-names></name></person-group> (<year>1986</year>) 
<article-title>Origin of life: the RNA world</article-title>. <source>Nature</source>, <volume>319</volume>, <fpage>618</fpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gruber</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2010</year>) 
<article-title>RNAz 2.0: improved noncoding RNA detection</article-title>. In: <source>Pacific Symposium on Biocomputing</source>. Vol. <volume>15</volume>, World Scientific Publishing Co Pte Ltd, pp. <fpage>69</fpage>–<lpage>79</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gultyaev</surname><given-names>A.P.</given-names></name></person-group><etal>et al</etal> (<year>1995</year>) 
<article-title>The computer simulation of RNA folding pathways using a genetic algorithm</article-title>. <source>J. Mol. Biol</source>., <volume>250</volume>, <fpage>37</fpage>–<lpage>51</lpage>.<pub-id pub-id-type="pmid">7541471</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hofacker</surname><given-names>I.L.</given-names></name>, <name name-style="western"><surname>Lorenz</surname><given-names>R.</given-names></name></person-group> (<year>2014</year>) Predicting RNA structure: advances and limitations. In: Waldsich,C. (ed.), <source>RNA Folding: Methods and Protocols. Methods in Molecular Biology 1086</source>, pp. <fpage>1</fpage>–<lpage>19</lpage>, Humana Press, Totowa, NJ, USA.</mixed-citation>
    </ref>
    <ref id="btz375-B21">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Huang</surname><given-names>L.</given-names></name>, <name name-style="western"><surname>Chiang</surname><given-names>D.</given-names></name></person-group> (<year>2005</year>) Better k-best Parsing. In: <italic>Proceedings of the Ninth International Workshop on Parsing Technologies (IWPT-2005)</italic>, Association for Computational Linguistics, pp. <fpage>53</fpage>–<lpage>64</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B22">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Huang</surname><given-names>L.</given-names></name>, <name name-style="western"><surname>Sagae</surname><given-names>K.</given-names></name></person-group> (<year>2010</year>) Dynamic programming for linear-time incremental parsing. In: <source>Proceedings of ACL. Uppsala, Sweden</source>. Association for Computational Linguistics, pp. <fpage>1077</fpage>–<lpage>1086</lpage></mixed-citation>
    </ref>
    <ref id="btz375-B23">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Huang</surname><given-names>L.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) Structured perceptron with inexact search. In: <italic>Proceedings of NAACL 2012</italic>, Association for Computational Linguistics, pp. <fpage>142</fpage>–<lpage>151</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Joyce</surname><given-names>G.F.</given-names></name></person-group> (<year>1994</year>) 
<article-title><italic>In vitro</italic> evolution of nucleic acids</article-title>. <source>Curr. Opin. Struct. Biol</source>., <volume>4</volume>, <fpage>331</fpage>–<lpage>336</lpage>.<pub-id pub-id-type="pmid">11539574</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B25">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Kasami</surname><given-names>T.</given-names></name></person-group> (<year>1965</year>) An efficient recognition and syntax analysis algorithm for context-free languages. <italic>Technical Report AFCRL-65-758</italic>. AFCRL.</mixed-citation>
    </ref>
    <ref id="btz375-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Kiryu</surname><given-names>H.</given-names></name></person-group><etal>et al</etal> (<year>2008</year>) 
<article-title>Rfold: an exact algorithm for computing local base pairing probabilities</article-title>. <source>Bioinformatics</source>, <volume>24</volume>, <fpage>367</fpage>–<lpage>373</lpage>.<pub-id pub-id-type="pmid">18056736</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lai</surname><given-names>W.-J.C.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>The formation of intramolecular secondary structure brings mRNA ends in close proximity</article-title>. <source>Nat. Commun</source>., <volume>9</volume>, <fpage>4328.</fpage><pub-id pub-id-type="pmid">30337527</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lange</surname><given-names>S.J.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>Global or local? predicting secondary structure and accessibility in mRNAs</article-title>. <source>Nucleic Acids Res</source>., <volume>40</volume>, <fpage>5215</fpage>–<lpage>5226</lpage>.<pub-id pub-id-type="pmid">22373926</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Leija-Martínez</surname><given-names>N.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>The separation between the 5’-3’ ends in long RNA molecules is short and nearly constant</article-title>. <source>Nucleic Acids Res</source>., <volume>42</volume>, <fpage>13963</fpage>–<lpage>13968</lpage>.<pub-id pub-id-type="pmid">25428360</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Li</surname><given-names>T.J.</given-names></name>, <name name-style="western"><surname>Reidys</surname><given-names>C.M.</given-names></name></person-group> (<year>2018</year>) 
<article-title>The rainbow spectrum of RNA secondary structures</article-title>. <source>Bull. Math. Biol</source>., <volume>80</volume>, <fpage>1514</fpage>–<lpage>1538</lpage>.<pub-id pub-id-type="pmid">29541998</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B31">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Licon</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2010</year>) A dynamic programming algorithm for finding the optimal segmentation of an RNA sequence in secondary structure predictions. In: <italic>2nd International Conference on Bioinformatics and Computational Biology.</italic> ACM, pp. <fpage>165</fpage>–<lpage>170</lpage></mixed-citation>
    </ref>
    <ref id="btz375-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lorenz</surname><given-names>R.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>ViennaRNA package 2.0</article-title>. <source>Algorithms Mol. Biol</source>., <volume>6</volume>, <fpage>1.</fpage><pub-id pub-id-type="pmid">21235792</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lu</surname><given-names>Z.J.</given-names></name>, <name name-style="western"><surname>Mathews</surname><given-names>D.H.</given-names></name></person-group> (<year>2008</year>) 
<article-title>Efficient siRNA selection using hybridization thermodynamics</article-title>. <source>Nucleic Acids Res</source>., <volume>36</volume>, <fpage>640</fpage>–<lpage>647</lpage>.<pub-id pub-id-type="pmid">18073195</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Mathews</surname><given-names>D.H.</given-names></name>, <name name-style="western"><surname>Turner</surname><given-names>D.H.</given-names></name></person-group> (<year>2006</year>) 
<article-title>Prediction of RNA secondary structure by free energy minimization</article-title>. <source>Curr. Opin. Struct. Biol</source>., <volume>16</volume>, <fpage>270</fpage>–<lpage>278</lpage>.<pub-id pub-id-type="pmid">16713706</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Mathews</surname><given-names>D.H.</given-names></name></person-group><etal>et al</etal> (<year>1999</year>) 
<article-title>Expanded sequence dependence of thermodynamic parameters improves prediction of RNA secondary structure</article-title>. <source>J. Mol. Biol</source>., <volume>288</volume>, <fpage>911</fpage>–<lpage>940</lpage>.<pub-id pub-id-type="pmid">10329189</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Mathews</surname><given-names>D.H.</given-names></name></person-group><etal>et al</etal> (<year>2004</year>) 
<article-title>Incorporating chemical modification constraints into a dynamic programming algorithm for prediction of RNA secondary structure</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>101</volume>, <fpage>7287</fpage>–<lpage>7292</lpage>.<pub-id pub-id-type="pmid">15123812</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B37">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>McCaskill</surname><given-names>J.S.</given-names></name></person-group> (<year>1990</year>) 
<article-title>The equilibrium partition function and base pair binding probabilities for RNA secondary structure</article-title>. <source>Biopolymers</source>, <volume>29</volume>, <fpage>1105</fpage>–<lpage>1119</lpage>.<pub-id pub-id-type="pmid">1695107</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B38">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Meyer</surname><given-names>I.M.</given-names></name>, <name name-style="western"><surname>Miklós</surname><given-names>I.</given-names></name></person-group> (<year>2004</year>) 
<article-title>Co-transcriptional folding is encoded within RNA genes</article-title>. <source>BMC Mol. Biol</source>., <volume>5</volume>, <fpage>10.</fpage><pub-id pub-id-type="pmid">15298702</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B39">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Nussinov</surname><given-names>R.</given-names></name></person-group><etal>et al</etal> (<year>1978</year>) 
<article-title>Algorithms for loop matchings</article-title>. <source>SIAM J. Appl. Math</source>., <volume>35</volume>, <fpage>68</fpage>–<lpage>82</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B40">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Palde</surname><given-names>P.B.</given-names></name></person-group><etal>et al</etal> (<year>2010</year>) 
<article-title>Strategies for recognition of stem-loop RNA structures by synthetic ligands: application to the HIV-1 frameshift stimulatory sequence</article-title>. <source>J. Med. Chem</source>., <volume>53</volume>, <fpage>6018</fpage>–<lpage>6027</lpage>.<pub-id pub-id-type="pmid">20672840</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B41">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Rastegari</surname><given-names>B.</given-names></name>, <name name-style="western"><surname>Condon</surname><given-names>A.</given-names></name></person-group> (<year>2005</year>). <chapter-title>Linear time algorithm for parsing RNA secondary structure</chapter-title> In: <source>International Workshop on Algorithms in Bioinformatics, Mallorca, Spain</source>. 
<publisher-name>Springer</publisher-name>, pp. <fpage>341</fpage>–<lpage>352</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B42">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Reeder</surname><given-names>J.</given-names></name>, <name name-style="western"><surname>Giegerich</surname><given-names>R.</given-names></name></person-group> (<year>2004</year>) 
<article-title>Design, implementation and evaluation of a practical pseudoknot folding algorithm based on thermodynamics</article-title>. <source>BMC Bioinformatics</source>, <volume>5</volume>, <fpage>1.</fpage><pub-id pub-id-type="pmid">14706121</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B43">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sato</surname><given-names>K.</given-names></name></person-group><etal>et al</etal> (<year>2009</year>) 
<article-title>Centroidfold: a web server for RNA secondary structure prediction</article-title>. <source>Nucleic Acids Res</source>., <volume>37</volume>, <fpage>W277</fpage>–<lpage>W280</lpage>.<pub-id pub-id-type="pmid">19435882</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B44">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sato</surname><given-names>K.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>Ipknot: fast and accurate prediction of RNA secondary structures with pseudoknots using integer programming</article-title>. <source>Bioinformatics</source>, <volume>27</volume>, <fpage>i85</fpage>–<lpage>i93</lpage>.<pub-id pub-id-type="pmid">21685106</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B45">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sazani</surname><given-names>P.</given-names></name></person-group><etal>et al</etal> (<year>2002</year>) 
<article-title>Systemically delivered antisense oligomers upregulate gene expression in mouse tissues</article-title>. <source>Nat. Biotechnol</source>., <volume>20</volume>, <fpage>1228</fpage>–<lpage>1233</lpage>.<pub-id pub-id-type="pmid">12426578</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B46">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Seetin</surname><given-names>M.G.</given-names></name>, <name name-style="western"><surname>Mathews</surname><given-names>D.H.</given-names></name></person-group> (<year>2012</year>) 
<article-title>RNA structure prediction: an overview of methods</article-title>. In: Keiler,K. (ed.) <source>Bacterial Regulatory RNA: Methods and Protocols</source>. Humana Press,Totowa, NJ, USA, pp. <fpage>99</fpage>–<lpage>122</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B47">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sloma</surname><given-names>M.</given-names></name>, <name name-style="western"><surname>Mathews</surname><given-names>D.</given-names></name></person-group> (<year>2016</year>) 
<article-title>Exact calculation of loop formation probability identifies folding motifs in RNA secondary structures</article-title>. <source>RNA</source>, <volume>22</volume>, <fpage>1808</fpage>–<lpage>1818.</lpage><pub-id pub-id-type="pmid">27852924</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B48">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Stephens</surname><given-names>Z.D.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Big data: astronomical or genomical?</article-title><source>PLoS Biol</source>., <volume>13</volume>, <fpage>e1002195.</fpage><pub-id pub-id-type="pmid">26151137</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B49">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Tafer</surname><given-names>H.</given-names></name></person-group><etal>et al</etal> (<year>2008</year>) 
<article-title>The impact of target site accessibility on the design of effective siRNAs</article-title>. <source>Nat. Biotechnol</source>., <volume>26</volume>, <fpage>578</fpage>–<lpage>583</lpage>.<pub-id pub-id-type="pmid">18438400</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B50">
      <mixed-citation publication-type="journal">The RNAcentral Consortium (<year>2017</year>) 
<article-title>RNAcentral: a comprehensive database of non-coding RNA sequences</article-title>. <source>Nucleic Acids Res</source>., <volume>45</volume>, <fpage>D128</fpage>–<lpage>D134</lpage>.<pub-id pub-id-type="pmid">27794554</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B51">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Tomita</surname><given-names>M.</given-names></name></person-group> (<year>1988</year>) Graph-structured stack and natural language parsing. In: <source>Proceedings of ACL</source>. Association for Computational Linguistics, pp. <fpage>249</fpage>–<lpage>257</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B52">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Venkatachalam</surname><given-names>B.</given-names></name></person-group><etal>et al</etal> (<year>2014</year>) 
<article-title>Faster algorithms for RNA-folding using Four-Russians method</article-title>. <source>Algorithms Mol. Biol</source>., <volume>9</volume>, <fpage>5.</fpage><pub-id pub-id-type="pmid">24602450</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B53">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Washietl</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>Computational analysis of noncoding RNAs</article-title>. <source>Wiley Interdiscip. Rev. RNA</source>, <volume>3</volume>, <fpage>759</fpage>–<lpage>778</lpage>.<pub-id pub-id-type="pmid">22991327</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B54">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Watters</surname><given-names>K.E.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Cotranscriptional folding of a riboswitch at nucleotide resolution</article-title>. <source>Nat. Struct. Mol. Biol</source>., <volume>23</volume>, <fpage>1124.</fpage><pub-id pub-id-type="pmid">27798597</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B55">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Watts</surname><given-names>J.M.</given-names></name></person-group><etal>et al</etal> (<year>2009</year>) 
<article-title>Architecture and secondary structure of an entire HIV-1 RNA genome</article-title>. <source>Nature</source>, <volume>460</volume>, <fpage>711</fpage>–<lpage>716</lpage>.<pub-id pub-id-type="pmid">19661910</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B56">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Yoffe</surname><given-names>A.M.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>The ends of a large RNA molecule are necessarily close</article-title>. <source>Nucleic Acids Res</source>., <volume>39</volume>, <fpage>292</fpage>–<lpage>299</lpage>.<pub-id pub-id-type="pmid">20810537</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B57">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Younger</surname><given-names>D.H.</given-names></name></person-group> (<year>1967</year>) 
<article-title>Recognition and parsing of context-free languages in time <italic>n</italic><sup>3</sup></article-title>. <source>Inf. Control</source>, <volume>10</volume>, <fpage>189</fpage>–<lpage>208</lpage>.</mixed-citation>
    </ref>
    <ref id="btz375-B58">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zakov</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>Reducing the worst case running times of a family of RNA and CFG problems, using valiant’s approach</article-title>. <source>Algorithms Mol. Biol</source>., <volume>6</volume>, <fpage>20.</fpage><pub-id pub-id-type="pmid">21851589</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B59">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zhao</surname><given-names>Y.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Noncode 2016: an informative and valuable data source of long non-coding RNAs</article-title>. <source>Nucleic Acids Res</source>., <volume>44</volume>, <fpage>D203</fpage>–<lpage>D208</lpage>.<pub-id pub-id-type="pmid">26586799</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B60">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zuker</surname><given-names>M.</given-names></name>, <name name-style="western"><surname>Stiegler</surname><given-names>P.</given-names></name></person-group> (<year>1981</year>) 
<article-title>Optimal computer folding of large RNA sequences using thermodynamics and auxiliary information</article-title>. <source>Nucleic Acids Res</source>., <volume>9</volume>, <fpage>133</fpage>–<lpage>148</lpage>.<pub-id pub-id-type="pmid">6163133</pub-id></mixed-citation>
    </ref>
    <ref id="btz375-B61">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Zuker</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>1991</year>) 
<article-title>A comparison of optimal and suboptimal RNA secondary structures predicted by free energy minimization with structures determined by phylogenetic comparison</article-title>. <source>Nucleic Acids Res</source>., <volume>19</volume>, <fpage>2707</fpage>–<lpage>2714</lpage>.<pub-id pub-id-type="pmid">1710343</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
