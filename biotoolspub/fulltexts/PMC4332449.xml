<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Genet</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Genet</journal-id>
    <journal-title-group>
      <journal-title>BMC Genetics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2156</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4332449</article-id>
    <article-id pub-id-type="pmid">25634328</article-id>
    <article-id pub-id-type="publisher-id">154</article-id>
    <article-id pub-id-type="doi">10.1186/s12863-014-0154-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Heuristic exploitation of genetic structure in marker-assisted gene pyramiding problems</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Beukelaer</surname>
          <given-names>Herman De</given-names>
        </name>
        <address>
          <email>Herman.DeBeukelaer@UGent.be</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Meyer</surname>
          <given-names>Geert De</given-names>
        </name>
        <address>
          <email>geert.demeyer@bayer.com</email>
        </address>
        <xref ref-type="aff" rid="Aff2"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Fack</surname>
          <given-names>Veerle</given-names>
        </name>
        <address>
          <email>Veerle.Fack@UGent.be</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><label/>Department of Applied Mathematics, Computer Science and Statistics, Ghent University, Krijgslaan 281 - S9, Gent, 9000 Belgium </aff>
      <aff id="Aff2"><label/>Bayer CropScience NV, Innovation Center, Technologiepark 38, Zwijnaarde, 9052 Belgium </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>30</day>
      <month>1</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>30</day>
      <month>1</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2015</year>
    </pub-date>
    <volume>16</volume>
    <elocation-id>2</elocation-id>
    <history>
      <date date-type="received">
        <day>19</day>
        <month>9</month>
        <year>2014</year>
      </date>
      <date date-type="accepted">
        <day>16</day>
        <month>12</month>
        <year>2014</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© De Beukelaer et al.; licensee BioMed Central. 2015</copyright-statement>
      <license license-type="open-access">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0">http://creativecommons.org/licenses/by/4.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly credited. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>Over the last decade genetic marker-based plant breeding strategies have gained increasing attention because genotyping technologies are no longer limiting. Now the challenge is to optimally use genetic markers in practical breeding schemes. For simple traits such as some disease resistances it is possible to target a fixed multi-locus allele configuration at a small number of causal or linked loci. Efficiently obtaining this genetic ideotype from a given set of parental genotypes is known as the marker-assisted gene pyramiding problem. Previous methods either imposed strong restrictions or used black box integer programming solutions, while this paper explores the power of an explicit heuristic approach that exploits the underlying genetic structure to prune the search space.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>Gene Stacker is introduced as a novel approach to marker-assisted gene pyramiding, combining an explicit directed acyclic graph model with a pruned generation algorithm inspired by a simple exhaustive search. Both exact and heuristic pruning criteria are applied to reduce the number of generated schedules. It is shown that this approach can effectively be used to obtain good solutions for stacking problems of varying complexity. For more complex problems, the heuristics allow to obtain valuable approximations. For smaller problems, fewer heuristics can be applied, resulting in an interesting quality-runtime tradeoff. Gene Stacker is competitive with previous methods and often finds better and/or additional solutions within reasonable time, because of the powerful heuristics.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>The proposed approach was confirmed to be feasible in combination with heuristics to cope with realistic, complex stacking problems. The inherent flexibility of this approach allows to easily address important breeding constraints so that the obtained schedules can be widely used in practice without major modifications. In addition, the ideas applied for Gene Stacker can be incorporated in and extended for a plant breeding context that e.g. also addresses complex quantitative traits or conservation of genetic background. Gene Stacker is freely available as open source software at <ext-link ext-link-type="uri" xlink:href="http://genestacker.ugent.be">http://genestacker.ugent.be</ext-link>. The website also provides documentation and examples of how to use Gene Stacker.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s12863-014-0154-z) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Plant breeding</kwd>
      <kwd>Marker-assisted gene pyramiding</kwd>
      <kwd>Multi-objective optimization</kwd>
      <kwd>Heuristics</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2015</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Over the last decade several genetic marker-based plant breeding strategies [<xref ref-type="bibr" rid="CR1">1</xref>] have been established and are increasingly used to develop better lines and hybrids. The approach taken depends on trait architecture. For simple traits such as some disease or pest resistances it is possible to tag a small number of causal or linked loci with genetic markers and exploit these by marker-assisted selection [<xref ref-type="bibr" rid="CR2">2</xref>]. More complex traits such as yield are better managed by thousands of genome-wide markers focusing on prediction [<xref ref-type="bibr" rid="CR3">3</xref>] rather than on causality of individual markers. At present, genotyping technologies are no longer limiting and the major challenge is to optimally use genetic markers in practical breeding schemes.</p>
    <p>Exploitation of genetic markers through crossing and selection is a combinatorial optimization problem in a genetic context. This problem has two distinct levels of objectives. For foreground markers that address simple traits, a fixed multi-locus allele configuration or genetic ideotype is targeted. Complex trait objectives managed by background markers require a more general optimization in a constrained space. At the same time, there is the need to deal with crop specific as well as practical constraints such as the expected amount of seeds obtained from a crossing, the number of generations, and the number of plants grown per generation. In all, the number of objectives and their diverse types make this a hard and complex problem that demands an explicit and modular optimization strategy.</p>
    <p>A logical first step is to develop an explicit framework to deal with the foreground markers. The objective is to design a crossing schedule that efficiently stacks a small number of favorable trait alleles (causal or tightly linked) present in a set of parental genotypes. This is known as the marker-assisted gene pyramiding or gene stacking problem. A crossing schedule consists of a number of generations in which plants are grown and screened to identify desired genotypes or targets. These targets are selected for crossings, generating offspring to be grown, genotyped and selected for use in the next generation, until the ideotype is obtained. An example with 3 parental genotypes is given in Figure <xref rid="Fig1" ref-type="fig">1</xref>. The number of possible crossing schedules grows exponentially with the number of loci and parental genotypes which makes the task of designing good schedules very challenging. With <italic>n</italic> loci, every single crossing may produce a vast amount of up to <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
						$\mathcal {O}(4^{n})$
					\end{document}</tex-math><mml:math id="M2"><mml:mi mathvariant="script">O</mml:mi><mml:mo>(</mml:mo><mml:msup><mml:mrow><mml:mn>4</mml:mn></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq1.gif"/></alternatives></inline-formula> possible offspring which are all candidates to be fixed as target genotypes in the next generation. There are two main aspects that define a crossing schedule: the target genotypes aimed for in each generation (selection problem) and the crossings to be performed with these selected targets (scheduling problem). Important properties of a crossing schedule are the number of generations (time) and the number of plants (cost) required to obtain the target genotypes in each generation. The latter is inversely proportional to the probability of observing these targets among the offspring.<fig id="Fig1"><label>Figure 1</label><caption><p><bold>General crossing schedule layout (example).</bold> In each generation, a number of plants are grown and screened for the desired target genotype(s). Crossings are then performed to provide new offspring to be grown, genotyped and selected for use in the next generation. All targets and crossings are fixed in advance. This example has 3 parental genotypes <bold>A</bold>, <bold>B</bold> and <bold>C</bold>. Initially, <bold>A</bold> and <bold>B</bold> are crossed to produce an intermediate target genotype <bold>D</bold>. In the next generation, <bold>D</bold> is crossed with parental genotype <bold>C</bold> to create the ideotype <bold>I</bold>.</p></caption><graphic xlink:href="12863_2014_154_Fig1_HTML" id="MO1"/></fig></p>
    <p>Previous research on this topic has mainly focused on providing general guidelines for plant breeders [<xref ref-type="bibr" rid="CR4">4</xref>,<xref ref-type="bibr" rid="CR5">5</xref>] while only few papers offer a systematic algorithmic approach. An initial method [<xref ref-type="bibr" rid="CR6">6</xref>] considered restricted parental genotypes and represented crossing schedules as binary trees. For each crossing, the progeny that inherits all favorable alleles from both parents is selected, i.e. the selection problem is not addressed. An exhaustive algorithm is applied to generate all possible crossing schedules by iteratively combining smaller schedules through additional crossings. Later, integer programming approaches were developed that optimize using general purpose solvers like CPLEX<sup>a</sup>. The first implementation [<xref ref-type="bibr" rid="CR7">7</xref>] performs a multi-objective optimization to fix desirable alleles while maintaining genetic variability at some remaining loci when possible. Only the selection problem is considered: each target allele in the ideotype is assigned an originating parental genotype and arbitrary minimum-depth binary trees are used to stack the genes according to this assignment. In a more powerful mixed integer programming (MIP) implementation [<xref ref-type="bibr" rid="CR8">8</xref>] crossing schedules are modeled as directed acyclic graphs (DAGs) that allow reuse of material. Both the selection and scheduling problem are considered and the model incorporates a constraint on the number of offspring generated from one crossing.</p>
    <p><bold>Our contribution:</bold> We introduce Gene Stacker as a novel approach to marker-assisted gene pyramiding, combining an explicit DAG model [<xref ref-type="bibr" rid="CR8">8</xref>] with a pruned generation algorithm inspired by a simple exhaustive search [<xref ref-type="bibr" rid="CR6">6</xref>]. We demonstrate that this works for small problems while more complex problems require supplementary heuristic pruning criteria that exploit the genetic structure to skip additional, well-chosen parts of the search space. The proposed heuristics provide an interesting quality-runtime tradeoff. This makes Gene stacker not only a flexible and performant tool for many practical problems but also a core module that can be extended to optimize for e.g. quantitative traits.</p>
  </sec>
  <sec id="Sec3" sec-type="methods">
    <title>Methods</title>
    <p>First, several definitions and formulas are stated and an extended DAG model is introduced. Then, the applied optimization strategy is described for which some exact and heuristic pruning criteria are proposed.</p>
    <sec id="Sec4">
      <title>Encoding of genotypes</title>
      <p>A diploid phase-known genotype <italic>G</italic>=(<italic>G</italic><sub>1</sub>,…,<italic>G</italic><sub><italic>k</italic></sub>) consists of an ordered sequence of <italic>k</italic>≥1 chromosomes, each represented by a 2×<italic>n</italic><sub><italic>i</italic></sub> matrix <italic>G</italic><sub><italic>i</italic></sub> of alleles. The rows <italic>G</italic><sub><italic>i</italic>,1</sub> and <italic>G</italic><sub><italic>i</italic>,2</sub> of matrix <italic>G</italic><sub><italic>i</italic></sub> are called haplotypes and each correspond to one of both homologous chromosomes. Note that interchanging the haplotypes (rows) of a chromosome <italic>G</italic><sub><italic>i</italic></sub>∈<italic>G</italic> yields the same genotype. The columns <italic>G</italic><sub><italic>i</italic></sub>(<italic>j</italic>),<italic>j</italic>=1,…,<italic>n</italic><sub><italic>i</italic></sub>, correspond to the considered loci in chromosome <italic>G</italic><sub><italic>i</italic></sub> and binary digits (0/1) indicate the absence or presence of specific alleles. At every locus 0≤<italic>j</italic>≤<italic>n</italic><sub><italic>i</italic></sub>−1 of chromosome <italic>G</italic><sub><italic>i</italic></sub> there are two alleles <italic>G</italic><sub><italic>i</italic>,1</sub>(<italic>j</italic>) and <italic>G</italic><sub><italic>i</italic>,2</sub>(<italic>j</italic>); this <italic>j</italic>th locus is homozygous if <italic>G</italic><sub><italic>i</italic>,1</sub>(<italic>j</italic>)=<italic>G</italic><sub><italic>i</italic>,2</sub>(<italic>j</italic>), else it is heterozygous. A genotype is said to be homozygous<sup>b</sup> if all considered loci in each chromosome are homozygous.</p>
    </sec>
    <sec id="Sec5">
      <title>Recombination rates</title>
      <p>When crossing two diploid genotypes <italic>P</italic> and <italic>Q</italic>, each parent produces a haploid gamete and fusion of these gametes yields the diploid genotype of the child. A gamete <italic>H</italic>=(<italic>H</italic><sub>1</sub>,…,<italic>H</italic><sub><italic>k</italic></sub>) produced by genotype <italic>P</italic>=(<italic>P</italic><sub>1</sub>,…,<italic>P</italic><sub><italic>k</italic></sub>) consists of a series of haploid chromosomes <italic>H</italic><sub><italic>i</italic></sub> which each comprise a single haplotype and which are each (independently) obtained from the respective diploid chromosome <italic>P</italic><sub><italic>i</italic></sub>. A diploid chromosome can yield a number of different haplotypes due to recombination of alleles (crossover events). The probability with which each possible haplotype is produced can be computed using the genetic map, from which the distance between any pair of loci on the same chromosome can be inferred. These distances are converted to crossover rates <italic>r</italic><sub><italic>i</italic>,<italic>p</italic>,<italic>q</italic></sub> corresponding to the probability that a crossover will occur between loci <italic>p</italic> and <italic>q</italic> on chromosome <italic>i</italic>, e.g. using Haldane’s mapping function [<xref ref-type="bibr" rid="CR9">9</xref>]. Then, the probability <italic>P</italic><italic>r</italic>[<italic>P</italic><sub><italic>i</italic></sub>,<italic>Q</italic><sub><italic>i</italic></sub>→<italic>G</italic><sub><italic>i</italic></sub>] that chromosomes <italic>P</italic><sub><italic>i</italic></sub> and <italic>Q</italic><sub><italic>i</italic></sub> will yield haplotypes which together form chromosome <italic>G</italic><sub><italic>i</italic></sub> is computed using formulas introduced in [<xref ref-type="bibr" rid="CR8">8</xref>] (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 1). As Gene Stacker explicitly models multiple chromosomes, the final probability <italic>P</italic><italic>r</italic>[<italic>P</italic>,<italic>Q</italic>→<italic>G</italic>] of producing the entire phase-known genotype <italic>G</italic> when crossing parents <italic>P</italic> and <italic>Q</italic> is computed by multiplying the chromosome probabilities: <disp-formula id="Equa"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
							 $$Pr[P,Q \rightarrow G] = \prod_{i=1}^{k} Pr[P_{i}, Q_{i} \rightarrow G_{i}]. $$ 
						\end{document}</tex-math><mml:math id="M4"><mml:mrow><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mi>G</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mo mathsize="big">∏</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:munderover><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>Q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>→</mml:mo><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>]</mml:mo><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equa.gif" position="anchor"/></alternatives></disp-formula></p>
    </sec>
    <sec id="Sec6">
      <title>Population size</title>
      <p>Each genotype among the possible outcome of a crossing is a candidate to be selected in the next generation. However, such target genotype can only be selected if it actually occurs among the offspring. Thus, a sufficient amount of offspring should be generated so that the targets are expected to be produced. Consider a crossing of genotypes <italic>P</italic> and <italic>Q</italic> and a target genotype <italic>G</italic> that is produced with probability <italic>ρ</italic>=<italic>P</italic><italic>r</italic>[<italic>P</italic>,<italic>Q</italic>→<italic>G</italic>]. Given a desired success rate <italic>γ</italic><sup>′</sup>, the corresponding population size <italic>N</italic>(<italic>ρ</italic>,<italic>γ</italic><sup>′</sup>) indicates the number of offspring that has to be generated so that the probability of obtaining at least one occurrence of <italic>G</italic> is at least <italic>γ</italic><sup>′</sup> [<xref ref-type="bibr" rid="CR6">6</xref>,<xref ref-type="bibr" rid="CR8">8</xref>]: <disp-formula id="Equ1"><label>(1)</label><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
							 $$ N(\rho, \gamma')=\left\{ \begin{aligned} &amp;\left\lceil\frac{\log{(1-\gamma')}}{\log{(1-\rho)}}\right\rceil\quad \text{if}\ \rho &lt; 1 \\ &amp;1 \qquad\qquad\qquad\quad \text{otherwise} \end{aligned}\right.   $$ 
						\end{document}</tex-math><mml:math id="M6"><mml:mi>N</mml:mi><mml:mo>(</mml:mo><mml:mi>ρ</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>γ</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mfenced close="" open="{" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mfenced close="⌉" open="⌈" separators=""><mml:mrow><mml:mfrac><mml:mrow><mml:mo>log</mml:mo><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:msup><mml:mrow><mml:mi>γ</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mo>log</mml:mo><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mi>ρ</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mfrac></mml:mrow></mml:mfenced><mml:mspace width="1em"/><mml:mtext>if</mml:mtext><mml:mspace width="1em"/><mml:mi>ρ</mml:mi><mml:mo>&lt;</mml:mo><mml:mn>1</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn><mml:mspace width="2em"/><mml:mspace width="2em"/><mml:mspace width="2em"/><mml:mspace width="1em"/><mml:mtext>otherwise</mml:mtext></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:math><graphic xlink:href="12863_2014_154_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula></p>
      <p>Gene Stacker ensures a global success rate <italic>γ</italic> (e.g. 95%) by setting a success rate <inline-formula id="IEq2"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
							$\gamma ' = \sqrt [n]{\gamma }$
						\end{document}</tex-math><mml:math id="M8"><mml:msup><mml:mrow><mml:mi>γ</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mroot><mml:mrow><mml:mi>γ</mml:mi></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:mroot></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq2.gif"/></alternatives></inline-formula> for each individual target, where <italic>n</italic> is the total number of targets obtained from crossings that can produce more than one possible child (i.e. crossings with uncertainty about the outcome). The total population size of a crossing schedule is equal to the sum of the population sizes required to obtain all target genotypes aimed for through the schedule and reflects the cost of the schedule. When several different genotypes or multiple occurrences of a specific genotype are targeted among offspring grown from a shared seed lot, it is possible to compute a (lower) joint population size expressing the number of offspring that has to be generated to simultaneously obtain all targets (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 2).</p>
    </sec>
    <sec id="Sec7">
      <title>Extended DAG model</title>
      <p>Gene Stacker models crossing schedules as directed acyclic graphs (DAGs) with three types of nodes: <list list-type="bullet"><list-item><p><italic>Seed lot nodes</italic>: represent seeds obtained from a crossing, modelling the probability distribution of all phase-known genotypes that may be produced. The source nodes of the graph are seed lot nodes from which the parental genotypes are grown. These initial seed lot nodes are assumed to be genetically uniform, i.e. they contain only one fixed phase-known genotype, and never to be depleted. Every internal seed lot node has a single crossing node as its parent. Edges leaving from a seed lot node are directed towards one or more plant nodes in any subsequent generation.</p></list-item><list-item><p><italic>Plant nodes</italic>: represent target genotypes aimed for among offspring grown from a specific seed lot. A plant node is labeled with its phase-known genotype and required population size (groups of plant nodes that are simultaneously obtained from the same seed lot are labeled with the required joint population size instead). If more than one occurrence of the respective genotype is targeted, the desired number of duplicates is indicated. Every plant node has a single seed lot node as its parent. Edges leaving from plant nodes lead to crossing nodes in the same generation.</p></list-item><list-item><p><italic>Crossing nodes</italic>: represent crossings with plants from the same generation, resulting in a seed lot available as from the next generation. A crossing node is labeled with the number of times that the crossing will be performed (if more than once). Every crossing node has two (not necessarily distinct) plant nodes as its parents. A single edge leaves from every crossing node to a seed lot node in the next generation.</p></list-item></list></p>
      <p>Figure <xref rid="Fig2" ref-type="fig">2</xref> shows a crossing schedule with 3 generations and a total population size of 1197. It is assumed here that every crossing provides about 250 seeds and that each plant can be crossed twice. Circular nodes represent seed lot nodes, rectangular nodes are plant nodes and diamonds are crossings. Nodes which are aligned at the same vertical level are part of the same generation. The source nodes cover the 0th generation, and each subsequent level of seed lot nodes starts the next generation. This model allows reuse of plants (within a generation) as well as remaining seeds (across generations) and is an extension of the original DAG model from [<xref ref-type="bibr" rid="CR8">8</xref>] which uses a single node type corresponding to Gene Stacker’s plant nodes.<fig id="Fig2"><label>Figure 2</label><caption><p><bold>Example crossing schedule.</bold> An example crossing schedule according to Gene Stacker’s DAG model, with 3 generations and a total population size of 1197 (sum of population sizes required to obtain all target genotypes, as indicated at the corresponding plant nodes). It is assumed that every crossing yields about 250 seeds and that each plant can be crossed twice (or selfed once). First, parental genotypes <bold>A</bold> and <bold>B</bold> are crossed. This crossing is performed twice to provide a sufficient amount of seeds to obtain the target genotype <bold>D</bold> among the offspring. Subsequently, <bold>D</bold> is crossed with the third parental genotype <bold>C</bold> and the latter is also crossed with itself (twice). To be able to perform each of these crossings, 3 duplicates of <bold>C</bold> are grown. Finally, <bold>E</bold> and <bold>F</bold> are crossed (twice) to produce the ideotype <bold>I</bold>.</p></caption><graphic xlink:href="12863_2014_154_Fig2_HTML" id="MO2"/></fig></p>
    </sec>
    <sec id="Sec8">
      <title>Linkage phase ambiguity</title>
      <p>Gene Stacker is entirely based on phase-known genotypes as this allows to infer the distribution of possible offspring from a crossing. However, in practice, the linkage phase of a genotype can not always be directly observed [<xref ref-type="bibr" rid="CR10">10</xref>]. Therefore, it is important to monitor the linkage phase ambiguity (LPA) which expresses the probability that a genotype will have an undesired linkage phase. The observed allelic frequencies of a genotype <italic>G</italic> are referred to as <inline-formula id="IEq3"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
							$\widetilde {G}$
						\end{document}</tex-math><mml:math id="M10"><mml:mover accent="false"><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>~</mml:mo></mml:mover></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq3.gif"/></alternatives></inline-formula>. When crossing genotypes <italic>P</italic> and <italic>Q</italic>, the probability <inline-formula id="IEq4"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
							$Pr[P,Q \rightarrow \widetilde {G}]$
						\end{document}</tex-math><mml:math id="M12"><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mover accent="false"><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>~</mml:mo></mml:mover><mml:mo>]</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq4.gif"/></alternatives></inline-formula> of obtaining any genotype with the same allelic frequencies as <italic>G</italic> is computed as follows: <disp-formula id="Equb"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
							 $$Pr[P,Q \rightarrow \widetilde{G}] = \sum_{G', \widetilde{G}' = \widetilde{G}} Pr[P,Q \rightarrow G']. $$ 
						\end{document}</tex-math><mml:math id="M14"><mml:mrow><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mover accent="false"><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>~</mml:mo></mml:mover><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:munder><mml:mrow><mml:mo mathsize="big">∑</mml:mo></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mover accent="false"><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>~</mml:mo></mml:mover></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>=</mml:mo><mml:mover accent="false"><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>~</mml:mo></mml:mover></mml:mrow></mml:munder><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>]</mml:mo><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equb.gif" position="anchor"/></alternatives></disp-formula></p>
      <p>Then, the linkage phase ambiguity of <italic>G</italic> is equal to <disp-formula id="Equc"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
							 $$LPA[P,Q \rightarrow G] = 1 - \frac{Pr[P,Q \rightarrow G]}{Pr[P,Q \rightarrow \widetilde{G}]}. $$ 
						\end{document}</tex-math><mml:math id="M16"><mml:mrow><mml:mtext mathvariant="italic">LPA</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mi>G</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mfrac><mml:mrow><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mi>G</mml:mi><mml:mo>]</mml:mo></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mover accent="false"><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mo>~</mml:mo></mml:mover><mml:mo>]</mml:mo></mml:mrow></mml:mfrac><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equc.gif" position="anchor"/></alternatives></disp-formula></p>
      <p>For target genotypes with non-zero linkage phase ambiguity, the inferred LPA is included in the label of the corresponding plant node. The overall LPA of a crossing schedule is defined as the probability that at least one target genotype aimed for through the schedule will have an undesired linkage phase, and can easily be computed from the individual ambiguities.</p>
    </sec>
    <sec id="Sec9">
      <title>Approximated Pareto frontier</title>
      <p>Gene Stacker approximates the <italic>Pareto frontier</italic> of crossing schedules with minimum number of generations, total population size and overall linkage phase ambiguity, possibly subject to a number of crop specific and practical constraints. Upper limits can be set for <list list-type="alpha-lower"><list-item><p>the number of generations (required);</p></list-item><list-item><p>the overall linkage phase ambiguity;</p></list-item><list-item><p>the total number of crossings;</p></list-item><list-item><p>the population size per generation; and</p></list-item><list-item><p>the number of crossings with each plant.</p></list-item></list></p>
      <p>Also, the expected number of seeds obtained from a crossing can be specified. The Pareto frontier contains all solutions within the constraints that are not dominated by any other valid solution, where <italic>C</italic><sup>′</sup> dominates <italic>C</italic> if it is at least as good for every objective and better for at least one objective. All non-dominated schedules are optimal in some sense as they provide tradeoffs with respect to the different objectives. The approximated Pareto frontier obtained by Gene Stacker contains all completed schedules for which no dominating other solution has been constructed.</p>
    </sec>
    <sec id="Sec10">
      <title>Algorithm</title>
      <p>Gene Stacker applies a (heuristically) pruned generation algorithm inspired by the exhaustive search strategy from [<xref ref-type="bibr" rid="CR6">6</xref>]. The search space is traversed as a tree by starting with the smallest possible schedules, i.e. those which simply grow one of the parental genotypes, and iteratively extending schedules through additional crossings. There are two types of extensions: (a) selfing the final plant of a schedule (i.e. crossing this plant with itself); or (b) combining two schedules through a crossing of the final plants of both schedules. Every phase-known genotype among the offspring is then considered to be fixed as the next target, which results in a (possibly large) number of extended schedules.</p>
      <p>When combining two schedules, their generations can be aligned or interleaved in different ways (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 3). Plant or seed lot nodes occurring in both schedules which are aligned in the same generation of the combined schedule are dynamically reused. Gene Stacker greedily discards non Pareto optimal alignments; therefore, the main algorithm is not exact. However, the impact of this greedy approach on the solution quality is expected to be very small; it mainly prevents the introduction of most likely redundant generations and favors alignments with the highest amount of reuse which leads to a reduced cost.</p>
      <p>If an extension yields a new schedule in which the ideotype is obtained, the Pareto frontier is updated accordingly. Else, the schedule is queued for further extension unless it is predicted that every completed extension will either be dominated by an already obtained solution or violate the constraints. Such pruning reduces the number of constructed schedules and therefore the runtime and memory footprint of the algorithm. Gene Stacker includes a number of heuristics that further reduce the search space by exploiting the underlying genetic structure to skip non promising branches of the search tree. Well-designed heuristics may result in large speedups with only a slightly higher probability of obtaining suboptimal solutions, which are often close to the optimum.</p>
      <p>The search terminates when there are no more schedules to be further extended. Termination is guaranteed because of a required constraint on the number of generations. A more detailed description of the algorithm is provided in the Additional file <xref rid="MOESM1" ref-type="media">1</xref> (Section 4).</p>
    </sec>
    <sec id="Sec11">
      <title>Exact pruning criteria</title>
      <p>Because the number of generations, total population size and overall linkage phase ambiguity are monotonically increasing, any partial schedule which is dominated by a previously obtained solution or which already violates the corresponding constraints may be discarded. In addition, some basic bounds are applied; for example, when combining two partial schedules, it is predicted whether this may yield a valid improvement over the current Pareto frontier approximation by inferring the minimum combined population size and linkage phase ambiguity from the set of non overlapping plant nodes and seed lot nodes occurring in both schedules. Also, the minimum increase in population size and ambiguity caused by targeting any genotype among the offspring of the performed crossing is taken into account. Although these are local bounds that predict the impact of a single extension, they often cause significant speedups as creating all extensions is a time consuming process.</p>
      <p>Constructed seed lots are filtered based on the constraints. Genotypes with higher linkage phase ambiguity than the maximum allowed overall ambiguity are removed. Also, if at most <italic>m</italic> plants per generation are allowed, a genotype <italic>G</italic> obtained from crossing <italic>P</italic> and <italic>Q</italic> is discarded if <disp-formula id="Equd"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
							 $$Pr[P,Q \rightarrow G] &lt; 1 - (1-\gamma')^{\frac{1}{m}}. $$ 
						\end{document}</tex-math><mml:math id="M18"><mml:mrow><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mi>G</mml:mi><mml:mo>]</mml:mo><mml:mo>&lt;</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:msup><mml:mrow><mml:mi>γ</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mfrac><mml:mrow><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:msup><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equd.gif" position="anchor"/></alternatives></disp-formula></p>
      <p>Given that at most <italic>g</italic> generations are allowed, Gene Stacker prunes a significant number of branches when creating schedules with <italic>g</italic>−1 or <italic>g</italic> generations. At generation <italic>g</italic>−1 only genotypes from which the ideotype can be obtained through a single crossing are considered as possible targets, i.e. genotypes that can produce one of both desired haplotypes for every chromosome of the ideotype. Furthermore, in this penultimate generation, only those crossings which can produce the complete ideotype are performed. Obviously, in the final generation <italic>g</italic>, only the ideotype itself is considered as a target. These pruning criteria are very effective and yield huge speedups in the final levels of the search tree.</p>
    </sec>
    <sec id="Sec12">
      <title>Heuristics</title>
      <p>Some heuristics are proposed that exploit the underlying genetic structure to further reduce the search space. Several of these heuristics are based on improvement of phase-known genotypes as compared to the ideotype. Improvement is expressed within a chromosome and a genotype is considered to be an improvement if at least one chromosome has improved. Gene Stacker uses two different improvement criteria: <italic>weak</italic> and <italic>strong</italic> improvement. First, the definitions of desired alleles and stretches are introduced.</p>
      <sec id="d30e1427">
        <title>Definition 1 (desired allele).</title>
        <p>Given a chromosome <italic>C</italic> with <italic>k</italic> loci, take any of both haplotypes <italic>H</italic> of <italic>C</italic>; then allele <italic>H</italic>(<italic>l</italic>), 0≤<italic>l</italic>≤<italic>k</italic>−1, is desired if the respective chromosome <italic>T</italic> from the ideotype contains a haplotype <italic>H</italic><sup>′</sup> with the same allele at locus <italic>l</italic>, i.e. <italic>H</italic>(<italic>l</italic>)=<italic>H</italic><sup>′</sup>(<italic>l</italic>).</p>
      </sec>
      <sec id="d30e1483">
        <title>Definition 2 (desired stretch).</title>
        <p>Given a chromosome <italic>C</italic> with <italic>k</italic> loci, take any of both haplotypes <italic>H</italic> of <italic>C</italic>; then the stretch <inline-formula id="IEq5"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,j}$
							\end{document}</tex-math><mml:math id="M20"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq5.gif"/></alternatives></inline-formula>, with 0≤<italic>i</italic>,<italic>j</italic>≤<italic>k</italic>−1, <italic>i</italic>≤<italic>j</italic>, is defined as the part of <italic>H</italic> comprising the consecutive alleles at loci <italic>i</italic>,<italic>i</italic>+1,…,<italic>j</italic>. The length of the stretch is denoted as <inline-formula id="IEq6"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$|S^{H}_{i,j}| = j-i+1$
							\end{document}</tex-math><mml:math id="M22"><mml:mo>|</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup><mml:mo>|</mml:mo><mml:mo>=</mml:mo><mml:mi>j</mml:mi><mml:mo>−</mml:mo><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq6.gif"/></alternatives></inline-formula>. Stretch <inline-formula id="IEq7"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,j}$
							\end{document}</tex-math><mml:math id="M24"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq7.gif"/></alternatives></inline-formula> is desired if the respective chromosome <italic>T</italic> from the ideotype contains a haplotype <italic>H</italic><sup>′</sup> for which ∀<italic>l</italic>,<italic>i</italic>≤<italic>l</italic>≤<italic>j</italic>,<italic>H</italic>(<italic>l</italic>)=<italic>H</italic><sup>′</sup>(<italic>l</italic>).</p>
        <p>The definition of weak improvement then follows:</p>
      </sec>
      <sec id="d30e1649">
        <title>Definition 3 (weak improvement).</title>
        <p>Given two chromosomes <italic>C</italic>,<italic>C</italic><sup>′</sup> and the ideotype <inline-graphic xlink:href="12863_2014_154_Figa_HTML.gif" id="d30e1663"/>, <italic>C</italic> is a weak improvement over <italic>C</italic><sup>′</sup>, denoted as <inline-formula id="IEq8"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$C \succ ^{\mathcal {I}}_{w} C'$
							\end{document}</tex-math><mml:math id="M26"><mml:mi>C</mml:mi><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup><mml:msup><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq8.gif"/></alternatives></inline-formula>, if either (a) one of both haplotypes <italic>H</italic> of <italic>C</italic> contains a desired stretch <inline-formula id="IEq9"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,j}$
							\end{document}</tex-math><mml:math id="M28"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq9.gif"/></alternatives></inline-formula> which is not present in any of both haplotypes of <italic>C</italic><sup>′</sup>; or (b) <italic>C</italic> homozygously contains a desired allele which does not occur in <italic>C</italic><sup>′</sup> in homozygous state.</p>
        <p>The first case favors the introduction of new or extended desired stretches and the second case rewards <italic>stabilization</italic> of desired alleles to prevent them from being lost during subsequent crossings. An alternative definition, of strong improvement, is stated below:</p>
      </sec>
      <sec id="d30e1748">
        <title>Definition 4 (strong improvement).</title>
        <p>Given any chromosome <italic>C</italic>, compute the set <italic>M</italic> containing all desired stretches <inline-formula id="IEq10"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,j}$
							\end{document}</tex-math><mml:math id="M30"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq10.gif"/></alternatives></inline-formula> occurring in any haplotype <italic>H</italic> that can be produced from <italic>C</italic> with at most 1 crossover. Then derive the tuple (<italic>l</italic><sub><italic>C</italic></sub>,<italic>p</italic><sub><italic>C</italic></sub>) defined by <disp-formula id="Eque"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$l_{C} = \max\{|S^{H}_{i,j}|; S^{H}_{i,j} \in M\} $$ 
							\end{document}</tex-math><mml:math id="M32"><mml:mrow><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>max</mml:mo><mml:mo>{</mml:mo><mml:mo>|</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:munderover><mml:mo>|</mml:mo><mml:mo>;</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:munderover><mml:mo>∈</mml:mo><mml:mi>M</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Eque.gif" position="anchor"/></alternatives></disp-formula> and <disp-formula id="Equf"><alternatives><tex-math id="M33">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$p_{C} = \max\{Pr[C \rightarrow S^{H}_{i,j}]; S^{H}_{i,j} \in M~\&amp;~|S^{H}_{i,j}| = l_{C}\} $$ 
							\end{document}</tex-math><mml:math id="M34"><mml:mrow><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mo>max</mml:mo><mml:mo>{</mml:mo><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>C</mml:mi><mml:mo>→</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:munderover><mml:mo>]</mml:mo><mml:mo>;</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:munderover><mml:mo>∈</mml:mo><mml:mi>M</mml:mi><mml:mo>&amp;</mml:mo><mml:mo>|</mml:mo><mml:munderover accent="false" accentunder="false"><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:munderover><mml:mo>|</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo>}</mml:mo></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equf.gif" position="anchor"/></alternatives></disp-formula> where <inline-formula id="IEq11"><alternatives><tex-math id="M35">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$Pr[C \rightarrow S^{H}_{i,j}]$
							\end{document}</tex-math><mml:math id="M36"><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>C</mml:mi><mml:mo>→</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup><mml:mo>]</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq11.gif"/></alternatives></inline-formula> is the probability that <italic>C</italic> will produce any haplotype containing stretch <inline-formula id="IEq12"><alternatives><tex-math id="M37">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,j}$
							\end{document}</tex-math><mml:math id="M38"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq12.gif"/></alternatives></inline-formula>. Now, given two chromosomes <italic>C</italic>,<italic>C</italic><sup>′</sup> and the ideotype <inline-graphic xlink:href="12863_2014_154_Figa_HTML.gif" id="d30e2028"/>; then <italic>C</italic> is a strong improvement over <italic>C</italic><sup>′</sup>, denoted as <inline-formula id="IEq13"><alternatives><tex-math id="M39">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$C \succ ^{\mathcal {I}}_{s} C'$
							\end{document}</tex-math><mml:math id="M40"><mml:mi>C</mml:mi><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup><mml:msup><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq13.gif"/></alternatives></inline-formula>, if <disp-formula id="Equg"><alternatives><tex-math id="M41">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$(l_{C} &gt; l_{C'})~\vee~(l_{C} = l_{C'}~\wedge~p_{C} &gt; p_{C'}). $$ \end{document}</tex-math><mml:math id="M42"><mml:mrow><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo>&gt;</mml:mo><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mspace width="1em"/><mml:mo>∨</mml:mo><mml:mspace width="1em"/><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>l</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub><mml:mspace width="1em"/><mml:mo>∧</mml:mo><mml:mspace width="1em"/><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mi>C</mml:mi></mml:mrow></mml:msub><mml:mo>&gt;</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mi>.</mml:mi></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equg.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>To detect strong improvement chromosomes are first compared based on the length of the longest desired stretch that may be produced with at most 1 crossover, an idea which has been previously proposed in [<xref ref-type="bibr" rid="CR11">11</xref>]. In case of equal lengths, the highest probability with which any such maximal desired stretch will be produced by each chromosome is compared. Gene Stacker includes three heuristics which are based on improvement of genotypes. The first heuristic (H0) is applied once to filter the parental genotypes <inline-graphic xlink:href="12863_2014_154_Figb_HTML.gif" id="d30e2162"/>.</p>
      </sec>
      <sec id="d30e2164">
        <title>Heuristic H0 (parental genotype filter).</title>
        <p>Discard any parental genotype <inline-formula id="IEq14"><alternatives><tex-math id="M43">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$G \in \mathcal {G}$
							\end{document}</tex-math><mml:math id="M44"><mml:mi>G</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq14.gif"/></alternatives></inline-formula> for which <inline-formula id="IEq15"><alternatives><tex-math id="M45">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$\exists G' \in \mathcal {G}, G' \ne G,$
							\end{document}</tex-math><mml:math id="M46"><mml:mo>∃</mml:mo><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>∈</mml:mo><mml:mi mathvariant="script">G</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>≠</mml:mo><mml:mi>G</mml:mi><mml:mo>,</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq15.gif"/></alternatives></inline-formula> with <inline-formula id="IEq16"><alternatives><tex-math id="M47">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$G' \succ ^{\mathcal {I}}_{w} G~\wedge ~\neg (G \succ ^{\mathcal {I}}_{w} G')$
							\end{document}</tex-math><mml:math id="M48"><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup><mml:mi>G</mml:mi><mml:mspace width="1em"/><mml:mo>∧</mml:mo><mml:mspace width="1em"/><mml:mo>¬</mml:mo><mml:mo>(</mml:mo><mml:mi>G</mml:mi><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mi>w</mml:mi></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq16.gif"/></alternatives></inline-formula>.</p>
        <p>The other heuristics are repeatedly applied to prune non promising branches of the search tree.</p>
      </sec>
      <sec id="d30e2279">
        <title>Heuristic H1 (improvement over ancestors).</title>
        <p>Each genotype <italic>G</italic> is required to be an improvement over all ancestors, i.e. <inline-formula id="IEq17"><alternatives><tex-math id="M49">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$G \succ ^{\mathcal {I}}_{\ldots } A$
							\end{document}</tex-math><mml:math id="M50"><mml:mi>G</mml:mi><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mo>…</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup><mml:mi>A</mml:mi></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq17.gif"/></alternatives></inline-formula> for each genotype <italic>A</italic> occurring on any path from a source node to <italic>G</italic>. It is also allowed that <italic>G</italic>=<italic>A</italic> if <italic>G</italic> has a smaller linkage phase ambiguity or higher probability than <italic>A</italic>, considering the seed lots from which both genotypes are obtained. The applied improvement criterion <inline-formula id="IEq18"><alternatives><tex-math id="M51">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$\succ ^{\mathcal {I}}_{\ldots }$
							\end{document}</tex-math><mml:math id="M52"><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mo>…</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq18.gif"/></alternatives></inline-formula> can be either weak (H1a) or strong improvement (H1b).</p>
      </sec>
      <sec id="d30e2346">
        <title>Heuristic H2 (seed lot filter).</title>
        <p>When crossing genotypes <italic>P</italic> and <italic>Q</italic>, discard any genotype <italic>G</italic> from the obtained seed lot <inline-graphic xlink:href="12863_2014_154_Figc_HTML.gif" id="d30e2361"/> for which <inline-formula id="IEq19"><alternatives><tex-math id="M53">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$\exists G' \in \mathcal {S},~G' \ne G, $
							\end{document}</tex-math><mml:math id="M54"><mml:mo>∃</mml:mo><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>∈</mml:mo><mml:mi mathvariant="script">S</mml:mi><mml:mo>,</mml:mo><mml:mspace width="1em"/><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>≠</mml:mo><mml:mi>G</mml:mi><mml:mo>,</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq19.gif"/></alternatives></inline-formula> with <disp-formula id="Equh"><alternatives><tex-math id="M55">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$G' \succ^{\mathcal{I}}_{\ldots} G~\wedge~\neg(G \succ^{\mathcal{I}}_{\ldots} G') $$ 
							\end{document}</tex-math><mml:math id="M56"><mml:mrow><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mo>…</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup><mml:mi>G</mml:mi><mml:mspace width="1em"/><mml:mo>∧</mml:mo><mml:mspace width="1em"/><mml:mo>¬</mml:mo><mml:mo>(</mml:mo><mml:mi>G</mml:mi><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mo>…</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equh.gif" position="anchor"/></alternatives></disp-formula> and both <disp-formula id="Equi"><alternatives><tex-math id="M57">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$\begin{array}{@{}rcl@{}} Pr[P,Q \rightarrow G'] &amp;\ge&amp; Pr[P,Q \rightarrow G]\\ LPA[P,Q \rightarrow G'] &amp;\le&amp; LPA[P,Q \rightarrow G]. \end{array} $$ 
							\end{document}</tex-math><mml:math id="M58"><mml:mtable class="eqnarray" columnalign="left center right"><mml:mtr><mml:mtd class="eqnarray-1"><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>]</mml:mo></mml:mtd><mml:mtd class="eqnarray-2"><mml:mo>≥</mml:mo></mml:mtd><mml:mtd class="eqnarray-3"><mml:mtext mathvariant="italic">Pr</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mi>G</mml:mi><mml:mo>]</mml:mo></mml:mtd><mml:mtd><mml:mtext/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="eqnarray-1"><mml:mtext mathvariant="italic">LPA</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>]</mml:mo></mml:mtd><mml:mtd class="eqnarray-2"><mml:mo>≤</mml:mo></mml:mtd><mml:mtd class="eqnarray-3"><mml:mtext mathvariant="italic">LPA</mml:mtext><mml:mo>[</mml:mo><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:mi>Q</mml:mi><mml:mo>→</mml:mo><mml:mi>G</mml:mi><mml:mo>]</mml:mo><mml:mi>.</mml:mi></mml:mtd><mml:mtd><mml:mtext/></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12863_2014_154_Article_Equi.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>Again, the applied improvement criterion <inline-formula id="IEq20"><alternatives><tex-math id="M59">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$\succ ^{\mathcal {I}}_{\ldots }$
							\end{document}</tex-math><mml:math id="M60"><mml:msubsup><mml:mrow><mml:mo>≻</mml:mo></mml:mrow><mml:mrow><mml:mo>…</mml:mo></mml:mrow><mml:mrow><mml:mi mathvariant="script">I</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq20.gif"/></alternatives></inline-formula> can be either weak (H2a) or strong improvement (H2b).</p>
        <p>Heuristic H2 removes genotypes from <inline-graphic xlink:href="12863_2014_154_Figc_HTML.gif" id="d30e2582"/> if a strictly better genotype is also available which requires equal or less effort to be obtained from <inline-graphic xlink:href="12863_2014_154_Figc_HTML.gif" id="d30e2585"/>, in terms of population size (probability) and linkage phase ambiguity. The following heuristic (H3) assumes that an optimal schedule consists of optimal subschedules.</p>
      </sec>
      <sec id="d30e2587">
        <title>Heuristic H3 (optimal subschedules).</title>
        <p>A distinct Pareto frontier <inline-formula id="IEq21"><alternatives><tex-math id="M61">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$\mathcal {F}(G)$
							\end{document}</tex-math><mml:math id="M62"><mml:mi mathvariant="script">F</mml:mi><mml:mo>(</mml:mo><mml:mi>G</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq21.gif"/></alternatives></inline-formula> is maintained for each genotype <italic>G</italic>, consisting of schedules with final genotype <italic>G</italic>. Such schedule <italic>C</italic> is only queued for further extension if it is not dominated by a previous schedule <inline-formula id="IEq22"><alternatives><tex-math id="M63">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$C' \in \mathcal {F}(G)$
							\end{document}</tex-math><mml:math id="M64"><mml:msup><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mo>′</mml:mo></mml:mrow></mml:msup><mml:mo>∈</mml:mo><mml:mi mathvariant="script">F</mml:mi><mml:mo>(</mml:mo><mml:mi>G</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq22.gif"/></alternatives></inline-formula>. Moreover, extensions are only constructed if <italic>C</italic> is still contained in <inline-formula id="IEq23"><alternatives><tex-math id="M65">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$\mathcal {F}(G)$
							\end{document}</tex-math><mml:math id="M66"><mml:mi mathvariant="script">F</mml:mi><mml:mo>(</mml:mo><mml:mi>G</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq23.gif"/></alternatives></inline-formula> when it is dequeued. As an exception, selfing a homozygous genotype is always allowed.</p>
        <p>The exception allows efficient reuse of homozygous genotypes across generations with only a small increase in the number of explored branches of the search tree. Experiments showed that applying heuristic H3 generally results in very large speedups, but regularly also yields worse Pareto frontier approximations because the assumption that optimal schedules consist of optimal subschedules does not hold when reusing material. Therefore, two dual run strategies have been designed where H3 is enabled in the first run only. The second run then benefits from the availability of an initial Pareto frontier approximation, e.g. allowing earlier pruning. Heuristic H3s1 follows this basic dual run strategy. Heuristic H3s2 also applies an additional seed lot filter in the second run that restricts the possible haplotypes for each chromosome to those occurring in a solution found in the first run. The overhead of the first run is usually much smaller than the speedup obtained in the second run.</p>
        <p>The next heuristic (H4) requires that a genotype is obtained from a Pareto optimal seed lot in terms of the corresponding probability and ambiguity.</p>
      </sec>
      <sec id="d30e2666">
        <title>Heuristic H4 (Pareto optimal seed lot).</title>
        <p>Each genotype <italic>G</italic> is required to be obtained from a Pareto optimal seed lot <inline-graphic xlink:href="12863_2014_154_Figc_HTML.gif" id="d30e2675"/> in terms of probability and linkage phase ambiguity, among all seed lots available up to the respective generation.</p>
        <p>The number of possible offspring from a crossing grows exponentially with the number of (heterozygous) loci in the parents; therefore, it can take a significant amount of time and memory to construct the entire seed lot. Although Gene Stacker includes several seed lot filters, this filtering may also be time consuming. Therefore, heuristics are provided that reduce the number of haplotypes produced from the crossed genotypes’ chromosomes by not considering all crossovers. These heuristics (H5 and H5c) assume that a crossover is difficult to obtain and should therefore result in an obvious improvement.</p>
      </sec>
      <sec id="d30e2679">
        <title>Heuristic H5 (heuristic seed lot construction).</title>
        <p>Take a chromosome <italic>C</italic> with <italic>k</italic> loci of which <italic>l</italic>≤<italic>k</italic> are heterozygous with ordered indices <italic>s</italic>=(<italic>ν</italic><sub>1</sub>,…,<italic>ν</italic><sub><italic>l</italic></sub>). Also, take a haplotype <italic>H</italic> that is produced from <italic>C</italic> through <italic>m</italic>&lt;<italic>l</italic> crossovers between consecutive heterozygous loci <inline-formula id="IEq24"><alternatives><tex-math id="M67">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$(\nu _{i_{1}-1}, \nu _{i_{1}}), \dots, (\nu _{i_{m}-1}, \nu _{i_{m}})$
							\end{document}</tex-math><mml:math id="M68"><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>ν</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>ν</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>ν</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mrow><mml:mi>ν</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq24.gif"/></alternatives></inline-formula>. Split <italic>H</italic> into a series of <italic>m</italic>+1 corresponding stretches <disp-formula id="Equj"><alternatives><tex-math id="M69">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$\mathcal{H} = (S^{H}_{0,(\nu_{i_{1}})-1}, S^{H}_{\nu_{i_{1}},(\nu_{i_{2}})-1}, \ldots, S^{H}_{\nu_{i_{m}},k-1}) $$ 
							\end{document}</tex-math><mml:math id="M70"><mml:mrow><mml:mi mathvariant="script">ℋ</mml:mi><mml:mo>=</mml:mo><mml:mo>(</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>ν</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>ν</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>ν</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>ν</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>m</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup><mml:mo>)</mml:mo></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equj.gif" position="anchor"/></alternatives></disp-formula> where each stretch <inline-formula id="IEq25"><alternatives><tex-math id="M71">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,j} \in \mathcal {H}$
							\end{document}</tex-math><mml:math id="M72"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup><mml:mo>∈</mml:mo><mml:mi mathvariant="script">ℋ</mml:mi></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq25.gif"/></alternatives></inline-formula> originates from one of both haplotypes of <italic>C</italic>. For every stretch <inline-formula id="IEq26"><alternatives><tex-math id="M73">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,j}$
							\end{document}</tex-math><mml:math id="M74"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq26.gif"/></alternatives></inline-formula> originating from the top haplotype <italic>C</italic><sub>1</sub>, i.e. <inline-formula id="IEq27"><alternatives><tex-math id="M75">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,j} = S^{C_{1}}_{i,j}$
							\end{document}</tex-math><mml:math id="M76"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup><mml:mo>=</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq27.gif"/></alternatives></inline-formula>, the bottom haplotype <italic>C</italic><sub>2</sub> contains an alternative stretch <inline-formula id="IEq28"><alternatives><tex-math id="M77">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{C_{2}}_{i,j} \ne S^{H}_{i,j}$
							\end{document}</tex-math><mml:math id="M78"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:msubsup><mml:mo>≠</mml:mo><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq28.gif"/></alternatives></inline-formula> and vice versa. Produce only those haplotypes from <italic>C</italic> for which every stretch in <inline-graphic xlink:href="12863_2014_154_Figd_HTML.gif" id="d30e3093"/> contains at least one desired allele which is not present in the alternative stretch.</p>
      </sec>
      <sec id="d30e3095">
        <title>Heuristic H5c (consistent heuristic seed lots).</title>
        <p>This heuristic is a stronger version of H5 that requires consistent improvement within all stretches towards a fixed haplotype of the corresponding ideotype chromosome.</p>
        <p>For a homozygous ideotype, H5c degenerates to H5. To compute linkage phase ambiguities a heuristically constructed seed lot <inline-graphic xlink:href="12863_2014_154_Figc_HTML.gif" id="d30e3103"/> is further extended to include all phase-known genotypes with the same allelic frequencies as any genotype already contained in <inline-graphic xlink:href="12863_2014_154_Figc_HTML.gif" id="d30e3106"/>. Heuristics H5 and H5c also provide an option to limit the number of simultaneous crossovers per chromosome.</p>
        <p>Finally, heuristic H6 computes an approximate lower bound on the population size of any completed extension of a given partial schedule, based on the probabilities of those crossovers that are necessarily still required to obtain the ideotype.</p>
      </sec>
      <sec id="d30e3111">
        <title>Heuristic H6 (approximate population size bound).</title>
        <p>From every chromosome <italic>T</italic> of the ideotype <inline-graphic xlink:href="12863_2014_154_Figa_HTML.gif" id="d30e3120"/>, with <italic>n</italic><sub><italic>T</italic></sub> loci, the set of desired stretches of size 2 is derived: <disp-formula id="Equk"><alternatives><tex-math id="M79">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$\mathcal{D}_{T} = \left\{S^{H}_{i,i+1}; H = T_{1} \vee T_{2}~\&amp;~0 \le i &lt; n_{T}-1\right\} $$ 
							\end{document}</tex-math><mml:math id="M80"><mml:mrow><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfenced close="}" open="{" separators=""><mml:mrow><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup><mml:mo>;</mml:mo><mml:mi>H</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>∨</mml:mo><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msub><mml:mo>&amp;</mml:mo><mml:mn>0</mml:mn><mml:mo>≤</mml:mo><mml:mi>i</mml:mi><mml:mo>&lt;</mml:mo><mml:msub><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mfenced></mml:mrow></mml:math><graphic xlink:href="12863_2014_154_Article_Equk.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>Only those stretches from <inline-formula id="IEq29"><alternatives><tex-math id="M81">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$\mathcal {D}_{T}$
							\end{document}</tex-math><mml:math id="M82"><mml:msub><mml:mrow><mml:mi mathvariant="script">D</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq29.gif"/></alternatives></inline-formula> that do not occur in the respective chromosome of any parental genotype <inline-formula id="IEq30"><alternatives><tex-math id="M83">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$G \in \mathcal {G}$
							\end{document}</tex-math><mml:math id="M84"><mml:mi>G</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="script">G</mml:mi></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq30.gif"/></alternatives></inline-formula> are retained. For each such stretch <inline-formula id="IEq31"><alternatives><tex-math id="M85">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								$S^{H}_{i,i+1}$
							\end{document}</tex-math><mml:math id="M86"><mml:msubsup><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>i</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>H</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12863_2014_154_Article_IEq31.gif"/></alternatives></inline-formula> a crossover is necessarily required between loci <italic>i</italic> and <italic>i</italic>+1 to obtain the ideotype. Now, given a partial schedule, it is checked (for all chromosomes) which of the crucial stretches are not yet present in any genotype occurring in this schedule. The sum of the minimum population sizes required to obtain each of the corresponding crossovers is used as a lower bound for the increase in total population size of any completed extension of this schedule.</p>
        <p>It might seem that heuristic H6 implements an exact bound but this is not guaranteed as Gene Stacker computes a joint population size when targeting multiple genotypes among the offspring of a shared seed lot (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 2). It is therefore possible that multiple crucial stretches are simultaneously obtained with a lower total cost. However, it is expected that this will rarely occur.</p>
        <p>Several well-chosen combinations of heuristics provide tradeoffs between solution quality and execution time. Presets are named <italic>best</italic>, <italic>better</italic>, <italic>default</italic>, <italic>faster</italic> and <italic>fastest</italic>; ordered by the amount and restrictiveness of the applied heuristics. Full descriptions of the presets are included in the Additional file <xref rid="MOESM1" ref-type="media">1</xref> (Section 5).</p>
      </sec>
    </sec>
    <sec id="Sec13">
      <title>Implementation and hardware</title>
      <p>Gene Stacker is implemented in Java 7 and experiments have been performed on the UGent HPC infrastructure, using computing nodes with a 2.4 GHz quad-socket octa-core AMD Magny-Cours processor having a total of 32 cores and 64 GB RAM. Gene Stacker is freely available at <ext-link ext-link-type="uri" xlink:href="http://genestacker.ugent.be">http://genestacker.ugent.be</ext-link>; version 1.6 was used for all experiments. The website also contains user documentation and examples.</p>
    </sec>
  </sec>
  <sec id="Sec14">
    <title>Results and discussion</title>
    <p>This section presents results of applying Gene Stacker to both generated and real stacking problems. First, some advantages of the extended DAG model are discussed. Then, the power of the applied optimization strategy in combination with the proposed heuristics is assessed. The section is concluded by providing some practical guidelines for users of Gene Stacker. Results are compared to those obtained by the method from [<xref ref-type="bibr" rid="CR8">8</xref>], referred to as CANZAR<sup>c</sup>. This method minimizes the total population size, number of generations and total number of crossings. As minimizing the number of crossings is not explicitly considered as an objective in Gene Stacker, only schedules with the lowest total population size among those with the same number of generations, produced by CANZAR, were selected for comparison with Gene Stacker.</p>
    <sec id="Sec15">
      <title>Advantages of the extended model</title>
      <p>Some advantages of the extended model are discussed here based on two constructed examples and a complex real stacking problem from cotton.</p>
      <sec id="Sec16">
        <title>Constructed examples</title>
        <p>Consider an example with two heterozygous parental genotypes <italic>G</italic><sup>1</sup>,<italic>G</italic><sup>2</sup> and a heterozygous ideotype <inline-graphic xlink:href="12863_2014_154_Figa_HTML.gif" id="d30e3341"/>: <disp-formula id="Equl"><alternatives><tex-math id="M87">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$\begin{array}{@{}rcl@{}} G^{1} &amp;=&amp; \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{ccc} 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{array} \right],\\ G^{2} &amp;=&amp; \left[ \begin{array}{c} 0 \\ 0 \end{array} \right] \left[ \begin{array}{ccc} 0 &amp; 1 &amp; 0 \\ 1 &amp; 0 &amp; 1 \end{array} \right],\\ \mathcal{I} &amp;=&amp; \left[ \begin{array}{c} 1 \\ 1 \end{array} \right] \left[ \begin{array}{ccc} 1 &amp; 0 &amp; 1 \\ 1 &amp; 1 &amp; 1 \end{array} \right]. \end{array} $$ 
							\end{document}</tex-math><mml:math id="M88"><mml:mtable class="eqnarray" columnalign="left center right"><mml:mtr><mml:mtd class="eqnarray-1"><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:mtd><mml:mtd class="eqnarray-2"><mml:mo>=</mml:mo></mml:mtd><mml:mtd class="eqnarray-3"><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd><mml:mtd><mml:mn>0</mml:mn></mml:mtd><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd><mml:mtd><mml:mn>0</mml:mn></mml:mtd><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mo>,</mml:mo></mml:mtd><mml:mtd><mml:mtext/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="eqnarray-1"><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mtd><mml:mtd class="eqnarray-2"><mml:mo>=</mml:mo></mml:mtd><mml:mtd class="eqnarray-3"><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd><mml:mtd><mml:mn>1</mml:mn></mml:mtd><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd><mml:mtd><mml:mn>0</mml:mn></mml:mtd><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mo>,</mml:mo></mml:mtd><mml:mtd><mml:mtext/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="eqnarray-1"><mml:mi mathvariant="script">I</mml:mi></mml:mtd><mml:mtd class="eqnarray-2"><mml:mo>=</mml:mo></mml:mtd><mml:mtd class="eqnarray-3"><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd><mml:mtd><mml:mn>0</mml:mn></mml:mtd><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd><mml:mtd><mml:mn>1</mml:mn></mml:mtd><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mi>.</mml:mi></mml:mtd><mml:mtd><mml:mtext/></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12863_2014_154_Article_Equl.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>The distance between the loci on the second chromosome is 31 and 42 cM, respectively. Five solutions were reported when running Gene Stacker in <italic>default</italic> mode, setting an overall success rate of <italic>γ</italic>=0.95 and a limit of 4 generations and 10% overall linkage phase ambiguity (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4).</p>
        <p>Figure <xref rid="Fig3" ref-type="fig">3</xref> (left) shows the best non-ambiguous three generation schedule obtained by Gene Stacker, with a total population size of 275, as well as (right) the respective best three generation solution found by CANZAR, which has a higher total population size of 363. The leftmost target aimed for in the penultimate generation of the latter schedule has a linkage phase ambiguity of 23.1% while Gene Stacker’s solution is guaranteed to be non-ambiguous. Gene Stacker provides a way to avoid such high ambiguities by carefully monitoring them and considering ambiguity as an additional objective to be minimized.<fig id="Fig3"><label>Figure 3</label><caption><p><bold>Solutions for first constructed example.</bold> (left) Best non-ambiguous three generation schedule obtained for the first constructed example when running Gene Stacker in <italic>default</italic> mode; (right) respective best three generation solution reported by CANZAR.</p></caption><graphic xlink:href="12863_2014_154_Fig3_HTML" id="MO3"/></fig></p>
        <p>This example also shows how computing joint population sizes when simultaneously targeting multiple genotypes among the offspring grown from a shared seed lot may significantly reduce the total population size (seed lot S3 in Figure <xref rid="Fig3" ref-type="fig">3</xref>). This approach enabled Gene Stacker to find an alternative schedule with a reduction of more than 24% in the total population size as compared to the schedule constructed by CANZAR.</p>
        <p>Another advantage of representing plants and seed lots with distinct nodes is that (re)use of plants and seeds is differentiated. Gene Stacker only allows crossings with plants from the same generation, which is justified by the fact that almost all field crops flower only once, for a short time. Also for crops that flower multiple times or for a longer period (such as tomato), crossings with plants from distinct generations are usually not considered because of the high logistic impact. To repeatedly cross over multiple generations, the respective genotype has to be reproduced, for example by regrowing it from remaining seeds. In such case, the corresponding cost is accounted for. Note that this does not limit the flexibility of Gene Stacker’s model but ensures that the computed cost of the constructed schedules closely reflects plant breeding practice.</p>
        <p>The next example has specifically been constructed to show the advantage of modelling multiple chromosomes. It consists of the following two parental genotypes and ideotype: <disp-formula id="Equm"><alternatives><tex-math id="M89">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
								 $$\begin{array}{@{}rcl@{}} G^{1} &amp;=&amp; \left[ \begin{array}{c} 0 \\ 0 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right],~\\ G^{2} &amp;=&amp; \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 0 \end{array} \right],\\ \mathcal{I} &amp;=&amp; \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right] \left[ \begin{array}{c} 0 \\ 1 \end{array} \right]. \end{array} $$ 
							\end{document}</tex-math><mml:math id="M90"><mml:mtable class="eqnarray" columnalign="left center right"><mml:mtr><mml:mtd class="eqnarray-1"><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msup></mml:mtd><mml:mtd class="eqnarray-2"><mml:mo>=</mml:mo></mml:mtd><mml:mtd class="eqnarray-3"><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mo>,</mml:mo><mml:mspace width="1em"/></mml:mtd><mml:mtd><mml:mtext/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="eqnarray-1"><mml:msup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mtd><mml:mtd class="eqnarray-2"><mml:mo>=</mml:mo></mml:mtd><mml:mtd class="eqnarray-3"><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mo>,</mml:mo></mml:mtd><mml:mtd><mml:mtext/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="eqnarray-1"><mml:mi mathvariant="script">I</mml:mi></mml:mtd><mml:mtd class="eqnarray-2"><mml:mo>=</mml:mo></mml:mtd><mml:mtd class="eqnarray-3"><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mfenced close="]" open="[" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mi>.</mml:mi></mml:mtd><mml:mtd><mml:mtext/></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12863_2014_154_Article_Equm.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>A genetic map is not required as each chromosome contains one locus only. Running Gene Stacker with any preset and <italic>γ</italic>=0.95 resulted in the schedule from Figure <xref rid="Fig4" ref-type="fig">4</xref> (left) which performs a single crossing. It is possible to immediately obtain the ideotype from this crossing because the order of haplotypes within a chromosome is arbitrary. This is taken into account when computing the probability of observing a genotype among the offspring (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 1). In contrast, previous methods used a single chromosome and specified a recombination rate of 0.5 between loci that actually reside on different chromosomes. This requires to arbitrarily fix an order of haplotypes in each actual chromosome and artificially increases the complexity of the problem. Figure <xref rid="Fig4" ref-type="fig">4</xref> (right) shows Gene Stacker’s solution for the same example when combining all loci on a single artificial chromosome. This schedule is significantly worse: it has an additional generation and a much higher total population size. Although this example was specifically constructed and is somewhat extreme in the sense that it has six loci on six different chromosomes, it clearly shows the general benefits of explicitly modelling multiple chromosomes.<fig id="Fig4"><label>Figure 4</label><caption><p><bold>Solutions for second constructed example.</bold> (left) Best solution obtained for the second constructed example when explicitly modelling multiple chromosomes; (right) best solution found when combining all loci on one artificial chromosome, where a crossover rate of 0.5 is specified between pairs of consecutive loci that actually reside on different chromosomes (in this example, all loci).</p></caption><graphic xlink:href="12863_2014_154_Fig4_HTML" id="MO4"/></fig></p>
      </sec>
      <sec id="Sec17">
        <title>Dealing with tight constraints</title>
        <p>Tight constraints might apply for specific crops. For example, cotton plants can be used for two crossings only (or one selfing) and each crossing yields a small amount of about 250 seeds. This makes it more difficult to find good crossing schedules within the constraints. With the extended model such important constraints can easily be taken into account. Crossings are performed multiple times if necessary to provide a sufficient amount of seeds, where sometimes several duplicates of the same genotype are needed to be able to make all crossings. Population sizes are computed in such way that at least the required number of duplicates of each targeted genotype is expected among the offspring (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 2).</p>
        <p>An example from cotton is considered with 6 parental genotypes, 11 loci spread across 5 chromosomes and a heterozygous ideotype (full description in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 7). An overall success rate of <italic>γ</italic>=0.95 was used and the number of generations, number of plants per generation and overall linkage phase ambiguity were limited to 5, 5000 and 10%, respectively. A time limit of 24 hours was applied. The number of crossings per plant and seeds obtained per crossing were set to 2 and 250, respectively, to precisely reflect the tight constraints of cotton breeding.</p>
        <p>Running Gene Stacker with preset <italic>fastest</italic> took 2 hours and 15 minutes to complete and reported 4 solutions with 3–5 generations, a total population size of 7256–1077 and an overall linkage phase ambiguity of 0–3.14% (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S5–S8). All other presets ran out of memory (64 GB). When restricting the number of generations to 4 instead of 5, preset <italic>faster</italic> reported a different solution with 4 generations that has a lower total population size (1400) than the respective schedule found by preset <italic>fastest</italic> (1534) before being interrupted when the time limit of 24 hours had been exceeded (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S9). All solutions contain at least one crossing which is performed multiple times and/or a genotype of which multiple duplicates are selected. It was not possible to obtain solutions within the constraints using CANZAR as this method does not provide a way to accurately impose and work around these constraints.</p>
      </sec>
    </sec>
    <sec id="Sec18">
      <title>Optimization power and heuristics</title>
      <p>We first explore the limits of the optimization strategy and the power gained by applying additional heuristics, based on experiments with a large number of randomly generated problem instances. Then, the obtained quality-runtime tradeoff is assessed for various complex, real stacking problems.</p>
      <sec id="Sec19">
        <title>Limits of the optimization strategy</title>
        <p>Experiments have been performed with a variety of 240 randomly generated stacking problems; 120 with a homozygous ideotype and 120 with a heterozygous ideotype. All instances have 4–14 loci, taking steps of two, and 20 instances were created for every number of loci and for both types of ideotype. Each instance has been independently generated by <list list-type="simple"><list-item><label>(i)</label><p>picking a random number of 1–8 chromosomes, limited by the number of loci;</p></list-item><list-item><label>(ii)</label><p>randomly assigning each locus to one of the available chromosomes, with a minimum of 1 locus per chromosome;</p></list-item><list-item><label>(iii)</label><p>setting a random distance of 1–50 cM between pairs of consecutive loci on the same chromosome;</p></list-item><list-item><label>(iv)</label><p>randomly creating 2–8 parental genotypes, where each allele is set to 1 or 0 with equal probability; and</p></list-item><list-item><label>(v)</label><p>generating a random ideotype.</p></list-item></list></p>
        <p>The haplotypes of the ideotype’s chromosomes were created by copying alleles from one of both haplotypes of the respective chromosome of a randomly picked parental genotype (independently for every locus). To obtain a homozygous ideotype, one haplotype is created for each chromosome and included twice. For heterozygous ideotypes, two independent haplotypes are created and combined for every chromosome.</p>
        <p>Figure <xref rid="Fig5" ref-type="fig">5</xref> shows results of running each preset of Gene Stacker on the 120 instances with a homozygous ideotype. All experiments have been repeated with a maximum of 4, 5 and 6 generations, and a runtime limit of 24 hours has been applied, together with an overall success rate of <italic>γ</italic>=0.95 and a maximum of 10000 plants per generation, 4 crossings per plant, 5000 obtained seeds per crossing and 20% overall linkage phase ambiguity. For every combination of the maximum number of generations (rows), the number of loci (columns) and the applied preset (bars) it is reported for how many out of 20 instances Gene Stacker completed within the time limit of 24 hours.<fig id="Fig5"><label>Figure 5</label><caption><p><bold>Results for random instances with a homozygous ideotype.</bold> This figure indicates the number of randomly generated instances with a <italic>homozygous</italic> ideotype for which the different presets of Gene Stacker completed within the applied time limit of 24 hours. Experiments were repeated with a maximum of 4–6 generations. Instances have 4–14 loci spread across 1–8 chromosomes and 2–8 parental genotypes. In total, 20 instances were generated for each number of loci.</p></caption><graphic xlink:href="12863_2014_154_Fig5_HTML" id="MO5"/></fig></p>
        <p>Without applying any heuristics (preset <italic>best</italic>), Gene Stacker solves only 42.5%, 35% and 28.34% of all instances when limiting the number of generations to 4, 5 and 6, respectively. Interestingly, solutions are obtained for about 95% of all instances when applying all heuristics (preset <italic>fastest</italic>) regardless of the limit on the number of generations. As expected (and desired), the power of the other presets (<italic>better</italic>, <italic>default</italic>, <italic>faster</italic>) lies somewhere in between. The problem complexity obviously increases with the number of loci as well as the maximum number of generations. Without any heuristics, Gene Stacker solved almost no problems with more than 8 loci: solutions were obtained for less than half of the instances when the number of loci exceeded 8, 6 and 4 with a limit of 4, 5 and 6 generations, respectively. Yet, Gene Stacker can cope with many more complex problems with up to at least 14 loci using the proposed heuristics. Of course, these heuristics may yield worse Pareto frontier approximations, so it is preferred only to enable them if necessary to find solutions within reasonable time. In this way, the heuristics offer a convenient quality-runtime tradeoff and allow to obtain (approximate) solutions for more complex problems.</p>
        <p>Figure <xref rid="Fig6" ref-type="fig">6</xref> shows similar results for the 120 instances with a heterozygous ideotype. It is clear that these are generally more complex as significantly fewer instances were solved within the time limit compared to the results from Figure <xref rid="Fig5" ref-type="fig">5</xref>. This may be explained from the fact that each heterozygous chromosome in the ideotype contains two different target haplotypes, i.e. two competing goals, that have to be obtained simultaneously. Also, the heuristics are less effective for heterozygous ideotypes. For example, improvement towards any of both haplotypes of a heterozygous ideotype chromosome is rewarded; therefore, heuristics based on such improvement are less powerful in case of two distinct target haplotypes in a single chromosome.<fig id="Fig6"><label>Figure 6</label><caption><p><bold>Results for random instances with a heterozygous ideotype.</bold> This figure indicates the number of randomly generated instances with a <italic>heterozygous</italic> ideotype for which the different presets of Gene Stacker completed within the applied time limit of 24 hours. Experiments were repeated with a maximum of 4–6 generations. Instances have 4–14 loci spread across 1–8 chromosomes and 2–8 parental genotypes. In total, 20 instances were generated for each number of loci.</p></caption><graphic xlink:href="12863_2014_154_Fig6_HTML" id="MO6"/></fig></p>
        <p>Without applying any heuristics, Gene Stacker now solves 22.5–37.5% of all instances for a varying limit on the number of generations. Less than half of the instances were solved when the number of loci exceeded 4–6. When all heuristics are enabled, solutions are obtained for 65–72.5% of the instances (for less than half of the instances when exceeding 10 loci). Although the currently proposed heuristics are clearly less powerful when aiming for a heterozygous ideotype, they allowed to find solutions for many complex problems with up to 10 loci. Nevertheless, the challenge remains to develop better heuristics in this respect.</p>
        <p>We conclude that the applied optimization strategy can effectively be used to find solutions for a wide range of stacking problems. Without extra heuristics, some smaller problems with 4–8 or 4–6 loci in case of a homozygous or heterozygous ideotype, respectively, can already be tackled (depending on the maximum number of generations). To deal with more complex problems, additional heuristics are required. The proposed heuristics allow to obtain (approximate) solutions for problems with up to at least 10–14 loci.</p>
      </sec>
      <sec id="Sec20">
        <title>Quality-runtime tradeoff</title>
        <p>The quality-runtime tradeoff obtained by applying different combinations of heuristics is assessed here for real stacking problems from tomato and rice (full specification in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 7). For all experiments, an overall success rate of <italic>γ</italic>=0.95 was set and the number of generations and plants per generation were restricted to 5 and 5000, respectively. The amount of seeds produced per crossing and maximum number of crossings per plant were set to reflect the specific properties of each crop. Approximated Pareto frontiers in terms of the total population size and number of generations are reported (only schedules with zero linkage phase ambiguity were selected).</p>
        <p>First, experiments were performed with two stacking problems from tomato. Both consist of the same 4 parental genotypes with 8 loci spread across 6 chromosomes. The first example (Tomato-1) has a homozygous ideotype while the second example (Tomato-2) has a heterozygous ideotype. Tomatoes can easily be crossed several dozens of times and every crossing yields a large number of seeds: the maximum number of crossings per plant and the amount of seeds obtained from one crossing were set to 24 and 20000, respectively. A time limit of 12 hours was imposed, after which the algorithms were interrupted and the solutions found until then were inspected.</p>
        <p>Figure <xref rid="Fig7" ref-type="fig">7</xref> (top left) shows the Pareto frontier approximations obtained by applying Gene Stacker with presets <italic>default</italic>, <italic>faster</italic> and <italic>fastest</italic> as well as CANZAR to Tomato-1. Gene Stacker and CANZAR obtained exactly the same schedule with 4 generations. The small difference in the reported population size is explained by the fact that both methods follow a slightly different approach to derive a success rate per targeted genotype (<italic>γ</italic><sup>′</sup>) from the desired overall success rate (<italic>γ</italic>). Solutions with 5 generations were also found. Those reported by Gene Stacker have a lower population size compared to the one obtained by CANZAR, even when applying preset <italic>fastest</italic> which completes after only 28 seconds. Presets <italic>default</italic> and <italic>faster</italic> reported exactly the same solutions and the 5 generation schedule found here improves over the respective schedule obtained by preset <italic>fastest</italic>. Yet, these two presets took significantly more time (ca. 6–8 hours). This shows how the proposed heuristics provide tradeoffs between solution quality and execution time and that they are capable of finding good solutions for a complex, realistic problem within reasonable time. CANZAR was interrupted when exceeding the time limit of 12 hours.<fig id="Fig7"><label>Figure 7</label><caption><p><bold>Pareto frontier approximations of real stacking problems from tomato and rice.</bold> (top left) First example from tomato (Tomato-1), homozygous ideotype; (top right) second example from tomato (Tomato-2), heterozygous ideotype; (bottom left) first example from rice (Rice-1), homozygous ideotype; (bottom right) second example from rice (Rice-2), heterozygous ideotype. Full descriptions of the examples are provided in the Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 7.</p></caption><graphic xlink:href="12863_2014_154_Fig7_HTML" id="MO7"/></fig></p>
        <p>Similar results for Tomato-2 are presented in Figure <xref rid="Fig7" ref-type="fig">7</xref> (top right) where only preset <italic>fastest</italic> has been applied since the other presets ran out of memory (64 GB). Gene Stacker completed in about 5 hours while CANZAR was interrupted when the time limit had expired. Three solutions were reported by Gene Stacker with 3–5 generations and CANZAR obtained 2 solutions with 4–5 generations. The 4 generation schedules reported by both methods slightly differ but have approximately the same total population size. Conversely, Gene Stacker found a somewhat better schedule with 5 generations and an additional solution with only 3 generations. The difference in runtime, as compared to Tomato-1, and the fact that all other presets ran out of memory again confirm that with the current heuristics it is more difficult to solve stacking problems with a heterozygous ideotype. Yet, the heuristics made it possible to find 3 good solutions within a few hours, using a transparent optimization strategy.</p>
        <p>Results were also obtained for two examples from rice. Both consist of the same 8 parental genotypes with 10 loci spread across 6 chromosomes. The first example (Rice-1) has a homozygous ideotype while the second example (Rice-2) has a heterozygous ideotype. About 300 seeds are obtained from each crossing and rice plants can be crossed no more than 5 times. For these examples, a time limit of 24 hours was set.</p>
        <p>Figure <xref rid="Fig7" ref-type="fig">7</xref> (bottom left) shows the Pareto frontier approximations obtained by applying Gene Stacker with presets <italic>better</italic>, <italic>default</italic>, <italic>faster</italic> and <italic>fastest</italic> as well as CANZAR to Rice-1. Preset <italic>fastest</italic> completed after only 4 seconds and reported three solutions with 3–5 generations. Presets <italic>default</italic> and <italic>faster</italic> terminated after about 30 seconds and found a better schedule that dominates both the 4 and 5 generation schedules obtained by preset <italic>fastest</italic>. Preset <italic>better</italic> completed after about 12 minutes and found an additional 5 generation schedule with a slightly lower total population size. This again shows how the heuristics offer a convenient quality-runtime tradeoff. CANZAR did not complete within the time limit of 24 hours but was able to obtain a single schedule with 4 generations that dominates all 4 and 5 generation schedules obtained by Gene Stacker. It is inevitable that the heuristics sometimes make wrong decisions in which case valuable parts of the search space may not have been explored. In this specific example, heuristic H0 (included in all presets except preset <italic>best</italic>) removed a parental genotype that is needed to find the better schedule obtained by CANZAR. Still, results are quite close to those of CANZAR, especially when applying presets <italic>faster</italic>, <italic>default</italic> or <italic>better</italic>, a significant speedup is obtained and an additional solution with only 3 generations is found.</p>
        <p>Similar results for Rice-2 are shown in Figure <xref rid="Fig7" ref-type="fig">7</xref> (bottom right) where only preset <italic>fastest</italic> has been applied as the other presets either ran out of memory or did not find any solutions within the time limit. Gene Stacker completed after 5–6 minutes while CANZAR was interrupted after exceeding the time limit of 24 hours. Three solutions were reported by Gene Stacker, with 3–5 generations. CANZAR found a single solution with 4 generations and a higher population size than the respective schedule obtained by Gene Stacker. Again, the runtime and memory footprint of Gene Stacker is significantly higher for this problem with a heterozygous ideotype as compared to Rice-1 which has a homozygous ideotype. Yet, preset <italic>fastest</italic> outperforms CANZAR and is able to provide a valuable approximation of the Pareto frontier within a few minutes.</p>
      </sec>
    </sec>
    <sec id="Sec21">
      <title>Practical guidelines</title>
      <p>Based on our findings we propose the following practical guidelines for using Gene Stacker. Best is to first try the default settings, specifying the required parameters (maximum number of generations and overall success rate) and those constraints that are important for the specific application (such as the number of seeds produced from a crossing and maximum number of crossings per plant) with a reasonable runtime limit (e.g. 24 hours). If Gene Stacker is too slow or requires too much memory, consider setting additional or tighter constraints (e.g. maximum plants per generation, maximum overall linkage phase ambiguity,...) and/or using preset <italic>faster</italic> or <italic>fastest</italic>. The latter may yield worse solutions which should be avoided when possible. In case the default setting is more than fast enough consider running presets <italic>better</italic> and <italic>best</italic> as well to check whether this produces better schedules, as the heuristics might have missed something. Usually, differences between the latter presets and the default setting are very small (if any) except for the runtime which is significantly increased.</p>
      <p>In case QTL (quantitative trait locus) intervals need to be stacked one can use flanking markers to delimit the target locus. The Tomato-1 problem (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section 7) is a case in point. On the sixth chromosome, a small region of 10 cM has been identified in which a target gene is located. In this setting it is advised to make sure that the required haplotype is present in at least one of the parents, and to verify it is maintained throughout the crossing scheme. There always remains a small risk of a double cross-over within the interval in a single generation which one can either ignore or monitor by saturating the interval with additional markers. More details and practical examples are given at <ext-link ext-link-type="uri" xlink:href="http://genestacker.ugent.be">http://genestacker.ugent.be</ext-link>.</p>
    </sec>
  </sec>
  <sec id="Sec22" sec-type="conclusion">
    <title>Conclusions</title>
    <p>The proposed transparent, flexible and easily extensible approach to marker-assisted gene pyramiding was confirmed to be feasible in combination with heuristics to address realistic, complex stacking problems with up to at least 10–14 loci, while taking into account important breeding constraints. Carefully designed heuristics even allow to find better or additional solutions within reasonable time compared to previous methods. The proposed heuristics are certainly not perfect nor complete. For example, they are less effective for problems with a heterozygous ideotype. Future work may include the design of additional or improved heuristics as well as extension of the ideas applied in Gene Stacker for a more general plant breeding context that also addresses complex traits and conservation of genetic background.</p>
  </sec>
  <sec id="Sec23">
    <title>Availability of supporting data</title>
    <p>The data set(s) supporting the results of this article is(are) included within the article (and its additional file(s)).</p>
  </sec>
  <sec id="Sec24">
    <title>Endnotes</title>
    <p><sup>a</sup> See <ext-link ext-link-type="uri" xlink:href="http://cplex.com">http://cplex.com</ext-link>.</p>
    <p><sup>b</sup> The term ‘homozygous genotype’ is used to indicate that all considered loci are homozygous; this does not say anything about the remaining loci in the full DNA and should for example not be confused with homozygous inbred lines.</p>
    <p><sup>c</sup> Experiments with CANZAR were run on the SURFsara Lisa computing system (<ext-link ext-link-type="uri" xlink:href="https://www.surfsara.nl/systems/lisa/description">https://www.surfsara.nl/systems/lisa/description</ext-link>) by the authors of this method.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Additional file</title>
    <sec id="Sec25">
      <supplementary-material content-type="local-data" id="MOESM1">
        <media xlink:href="12863_2014_154_MOESM1_ESM.pdf">
          <label>Additional file 1</label>
          <caption>
            <p><bold>Supplementary material.</bold> PDF file with supplementary information such as formulas, algorithm details and additional results.</p>
          </caption>
        </media>
      </supplementary-material>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-list>
        <def-item>
          <term>MIP</term>
          <def>
            <p>Mixed integer programming</p>
          </def>
        </def-item>
        <def-item>
          <term>DAG</term>
          <def>
            <p>Directed acyclic graph</p>
          </def>
        </def-item>
        <def-item>
          <term>LPA</term>
          <def>
            <p>Linkage phase ambiguity</p>
          </def>
        </def-item>
        <def-item>
          <term>QTL</term>
          <def>
            <p>Quantitative trait locus</p>
          </def>
        </def-item>
      </def-list>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Competing interests</bold>
      </p>
      <p>HDB and VF declare that they have an ongoing scientific collaboration with Bayer CropScience where GDM is employed. VF has also been involved in consultancy for this company.</p>
    </fn>
    <fn>
      <p>
        <bold>Authors’ contributions</bold>
      </p>
      <p>HDB proposed the Gene Stacker algorithm, implemented it and performed all experiments under the supervision of VF. GDM provided data, general advice on the genetical context and assistance for the development of heuristics. HDB wrote the initial manuscript with all authors contributing to the final version. All authors read and approved the final manuscript.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>This work was carried out using the Stevin Supercomputer Infrastructure at Ghent University. We thank Mohammed El-Kebir and Stefan Canzar for their kind cooperation by running their algorithm on our test cases. This allowed for an interesting comparison between our methods and made a major contribution to the discussion. Herman De Beukelaer is supported by a Ph.D. grant from the Research Foundation of Flanders (FWO).</p>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tester</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Langridge</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>Breeding technologies to increase crop production in a changing world</bold>
        </article-title>
        <source>Science</source>
        <year>2010</year>
        <volume>327</volume>
        <issue>5967</issue>
        <fpage>818</fpage>
        <lpage>22</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1183700</pub-id>
        <?supplied-pmid 20150489?>
        <pub-id pub-id-type="pmid">20150489</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Moose</surname>
            <given-names>SP</given-names>
          </name>
          <name>
            <surname>Mumm</surname>
            <given-names>RH</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>Molecular plant breeding as the foundation for 21st century crop improvement</bold>
        </article-title>
        <source>Plant Physiol</source>
        <year>2008</year>
        <volume>147</volume>
        <issue>3</issue>
        <fpage>969</fpage>
        <lpage>77</lpage>
        <pub-id pub-id-type="doi">10.1104/pp.108.118232</pub-id>
        <?supplied-pmid 18612074?>
        <pub-id pub-id-type="pmid">18612074</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>de los Campos</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Hickey</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Pong-Wong</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Daetwyler</surname>
            <given-names>HD</given-names>
          </name>
          <name>
            <surname>Calus</surname>
            <given-names>MP</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>Whole-genome regression and prediction methods applied to plant and animal breeding</bold>
        </article-title>
        <source>Genetics</source>
        <year>2013</year>
        <volume>193</volume>
        <issue>2</issue>
        <fpage>327</fpage>
        <lpage>45</lpage>
        <pub-id pub-id-type="doi">10.1534/genetics.112.143313</pub-id>
        <?supplied-pmid 22745228?>
        <pub-id pub-id-type="pmid">22745228</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ishii</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Yonezawa</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>Optimization of the marker-based procedures for pyramiding genes from multiple donor lines: I. schedule of crossing between the donor lines</bold>
        </article-title>
        <source>Crop Sci</source>
        <year>2007</year>
        <volume>47</volume>
        <issue>2</issue>
        <fpage>537</fpage>
        <lpage>546</lpage>
        <pub-id pub-id-type="doi">10.2135/cropsci2006.06.0435</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ye</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>KF</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>Marker-assisted gene pyramiding for inbred line development: Basic principles and practical guidelines</bold>
        </article-title>
        <source>Int J Plant Breed</source>
        <year>2008</year>
        <volume>2</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.3923/ijpbg.2008.1.8</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Servin</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Martin</surname>
            <given-names>OC</given-names>
          </name>
          <name>
            <surname>Mézard</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Hospital</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>Toward a theory of marker-assisted gene pyramiding</bold>
        </article-title>
        <source>Genetics</source>
        <year>2004</year>
        <volume>168</volume>
        <fpage>513</fpage>
        <lpage>23</lpage>
        <pub-id pub-id-type="doi">10.1534/genetics.103.023358</pub-id>
        <?supplied-pmid 15454561?>
        <pub-id pub-id-type="pmid">15454561</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Xu</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Beavis</surname>
            <given-names>WD</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>An optimization approach to gene stacking</bold>
        </article-title>
        <source>Eur J Oper Res</source>
        <year>2011</year>
        <volume>214</volume>
        <fpage>168</fpage>
        <lpage>78</lpage>
        <pub-id pub-id-type="doi">10.1016/j.ejor.2011.04.012</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Canzar</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>El-Kebir</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Przytycka</surname>
            <given-names>TM</given-names>
          </name>
          <name>
            <surname>Sagot</surname>
            <given-names>M. -F</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>A mathematical programming approach to marker-assisted gene pyramiding</bold>
        </article-title>
        <source>Algorithms in Bioinformatics, WABI 2011, LNBI 6833
</source>
        <year>2011</year>
        <publisher-loc>Berlin, Germany</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>26</fpage>
        <lpage>38</lpage>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Haldane</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>The combination of linkage values and the calculation of distances between the loci of linked factors</bold>
        </article-title>
        <source>J Genet</source>
        <year>1919</year>
        <volume>8</volume>
        <issue>29</issue>
        <fpage>299</fpage>
        <lpage>309</lpage>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Browning</surname>
            <given-names>SR</given-names>
          </name>
          <name>
            <surname>Browning</surname>
            <given-names>BL</given-names>
          </name>
        </person-group>
        <article-title>
          <bold>Haplotype phasing: existing methods and new developments</bold>
        </article-title>
        <source>Nat Rev Genet</source>
        <year>2011</year>
        <volume>12</volume>
        <issue>10</issue>
        <fpage>703</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg3054</pub-id>
        <?supplied-pmid 21921926?>
        <pub-id pub-id-type="pmid">21921926</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <mixed-citation publication-type="other">El-Kebir M, de Berg M, Buntjer J: <bold>Crossing schedule optimization. [Master’s thesis]</bold>. Technische Universiteit Eindhoven; 2009.</mixed-citation>
    </ref>
  </ref-list>
</back>
