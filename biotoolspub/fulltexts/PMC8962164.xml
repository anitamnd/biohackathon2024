<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8962164</article-id>
    <article-id pub-id-type="publisher-id">4620</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-022-04620-2</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>BarWare: efficient software tools for barcoded single-cell genomics</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-0351-6446</contrib-id>
        <name>
          <surname>Swanson</surname>
          <given-names>Elliott</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-8533-3992</contrib-id>
        <name>
          <surname>Reading</surname>
          <given-names>Julian</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-8814-6818</contrib-id>
        <name>
          <surname>Graybuck</surname>
          <given-names>Lucas T.</given-names>
        </name>
        <address>
          <email>lucasg@alleninstitute.org</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-8965-5326</contrib-id>
        <name>
          <surname>Skene</surname>
          <given-names>Peter J.</given-names>
        </name>
        <address>
          <email>peter.skene@alleninstitute.org</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.507731.7</institution-id><institution>Allen Institute for Immunology, </institution></institution-wrap>Seattle, WA USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.34477.33</institution-id><institution-id institution-id-type="ISNI">0000000122986657</institution-id><institution>Present Address: Department of Genome Sciences, </institution><institution>University of Washington School of Medicine, </institution></institution-wrap>Seattle, WA USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>27</day>
      <month>3</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>3</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <volume>23</volume>
    <elocation-id>106</elocation-id>
    <history>
      <date date-type="received">
        <day>23</day>
        <month>8</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>28</day>
        <month>2</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Barcode-based multiplexing methods can be used to increase throughput and reduce batch effects in large single-cell genomics studies. Despite advantages in flexibility of sample collection and scale, there are additional complications in the data deconvolution steps required to assign each cell to their originating samples.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">To meet computational needs for efficient sample deconvolution, we developed the tools BarCounter and BarMixer that compute barcode counts and deconvolute mixed single-cell data into sample-specific files, respectively. Together, these tools are implemented as the BarWare pipeline to support demultiplexing from large sequencing projects with many wells of hashed 10x Genomics scRNA-seq data.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">BarWare is a modular set of tools linked by shell scripting: BarCounter, a computationally efficient barcode sequence quantification tool implemented in C; and BarMixer, an R package for identification of barcoded populations, merging barcoded data from multiple wells, and quality-control reporting related to scRNA-seq data. These tools and a self-contained implementation of the pipeline are freely available for non-commercial use at <ext-link ext-link-type="uri" xlink:href="https://github.com/AllenInstitute/BarWare-pipeline">https://github.com/AllenInstitute/BarWare-pipeline</ext-link>.</p>
      </sec>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s12859-022-04620-2.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Single-cell RNA-seq</kwd>
      <kwd>Cell hashing</kwd>
      <kwd>Demultiplexing</kwd>
      <kwd>Genomics</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2022</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par19">The use of single-cell genomics has rapidly expanded due to high throughput, widely used commercial technologies. Microfluidic droplet based platforms [<xref ref-type="bibr" rid="CR11">11</xref>, <xref ref-type="bibr" rid="CR21">21</xref>] are commonly used for single-cell RNA sequencing (scRNA-seq) due to their ease of use and ability to sequence tens to hundreds of thousands of cells per experiment, and competitive cost per cell. However, droplet-based methods also have inherent challenges including multiple cell capture (multiplets) and well-to-well variation. A strategy to address these issues is Cell Hashing [<xref ref-type="bibr" rid="CR17">17</xref>] Fig. <xref rid="Fig1" ref-type="fig">1</xref>), in which antibodies against near-ubiquitously expressed surface proteins are conjugated to barcoded Hash Tag Oligos (HTO) used to uniquely label samples (Fig. <xref rid="Fig1" ref-type="fig">1</xref>A). This allows samples to be mixed and processed simultaneously in the same well to enable increased cell loading and explicit doublet detection, even when multiple samples originate from the same subject. In addition, samples can be mixed and loaded across multiple wells and/or microfluidic chips, eliminating common sources of technical variation and mitigating the risk of sample dropout due to loss of any single well (Fig. <xref rid="Fig1" ref-type="fig">1</xref>A). We have recently implemented this approach at scale for multimodal immunomonitoring of patient samples to study the immune system [<xref ref-type="bibr" rid="CR5">5</xref>].<fig id="Fig1"><label>Fig. 1</label><caption><p>Overview of the Cell Hashing workflow. <bold>A</bold> Sample collection and distribution overview. Cell Hashing allows flexible sample collection, including collection of multiple samples over time from the same donor. Each sample can then be thawed and stained with antibodies conjugated to Hash Tag Oligos (HTOs), each of which contains a unique barcode sequence. Once stained, samples can be mixed and distributed across wells for processing to reduce batch effects. <bold>B</bold> BarWare pipeline overview. After sequencing, two libraries are generated for each 10x Genomics Chromium well: a RNA library, and a HTO library. RNA libraries are aligned and converted UMI count matrices containing cell x gene counts (top), and HTO libraries are counted by Barcounter to generate cell x HTO counts (bottom). BarMixer is then used to convert HTO counts to sample assignments for each cell. BarMixer then combines sample assignments with the scRNA-seq to split sample data within each well, and finally merges data from each sample from all wells to generate sample-specific output. CellBC, Cell Barcode; UMI, Unique Molecular Identifier; HTO, Hash Tag Oligonucleotide</p></caption><graphic xlink:href="12859_2022_4620_Fig1_HTML" id="MO1"/></fig></p>
    <p id="Par20">With the advantages of Cell Hashing come additional complications related to data processing: samples are no longer directly associated with a single set of well indices and must be demultiplexed at two levels, both by well and by sample, for downstream analysis (Fig. <xref rid="Fig1" ref-type="fig">1</xref>B). Previously published tools for barcode quantification were very flexible but slow and did not include the ability to easily repartition count matrices for each sample. To implement Cell Hashing at scale, we developed BarWare, an efficient and comprehensive pipeline consisting of two modular tools linked by shell scripting: BarCounter, for fast, efficient tabulation of HTO counts per cell barcode, and BarMixer, an R package that provides code to quickly redistribute samples across wells and report results and quality control (QC) metrics in user-friendly reproducible RMarkdown reports.</p>
    <p id="Par21">We show that BarCounter outperforms other Hash Tag Oligo (HTO) counting tools and demonstrate the BarWare Cell Hashing pipeline using a large benchmark dataset generated by progressive overloading of the 10x Chromium v3 3′ RNA-seq assay. These capabilities, combined with an emphasis on automated quality control reporting, make BarWare a scalable, user-friendly, and comprehensive toolkit for Cell Hashing that can be efficiently applied to large-scale sequencing projects with many wells of 10x 3′ RNA-seq data.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <sec id="Sec3">
      <title>Efficient barcode counting with BarCounter</title>
      <p id="Par22">We identified HTO counting as a significant bottleneck in the processing of Cell Hashing data. In particular we found that a popular and widely used tool, CITE-seq Count [<xref ref-type="bibr" rid="CR15">15</xref>], scaled poorly to highly overloaded wells both in terms of processing time and memory. As the cost of single-cell sequencing continues to decline, large Cell Hashing and CITE-seq experiments on the order of hundreds of thousands to millions of cells are being generated. To facilitate rapid and parallel processing of large datasets we developed BarCounter: a fast, scalable HTO counting program implemented in C and optimized with speed and memory use in mind. Briefly, BarCounter parses paired-end FASTQ data into cell barcode, Unique Molecular Identifier (UMI), and hashtag sequences, then matches barcodes and hashtags against a user-provided cell barcode whitelist and hashtag sequence list, respectively. To account for sequencing errors, BarCounter allows a single base mismatch in hashtag sequences and a single low quality basecall (Q &lt; 20) mismatch in cell barcodes. BarCounter processes each read independently and utilizes the trie data structure (also known as a prefix tree) to perform cell barcode and UMI lookups in constant time (Fig. <xref rid="Fig2" ref-type="fig">2</xref>A–C).<fig id="Fig2"><label>Fig. 2</label><caption><p>Implementation of BarCounter and BarMixer. <bold>A</bold> Trie data structures are used in BarCounter to efficiently tabulate barcode frequencies. <bold>B</bold> Diagram of HTO read structure. Read 1 contains the 16 bp cell barcode and the 12 bp UMI. Read 2 contains the 15 bp hashtag. <bold>C</bold> Overview of the BarCounter workflow. At runtime, the user provides a barcode whitelist which is loaded into a trie for rapid lookups, a taglist containing all valid hashtag sequences, and paired Read 1 and Read 2 FASTQ files. For each read, checks are performed to verify the cell barcode exists in the barcode trie, and the hashtag sequence is in the taglist. The UMI sequence is checked against a trie and if it is not present, the trie is updated and the counts for the barcode and hashtag combination are incremented. <bold>D–F</bold> Benchmarking comparisons of BarCounter and other available HTO counting algorithms as a function of increasing cell loading per 10x Genomics well: cellranger count (10x Genomics); CITE-seq-Count (with or without barcode correction, [<xref ref-type="bibr" rid="CR15">15</xref>], KITE, [<xref ref-type="bibr" rid="CR4">4</xref>] (single-threaded or with 8 threads). <bold>D</bold> Maximum memory usage, <bold>E</bold> Average CPU load, <bold>F</bold> Elapsed time. <bold>G</bold> Overview of the barcode cutoff determination method used by BarMixer: Raw counts generated by BarCounter are clipped to remove low values, then log transformed, and used as input to 2-cluster K-means. If cluster medians are separable, the cutoff is set to the lowest value in the positive cluster. Note broken y-axis in the first two panels. <bold>H–L</bold> Visualizations provided by BarMixer QC reporting notebooks. <bold>H</bold> HTO count histograms (green bars) with cutoff values (blue lines), <bold>I</bold> Fractions of barcodes and reads attributed to singlets (dark blue), doublets (light blue), and multiplets (purple), <bold>J</bold> Counts of cells in each hashing category per well in a batch, <bold>K</bold> Number of UMIs per cell in each HTO category, <bold>L</bold> Number of genes per cell in each HTO category</p></caption><graphic xlink:href="12859_2022_4620_Fig2_HTML" id="MO2"/></fig></p>
    </sec>
    <sec id="Sec4">
      <title>Assignment of counts to hashed populations</title>
      <p id="Par23">The BarMixer package includes tools to convert raw HTO counts from BarCounter into assignments of each cell to their sample of origin. BarMixer assigns barcodes as “singlet”, “doublet”, “multiplet”, or “no hash” based on dynamically determined UMI cutoffs specific to each hash sequence in each well. For each hashtag, a distribution of HTO counts across all cell barcodes is generated, and a cutoff value delineating positive and negative barcodes is assigned (Fig. <xref rid="Fig2" ref-type="fig">2</xref>G and “<xref rid="Sec12" ref-type="sec">Methods</xref>”). Barcode categories are determined based on the number of positive hashes, e.g. cell barcodes positive for a single hash are classified as singlets. Barcodes are labelled with sample names corresponding to each positive hash. Processing metrics are organized into JavaScript Object Notation (JSON) and HTML reports for convenient automated and visual quality control.</p>
    </sec>
    <sec id="Sec5">
      <title>Distribution of cells with BarMixer</title>
      <p id="Par24">Sample-specific datasets are prepared via BarMixer by performing three key steps. For each well, BarMixer annotates Cell Ranger filtered HDF5 files with QC characteristics and cell metadata. Then, BarMixer uses the sample assignments for each cell to split data into separate HDF5 files by sample. Finally, BarMixer merges data across all processed wells based on the sample assignments. This yields a separate, merged HDF5 file for each sample, a merged HDF5 file for all multiplets, and metric reports in JSON and HTML format. Reports include relevant sequencing QC metrics, alignment distributions by barcode category, UMI and gene count distributions by hashtag, and median count data by both sample and well.</p>
    </sec>
    <sec id="Sec6">
      <title>Progressive cell overloading to assess demultiplexing</title>
      <p id="Par25">We evaluated the BarWare pipeline and related tools by conducting a progressive cell overloading experiment (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). We used fluorescence activated cell sorting (FACS) to separate a sample of peripheral blood mononuclear cells (PBMCs) into naïve T cells, memory T cells, and non-T cell PBMC populations. Each sorted population was divided into two technical replicates for a total of six samples that were stained with commercially available HTO antibodies (BioLegend TotalSeq-A). The six samples were pooled together and loaded into six wells of a 10x Chromium v3 3′ RNA-seq chip at inputs of 16k, 24k, 32k, 48k, 64k, and 80k cells per well (Fig. <xref rid="Fig3" ref-type="fig">3</xref>A). Sequencing depth was scaled linearly with predicted cell recovery by well. Hashtag read counts ranged from approximately 40M for 16,000 cell loading to ~ 163M for 80,000 cell loading (Additional file <xref rid="MOESM3" ref-type="media">3</xref>: Table S3). This dataset provides a unique test case for HTO counting that is applicable across a wide range of cell numbers and read counts.<fig id="Fig3"><label>Fig. 3</label><caption><p>Cell type sorting and progressive overloading to assess overloading and deconvolution. <bold>A</bold> Overview of the workflow for generating the progressively overloaded dataset. PBMCs purified from a Ficoll gradient were sorted into three populations using FACS. Each population was split and stained with a hashing antibody. All samples were then pooled, and were loaded at increasing cell count into the wells of a 10x 3′ scRNA-seq chip. <bold>B</bold> Bar plot showing the cell counts from each population (x-axis) in each well (y-axis). <bold>C</bold> UMAP plot of all singlets (n = 105,395 cells) colored based on which well the mixed samples were loaded into. <bold>D</bold> Heatmap colored based on the fraction of cells from each hashed population assigned to each cell type using Seurat v4.0 label transfer methods. <bold>E</bold> UMAP plot, as in <bold>C</bold>, colored based on the sorted and hashed replicates. <bold>F</bold> UMAP plot, as in <bold>C</bold>, colored based on cell type assignments from Seurat v4.0 label transfer (legend to the right). <bold>G</bold> Dot plot showing the expression of well-known, population-specific marker genes for each replicate. Size corresponds to the fraction of cells in each group with &gt; 0 expression. Color corresponds to the log-transformed median of all non-zero, normalized values in each group. <bold>H</bold> Overlay of the marker gene expression values per cell on the UMAP plot used in panel <bold>C</bold>. Color corresponds to normalized expression values. Color scales are independent per panel, with ranges indicated by the legend at the top-right of each plot</p></caption><graphic xlink:href="12859_2022_4620_Fig3_HTML" id="MO3"/></fig></p>
    </sec>
  </sec>
  <sec id="Sec7">
    <title>Results and discussion</title>
    <sec id="Sec8">
      <title>Comparison of BarCounter to HTO counting tools</title>
      <p id="Par26">We compared BarCounter to other popular software tools for HTO counting, including CITE-seq-Count (with and without optional UMI correction), Cell Ranger count (10x Genomics), and kallisto indexing and tag extraction (KITE) in both single and multithreaded modes [<xref ref-type="bibr" rid="CR4">4</xref>]. Some of these methods perform computationally costly Unique Molecular Identifier (UMI) correction because sequencing errors may artificially inflate UMI counts and distort the data. This correction is important for rare transcripts or markers, but commercially available HTO barcode sequences have a universal minimum hamming distance of three bases to ameliorate the risk of hashtag misidentification.</p>
      <p id="Par27">To evaluate the accuracy of BarCounter compared to a method including UMI correction, we ran BarMixer (described below) with HTO counts from either BarCounter or CITE-seq count with UMI correction and compared overlap in barcode classification and sample identification. For each of the six mixed wells, over 99.8% of barcodes identified as singlets were identical between the two methods (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1). Across all wells, 113,414 barcodes were identified as singlets by BarCounter, only 60 of which were identified as doublets by CITE-seq Count. Counts for the top two hashtags for these barcodes differed between the methods by an average of 3.8% and 2.5% respectively, with the majority of barcodes having a count ratio between the top two hashtags greater than three, supporting their classification as singlets (Additional file <xref rid="MOESM2" ref-type="media">2</xref>: Table S2). All 113,268 barcodes identified as singlets by both tools had matching sample identity classifications. Therefore, the high dynamic range between positive (bound) and negative (unbound) HTO populations for each cell barcode enables hashtag analysis to be performed without computationally expensive UMI correction with little loss of accuracy in sample identification and doublet detection.</p>
      <p id="Par28">For each Cell Hashing well, we processed HTO FASTQ data using each tool and tracked performance using the Linux “time -v” command. For each well, BarCounter had the lowest memory usage (defined as maximum resident set size), lowest CPU usage, and lowest user (CPU) time. BarCounter was fastest in real (wall clock) time across all comparisons with the exception of the 64,000 and 80,000 cell wells, in which eight-threaded KITE processing was 7% and 15% faster, respectively (Fig. <xref rid="Fig2" ref-type="fig">2</xref>D–F). Due to the low-dimensional nature and inherent background signal of HTO data, we opted to output results in the universally readable comma separated values (CSV) format rather than a sparse matrix format. Despite this change, BarCounter outputs were the smallest in terms of disk space across all comparisons (Additional file <xref rid="MOESM4" ref-type="media">4</xref>: Table S4).</p>
      <p id="Par29">Based on these performance metrics, we estimate that data from an eight well experiment loading 16,000 cells and sequencing to a depth of 40M reads (~ 2500 reads per cell in this experiment) per well could be processed in parallel on a modest 8 CPU, 20 GB RAM computer in less than five minutes. These results demonstrate that BarCounter is ideally suited for the parallel processing of large Cell Hashing datasets, including when well number, cell recovery, and sequencing depth are high.</p>
    </sec>
    <sec id="Sec9">
      <title>Separation of sample data using BarMixer</title>
      <p id="Par30">We developed a second tool to apply Cell Hashing to samples distributed across multiple wells (Fig. <xref rid="Fig1" ref-type="fig">1</xref>B). BarMixer is an R package and set of Rmarkdown notebooks that enables separation of samples within each well (splitting by hash) and reassembly of each sample across all wells into sample-specific output files (merging by hash). First, HTO counts generated by BarCounter are processed to identify a threshold value for each HTO barcode, assign each cell barcode to its corresponding sample(s) as a singlet, doublet, or multiplet (Fig. <xref rid="Fig2" ref-type="fig">2</xref>G, “<xref rid="Sec12" ref-type="sec">Methods</xref>”), and generate an HTML-based report for HTO category counts and cutoffs (including Fig. <xref rid="Fig2" ref-type="fig">2</xref>H). Then, HDF5-formatted count matrix results from Cell Ranger count (10x Genomics) are preprocessed to add multiple points of cell metadata, assign each cell barcode with a universally unique identifier (UUIDs) to avoid cell barcode conflicts between wells, and generate a QC report for each well. Next, the HTO category and count data, as well as the metadata-tagged HDF5 count matrix file are used to split each well, create separate HDF5 files for each sample and a separate file for multiplets, and generate a report of sample metadata for each well (including RNA-seq read usage as displayed in F<xref rid="Fig2" ref-type="fig">i</xref>g. <xref rid="Fig2" ref-type="fig">2</xref>I). Finally, the results from each sample across all wells are merged into a single output file per sample, and a final report summarizing HTO categories and RNA-seq QC characteristics is generated for all wells (including Fig. <xref rid="Fig2" ref-type="fig">2</xref>J–L). This modular series of steps and reporting allows for rapid assessment of results using the final summary report, as well as step-by-step troubleshooting of each major process in the sample demultiplexing pipeline.</p>
    </sec>
    <sec id="Sec10">
      <title>Evaluation of sample assignments</title>
      <p id="Par31">To evaluate the fidelity of BarWare’s sample assignments, we utilized the Barware pipeline to process a progressive cell overloading dataset, then performed analysis using Seurat v4 [<xref ref-type="bibr" rid="CR8">8</xref>] to confirm that the samples identified via Cell Hashing and the original FACS sorted populations were in agreement (Fig. <xref rid="Fig3" ref-type="fig">3</xref>).</p>
      <p id="Par32">Following simple QC filtering, we performed dimensionality reduction, clustering, and visualized the results using uniform manifold approximation and projection (UMAP). We observed that cells from all eight wells were mixed evenly, there was complete overlap between technical replicates, and that each sorted FACS population showed a high degree of separation from the others (Fig. <xref rid="Fig3" ref-type="fig">3</xref>C, E). We then mapped our data onto the reference PBMC CITE-seq dataset described in [<xref ref-type="bibr" rid="CR8">8</xref>], and transferred the reference cell type labels to our dataset (Fig. <xref rid="Fig3" ref-type="fig">3</xref>D, F). As expected, cells with hashes from the non-T cell FACS population were assigned to non-T cell identities (32,069 of 32,199 cells; 99.6%), memory T cell sorts were assigned memory T cell type identities (35,101 of 36,932 cells; 95%), and naïve T cell hashes were most frequently assigned to naïve T cell and double-negative T cell (dnT) identities (30,706 of 36,264 cells; 84.7%) (Fig. <xref rid="Fig3" ref-type="fig">3</xref>D–F).</p>
      <p id="Par33">We also visualized cell type-specific marker genes on our UMAP and found highly specific gene expression patterns that support the labelled cell type identities. Expression of CD3D was restricted to the naïve and memory T cell populations, CD14 and MS4A1 (CD20) expression identified classical monocytes and B cells, respectively in the non T cell population, and GNLY was specific to labelled NK and CD8 T cells (Fig. <xref rid="Fig3" ref-type="fig">3</xref>E). We divided the T cell compartment into naïve and memory based on expression of CCR7 or S100A4 [<xref ref-type="bibr" rid="CR7">7</xref>], respectively (Fig. <xref rid="Fig3" ref-type="fig">3</xref>F), and found their expression to be mutually exclusive and constrained to the expected FACS populations.</p>
      <p id="Par34">Taken together, the gene expression results show agreement between sample assignments from FACS and Cell Hashing, and confirm that BarWare demultiplexes mixed samples to a high degree of accuracy.</p>
    </sec>
  </sec>
  <sec id="Sec11">
    <title>Conclusion</title>
    <p id="Par35">We have demonstrated the advantages and efficiency of BarWare through its application to a large, multi-well Cell Hashing experiment representing a broad range of cell overloading. BarCounter outperformed other HTO counting tools in terms of speed and computing resources with no decrease in accuracy. BarMixer performs barcode demultiplexing and provides thorough reports detailing QC metrics, and produces merged, sample-specific analysis ready data files along with reports describing the results by sample, by well, and by batch.</p>
    <p id="Par36">In addition, our cell overloading dataset demonstrated the utility of BarWare outputs in simplifying downstream analysis of complex experiments. Merged outputs reduce the number of output files and eliminate manual separation of samples, while maintaining experimental metadata such as the original 10x well, identified hashtag, and barcode classification. BarMixer’s split and merge approach allows analysis of separate samples, independent of the cell pooling performed at the bench, which we have utilized to enable scalable multimodal immunosurveilance studies [<xref ref-type="bibr" rid="CR5">5</xref>]. We expect this feature to become increasingly beneficial as other research institutes and large consortia scale single-cell data generation to the order of tens of millions of cells. Finally, the cell overloading dataset provided with these tools should be useful in the development of new methods for rapid sample demultiplexing.</p>
    <p id="Par37">BarWare provides a comprehensive set of tools which lowers the barrier to entry of Cell Hashing workflows for small laboratories in the field of single-cell sequencing, and should be useful for core facilities that can use cell hashing to mix and overload samples to increase throughput and allow their customers to use only a fraction of one or many wells.</p>
  </sec>
  <sec id="Sec12">
    <title>Methods</title>
    <sec id="Sec13">
      <title>Sample processing</title>
      <p id="Par38">Biological specimens were purchased from Bloodworks Northwest as freshly drawn whole blood. All sample collections were conducted by Bloodworks Northwest under IRB-approved protocols, and all donors signed informed consent forms. PBMCs were isolated in-house using Ficoll Premium (GE Healthcare, 17-5442-03), were cryopreserved using Cryostor10 (StemCell Technologies, 07930), and stored in liquid nitrogen until use. PBMCs were thawed at 37 °C using AIM V medium (Gibco, 12055091).</p>
    </sec>
    <sec id="Sec14">
      <title>FACS</title>
      <p id="Par39">PBMCs were fluorescence activated cell sorted (FACS) into naïve T-cells (CD45+ CD3+ CD45RA+ CD27+), memory T-cells (CD45+ CD3+, excluding CD45RA+ CD27+) and a non-T-cell bulk population (CD45+ CD3−). Briefly, cells were incubated with TruStain FcX (BioLegend, 422302) for 10 min on ice, followed by staining with antibodies (Additional file <xref rid="MOESM6" ref-type="media">6</xref>: Table S6) for 20 min on ice. Cells were washed with AIM V medium plus 25 mM HEPES and sorted on a BD FACSAria Fusion. An aliquot of each post-sort population was used to collect 2,000 events to assess post-sort purity.</p>
    </sec>
    <sec id="Sec15">
      <title>Cell hashing</title>
      <p id="Par40">FACS sorted cells were stained according to the New York Genome Center Technology Innovation Lab protocol (v2019-02-13; <ext-link ext-link-type="uri" xlink:href="https://citeseq.files.wordpress.com/2019/02/cell_hashing_protocol_190213.pdf">https://citeseq.files.wordpress.com/2019/02/cell_hashing_protocol_190213.pdf</ext-link>). Briefly, one million cells of each population were resuspended in 100 μl of staining buffer: DPBS without calcium and magnesium (Corning 21-031-CM) supplemented with 2% w/v BSA (Sigma-Aldrich A2934, “PBS + BSA”). 10 μl TruStain FcX (BioLegend, 422302) was added and cells were incubated on ice for 10 min, after which they were stained with 0.5 μg of a TotalSeq-A hashing antibody (Additional file <xref rid="MOESM6" ref-type="media">6</xref>: Table S6) on ice for 30 min. Stained cells were washed three times with 1 mL of PBS + BSA. Cells from each population were pooled together in equal numbers and passed through a 35 μm Falcon Cell Strainer (Corning, 352235). All cell counts were performed using a Cellometer Spectrum Cell Counter (Nexcelom) using ViaStain Acridine Orange/Propidium Iodide solution (Nexcelom, C52-0106–5).</p>
    </sec>
    <sec id="Sec16">
      <title>10x library preparation</title>
      <p id="Par41">Libraries were prepared using the Chromium Single Cell 3′ v3 reagent kit (10x Genomics, 1000075) following the 10x Genomics User Guide (CG000183 Rev A), with the only modification being cell overloading. All libraries were sequenced on an Illumina NovaSeq S4 flowcell. Target read counts were 30,000 reads per cell for RNA libraries and 2,000 reads per cell for HTO libraries.</p>
    </sec>
    <sec id="Sec17">
      <title>Data pre-processing</title>
      <p id="Par42">Raw sequencing data was converted from BCL to FASTQ format using bcl2fastq2 (Illumina v2.20.0.422, parameters: –use-bases-mask = Y28,I8,Y91, –create-fastq-for-index-reads, –minimum-trimmed-read-length = 8, –mask-short-adapter-reads = 8, –ignore-missing-positions, –ignore-missing-controls, –ignore-missing-filter, –ignore-missing-bcls, -r 18 -w 18 -p 50, –barcode-mismatches = 0). Gene expression data was processed using Cell Ranger count(10x Genomics v4.0.0) and aligned to the GRCh38 (hg38) reference genome (refdata-cellranger-atacGRCh38-1.1.0) with the option –expect-cells set to 40,000 for all wells. After running Cell Ranger count, the BarMixer Rmarkdown notebook add_tenx_rna_metadata.Rmd was used to prepare Cell Ranger outputs for downstream analysis.</p>
    </sec>
    <sec id="Sec18">
      <title>HTO counting</title>
      <p id="Par43">Hashtag counting was profiled using the Linux “time -v” command (GNU time v1.7, <ext-link ext-link-type="uri" xlink:href="https://www.gnu.org/software/time/">https://www.gnu.org/software/time/</ext-link>) on a Google Cloud Platform Compute Engine VM Instance with 12 vCPUs (Intel Skylake or later) and 78 GB of RAM. A list of filtered cell barcodes provided by Cell Ranger count as “barcodes.tsv” files were used as the barcode whitelist input to HTO counting software tools where necessary. BarCounter was run with default parameters. KITE (v0.0.2, <ext-link ext-link-type="uri" xlink:href="https://github.com/pachterlab/kite">https://github.com/pachterlab/kite</ext-link>, [<xref ref-type="bibr" rid="CR4">4</xref>]) was run with default parameters and evaluated both single threaded and using eight threads. Cell Ranger count was run in Feature Barcode Only mode (10x Genomics v4.0.0, parameters: –nosecondary –nopreflight –disable-ui –expect-cells = 40,000). CITE-seq Count was run with default parameters including UMI correction [<xref ref-type="bibr" rid="CR15">15</xref>], <ext-link ext-link-type="uri" xlink:href="https://hoohm.github.io/CITE-seq-Count/">https://hoohm.github.io/CITE-seq-Count/</ext-link>, v1.4.3, parameters: -cbf 1 -cbl 16 -umif 17 -umil 28 -cells 40,000), as well as without UMI correction by including the additional parameter –no_umi_correction.</p>
    </sec>
    <sec id="Sec19">
      <title>HTO category assignment</title>
      <p id="Par44">Cells were assigned to individual HTO-defined samples, doublet, multiplet, or no hash categories using a multi-step process contained in the BarMixer package for R, all of which are performed in sequence for a given well using the hto_processing.Rmd script provided in BarMixer. The matrix of HTO counts per cell barcode is read from BarCounter outputs, and cutoffs for positive or negative cell barcodes are defined for each HTO separately. Cutoffs are determined by removing all counts below 10. Then, a test of unimodality is performed using the modetest function from the multimode package for R (v1.4 [<xref ref-type="bibr" rid="CR1">1</xref>], parameters: method = “HH” and B = 20) to use the Dip Test of Unimodality [<xref ref-type="bibr" rid="CR9">9</xref>] with 20 replicates. If the distribution is unimodal, the cutoff is set to the mean value plus 2 times the standard deviation of log-transformed values. This allows capture of some positive hashes when the distribution of hashes is not bimodal, though clear bimodal separation is ideal. If the distribution of counts is not unimodal, the values are log-transformed, and 2 center K-means clustering is performed using the base R kmeans function. Cluster centers are then compared to determine if the higher center is more than fourfold greater than the lower center. If so, the cutoff is set to the minimum value in the higher cluster. Otherwise, the cutoff is set to the maximum value of all cell barcodes, and no barcodes are considered passing. After setting a cutoff for each HTO, cell counts are converted to a binary matrix of passing (1 = greater than or equal to the cutoff) or failing (0 = less than the cutoff) values, and the number of passing values are counted for each cell barcode. Cells with a single passing value are assigned to "singlets", two passing values to "doublets", more than two passing values to "multiplets", and no passing values to "no hash" categories. This information is used to generate a table of hashing categories and the HTO barcode(s) assigned to each cell barcode.</p>
    </sec>
    <sec id="Sec20">
      <title>Splitting and merging data by sample</title>
      <p id="Par45">After performing HTO category assignment for each well, a second script in the BarMixer package, split_h5_by_hash.Rmd, is used to split singlet cells from each sample and from non-singlet categories. This script reads both the HTO category assignment table generated above for each well and the HDF5-formatted count matrix generated by Cell Ranger (10x Genomics). For each well, this script generates a separate HDF5 file for each sample per well. After performing this split step for each well in the experiment, a third script from BarMixer, merge_h5_by_hash.Rmd, assembles the HDF5 files for each sample across all wells into a single HDF5 output, and uses the combined information from these files to generate a comprehensive QC report for data from all wells. All steps for category assignment, splitting, and merging can be performed using wrapper script provided in the BarWare-pipeline repository, 02_run_BarMixer.sh, available at <ext-link ext-link-type="uri" xlink:href="https://github.com/AllenInstitute/BarWare-pipeline">https://github.com/AllenInstitute/BarWare-pipeline</ext-link>.</p>
    </sec>
    <sec id="Sec21">
      <title>RNA-seq analysis</title>
      <p id="Par46">Merged HDF5 files from the final step of the BarWare pipeline were used as input and analyzed using Seurat (v4.0.3 [<xref ref-type="bibr" rid="CR8">8</xref>]). Singlet data was read using the BarMixer (v1.2.0) function read_h5_seurat and merged into a single Seurat Object . Low quality barcodes and extreme outliers were filtered out by subsetting barcodes with less than 25% mitochondrial counts, RNA UMI counts of at least 1000 and less than 25,000, and at least 500 genes detected. We normalized the data using the Seurat function SCTransform [<xref ref-type="bibr" rid="CR6">6</xref>], performed dimensionality reduction using the RunPCA function, generated a two-dimensional UMAP projection from the first 50 principal components using the RunUMAP function, and clustered the cells using the first 50 principal components using the FindNeighbors and FindClusters functions. We mapped our dataset to a reference PBMC CITE-seq dataset from [<xref ref-type="bibr" rid="CR8">8</xref>] using the FindTransferAnchors function (parameters: dims = 1:50) and transferred cell type labels from the reference to our dataset using the MapQuery function.</p>
    </sec>
    <sec id="Sec22">
      <title>Data analysis and visualization software</title>
      <p id="Par47">Visualization of HTO profiling results and gene expression data was performed using R v.3.6.3 and greater [<xref ref-type="bibr" rid="CR13">13</xref>] in the Rstudio IDE or using the Rstudio Server Open Source Edition [<xref ref-type="bibr" rid="CR16">16</xref>] as well as the following packages: for data visualization, ggplot2 [<xref ref-type="bibr" rid="CR18">18</xref>], cowplot [<xref ref-type="bibr" rid="CR20">20</xref>], ggrastr [<xref ref-type="bibr" rid="CR12">12</xref>], pheatmap [<xref ref-type="bibr" rid="CR10">10</xref>]; for general data analysis and manipulation, dplyr [<xref ref-type="bibr" rid="CR19">19</xref>], data.table [<xref ref-type="bibr" rid="CR2">2</xref>], and janitor [<xref ref-type="bibr" rid="CR3">3</xref>]; for scRNA-seq data analysis, Seurat [<xref ref-type="bibr" rid="CR8">8</xref>]. Comparison of barcode classifications between HTO counting tools was performed using Python (v3.7.3) and the Pandas module [<xref ref-type="bibr" rid="CR14">14</xref>].</p>
    </sec>
  </sec>
  <sec id="Sec23">
    <title>Availability and requirements</title>
    <p id="Par48"><bold>Project name:</bold> BarWare pipeline</p>
    <p id="Par49">
      <bold>Project home page:</bold>
      <ext-link ext-link-type="uri" xlink:href="https://github.com/AllenInstitute/BarWare-pipeline">https://github.com/AllenInstitute/BarWare-pipeline</ext-link>
    </p>
    <p id="Par50"><bold>Operating system(s):</bold> UNIX/Linux operating systems.</p>
    <p id="Par51"><bold>Programming language:</bold> C, R, and bash</p>
    <p id="Par52"><bold>Other requirements:</bold> R v3.6.3 or higher</p>
    <p id="Par53"><bold>License:</bold> Allen Institute Software License (modified 2-clause BSD license)</p>
    <p id="Par54"><bold>Any restrictions to use by non-academics:</bold> redistribution and use for commercial purposes restricted without further permission.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Information</title>
    <sec id="Sec24">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2022_4620_MOESM1_ESM.xlsx">
            <caption>
              <p><bold>Additional file 1: Table S1.</bold> HTO category agreement across wells. Fraction of agreement of cell barcode assignment to each HTO category for each pooled sample well based on BarCounter and CITE-seq-Count processing. Well: Pooled sample well. Frac_singlet: Fraction of singlet calls that agree using BarCounter and CITE-seq-Count. Frac_doublet: Fraction of doublet calls that agree using BarCounter and CITE-seq-Count. Frac_multiplet: Fraction of multiplet calls that agree using BarCounter and CITE-seq-Count. Frac_no-hash: Fraction of no hash detected calls that agree using BarCounter and CITE-seq-Count.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2022_4620_MOESM2_ESM.xlsx">
            <caption>
              <p><bold>Additional file 2: Table S2.</bold> Barcode category assignment discrepancies. Counts and count-derived metrics obtained for each of the top two hashes are shown for each cell barcode assigned to the singlet category BarCounter results. but considered a doublet based on CITE-Seq-Count results. Well: Pooled sample well. Barcode: Cell barcode. BarCounter_1st: Counts for the highest-scoring hash based on BarCounter. BarCoutner_2nd: Counts for the second highest-scoring hash based on BarCounter. CITE_1st: Counts for the highest-scoring hash based on CITE-seq-Count. CITE_2nd: Counts for the second highest-scoring hash based on CITE-seq-Count. Change_1st: Difference in counts for the highest-scoring hash (BarCounter_1st—CITE_1st). Change_2nd: Difference in counts for the second highest-scoring hash (BarCounter_2nd—CITE-seq-Count_2nd). Prop_Change_1st: Difference in counts for the highest-scoring hash as a proportion of BarCounter counts (BarCounter_1st—CITE_1st) / BarCounter_1st. Prop_Change_2nd: Difference in counts for the second highest-scoring hash as a proportion of BarCounter counts (BarCounter_2nd—CITE_2nd) / BarCounter_2nd. Ratio_1st:2nd: Ratio of the highest-scoring BarCounter counts to the second high-scoring BarCounter counts (BarCounter_1st / BarCounter_2nd).</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="12859_2022_4620_MOESM3_ESM.xlsx">
            <caption>
              <p><bold>Additional file 3: Table S3.</bold> Sequenced read count statistics. Library ID: Pooled library ID. # Cells: Number of cells loaded. Reads: Number of sequenced read trios for each library (I1, R1, and R2). Reads per cell: Mean number of sequenced reads per cell barcode.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="12859_2022_4620_MOESM4_ESM.xlsx">
            <caption>
              <p><bold>Additional file 4: Table S4.</bold> Benchmarking statistics for HTO counting methods. Tool: Software tool used for benchmarking. Well: Pooled sample well. Elapsed Time (h:mm:ss): Elapsed (clock) time passed to analyze each well. User Time (s): User Time elapsed to analyze each well. % CPU: Maximum CPU load during well analysis. Max Resident Set Size (KB): Maximum resident memory set size during well analysis. Output Size (bytes): Output file size after analysis.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM5">
          <media xlink:href="12859_2022_4620_MOESM5_ESM.xlsx">
            <caption>
              <p><bold>Additional file 5: Table S5.</bold> BarWare HTO category assignment counts. Well: Pooled sample well. Total Barcodes: Number of cell barcodes identified for each well. Singlet: Number of cell barcodes assigned to the singlet category. Doublets: Number of cell barcodes assigned to the doublet category. Multiplets: Number of cell barcodes assigned to the multiplet category. No Hash: Number of cell barcodes assigned to the no hash detected category.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM6">
          <media xlink:href="12859_2022_4620_MOESM6_ESM.xlsx">
            <caption>
              <p><bold>Additional file 6: Table S6.</bold> Antibodies used for Cell Hashing and FACS. Manufacturer: Reagent manufacturer. Catalog No.: Manufacturer catalog number. Conjugate: Moiety (fluorophore or oligonucleotides) conjugated to each antibody. Target: Antibody binding target(s). Clone: Antibody clone. Vol per M cells (µL): Volume of antibody added per million cells for staining.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>CellBC</term>
        <def>
          <p id="Par4">Cell Barcode</p>
        </def>
      </def-item>
      <def-item>
        <term>CSV</term>
        <def>
          <p id="Par5">Comma Separated Values</p>
        </def>
      </def-item>
      <def-item>
        <term>FACS</term>
        <def>
          <p id="Par6">Fluorescence Activated Cell Sorting</p>
        </def>
      </def-item>
      <def-item>
        <term>GEO</term>
        <def>
          <p id="Par7">Gene Expression Omnibus</p>
        </def>
      </def-item>
      <def-item>
        <term>HDF5</term>
        <def>
          <p id="Par8">Hierarchical Data Format 5</p>
        </def>
      </def-item>
      <def-item>
        <term>HTO</term>
        <def>
          <p id="Par9">Hash Tag Oligonucleotide</p>
        </def>
      </def-item>
      <def-item>
        <term>JSON</term>
        <def>
          <p id="Par10">JavaScript Object Notation</p>
        </def>
      </def-item>
      <def-item>
        <term>KITE</term>
        <def>
          <p id="Par11">Kallisto Indexing and Tag Extraction</p>
        </def>
      </def-item>
      <def-item>
        <term>IRB</term>
        <def>
          <p id="Par12">Institutional Review Board</p>
        </def>
      </def-item>
      <def-item>
        <term>PBMC</term>
        <def>
          <p id="Par13">Peripheral Blood Mononuclear Cell</p>
        </def>
      </def-item>
      <def-item>
        <term>QC</term>
        <def>
          <p id="Par14">Quality Control</p>
        </def>
      </def-item>
      <def-item>
        <term>scRNA-seq</term>
        <def>
          <p id="Par15">Single-cell ribonucleic acid sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>UMAP</term>
        <def>
          <p id="Par16">Uniform manifold approximation and projection</p>
        </def>
      </def-item>
      <def-item>
        <term>UMI</term>
        <def>
          <p id="Par17">Unique Molecular Identifier</p>
        </def>
      </def-item>
      <def-item>
        <term>UUID</term>
        <def>
          <p id="Par18">Universally Unique Identifier</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank Thomas F. Bumol for his leadership and support, Olivia Fong and Qiuyu Gong for assistance with data deposit to dbGaP and GEO, Richard Green for assistance with report drafting, and the Human Immune System Explorer (HISE) software development team at the Allen Institute for Immunology for their support and dedication. The authors thank the Allen Institute founder, Paul G. Allen, for his vision, encouragement, and support.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors' contributions</title>
    <p>P.J.S., L.T.G., and E.S. designed the study. E.S. and L.T.G. developed the software pipeline. E.S. and J.R. performed experiments. E.S. and L.T.G. performed hashed scRNA-seq data processing and analysis. L.T.G., E.S., and P.J.S. wrote the manuscript with input from J.R. All authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>All work presented in this manuscript was funded internally by the Allen Institute for Immunology, without external funding from a grant agency.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Raw data is deposited in the NCBI Database of Genotypes and Phenotypes (dbGaP, Accession ID: phs002695.v1) for controlled access. Processed data has been deposited in the NCBI Gene Expression Omnibus database (GEO, Series Accession ID: GSE181862). Code and documentation for the BarcodeTender pipeline, including BarCounter and BarMixer, are available on Github at <ext-link ext-link-type="uri" xlink:href="https://github.com/AllenInstitute/BarWare-pipeline">https://github.com/AllenInstitute/BarWare-pipeline</ext-link>. Code used for benchmarking and figure generation in this manuscript are available on Github at <ext-link ext-link-type="uri" xlink:href="https://github.com/AllenInstitute/BarWare-manuscript">https://github.com/AllenInstitute/BarWare-manuscript</ext-link>. A demonstration dataset with scripts for running the BarWare pipeline and all output files are available in the Zenodo repository at <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/5620859">https://zenodo.org/record/5620859</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar1">
      <title>Ethics approval and consent to participate</title>
      <p id="Par55">Biological specimens were purchased from Bloodworks Northwest as freshly drawn whole blood. All sample collections were conducted by Bloodworks Northwest under an IRB-approved protocol (Sponsor Protocol No. BT001) administered by the Western Institutional Review Board (WIRB at time of filing, now WCG IRB; Study Number: 1148916; IRB Tracking Number: 20141589). All donors have signed informed consent forms administrated under IRB protocol approval (see above). This consent allows for the use of material from donors for research purposes that protect the privacy and confidentiality of genetic data. To meet these standards, data published as part of this manuscript and through open-access repositories do not contain personally identifying information, and raw data will be deposited to the NIH dbGaP database for controlled access.</p>
    </notes>
    <notes id="FPar2">
      <title>Consent for publication</title>
      <p id="Par56">Not applicable.</p>
    </notes>
    <notes id="FPar3" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par57">The authors declare that they have no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Ameijeiras-Alonso J, Crujeiras RM, Rodríguez-Casal A. Multimode: an R package for mode assessment. 2018. arXiv [stat.CO]. arXiv. <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/1803.00472">http://arxiv.org/abs/1803.00472</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Dowle M, Srinivasan A. 2020. Data.table: extension of ‘data.frame’. <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=data.table">https://CRAN.R-project.org/package=data.table</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Firke S. 2020. Janitor: simple tools for examining and cleaning dirty data. <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=janitor">https://CRAN.R-project.org/package=janitor</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gehring</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>JH</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Thomson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Highly multiplexed single-cell RNA-Seq by DNA oligonucleotide tagging of cellular proteins</article-title>
        <source>Nat Biotechnol</source>
        <year>2020</year>
        <volume>38</volume>
        <issue>1</issue>
        <fpage>35</fpage>
        <lpage>38</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0372-z</pub-id>
        <pub-id pub-id-type="pmid">31873215</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Genge</surname>
            <given-names>PC</given-names>
          </name>
          <name>
            <surname>Roll</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Heubeck</surname>
            <given-names>AT</given-names>
          </name>
          <name>
            <surname>Swanson</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Kondza</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Lord</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Weiss</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Hernandez</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Phalen</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Thomson</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Torgerson</surname>
            <given-names>TR</given-names>
          </name>
          <name>
            <surname>Skene</surname>
            <given-names>PJ</given-names>
          </name>
          <name>
            <surname>Bumol</surname>
            <given-names>TF</given-names>
          </name>
          <name>
            <surname>Reading</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Optimized workflow for human PBMC multiomic immunosurveillance studies</article-title>
        <source>STAR Protoc</source>
        <year>2021</year>
        <volume>2</volume>
        <fpage>100900</fpage>
        <pub-id pub-id-type="doi">10.1016/j.xpro.2021.100900</pub-id>
        <pub-id pub-id-type="pmid">34806044</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hafemeister</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Normalization and variance stabilization of single-cell RNA-Seq data using regularized negative binomial regression</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <issue>1</issue>
        <fpage>296</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1874-1</pub-id>
        <pub-id pub-id-type="pmid">31870423</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Haining</surname>
            <given-names>WN</given-names>
          </name>
          <name>
            <surname>Ebert</surname>
            <given-names>BL</given-names>
          </name>
          <name>
            <surname>Aravind Subrmanian</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Wherry</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Eichbaum</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Evans</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>Mak</surname>
            <given-names>R</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Identification of an evolutionarily conserved transcriptional signature of CD8 memory differentiation that is shared by T and B cells</article-title>
        <source>J Immunol</source>
        <year>2008</year>
        <volume>181</volume>
        <issue>3</issue>
        <fpage>1859</fpage>
        <lpage>1868</lpage>
        <pub-id pub-id-type="doi">10.4049/jimmunol.181.3.1859</pub-id>
        <pub-id pub-id-type="pmid">18641323</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hao</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Hao</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Andersen-Nissen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Mauck</surname>
            <given-names>WM</given-names>
            <suffix>Jr</suffix>
          </name>
          <name>
            <surname>Zheng</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Butler</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>MJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Integrated analysis of multimodal single-cell data</article-title>
        <source>Cell</source>
        <year>2021</year>
        <volume>184</volume>
        <issue>13</issue>
        <fpage>3573</fpage>
        <lpage>87.e29</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2021.04.048</pub-id>
        <pub-id pub-id-type="pmid">34062119</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hartigan</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Hartigan</surname>
            <given-names>PM</given-names>
          </name>
        </person-group>
        <article-title>The dip test of unimodality</article-title>
        <source>Ann Stat</source>
        <year>1985</year>
        <volume>13</volume>
        <issue>1</issue>
        <fpage>70</fpage>
        <lpage>84</lpage>
        <pub-id pub-id-type="doi">10.1214/aos/1176346577</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">Kolde R. 2019. Pheatmap: pretty heatmaps. <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=pheatmap">https://CRAN.R-project.org/package=pheatmap</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Macosko</surname>
            <given-names>EZ</given-names>
          </name>
          <name>
            <surname>Basu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Nemesh</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Shekhar</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Goldman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Tirosh</surname>
            <given-names>I</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Highly parallel genome-wide expression profiling of individual cells using nanoliter droplets</article-title>
        <source>Cell</source>
        <year>2015</year>
        <volume>161</volume>
        <issue>5</issue>
        <fpage>1202</fpage>
        <lpage>1214</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2015.05.002</pub-id>
        <pub-id pub-id-type="pmid">26000488</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Petukhov V, van den Brand T, Biederstedt E. 2020. Ggrastr: Raster layers for “ggplot2.” <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=ggrastr">https://CRAN.R-project.org/package=ggrastr</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <collab>R Core Team</collab>
        </person-group>
        <source>R: a language and environment for statistical computing</source>
        <year>2021</year>
        <publisher-loc>Vienna</publisher-loc>
        <publisher-name>R Foundation for Statistical Computing</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Reback J, jbrockmendel, McKinney W, Van den Bossche J, Augspurger T, Cloud P, Hawkins S, et al. Pandas-Dev/pandas: Pandas 1.3.2. Zenodo. 2021. 10.5281/ZENODO.3509134.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Roelli P, bbimber, Flynn B, santiagorevale, Gui G. Hoohm/CITE-Seq-Count: 1.4.2. 2019. 10.5281/zenodo.2590196.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <collab>RStudio Team</collab>
        </person-group>
        <source>RStudio: integrated development environment for R</source>
        <year>2020</year>
        <publisher-loc>Boston</publisher-loc>
        <publisher-name>Rstudio, PBC</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stoeckius</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Zheng</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Houck-Loomis</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Hao</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Yeung</surname>
            <given-names>BZ</given-names>
          </name>
          <name>
            <surname>Mauck</surname>
            <given-names>WM</given-names>
          </name>
          <name>
            <surname>Smibert</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Satija</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Cell hashing with barcoded antibodies enables multiplexing and doublet detection for single cell genomics</article-title>
        <source>Genome Biol</source>
        <year>2018</year>
        <volume>19</volume>
        <issue>1</issue>
        <fpage>224</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-018-1603-1</pub-id>
        <pub-id pub-id-type="pmid">30567574</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Wickham</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <source>ggplot2: elegant graphics for data analysis</source>
        <year>2016</year>
        <publisher-name>Springer</publisher-name>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Wickham H, François R, Henry L, Müller K. Dplyr: a grammar of data manipulation. 2020. <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=dplyr">https://CRAN.R-project.org/package=dplyr</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">Wilke CO. Cowplot: streamlined plot theme and plot annotations for “ggplot2.” 2020. <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=cowplot">https://CRAN.R-project.org/package=cowplot</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zheng</surname>
            <given-names>GXY</given-names>
          </name>
          <name>
            <surname>Terry</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Belgrader</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Ryvkin</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Bent</surname>
            <given-names>ZW</given-names>
          </name>
          <name>
            <surname>Wilson</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Ziraldo</surname>
            <given-names>SB</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Massively parallel digital transcriptional profiling of single cells</article-title>
        <source>Nat Commun</source>
        <year>2017</year>
        <volume>8</volume>
        <fpage>14049</fpage>
        <pub-id pub-id-type="doi">10.1038/ncomms14049</pub-id>
        <pub-id pub-id-type="pmid">28091601</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
