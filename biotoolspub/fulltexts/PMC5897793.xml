<?properties open_access?>
<?subarticle report31445?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v3.0 20080202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing3.dtd?>
<?SourceDTD.Version 3.0?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">F1000Res</journal-id>
    <journal-id journal-id-type="iso-abbrev">F1000Res</journal-id>
    <journal-id journal-id-type="pmc">F1000Research</journal-id>
    <journal-title-group>
      <journal-title>F1000Research</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2046-1402</issn>
    <publisher>
      <publisher-name>F1000 Research Limited</publisher-name>
      <publisher-loc>London, UK</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5897793</article-id>
    <article-id pub-id-type="doi">10.12688/f1000research.14050.1</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Method Article</subject>
      </subj-group>
      <subj-group>
        <subject>Articles</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Gene Unprediction with Spurio: A tool to identify spurious protein sequences</article-title>
      <fn-group content-type="pub-status">
        <fn>
          <p>[version 1; referees: 2 approved]</p>
        </fn>
      </fn-group>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Höps</surname>
          <given-names>Wolfram</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Data Curation</role>
        <role content-type="http://credit.casrai.org/">Formal Analysis</role>
        <role content-type="http://credit.casrai.org/">Investigation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Visualization</role>
        <role content-type="http://credit.casrai.org/">Writing – Original Draft Preparation</role>
        <role content-type="http://credit.casrai.org/">Writing – Review &amp; Editing</role>
        <xref ref-type="aff" rid="a1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Jeffryes</surname>
          <given-names>Matt</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Writing – Review &amp; Editing</role>
        <xref ref-type="aff" rid="a1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bateman</surname>
          <given-names>Alex</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Data Curation</role>
        <role content-type="http://credit.casrai.org/">Methodology</role>
        <role content-type="http://credit.casrai.org/">Supervision</role>
        <role content-type="http://credit.casrai.org/">Writing – Original Draft Preparation</role>
        <role content-type="http://credit.casrai.org/">Writing – Review &amp; Editing</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-6982-4660</contrib-id>
        <xref ref-type="corresp" rid="c1">a</xref>
        <xref ref-type="aff" rid="a1">1</xref>
      </contrib>
      <aff id="a1"><label>1</label>European Molecular Biology Laboratory, European Bioinformatics Institute (EMBL-EBI), Hinxton, CB10 1SD, UK</aff>
    </contrib-group>
    <author-notes>
      <corresp id="c1">
        <label>a</label>
        <email xlink:href="mailto:AGB@ebi.ac.uk">AGB@ebi.ac.uk</email>
      </corresp>
      <fn fn-type="COI-statement">
        <p>No competing interests were disclosed.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>2</day>
      <month>3</month>
      <year>2018</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2018</year>
    </pub-date>
    <volume>7</volume>
    <elocation-id>261</elocation-id>
    <history>
      <date date-type="accepted">
        <day>27</day>
        <month>2</month>
        <year>2018</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright: © 2018 Höps W et al.</copyright-statement>
      <copyright-year>2018</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access article distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:type="simple" xlink:href="f1000research-7-15280.pdf"/>
    <abstract>
      <p>We now have access to the sequences of tens of millions of proteins. These protein sequences are essential for modern molecular biology and computational biology. The vast majority of protein sequences are derived from gene prediction tools and have no experimental supporting evidence for their translation.  Despite the increasing accuracy of gene prediction tools there likely exists a large number of spurious protein predictions in the sequence databases.  We have developed the Spurio tool to help identify spurious protein predictions in prokaryotes.  Spurio searches the query protein sequence against a prokaryotic nucleotide database using tblastn and identifies homologous sequences. The tblastn matches are used to score the query sequence’s likelihood of being a spurious protein prediction using a Gaussian process model. The most informative feature is the appearance of stop codons within the presumed translation of homologous DNA sequences. Benchmarking shows that the Spurio tool is able to distinguish spurious from true proteins. However, transposon proteins are prone to be predicted as spurious because of the frequency of degraded homologs found in the DNA sequence databases. Our initial experiments suggest that less than 1% of the proteins in the UniProtKB sequence database are likely to be spurious and that Spurio is able to identify over 60 times more spurious proteins than the AntiFam resource.</p>
      <p> The Spurio software and source code is available under an MIT license at the following URL:
<ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/bateman-group/spurio">https://bitbucket.org/bateman-group/spurio</ext-link>
</p>
    </abstract>
    <kwd-group kwd-group-type="author">
      <kwd>Gene prediction</kwd>
      <kwd>machine learning</kwd>
      <kwd>gaussian process model</kwd>
      <kwd>bioinformatics</kwd>
      <kwd>sequence analysis</kwd>
    </kwd-group>
    <funding-group>
      <award-group id="fund-1" xlink:href="http://dx.doi.org/10.13039/100012116">
        <funding-source>EMBL</funding-source>
      </award-group>
      <funding-statement>The author(s) declared that no grants were involved in supporting this work.</funding-statement>
    </funding-group>
  </article-meta>
</front>
<body>
  <sec sec-type="intro">
    <title>Introduction</title>
    <p>Sequencing of genomes has now become routine with the DNA archives containing the sequences of over 100,000 complete genomes, while the direct sequencing of proteins is still low throughput and not a routine technique. Fortunately, computational methods exist to predict the protein sequence of genes from genomic DNA sequence. At least for bacterial DNA, these methods are fast and accurate. Existing tools for bacterial gene prediction claim accuracy figures of over 99% suggesting that almost all known genes in well annotated genomes are identified by these methods
<sup><xref rid="ref-1" ref-type="bibr">1</xref></sup>. However, many extra genes are predicted, some of which may be real and some of which may be false. Even if the false positive rate of the methods is only 0.1%, then within a database of 100 million proteins like UniProt we would still expect to find 100,000 spurious protein predictions. Given the widely varying quality of gene prediction pipelines still in use
<sup><xref rid="ref-2" ref-type="bibr">2</xref></sup>, we expect that the actual number of spurious proteins is likely to be much higher. An important question to address is what fraction of sequence databases are spurious gene predictions. In this paper we begin to address this problem by creating a generic tool to identify spurious proteins.</p>
    <p>We term the task of identifying and deleting spurious gene predictions as
<italic>gene unprediction</italic>. Gene unprediction would allow for the quality control and refinement of existing genomic annotation as well as helping to identify shortcomings in existing gene prediction pipelines. One existing tool that can aid in gene unprediction is the AntiFam database
<sup><xref rid="ref-3" ref-type="bibr">3</xref></sup>. AntiFam is a collection of profile-HMM models that can be used to identify members of potentially spurious protein families. AntiFam release 4.0 contains 65 entries that identify a range of spurious proteins. Some of these models were families initially built and included into the Pfam database (RRID:SCR_004726)
<sup><xref rid="ref-4" ref-type="bibr">4</xref></sup>, but later removed when it was pointed out they contained only spurious proteins. Many more AntiFam entries were constructed to model shadow ORFs which appear on the opposite strand of well-known genes, such as the 23S rRNA
<sup><xref rid="ref-5" ref-type="bibr">5</xref></sup>. However, the AntiFam approach does not scale well. Each family requires the effort of a curator to build it and verify its status as spurious. Many spurious proteins may be singletons, appearing only once in the sequence database and so could not form a family of spurious proteins to be included in AntiFam.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods and results</title>
    <p>Our approach to identifying spurious genes is to identify stop codons in homologous genomic DNA sequences. If we see many stop codons falling within what would be the homologous protein sequence from related organisms then we will infer that this DNA region is unlikely to be under selection at the protein level and is likely to be a spurious gene prediction. Still we must expect to find stop codons in homologous DNA sequences that are not indicative of incorrect gene prediction. Firstly the homologous DNA sequence may have sequencing errors leading to erroneous stop codons. A second reason is that stop codons are sometimes recoded for amino acids. The most prevalent examples include recoding of UGA codons as tryptophan in members of Entomoplasmatales and Mycoplasmatales
<sup><xref rid="ref-6" ref-type="bibr">6</xref></sup>, and more widely, UGA can also be interpreted as selenocysteine
<sup><xref rid="ref-7" ref-type="bibr">7</xref></sup>, as well as UAG which can be recoded as pyrrolysine in archaebacteria
<sup><xref rid="ref-8" ref-type="bibr">8</xref></sup>. Pseudogenization is a real process and so we must expect some level of stop codons to be found in homologous regions of known genes. Certain organisms have a high level of pseudogenization, in particular obligate intracellular pathogens such as buchnera species may contain up to 50% of pseudogenes
<sup><xref rid="ref-9" ref-type="bibr">9</xref></sup>.</p>
    <p>Here we describe two examples that illustrate the concept of identifying spurious proteins by inspecting homologous DNA sequence. The first example is from a known spurious protein identified by the AntiFam resource. This protein is an uncharacterized protein from the microbe
<italic>Acinetobacter bereziniae</italic> (UniProt accession:
<ext-link ext-link-type="uri" xlink:href="http://www.uniprot.org/uniprot/N8YUQ2">N8YUQ2</ext-link>) which was revealed to be a translated CRISPR YPRES repeat sequence. In
<xref ref-type="fig" rid="f1">Figure 1A</xref> below we show a summary visualization of the tblastn output, with each line representing a similar DNA sequence. Stop codons are identified with white pixels and give the appearance of snow falling, hence we call these blizzard plots. This is a clear case where almost every homologous DNA sequence contains stop codons throughout the alignment.</p>
    <fig fig-type="figure" id="f1" orientation="portrait" position="anchor">
      <label>Figure 1. </label>
      <caption>
        <title>Example blizzard plots of two proteins.</title>
        <p>(
<bold>A</bold>) A blizzard plot of
<italic>Acinetobacter bereziniae</italic> protein F963_00691 (UniProt accession: N8YUQ2). (
<bold>B</bold>) Apolipoprotein N-acyltransferase from
<italic>Mycobacterium smegmatis</italic> (UniProt:
<italic/> A0QZ13). Each row on the plot shows the alignment region of potential protein from the tblastn search. Stop codons are shown as white pixels and methionine codons are shown as red pixels. The significance level of the match is indicated by the rainbow colour scale on the right.</p>
      </caption>
      <graphic xlink:href="f1000research-7-15280-g0000"/>
    </fig>
    <p>The second example (
<xref ref-type="fig" rid="f1">Figure 1B</xref>) shows an example protein from UniProtKB/Swiss-Prot (Apolipoprotein N-acyltransferase from
<italic>Mycobacterium smegmatis</italic> (UniProt:
<ext-link ext-link-type="uri" xlink:href="A0QZ13">A0QZ13</ext-link>)). The plot is almost totally devoid of stop codons within the aligned regions. The single example stop codon is very close to the C-terminus of the protein meaning it is likely a benign change. It is interesting to see that there are black dots also within the similar sequences which represent deletions in the homologous sequence that occur in the multiple of three bases. This represents an additional line of evidence for the coding potential of the query sequence.</p>
    <sec>
      <title>Description of Spurio tool</title>
      <p>The Spurio tool is based on running the tblastn software (RRID:SCR_011822) (we have used BLAST version 2.7.1+) using the query protein to search against a collection of microbial genome sequences. The tblastn output is parsed to include only matches more significant than the threshold E-value. We explored a range of E-values in the benchmarking and identified 10 to be a good balance between precision and recall. For the genome collection, we chose a non-redundant set of 1,507 full genomes of bacteria and archaea provided by the ENA genome database
<sup><xref rid="ref-10" ref-type="bibr">10</xref></sup>. As we mentioned earlier, Entomoplasmatales and Mycoplasmatales use an alternative genetic code, in which the UGA codon is interpreted as tryptophan
<sup><xref rid="ref-6" ref-type="bibr">6</xref></sup>. To account for this, these bacteria are processed in a separate homology search where the correct genetic code is used.</p>
    </sec>
    <sec>
      <title>Feature extraction and preprocessing</title>
      <p>Our tool proceeds to transform the results of the homology search, which can be visualized as a blizzard plot, into a probability estimate for the underlying sequence to be spurious. To perform this classification, Spurio extracts three features from the set of homologous sequences. The central one, describing the relative amount of stop codons, is given in the
<xref ref-type="other" rid="e1">equation F1</xref> below. The '+1' pseudocount is a compromise for the logarithm to be applicable even if zero stop codons are found. Note also that stop codons are only counted if they fall within the region of similarity reported by tblastn. Finally, because homologous over-extension of alignments
<sup><xref rid="ref-11" ref-type="bibr">11</xref></sup> can cause pairwise alignments to extend into non-homologous regions, we only count stop codons if they fall within the body of the tblastn matching region (Not within the first or last 10 amino acids of match positions). Additionally, Spurio uses the logarithmized number of homologous sequence hits (
<xref ref-type="other" rid="e2">Equation F2</xref>) and the protein sequence length (
<xref ref-type="other" rid="e3">Equation F3</xref>) as features, which together describe the dimensions of the corresponding blizzard plot.</p>
      <p>
        <disp-formula id="e1">
          <mml:math id="M1">
            <mml:mi>F</mml:mi>
            <mml:mn>1</mml:mn>
            <mml:mspace width="0.2em"/>
            <mml:mo>=</mml:mo>
            <mml:mi>l</mml:mi>
            <mml:mi>o</mml:mi>
            <mml:mi>g</mml:mi>
            <mml:mspace width="0.2em"/>
            <mml:mfrac>
              <mml:mrow>
                <mml:mi>N</mml:mi>
                <mml:mi>u</mml:mi>
                <mml:mi>m</mml:mi>
                <mml:mi>b</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>r</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>o</mml:mi>
                <mml:mi>f</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>s</mml:mi>
                <mml:mi>t</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mi>p</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>c</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mi>d</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mi>n</mml:mi>
                <mml:mi>s</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>a</mml:mi>
                <mml:mi>c</mml:mi>
                <mml:mi>r</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mi>s</mml:mi>
                <mml:mi>s</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>a</mml:mi>
                <mml:mi>l</mml:mi>
                <mml:mi>l</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>m</mml:mi>
                <mml:mi>a</mml:mi>
                <mml:mi>t</mml:mi>
                <mml:mi>c</mml:mi>
                <mml:mi>h</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>d</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>s</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>q</mml:mi>
                <mml:mi>u</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>n</mml:mi>
                <mml:mi>c</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>s</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mo>+</mml:mo>
                <mml:mspace width="0.2em"/>
                <mml:mn>1</mml:mn>
              </mml:mrow>
              <mml:mrow>
                <mml:mi>T</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mi>t</mml:mi>
                <mml:mi>a</mml:mi>
                <mml:mi>l</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>n</mml:mi>
                <mml:mi>u</mml:mi>
                <mml:mi>m</mml:mi>
                <mml:mi>b</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>r</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>o</mml:mi>
                <mml:mi>f</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>a</mml:mi>
                <mml:mi>m</mml:mi>
                <mml:mi>i</mml:mi>
                <mml:mi>n</mml:mi>
                <mml:mi>o</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>a</mml:mi>
                <mml:mi>c</mml:mi>
                <mml:mi>i</mml:mi>
                <mml:mi>d</mml:mi>
                <mml:mi>s</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>i</mml:mi>
                <mml:mi>n</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>a</mml:mi>
                <mml:mi>l</mml:mi>
                <mml:mi>l</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>m</mml:mi>
                <mml:mi>a</mml:mi>
                <mml:mi>t</mml:mi>
                <mml:mi>c</mml:mi>
                <mml:mi>h</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>d</mml:mi>
                <mml:mspace width="0.2em"/>
                <mml:mi>s</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>q</mml:mi>
                <mml:mi>u</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>n</mml:mi>
                <mml:mi>c</mml:mi>
                <mml:mi>e</mml:mi>
                <mml:mi>s</mml:mi>
              </mml:mrow>
            </mml:mfrac>
          </mml:math>
        </disp-formula>
      </p>
      <p>
        <disp-formula id="e2">
          <mml:math id="M2">
            <mml:mrow>
              <mml:mi>F</mml:mi>
              <mml:mn>2</mml:mn>
              <mml:mspace width="0.2em"/>
              <mml:mo>=</mml:mo>
              <mml:mi>l</mml:mi>
              <mml:mi>o</mml:mi>
              <mml:mi>g</mml:mi>
              <mml:mo stretchy="false">(</mml:mo>
              <mml:mi>N</mml:mi>
              <mml:mi>u</mml:mi>
              <mml:mi>m</mml:mi>
              <mml:mi>b</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>r</mml:mi>
              <mml:mspace width="0.2em"/>
              <mml:mi>o</mml:mi>
              <mml:mi>f</mml:mi>
              <mml:mspace width="0.2em"/>
              <mml:mi>h</mml:mi>
              <mml:mi>o</mml:mi>
              <mml:mi>m</mml:mi>
              <mml:mi>o</mml:mi>
              <mml:mi>l</mml:mi>
              <mml:mi>o</mml:mi>
              <mml:mi>g</mml:mi>
              <mml:mi>o</mml:mi>
              <mml:mi>u</mml:mi>
              <mml:mi>s</mml:mi>
              <mml:mspace width="0.2em"/>
              <mml:mi>s</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>q</mml:mi>
              <mml:mi>u</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>n</mml:mi>
              <mml:mi>c</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>s</mml:mi>
              <mml:mo stretchy="false">)</mml:mo>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
      <p>
        <disp-formula id="e3">
          <mml:math id="M3">
            <mml:mrow>
              <mml:mi>F</mml:mi>
              <mml:mn>3</mml:mn>
              <mml:mspace width="0.2em"/>
              <mml:mo>=</mml:mo>
              <mml:mi>l</mml:mi>
              <mml:mi>o</mml:mi>
              <mml:mi>g</mml:mi>
              <mml:mo stretchy="false">(</mml:mo>
              <mml:mi>S</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>q</mml:mi>
              <mml:mi>u</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>n</mml:mi>
              <mml:mi>c</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>
</mml:mi>
              <mml:mi>l</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>n</mml:mi>
              <mml:mi>g</mml:mi>
              <mml:mi>t</mml:mi>
              <mml:mi>h</mml:mi>
              <mml:mo stretchy="false">)</mml:mo>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
    </sec>
    <sec>
      <title>Probabilistic classification</title>
      <p>Having extracted and preprocessed features, we use a probabilistic Gaussian process classifier
<sup><xref rid="ref-12" ref-type="bibr">12</xref></sup> to estimate the probability of a protein to be spurious. As a supervised learning technique, the Gaussian process classifier is dependent on training samples to infer the underlying feature distribution. For this, we created a balanced sample set of protein sequences. The positive set is composed of 3,107 likely spurious proteins derived from the AntiFam resource (version 4.0) (See
<xref ref-type="other" rid="SF1">Supplementary File 1</xref>). The negative control set of 3,107 proteins that are genuinely translated were randomly selected from UniProtKB/Swiss-Prot (RRID:SCR_002380) (See
<xref ref-type="other" rid="SF1">Supplementary File 1</xref>). The distribution of these sample sequences after preprocessing suggests that the feature space is adequate for the separation of real and spurious sequences (see
<xref ref-type="fig" rid="f2">Figure 2</xref>).</p>
      <fig fig-type="figure" id="f2" orientation="portrait" position="anchor">
        <label>Figure 2. </label>
        <caption>
          <title>Scatter plots of the separation of AntiFam versus Swiss-Prot proteins.</title>
          <p>Protein sequences were sampled from either Swiss-Prot (3,107 sequences shown in blue) or AntiFam (3,107 spurious sequence shown in orange). After preprocessing, every protein sequence is represented by a single dot in three-dimensional space. This dataset was later used for the training and testing a probabilistic classifier. (
<bold>A</bold>) Shows the log length versus the normalised log of the stop codons per aligned position. (
<bold>B</bold>) Shows the log number of tblastn hits versus the normalised log of the stop codons per aligned position. The raw data set can be found associated with this paper.</p>
        </caption>
        <graphic xlink:href="f1000research-7-15280-g0001"/>
      </fig>
      <p>On this set of sample data, we trained a Gaussian process model with a radial basis function kernel implemented in the python package scikit-learn
<sup><xref rid="ref-13" ref-type="bibr">13</xref></sup>.
<xref ref-type="fig" rid="f3">Figure 3</xref> shows the model after training on all samples, overlaid with 500 test samples. The performance for the whole approach is reviewed in the following section.</p>
      <fig fig-type="figure" id="f3" orientation="portrait" position="anchor">
        <label>Figure 3. </label>
        <caption>
          <title>A Gaussian process classifier is used to assign probability scores to sequences, describing their likelihood to be spurious.</title>
          <p>Sequences classified as spurious are coloured blue and non-spurious proteins are coloured orange. The classification is performed in three dimensions. Shown above are cross-sections along the sequence length dimension. 500 test data samples are projected to the nearest layer in this plot. 8-fold cross validation suggests a mean prediction accuracy of 96.8%.</p>
        </caption>
        <graphic xlink:href="f1000research-7-15280-g0002"/>
      </fig>
    </sec>
    <sec>
      <title>Benchmarking of Spurio method</title>
      <p>The Spurio software (version 1.0) was tested using 8-fold cross validation on the previously described set of 3,107 samples per class. This led to 8 iterations of 5,438 training- and 776 test samples each. Based on this procedure, we report a mean accuracy of 96.8% (training: 97.0%) and area under the curve of 0.991 (training: 0.992). The results are summarized in
<xref ref-type="fig" rid="f4">Figure 4</xref>.</p>
      <fig fig-type="figure" id="f4" orientation="portrait" position="anchor">
        <label>Figure 4. </label>
        <caption>
          <title>Benchmarking plots for Spurio based on 8-fold cross-validation using 5,438 training and 776 test samples per fold.</title>
          <p>The transparent lines represent the individual results of each cross-validation run, the mean over all runs is shown in blue. (
<bold>A</bold>) Receiver Operator Characteristic curve. (
<bold>B</bold>) Precision-Recall curve. (
<bold>C</bold>) Calibration plot showing the reliability of the model versus a perfectly calibrated model.</p>
        </caption>
        <graphic xlink:href="f1000research-7-15280-g0003"/>
      </fig>
    </sec>
    <sec>
      <title>Practical application of the Spurio method</title>
      <p>To further understand the performance of Spurio we ran it on 100,000 random bacterial proteins (See
<xref ref-type="other" rid="SF2">Supplementary File 2</xref>) from UniProtKB/TrEMBL version 2017_12 in order to estimate the number of spurious proteins (See
<xref ref-type="other" rid="SF3">Supplementary File 3</xref>). 5,392 Sequences did not yield any homologous sequences and were excluded. How the remaining proteins are distributed in the probability space of the Gaussian process classifier is shown in
<xref ref-type="fig" rid="f5">Figure 5</xref>. We see that the large majority of spurious proteins are found to be in the shorter length ranges of 30–150 amino acids as we might expect from incorrect gene predictions. As expected, we identify many more real than spurious proteins.</p>
      <fig fig-type="figure" id="f5" orientation="portrait" position="anchor">
        <label>Figure 5. </label>
        <caption>
          <title>Distribution of 100,000 TrEMBL matches projected onto the Gaussian process classifier probability space.</title>
          <p>The Spurio output data can be found associated with the paper.</p>
        </caption>
        <graphic xlink:href="f1000research-7-15280-g0004"/>
      </fig>
      <p>To illustrate the predictions by Spurio we have selected a representative example, the AZOBR_140218 protein from
<italic>Azospirillum brasilense</italic> (UniProt:
<ext-link ext-link-type="uri" xlink:href="http://www.uniprot.org/uniprot/G8AMM6">G8AMM6</ext-link>). This protein is 648 amino acids long and so would appear to be very likely a true protein coding gene. However, Spurio gives it a probability score of 0.979 indicating it is very likely to be Spurious. Inspection of the Blizzard plot (
<xref ref-type="fig" rid="f6">Figure 6</xref>) shows that the DNA homologues of this sequence have a large number of stop codons. Further investigation shows that this protein is on the opposite strand to the translational GTPase TypA (UniProt:
<ext-link ext-link-type="uri" xlink:href="http://www.uniprot.org/uniprot/A0A060DFP7">A0A060DFP7</ext-link>) which strongly suggests that the AZOBR_140218 protein is indeed spurious and is a shadow ORF. Interestingly searching this spurious protein for homologues identifies many proteins including some that are erroneously annotated as the enzyme 1-deoxy-D-xylulose 5-phosphate reductoisomerase (see UniProt:
<ext-link ext-link-type="uri" xlink:href="http://www.uniprot.org/uniprot/R5CSG3">R5CSG3</ext-link> as an example).</p>
      <fig fig-type="figure" id="f6" orientation="portrait" position="anchor">
        <label>Figure 6. </label>
        <caption>
          <title>A blizzard plot of AZOBR_140218 protein from
<italic>Azospirillum brasilense</italic> (UniProt: G8AMM6).</title>
          <p>See
<xref ref-type="fig" rid="f1">Figure 1</xref> for a description of the features of the blizzard plot.</p>
        </caption>
        <graphic xlink:href="f1000research-7-15280-g0005"/>
      </fig>
      <p>If we select an arbitrary threshold of 0.8 or greater to represent a spurious protein then 0.82% of the 100,000 sample of proteins are predicted to be spurious. Of these 26% have matches to Pfam which is somewhat surprising (see
<xref ref-type="table" rid="T1">Table 1</xref>). However, if we consider proteins with no Pfam match we find that 3.8% of them have a Spurio score &gt; 0.8 compared to just 0.25% of proteins with a Pfam match. Thus proteins with no Pfam match are 15 times more likely to be predicted as spurious than those with a Pfam match. If we search the sample of 100,000 proteins with AntiFam we find it identifies only 12 that are spurious (see
<xref ref-type="other" rid="SF4">Supplementary File 4</xref>). Therefore, Spurio is able to identify 62 times more spurious proteins than AntiFam. Of the 12 AntiFam matched proteins, 9 had Spurio scores of 0.97 or greater. The results of the AntiFam search can be found in
<xref ref-type="other" rid="SM1">Supplementary materials</xref>.</p>
      <table-wrap id="T1" orientation="portrait" position="anchor">
        <label>Table 1. </label>
        <caption>
          <title>Contingency table showing the number of matches with Spurio scores &gt;= 0.8 versus the presence of a match to Pfam.</title>
        </caption>
        <table frame="hsides" rules="groups" content-type="article-table">
          <thead>
            <tr>
              <th align="left" valign="top" rowspan="1" colspan="1"/>
              <th align="left" valign="top" rowspan="1" colspan="1">No Pfam match</th>
              <th align="left" valign="top" rowspan="1" colspan="1">Pfam match</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <bold>Spurio score &gt;= 0.8</bold>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">551</td>
              <td align="left" valign="top" rowspan="1" colspan="1">193</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <bold>Spurio score &lt; 0.8</bold>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">13, 863</td>
              <td align="left" valign="top" rowspan="1" colspan="1">75, 638</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>It is interesting to highlight an example where Spurio does did not match a protein that AntiFam did. If we take the example ALP79_101044 (UniProt:
<ext-link ext-link-type="uri" xlink:href="http://www.uniprot.org/uniprot/A0A0W8HJ99">A0A0W8HJ99</ext-link>) we find that it has a Spurio score of 0.14 and has a strong Pfam match to the FAD_binding_3 family (Pfam:
<ext-link ext-link-type="uri" xlink:href="https://pfam.xfam.org/family/PF01494">PF01494</ext-link>). The blizzard plot (
<xref ref-type="fig" rid="f7">Figure 7</xref>) shows that there is very little similarity detected to other organisms in the N-terminal 100 amino acids. It has an AntiFam match at the N-terminus of the protein from residues 1-25 to a translation of a tRNA. It seems likely that the protein should start at the methionine which is at position 31 of the existing sequence in UniProt.</p>
      <fig fig-type="figure" id="f7" orientation="portrait" position="anchor">
        <label>Figure 7. </label>
        <caption>
          <title>A blizzard plot of ALP79_101044 protein from
<italic>Pseudomonas savastanoi pv. fraxini</italic> (UniProt: A0A0W8HJ99).</title>
          <p>See
<xref ref-type="fig" rid="f1">Figure 1</xref> for a description of the features of the blizzard plot. The Pfam domain architecture of this protein has been added at the top of the figure.</p>
        </caption>
        <graphic xlink:href="f1000research-7-15280-g0006"/>
      </fig>
      <p>We continued to investigate whether sequences predicted as spurious are less likely to be members of existing protein families in Pfam than those sequences predicted to be true proteins. We would expect that spurious proteins would be unlikely to fall into Pfam families and so in a perfect world we would see the expected number of Pfam matches at a Spurio score of 0 and see no Pfam matches at a Spurio score approaching 1.
<xref ref-type="fig" rid="f8">Figure 8</xref> shows that in the 100,000 sequences from TrEMBL this is the case for predicted values from zero up to 0.6. But above that value we see an excess of matches to Pfam. To understand what is causing this excess of matches to families we created a list of the top ten most frequently occurring Pfam families, shown in
<xref ref-type="table" rid="T2">Table 2</xref>. Inspection shows that eight out of the top ten Pfam families are related to transposon function. It is known that there can be many copies of degraded transposons within a genome. The larger than normal number of these degraded copies compared to proteins with normal cellular functions makes them appear to be spurious proteins.</p>
      <table-wrap id="T2" orientation="portrait" position="anchor">
        <label>Table 2. </label>
        <caption>
          <title>Table showing the ten most prevalent Pfam families among proteins with Spurio scores &gt;= 0.8.</title>
          <p>Pfam accessions for the families that are likely to be transposon associated are underlined.</p>
        </caption>
        <table frame="hsides" rules="groups" content-type="article-table">
          <thead>
            <tr>
              <th align="left" valign="top" rowspan="1" colspan="1">Pfam accession / Pfam identifier</th>
              <th align="left" valign="top" rowspan="1" colspan="1">Number of matches</th>
              <th align="left" valign="top" rowspan="1" colspan="1">Pfam description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <underline>PF13610 / DDE_Tnp_IS240</underline>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">14</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Transposase DDE domain</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">PF00313 / CSD</td>
              <td align="left" valign="top" rowspan="1" colspan="1">10</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Cold-shock domain</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <underline>PF01609 / DDE_Tnp_1</underline>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">9</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Transposase DDE domain</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <underline>PF03400 / DDE_Tnp_IS1</underline>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">8</td>
              <td align="left" valign="top" rowspan="1" colspan="1">IS1 Transposase</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <underline>PF14104 / DUF4277</underline>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">8</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Domain of unknown function (DUF4277)</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <underline>PF13340 / DUF4096</underline>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">8</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Putative transposase</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <underline>PF13586 / DDE_Tnp_1_2</underline>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">7</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Transposase DDE domain</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">PF00936 / BMC</td>
              <td align="left" valign="top" rowspan="1" colspan="1">6</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Bacterial Microcompartment domain</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <underline>PF00239 / Resolvase</underline>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">6</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Resolvase, N-terminal domain</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">
                <underline>PF13358 / DDE_3</underline>
              </td>
              <td align="left" valign="top" rowspan="1" colspan="1">5</td>
              <td align="left" valign="top" rowspan="1" colspan="1">DDE superfamily endonuclease</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <fig fig-type="figure" id="f8" orientation="portrait" position="anchor">
        <label>Figure 8. </label>
        <caption>
          <title>Histogram showing the proportion of sequences matching Pfam across the range of Spurio scores.</title>
          <p>5,392 Sequences did not yield any homologous sequences and were excluded. Another 4,363 samples were processed by spurio, but were released later than the current version in InterPro and were thus excluded. The plot shows the remaining 90,245 sequences.</p>
        </caption>
        <graphic xlink:href="f1000research-7-15280-g0007"/>
      </fig>
      <p>We expected that selenoproteins may present problems for the Spurio method. To examine this we took an example selenoprotein GrdA from
<italic>Carboxydothermus hydrogenoformans</italic> (UniProt:
<ext-link ext-link-type="uri" xlink:href="http://www.uniprot.org/uniprot/Q3A9J5">Q3A9J5</ext-link>) and ran Spurio on it. We found that indeed it was scored as 0.891 probability to be spurious (see
<xref ref-type="fig" rid="f9">Figure 9</xref>). One can clearly see in the blizzard plot the conserved selenocysteine position as a column of stop codons. It is interesting to note that selenoproteins that have been mispredicted to contain premature stop codons are unlikely to be predicted as spurious.</p>
      <fig fig-type="figure" id="f9" orientation="portrait" position="anchor">
        <label>Figure 9. </label>
        <caption>
          <title>A blizzard plot of the selenoprotein GrdA from
<italic>Carboxydothermus hydrogenoformans</italic> (UniProt: Q3A9J5).</title>
          <p>See
<xref ref-type="fig" rid="f1">Figure 1</xref> for a description of the features of the blizzard plot.</p>
        </caption>
        <graphic xlink:href="f1000research-7-15280-g0008"/>
      </fig>
    </sec>
  </sec>
  <sec sec-type="discussion">
    <title>Discussion</title>
    <p>The identification of spurious genes is an area of genomic annotation that has received very little attention. This is partly due to the difficulty of proving that a gene is not expressed in any condition. We have made a generic tool to discover spuriously predicted proteins from bacterial genome sequences. Our attempt is reasonably successful, but we find that while we can indicate likely spurious genes, there are some failure modes that mean that the Spurio results should be considered indicative and that they will require inspection for some applications. For example, transposon related genes are apt to be predicted as spurious because they have many pseudogenized homologues. It may be possible that this could be turned into a positive attribute to help identify regions of a genome with high predicted spuriousity that may be transposons.</p>
    <p>In order to improve the accuracy of Spurio we recommend that users focus on proteins that do not fall into known Pfam families as well as short proteins less than 150 amino acids in length. A use case where Spurio may be particularly appropriate is in the case of overlapping genes. If genes are called on opposite strands then Spurio could be used to detect if either or both the genes may be due to spurious gene prediction. A preliminary study of 21,452 genes in overlapping pairs (&gt;50 nucleotide overlap) showed that 8.7% (1,867) of them had a Spurio score of 0.8 or higher (See
<xref ref-type="other" rid="SF5">Supplementary File 5</xref>).</p>
    <p>Spurio could be further developed by the addition of new features for training the model. Possible features could include the fraction of residues covered by Pfam domains. We would expect that spuriousness would negatively correlate with this feature. Also the number or proportion of insertions or deletions may carry useful information to discriminate real from spurious genes. It is worth noting that Pearson showed that protein sequences are essentially random and so features based on protein sequence or composition may not be informative
<sup><xref rid="ref-14" ref-type="bibr">14</xref></sup>. Because we have found that transposons have a propensity to be predicted as spurious it may be beneficial to have a feature that measures how many times a protein matches within a particular genome, i.e. the average copy number. Transposons are often found in multiple copies per genome. We might expect this to be higher for transposon proteins.</p>
    <p>Although we did not see amino acid recoding to be an important factor in testing Spurio, it would be possible to attempt to make an ab initio prediction of recoding of stop codons. For example if we saw a TGA stop codon was consistently aligned to cysteine residues in the tblastn output we could predict that stop codon as a selenocysteine position. This may make an incremental enhancement of prediction accuracy.</p>
    <p>With a method to assess the level of spurious proteins in hand we can assess the quality of a variety of protein sequence datasets. One future avenue to explore, would be to use Spurio as a quality control metric for complete proteomes. By looking at the fraction of predicted spurious proteins on a per proteome basis one could assign a quality index. In addition, we could also investigate how the quality of protein datasets has changed over time. It has been suggested that the quality of databases and their annotations may degenerate over time due to new protein sequences being based on previous erroneous protein sequences. Spurio gives us an initial estimate of 0.82% of TrEMBL proteins being spurious. Depending on your perspective this might be considered reassuringly low, or alarmingly high. Whatever your perspective, we believe that Spurio gives us a new and important tool to address issues of gene misprediction and we hope this will motivate further work in the area of gene unprediction.</p>
  </sec>
  <sec>
    <title>Operation</title>
    <p>To run
<italic>Spurio</italic>,
<italic>blast</italic>
<sup><xref rid="ref-15" ref-type="bibr">15</xref></sup> and
<italic>bedtools</italic>
<sup><xref rid="ref-16" ref-type="bibr">16</xref></sup> must first be installed.
<italic>Spurio</italic> has several Python dependencies, which are listed in the
<italic>requirements.txt</italic> file.
<italic>Spurio</italic> requires Python 3.</p>
  </sec>
  <sec>
    <title>Software availability</title>
    <p>Spurio software and source code is available at:
<ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/bateman-group/spurio">https://bitbucket.org/bateman-group/spurio</ext-link>
</p>
    <p>Archived source code as at time of publication:
<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.1184437">https://doi.org/10.5281/zenodo.1184437</ext-link>
<sup><xref rid="ref-17" ref-type="bibr">17</xref></sup>
</p>
    <p>License: MIT</p>
  </sec>
</body>
<back>
  <sec id="SM1" sec-type="supplementary-material">
    <title>Supplementary material</title>
    <p id="SF1"><bold>Supplementary File 1: Training data for the Spurio classifier.</bold> This file contains the 3,107 positive AntiFam proteins and the negative set of 3,107 UniProtKB/Swiss-Prot proteins. As well as the UniProtKB identifier we include the feature values used by the classifier.</p>
    <p>
      <supplementary-material content-type="local-data" id="S0">
        <media xlink:href="f1000research-7-15280-s0000.tgz">
          <caption>
            <p>Click here for additional data file.</p>
          </caption>
        </media>
      </supplementary-material>
    </p>
    <p id="SF2"><bold>Supplementary File 2: List of the 100,000 protein sample from UniProtKB/TrEMBL.</bold> List accession numbers of the 100,000 bacterial protein sample randomly taken from UniProtKB/TrEMBL from UniProtKB version 2017_12.</p>
    <p>
      <supplementary-material content-type="local-data" id="S1">
        <media xlink:href="f1000research-7-15280-s0001.tgz">
          <caption>
            <p>Click here for additional data file.</p>
          </caption>
        </media>
      </supplementary-material>
    </p>
    <p id="SF3"><bold>Supplementary File 3: Spurio matches to the 100,000 sample of UniProtKB/TrEMBL.</bold> This file contains the Spurio match data for the 94,602 proteins which could be scored by Spurio from the 100,000 random TrEMBL sample sequences. Column 1 contains the TrEMBL accession, column 2 contains the Spurio score, Columns 3 to 5 contain the feature values used by the Spurio classifier.</p>
    <p>
      <supplementary-material content-type="local-data" id="S2">
        <media xlink:href="f1000research-7-15280-s0002.tgz">
          <caption>
            <p>Click here for additional data file.</p>
          </caption>
        </media>
      </supplementary-material>
    </p>
    <p id="SF4"><bold>Supplementary File 4: AntiFam matches to the 100,000 sample of UniProtKB/TrEMBL.</bold> This tab delimited file describes the 12 AntiFam matches found in the 100,000 random TrEMBL sample sequences. The Spurio scores for each are included for reference.</p>
    <p>
      <supplementary-material content-type="local-data" id="S3">
        <media xlink:href="f1000research-7-15280-s0003.tgz">
          <caption>
            <p>Click here for additional data file.</p>
          </caption>
        </media>
      </supplementary-material>
    </p>
    <p id="SF5"><bold>Supplementary File 5: Spurio matches to the 21,452 overlapping proteins from UniProtKB/TrEMBL.</bold> This file contains the Spurio match data for the 21,452 overlapping proteins sampled from UniProtKB/TrEMBL. Column 1 contains the TrEMBL accession, column 2 contains the Spurio score, Columns 3 to 5 contain the feature values used by the Spurio classifier.</p>
    <p>
      <supplementary-material content-type="local-data" id="S4">
        <media xlink:href="f1000research-7-15280-s0004.tgz">
          <caption>
            <p>Click here for additional data file.</p>
          </caption>
        </media>
      </supplementary-material>
    </p>
  </sec>
  <ref-list>
    <ref id="ref-1">
      <label>1</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Delcher</surname><given-names>AL</given-names></name><name><surname>Bratke</surname><given-names>KA</given-names></name><name><surname>Powers</surname><given-names>EC</given-names></name><etal/></person-group>:
<article-title>Identifying bacterial genes and endosymbiont DNA with Glimmer.</article-title><source><italic>Bioinformatics.</italic></source><year>2007</year>;<volume>23</volume>(<issue>6</issue>):<fpage>673</fpage>–<lpage>9</lpage>.
<pub-id pub-id-type="doi">10.1093/bioinformatics/btm009</pub-id><!--<pub-id pub-id-type="pmcid">2387122</pub-id>--><?supplied-pmid 17237039?><pub-id pub-id-type="pmid">17237039</pub-id></mixed-citation>
    </ref>
    <ref id="ref-2">
      <label>2</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wood</surname><given-names>DE</given-names></name><name><surname>Lin</surname><given-names>H</given-names></name><name><surname>Levy-Moonshine</surname><given-names>A</given-names></name><etal/></person-group>:
<article-title>Thousands of missed genes found in bacterial genomes and their analysis with COMBREX.</article-title><source><italic>Biol Direct.</italic></source><year>2012</year>;<volume>7</volume>:<fpage>37</fpage>.
<pub-id pub-id-type="doi">10.1186/1745-6150-7-37</pub-id><!--<pub-id pub-id-type="pmcid">3534567</pub-id>--><?supplied-pmid 23111013?><pub-id pub-id-type="pmid">23111013</pub-id></mixed-citation>
    </ref>
    <ref id="ref-3">
      <label>3</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eberhardt</surname><given-names>RY</given-names></name><name><surname>Haft</surname><given-names>DH</given-names></name><name><surname>Punta</surname><given-names>M</given-names></name><etal/></person-group>:
<article-title>AntiFam: a tool to help identify spurious ORFs in protein annotation.</article-title><source><italic>Database (Oxford).</italic></source><year>2012</year>;<volume>2012</volume>:<fpage>bas003</fpage>.
<pub-id pub-id-type="doi">10.1093/database/bas003</pub-id><!--<pub-id pub-id-type="pmcid">3308159</pub-id>--><?supplied-pmid 22434837?><pub-id pub-id-type="pmid">22434837</pub-id></mixed-citation>
    </ref>
    <ref id="ref-4">
      <label>4</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Finn</surname><given-names>RD</given-names></name><name><surname>Coggill</surname><given-names>P</given-names></name><name><surname>Eberhardt</surname><given-names>RY</given-names></name><etal/></person-group>:
<article-title>The Pfam protein families database: towards a more sustainable future.</article-title><source><italic>Nucleic Acids Res.</italic></source><year>2016</year>;<volume>44</volume>(<issue>D1</issue>):<fpage>D279</fpage>–<lpage>85</lpage>.
<pub-id pub-id-type="doi">10.1093/nar/gkv1344</pub-id><!--<pub-id pub-id-type="pmcid">4702930</pub-id>--><?supplied-pmid 26673716?><pub-id pub-id-type="pmid">26673716</pub-id></mixed-citation>
    </ref>
    <ref id="ref-5">
      <label>5</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tripp</surname><given-names>HJ</given-names></name><name><surname>Hewson</surname><given-names>I</given-names></name><name><surname>Boyarsky</surname><given-names>S</given-names></name><etal/></person-group>:
<article-title>Misannotations of rRNA can now generate 90% false positive protein matches in metatranscriptomic studies.</article-title><source><italic>Nucleic Acids Res.</italic></source><year>2011</year>;<volume>39</volume>(<issue>20</issue>):<fpage>8792</fpage>–<lpage>802</lpage>.
<pub-id pub-id-type="doi">10.1093/nar/gkr576</pub-id><!--<pub-id pub-id-type="pmcid">3203614</pub-id>--><?supplied-pmid 21771858?><pub-id pub-id-type="pmid">21771858</pub-id></mixed-citation>
    </ref>
    <ref id="ref-6">
      <label>6</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bové</surname><given-names>JM</given-names></name></person-group>:
<article-title>Molecular Features of Mollicutes.</article-title><source><italic>Clin Infect Dis.</italic></source><year>1993</year>;<volume>17</volume>(<issue>Suppl 1</issue>):<fpage>S10</fpage>–<lpage>31</lpage>.
<pub-id pub-id-type="doi">10.1093/clinids/17.Supplement_1.S10</pub-id><?supplied-pmid 7691196?><pub-id pub-id-type="pmid">7691196</pub-id></mixed-citation>
    </ref>
    <ref id="ref-7">
      <label>7</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zinoni</surname><given-names>F</given-names></name><name><surname>Birkmann</surname><given-names>A</given-names></name><name><surname>Stadtman</surname><given-names>TC</given-names></name><etal/></person-group>:
<article-title>Nucleotide sequence and expression of the selenocysteine-containing polypeptide of formate dehydrogenase (formate-hydrogen-lyase-linked) from Escherichia coli.</article-title><source><italic>Proc Natl Acad Sci U S A.</italic></source><year>1986</year>;<volume>83</volume>(<issue>13</issue>):<fpage>4650</fpage>–<lpage>4</lpage>.
<!--<pub-id pub-id-type="pmcid">323799</pub-id>--><?supplied-pmid 2941757?><pub-id pub-id-type="pmid">2941757</pub-id></mixed-citation>
    </ref>
    <ref id="ref-8">
      <label>8</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Srinivasan</surname><given-names>G</given-names></name><name><surname>James</surname><given-names>CM</given-names></name><name><surname>Krzycki </surname><given-names>JA</given-names></name></person-group>:
<article-title>Pyrrolysine Encoded by UAG in Archaea: Charging of a UAG-Decoding Specialized tRNA.</article-title><source><italic>Science.</italic></source><year>2002</year>;<volume>296</volume>(<issue>5572</issue>):<fpage>1459</fpage>–<lpage>62</lpage>.
<pub-id pub-id-type="doi">10.1126/science.1069588</pub-id><?supplied-pmid 12029131?><pub-id pub-id-type="pmid">12029131</pub-id></mixed-citation>
    </ref>
    <ref id="ref-9">
      <label>9</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Liu</surname><given-names>Y</given-names></name><name><surname>Harrison</surname><given-names>PM</given-names></name><name><surname>Kunin</surname><given-names>V</given-names></name><etal/></person-group>:
<article-title>Comprehensive analysis of pseudogenes in prokaryotes: widespread gene decay and failure of putative horizontally transferred genes.</article-title><source><italic>Genome Biol.</italic></source><year>2004</year>;<volume>5</volume>(<issue>9</issue>):<fpage>R64</fpage>.
<pub-id pub-id-type="doi">10.1186/gb-2004-5-9-r64</pub-id><!--<pub-id pub-id-type="pmcid">522871</pub-id>--><?supplied-pmid 15345048?><pub-id pub-id-type="pmid">15345048</pub-id></mixed-citation>
    </ref>
    <ref id="ref-10">
      <label>10</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Silvester</surname><given-names>N</given-names></name><name><surname>Alako</surname><given-names>B</given-names></name><name><surname>Amid</surname><given-names>C</given-names></name><etal/></person-group>:
<article-title>The European Nucleotide Archive in 2017.</article-title><source><italic>Nucleic Acids Res.</italic></source><year>2018</year>;<volume>46</volume>(<issue>D1</issue>):<fpage>D36</fpage>–<lpage>D40</lpage>.
<pub-id pub-id-type="doi">10.1093/nar/gkx1125</pub-id><!--<pub-id pub-id-type="pmcid">5753375</pub-id>--><?supplied-pmid 29140475?><pub-id pub-id-type="pmid">29140475</pub-id></mixed-citation>
    </ref>
    <ref id="ref-11">
      <label>11</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pearson</surname><given-names>WR</given-names></name></person-group>:
<article-title>Selecting the Right Similarity-Scoring Matrix.</article-title><source><italic>Curr Protoc Bioinformatics.</italic></source><year>2013</year>;<volume>43</volume>:<fpage>3.5.1</fpage>–<lpage>9</lpage>.
<pub-id pub-id-type="doi">10.1002/0471250953.bi0305s43</pub-id><!--<pub-id pub-id-type="pmcid">3848038</pub-id>--><?supplied-pmid 24509512?><pub-id pub-id-type="pmid">24509512</pub-id></mixed-citation>
    </ref>
    <ref id="ref-12">
      <label>12</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Seeger</surname><given-names>M</given-names></name></person-group>:
<article-title>Gaussian processes for machine learning.</article-title><source><italic>Int J Neural Syst.</italic></source><year>2004</year>;<volume>14</volume>(<issue>2</issue>):<fpage>69</fpage>–<lpage>106</lpage>.
<pub-id pub-id-type="doi">10.1142/S0129065704001899</pub-id><?supplied-pmid 15112367?><pub-id pub-id-type="pmid">15112367</pub-id></mixed-citation>
    </ref>
    <ref id="ref-13">
      <label>13</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garreta</surname><given-names>R</given-names></name><name><surname>Moncecchi</surname><given-names>G</given-names></name></person-group>:
<article-title> Learning scikit-learn: Machine Learning in Python</article-title>. Packt Publishing Ltd;<year>2013</year>;<fpage>100</fpage><ext-link ext-link-type="uri" xlink:href="https://doc.lagout.org/programmation/python/Learning%20scikit-learn_%20Machine%20Learning%20in%20Python%20%5BGarreta%20%26%20Moncecchi%202013-11-25%5D.pdf">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-14">
      <label>14</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lavelle</surname><given-names>DT</given-names></name><name><surname>Pearson</surname><given-names>WR</given-names></name></person-group>:
<article-title>Globally, unrelated protein sequences appear random.</article-title><source><italic>Bioinformatics.</italic></source><year>2010</year>;<volume>26</volume>(<issue>3</issue>):<fpage>310</fpage>–<lpage>8</lpage>.
<pub-id pub-id-type="doi">10.1093/bioinformatics/btp660</pub-id><!--<pub-id pub-id-type="pmcid">2852211</pub-id>--><?supplied-pmid 19948773?><pub-id pub-id-type="pmid">19948773</pub-id></mixed-citation>
    </ref>
    <ref id="ref-15">
      <label>15</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Altschul</surname><given-names>SF</given-names></name><name><surname>Madden</surname><given-names>TL</given-names></name><name><surname>Schäffer</surname><given-names>AA</given-names></name><etal/></person-group>:
<article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs.</article-title><source><italic>Nucleic Acids Res.</italic></source><year>1997</year>;<volume>25</volume>(<issue>17</issue>):<fpage>3389</fpage>–<lpage>402</lpage>.
<pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id><!--<pub-id pub-id-type="pmcid">146917</pub-id>--><?supplied-pmid 9254694?><pub-id pub-id-type="pmid">9254694</pub-id></mixed-citation>
    </ref>
    <ref id="ref-16">
      <label>16</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Quinlan</surname><given-names>AR</given-names></name><name><surname> Hall</surname><given-names>IM</given-names></name></person-group>:
<article-title>BEDTools: a flexible suite of utilities for comparing genomic features.</article-title><source><italic>Bioinformatics.</italic></source><year>2010</year>;<volume>26</volume>(<issue>6</issue>):<fpage>841</fpage>–<lpage>842</lpage>.
<pub-id pub-id-type="doi">10.1093/bioinformatics/btq033</pub-id><!--<pub-id pub-id-type="pmcid">2832824</pub-id>--><?supplied-pmid 20110278?><pub-id pub-id-type="pmid">20110278</pub-id></mixed-citation>
    </ref>
    <ref id="ref-17">
      <label>17</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Höps</surname><given-names>W</given-names></name><name><surname>Jeffryes</surname><given-names>M</given-names></name><name><surname>Bateman</surname><given-names>A</given-names></name></person-group>:
<article-title>Spurio (Version v1.0).</article-title><source><italic>Zenodo.</italic></source><year>2018</year><ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.5281/zenodo.1184437">Data Source</ext-link></mixed-citation>
    </ref>
  </ref-list>
</back>
<sub-article id="report31445" article-type="peer-review">
  <front-stub>
    <article-id pub-id-type="doi">10.5256/f1000research.15280.r31445</article-id>
    <title-group>
      <article-title>Referee response for version 1</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Haft</surname>
          <given-names>Daniel H.</given-names>
        </name>
        <xref ref-type="aff" rid="r31445a1">1</xref>
        <role>Referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8101-4938</contrib-id>
      </contrib>
      <aff id="r31445a1"><label>1</label>National Center for Biotechnology Information (NCBI), National Library of Medicine (NLM), National Institutes of Health (NIH), Bethesda, MD, USA</aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="COI-statement">
        <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>12</day>
      <month>4</month>
      <year>2018</year>
    </pub-date>
    <related-article id="d35e1985" related-article-type="peer-reviewed-article" ext-link-type="doi" xlink:href="10.12688/f1000research.14050.1">Version 1</related-article>
    <custom-meta-group>
      <custom-meta>
        <meta-name>recommendation</meta-name>
        <meta-value>approve</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>Prokaryotic structural and functional annotation improves over time as growing resources, such as Pfam or CDD, add to the collections of rules that automated annotation pipelines can call on for genome analysis.  A considerable amount of genomic “dark matter” remains in the form of proteins not currently reached by any annotation rule.   Most large clusters in the dark matter really do represent real proteins in need of characterization and a name.  But some merely appear to be real, and to be suitable for the invention of new “domain of unknown function” protein families, when actually they reflect a long legacy of false-positive errors in the prediction of protein-coding regions.  The authors here introduce Spurio, a tool that finds suspicious proteins whose would-be homologs from related DNA show a statistically damning “blizzard” of stop codons spread across their sequence alignments.</p>
    <p> As the authors make clear, Spurio does not provide a clear yes/no decision for which proteins are real.  It provides merely a list of proteins that is highly enriched in false predictions, vs. those lacking evidence of falseness.  Some protein families, encoded by selfish genetic elements such as transposons, have members decay into pseudogenes so frequently a blizzard of stop codons can mislead.  What Spurio actually offers is a new analytical metric that can integrate into workflows for building new protein families, or for deprecating old ones, or for culling bad data from large databases such as UniProt and RefSeq.   Some human review, or use in combination with other indicators, may be necessary for most uses.</p>
    <p> Spurio is likely to find its most enthusiastic users among the biocurators and bioinformaticians who build new protein family definitions such as the HMMs of Pfam, and the developers of prokaryotic annotation pipelines such as RAST or PGAP.   Because so many researchers in the biology and biochemistry of bacteria and archaea depend on these resources, as they try to make better sense of genomic and metagenomic “dark matter,” Spurio may contribute positively to the infrastructure of bioinformatics, with most beneficiaries unaware of its theory and its role.</p>
    <p>I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
  </body>
</sub-article>
<sub-article id="report31447" article-type="peer-review">
  <front-stub>
    <article-id pub-id-type="doi">10.5256/f1000research.15280.r31447</article-id>
    <title-group>
      <article-title>Referee response for version 1</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Elofsson</surname>
          <given-names>Arne</given-names>
        </name>
        <xref ref-type="aff" rid="r31447a1">1</xref>
        <role>Referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-7115-9751</contrib-id>
      </contrib>
      <aff id="r31447a1"><label>1</label>Science for Life Laboratory, Stockholm University, Solna, Sweden</aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="COI-statement">
        <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>13</day>
      <month>3</month>
      <year>2018</year>
    </pub-date>
    <related-article id="d35e2042" related-article-type="peer-reviewed-article" ext-link-type="doi" xlink:href="10.12688/f1000research.14050.1">Version 1</related-article>
    <custom-meta-group>
      <custom-meta>
        <meta-name>recommendation</meta-name>
        <meta-value>approve</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>The authors report a novel tool to detect "spurious" hits in gene assignments. The methodology is based on the assumption that "homologous gene sequences" that  contain a substantial amount of stop codons indicate that a gene is "not under selective pressure. </p>
    <p> The tool seems to be superior to the earlier tool (antifam) and is therefore a useful tool for automatic  annotations of genomes.</p>
    <p> Although this assumption most likely is correct in most cases - it also might miss non-spurious genes, in particular orphan genes. It is generally accepted that there exist a birth and death process where novel (orphan) genes can occur from non-coding regions and also that existing genes turns into pseudo-genes. This could be discussed further.</p>
    <p> There exist quite good set of orphans in drosophila and yeast - it would be interesting to see how spurio would rank these. (I am aware that this tool is mainly for bacteria - but at least in yeast most of these orphan genes are single exon so it should be possible to run it I think).</p>
    <p>I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
  </body>
</sub-article>
