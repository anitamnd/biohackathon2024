<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7003401</article-id>
    <article-id pub-id-type="publisher-id">3367</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-020-3367-3</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>GeDi: applying suffix arrays to increase the repertoire of detectable SNVs in tumour genomes</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-4697-6079</contrib-id>
        <name>
          <surname>Coleman</surname>
          <given-names>Izaak</given-names>
        </name>
        <address>
          <email>ic2465@cumc.columbia.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Corleone</surname>
          <given-names>Giacomo</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Arram</surname>
          <given-names>James</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ng</surname>
          <given-names>Ho-Cheung</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Magnani</surname>
          <given-names>Luca</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Luk</surname>
          <given-names>Wayne</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2113 8111</institution-id><institution-id institution-id-type="GRID">grid.7445.2</institution-id><institution>Department of Computing, Imperial College London, </institution></institution-wrap>London, SW7 2AZ UK </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000000122985718</institution-id><institution-id institution-id-type="GRID">grid.212340.6</institution-id><institution>Systems Biology PhD Program, Columbia University in New York City, </institution></institution-wrap>New York, USA </aff>
      <aff id="Aff3"><label>3</label>Department of Surgery and Cancer, Imperial College Hammersmith, London W12, UK </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>5</day>
      <month>2</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>5</day>
      <month>2</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>21</volume>
    <elocation-id>45</elocation-id>
    <history>
      <date date-type="received">
        <day>25</day>
        <month>9</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>14</day>
        <month>1</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Current popular variant calling pipelines rely on the mapping coordinates of each input read to a reference genome in order to detect variants. Since reads deriving from variant loci that diverge in sequence substantially from the reference are often assigned incorrect mapping coordinates, variant calling pipelines that rely on mapping coordinates can exhibit reduced sensitivity.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">In this work we present GeDi, a suffix array-based somatic single nucleotide variant (SNV) calling algorithm that does not rely on read mapping coordinates to detect SNVs and is therefore capable of reference-free and mapping-free SNV detection. GeDi executes with practical runtime and memory resource requirements, is capable of SNV detection at very low allele frequency (&lt;1%), and detects SNVs with high sensitivity at complex variant loci, dramatically outperforming MuTect, a well-established pipeline.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3">By designing novel suffix-array based SNV calling methods, we have developed a practical SNV calling software, GeDi, that can characterise SNVs at complex variant loci and at low allele frequency thus increasing the repertoire of detectable SNVs in tumour genomes. We expect GeDi to find use cases in targeted-deep sequencing analysis, and to serve as a replacement and improvement over previous suffix-array based SNV calling methods.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Variant calling</kwd>
      <kwd>SNV</kwd>
      <kwd>Cancer</kwd>
      <kwd>Genomics</kwd>
      <kwd>Suffix array</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100000266</institution-id>
            <institution>Engineering and Physical Sciences Research Council</institution>
          </institution-wrap>
        </funding-source>
        <award-id>EP/P010040/1</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100000266</institution-id>
            <institution>Engineering and Physical Sciences Research Council</institution>
          </institution-wrap>
        </funding-source>
        <award-id>EP/N031768/1</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Raw NGS data consist of million of sequencing reads derived from unknown genomic location. To detect SNVs in paired tumour-control NGS datasets, SNV calling pipelines must compare reads of the tumour dataset against reads of the control dataset that derive from the same genomic location. Accordingly, this requires organising the input data by genomic location. Current popular somatic SNV calling pipelines organise the input data by mapping tumour and control reads to a human reference genome prior to SNV detection. Once mapped, a downstream somatic SNV caller utilises the mapping coordinates to examine reads covering the same location across the tumour and control datasets, and ultimately detect SNVs. We categorise SNV callers that rely on mapping coordinates - and therefore a reference genome - to detect SNVs as <italic>reference-based SNV callers</italic>. A considerable drawback of reference-based SNV callers is the reduced sensitivity they exhibit in the presence of incorrect mapping coordinates. This limits their ability to characterise complex variant loci (variant loci other than sparsely distributed SNVs) where incorrect mapping coordinates arise frequently [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>].</p>
    <p>The aforementioned drawback of reference-based SNV callers motivated development of SMuFin [<xref ref-type="bibr" rid="CR3">3</xref>], a somatic SNV caller that utilises a generalised suffix array data-structure (<italic>suffix array</italic>) to detect SNV both mapping-free and reference-free; we call this approach <italic>suffix array-based SNV detection</italic>, and we therefore classify SMuFin as a <italic>suffix array-based SNV caller</italic>. Since suffix array-based SNV detection is reference-free and mapping-free, the approach is capable of detecting SNVs at complex variant loci. Consequently, it has potential to increase the repertoire of detectable SNVs in tumour genomes by enabling characterisation of such loci.</p>
    <p>Although suffix array-based SNV detection has attractive features, its implementation in SMuFin suffers a number of shortcomings: Firstly, SMuFin’s available source code is inoperative to any useful degree - despite considerable effort from our group, SMuFin crashed without output when analysing all but one dataset; a small-scale simulated dataset available on SMuFin’s web-page. Secondly, SMuFin shows poor runtime and memory requirements, one group reporting a runtime of over 30 days to analyse a 30x whole genome dataset [<xref ref-type="bibr" rid="CR4">4</xref>]. Finally, SMuFin’s recall for SNV detection is low, ranking in 17th place among 18 popular SNV calling pipelines when analysing a 30x Whole Genome Sequencing dataset [<xref ref-type="bibr" rid="CR5">5</xref>].</p>
    <p>The work herein provides three major contributions:
<list list-type="bullet"><list-item><p>Firstly, we introduce <bold>Ge</bold>neralised Suffix Array-based <bold>Di</bold>rect SNV caller, or <bold>GeDi</bold>, pronounced ‘Jeh-dye’ (“<xref rid="Sec3" ref-type="sec">Implementation</xref>” section): A C++ implementation of a suffix array-based SNV caller. Like SMuFin, GeDi does not rely on mapping coordinates to detect SNVs, and can therefore detect SNVs both mapping- and reference-free. Accordingly, our work re-introduces an operative suffix-array based SNV caller for use somatic variant calling pipelines.</p></list-item><list-item><p>Secondly, we design a novel approach to suffix array-based SNV detection and implement this in GeDi. Our approach makes use of an optional preprocessing filter to dramatically reduce GeDi’s runtime and memory usage (“<xref rid="Sec4" ref-type="sec">Preprocessing</xref>” section), and a dual suffix array design that enables GeDi to detect <italic>rare SNVs</italic> (SNVs occurring at an allele frequency of ≤ 5%) with high precision (“<xref rid="Sec5" ref-type="sec">Suffix array-based SNV detection</xref>” section).</p></list-item><list-item><p>Finally, we extensively evaluate GeDi’s recall, precision and resource requirements when analysing real and simulated datasets (“<xref rid="Sec9" ref-type="sec">Results</xref>” section). Our findings show: GeDi’s runtime and memory resource requirements are very practical, being lower than those of SMuFin and MuTect - a popular reference-based SNV caller [<xref ref-type="bibr" rid="CR6">6</xref>] - in almost all test cases; GeDi is capable of calling rare SNVs and SNVs belonging to clustered hypermutations (loci with densely packed SNVs) with high precision, in contrast, MuTect grossly under-characterises these events; when analysing a previously published WGS dataset, GeDi detected a large number of previously unpublished SNVs located in functional genomic regions, many of which reveal putative sites of clustered hypermutation.</p></list-item></list></p>
    <p>The following sub-section describes suffix-array based SNV detection as implemented in SMuFin, which forms the basis of GeDi’s novel approach.</p>
    <sec id="Sec2">
      <title>Previous approach</title>
      <p>We distinguish between <italic>SNV detection</italic>, where SNVs and reads covering them are identified within tumour-control NGS datasets, and <italic>SNV calling</italic>, where detected SNVs’ structure and reference genome coordinates are computed and reported back to the user.</p>
      <p>Unlike reference-based SNV callers that rely on mapping to organise input reads by genomic location, SMuFin uses a (generalised) suffix array constructed from the input reads [<xref ref-type="bibr" rid="CR3">3</xref>]. This suffix array, being a lexicographically sorted array of the input read’s suffixes, imparts the property that all suffixes sharing a common prefix are contiguous within the array. Once constructed, this property allows splitting of the suffix array into <italic>sections</italic>: intervals containing suffixes with a common prefix of length ≥ 30. Suffixes within a section are considered to derive from the same genomic location due to the presence of the common prefix [<xref ref-type="bibr" rid="CR3">3</xref>]. Hence, constructing a suffix array and splitting it into sections organises the information contained within the input reads by genomic location without use of a reference or mapping; the organisation is achieved during suffix array construction where the data is compared directly to itself.</p>
      <p>Once the suffix array is split into sections, SNVs are detected by inspecting each section. SMuFin keeps track of each suffix’s derivation, either tumour- or control-read-derived, within the array, enabling the two types to be quantified within a section (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). SNV detection is based on the inference that sections enriched for tumour-read-derived suffixes are likely to cover SNVs since, barring contamination, SNVs are exclusive to the tumour-read-derived NGS dataset. SMuFin considers a section enriched for tumour-read-derived suffixes if two conditions are satisfied: First, within the section, the number of tumour-read-derived suffixes divided by the total number of suffixes is greater than <italic>e</italic>_<italic>c</italic><italic>o</italic><italic>n</italic><italic>t</italic>; a user-defined parameter that allows for the presence of tumour-cell contamination in control tissue. Second, the number of tumour suffixes within the section is at least Minimum Suffix Size (<italic>M</italic><italic>S</italic><italic>S</italic>=4); a constraint imposed to avoid mis-classification of sequencing errors (unique to the tumour-tissue derived dataset) as SNVs. Once enriched sections are identified (e.g middle section, Fig. <xref rid="Fig1" ref-type="fig">1</xref>), tumour reads containing suffixes within enriched sections are extracted. After this stage, SNVs and reads covering them have been identified within the tumour-control NGS datasets, thus completing SNV detection.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Left column shows the unique read identifier from which each suffix within the shown interval derives. Red and blue suffixes derive from the tumour and control datasets respectively. Three sections are shown, each bounded by a curly brace. Red and blue numbers next to each section represent the quantity of tumour- and control-read-derived suffixes within it respectively. The middle section (red curly brace) is enriched for tumour-read-derived suffixes and contains ≥<italic>M</italic><italic>S</italic><italic>S</italic> reads. Accordingly, tumour reads containing a suffix within this section are extracted for downstream SNV calling</p></caption><graphic xlink:href="12859_2020_3367_Fig1_HTML" id="MO1"/></fig></p>
    </sec>
  </sec>
  <sec id="Sec3">
    <title>Implementation</title>
    <p>In this section we introduce GeDi, describing its architecture as five stages of execution: Preprocessing, suffix array-based SNV detection, consensus pair construction, consensus pair filtering, and SNV calling. Figure <xref rid="Fig2" ref-type="fig">2</xref> provides a simplified graphical overview of GeDi’s architecture.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Overview of GeDi algorithm. pGSA and aGSA denote GeDi’s primary and auxiliary suffix arrays respectively. Data derived from tumour and control NGS datasets are given red and blue colouration respectively. <bold>a</bold> First, preprocessing filters out tumour reads that exactly match the reference and removes ‘N’ characters from the input tumour and control data (red T and blue C files respectively). <bold>b</bold> Second, suffix array-based SNV detection uses a dual suffix array design to detect SNVs, including those at low allele frequency. Variant blocks are constructed. <bold>c</bold> Third, consensus pairs (labelled T,C-pairs in diagram) are constructed from variant blocks and from control reads covering the same genomic location. False positives are removed by consensus pair filtering. <bold>d</bold> Finally, SNVs are called using control consensus pairs as proxies to compute SNV genome coordinates</p></caption><graphic xlink:href="12859_2020_3367_Fig2_HTML" id="MO2"/></fig></p>
    <sec id="Sec4">
      <title>Preprocessing</title>
      <p>In this stage, GeDi reduces the input data size and removes ‘N’ characters (Fig. <xref rid="Fig2" ref-type="fig">2</xref>a).</p>
      <p>Suffix array construction is the most resource intensive computation of suffix array-based SNV detection. To combat this, we developed a preprocessing filter, <italic>emfilter</italic>, and apply emfilter immediately after GeDi begins execution. Emfilter maps input tumour reads to the reference genome with bowtie2 [<xref ref-type="bibr" rid="CR7">7</xref>] and outputs reads that fail to align with an exact match, i.e reads with no mismatches to the reference. Exact matching reads are discarded. We found approximately 70% of tumour reads are exact matches in our simulated datasets. Since this simulated data is built with a tool that utilizes an emperical error profile [<xref ref-type="bibr" rid="CR8">8</xref>], we anticipate this percentage to be similar in real data. Consequently, emfilter reduces the tumour dataset to the set of tumour reads covering germline variants, somatic variants, and sequencing errors. Once emfilter has been applied, the control and filtered tumour reads provide input for suffix array construction in the following stage. Since the space and time complexity of suffix array construction increases with input text size, emfilter’s reduction of the input tumour reads reduces the runtime- and memory-resource requirements of suffix array constructing in GeDi, and ultimately, GeDi itself. Although emfilter uses alignment, GeDi is a suffix array-based SNV caller and therefore does not use the mapping coordinates produced by emfilter to detect SNVs. Accordingly, emfilter does not induce the reduced sensitivity for SNV detection at complex variant loci that afflicts reference-based SNV callers (shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S7). Consequently, GeDi can detect SNVs reference-free and mapping-free (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S7). “<xref rid="Sec13" ref-type="sec">Runtime and memory evaluation.</xref>” section shows the reduction in resource utilisation gained by applying emfilter. We leave the application of emfilter optional to the user at the cost of increase runtime and memory usage.</p>
      <p>After emfilter has been applied, the remaining reads are split at ‘N‘ characters and all ‘N‘-less strings of length ≥ 30 are kept for downstream processing. This completes the preprocessing stage of GeDi.</p>
    </sec>
    <sec id="Sec5">
      <title>Suffix array-based SNV detection</title>
      <p>Next, GeDi detects SNVs using a novel suffix array-based approach that utilises two suffix arrays; in contrast to the single-suffix-array-based approach developed in SMuFin (Fig. <xref rid="Fig2" ref-type="fig">2</xref>b).</p>
      <p>Suffix array-based SNV detection in GeDi proceeds as follows: GeDi constructs a primary suffix array from the preprocessed reads, and then searches for sections enriched for tumour-read-derived suffixes. Once found, GeDi then extracts tumour reads that contain suffixes within enriched sections. Like SMuFin a section is considered enriched for tumour-read-derived suffixes if two conditions are satisfied:</p>
      <p>Firstly, identically to SMuFin, a section is considered to be enriched if the proportion of such suffixes within a section is greater than <italic>e</italic>_<italic>c</italic><italic>o</italic><italic>n</italic><italic>t</italic>; <italic>e</italic>_<italic>c</italic><italic>o</italic><italic>n</italic><italic>t</italic> has a default value of 0 in GeDi. Secondly, unlike SMuFin and crucial to GeDi’s sensitivity, the number of tumour-read-derived suffixes within a section must be at least <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=2; rather than the value of <italic>M</italic><italic>S</italic><italic>S</italic>=4 used in SMuFin. <italic>pMSS</italic>’s default value is 2. This relaxation enables GeDi to detect rare SNVs (≤ 5% allele frequency) with high sensitivity. Once tumour reads are extracted, GeDi constructs a second, auxiliary suffix array from the extracted tumour reads and their reverse complements; hence, the auxiliary suffix array consists entirely of tumour-read-derived suffixes. This auxiliary suffix array is searched for sections with size ≥<italic>a</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4; <italic>aMSS</italic>’s default value is four. Once these sections are identified, tumour reads containing suffixes with these sections are extracted and organised into <italic>variant block</italic>s: a group of reads aligned to one another that cover a genomic location containing one or more SNVs (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1). Note that the local alignment of reads in a variant block can be determined directly from their suffix’s offsets in the auxiliary suffix array. Construction of variant blocks completes suffix array-based SNV detection in GeDi.</p>
      <p>The motivation for GeDi’s dual suffix array design is the overly-restrictive <italic>M</italic><italic>S</italic><italic>S</italic>=4 constraint used by SMuFin to avoid extraction of reads containing sequencing errors when searching for tumour-suffix enriched sections. This constraint can render SNVs undetectable despite sufficient coverage: Namely, when the SNVs sum total coverage is ≥<italic>M</italic><italic>S</italic><italic>S</italic> for both DNA strands, but &lt;<italic>M</italic><italic>S</italic><italic>S</italic> on each strand. In GeDi, by relaxing this constraint to <italic>pMSS</italic> such SNVs remain detectable: reads covering these SNVs in both orientations will be extracted from the primary suffix array, and grouped together into a single section in the auxiliary suffix array due to the inclusion of reverse complements (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1 provides a graphical example). Since, GeDi reintroduces the same constraint as SMuFin on its auxiliary suffix array (<italic>a</italic><italic>M</italic><italic>S</italic><italic>S</italic>=<italic>M</italic><italic>S</italic><italic>S</italic>=4), extraction of reads harbouring sequencing errors are still avoided. We note that, an alternative solution to a dual suffix array design is to construct a single suffix array from each input read and its reverse complement. However, due to the space complexity of suffix array construction and size of tumour-normal paired NGS datasets, such an approach would be very costly with respect to memory resource usage; which is already at a problematic scale in SMuFin. In contrast, the dual suffix array design implemented in GeDi solves the problem of detecting SNVs with a sum total coverage ≥<italic>M</italic><italic>S</italic><italic>S</italic> for both DNA strands but &lt;<italic>M</italic><italic>S</italic><italic>S</italic> on each strand whilst simultaneously reducing extraction of reads containing sequencing errors and avoiding increasing the memory requirement of primary suffix array construction. “<xref rid="Sec10" ref-type="sec">GeDi can detect SNVs at allelic frequencies of &lt;1%</xref>” section provides evidence of GeDi’s dual-suffix array design retaining high sensitivity and precision for rare SNV detection with respect to SMuFin’s single-suffix array design; SNVs with a sum total coverage ≥<italic>M</italic><italic>S</italic><italic>S</italic> for both DNA strands but &lt;<italic>M</italic><italic>S</italic><italic>S</italic> on each strand typically have low allele frequency.</p>
    </sec>
    <sec id="Sec6">
      <title>Consensus sequence construction</title>
      <p>After suffix array-based SNV detection, GeDi holds a set of variant blocks. Since the auxiliary suffix array contains the multiple suffixes of each input read, many extracted variant blocks contain identical - and therefore redundant - information. Accordingly, to remove unnecessary downstream computation GeDi removes redundant variant blocks, keeping only one variant block from a set of blocks that each contain the same reads.</p>
      <p>Once redundant variant blocks are removed, for each remaining variant block GeDi now constructs a (<italic>T</italic>,<italic>C</italic>)-pair Fig. (<xref rid="Fig2" ref-type="fig">2</xref>c); a pair of consensus sequences, one derived from tumour-derived reads, <italic>T</italic>, the other from control-derived reads, <italic>C</italic>. The following method is used to construct a (<italic>T</italic>,<italic>C</italic>)-pair from a variant block: First we consider each variant block as an alignment of reads, <italic>t</italic>; recall that a variant block is group of locally-aligned tumour reads covering the same genomic location. <italic>T</italic> is constructed directly from the alignment <italic>t</italic> as a phred-filtered consensus string (the method to construct a phred-filtered consensus string is described below). Once <italic>T</italic> is constructed, the primary suffix array is then searched to identify control-read derived suffixes that cover the same genomic location as <italic>T</italic>; all control-read derived suffixes that share a 30-character exact match with <italic>T</italic> are considered to cover the same genomic location as <italic>T</italic>. Once such suffixes are identified, the control-tissue derived reads they belong to are arranged into an alignment <italic>c</italic>. Similar to the variant block alignment <italic>t</italic>, the local alignment of the control-tissue derived reads is computed from their suffix’s offset in the primary suffix array. Alignment <italic>c</italic> is then used to construct <italic>C</italic> as a phred-filtered consensus string. The construction of <italic>C</italic> completes the (<italic>T</italic>,<italic>C</italic>)-pair.</p>
      <p><italic>T</italic> and <italic>C</italic> are constructed from alignments <italic>t</italic> and <italic>c</italic> respectively as phred-filtered consensus strings. The method of construction is now described for a general alignment of reads <italic>a</italic> and phred-filtered consensus string <italic>S</italic>.</p>
      <p>Let the number of columns in <italic>a</italic> from the start of left-most read to the end of the right-most, i.e the length of <italic>a</italic>, be |<italic>a</italic>|, where <italic>a</italic><sub><italic>j</italic></sub>,1≤<italic>j</italic>≤|<italic>a</italic>|, is the <italic>j</italic>th column of <italic>a</italic>. Using <italic>a</italic>, we compute frequency matrix <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\boldsymbol {F^{a}} \in \mathbb {N}_{0}^{|\Sigma | \times |a|}$\end{document}</tex-math><mml:math id="M2"><mml:mstyle mathvariant="bold-italic"><mml:msup><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mi>a</mml:mi></mml:mrow></mml:msup></mml:mstyle><mml:mo>∈</mml:mo><mml:msubsup><mml:mrow><mml:mi>ℕ</mml:mi></mml:mrow><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mi>Σ</mml:mi><mml:mo>|</mml:mo><mml:mo>×</mml:mo><mml:mo>|</mml:mo><mml:mi>a</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2020_3367_Article_IEq1.gif"/></alternatives></inline-formula>, where <italic>Σ</italic>={<italic>A</italic>,<italic>C</italic>,<italic>G</italic>,<italic>T</italic>},|<italic>Σ</italic>|=4. The <italic>j</italic>th column of <bold><italic>F</italic></bold><sup><bold><italic>a</italic></bold></sup> is <bold><italic>F</italic></bold><sup><bold><italic>a</italic></bold></sup><sub>∗,<italic>j</italic></sub>=(<italic>f</italic><sub><italic>A</italic>,<italic>j</italic></sub>,<italic>f</italic><sub><italic>C</italic>,<italic>j</italic></sub>,<italic>f</italic><sub><italic>G</italic>,<italic>j</italic></sub>,<italic>f</italic><sub><italic>T</italic>,<italic>j</italic></sub>)<sup>⊤</sup>, where each entry describes the count of A, C, G, T characters in column <italic>a</italic><sub><italic>j</italic></sub> with a phred score ≥<italic>p</italic> respectively; <italic>p</italic>’s default value is 35. Using <bold><italic>F</italic></bold><sup><bold><italic>a</italic></bold></sup>, <italic>S</italic> is constructed as the string <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$S_{j} = consensus\left (\boldsymbol {F^{a}_{*,j}}\right)$\end{document}</tex-math><mml:math id="M4"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mtext mathvariant="italic">consensus</mml:mtext><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mstyle mathvariant="bold-italic"><mml:msubsup><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mo>∗</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>a</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2020_3367_Article_IEq2.gif"/></alternatives></inline-formula>, where <italic>S</italic><sub><italic>j</italic></sub>∈<italic>Σ</italic> is the <italic>j</italic>th symbol in <italic>S</italic>. <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$consensus\left (\boldsymbol {F^{a}_{*,j}}\right)$\end{document}</tex-math><mml:math id="M6"><mml:mtext mathvariant="italic">consensus</mml:mtext><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mstyle mathvariant="bold-italic"><mml:msubsup><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mo>∗</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>a</mml:mi></mml:mrow></mml:msubsup></mml:mstyle></mml:mrow></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2020_3367_Article_IEq3.gif"/></alternatives></inline-formula> identifies the numerically largest entry in <bold><italic>F</italic></bold><sup><bold><italic>a</italic></bold></sup><sub>∗,<italic>j</italic></sub>, denoted <italic>f</italic><sub><italic>σ</italic>,<italic>j</italic></sub>,<italic>σ</italic>∈<italic>Σ</italic>, and returns symbol <italic>σ</italic>. Counting in <bold><italic>F</italic></bold><sup><bold><italic>a</italic></bold></sup> only the characters with phred score ≥<italic>p</italic> stops characters with phred score &lt;<italic>p</italic> from contributing towards the consensus sequence, <italic>S</italic>. This mitigates the propagation of sequencing errors into <italic>S</italic>, and ultimately mitigates false positive SNV calls. Note that, ties for the most frequent base at some column <italic>j</italic> of <bold><italic>F</italic></bold><sup><bold><italic>a</italic></bold></sup> are resolved by picking the most frequent base (amongst the tied bases) with any phred score. If a tie still remains, the lexicographically smallest base is chosen for <italic>S</italic><sub><italic>j</italic></sub>.</p>
      <p>Consensus sequence construction ends when a (<italic>T</italic>,<italic>C</italic>)-pair is computed for each variant block.</p>
    </sec>
    <sec id="Sec7">
      <title>Consensus sequence filtering</title>
      <p>In the following SNV calling stage, GeDi will examine aligned <italic>T</italic>-<italic>C</italic> pairs and call single character mismatches as SNVs. Accordingly, removal of false positives from these pairs is critical to increasing GeDi’s precision. Although many potential sequencing error-based false positives will have been removed during <italic>T</italic>-<italic>C</italic> pair construction, we found three genomic features were commonly associated with false positive calls. We therefore developed three filters designed to remove false positives arising from each of these features. Each filter is applied after <italic>T</italic>-<italic>C</italic> pair construction (Fig. <xref rid="Fig2" ref-type="fig">2</xref>c).</p>
      <p>Our first filter, <italic>indel filter</italic>, removes false positive SNV calls caused by somatic indels. A complete description of this filter and its effect is given in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Method 3.</p>
      <p>Our second filter, <italic>masking filter</italic>, was designed to reduce false positives caused by SNPs. Using the previous section’s notation, SNPs cause false positives when the most frequent allele differs across <italic>t</italic> and <italic>c</italic> alignments. This difference causes a sequence mismatch at the SNP site which GeDi then reports as a false positive (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2). To tackle this issue, we leverage the property that the column of <italic>c</italic> containing the SNP, <italic>c</italic><sub><italic>snp</italic></sub>, is likely to contain both SNP alleles. Accordingly, in <italic>c</italic>’s frequency matrix column <bold><italic>F</italic></bold><sup><bold><italic>c</italic></bold></sup><sub>∗,<italic>s</italic><italic>n</italic><italic>p</italic></sub> will contain more than one non-zero entry. Let indicator function <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathbbm {1}(k)$\end{document}</tex-math><mml:math id="M8"><mml:mi>1</mml:mi><mml:mo>(</mml:mo><mml:mi>k</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2020_3367_Article_IEq4.gif"/></alternatives></inline-formula> return 1 if <italic>k</italic>&gt;<italic>e</italic>, 0 otherwise; <italic>e</italic>’s default value is 0.1. We define <italic>masking filter</italic> as follows: For 1≤<italic>j</italic>≤|<italic>t</italic>|, replace <italic>T</italic><sub><italic>j</italic></sub> with <italic>C</italic><sub><italic>j</italic></sub> if:
<disp-formula id="Equa"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $${\sum\nolimits}_{\sigma \in \{A,T,C,G\}}\mathbbm{1}(r_{\sigma,j}) \quad &gt; \quad 1, $$ \end{document}</tex-math><mml:math id="M10"><mml:mrow><mml:msub><mml:mrow><mml:mo mathsize="big">∑</mml:mo></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>∈</mml:mo><mml:mo>{</mml:mo><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo>,</mml:mo><mml:mi>G</mml:mi><mml:mo>}</mml:mo></mml:mrow></mml:msub><mml:mi>1</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mspace width="1em"/><mml:mo>&gt;</mml:mo><mml:mspace width="1em"/><mml:mn>1</mml:mn><mml:mo>,</mml:mo></mml:mrow></mml:math><graphic xlink:href="12859_2020_3367_Article_Equa.gif" position="anchor"/></alternatives></disp-formula> where,
<disp-formula id="Equb"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$r_{\sigma,j} = \frac{f_{\sigma,j}}{sum\left(\boldsymbol{F_{*,j}}\right)}, $$ \end{document}</tex-math><mml:math id="M12"><mml:mrow><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">sum</mml:mtext><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mstyle mathvariant="bold-italic"><mml:msub><mml:mrow><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mo>∗</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mstyle></mml:mrow></mml:mfenced></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:math><graphic xlink:href="12859_2020_3367_Article_Equb.gif" position="anchor"/></alternatives></disp-formula> and <italic>s</italic><italic>u</italic><italic>m</italic>(<bold><italic>F</italic></bold><sub><bold><italic>∗,j</italic></bold></sub>) is the sum of the entry in <bold><italic>F</italic></bold><sub><bold><italic>∗,j</italic></bold></sub>. Accordingly at sites likely to contain SNPs, <italic>T</italic> characters are replaced (masked) with <italic>C</italic> characters (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2 provides a graphical explanation). Parameter <italic>e</italic> in <inline-formula id="IEq5"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathbbm {1}(n)$\end{document}</tex-math><mml:math id="M14"><mml:mi>1</mml:mi><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2020_3367_Article_IEq5.gif"/></alternatives></inline-formula> reduces sensitivity loss that arises from masking consensus sequence positions containing sequencing errors and SNVs in the same alignment column.</p>
      <p>Our third filter, <italic>multi-locus filter</italic>, was designed to reduce false positives caused by exact repeat genome sequences. <italic>T</italic>-<italic>C</italic> pairs covering such sequences are often invalid, since the <italic>t</italic> and <italic>c</italic> alignments used to construct them contain reads from multiple genome locations. To tackle this issue, multi-locus filter identifies and discards these invalid pairs by exploiting the property that their <bold><italic>F</italic></bold><sup><bold><italic>c</italic></bold></sup> and <bold><italic>F</italic></bold><sup><bold><italic>t</italic></bold></sup> matrices often contain multiple columns with &gt;1 non-zero entry: A consequence of the reads of alignment <italic>c</italic> or <italic>t</italic> deriving from multiple locations is that, beyond the exact matching repeat, their sequences diverge. Consequently, a column <italic>j</italic> of <bold><italic>F</italic></bold><sup><bold><italic>c</italic></bold></sup> or <bold><italic>F</italic></bold><sup><bold><italic>t</italic></bold></sup> that represents a position <italic>c</italic> or <italic>t</italic> outside the exact matching repeat is likely to contain more than one entry with a large quantity; due to the presence of multiple different bases in the alignment column. Formally, an entry, <italic>f</italic><sub><italic>σ</italic>,<italic>j</italic></sub>, has a large quantity if it has <inline-formula id="IEq6"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathbbm {1}(r_{\sigma,j}) = 1$\end{document}</tex-math><mml:math id="M16"><mml:mi>1</mml:mi><mml:mo>(</mml:mo><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>σ</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:math><inline-graphic xlink:href="12859_2020_3367_Article_IEq6.gif"/></alternatives></inline-formula> for its corresponding <italic>r</italic><sub><italic>σ</italic>,<italic>j</italic></sub>, and thus induces a masking event. Accordingly, if a <italic>T</italic>-<italic>C</italic> pair’s frequency matrices induce ≥5 masking events (we found five allows for some SNPs and sequencing errors to be present without discarding) multi-locus filter will discard the pair. By doing so, invalid pairs containing information from multiple genomic locations are discarded. Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S2 shows the dramatic reduction in false positives reported by GeDi when masking and multi-locus filter are applied.</p>
      <p>After application of all filters to each <italic>T</italic>-<italic>C</italic> pair, consensus sequence filtering is complete.</p>
    </sec>
    <sec id="Sec8">
      <title>SNV calling</title>
      <p>After consensus sequence filtering, GeDi calls SNVs, determining and reporting each detect SNV’s genome coordinate and structure back to the user (Fig. <xref rid="Fig2" ref-type="fig">2</xref>d). To achieve this for a given consensus pair, the control consensus sequence is mapped to the human reference genome using Bowtie2. The chromosome to which the control sequence aligns and mapping coordinate, <italic>m</italic>, is recorded. The tumour and control consensus sequences are then aligned to one another and examined. Any single character mismatches - now assumed to be genuine SNVs - are identified. Each SNV’s index within the tumour consensus sequence, <italic>i</italic>, is recorded along with its control and tumour variant bases. Each SNV’s chromosome coordinate, <italic>μ</italic>, is then calculated using formula <italic>μ</italic>=<italic>m</italic>+<italic>i</italic>. Finally, GeDi calls each SNV, reporting the chromosome in which the SNV is located, <italic>μ</italic>, the control base, and the tumour variant base to the user. GeDi performs this calling process for each consensus sequence pair and subsequently terminates.</p>
    </sec>
  </sec>
  <sec id="Sec9" sec-type="results">
    <title>Results</title>
    <p>Additional file <xref rid="MOESM2" ref-type="media">2</xref> (raw_data.zip) contains raw data for generating the figures and tables presented in this section and presented in Additional file <xref rid="MOESM1" ref-type="media">1</xref> (SupplementaryData.pdf).</p>
    <sec id="Sec10">
      <title>GeDi can detect SNVs at allelic frequencies of &lt;1%</title>
      <p>SNVs present with allele frequency of ≤ 5% (rare SNVs) occur frequently in genes commonly mutated during cancer (for example, EGFR, KRAS, PIK3CA, and BRAF), and can provide insight into the dynamics of subclonal tumour populations. Hence, accurate detection of rare SNVs has important applications both clinically and fundamentally [<xref ref-type="bibr" rid="CR9">9</xref>]. GeDi’s dual suffix array design enables reference-free detection of rare SNVs with high precision. To evaluate GeDi’s design for rare SNV detection, we generated simulated targeted deep-sequencing datasets and analysed these datasets with GeDi and MuTect. To generate these datasets, we selected five random 1 Mbp target sequences from hg19 chromosomes 1, 8, 9, 15 and 22, and for each target sequence, used ART NGS simulator [<xref ref-type="bibr" rid="CR8">8</xref>] to generate seven tumour-control paired targeted deep-sequencing datasets with 1000x coverage, 200 SNVs, and each with a different average allele frequency of either 50%, 25%, 10%, 5%, 2%, 1% or &lt;1% (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Method 1 provides a detailed description of dataset construction).</p>
      <p>Figure <xref rid="Fig3" ref-type="fig">3</xref> shows the average precision and recall attained by GeDi and MuTect for these datasets in response to average allele frequency. Note that, in order to determine the effect of GeDi’s relaxed <italic>pMSS</italic> constraint in its dual suffix array design, we ran GeDi three times, setting <italic>pMSS</italic> to four, two and one for each run. For input into MuTect, bowtie2 was used to generate SAM files (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Command 5 shows an example command) and Picard Tools (<ext-link ext-link-type="uri" xlink:href="http://broadinstitute.github.io/picard/">http://broadinstitute.github.io/picard/</ext-link>) was used to convert SAM files to bam [<xref ref-type="bibr" rid="CR7">7</xref>]. We ran mutect with default parameters. When <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4, suffix array-based SNV detection in GeDi emulates the restrictive <italic>MSS</italic> constraint applied in SMuFin’s approach. As expected, GeDi displays greater recall for SNV detection at very low allele frequencies (≤ 1%) when <italic>pMSS</italic> is relaxed to one or two rather than four (Fig. <xref rid="Fig3" ref-type="fig">3</xref>), highlighting the superiority of GeDi’s dual suffix array design for low frequency SNV detection compared to SMuFin’s single suffix array approach. Furthermore, as <italic>a</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4 in all runs, despite recall increasing when <italic>pMSS</italic> is relaxed, GeDi’s precision remains high (95%). Interestingly, we found that GeDi has higher recall when detecting SNVs at ≥ 2% when <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4 or 2 rather than 1. We anticipate this is due to multi-locus filter discarding additional variant blocks under the <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=1 or 2 regime: Variant blocks containing reads derived from one DNA strand only under a <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4 regime can contain reads derived from the opposite DNA strand in the <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=1 or 2 regime. When applying the masking filter to such blocks, the additional reads can increase the number of masking events if they contain sequencing errors. This can trigger the multi-locus filter (applied when the number of masking events increases above a threshold; see Implementation).
<fig id="Fig3"><label>Fig. 3</label><caption><p>Precision and recall of GeDi and MuTect for SNV detection at decreasing allele frequencies. We analysed the 35 simulated tumour-control paired targeted deep-sequencing datasets with MuTect, once using default settings, and GeDi, three times each time setting <italic>pMSS</italic> to 1, 2 and 4; in the legend, GeDi_mss1, GeDi_mss2, GeDi_mss4 refer respectively to the three GeDi analyses. For each analysis we then calculated the precision and recall attained by MuTect and GeDi. For each of the seven average allele frequencies, the arithmetic mean of the precision and recall attained by MuTect and GeDi (in each mode) across the five datasets (generated from the target sequences of hg19 chromosomes 1, 8, 9, 15, 22) are shown</p></caption><graphic xlink:href="12859_2020_3367_Fig3_HTML" id="MO3"/></fig></p>
      <p>In stark contrast to GeDi, MuTect is incapable of SNV detection at allele frequencies ≤ 1% and exhibits a large drop in recall at 2% (Fig. <xref rid="Fig3" ref-type="fig">3</xref>), suggesting GeDi will outperform MuTect for SNV detection at very low allele frequencies (2%) on real datasets. GeDi’s ability to detect SNVs at lower allele frequencies than MuTect is a consequence of the different minimum number of tumour-derived reads required to call SNVs between the two algorithms: GeDi requires at least <italic>a</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4 tumour-derived reads that support the non-reference allele (with a phred score of ≥<italic>p</italic>=35), whilst MuTect requires 14 non-reference-allele supporting tumour-derived reads (<ext-link ext-link-type="uri" xlink:href="https://software.broadinstitute.org/cancer/cga/mutect">https://software.broadinstitute.org/cancer/cga/mutect</ext-link>).</p>
      <p>Given GeDi’s potential to detect SNVs at allele frequencies far below MuTect, we analysed two real paired tumour-blood targeted deep sequencing datasets targeting loci on chromosome 17 and chromosome 22 with GeDi; datasets TSD:chr22 and TSD:chr17 respectively (data currently unpublished). These datasets were derived from a fresh-frozen specimen appertaining to a female ERa+ breast cancer patient treated 2 years with Aromatase Inhibitors. We compared GeDi’s output to MuTect’s; methods describing the preprocessing of this data and MuTect analysis are given in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Method 5.</p>
      <p>We ran GeDi in its default mode (<italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=2). For TSD:chr22, MuTect made a total of nine SNV calls. GeDi made all nine of the SNV calls made by MuTect, plus four additional calls not made by MuTect (Table <xref rid="Tab1" ref-type="table">1</xref>). We inspected these four additional calls made by GeDi in IGV (<ext-link ext-link-type="uri" xlink:href="http://www.broadinstitute.org/igv">http://www.broadinstitute.org/igv</ext-link>). All four occurred with a low allele frequency (range of 3.9% to 0.9%); for the four calls, Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S3–6 shows IGV snapshots, whilst Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S3 provides allele frequencies and coverage counts. The above results, the low allele frequency of the four calls, and GeDi’s stringent criteria for SNV calling (at least <italic>aMSS</italic> reads with a phred score ≥ 35 must contain the variant allele) suggest these additional calls are genuine SNVs undetected by MuTect. Analogous results were found when analysing TSD:chr17: MuTect made a total of 40 SNV calls. GeDi called 36 of these, plus an additional 37 (Table <xref rid="Tab1" ref-type="table">1</xref>). Since Fig. <xref rid="Fig3" ref-type="fig">3</xref> suggested GeDi’s recall for SNVs with allele frequency closer to 50% is greater when <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4, we took the union of GeDi’s output when run with <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=1 and 4 to determine if the intersection between the calls made by GeDi and MuTect could be increased. Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S4 provides the output from this analysis, and shows the results are very similar to those given in Table <xref rid="Tab1" ref-type="table">1</xref>, where <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=2; the intersection increased by a single SNV.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Number of GeDi and Mutect SNV calls for datasets TSD:chr22, TSD:chr17</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Dataset</th><th align="left">Mutect calls</th><th align="left">GeDi calls</th><th align="left">Intersection</th></tr></thead><tbody><tr><td align="left">TSD:chr22</td><td align="left">9</td><td align="left">13</td><td align="left">9</td></tr><tr><td align="left">TSD:chr17</td><td align="left">40</td><td align="left">73</td><td align="left">36</td></tr></tbody></table><table-wrap-foot><p>Intersection describes the number of SNV calls MuTect and GeDi made in common</p></table-wrap-foot></table-wrap></p>
    </sec>
    <sec id="Sec11">
      <title>Somatic short range SNV cluster (sSRSC) detection</title>
      <p>A major issue with reference-based SNV callers is the reduced sensitivity they exhibit at complex variant loci due to incorrect mapping coordinates [<xref ref-type="bibr" rid="CR2">2</xref>]. Since GeDi is a suffix array-based SNV caller, it does not rely on mapping coordinates to detect SNVs, and therefore, should retain sensitivity for SNV detection at complex variant loci.</p>
      <p>Short Range SNP clusters (SRSC) are variant genomic features formally defined as a genomic loci containing <italic>k</italic> SNPs within window length <italic>W</italic>=100 [<xref ref-type="bibr" rid="CR1">1</xref>]. SRSC have been shown to induce incorrect mapping coordinates for reads covering them. Hence, reference-based variant callers are likely to show insensitivity for SRSC detection [<xref ref-type="bibr" rid="CR1">1</xref>]. We define a somatic version of SRSC, the <italic>somatic Short Range SNV Cluster</italic> (sSRSC), as genomic loci containing <italic>k</italic>≥2 SNVs within window length <italic>W</italic>=100 occurring in tumour genomes; we define, k-sSRSC as a sSRSC containing <italic>k</italic> SNVs. Accordingly, sSRSC are a formalised subset somatic clustered hypermutation.</p>
      <p>As sSRSC are identical to SRSC apart from their occurrence in tumour genomes, they too will induce incorrect mapping coordinates, and are therefore ideal features to evaluate GeDi’s sensitivity for SNV detection at complex variant loci. We generated five 30x simulated datasets containing 500 sSRSC of size 2≤<italic>k</italic>≤20 of hg19 chromosomes 1, 8, 15, 17 and 22 (randomly chosen) and calculated GeDi’s and MuTect’s precision and recall when analysing these datasets. Our chosen size distribution 2≤<italic>k</italic>≤20 reflects the known size distribution of SRSC within the human genome [<xref ref-type="bibr" rid="CR1">1</xref>]. As were not testing the effect of allele frequency, average allele frequency kept at 50% for all datasets. A full explanation of how these datasets were generated is given in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Method 2.</p>
      <p>Figure <xref rid="Fig4" ref-type="fig">4</xref> shows the <italic>k-precision</italic> and <italic>k-recall</italic> attained by GeDi and MuTect for sSRSC as <italic>k</italic> increases. We define <inline-formula id="IEq7"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$k-recall= \frac {k-hits}{k-total}$\end{document}</tex-math><mml:math id="M18"><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mtext mathvariant="italic">recall</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mtext mathvariant="italic">hits</mml:mtext></mml:mrow><mml:mrow><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mtext mathvariant="italic">total</mml:mtext></mml:mrow></mml:mfrac></mml:math><inline-graphic xlink:href="12859_2020_3367_Article_IEq7.gif"/></alternatives></inline-formula>, where <italic>k</italic>−<italic>h</italic><italic>i</italic><italic>t</italic><italic>s</italic> is the number of detected SNVs residing in all k-sSRSC across all five datasets, and <italic>k</italic>−<italic>t</italic><italic>o</italic><italic>t</italic><italic>a</italic><italic>l</italic> is the total number of SNVs residing in all k-sSRSC across all five datasets. We define <inline-formula id="IEq8"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$k-precision = \frac {k-hits}{k-fp + k-hits}$\end{document}</tex-math><mml:math id="M20"><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mtext mathvariant="italic">precision</mml:mtext><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mtext mathvariant="italic">hits</mml:mtext></mml:mrow><mml:mrow><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mtext mathvariant="italic">fp</mml:mtext><mml:mo>+</mml:mo><mml:mi>k</mml:mi><mml:mo>−</mml:mo><mml:mtext mathvariant="italic">hits</mml:mtext></mml:mrow></mml:mfrac></mml:math><inline-graphic xlink:href="12859_2020_3367_Article_IEq8.gif"/></alternatives></inline-formula>, where <italic>k</italic>−<italic>f</italic><italic>p</italic> is the total number of false positive calls made within all genuine k-sSRSC added to the number of SNVs within reported k-sSRSCs that contain entirely false positives.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Precision and recall of GeDi and MuTect for sSRSC detection</p></caption><graphic xlink:href="12859_2020_3367_Fig4_HTML" id="MO4"/></fig></p>
      <p>As expected, GeDi shows superior recall for SNV detection at sSRSC than the reference-based SNV caller MuTect. For sSRSC of size <italic>k</italic>≥3, GeDi’s <italic>k-recall</italic> outperforms MuTect’s for sSRSC detection; indeed, for sizes <italic>k</italic>≥9, MuTect’s <italic>k-recall</italic> drops below 10%, whilst GeDi’s remains above 60%. Furthermore, we find that as <italic>k</italic> increases, GeDi’s <italic>k-precision</italic> increases, making GeDi very precise at detecting large sSRSC (Fig. <xref rid="Fig4" ref-type="fig">4</xref>).</p>
    </sec>
    <sec id="Sec12">
      <title>Whole genome sequencing evaluation</title>
      <p>Dataset EGAD00001001859 is a high average coverage (272x control, 314x tumour) medulloblastoma tumour-control paired WGS dataset. It has an associated set of 1255 curated SNV calls (Gold Set), generated by analysing all sequence data from EGAD00001001859 (which we hereafter call MB) with six different popular SNV calling pipelines and accepting calls made by at least three [<xref ref-type="bibr" rid="CR5">5</xref>]. Accordingly, Golden Set’s SNVs are stereotypical what can be identified by current SNV calling pipelines at high coverage. MB contains a data subset, MB:L.A, with average coverage more typical of standard WGS datasets (29.6x control, 40.5x tumour). Combined with Gold Set, MB:L.A can be used to benchmark SNV callers [<xref ref-type="bibr" rid="CR5">5</xref>].</p>
      <p>To evaluate GeDi’s performance on WGS datasets, we analysed MB:L.A with GeDi when running in default mode (<italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=2) and with <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4. To ensure fair comparison with the SNV callers evaluated in [<xref ref-type="bibr" rid="CR5">5</xref>], prior to analysis of MB:L.A with GeDi we preprocessed the raw sequencing reads of MB:L.A exactly following practices given in [<xref ref-type="bibr" rid="CR5">5</xref>]; practices, such as filtering and quality control, are described in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Method 6. We calculated the precision and recall attained by GeDi against Gold Set when analysing MB:L.A in the two aforementioned modes (Table <xref rid="Tab2" ref-type="table">2</xref>, row one and two respectively). In default mode, at 66%, GeDi’s recall against Gold Set ranks above six of the 18 SNV calling pipelines benchmarked in [<xref ref-type="bibr" rid="CR5">5</xref>] including SMuFin. Although the recall achieved by GeDi is lower than we anticipated, it is only 10% below the most sensitive pipeline benchmarked in [<xref ref-type="bibr" rid="CR5">5</xref>]. Furthermore, we find when run GeDi with <italic>p</italic><italic>M</italic><italic>S</italic><italic>S</italic>=4, GeDi’s recall decreased significantly, and is almost identical to that achieved by SMuFin [<xref ref-type="bibr" rid="CR5">5</xref>]. This further highlights the increased sensitivity afforded by GeDi’s dual suffix array design relative to SMuFin’s design.
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Precision, Recall and F-Score attained by GeDi when analysing dataset MB:L.A</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">pMSS</th><th align="left">Total calls</th><th align="left">Precision</th><th align="left">Recall</th><th align="left">F-Score</th></tr></thead><tbody><tr><td align="left">2</td><td align="left">8118</td><td align="left">0.10</td><td align="left">0.66</td><td align="left">0.18</td></tr><tr><td align="left">4</td><td align="left">6519</td><td align="left">0.11</td><td align="left">0.58</td><td align="left">0.19</td></tr></tbody></table></table-wrap></p>
      <p>When analysing MB:L.A in default mode, 7289 of the 8118 SNV calls made by GeDi were not present within Gold Set; we refer to these SNV calls as (<italic>non-Gold Set SNV calls</italic>). Because of these calls, GeDi’s precision against Gold Set ranks lowest out of the 18 tested pipelines [<xref ref-type="bibr" rid="CR5">5</xref>]. To determine whether non-Gold Set SNV calls contain biological signal, we calculated the percentage of these calls occurring within known cis-regulatory or transcribed regions (See Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Method 7 for details on how these percentages were computed). Since these regions are functional genomic regions, if non-Gold Set calls contain biological signal, we expect the percentage of non-Gold Set calls and Gold Set calls occurring in these regions to be similar; as Gold Set calls are high-quality curated calls and should therefore exhibit genuine biological signal. We found 55% of non-Gold Set SNVs occur in such regions. In contrast, only 51% of the 1255 SNV calls comprising Gold Set occur in such regions (Table <xref rid="Tab3" ref-type="table">3</xref>). Hence, our result demonstrates that non-Gold Set SNV calls show a bias towards cis-regulatory or transcribed regions even stronger than the bias in Gold Set. Therefore, given the acceptance of Gold Set as high quality, although non-Gold Set SNV calls remain putative, this result suggests non-Gold Set SNV calls are enriched for genuine biological signals (i.e real SNVs).
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Percentage of SNVs located in transcribed or functional regions for Gold Set, all 8118 SNV calls output by GeDi in default mode (All GeDi), 7289 non-Gold Set SNV calls, and 3331 sSRSC-residing SNV calls (sSRSC-residing)</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Set</th><th align="left">Percent</th></tr></thead><tbody><tr><td align="left">Gold set</td><td align="left">51</td></tr><tr><td align="left">All GeDi</td><td align="left">54</td></tr><tr><td align="left">Non-Gold set</td><td align="left">55</td></tr><tr><td align="left">sSRSC-residing</td><td align="left">54</td></tr></tbody></table><table-wrap-foot><p>Percents rounded to nearest whole percent</p></table-wrap-foot></table-wrap></p>
      <p>Given GeDi’s high sensitivity for sSRSC detection, we used GeDi to characterise sSRSC within MB:L.A. 3331 of 8118 SNV calls made by GeDi when analysing MB:L.A in default mode occurred in sSRSCs (<italic>sSRSC-residing SNV calls</italic>). The overwhelming majority of these were non-Gold Set SNVs (only 16 out of 3331 were present in Gold Set) and are therefore almost entirely absent from Gold Set. Figure <xref rid="Fig5" ref-type="fig">5</xref> shows the absolute frequency of sSRSC-residing SNV calls binned by their occurrence in sSRSC of size <italic>k</italic> (red bars), and with SNPs filtered out (blue bars). We found no sSRSC of size <italic>k</italic>&gt;25. Furthermore, comparison of blue and red bars show that some sSRSCs identified by GeDi contain known SNPs amongst the SNV calls. 54% percent of the sSRSC-residing SNV calls occur within known cis-regulatory or transcribed regions, which like the total non-Gold Set SNVs, is above the percent attained by Gold Set and is suggestive that these putative calls are genuine SNVs (Table <xref rid="Tab3" ref-type="table">3</xref>).
<fig id="Fig5"><label>Fig. 5</label><caption><p>Frequency distribution of sSRSC identified by GeDi when analysing dataset MB:L.A in default mode. Once binned, we removed SNP calls by filtering against <ext-link ext-link-type="uri" xlink:href="http://hgdownload.cse.ucsc.edu/goldenpath/hg19/database/snp150.txt.gz">http://hgdownload.cse.ucsc.edu/goldenpath/hg19/database/ snp150.txt.gz</ext-link>. The y-axis is presented in log-scale. Accordingly, 1 has been added to each sSRSC bin to avoid log(0), i.e undefined values, for bins which no sSRSC of that size were detected. Hence "Number of SNV calls +1" is presented on the y-axis label</p></caption><graphic xlink:href="12859_2020_3367_Fig5_HTML" id="MO5"/></fig></p>
    </sec>
    <sec id="Sec13">
      <title>Runtime and memory evaluation.</title>
      <p>SMuFin suffers from large runtime and memory resource requirements. In GeDi, emfilter was designed to combat these issues, reducing both runtime and memory requirements for suffix array construction. Beyond emfilter, we made extensive use of OpenMP [<xref ref-type="bibr" rid="CR10">10</xref>] to further reduce GeDi’s runtime, parallelising GeDi’s suffix array-based SNV detection, consensus sequence construction and filtering stages. Table <xref rid="Tab4" ref-type="table">4</xref> row one shows the runtime and memory requirements of GeDi, MuTect and SMuFin when analysing a simulated 30x dataset of hg19 chromosome 22 (dataset SMuFin:chr22) downloaded from the SMuFin website (<ext-link ext-link-type="uri" xlink:href="http://cg.bsc.es/smufin/">http://cg.bsc.es/smufin/</ext-link>); despite significant effort we were unable to get SMuFin to execute successfully on any other datasets. Results show that GeDi’s runtime and memory resource requirements are significantly reduced by emfilter, and both memory and runtime resource requirements of GeDi are well below those of MuTect and SMuFin.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Runtime and memory (rss) evaluation of gedi, smufin and mutect</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Dataset</th><th align="left">Size (Million reads / GB)</th><th align="left" colspan="3">RSS (GB)</th><th align="left" colspan="3">Runtime (hours:minutes)</th></tr><tr><th align="left"/><th align="left"/><th align="left">GeDi (no emfilter)</th><th align="left">MuTect</th><th align="left">SMuFin (256 thread)</th><th align="left">GeDi (no emfilter)</th><th align="left">MuTect</th><th align="left">SMuFin (256 thread)</th></tr></thead><tbody><tr><td align="left">SMuFin:chr22</td><td align="left">26 / 4.40</td><td align="left">16 (19)</td><td align="left">67</td><td align="left">22 (107)</td><td align="left">0:20 (0:30)</td><td align="left">1:33</td><td align="left">17:48 (3:47)</td></tr><tr><td align="left">TSD:chr17</td><td align="left">11 / 2.43</td><td align="left">7</td><td align="left">67</td><td align="left">-</td><td align="left">0:06</td><td align="left">0:50</td><td align="left">-</td></tr><tr><td align="left">TSD:chr22</td><td align="left">4 / 0.87</td><td align="left">3</td><td align="left">108</td><td align="left">-</td><td align="left">0:02</td><td align="left">0:38</td><td align="left">-</td></tr><tr><td align="left">MB:L.A</td><td align="left">2052 / 69.21</td><td align="left">1017</td><td align="left">97*</td><td align="left">-</td><td align="left">71:39</td><td align="left">1800*</td><td align="left">-</td></tr></tbody></table><table-wrap-foot><p>no emfilter (bracketed values for gedi) shows gedi’s resource requirements when emfilter is off, for all other gedi runs, emfilter is on. 256 thread (bracketed values for smufin) shows smufin’s resource requirements when run with suggested command at <ext-link ext-link-type="uri" xlink:href="http://cg.bsc.es/smufin/">http://cg.bsc.es/smufin/</ext-link>, whilst values without brackets show SMuFin’s requirements when run with 32 logical threads. GeDi and MuTect were always run with 32 logical threads, apart from analysis of MB:L.A where 64 logical threads were used for both callers. A full description of the methods used to perform this benchmark are provided in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Method 4. All analyses were performed on the same computing system with Xeon: E5-4650v2 CPUs. Runtime and RSS was recorded using GNU Time 1.7 (<ext-link ext-link-type="uri" xlink:href="https://www.gnu.org/">https://www.gnu.org/</ext-link>), where runtime is the elapsed wall clock time and RSS is the maximum residency set size. Asterisk values: MuTect took 72 hours (maximum user runtime) on our system to analyse 4% of the human genome (percentage along genome is given in MuTect output). Accordingly, assuming uniform coverage of MB:L.A data across the genome, we estimated MuTect’s runtime in hours for analysis of the complete MB:L.A dataset by multiplying 72 by 25</p></table-wrap-foot></table-wrap></p>
      <p>Table <xref rid="Tab4" ref-type="table">4</xref> rows 2–4 show that GeDi’s runtime and memory requirements are well below those of MuTect when analysing targeted deep-sequencing datasets making GeDi a very practical algorithm for such analyses. For 30x WGS datasets however, GeDi’s memory resource requirements are large (Table <xref rid="Tab4" ref-type="table">4</xref> row 5), well above MuTect’s. This is due to the large memory resources required during GeDi’s primary suffix array construction. Accordingly, GeDi requires a machine with large memory resources when analysing WGS datasets.</p>
    </sec>
  </sec>
  <sec id="Sec14" sec-type="discussion">
    <title>Discussion</title>
    <p>In this work we introduce GeDi, a suffix array-based SNV caller capable of detecting SNVs reference-free and mapping-free. GeDi’s design enables high sensitivity SNV detection at complex variant loci such as sSRSC, a subset of somatic clustered hypermutation. We found this in stark contrast to MuTect, a reference-based SNV caller, which exhibits greatly reduced sensitivity at such loci. Accordingly, GeDi shows great potential for characterising SNVs at complex variant loci in tumour genomes and will likely outperform other reference-based SNV callers. Indeed, GeDi detected a large number of putative SNVs occurring within complex variant loci (sSRSC) of dataset MB:L.A, providing previously unreported insight into somatic clustered hypermutation within tumour genomes.</p>
    <p>Not only is GeDi capable of detecting SNVs at complex variant loci, it is also capable of detecting rare SNVs whilst maintaining high precision. This feature of GeDi is well-suited towards targeted deep sequencing analyses, where detection of rare SNVs is a primary goal. Indeed, when analysing a targeted deep sequencing dataset (TSD:chr22) GeDi found four previously undetected putative SNVs. Each of these SNVs occurred at very low allele frequency (&lt;0.04), which likely rendered them undetectable by the previously utilised SNV caller (MuTect). Given GeDi’s potential for rare SNV detection and its very practical resource requirements, we expect GeDi to find fruitful application in targeted deep sequencing analyses.</p>
    <p>GeDi advances the suffix array-based approach to SNV calling beyond the original approach outlined in SMuFin [<xref ref-type="bibr" rid="CR3">3</xref>]: Its dual suffix array design resolves SMuFin’s insensitivity at low allele frequencies; its use of a preprocessing filter to reduce resource requirements during suffix array construction and its highly parallelised architecture resolve SMuFin’s large memory and runtime issues; and it performs favourably on both WGS and targeted deep sequencing datasets, outperforming SMuFin for sensitivity. However, future work still remains. First, GeDi’s significant memory resource requirement when analysing large WGS datasets motivates further work into memory reduction. Second, since GeDi can detect SNVs outside the realm of reference-based SNV callers, work is needed to accurately determine GeDi’s precision on real datasets by validation with Sanger sequencing. Third, if shown necessary through Sanger sequencing validation, GeDi’s SNV classification method could be improved by integration of statistical or deep-learning methods [<xref ref-type="bibr" rid="CR6">6</xref>, <xref ref-type="bibr" rid="CR11">11</xref>]. Fourth, GeDi can be readily extended to detect short (&lt; read length) indel variants as both short indels and SNVs will induce sections enriched for tumour-read-derived suffixes with the primary suffix array. Extending GeDi to detect indels reference-free will provide a method for sensitive indel calling in complex variant regions that may outperform reference-based indel callers in these regions. Finally, coloured De Bruijn graph-based variant callers (bubble callers) also detect SNVs reference-free and mapping-free [<xref ref-type="bibr" rid="CR12">12</xref>]. However, bubble callers often rely on simple graph structure (such as the 2k + 2 bubble) to detect SNVs. As a result, bubble callers often fail to detect SNVs that induce more complex graph structures [<xref ref-type="bibr" rid="CR13">13</xref>]. Since GeDi does not rely on graph topology to detect SNVs, in addition to reference-based SNV callers, it may outperform many bubble callers at complex variant loci. Therefore, a comparison of GeDi’s performance against relevant bubble callers will be of value.</p>
  </sec>
  <sec id="Sec15" sec-type="conclusion">
    <title>Conclusions</title>
    <p>Despite the advance of reference-based SNV callers, these algorithms are prone to reduced sensitivity at complex variant loci where incorrect read mapping is common. It is therefore likely that many complex variant loci remain vastly under-characterised within tumour genomes. Our work here shows that GeDi’s detection of SNVs without reliance on mapping coordinates has the capacity to increase the repertoire of detectable SNVs within tumour genomes by enabling characterisation of SNVs at complex variant loci with high sensitivity. Accordingly, we expect GeDi to uncover novel biological insights previously undetected by the cancer genomics research community.</p>
  </sec>
  <sec id="Sec16">
    <title>Availability and requirements</title>
    <p>
      <list list-type="bullet">
        <list-item>
          <p>Project name: GeDi</p>
        </list-item>
        <list-item>
          <p>Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/izaak-coleman/GeDi">https://github.com/izaak-coleman/GeDi</ext-link></p>
        </list-item>
        <list-item>
          <p>Operating system: Platform Independent.</p>
        </list-item>
        <list-item>
          <p>Programming language: C++</p>
        </list-item>
        <list-item>
          <p>Other requirements: g++ 4.8.1 or greater, cmake (<ext-link ext-link-type="uri" xlink:href="https://cmake.org/">https://cmake.org/</ext-link>), and boost (<ext-link ext-link-type="uri" xlink:href="https://www.boost.org/">https://www.boost.org/</ext-link>) must be installed.</p>
        </list-item>
        <list-item>
          <p>License: MIT License</p>
        </list-item>
      </list>
    </p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec17">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2020_3367_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1</bold> SupplementaryData.pdf is available online, and contains all additional data referenced in the main text.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2020_3367_MOESM2_ESM.zip">
            <caption>
              <p><bold>Additional file 2</bold> raw_data.zip is available online and contains raw data for generating the figures and tables presented in the main text and SupplementaryData.pdf.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>aGSA</term>
        <def>
          <p>Auxiliary generalised suffix array</p>
        </def>
      </def-item>
      <def-item>
        <term>GeDi</term>
        <def>
          <p>Generalised suffix array-based Direct SNV caller</p>
        </def>
      </def-item>
      <def-item>
        <term>NGS</term>
        <def>
          <p>Next generation sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>pGSA</term>
        <def>
          <p>Primary generalised suffix array</p>
        </def>
      </def-item>
      <def-item>
        <term>SMuFin</term>
        <def>
          <p>Somatic mutation finder [<xref ref-type="bibr" rid="CR3">3</xref>]</p>
        </def>
      </def-item>
      <def-item>
        <term>SNP</term>
        <def>
          <p>Single nucleotide polymorphism</p>
        </def>
      </def-item>
      <def-item>
        <term>SNV</term>
        <def>
          <p>Single nucleotide variant</p>
        </def>
      </def-item>
      <def-item>
        <term>sSRSC</term>
        <def>
          <p>Somatic short range SNV cluster</p>
        </def>
      </def-item>
      <def-item>
        <term>WGS</term>
        <def>
          <p>Whole genome sequencing</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s12859-020-3367-3.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>The support of EPSRC (grant numbers EP/P010040/1 and EP/N031768/1) and Maxeler Technologies are gratefully acknowledged.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>IC designed and implemented GeDi algorithm, designed and implemented experiments, and wrote manuscript; CG aided with experiments; JA designed emfilter; HN aided with experimental design; LM provided datasets; WL oversaw project. All authors have read and approved the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>EPSRC (grant numbers EP/P010040/1 and EP/N031768/1) and Maxeler Technologies. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>Source code and example data files to run GeDi can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/izaak-coleman/GeDi">https://github.com/izaak-coleman/GeDi</ext-link>. Our work makes use of two unpublished tumour-control paired targeted sequencing datasets referenced as TSD:chr22 and TSD:chr17 throughout this work Additional file <xref rid="MOESM1" ref-type="media">1</xref>. These sequencing datasets were made available to reviewers during the peer-review process. All other raw data files (including the variant call files output from GeDi when analysing TSD:chr22 and TSD:chr17) are publicly on BMC Bioinformatics.</p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p>Ethics approval was obtained by the Data Access Compliance Office (DACO) of International Cancer Genome Consortium, granting us access to dataset EGAD00001001859 through application (DACO-1049545). Ethics approval was obtained by Imperial College Healthcare Tissue Bank, granting us access to datasets TSD:chr22 and TSD:chr17 (unpublished) through application R17027-3A.</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p>Not applicable.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p>Maxeler Technologies partially funded IC for approximately 4 months. This funder had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boenn</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Shrangesim: Simulation of single nucleotide polymorphism clusters in next-generation sequencing data</article-title>
        <source>J Comput Biol</source>
        <year>2018</year>
        <volume>25</volume>
        <issue>6</issue>
        <fpage>613</fpage>
        <lpage>22</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2018.0007</pub-id>
        <pub-id pub-id-type="pmid">29658778</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Degner</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Marioni</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Pai</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Pickrell</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Nkadori</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Gilad</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Pritchard</surname>
            <given-names>JK</given-names>
          </name>
        </person-group>
        <article-title>Effect of read-mapping biases on detecting allele-specific expression from rna-sequencing data</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>24</issue>
        <fpage>3207</fpage>
        <lpage>12</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp579</pub-id>
        <pub-id pub-id-type="pmid">19808877</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Moncunill</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Gonzalez</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bea</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Andrieux</surname>
            <given-names>LO</given-names>
          </name>
          <name>
            <surname>Salaverria</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Royo</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Martinez</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Puiggros</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Segura-Wang</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Stuetz</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Navarro</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Royo</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Gelpi</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Gut</surname>
            <given-names>IG</given-names>
          </name>
          <name>
            <surname>Lopez-Otin</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Orozco</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Korbel</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Campo</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Puente</surname>
            <given-names>XS</given-names>
          </name>
          <name>
            <surname>Torrents</surname>
            <given-names>D</given-names>
          </name>
        </person-group>
        <article-title>Comprehensive characterization of complex structural variations in cancer by directly comparing genome sequence reads</article-title>
        <source>Nat Biotechnol</source>
        <year>2014</year>
        <volume>32</volume>
        <issue>11</issue>
        <fpage>1106</fpage>
        <lpage>12</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3027</pub-id>
        <pub-id pub-id-type="pmid">25344728</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yamagata</surname>
            <given-names>Koichi</given-names>
          </name>
          <name>
            <surname>Yamanishi</surname>
            <given-names>Ayako</given-names>
          </name>
          <name>
            <surname>Kokubu</surname>
            <given-names>Chikara</given-names>
          </name>
          <name>
            <surname>Takeda</surname>
            <given-names>Junji</given-names>
          </name>
          <name>
            <surname>Sese</surname>
            <given-names>Jun</given-names>
          </name>
        </person-group>
        <article-title>COSMOS: accurate detection of somatic structural variations through asymmetric comparison between tumor and normal samples</article-title>
        <source>Nucleic Acids Research</source>
        <year>2016</year>
        <volume>44</volume>
        <issue>8</issue>
        <fpage>e78</fpage>
        <lpage>e78</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkw026</pub-id>
        <pub-id pub-id-type="pmid">26833260</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tyler</surname>
            <given-names>SA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A comprehensive assessment of somatic mutation detection in cancer using whole-genome sequencing</article-title>
        <source>Nat Commun</source>
        <year>2015</year>
        <volume>6</volume>
        <fpage>10001</fpage>
        <pub-id pub-id-type="doi">10.1038/ncomms10001</pub-id>
        <pub-id pub-id-type="pmid">26647970</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cibulskis</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Lawrence</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Carter</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Sivachenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Jaffe</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Sougnez</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Gabriel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Meyerson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lander</surname>
            <given-names>ES</given-names>
          </name>
          <name>
            <surname>Getz</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Sensitive detection of somatic point mutations in impure and heterogeneous cancer samples</article-title>
        <source>Nat Biotechnol</source>
        <year>2013</year>
        <volume>31</volume>
        <issue>3</issue>
        <fpage>213</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.2514</pub-id>
        <pub-id pub-id-type="pmid">23396013</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with bowtie 2</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>4</issue>
        <fpage>357</fpage>
        <lpage>54</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Marth</surname>
            <given-names>GT</given-names>
          </name>
        </person-group>
        <article-title>Art: a next-generation sequencing read simulator</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>4</issue>
        <fpage>593</fpage>
        <lpage>4</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr708</pub-id>
        <pub-id pub-id-type="pmid">22199392</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shin</surname>
            <given-names>H-T</given-names>
          </name>
          <name>
            <surname>Choi</surname>
            <given-names>Y-L</given-names>
          </name>
          <name>
            <surname>Yun</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>NKD</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>S-Y</given-names>
          </name>
          <name>
            <surname>Jeon</surname>
            <given-names>HJ</given-names>
          </name>
          <name>
            <surname>Nam</surname>
            <given-names>J-Y</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Ryu</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Bae</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Son</surname>
            <given-names>DS</given-names>
          </name>
          <name>
            <surname>Joung</surname>
            <given-names>J-G</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>ST</given-names>
          </name>
          <name>
            <surname>Ahn</surname>
            <given-names>M-J</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>S-H</given-names>
          </name>
          <name>
            <surname>Ahn</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>WY</given-names>
          </name>
          <name>
            <surname>Oh</surname>
            <given-names>BY</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>YH</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>KH</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>HC</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>K-M</given-names>
          </name>
          <name>
            <surname>Im</surname>
            <given-names>Y-H</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>PJ</given-names>
          </name>
          <name>
            <surname>Park</surname>
            <given-names>W-Y</given-names>
          </name>
        </person-group>
        <article-title>Prevalence and detection of low-allele-fraction variants in clinical cancer samples</article-title>
        <source>Nat Commun</source>
        <year>2017</year>
        <volume>8</volume>
        <issue>1</issue>
        <fpage>1377</fpage>
        <pub-id pub-id-type="doi">10.1038/s41467-017-01470-y</pub-id>
        <pub-id pub-id-type="pmid">29123093</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dagum</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Menon</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Openmp: An industry standard api for shared-memory programming</article-title>
        <source>IEEE Comput Sci Eng</source>
        <year>1998</year>
        <volume>5</volume>
        <issue>1</issue>
        <fpage>46</fpage>
        <lpage>55</lpage>
        <pub-id pub-id-type="doi">10.1109/99.660313</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Poplin</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>P-C</given-names>
          </name>
          <name>
            <surname>Alexander</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Schwartz</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Colthurst</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Ku</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Newburger</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Dijamco</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nguyen</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Afshar</surname>
            <given-names>PT</given-names>
          </name>
          <name>
            <surname>Gross</surname>
            <given-names>SS</given-names>
          </name>
          <name>
            <surname>Dorfman</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>McLean</surname>
            <given-names>CY</given-names>
          </name>
          <name>
            <surname>DePristo</surname>
            <given-names>MA</given-names>
          </name>
        </person-group>
        <article-title>A universal SNP and small-indel variant caller using deep neural networks</article-title>
        <source>Nat Biotechnol</source>
        <year>2018</year>
        <volume>36</volume>
        <issue>10</issue>
        <fpage>983</fpage>
        <pub-id pub-id-type="doi">10.1038/nbt.4235</pub-id>
        <pub-id pub-id-type="pmid">30247488</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Iqbal</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Caccamo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Turner</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Flicek</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>McVean</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>De novo assembly and genotyping of variants using colored de Bruijn graphs</article-title>
        <source>Nat Genet</source>
        <year>2012</year>
        <volume>44</volume>
        <issue>2</issue>
        <fpage>226</fpage>
        <lpage>32</lpage>
        <pub-id pub-id-type="doi">10.1038/ng.1028</pub-id>
        <pub-id pub-id-type="pmid">22231483</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Bateman</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Treangen</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Limitations of current approaches for reference-free, graph-based variant detection</article-title>
        <source>Proceedings of the 7th ACM International Conference on Bioinformatics, Computational Biology, and Health Informatics. BCB ’16</source>
        <year>2016</year>
        <publisher-loc>New York</publisher-loc>
        <publisher-name>ACM</publisher-name>
      </element-citation>
    </ref>
  </ref-list>
</back>
