<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Microbiol</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Microbiol</journal-id>
    <journal-title-group>
      <journal-title>BMC Microbiology</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2180</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5219722</article-id>
    <article-id pub-id-type="publisher-id">920</article-id>
    <article-id pub-id-type="doi">10.1186/s12866-016-0920-3</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Pyviko: an automated Python tool to design gene knockouts in complex viruses with overlapping genes</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-6993-5838</contrib-id>
        <name>
          <surname>Taylor</surname>
          <given-names>Louis J.</given-names>
        </name>
        <address>
          <email>louist@upenn.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Strebel</surname>
          <given-names>Klaus</given-names>
        </name>
        <address>
          <email>kstrebel@nih.gov</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label>Viral Biochemistry Section, Laboratory of Molecular Microbiology, National Institute of Allergy and Infectious Diseases, National Institutes of Health, Bethesda, MD USA </aff>
      <aff id="Aff2"><label>2</label>Cell and Molecular Biology Graduate Group, Perelman School of Medicine, University of Pennsylvania Philadelphia, Pennsylvania, USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>7</day>
      <month>1</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>7</day>
      <month>1</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2017</year>
    </pub-date>
    <volume>17</volume>
    <elocation-id>12</elocation-id>
    <history>
      <date date-type="received">
        <day>27</day>
        <month>4</month>
        <year>2016</year>
      </date>
      <date date-type="accepted">
        <day>20</day>
        <month>12</month>
        <year>2016</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s). 2017</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>Gene knockouts are a common tool used to study gene function in various organisms. However, designing gene knockouts is complicated in viruses, which frequently contain sequences that code for multiple overlapping genes. Designing mutants that can be traced by the creation of new or elimination of existing restriction sites further compounds the difficulty in experimental design of knockouts of overlapping genes. While software is available to rapidly identify restriction sites in a given nucleotide sequence, no existing software addresses experimental design of mutations involving multiple overlapping amino acid sequences in generating gene knockouts.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>Pyviko performed well on a test set of over 240,000 gene pairs collected from viral genomes deposited in the National Center for Biotechnology Information Nucleotide database, identifying a point mutation which added a premature stop codon within the first 20 codons of the target gene in 93.2% of all tested gene-overprinted gene pairs. This shows that Pyviko can be used successfully in a wide variety of contexts to facilitate the molecular cloning and study of viral overprinted genes.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>Pyviko is an extensible and intuitive Python tool for designing knockouts of overlapping genes. Freely available as both a Python package and a web-based interface (<ext-link ext-link-type="uri" xlink:href="http://louiejtaylor.github.io/pyViKO/">http://louiejtaylor.github.io/pyViKO/</ext-link>), Pyviko simplifies the experimental design of gene knockouts in complex viruses with overlapping genes.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s12866-016-0920-3) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Virus</kwd>
      <kwd>Knockout virus</kwd>
      <kwd>Mutation</kwd>
      <kwd>Overprinting</kwd>
      <kwd>Bioinformatics</kwd>
      <kwd>Cloning</kwd>
      <kwd>Viral mutant</kwd>
      <kwd>Knockout</kwd>
      <kwd>Pyviko</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000060</institution-id>
            <institution>National Institute of Allergy and Infectious Diseases</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group>
        <funding-source>
          <institution>National Institute of Allergy and Infectious Diseases (US)</institution>
        </funding-source>
        <award-id>1 Z01 AI000669</award-id>
        <principal-award-recipient>
          <name>
            <surname>Strebel</surname>
            <given-names>Klaus</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2017</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Gene knockouts are an important tool used to study gene function in viruses [<xref ref-type="bibr" rid="CR1">1</xref>], bacteria [<xref ref-type="bibr" rid="CR2">2</xref>], and other organisms, including model organisms such as mice [<xref ref-type="bibr" rid="CR3">3</xref>]. Although the principle of removing a gene in an attempt to discern its cellular role is not new, the recent development of CRISPR/Cas9 as a tool for knocking out genes in vivo has revolutionized the field of genome editing and underscores the importance of using knockouts as a tool to study gene function [<xref ref-type="bibr" rid="CR4">4</xref>]. A common experimental approach to knocking out a gene is to simply excise the gene of interest from the target organism’s genome. Viruses, however, often contain DNA sequences that code for multiple protein products in separate reading frames, called overprinted genes (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>) [<xref ref-type="bibr" rid="CR5">5</xref>, <xref ref-type="bibr" rid="CR6">6</xref>]. For, example, human immunodeficiency virus type 1 (HIV-1) contains 8 instances of gene overprinting [<xref ref-type="bibr" rid="CR7">7</xref>], as shown in Fig. <xref rid="Fig1" ref-type="fig">1b</xref>. This phenomenon is widespread among different viral families [<xref ref-type="bibr" rid="CR5">5</xref>] and precludes the excision strategy of knocking out a viral gene.<fig id="Fig1"><label>Fig. 1</label><caption><p>Examples of gene overprinting in viruses. <bold>a</bold> Outline showing different types of gene overprinting and associated nucleotide and amino acid sequences. <italic>Gene B</italic> overprints into <italic>gene A</italic> in the same direction but a different frame. Genes <italic>C</italic> and <italic>D</italic> showcase overprinting in different frames and directions. Start codons in nucleotide sequences are shown in green. <bold>b</bold> Genome of human immunodeficiency virus type I [<xref ref-type="bibr" rid="CR7">7</xref>] with annotated genes. <italic>tat</italic> and <italic>rev</italic> splicing is indicated by a solid line</p></caption><graphic xlink:href="12866_2016_920_Fig1_HTML" id="MO1"/></fig>
</p>
    <p>An alternate approach to excising genes is to mutate a sequence in order to insert a premature stop codon in the target gene, which results in a non-functional truncation of the final translated protein. Throughout this work, “target gene” refers to the gene we wish to mutate in order to insert a premature stop codon. In Fig. <xref rid="Fig1" ref-type="fig">1a</xref>, <italic>gene A</italic> is the target (overprinted) gene, and <italic>gene b</italic> is the overlapping gene. To ensure that this truncation retains no function of the wild-type gene, the stop codon should occur as early in the gene sequence as possible. However, the amino acid sequence of the overlapping gene must be preserved in order to experimentally discriminate between changes in phenotype due to changes in the overlapping and target genes. Such mutations are possible due to the degeneracy of the genetic code—several amino acids can be coded for by more than one nucleotide sequence [<xref ref-type="bibr" rid="CR1">1</xref>]. However, designing such mutants by hand is slow and non-trivial, especially when mutating many clones or strains of viruses. Additionally, changes in restriction enzyme recognition sites that can be used to trace the newly introduced mutations are important experimentally in planning molecular cloning and mutagenesis protocols [<xref ref-type="bibr" rid="CR8">8</xref>].</p>
    <p>Restriction enzymes are a class of bacterial endonucleases that specifically cleave DNA at a 4–8 nucleotide recognition sequence. Mutagenesis protocols are frequently designed to add or remove a restriction site as tracers, so that resulting constructs can be analyzed inexpensively for the presence of the desired mutation without having to sequence multiple clones [<xref ref-type="bibr" rid="CR8">8</xref>]. Given the diversity and number of restriction enzymes commercially available [<xref ref-type="bibr" rid="CR9">9</xref>], searching for potential restriction enzyme recognition sites in a given DNA sequence by hand is unfeasible. Methods for rapid searching of nucleotide sequences for restriction sites have been previously published [<xref ref-type="bibr" rid="CR10">10</xref>] and are not discussed here. In this work, we introduce Pyviko—a tool which automates the process of designing knockout viruses while taking into account changes in restriction enzyme recognition sites and the integrity of the overlapping gene.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p>Pyviko was implemented in Python 2.7. The Python regex module [<xref ref-type="bibr" rid="CR11">11</xref>] is optional and can be installed to augment the base functionality of Pyviko, but is not required to use the software. Source code is freely available [<xref ref-type="bibr" rid="CR12">12</xref>] under the MIT license and is thoroughly unit tested prior to each release. Releases are available from the Python Package Index [<xref ref-type="bibr" rid="CR13">13</xref>]. A client-side web interface in JavaScript is available for making single-gene knockouts without installing Pyviko [<xref ref-type="bibr" rid="CR14">14</xref>]. Extensive documentation for Pyviko is available online [<xref ref-type="bibr" rid="CR15">15</xref>] and as comments in the source code. Online documentation is build directly from comments in the source using pdoc [<xref ref-type="bibr" rid="CR16">16</xref>] and is available without installing Pyviko. Bug reports should be submitted on the project’s GitHub page [<xref ref-type="bibr" rid="CR12">12</xref>].</p>
    <p>The basic functionality of Pyviko is divided into three modules: core, restriction, and mutation. Functions for basic nucleic acid sequence manipulation, including reading from and writing to Fast-All (FASTA) files, are included within the core module. The restriction module contains functions to analyze sequences for restriction sites and find changes in restriction sites that result from sequence changes. The mutation module includes functions to find favorable mutations as well as the Mutant and OverGene classes. The Mutant class brings together the three modules and identifies favorable knockout mutants in sequences of interest.</p>
  </sec>
  <sec id="Sec3">
    <title>Results</title>
    <sec id="Sec4">
      <title>Use in interactive and stand-alone scripts</title>
      <p>Pyviko was created to streamline the process of planning viral mutageneses. Each module is designed to be intuitive and extensible to facilitate its use in a variety of applications. Figure <xref rid="Fig2" ref-type="fig">2a–b</xref> shows the generation of knockouts from a single target and overlapping gene pair in an interactive fashion in a Python interpreter. Using the sequences of an input gene and its overprinted counterpart, the overlapping sequence is automatically detected and all possible knockouts matching the input parameters are displayed. Thus, in the example shown in Fig. <xref rid="Fig2" ref-type="fig">2a</xref>, the target gene can be knocked out by mutating the initiation codon (index 0) to ACG without changing the coding capacity of the overlapping gene (TAT and TAC both code for tyrosine). Alternatively, the TCA (serine) codon at index 3 of the target gene can be mutated to a stop codon (TGA or TAA) without changing the coding sequence of the overlapping gene (CTC, CTA and CTG all encode leucine).<fig id="Fig2"><label>Fig. 2</label><caption><p>Usage of Pyviko in stand-alone scripts and web interface. <bold>a</bold> Schematic of sample target (<italic>Y</italic>) and overlapping (<italic>X</italic>) genes used in code examples. <bold>b</bold> Minimal Python commands for generating gene knockouts. In this interactive example, “&gt;&gt;&gt;” denotes input into a Python interpreter and output is displayed directly below the input on an unindented line. <bold>c</bold> Pyviko input interface [<xref ref-type="bibr" rid="CR14">14</xref>] including sample gene sequences. <bold>d</bold> Results of analysis for input shown in (<bold>c</bold>)</p></caption><graphic xlink:href="12866_2016_920_Fig2_HTML" id="MO2"/></fig>
</p>
      <p>To reach a wider, non-computational audience, this single-gene pair knockout script has also been implemented as a graphical interface in JavaScript [<xref ref-type="bibr" rid="CR14">14</xref>]. This interface supports generation of knockouts for a gene or pair of genes under various parameters, including requirements for start codon mutants or restriction site changes. Figure <xref rid="Fig2" ref-type="fig">2c</xref> shows the input interface and 2D shows the output of the analysis for the gene pair shown in Fig. <xref rid="Fig2" ref-type="fig">2a</xref>. The full mutant sequence for each mutation is shown together with a link to an interface to design further restriction site changes for a particular point mutant.</p>
      <p>For experiments requiring the generation of many mutants, Pyviko provides a rapid, high-throughput approach to viral mutagenesis. Additionally, Pyviko supports reading from and writing to files in the universal FASTA format to maximize inter-application compatibility. Additional file <xref rid="MOESM1" ref-type="media">1</xref> contains a Python script showcasing the ability of Pyviko to generate mutants in a batched fashion, taking input from FASTA files and writing mutagenesis results to FASTA. Additional file <xref rid="MOESM1" ref-type="media">1</xref> also shows many of the options available when searching sequences, including filtering for mutants that add or remove a restriction site and including or excluding mutants that perturb the start codon. Mutating a gene’s start codon is another feasible option to prevent production of a specific protein. Some viruses, however, have been shown to use alternate start codons [<xref ref-type="bibr" rid="CR17">17</xref>]. Care should be taken to biologically validate knockouts made using this strategy.</p>
    </sec>
    <sec id="Sec5">
      <title>Integration with existing tools and extensibility</title>
      <p>Recent trends toward open-source software in bioinformatics have led to the development of a variety of new Python tools for analyzing nucleotide sequences, including Biopython [<xref ref-type="bibr" rid="CR10">10</xref>] and Pydna [<xref ref-type="bibr" rid="CR18">18</xref>]. While Biopython and Pydna both include functions for restriction site identification, neither is designed to analyze restriction site changes as a result of nucleotide sequence mutations. Pyviko is designed to solve the problem of mutating overprinted genes, which are most common in viruses but do occur in other organisms, including bacteria [<xref ref-type="bibr" rid="CR19">19</xref>], mice, and humans [<xref ref-type="bibr" rid="CR20">20</xref>]. Unlike other software, Pyviko is optimized to analyze multiple overlapping sequences concurrently, examining changes in translated amino acid sequence and restriction sites resulting from changes in nucleotide sequence.</p>
      <p>While Pyviko is not dependent on existing software for its basic nucleic acid manipulation and restriction site identification functionalities, it is not designed to supersede other general nucleotide sequence analysis programs. Rather, Pyviko can be used in conjunction with software like Pydna and Biopython to complement Pyviko’s approach to viral mutagenesis. Additional file <xref rid="MOESM2" ref-type="media">2</xref> contains the script used to collect sequences from GenBank for the large-scale analysis discussed in the following section. This script leverages Biopython’s Entrez module to retrieve viral genomes to be analyzed by Pyviko. Additional file <xref rid="MOESM3" ref-type="media">3</xref> is a Python script that retrieves a viral genome sequence (HIV-1 NL4-3 [<xref ref-type="bibr" rid="CR21">21</xref>]) from the NCBI Nucleotide database [<xref ref-type="bibr" rid="CR22">22</xref>] via Biopython, generates a knockout for a target overprinted gene (<italic>vpr</italic>) with Pyviko, then uses Pydna to design primers for molecular cloning.</p>
      <p>Although Pyviko was designed to generate knockouts of viral overprinted genes, the software is generally applicable to any mutagenesis of overprinted genes. Additional file <xref rid="MOESM4" ref-type="media">4</xref> is a Python script containing a variety of examples of mutagenesis design involving overprinted genes, including: mutagenesis of hydrophobic to non-hydrophobic amino acid residues in the target gene, identification of all mutations in the overprinted region that do not change the polypeptide sequence of the overlapped gene, and generating a sequence that scrambles the amino acids of a target gene without changing the amino acids of the overlapping gene.</p>
    </sec>
    <sec id="Sec6">
      <title>Large-scale functional testing</title>
      <p>To validate the approach of Pyviko in knocking out overprinted viral genes, we performed a large-scale analysis of annotated viral genomes deposited in the National Center for Biotechnology Information (NCBI) Nucleotide database. Using the script included as Additional file <xref rid="MOESM2" ref-type="media">2</xref>, we collected 48,770 sequences annotated as complete viral genomes from the NCBI Nucleotide database. From these genomes, 248,777 pairs of overprinted gene pairs were identified and analyzed by Pyviko. Note that individual genes may appear in more than one pair as a gene may overlap with more than one other gene (e.g. <italic>vif</italic> gene in Fig. <xref rid="Fig1" ref-type="fig">1b</xref>).</p>
      <p>Pyviko was able to identify point mutants that added a premature stop codon in the target gene without changing the amino acid sequence of the overlapped gene in 96.5% of all genes analyzed. Many of these mutations added or removed a restriction enzyme recognition site [<xref ref-type="bibr" rid="CR9">9</xref>], and 96.2% of all target genes analyzed could be knocked out as above with the additional constraint of a restriction site change. However, the location of the premature stop codon is important for the efficacy of the knockout—a “premature” stop codon close to the end of the target gene could still result in a gene product with some level of function. Thus, we decided to further judge the efficacy of Pyviko knockouts by examining the first possible premature stop codon in each target gene identified by Pyviko.</p>
      <p>To quantify the effectiveness of Pyviko knockouts, we calculated the percentage of stop codons that could be added within the first 20 codons of the target gene. While there is evidence that polypeptides shorter than 20 amino acids could have intracellular functions [<xref ref-type="bibr" rid="CR23">23</xref>], it is highly unlikely that a protein truncated to 20 amino acids or less would retain its original function. Pyviko identified potential premature stop codons within the first 20 codons in 93.2% of all target genes (Fig. <xref rid="Fig3" ref-type="fig">3a</xref>). Requiring a restriction site change, Pyviko identified a premature stop codon within the first 20 codons in 76.4% of target genes (Fig. <xref rid="Fig3" ref-type="fig">3b</xref>). These data show that, while requiring a restriction site change does not greatly change the percentage of target genes that can be knocked out, the distribution of first premature stop codons is much wider when restriction site changes are required (Fig. <xref rid="Fig3" ref-type="fig">3a–d</xref>). It is also possible that the relative truncated length of a knockout is important—for example, a truncated gene coding for 20 amino acids is 20% of the final polypeptide length of a 100 amino acid protein, but only 2% of a 1000 amino acid protein. However, a heat map of first-codon knockouts along a unit gene show that over 90% of knockouts are within the first 10% of the coding sequence both without (Fig. <xref rid="Fig3" ref-type="fig">3c</xref>) and with (Fig. <xref rid="Fig3" ref-type="fig">3d</xref>) restriction site change constraints. This is consistent with the conclusion that the vast majority of Pyviko-designed gene knockouts will not result in a functional protein product.<fig id="Fig3"><label>Fig. 3</label><caption><p>Large-scale analysis of viral overprinted genes from the NCBI Nucleotide database. <bold>a</bold> and <bold>b</bold> Show counts of the first position at which a directed point mutation can insert a premature stop codon in the overprinted gene without changing the amino acid sequence of the overlapped gene in each gene pair surveyed. Full-size graphs show mutations over the full length of all genes surveyed with a log<sub>2</sub> scale to ensure visibility of bins with low counts. Insets show the first 100 codons of each gene with a linear y axis. <bold>a</bold> Shows counts without requiring a restriction site change and (<bold>b</bold>) shows counts with a required restriction site change. <bold>c</bold> and <bold>d</bold> Show positions of the first stop codon mutants from (<bold>a</bold>) and (<bold>b</bold>) expressed as the ratio of the position of the first codon relative to the total length of the gene in codons. <bold>c</bold>, as in (<bold>a</bold>), shows counts without requiring a restriction site change and (<bold>d</bold>), as in (<bold>b</bold>), shows counts with a required restriction site change</p></caption><graphic xlink:href="12866_2016_920_Fig3_HTML" id="MO3"/></fig>
</p>
    </sec>
  </sec>
  <sec id="Sec7">
    <title>Conclusions</title>
    <p>In this work, we introduce Pyviko, an intuitive and extensible Python tool for designing viral knockouts. While the software is platform-independent and does not require any external modules other than Python itself, Pyviko can also be used with existing Python tools such as Biopython and Pydna to extend its base functionality as shown in the example scripts. Pyviko performed well on a test set of over 240,000 gene pairs collected from viral genomes deposited in the NCBI Nucleotide database, identifying a point mutation that could be inserted within the first 20 codons of the target gene in 93.2% of all tested gene-overprinted gene pairs. This shows that Pyviko can be used successfully in a wide variety of contexts to facilitate the molecular cloning and study of viral overprinted genes. The complete source code and quick-start guide are included as Additional files <xref rid="MOESM5" ref-type="media">5</xref> and <xref rid="MOESM6" ref-type="media">6</xref>, respectively.</p>
  </sec>
  <sec id="Sec8">
    <title>Availability and requirements</title>
    <p>Project name: Pyviko</p>
    <p>Project home pages: <ext-link ext-link-type="uri" xlink:href="https://github.com/louiejtaylor/pyViKO">https://github.com/louiejtaylor/pyViKO</ext-link>, <ext-link ext-link-type="uri" xlink:href="https://pypi.python.org/pypi/pyviko">https://pypi.python.org/pypi/pyviko</ext-link>
</p>
    <p>Operating system(s): Platform independent</p>
    <p>Programming language: Python</p>
    <p>Other requirements: Python 2.7 or higher</p>
    <p>License: MIT license</p>
  </sec>
</body>
<back>
  <app-group>
    <app id="App1">
      <sec id="Sec9">
        <title>Additional files</title>
        <p>
          <media position="anchor" xlink:href="12866_2016_920_MOESM1_ESM.py" id="MOESM1">
            <label>Additional file 1:</label>
            <caption>
              <p>A Python script showcasing the ability of Pyviko to generate mutants in a batched fashion, taking input from FASTA files and writing mutagenesis results to FASTA. Additional file <xref rid="MOESM1" ref-type="media">1</xref> also shows many of the options available when searching sequences, including filtering for mutants that add or remove a restriction site and including or excluding mutants that perturb the start codon. (PY 787 bytes)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12866_2016_920_MOESM2_ESM.py" id="MOESM2">
            <label>Additional file 2:</label>
            <caption>
              <p>The Python script used to collect sequences from GenBank for the large-scale analysis in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. This script leverages Biopython’s Entrez module to retrieve viral genomes to be analyzed by Pyviko. (PY 4 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12866_2016_920_MOESM3_ESM.py" id="MOESM3">
            <label>Additional file 3:</label>
            <caption>
              <p>A Python script that retrieves a viral genome sequence (HIV-1 NL4-3) from the NCBI Nucleotide database via Biopython, generates a knockout for a target overprinted gene (<italic>vpr</italic> is overprinted by <italic>vif</italic>) with Pyviko, then uses Pydna to design primers for molecular cloning. (PY 1 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12866_2016_920_MOESM4_ESM.py" id="MOESM4">
            <label>Additional file 4:</label>
            <caption>
              <p>A Python script containing a variety of examples of mutagenesis design involving overprinted genes: mutagenesis of hydrophobic to non-hydrophobic amino acid residues in the target gene, identification of all mutations in the overprinted region that do not change the polypeptide sequence of the overlapped gene, and generating a sequence that scrambles the amino acids of the target gene without changing the amino acids of the overlapped gene. (PY 4 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12866_2016_920_MOESM5_ESM.pdf" id="MOESM5">
            <label>Additional file 5:</label>
            <caption>
              <p>The Pyviko Web User Interface Quick Start Guide, also available at [<xref ref-type="bibr" rid="CR24">24</xref>]. This document explains the use of the Pyviko web user interface. (PDF 461 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12866_2016_920_MOESM6_ESM.gz" id="MOESM6">
            <label>Additional file 6:</label>
            <caption>
              <p>The Pyviko source code, version 1.0.1.1. Current release available from the Python Package Index [<xref ref-type="bibr" rid="CR13">13</xref>]. (GZ 7 kb)</p>
            </caption>
          </media>
        </p>
      </sec>
    </app>
  </app-group>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>DNA</term>
        <def>
          <p>Deoxyribonucleic acid</p>
        </def>
      </def-item>
      <def-item>
        <term>FASTA</term>
        <def>
          <p>Fast-All (file format)</p>
        </def>
      </def-item>
      <def-item>
        <term>HIV-1</term>
        <def>
          <p>Human immunodeficiency virus type 1</p>
        </def>
      </def-item>
      <def-item>
        <term>NCBI</term>
        <def>
          <p>National Center for Biotechnology Information</p>
        </def>
      </def-item>
      <def-item>
        <term>Pyviko</term>
        <def>
          <p>Python viral knockouts</p>
        </def>
      </def-item>
      <def-item>
        <term>RNA</term>
        <def>
          <p>Ribonucleic acid</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <ack>
    <title>Acknowledgements</title>
    <p>Thanks to J. Haber of the University of California at Berkeley for help with unit tests, D. G. Fisher, M. M. Addison and N. Kadry of the University of Pennsylvania for critical reading of the manuscript and to members of the Strebel lab for discussions and suggestions.</p>
    <sec id="FPar1">
      <title>Funding</title>
      <p>This work was supported by the Intramural Research Program of the NIH, NIAID (KS: 1 Z01 AI000669) and by an NIH Post-baccalaureate Fellowship (LJT).</p>
    </sec>
    <sec id="FPar2">
      <title>Availability of data and materials</title>
      <p>All data and analysis scripts are included as supplementary files. The Pyviko web interface is available at <ext-link ext-link-type="uri" xlink:href="http://louiejtaylor.github.io/pyViKO/">http://louiejtaylor.github.io/pyViKO/</ext-link>, and the code is hosted on GitHub at <ext-link ext-link-type="uri" xlink:href="https://github.com/louiejtaylor/pyViKO">https://github.com/louiejtaylor/pyViKO</ext-link>.</p>
    </sec>
    <sec id="FPar3">
      <title>Authors’ contributions</title>
      <p>LJT and KS conceived and tested the software. LJT designed and implemented the software, unit tests, and functional tests. LJT and KS drafted and edited the manuscript. Both authors read and approved the final manuscript.</p>
    </sec>
    <sec id="FPar4">
      <title>Competing interests</title>
      <p>The authors declare that they have no competing interests.</p>
    </sec>
    <sec id="FPar5">
      <title>Consent for publication</title>
      <p>Not applicable.</p>
    </sec>
    <sec id="FPar6">
      <title>Ethics approval and consent to participate</title>
      <p>Per the National Institutes of Health’s Ethical Guidelines &amp; Regulations, no formal ethics approval was required for this study.</p>
    </sec>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Crick FH, Barnett L, Brenner S, Watts-Tobin RJ. General nature of the genetic code for proteins. Nature. 1961; doi:10.1038/1921227a0.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Mori H, Baba T, Yokoyama K, Takeuchi R, Nomura W, Makishi K, Otsuka Y, Dose H, Wanner BL. Identification of Essential Genes and Synthetic Lethal Gene Combinations in Escherichia coli K-12. Gene Essentiality. 2015; doi:10.1007/978-1-4939-2398-4.</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Sauer B. Inducible gene targeting in mice using the Cre/lox system. Methods. 1998; doi:10.1006/meth.1998.0593.</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Ran FA, Hsu PPD, Wright J, Agarwala V, Scott DA, Zhang F. Genome engineering using the CRISPR-Cas9 system. Nat Protoc. 2013; doi:10.1038/nprot.2013.143.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">Pavesi A, Magiorkinis G, Karlin DG. Viral Proteins Originated De Novo by Overprinting Can Be Identified by Codon Usage: Application to the “Gene Nursery” of Deltaretroviruses. PLoS Comput Biol. 2013; doi:10.1371/journal.pcbi.1003162.</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <mixed-citation publication-type="other">Firth AE, Brown CM. Detecting overlapping coding sequences in virus genomes. BMC Bioinformatics. 2006; doi:10.1186/1471-2105-7-75.</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">Strebel K. HIV accessory proteins versus host restriction factors. Curr Opin Virol. 2013; doi:10.1016/j.coviro.2013.08.004.</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Roberts RJ. How restriction enzymes became the workhorses of molecular biology. Proc Natl Acad Sci USA. 2005; doi:10.1073/pnas.0500923102.</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Alphabetized List of Recognition Specificities. New England BioLabs, Inc. 2016. <ext-link ext-link-type="uri" xlink:href="https://www.neb.com/tools-and-resources/selection-charts/alphabetized-list-of-recognition-specificities">https://www.neb.com/tools-and-resources/selection-charts/alphabetized-list-of-recognition-specificities</ext-link>. Accessed 4 Jan 2016.</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">Cock PJA, Antao T, Chang JT, Chapman BA, Cox CJ, Dalke A, Friedberg I, Hamelryck T, Kauff F, Wilczynski B, de Hoon MJL. Biopython: freely available Python tools for computational molecular biology and bioinformatics. Bioinformatics. 2009; doi:10.1093/bioinformatics/btp163.</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <mixed-citation publication-type="other">Barnett, M. regex module. Python Software Foundation. 2015. <ext-link ext-link-type="uri" xlink:href="https://pypi.python.org/pypi/regex">https://pypi.python.org/pypi/regex</ext-link>. Accessed 11 Nov 2015.</mixed-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Taylor, LJ. Pyviko source. 2016. <ext-link ext-link-type="uri" xlink:href="https://github.com/louiejtaylor/pyViKO">https://github.com/louiejtaylor/pyViKO</ext-link>. Accessed 1 Jan 2016.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Taylor, LJ. Pyviko releases. 2016. <ext-link ext-link-type="uri" xlink:href="https://pypi.python.org/pypi/pyviko">https://pypi.python.org/pypi/pyviko</ext-link>. Accessed 2 March 2016.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Taylor, LJ. Pyviko web user interface. 2016. <ext-link ext-link-type="uri" xlink:href="http://louiejtaylor.github.io/pyViKO/">http://louiejtaylor.github.io/pyViKO/</ext-link>. Accessed 5 Jan 2016.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Taylor, LJ. Pyviko documentation. <ext-link ext-link-type="uri" xlink:href="http://louiejtaylor.github.io/pyViKO/doc/">http://louiejtaylor.github.io/pyViKO/doc/</ext-link>. Accessed 1 Jan 2016.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">BurntSushi. pdoc source. <ext-link ext-link-type="uri" xlink:href="https://github.com/BurntSushi/pdoc">https://github.com/BurntSushi/pdoc</ext-link>. Accessed 1 Jan 2016.</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">Andreev DE, Fernandez-Miragall O, Ramajo J, Dmitriev SE, Terenin IM, Martinez-Salas E, Shatsky IN. Differential factor requirement to assemble translation initiation complexes at the alternative start codons of foot-and-mouth disease virus RNA. RNA. 2007; doi:10.1261/rna.469707.</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Pereira F, Azevedo F, Carvalho Â, Ribeiro GF, Budde MW, Johansson B. Pydna: a simulation and documentation tool for DNA assembly strategies using python. BMC Bioinformatics. 2015; doi:10.1186/s12859-015-0544-x.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">Delaye L, Deluna A, Lazcano A, Becerra A. The origin of a novel gene through overprinting in Escherichia coli. BMC Evol Biol. 2008; doi:10.1186/1471-2148-8-31.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">Sanna CR, Li W-H, Zhang L. Overlapping genes in the human and mouse genomes. BMC Genomics. 2008; doi:10.1186/1471-2164-9-169.</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Adachi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gendelman</surname>
            <given-names>HE</given-names>
          </name>
          <name>
            <surname>Koenig</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Folks</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Willey</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rabson</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Martin</surname>
            <given-names>MA</given-names>
          </name>
        </person-group>
        <article-title>Production of acquired immunodeficiency syndrome-associated retrovirus in human and nonhuman cells transfected with an infectious molecular clone</article-title>
        <source>J Virol</source>
        <year>1986</year>
        <volume>59</volume>
        <fpage>284</fpage>
        <lpage>291</lpage>
        <?supplied-pmid 3016298?>
        <pub-id pub-id-type="pmid">3016298</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <mixed-citation publication-type="other">Wheeler DL. Database resources of the National Center for Biotechnology Information. Nucleic Acids Res. 2004; doi:10.1093/nar/gki062.</mixed-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">Andrews SJ, Rothnagel JA. Emerging evidence for functional peptides encoded by short open reading frames. Nat Rev Genet. 2014; doi:10.1038/nrg3520.</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Taylor LJ. Pyviko Web UI Quick Start Guide. <ext-link ext-link-type="uri" xlink:href="http://louiejtaylor.github.io/pyViKO/doc/Pyviko_quick-start.pdf">http://louiejtaylor.github.io/pyViKO/doc/Pyviko_quick-start.pdf</ext-link>. Accessed 2 Apr 2016.</mixed-citation>
    </ref>
  </ref-list>
</back>
