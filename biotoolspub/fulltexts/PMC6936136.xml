<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Genomics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Genomics</journal-id>
    <journal-title-group>
      <journal-title>BMC Genomics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2164</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6936136</article-id>
    <article-id pub-id-type="publisher-id">6341</article-id>
    <article-id pub-id-type="doi">10.1186/s12864-019-6341-6</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Cloud accelerated alignment and assembly of full-length single-cell RNA-seq data using Falco</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Yang</surname>
          <given-names>Andrian</given-names>
        </name>
        <address>
          <email>jane.e.doe@cambridge.co.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kishore</surname>
          <given-names>Abhinav</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Phipps</surname>
          <given-names>Benjamin</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-2331-7011</contrib-id>
        <name>
          <surname>Ho</surname>
          <given-names>Joshua W. K.</given-names>
        </name>
        <address>
          <email>jwkho@hku.hk</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0000 9472 3971</institution-id><institution-id institution-id-type="GRID">grid.1057.3</institution-id><institution>Victor Chang Cardiac Research Institute, </institution></institution-wrap>405 Liverpool St, Darlinghurst, 2010 New South Wales Australia </aff>
      <aff id="Aff2"><label>2</label>St. Vincent’s Clinical School, University of New South Wales, Darlinghurst, 2010 New South Wales Australia </aff>
      <aff id="Aff3"><label>3</label>School of Biomedical Sciences, Li Ka Shing Faculty of Medicine, The University of Hong Kong, Pokfulam, Hong Kong China </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>30</day>
      <month>12</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>30</day>
      <month>12</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <volume>20</volume>
    <issue>Suppl 10</issue>
    <issue-sponsor>Publication of this supplement has not been supported by sponsorship. Information about the source of funding for publication charges can be found in the individual articles. The articles have undergone the journal's standard peer review process for supplements. Supplement Editors were not responsible for the review of papers they had authored. No other competing interests were declared.</issue-sponsor>
    <elocation-id>927</elocation-id>
    <history>
      <date date-type="received">
        <day>17</day>
        <month>11</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>26</day>
        <month>11</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2019</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Read alignment and transcript assembly are the core of RNA-seq analysis for transcript isoform discovery. Nonetheless, current tools are not designed to be scalable for analysis of full-length bulk or single cell RNA-seq (scRNA-seq) data. The previous version of our cloud-based tool Falco only focuses on RNA-seq read counting, but does not allow for more flexible steps such as alignment and read assembly.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">The Falco framework can harness the parallel and distributed computing environment in modern cloud platforms to accelerate read alignment and transcript assembly of full-length bulk RNA-seq and scRNA-seq data. There are two new modes in Falco: alignment-only and transcript assembly. In the alignment-only mode, Falco can speed up the alignment process by 2.5–16.4x based on two public scRNA-seq datasets when compared to alignment on a highly optimised standalone computer. Furthermore, it also provides a 10x average speed-up compared to alignment using published cloud-enabled tool for read alignment, Rail-RNA. In the transcript assembly mode, Falco can speed up the transcript assembly process by 1.7–16.5x compared to performing transcript assembly on a highly optimised computer.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p id="Par3">Falco is a significantly updated open source big data processing framework that enables scalable and accelerated alignment and assembly of full-length scRNA-seq data on the cloud. The source code can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/VCCRI/Falco">https://github.com/VCCRI/Falco</ext-link>.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Single-cell RNA-seq</kwd>
      <kwd>Cloud computing</kwd>
      <kwd>Falco</kwd>
      <kwd>Alignment</kwd>
      <kwd>Transcript assembly</kwd>
    </kwd-group>
    <conference xlink:href="https://www.abacbs.org/conference2019/about">
      <conf-name>Joint 30th International Conference on Genome Informatics (GIW) &amp; Australian Bioinformatics and Computational Biology Society (ABACBS) Annual Conference</conf-name>
      <conf-loc>Sydney, Australia</conf-loc>
      <conf-date>9-11 December 2019</conf-date>
    </conference>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>The main step in most RNA sequencing (RNA-seq) analyses is the alignment of sequencing reads against the reference genome or transcriptome to find the location from which the reads originate. The positional information of the reads, together with the sequences of the reads themselves, forms the basis from which many different downstream analyses can be performed, such as gene expression analysis, variant calling, and novel isoform identification. The read alignment step is typically one of the most time consuming steps during RNA-seq analysis due to the complex algorithm utilised during the read alignment process. There have been a number of recently published tools which are designed to skip this expensive step through the use of pseudoalignment methods, such as kallisto [<xref ref-type="bibr" rid="CR1">1</xref>] and Salmon [<xref ref-type="bibr" rid="CR2">2</xref>]. However, these tools are designed specifically for read quantification and therefore are not applicable to other types of downstream analyses.</p>
    <p>There are a number of tools which have been published for alignment of RNA-seq reads, including STAR [<xref ref-type="bibr" rid="CR3">3</xref>], HISAT2 [<xref ref-type="bibr" rid="CR4">4</xref>] and Subread [<xref ref-type="bibr" rid="CR5">5</xref>]. While these tools offer parallelisation to perform read alignment in a time-efficient manner, they are typically limited to a single machine only. With the rapidly increasing number of profiles which can be generated by single-cell RNA-seq (scRNA-seq) techniques, there is a need to develop tools which can perform read alignment of large datasets across many machines in a scalable manner. We have previously developed the Falco framework for scalable analysis of scRNA-seq data on the cloud [<xref ref-type="bibr" rid="CR6">6</xref>], with the initial version of Falco being primarily designed for the quantification of scRNA-seq datasets. While most downstream analysis of scRNA-seq datasets are based on gene expression, there are other types of downstream analyses which does not require gene expression, including novel isoform identification and immune cell receptor reconstruction. In order to enable the Falco framework to support these types of downstream analyses, we introduce an alignment-only mode which produces alignment information output for individual scRNA-seq samples.</p>
    <p>The idea of parallelising read alignment across distributed computing infrastructure is not novel – there are already existing tools available that perform read alignment on cluster computing, grid computing and cloud computing infrastructures. Within the context of tools developed using Big Data frameworks, there are Hadoop-based tools, such as Halvade-RNA [<xref ref-type="bibr" rid="CR7">7</xref>] and HSRA [<xref ref-type="bibr" rid="CR8">8</xref>], and Spark-based Rail-RNA [<xref ref-type="bibr" rid="CR9">9</xref>], for alignment of spliced reads. Halvade-RNA is mainly designed for variant calling of RNA-seq data using STAR aligner and GATK [<xref ref-type="bibr" rid="CR10">10</xref>] variant caller, though it can optionally produce alignment information output. HSRA, on the other hand, is designed for RNA-seq alignment using the HISAT2 aligner. These two tools will not be able to properly analyse the large number of samples present in scRNA-seq data as they are mainly designed to process individual samples. In contrast, Rail-RNA is able to perform multi-sample alignment of RNA-seq data using a modified Bowtie algorithm [<xref ref-type="bibr" rid="CR11">11</xref>] to handle spliced reads. One limitation of Rail-RNA is that the alignment tool used is non-configurable, unlike the Falco framework, which allows the user to customise the alignment tool used. Furthermore, Rail-RNA requires the user to manually pre-process the sequencing reads by themselves, whereas the Falco framework provides a pre-processing step as part of the analysis.</p>
    <p>The downstream analyses following the read alignment steps typically make use of transcript information to provide biological context for the aligned reads. For example, in feature quantification, transcript information is used as feature to summarise reads into counts representing transcript abundance. For eukaryotic genome, the transcript information provides multiple levels of granularity as genes can go through alternative splicing, whereby multiple isoforms of proteins are generated from the same precursor mRNA through exclusion or inclusion of exonic regions. Alternative splicing is a commonly occurring process within the human genome, with &gt;95% of the multi-exonic genes having 2 or more isoforms [<xref ref-type="bibr" rid="CR12">12</xref>], and the different isoforms of proteins typically have unique functionality. Some isoforms are expressed only in specific cell types [<xref ref-type="bibr" rid="CR13">13</xref>] and novel isoforms arising from mutations may result in diseases such as cancer [<xref ref-type="bibr" rid="CR14">14</xref>].</p>
    <p>Current methods of isoform analysis are largely dependent on existing transcript isoform information from reference annotation, such as those published by ENCODE and UCSC. However, there are limitations with using reference annotation as we are restricted to studying known transcripts only. While this is less of an issue in human and well-annotated model organisms, isoform analysis will not be as accurate for non-model organisms or organism with limited/partial annotation information. Moreover, novel isoform which may arise due to mutation will not be detectable when using existing annotation. In order to alleviate the problem of detecting new isoforms for isoform analysis, transcript assembly can be utilised to detect and update existing annotations with novel isoforms.</p>
    <p>As the name implies, transcript assembly is the process of recovering transcript sequences through assembly of reads. There are two types of approaches for performing transcript assembly - genome-guided transcriptome assembly and de novo transcriptome assembly. In genome-guided transcriptome assembly, read alignment information is used to create read overlap graphs for computing transcripts isoforms. By comparison, the de novo transcriptome assembly approach uses the sequence of the reads to construct De Bruijn graphs for computation of transcripts isoforms. The genome-guided approach is more suited to studying gene isoforms in organism with high quality reference genomes, while the de novo approach is more suitable when the reference genome is not available or is of poor quality, and for studying isoforms of genes with high degree of editing and/or splicing, such as in immune genes. Cufflinks [<xref ref-type="bibr" rid="CR15">15</xref>], StringTie [<xref ref-type="bibr" rid="CR16">16</xref>] and Scallop [<xref ref-type="bibr" rid="CR17">17</xref>] are examples of tools utilising genome-guided approach. Tools which utilises de novo transcriptome assembly approach include Trinity [<xref ref-type="bibr" rid="CR18">18</xref>], Trans-ABySS [<xref ref-type="bibr" rid="CR19">19</xref>] and Oases [<xref ref-type="bibr" rid="CR20">20</xref>].</p>
    <p>Current tools for transcriptome assembly are mainly designed for bulk RNA-seq datasets and will not scale for analysing scRNA-seq datasets. There are a small number of tools which are designed specifically for scRNA-seq such as BASIC [<xref ref-type="bibr" rid="CR21">21</xref>] and V(D)J Puzzle [<xref ref-type="bibr" rid="CR22">22</xref>], though they are limited to reconstructing immune cell (B- and T-cell) receptors for study of immune-repertoire diversity. Furthermore, some of these tools have limited paralellism, with BASICS supporting only parallelisation on a single machine. V(D)J Puzzle, on the other hand, supports parallelisation on a single machine and on a cluster computing environment. Given the lack of a scalable transcriptome assembly tools for scRNA-seq which can support full transcriptome assembly, we have also introduced a transcriptome assembly analysis feature into the Falco framework to enable the assembly of full transcriptomes for large datasets in a scalable manner. Another benefit of including transcript assembly analysis is the creation of a more accurate gene annotation which can then be used by the Falco framework for more accurately quantifying gene and/or isoform expression.</p>
    <p>In this paper, we describe the development of the Falco framework which incorporates two additional modes of analysis: (1) alignment-only mode, where the output is an alignment file for each sample, and (2) transcript assembly mode, where the output is a reconstructed transcript isoform annotation based on the data. Collectively, these new modes will enable Falco to be a comprehensive, scalable bioinformatics platform for processing full-length single-cell RNA-seq data.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p>The initial version of the Falco framework is composed of three steps - a splitting step for splitting and interleaving of input fastq files into read chunks, an optional pre-processing step for performing pre-processing of the read chunks and an analysis step for alignment and quantification of the read chunks. To implement the alignment-only mode within the Falco framework, we have a designed a new alignment analysis step to replace the read quantification analysis step in the Falco framework (Fig. <xref rid="Fig1" ref-type="fig">1</xref>a). The alignment analysis step takes in the same read chunks input as the previous read quantification analysis step and will output a single alignment file for each sample into either S3 or HDFS, depending on the output location specified by user. Similarly, the transcript assembly was implemented through the creation of a new transcript assembly step which performs alignment of sequencing reads followed by assembly of transcripts (Fig. <xref rid="Fig1" ref-type="fig">1</xref>b). The genome-guided transcript assembly approach was chosen over the de novo transcript assembly approach due to the high computational cost of de novo assembly and the complexity of adapting existing de novo transcript assembly tools to work with the parallelisation approach utilised by Falco. The input of the transcript assembly step is the read chunks input used by both the read quantification and alignment analysis steps, with the output of the step being an annotation file containing the assembled transcript.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Overview of the Falco framework pipelines. <bold>a</bold> Alignment-only pipeline. The pipeline is composed of the splitting and pre-processing steps from the original Falco framework and the new Spark-based alignment step from the Falco framework. The alignment step is composed of two stages - an alignment stage, where read chunks are aligned and stored in a temporary location in HDFS, and a concatenation stage, where alignment chunks from the same sample are concatenated to obtain the full alignment result. <bold>b</bold> Transcript-assembly pipeline. The pipeline is also composed of the splitting and pre-processing steps from the original Falco framework in addition to the new Spark-based transcript assembly step from the Falco framework. The transcript assembly step is composed of a number of stages, including an alignment stage, which performs alignment of read chunks and binning of the alignment result; an assembly stage which perform transcript assembly in parallel, and a merging step, where assembled transcripts are merged with the reference annotation to produce an updated annotation</p></caption><graphic xlink:href="12864_2019_6341_Fig1_HTML" id="MO1"/></fig></p>
    <p>As with the read quantification analysis step, both the alignment analysis step and the transcript assembly step are configurable by the user. The alignment analysis step currently supports both STAR or HISAT2 as the aligner, with the transcript assembly step also supporting STAR or HISAT2 as the aligner and either StringTie or Scallop as the transcript assembly tool. Users can also further customise the Falco pipeline by adding custom alignment and/or transcript assembly tools, similar to the customisation options provided by the initial version of the Falco framework. New submission scripts have also been created to allow users to easily submit the two analysis steps to the EMR cluster.</p>
    <sec id="Sec3">
      <title>Alignment-only mode</title>
      <p>The alignment analysis step is a Spark job which consist of two stages - alignment of read chunks, followed by concatenation of the aligned chunks. In the alignment stage, the interleaved reads within the read chunks are first converted to FASTQ file format so that it can be read by the alignment tool. The alignment tool - STAR or HISAT2 - is then executed using Python’s built-in subprocess library in order to perform alignment of reads against the reference genome. The output of the alignment tool is a BAM alignment file in the case of STAR and a SAM alignment file in the case of HISAT2. As such, an extra processing step of converting SAM to BAM using Samtools is required when HISAT2 is used as the alignment tool. The binary-based BAM file format is chosen over the text-based SAM file format due to the space efficiency of the BAM format, which is achieved through compression of alignment records. The alignment chunk is then uploaded to a temporary location within HDFS or S3 and the location of the alignment chunk is output, together with the sample name from which the read chunks originate.</p>
      <p>A shuffling process is then performed to group together the locations of the alignment chunks per sample. This is followed by a concatenation stage that combines the alignment chunks into a single alignment file for each sample. During the concatenation stage, the alignment chunks are iteratively copied from the temporary location into the local disk and concatenated to a previously concatenated file using Samtools. The iterative concatenation of alignment chunks is chosen over batch concatenation of the alignment chunks due to the constraint of disk space available in the worker since there can be an arbitrary amount of chunks for a single sample. Once all the chunks are concatenated into a single alignment file, it is then uploaded to the output location specified by the user, which can either be in S3 or HDFS. Finally, the alignment chunks stored in the temporary location are deleted to free up the space for the next analysis</p>
    </sec>
    <sec id="Sec4">
      <title>Transcript assembly mode</title>
      <p>The transcript assembly step is implemented as a Spark job consisting of four stages - alignment of read chunks, assembly of reads per bin, merging of assembled transcripts against the reference annotation and, optionally, comparison of the updated annotation against the reference annotation. The first stage – alignment of read chunks – is implemented in a similar manner to the alignment stage in the alignment analysis step, where read chunks are aligned against the reference genome using either STAR or HISAT2. However, unlike the alignment analysis step, the aligned reads are not stored in a temporary location, but rather each alignment record is output together with the names of the bins that overlap that particular read. The bin names are calculated based on the locations where the reads align to in the genome and each read may be output multiple times depending on the number of bins that it overlaps. In order to reduce the amount of data that needs to be shuffled, the read sequence and the sequence quality was removed from the alignment record as this information is not utilised in the transcript assembly process.</p>
      <p>The alignment records are then shuffled in order to group records from the same bins together. This is followed by an assembly stage where the alignment records are written to an alignment file and sorted by co-ordinate using Samtools [<xref ref-type="bibr" rid="CR23">23</xref>]. The transcript assembly tool – StringTie or Scallop – is then executed using Python’s subprocess library to perform genome-guided transcript assembly with the sorted alignment file as input. Depending on the transcript assembly tool chosen, users can also choose to utilise the reference annotation when performing transcript assembly. In this case, a partial annotation file, created by filtering the reference annotation to select only transcripts located in the chromosome of the bin being processed, is included as an input when executing StringTie. The annotation filtering step is performed to reduce both the execution time and the amount of output produced by StringTie, as it only needs to consider a smaller subset of reference transcripts during transcript assembly. After execution of the transcript assembly tool, the assembled transcripts are then output together with the name of the bin.</p>
      <p>The transcripts then undergo another shuffling process in order to sort the transcripts by the bin names and to group the transcripts across all bins. The aggregated transcripts are collected into the main ’driver’ executor where it is passed into the merging stage. In the merging stage, the transcripts are first written into an annotation file, followed by execution of StringTie in GTF merge mode using both the assembled annotation file and reference annotation file as input. The resulting merged (updated) annotation file, containing both the reference transcripts and newly assembled transcripts, is then uploaded to the location specified by user in either S3 or HDFS.</p>
      <p>The transcript assembly step also has an optional fourth stage that performs comparison of the merged annotation against the reference annotation using the GffCompare tool [<xref ref-type="bibr" rid="CR16">16</xref>]. GffCompare will calculate the sensitivity and precision metrics of the updated annotation as compared to the reference annotation at base, exon, intron, intron chain, loci and transcript levels. The comparison statistics produced by the comparison tool will also be uploaded to the location specified by the user.</p>
    </sec>
  </sec>
  <sec id="Sec5" sec-type="results">
    <title>Results</title>
    <sec id="Sec6">
      <title>Evaluation of Falco alignment-only mode</title>
      <p>One of the features of the read-quantification mode in the initial version of the Falco framework is the production of the gene expression matrix that is identical to that produced in a sequential analysis, where reads are not split into smaller chunks. This was achieved through careful selection of tools that are known to be deterministic (STAR, HTSeq [<xref ref-type="bibr" rid="CR24">24</xref>] and featureCounts [<xref ref-type="bibr" rid="CR25">25</xref>]) or by adjusting the parameters of the tool to ensure the output produced is deterministic (HISAT2). As such, it will be ideal for the alignment-only mode to also produce alignment outputs that are identical to those produced in a sequential analysis. In order to test this hypothesis, 100 files were randomly selected from both the mouse embryonic stem cell (ESC) single cell dataset and the human brain single cell dataset, and then aligned using either sequential alignment on a single node and Falco. The alignment file produced by the two different approaches were then compared to see if the outputs produced are identical. The comparison was performed by first sorting the alignment files by their read name using Samtools, followed by running the diff command with the two alignment files as input.</p>
      <p>The result of the comparison shows that the alignment files produced with STAR as the alignment tool contain identical alignment records when run through either Falco or sequentially, with some minor difference in the header of the alignment file due to the inclusion of the command used for running STAR in the program (PG) and text command (CO) records. In contrast, the alignment records produced by HISAT2 with default parameters shows some differences between Falco-based and sequential runs due to HISAT2 being non-deterministic. Therefore, the –tmo parameter was again used when running HISAT2 in order to make HISAT2 produce deterministic output by performing alignment within known transcripts only. The result of the comparison when running HISAT2 with the –tmo parameter shows that the alignment files produced contains identical alignment records, with a minor difference in the value of the PG record in the header of the alignment.</p>
    </sec>
    <sec id="Sec7">
      <title>Scalability of Falco alignment-only mode</title>
      <p>In order to evaluate the performance of the Falco alignment-only analysis, a runtime comparison was performed for STAR and HISAT2 using two single-cell RNA-seq datasets with and without using the Falco framework, similar to the evaluation done for the initial version of the Falco framework. As with the evaluation of the Falco framework, the single-cell RNA-seq datasets used are a mouse embryonic stem cell (ESC) single cell dataset, containing 869 samples of 200 bp paired-end reads, stored in 1.02 Tb of gzipped FASTQ files [<xref ref-type="bibr" rid="CR26">26</xref>]; and a human brain single cell data containing 466 samples of 100 bp paired-end reads stored in 213.66 Gb of gzipped FASTQ files [<xref ref-type="bibr" rid="CR27">27</xref>]. We utilised the same configuration for analysis in a single computing node - ranging from the naive single processing approach to a highly parallelised approach - and for the size of the EMR clusters - ranging from 10 to 40 nodes, together with the same AWS EC2 instance type for single node (r3.8xlarge) and Falco cluster (master - r3.4xlarge, core - r3.8xlarge). For a fair comparison between the single-node based runs and the Falco runs, the timing for alignment on the Falco framework includes the timing for both the cluster set-up and FASTQ splitting step as these pre-processing steps are only necessary when performing alignment using the Falco framework.</p>
      <p>Performing alignment using STAR on a single node with differing parallelisation approaches results in runtimes ranging from 35 h down to 20 h for the mouse dataset and 11 h to 5 h for the human dataset. In contrast, the runtime for alignment using STAR on the Falco framework ranges from 8 h down to just 3.5 h for the mouse dataset and 1.7 h down to less than an hour for the human dataset, representing a minimum speed up of 2.5x (10 nodes vs 12 processes for the mouse dataset) up to 15.8x (40 nodes vs 1 process for the human dataset) (Table <xref rid="Tab1" ref-type="table">1</xref>). Similarly, performing alignment using HISAT2 on a single node with differing parallelisation approach results in a minimum runtime of 15 h and 3 h for the mouse and human datasets, respectively, with the mouse dataset taking close to 2 days to run on 1 process. Falco, on the other hand, was able to complete the alignment for the mouse dataset in less than 6 h and the human dataset in less than 1.2 h, representing a speed up ranging from 2.5x (10 nodes vs 16 processes for the human dataset) up to 16.4x (40 nodes vs 1 processes for the mouse dataset) (Table <xref rid="Tab1" ref-type="table">1</xref>).
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Runtime comparison for alignment of single cell datasets with and without the Falco framework</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">System</th><th align="left">Nodes</th><th align="left" colspan="2">Mouse - embryonic stem cell (hours)</th><th align="left" colspan="2">Human - brain (hours)</th></tr><tr><th align="left"/><th align="left"/><th align="left">STAR</th><th align="left">HISAT2</th><th align="left">STAR</th><th align="left">HISAT2</th></tr></thead><tbody><tr><td align="left">Standalone</td><td align="left">1 (1 process)</td><td align="left">34.9</td><td align="left">42.7</td><td align="left">11.1</td><td align="left">9.8</td></tr><tr><td align="left"/><td align="left">1 (12 processes)</td><td align="left">20.2</td><td align="left">14.9</td><td align="left">5.2</td><td align="left">3.1</td></tr><tr><td align="left"/><td align="left">1 (16 processes)</td><td align="left">N/A</td><td align="left">14.9</td><td align="left">N/A</td><td align="left">3.0</td></tr><tr><td align="left">Falco</td><td align="left">10</td><td align="left">8.0</td><td align="left">5.9</td><td align="left">1.7</td><td align="left">1.2</td></tr><tr><td align="left"/><td align="left">20</td><td align="left">4.7</td><td align="left">3.6</td><td align="left">1.0</td><td align="left">0.8</td></tr><tr><td align="left"/><td align="left">30</td><td align="left">3.8</td><td align="left">2.9</td><td align="left">0.8</td><td align="left">0.6</td></tr><tr><td align="left"/><td align="left">40</td><td align="left">3.5</td><td align="left">2.6</td><td align="left">0.7</td><td align="left">0.6</td></tr></tbody></table><table-wrap-foot><p>Standalone number of processes indicates the number of FASTQ file pairs that are processed in parallel. Timing for Falco includes initialisation and configuration time which are approximately 10 min. Runtime for STAR with 16 processes is not available as some STAR processes are killed by the operating system, resulting in failure of the job</p></table-wrap-foot></table-wrap></p>
      <p>Runtime comparisons across cluster sizes for alignment with Falco framework shows a decrease in runtime with increasing cluster size (Table <xref rid="Tab1" ref-type="table">1</xref>), indicating the scalability of the alignment-only analysis on the Falco framework. However, the runtime does not linearly decrease with increasing cluster size, with the maximum speedup of 2x achieved by increasing the cluster size from 10 nodes to 20 nodes. The minimal difference in analysis time for cluster ≥20 nodes can partially be attributed to the constant initialisation time and the lack of speed up in the splitting step (Additional file <xref rid="MOESM1" ref-type="media">1</xref>), as previously highlighted in the scalability analysis for the initial Falco framework. Another reason for the lack of speedup is due to second stage in the alignment-only step that performs concatenation of the alignment chunks for each sample, meaning that the speedup for this stage is limited by the size of the input files and the subsequent number of read chunks that need to be concatenated. Therefore, the minimal reduction in runtime of the second stage for the mouse and human datasets can be explained by the uneven distribution in the size of the FASTQ files of both the mouse and human datasets, with some samples having input size that is 9x larger compared to the median input size.</p>
    </sec>
    <sec id="Sec8">
      <title>Comparison of Falco alignment-only mode with rail-RNA</title>
      <p>As part of the evaluation of the alignment-only analysis using the Falco framework, the performance of Falco was also compared against Rail-RNA, a previously published tool designed for scalable alignment of RNA-seq data developed using the MapReduce programming paradigm. For the comparison, Rail-RNA was configured to output only BAM files in order to reduce the extra processing steps required for producing the default outputs of sample statistics, coverage vectors and junction information. It should be noted that the cluster used for running Rail-RNA utilises a different instance type compared to the cluster used for running Falco (c3.8xlarge for Rail-RNA vs r3.8xlarge for Falco) as Rail-RNA only provides support for a limited number of instance types. To ensure a fair comparison, the instances used for Rail-RNA cluster have the same configuration for CPU, storage and network performance as the instance used for Falco cluster, with the only difference being the memory configuration.</p>
      <p>Rail-RNA was able to perform alignment of the human brain dataset in about 6 h using a 40 node cluster, increasing to 16 h using a 10 node cluster. In contrast, Falco was able to perform alignment of the human brain dataset in less than 1 h using a 40 node cluster and in about 2 h using a 10 node cluster, representing a speed up of around 10x compared to Rail-RNA (Table <xref rid="Tab2" ref-type="table">2</xref>). The type of alignment file produced by Rail-RNA differs from that produced by the Falco framework as Rail-RNA by default produces a single alignment file for each chromosome per sample, meaning that users will have to manually combine the alignment files in order to get a single alignment file per sample. While Rail-RNA does provide an option to produce a single alignment file per sample, toggling this option resulted in Rail-RNA failing to complete during BAM writing step. The use of the MapReduce paradigm also means that Rail-RNA produces a lot more intermediate files compared to the Falco framework, with Rail-RNA producing 2.4 TB of intermediate files for alignment of the 220 GB human brain dataset. In comparison, Falco framework only produced a maximum of 200 GB of intermediate files (alignment chunks) for the alignment of the same dataset.
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Runtime comparison for alignment of the human brain single cell dataset using Rail-RNA and Falco frameworks</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Nodes</th><th align="left">Rail-RNA</th><th align="left" colspan="2">Falco</th></tr><tr><th align="left"/><th align="left"/><th align="left">STAR</th><th align="left">HISAT</th></tr></thead><tbody><tr><td align="left">10</td><td align="left">15.9</td><td align="left">5.9</td><td align="left">1.2</td></tr><tr><td align="left">40</td><td align="left">5.7</td><td align="left">2.6</td><td align="left">0.6</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec9">
      <title>Evaluation and application of Falco transcript assembly mode</title>
      <p>As with the alignment-only mode, the output produced by Falco alignment-only mode was first checked to see if it matches the output produced from single-node analysis. For this test, three different pipeline configurations were evaluated – STAR + StringTie with reference, STAR + Scallop and HISAT + StringTie without reference – using both simulated data and samples from human and mouse single-cell RNA-seq datasets. The simulated data is used to evaluate the performance of the pipelines tested in recovering transcripts from reference annotations, while the 100 randomly selected human and mouse single-cell RNA-seq datasets are used to evaluate the concordance between the assembled transcripts. Concordance evaluation between the output produced by Falco and single-node analysis is performed by comparing the accuracy of the assembled transcript against the reference annotation as reported by the GffCompare tool. GffCompare measures accuracy of the assembled transcripts using two metrics - sensitivity, which is defined as the ratio between the number of correctly assembled transcripts and the total number of transcripts in the reference annotation; and precision, which is defined as the ratio between the number of correctly assembled transcripts and the total number of assembled transcripts. A transcript is determined by GffCompare as correct if there is an 80% overlap for a single-exon transcript or if there is a transcript with a matching intron chain sequence in the reference annotation for a multi-exon transcript.</p>
      <p>For the simulated dataset, Polyester [<xref ref-type="bibr" rid="CR28">28</xref>] was used to generate a 100-bp paired-end human synthetic RNA-seq dataset, with 1000 reads samples for each gene with zero-error rate. In order to evaluate the ability of the pipelines to recover transcripts from the reference annotation, assembled transcripts prior to merging with reference annotation were used for comparison to the reference annotation with GffCompare. From the statistics of the transcript assembled from single node run (Table <xref rid="Tab3" ref-type="table">3</xref>), it can be seen that reference-guided transcript assembly (STAR + StringTie with reference) has a high sensitivity and precision across all features. This is unlike the de novo transcript assembly approaches (STAR + Scallop and HISAT + StringTie) which have high sensitivity and precision for base, exon, intron and locus, but very low precision on intron chain and transcript level. The low accuracy rate of intron chain and transcript features for the de novo approaches can be explained by the limitations of the Polyester tool, which is unable to generate reads with the correct intron chain when using the reference annotation GTF file as input.
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Accuracy of assembled transcripts for simulated data from single node runs</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Feature</th><th align="left" colspan="2">STAR + StringTie (with reference)</th><th align="left" colspan="2">STAR + Scallop</th><th align="left" colspan="2">HISAT + StringTie</th></tr><tr><th align="left"/><th align="left">Sensitivity (%)</th><th align="left">Precision (%)</th><th align="left">Sensitivity (%)</th><th align="left">Precision (%)</th><th align="left">Sensitivity (%)</th><th align="left">Precision (%)</th></tr></thead><tbody><tr><td align="left">Base</td><td align="left">97.3</td><td align="left">99.8</td><td align="left">87.7</td><td align="left">85.2</td><td align="left">80.0</td><td align="left">93.8</td></tr><tr><td align="left">Exon</td><td align="left">97.3</td><td align="left">98.4</td><td align="left">57.0</td><td align="left">75.2</td><td align="left">63.9</td><td align="left">89.9</td></tr><tr><td align="left">Intron</td><td align="left">96.8</td><td align="left">99.3</td><td align="left">70.7</td><td align="left">99.1</td><td align="left">85.7</td><td align="left">97.8</td></tr><tr><td align="left">Intron Chain</td><td align="left">93.6</td><td align="left">84</td><td align="left">31.9</td><td align="left">56.7</td><td align="left">25.7</td><td align="left">38.9</td></tr><tr><td align="left">Transcript</td><td align="left">94.1</td><td align="left">85.7</td><td align="left">33.9</td><td align="left">35.2</td><td align="left">28.4</td><td align="left">43.8</td></tr><tr><td align="left">Locus</td><td align="left">98.3</td><td align="left">99.4</td><td align="left">71.9</td><td align="left">57.7</td><td align="left">69.1</td><td align="left">82.0</td></tr></tbody></table></table-wrap></p>
      <p>Comparison of the statistics for transcripts produced by the Falco transcript assembly mode (Table <xref rid="Tab4" ref-type="table">4</xref>) against single-node runs shows differences between the result of the transcript assembly processes, though the results do share a high degree of concordance. For the reference-guided transcript assembly pipeline, the transcripts assembled by the Falco framework have lower sensitivity and precision compared to the single node runs due to the higher number of missed features. In contrast, the transcripts assembled using de novo transcript assembly pipelines on Falco have a slightly higher sensitivity and precision for exon, intron and locus features, as there are less features missed and less novel features introduced. However, the result of de novo transcript assembly approaches also have a lower sensitivity and precision for intron chain and transcript features due to the presence of more assembled transcripts. The difference between the statistics for transcripts assembled using Falco and single-node runs can likely be attributed to the binning approaches utilised by the transcript assembly step in Falco, which may result in partially assembled transcripts in cases where the transcripts spans multiple bins. As seen from the result of transcript assembly with Falco, this issue is more prevalent in the de novo transcript assembly approaches as there is no reference annotation present to repress the creation of partial transcripts.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Accuracy of assembled transcripts for simulated data from Falco-based runs</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Feature</th><th align="left" colspan="2">STAR + StringTie (with reference)</th><th align="left" colspan="2">STAR + Scallop</th><th align="left" colspan="2">HISAT + StringTie</th></tr><tr><th align="left"/><th align="left">Sensitivity (%)</th><th align="left">Precision (%)</th><th align="left">Sensitivity (%)</th><th align="left">Precision (%)</th><th align="left">Sensitivity (%)</th><th align="left">Precision (%)</th></tr></thead><tbody><tr><td align="left">Base</td><td align="left">96.2</td><td align="left">99.9</td><td align="left">88.6</td><td align="left">85.3</td><td align="left">81.1</td><td align="left">93.8</td></tr><tr><td align="left">Exon</td><td align="left">96.4</td><td align="left">97.9</td><td align="left">59.6</td><td align="left">74.7</td><td align="left">65.8</td><td align="left">86.0</td></tr><tr><td align="left">Intron</td><td align="left">95.5</td><td align="left">99.3</td><td align="left">74.5</td><td align="left">99.2</td><td align="left">87.6</td><td align="left">97.8</td></tr><tr><td align="left">Intron Chain</td><td align="left">92.8</td><td align="left">83.1</td><td align="left">33.4</td><td align="left">50.4</td><td align="left">26.7</td><td align="left">33.4</td></tr><tr><td align="left">Transcript</td><td align="left">93.3</td><td align="left">84.9</td><td align="left">35.2</td><td align="left">33.4</td><td align="left">29.3</td><td align="left">38.0</td></tr><tr><td align="left">Locus</td><td align="left">98.1</td><td align="left">99.3</td><td align="left">72.5</td><td align="left">59.7</td><td align="left">69.7</td><td align="left">82.4</td></tr></tbody></table></table-wrap></p>
      <p>To evaluate the performance of the transcript assembly mode on real scRNA-seq datasets, 100 samples were again randomly selected from each of the human brain and mouse embryonic stem cell datasets, as per the test performed during evaluation of the alignment-only mode. Since the datasets are composed of multiple samples, we compared the performance of Falco’s transcript assembly mode against two alternative assembly strategies using: transcript assembly based on Falco-aligned reads from individual samples, followed by merging of all assembled transcripts (individual approach); and perform transcript assembly on a pool of all Falco-aligned reads from all samples (pooled approach). While previous studies have shown that the pooled transcript assembly approach will result in less discovery of novel transcripts from the samples [<xref ref-type="bibr" rid="CR29">29</xref>], the issues associated with the nature of scRNA-seq necessitate the need to pool reads across samples in order to ensure full recovery of transcript. However, the individual transcripts assembly approach may still be applicable for scRNA-seq data as the assembled transcripts from each sample will be merged together using StringTie merge mode, which is able to collapse transcripts within the same region into a representative transcript across the entire dataset. In both the individual and pooled transcript assembly approaches, we utilised the Falco alignment-only mode to accelerate alignment of the 100 samples, prior to running transcript assembly manually. For this evaluation, GffCompare is run on transcript assembly after merging with the reference annotation, meaning that the sensitivity of the assembled transcripts will be identical across all three transcript assembly approaches (individual, pooled, and Falco-assembly) as the reference transcripts will necessarily be present within the assembled transcript. As such, only the precision metric is usable for accuracy comparison as this metric is calculated based on the total number of transcripts assembled, which will differ across the different approaches.</p>
      <p>Comparison of the precision metrics of the individual and pooled transcript assembly approaches shows differences in accuracy depending on the tool used for transcript assembly. StringTie is shown to perform better with the pooled approach due to the lower number of transcripts assembled with the pooled approach, which is consistent with previous work. In contrast, Scallop performs better with the individual transcript assembly approach as it assembled more transcripts in the pooled iterative approach (Tables <xref rid="Tab5" ref-type="table">5</xref> and <xref rid="Tab6" ref-type="table">6</xref>). This difference in the performance of the two transcript assembly tools can be attributed to the different transcript algorithms used by the tools and the different threshold used for transcript reconstruction. When comparing the individual and pooled approaches against Falco transcript assembly mode, it can be seen that the performance of Falco transcript assembly mode falls in between the individual and pooled approaches, with StringTie based pipelines having more similarity to the individual approach and the Scallop based pipeline having more similarity to the pooled approach (Tables <xref rid="Tab5" ref-type="table">5</xref> and (<xref rid="Tab6" ref-type="table">6</xref>)). These results indicate that the transcripts assembled using Falco transcript assembly mode are similar to those produced with the pooled approach from which the transcript assembly mode is modelled after, though the binning approach utilised for parallelisation of the transcript assembly process does result in more transcripts being assembled. In particular, the bins are configured by default to overlap each other to ensure full assembly of transcripts which are located near the start or end of the bin in at least one of the bins (see Additional file <xref rid="MOESM2" ref-type="media">2</xref>). While this does result in redundant copies of transcripts in regions where bins overlap, these redundant transcripts were designed to be removed during the merging step with the reference annotation. However, StringTie merge does not seem to correctly remove these redundant transcripts and instead treat the redundant transcripts as novel isoforms, thereby artificially increasing the number of novel transcripts assembled. Nonetheless, it is not difficult to apply a post-processing step to remove such redundant transcripts. This should improve the precision of the call.
<table-wrap id="Tab5"><label>Table 5</label><caption><p>Precision of assembled transcripts for human brain single cell dataset across different transcript assembly approaches</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Feature</th><th align="left" colspan="3">STAR + StringTie (with reference)</th><th align="left" colspan="3">STAR + Scallop</th><th align="left" colspan="3">HISAT + StringTie</th></tr><tr><th align="left"/><th align="left">Falco alignment + individual assembly (%)</th><th align="left">Falco alignment + pooled assembly (%)</th><th align="left">Falco transcript assembly mode (%)</th><th align="left">Falco alignment + individual assembly (%)</th><th align="left">Falco alignment + pooled assembly (%)</th><th align="left">Falco transcript assembly mode (%)</th><th align="left">Falco alignment + individual assembly (%)</th><th align="left">Falco alignment + pooled assembly (%)</th><th align="left">Falco transcript assembly mode (%)</th></tr></thead><tbody><tr><td align="left">Base</td><td align="justify">42.7</td><td align="justify">63.0</td><td align="justify">41.8</td><td align="justify">48.9</td><td align="justify">27.9</td><td align="justify">28.9</td><td align="justify">40.6</td><td align="justify">60.1</td><td align="justify">38.9</td></tr><tr><td align="left">Exon</td><td align="justify">76.5</td><td align="justify">92.3</td><td align="justify">79.0</td><td align="justify">79.4</td><td align="justify">73.1</td><td align="justify">73.4</td><td align="justify">72.9</td><td align="justify">90.2</td><td align="justify">76.0</td></tr><tr><td align="left">Intron</td><td align="justify">88.0</td><td align="justify">96.9</td><td align="justify">92.3</td><td align="justify">88.7</td><td align="justify">91.7</td><td align="justify">91.1</td><td align="justify">82.9</td><td align="justify">94.6</td><td align="justify">88.2</td></tr><tr><td align="left">Intron Chain</td><td align="justify">79.1</td><td align="justify">94.5</td><td align="justify">85.9</td><td align="justify">80.1</td><td align="justify">84.4</td><td align="justify">83.3</td><td align="justify">72.1</td><td align="justify">90.7</td><td align="justify">79.6</td></tr><tr><td align="left">Transcript</td><td align="justify">57.5</td><td align="justify">83.0</td><td align="justify">60.2</td><td align="justify">62.1</td><td align="justify">51.0</td><td align="justify">51.6</td><td align="justify">54.8</td><td align="justify">80.9</td><td align="justify">57.8</td></tr><tr><td align="left">Locus</td><td align="justify">32.2</td><td align="justify">61.5</td><td align="justify">32.4</td><td align="justify">37.2</td><td align="justify">24.1</td><td align="justify">24.9</td><td align="justify">30.5</td><td align="justify">58.9</td><td align="justify">31.2</td></tr></tbody></table></table-wrap>
<table-wrap id="Tab6"><label>Table 6</label><caption><p>Precision of assembled transcripts for mouse embryonic stem cell single cell dataset across different transcript assembly approaches</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Feature</th><th align="left" colspan="3">STAR + StringTie (with reference)</th><th align="left" colspan="3">STAR + Scallop</th><th align="left" colspan="3">HISAT + StringTie</th></tr><tr><th align="left"/><th align="left">Falco alignment + individual assembly (%)</th><th align="left">Falco alignment + pooled assembly (%)</th><th align="left">Falco transcript assembly mode (%)</th><th align="left">Falco alignment + individual assembly (%)</th><th align="left">Falco alignment + pooled assembly (%)</th><th align="left">Falco transcript assembly mode (%)</th><th align="left">Falco alignment + individual assembly (%)</th><th align="left">Falco alignment + pooled assembly (%)</th><th align="left">Falco transcript assembly mode (%)</th></tr></thead><tbody><tr><td align="left">Base</td><td align="justify">52.8</td><td align="justify">90.3</td><td align="justify">55.0</td><td align="justify">56.2</td><td align="justify">34.5</td><td align="justify">38.4</td><td align="justify">51.1</td><td align="justify">88.0</td><td align="justify">51.0</td></tr><tr><td align="left">Exon</td><td align="justify">69.8</td><td align="justify">95.9</td><td align="justify">78.3</td><td align="justify">74.6</td><td align="justify">71.7</td><td align="justify">73.1</td><td align="justify">69.1</td><td align="justify">95.3</td><td align="justify">76.2</td></tr><tr><td align="left">Intron</td><td align="justify">77.0</td><td align="justify">96.9</td><td align="justify">88.0</td><td align="justify">80.9</td><td align="justify">87.1</td><td align="justify">85.6</td><td align="justify">76.0</td><td align="justify">96.4</td><td align="justify">86.3</td></tr><tr><td align="left">Intron Chain</td><td align="justify">57.0</td><td align="justify">93.4</td><td align="justify">76.1</td><td align="justify">62.9</td><td align="justify">73.0</td><td align="justify">70.5</td><td align="justify">56.4</td><td align="justify">92.3</td><td align="justify">73.1</td></tr><tr><td align="left">Transcript</td><td align="justify">48.1</td><td align="justify">90.9</td><td align="justify">58.8</td><td align="justify">54.8</td><td align="justify">47.8</td><td align="justify">50.8</td><td align="justify">48.5</td><td align="justify">90.2</td><td align="justify">56.2</td></tr><tr><td align="left">Locus</td><td align="justify">40.4</td><td align="justify">86.1</td><td align="justify">41.7</td><td align="justify">46.3</td><td align="justify">30.1</td><td align="justify">33.9</td><td align="justify">40.1</td><td align="justify">85.8</td><td align="justify">39.5</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec10">
      <title>Scalability of Falco transcript assembly mode</title>
      <p>The performance evaluation of the transcript assembly mode is done in a similar manner to the performance evaluation of alignment-only mode, with runtime comparison of transcript assembly on a single node with varying degrees of parallelisation against the runtime of transcript assembly on the Falco framework with differing cluster sizes. For the single node runs, the individual transcript assembly approach was used for performing transcript assembly of the scRNA-seq datasets, with both the alignment and transcript assembly of individual samples being run in a single node. The runtime of the single node runs are calculated based only on the timings for the alignment and transcript assembly process, while the runtime for the Falco transcript assembly process includes both cluster initialisation time and FASTQ splitting steps like before.</p>
      <p>The runtime of transcript assembly for the human brain dataset on a single node ranges from 4.1 h (HISAT + StringTie, 16 processes) up to 17.2 h (STAR + StringTie with reference, 1 process). In comparison, the time taken for transcript assembly of the human dataset using the Falco framework is at most 2.9 h (STAR + StringTie with reference, 10 nodes), with a minimum time of 0.9 h (HISAT + StringTie, 40 nodes) (Table <xref rid="Tab7" ref-type="table">7</xref>). Runtime comparisons between the same pipeline across the single node and Falco runs shows that Falco is able to achieve an average speed up ranging from 1.7x (12/16 processes vs 10 nodes) up to 16.5x (1 process vs 40 nodes). Furthermore, runtime comparison for Falco across increasing cluster size also shows the scalability of the transcript assembly mode in Falco, with a maximum speedup of 1.7x when increasing the cluster size from 10 nodes to 20 nodes (Table <xref rid="Tab7" ref-type="table">7</xref>). The reduction in speedup for clusters with &gt;20 nodes is again due to a number of factors, including the constant cluster start up time and lack of speed up in the FASTQ splitting step due to the uneven distribution of file sizes (Additional file <xref rid="MOESM3" ref-type="media">3</xref>). There is also a limiting factor specific to the transcript assembly step as a result of an uneven distribution of bin sizes, with the largest bin in the human dataset having close to 20 million reads (Additional file <xref rid="MOESM4" ref-type="media">4</xref>).
<table-wrap id="Tab7"><label>Table 7</label><caption><p>Runtime comparison for transcript assembly of single cell dataset with and without the Falco framework</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">System</th><th align="left">Nodes</th><th align="left" colspan="3">Human - brain (hours)</th></tr><tr><th align="left"/><th align="left"/><th align="left">STAR + StringTie (with reference)</th><th align="left">STAR + Scallop</th><th align="left">HISAT + StringTie</th></tr></thead><tbody><tr><td align="left">Standalone</td><td align="left">1 (1 process)</td><td align="left">17.2</td><td align="left">16.2</td><td align="left">16.3</td></tr><tr><td align="left"/><td align="left">1 (12 processes)</td><td align="left">4.2</td><td align="left">5.5</td><td align="left">5.7</td></tr><tr><td align="left"/><td align="left">1 (16 processes)</td><td align="left">N/A</td><td align="left">N/A</td><td align="left">4.1</td></tr><tr><td align="left">Falco</td><td align="left">10 node</td><td align="left">2.9</td><td align="left">2.8</td><td align="left">2.3</td></tr><tr><td align="left"/><td align="left">20 node</td><td align="left">1.7</td><td align="left">1.7</td><td align="left">1.4</td></tr><tr><td align="left"/><td align="left">30 node</td><td align="left">1.3</td><td align="left">1.3</td><td align="left">1.1</td></tr><tr><td align="left"/><td align="left">40 node</td><td align="left">1.1</td><td align="left">1.1</td><td align="left">0.9</td></tr></tbody></table><table-wrap-foot><p>Standalone number of processes indicates the number of FASTQ file pairs that are processed in parallel. Timing for Falco includes initialisation and configuration time which are approximately 10 min. Runtime for STAR with 16 processes is not available as some STAR processes are killed by the operating system, resulting in failure of the job</p></table-wrap-foot></table-wrap></p>
      <p>The performance analysis of Falco transcript assembly mode does not include the timings for the mouse ESC dataset as this dataset fails to complete when run using the Falco framework. There are two different types of issues that results in the failure of the transcript assembly step - memory (RAM) and serialisation. The memory issue was encountered during execution of transcript assembly using Scallop on the third largest bin in the mouse dataset, which contains around 11 million reads (Additional file <xref rid="MOESM4" ref-type="media">4</xref>). Due to the large number of alignment records that need to be processed, Scallop uses up more memory beyond the assigned 30 GB of memory, resulting in the executor being killed as there is a strict limit imposed by the YARN resource manager on the memory consumption of executors. The serialisation issue, on the other hand, was encountered when performing transcript assembly using StringTie on the two largest bins in the mouse dataset, containing around 30 million reads each (Additional file <xref rid="MOESM4" ref-type="media">4</xref>), and is a result of the limitation of the PySpark framework used for developing the Falco framework. In both PySpark and Spark frameworks, the input and output from executors undergo a serialisation process to allow for data to be transferred to different executors and nodes. For the PySpark framework, the serialisation process is handled by the built-in Pickle library and there is a limitation in the size of data that can be serialised. The size of the data for the two largest bins exceeds the maximum limit of the data that can be serialised by the Pickle library, therefore resulting in an error during reading of the alignment records into the executor.</p>
      <p>The two issues encountered during processing of the mouse dataset are primarily a result of the large input size of the dataset and the need to pool together reads for performing transcript assembly. One approach that can be used to process such a large dataset is to divide the samples into smaller batches and perform transcript assembly on these smaller batches, followed by merging of the assembled transcripts from each batch together to obtain a consensus set of transcripts across the full dataset. This approach will require some manual intervention from the user as they need to perform batching and merging of the assembled transcripts. The batching process may also result in some transcripts being missed as there will only be partial information available during the transcript assembly process. Another possible approach, which is applicable for memory-related failures, is to increase the amount of memory assigned to the executors beyond the default 30 GB limit, though this will result in a reduced number of available executors. A third approach is to utilise Falco alignment-only mode to perform read alignment of the samples, followed by transcript assembly on the merged read alignments. This last approach will also require some manual intervention from the user as they need to merge the alignment results and perform transcript assembly.</p>
    </sec>
  </sec>
  <sec id="Sec11" sec-type="conclusion">
    <title>Conclusion</title>
    <p>The Falco framework extends the capability of the existing Falco framework through the addition of two processing modes - alignment-only and transcript assembly modes. The alignment-only mode is designed to enable other types of RNA-seq analysis beyond gene expression analysis by producing read alignment output (in BAM format), which can then be used as input for further downstream analysis tools. As with the initial framework, the alignment-only mode on Falco is configurable by the user and currently supports STAR and HISAT2 as the alignment tool. From benchmarks using two single-cell RNA-seq datasets, we show that Falco is able to speed up the alignment process by 2.5 to 16.4 times compared to alignment using a single node with highly-optimised execution while still producing identical alignment output. Comparison of Falco alignment only mode against a similarly designed tool, Rail-RNA, shows the capability of Falco in performing alignment in a time-efficient manner, with Falco achieving an average of 10 times speed up compared to Rail-RNA. There are, however, some limitations with the alignment-only mode in terms of the scalability and storage due to limitations with the Spark framework used and the need to produce a single alignment file per sample so users will not need to merge the result of the alignment manually.</p>
    <p>The addition of transcript assembly mode in the Falco framework is designed to allow for the identification of novel transcripts by creating a more accurate gene annotation from the scRNA-seq dataset being analysed. Unlike in the alignment-only mode of Falco and the gene expression analysis mode of Falco frameworks, the transcript assembly mode requires a different approach for parallelising transcript assembly as this process requires reads from the same region to be processed together. Using both simulated and real scRNA-seq datasets, we show that the binning-based approach used by Falco transcript assembly mode is able to successfully perform transcript assembly, with a high concordance between the transcripts assembled with Falco and transcripts assembled using two iterative transcript assembly approaches. Of the two single-cell RNA-seq datasets tested, Falco transcript assembly was able to speed up the analysis of the human brain dataset by a minimum of 1.7 times, up to a maximum of 16.5 times. Unfortunately, Falco transcript assembly mode failed to perform transcript assembly for the larger mouse ESC dataset due to a number of factors, including high memory usage of the Scallop transcript assembly tool and a limitation with the amount of data that can be handled by the PySpark framework. There are a few approaches which can be used for processing such large datasets, including dividing and processing the data in smaller batches, providing more memory to the worker, and using Falco alignment-only mode for alignment, prior to assembly. Regardless, we show that the Falco transcript assembly mode is able to perform transcript assembly in a scalable manner and is also able to identify novel transcripts present within scRNA-seq datasets.</p>
  </sec>
  <sec id="Sec12">
    <title>Availability and requirements</title>
    <p><bold>Project name</bold>: Falco</p>
    <p><bold>Project home page</bold>: <ext-link ext-link-type="uri" xlink:href="https://github.com/VCCRI/Falco">https://github.com/VCCRI/Falco</ext-link></p>
    <p><bold>Operating system(s)</bold>: Linux, Mac OS X (command-line software)</p>
    <p><bold>Programming language</bold>: Python</p>
    <p><bold>Other requirements</bold>: Apache Spark</p>
    <p><bold>License</bold>: GPL-3</p>
    <p><bold>Any restrictions to use by non-academics</bold>: none</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec13">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12864_2019_6341_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1</bold> Supplementary Figure 1. Falco alignment-only processing time split by steps and stages for STAR and HISAT2 pipelines in the analysis of mouse embryonic stem cell and human brain single cell data. The timings shown do not include cluster initialisation time, as it is constant across differing cluster sizes.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12864_2019_6341_MOESM2_ESM.pdf">
            <caption>
              <p><bold>Additional file 2</bold> Supplementary Material. Considerations for the implementation of Falco alignment-only and transcript assembly modes.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="12864_2019_6341_MOESM3_ESM.pdf">
            <caption>
              <p><bold>Additional file 3</bold> Supplementary Figure 2. Falco transcript assembly processing time split by steps and stages for STAR + StringTie with reference, STAR + Scallop, and HISAT2 + StringTie pipelines in the analysis of human brain single cell data. The timings shown do not include cluster initialisation time, as it is constant across differing cluster sizes, or later stages of the transcript assembly step, as the total time taken for the remaining steps is &lt;30 s.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
      <p>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="12864_2019_6341_MOESM4_ESM.pdf">
            <caption>
              <p><bold>Additional file 4</bold> Supplementary Figure 3. Distribution of read bin sizes for (A) human brain and (B) mouse embryonic stem cell single cell datasets.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>EMR</term>
        <def>
          <p>Elastic MapReduce</p>
        </def>
      </def-item>
      <def-item>
        <term>GTF</term>
        <def>
          <p>General transfer format</p>
        </def>
      </def-item>
      <def-item>
        <term>HDFS</term>
        <def>
          <p>Hadoop distributed file system</p>
        </def>
      </def-item>
      <def-item>
        <term>mRNA</term>
        <def>
          <p>Messenger RNA</p>
        </def>
      </def-item>
      <def-item>
        <term>RNA-seq</term>
        <def>
          <p>RNA sequencing</p>
        </def>
      </def-item>
      <def-item>
        <term>RNA</term>
        <def>
          <p>Ribonucleic acid</p>
        </def>
      </def-item>
      <def-item>
        <term>S3</term>
        <def>
          <p>Simple storage service</p>
        </def>
      </def-item>
      <def-item>
        <term>scRNA-seq</term>
        <def>
          <p>Single-cell RNA sequencing</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s12864-019-6341-6.</p>
  </sec>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>AY led this project and wrote the manuscript. AY contributed to the design, implementation and testing of the pipeline. AK designed, developed and tested the transcript assembly mode, while BP designed, developed and tested the alignment-only mode. JWKH supervised the project and contributed to the design of the study. All authors contributed to revision of the manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>AY is supported by an Australian Postgraduate Award. JWKH is supported by a Career Development Fellowship by the National Health and Medical Research Council (1105271) and a Future Leader Fellowship by the National Heart Foundation of Australia (100848). This work was also supported in part by Amazon Web Services (AWS) Credits for Research, and the HKU-USydney Strategic Partnership Fund. Publication costs are funded by Victor Chang Cardiac Research Institute.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>All data underlying the results are available as part of the article and no additional source data are required.</p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p>Not applicable.</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p>Not applicable.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bray</surname>
            <given-names>NL</given-names>
          </name>
          <name>
            <surname>Pimentel</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Melsted</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Near-optimal probabilistic RNA-seq quantification</article-title>
        <source>Nat Biotechnol</source>
        <year>2016</year>
        <volume>34</volume>
        <issue>5</issue>
        <fpage>525</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3519</pub-id>
        <pub-id pub-id-type="pmid">27043002</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Patro</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Duggal</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Love</surname>
            <given-names>MI</given-names>
          </name>
          <name>
            <surname>Irizarry</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Kingsford</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Salmon provides fast and bias-aware quantification of transcript expression,</article-title>
        <source>Nat Methods</source>
        <year>2017</year>
        <volume>14</volume>
        <issue>4</issue>
        <fpage>417</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4197</pub-id>
        <pub-id pub-id-type="pmid">28263959</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dobin</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Davis</surname>
            <given-names>Ca</given-names>
          </name>
          <name>
            <surname>Schlesinger</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Drenkow</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zaleski</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Jha</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Batut</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chaisson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gingeras</surname>
            <given-names>TR</given-names>
          </name>
        </person-group>
        <article-title>STAR: ultrafast universal RNA-seq aligner,</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>1</issue>
        <fpage>15</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts635</pub-id>
        <pub-id pub-id-type="pmid">23104886</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kim</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>HISAT: a fast spliced aligner with low memory requirements,</article-title>
        <source>Nat Methods</source>
        <year>2015</year>
        <volume>12</volume>
        <issue>4</issue>
        <fpage>357</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3317</pub-id>
        <pub-id pub-id-type="pmid">25751142</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liao</surname>
            <given-names>Yang</given-names>
          </name>
          <name>
            <surname>Smyth</surname>
            <given-names>Gordon K.</given-names>
          </name>
          <name>
            <surname>Shi</surname>
            <given-names>Wei</given-names>
          </name>
        </person-group>
        <article-title>The Subread aligner: fast, accurate and scalable read mapping by seed-and-vote</article-title>
        <source>Nucleic Acids Research</source>
        <year>2013</year>
        <volume>41</volume>
        <issue>10</issue>
        <fpage>e108</fpage>
        <lpage>e108</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkt214</pub-id>
        <pub-id pub-id-type="pmid">23558742</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <mixed-citation publication-type="other">Yang A, Troup M, Lin P, Ho JWK. Falco: a quick and flexible single-cell RNA-seq processing framework on the cloud. Bioinformatics. 2016:732. 10.1093/bioinformatics/btw732.</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Decap</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Reumers</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Herzeel</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Costanza</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Fostier</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Halvade-RNA: Parallel variant calling from transcriptomic data using MapReduce,</article-title>
        <source>PLoS ONE</source>
        <year>2017</year>
        <volume>12</volume>
        <issue>3</issue>
        <fpage>0174575</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0174575</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Expósito</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>González-Domínguez</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Touriño</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>HSRA: Hadoop-based spliced read aligner for RNA sequencing data</article-title>
        <source>PLoS ONE</source>
        <year>2018</year>
        <volume>13</volume>
        <issue>7</issue>
        <fpage>1</fpage>
        <lpage>25</lpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0201483</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nellore</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Collado-Torres</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Jaffe</surname>
            <given-names>AE</given-names>
          </name>
          <name>
            <surname>Alquicira-Hernández</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Wilks</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Pritt</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Morton</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Leek</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Rail-RNA: scalable analysis of RNA-seq splicing and coverage</article-title>
        <source>Bioinformatics</source>
        <year>2017</year>
        <volume>33</volume>
        <issue>24</issue>
        <fpage>4033</fpage>
        <lpage>40</lpage>
        <?supplied-pmid 27592709?>
        <pub-id pub-id-type="pmid">27592709</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McKenna</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hanna</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Banks</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sivachenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Cibulskis</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Kernytsky</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Garimella</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Altshuler</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gabriel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Daly</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>DePristo</surname>
            <given-names>MA</given-names>
          </name>
        </person-group>
        <article-title>The genome analysis toolkit: A MapReduce framework for analyzing next-generation DNA sequencing data</article-title>
        <source>Genome Res</source>
        <year>2010</year>
        <volume>20</volume>
        <issue>9</issue>
        <fpage>1297</fpage>
        <lpage>303</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.107524.110</pub-id>
        <pub-id pub-id-type="pmid">20644199</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Trapnell</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Ultrafast and memory-efficient alignment of short DNA sequences to the human genome</article-title>
        <source>Genome Biol</source>
        <year>2009</year>
        <volume>10</volume>
        <issue>3</issue>
        <fpage>25</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2009-10-3-r25</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wang</surname>
            <given-names>ET</given-names>
          </name>
          <name>
            <surname>Sandberg</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Luo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Khrebtukova</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Mayr</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Kingsmore</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Schroth</surname>
            <given-names>GP</given-names>
          </name>
          <name>
            <surname>Burge</surname>
            <given-names>CB</given-names>
          </name>
        </person-group>
        <article-title>Alternative isoform regulation in human tissue transcriptomes</article-title>
        <source>Nature</source>
        <year>2008</year>
        <volume>456</volume>
        <issue>7221</issue>
        <fpage>470</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1038/nature07509</pub-id>
        <pub-id pub-id-type="pmid">18978772</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fuccillo</surname>
            <given-names>MV</given-names>
          </name>
          <name>
            <surname>Földy</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Gökce</surname>
            <given-names>Ö</given-names>
          </name>
          <name>
            <surname>Rothwell</surname>
            <given-names>PE</given-names>
          </name>
          <name>
            <surname>Sun</surname>
            <given-names>GL</given-names>
          </name>
          <name>
            <surname>Malenka</surname>
            <given-names>RC</given-names>
          </name>
          <name>
            <surname>Südhof</surname>
            <given-names>TC</given-names>
          </name>
        </person-group>
        <article-title>Single-Cell mRNA Profiling Reveals Cell-Type-Specific Expression of Neurexin Isoforms</article-title>
        <source>Neuron</source>
        <year>2015</year>
        <volume>87</volume>
        <issue>2</issue>
        <fpage>326</fpage>
        <lpage>40</lpage>
        <pub-id pub-id-type="doi">10.1016/j.neuron.2015.06.028</pub-id>
        <pub-id pub-id-type="pmid">26182417</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Supek</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Miñana</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Valcárcel</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gabaldón</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lehner</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Synonymous Mutations Frequently Act as Driver Mutations in Human Cancers</article-title>
        <source>Cell</source>
        <year>2014</year>
        <volume>156</volume>
        <issue>6</issue>
        <fpage>1324</fpage>
        <lpage>35</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cell.2014.01.051</pub-id>
        <pub-id pub-id-type="pmid">24630730</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Trapnell</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Williams</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Pertea</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Mortazavi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Kwan</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>van Baren</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Wold</surname>
            <given-names>BJ</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Transcript assembly and quantification by RNA-Seq reveals unannotated transcripts and isoform switching during cell differentiation</article-title>
        <source>Nat Biotechnol</source>
        <year>2010</year>
        <volume>28</volume>
        <issue>5</issue>
        <fpage>511</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.1621</pub-id>
        <pub-id pub-id-type="pmid">20436464</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pertea</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pertea</surname>
            <given-names>GM</given-names>
          </name>
          <name>
            <surname>Antonescu</surname>
            <given-names>CM</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>T-C</given-names>
          </name>
          <name>
            <surname>Mendell</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>StringTie enables improved reconstruction of a transcriptome from RNA-seq reads,</article-title>
        <source>Nat Biotechnol</source>
        <year>2015</year>
        <volume>33</volume>
        <issue>3</issue>
        <fpage>290</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3122</pub-id>
        <pub-id pub-id-type="pmid">25690850</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shao</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kingsford</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Accurate assembly of transcripts through phase-preserving graph decomposition</article-title>
        <source>Nat Biotechnol</source>
        <year>2017</year>
        <volume>35</volume>
        <issue>12</issue>
        <fpage>1167</fpage>
        <lpage>9,</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.4020</pub-id>
        <pub-id pub-id-type="pmid">29131147</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Grabherr</surname>
            <given-names>MG</given-names>
          </name>
          <name>
            <surname>Haas</surname>
            <given-names>BJ</given-names>
          </name>
          <name>
            <surname>Yassour</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Levin</surname>
            <given-names>JZ</given-names>
          </name>
          <name>
            <surname>Thompson</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Amit</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Adiconis</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Fan</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Raychowdhury</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Zeng</surname>
            <given-names>Q</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Mauceli</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Hacohen</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Gnirke</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Rhind</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>di Palma</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Birren</surname>
            <given-names>BW</given-names>
          </name>
          <name>
            <surname>Nusbaum</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Lindblad-Toh</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Friedman</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Regev</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Full-length transcriptome assembly from RNA-Seq data without a reference genome,</article-title>
        <source>Nat Biotechnol</source>
        <year>2011</year>
        <volume>29</volume>
        <issue>7</issue>
        <fpage>644</fpage>
        <lpage>52</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.1883</pub-id>
        <pub-id pub-id-type="pmid">21572440</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Robertson</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Schein</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Chiu</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Corbett</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Field</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Mungall</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Okada</surname>
            <given-names>HM</given-names>
          </name>
          <name>
            <surname>Qian</surname>
            <given-names>JQ</given-names>
          </name>
          <name>
            <surname>Griffith</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Raymond</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Thiessen</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Cezard</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Butterfield</surname>
            <given-names>YS</given-names>
          </name>
          <name>
            <surname>Newsome</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Chan</surname>
            <given-names>SK</given-names>
          </name>
          <name>
            <surname>She</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Varhol</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Kamoh</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Prabhu</surname>
            <given-names>A-L</given-names>
          </name>
          <name>
            <surname>Tam</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Zhao</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Hirst</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Marra</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SJM</given-names>
          </name>
          <name>
            <surname>Hoodless</surname>
            <given-names>PA</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>De novo assembly and analysis of RNA-seq data</article-title>
        <source>Nat Methods</source>
        <year>2010</year>
        <volume>7</volume>
        <issue>11</issue>
        <fpage>909</fpage>
        <lpage>912</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1517</pub-id>
        <pub-id pub-id-type="pmid">20935650</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schulz</surname>
            <given-names>MH</given-names>
          </name>
          <name>
            <surname>Zerbino</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Vingron</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Oases: robust de novo RNA-seq assembly across the dynamic range of expression levels,</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>8</issue>
        <fpage>1086</fpage>
        <lpage>92</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts094</pub-id>
        <pub-id pub-id-type="pmid">22368243</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <mixed-citation publication-type="other">Canzar S, Neu KE, Tang Q, Wilson PC, Khan AA. BASIC: BCR assembly from single cells. Bioinformatics. 2016:631. 10.1093/bioinformatics/btw631.</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rizzetto</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Koppstein</surname>
            <given-names>DNP</given-names>
          </name>
          <name>
            <surname>Samir</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Singh</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Reed</surname>
            <given-names>JH</given-names>
          </name>
          <name>
            <surname>Cai</surname>
            <given-names>CH</given-names>
          </name>
          <name>
            <surname>Lloyd</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Eltahla</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Goodnow</surname>
            <given-names>CC</given-names>
          </name>
          <name>
            <surname>Luciani</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>B-cell receptor reconstruction from single-cell RNA-seq with VDJPuzzle</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>16</issue>
        <fpage>2846</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty203</pub-id>
        <pub-id pub-id-type="pmid">29659703</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Handsaker</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Wysoker</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Fennell</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Homer</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Marth</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Abecasis</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>The Sequence Alignment/Map format and SAMtools</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>16</issue>
        <fpage>2078</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp352</pub-id>
        <pub-id pub-id-type="pmid">19505943</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Anders</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Pyl</surname>
            <given-names>PT</given-names>
          </name>
          <name>
            <surname>Huber</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>HTSeq A Python framework to work with high-throughput sequencing data</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>31</volume>
        <issue>2</issue>
        <fpage>166</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu638</pub-id>
        <pub-id pub-id-type="pmid">25260700</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liao</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Smyth</surname>
            <given-names>GK</given-names>
          </name>
          <name>
            <surname>Shi</surname>
            <given-names>W</given-names>
          </name>
        </person-group>
        <article-title>FeatureCounts: An efficient general purpose program for assigning sequence reads to genomic features</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <issue>7</issue>
        <fpage>923</fpage>
        <lpage>30</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt656</pub-id>
        <pub-id pub-id-type="pmid">24227677</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolodziejczyk</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Tsang</surname>
            <given-names>JCH</given-names>
          </name>
          <name>
            <surname>Ilicic</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Henriksson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Natarajan</surname>
            <given-names>KN</given-names>
          </name>
          <name>
            <surname>Tuck</surname>
            <given-names>AC</given-names>
          </name>
          <name>
            <surname>Gao</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Bühler</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Marioni</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Teichmann</surname>
            <given-names>SA</given-names>
          </name>
        </person-group>
        <article-title>Single Cell RNA-Sequencing of Pluripotent States Unlocks Modular Transcriptional Variation</article-title>
        <source>Cell Stem Cell</source>
        <year>2015</year>
        <volume>17</volume>
        <issue>4</issue>
        <fpage>471</fpage>
        <lpage>85</lpage>
        <pub-id pub-id-type="doi">10.1016/j.stem.2015.09.011</pub-id>
        <pub-id pub-id-type="pmid">26431182</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Darmanis</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Sloan</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Enge</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Caneda</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Shuer</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Hayden Gephart</surname>
            <given-names>MG</given-names>
          </name>
          <name>
            <surname>Barres</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Quake</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>A survey of human brain transcriptome diversity at the single cell level</article-title>
        <source>Proc Natl Acad Sci</source>
        <year>2015</year>
        <volume>112</volume>
        <issue>23</issue>
        <fpage>7285</fpage>
        <lpage>90</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1507125112</pub-id>
        <pub-id pub-id-type="pmid">26060301</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Frazee</surname>
            <given-names>AC</given-names>
          </name>
          <name>
            <surname>Jaffe</surname>
            <given-names>AE</given-names>
          </name>
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Leek</surname>
            <given-names>JT</given-names>
          </name>
        </person-group>
        <article-title>Polyester: simulating RNA-seq datasets with differential transcript expression</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>17</issue>
        <fpage>2778</fpage>
        <lpage>84</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv272</pub-id>
        <pub-id pub-id-type="pmid">25926345</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Trapnell</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Roberts</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Goff</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Pertea</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kelley</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Pimentel</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Rinn</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Pachter</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Differential gene and transcript expression analysis of RNA-seq experiments with TopHat and Cufflinks,</article-title>
        <source>Nat Protocol</source>
        <year>2012</year>
        <volume>7</volume>
        <issue>3</issue>
        <fpage>562</fpage>
        <lpage>78</lpage>
        <pub-id pub-id-type="doi">10.1038/nprot.2012.016</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
