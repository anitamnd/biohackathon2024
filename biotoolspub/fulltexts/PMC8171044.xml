<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8171044</article-id>
    <article-id pub-id-type="publisher-id">3737</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-020-03737-6</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>MetaVelvet-DL: a MetaVelvet deep learning extension for de novo metagenome assembly</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-3020-4202</contrib-id>
        <name>
          <surname>Liang</surname>
          <given-names>Kuo-ching</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Sakakibara</surname>
          <given-names>Yasubumi</given-names>
        </name>
        <address>
          <email>yasu@bio.keio.ac.jp</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.26091.3c</institution-id><institution-id institution-id-type="ISNI">0000 0004 1936 9959</institution-id><institution>Department of Biosciences and Informatics, </institution><institution>Keio University, </institution></institution-wrap>3-14-1 Hiyoshi, Kohoku-ku, Yokohama, 223-8522 Japan </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>2</day>
      <month>6</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>2</day>
      <month>6</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <volume>22</volume>
    <issue>Suppl 6</issue>
    <issue-sponsor>Publication of this supplement has not been supported by sponsorship. Information about the source of funding for publication charges can be found in the individual articles. The articles have undergone the journal's standard peer review process for supplements. Supplement Editors were not involved in the review of any supplement article they had co-authored. No other competing interests were declared.</issue-sponsor>
    <elocation-id>427</elocation-id>
    <history>
      <date date-type="received">
        <day>9</day>
        <month>8</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>3</day>
        <month>9</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">The increasing use of whole metagenome sequencing has spurred the need to improve de novo assemblers to facilitate the discovery of unknown species and the analysis of their genomic functions. MetaVelvet-SL is a short-read de novo metagenome assembler that partitions a multi-species de Bruijn graph into single-species sub-graphs. This study aimed to improve the performance of MetaVelvet-SL by using a deep learning-based model to predict the partition nodes in a multi-species de Bruijn graph.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">This study showed that the recent advances in deep learning offer the opportunity to better exploit sequence information and differentiate genomes of different species in a metagenomic sample. We developed an extension to MetaVelvet-SL, which we named MetaVelvet-DL, that builds an end-to-end architecture using Convolutional Neural Network and Long Short-Term Memory units. The deep learning model in MetaVelvet-DL can more accurately predict how to partition a de Bruijn graph than the Support Vector Machine-based model in MetaVelvet-SL can. Assembly of the Critical Assessment of Metagenome Interpretation (CAMI) dataset showed that after removing chimeric assemblies, MetaVelvet-DL produced longer single-species contigs, with less misassembled contigs than MetaVelvet-SL did.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">MetaVelvet-DL provides more accurate de novo assemblies of whole metagenome data. The authors believe that this improvement can help in furthering the understanding of microbiomes by providing a more accurate description of the metagenomic samples under analysis.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Metagenome analysis</kwd>
      <kwd>de novo assembly</kwd>
      <kwd>Deep learning</kwd>
      <kwd>de Bruijn graph</kwd>
      <kwd>Long short-term memory</kwd>
      <kwd>Convolutional neural network</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution>Japan Agency for Medical Research and Development / JSPS KAKENHI</institution>
        </funding-source>
        <award-id>17H06410</award-id>
        <principal-award-recipient>
          <name>
            <surname>Sakakibara</surname>
            <given-names>Yasubumi</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <conference xlink:href="https://incob.apbionet.org/incob20/">
      <conf-name>19th International Conference on Bioinformatics 2020 (InCoB2020)</conf-name>
      <conf-loc>Virtual</conf-loc>
      <conf-date>25-29 November 2020</conf-date>
    </conference>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2021</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par10">Recent advances in metagenome sequencing technologies and computational tools have allowed us to begin understanding how microbial communities can affect and be affected by their environment. With the improvement of high-throughput sequencing technologies, whole genome sequencing (WGS) has become an important tool for metagenomics analysis. It has several advantages over traditional 16S rRNA analysis, including more reliable species identification and gene prediction [<xref ref-type="bibr" rid="CR1">1</xref>]. WGS data can be assembled with the help of reference genomes when the species are well presented in genome databases. However, metagenomic samples typically have large numbers of species of unknown identity and thus, the reference genome-based approach may fail to discover novel species or important variations within a species. De novo assembly, which does not require a reference genome, is useful in such cases. Figure <xref rid="Fig1" ref-type="fig">1</xref> shows a typical workflow of de novo metagenome assembly. The metagenomics sample, containing large numbers of various bacterial species, is sequenced. Then the sequence reads are assembled into contigs in a de novo manner, typically using some graph-based approaches. Finally, the assembled genome is used for downstream analysis, such as binning and functional analysis. However, the assembly of multiple genomes from mixed sequence reads is challenging because the number of genomes and the coverage of each genome are initially unknown, and the coverage distribution is nonhomogeneous and potentially skewed.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Workflow for de novo metagenome assembly</p></caption><graphic xlink:href="12859_2020_3737_Fig1_HTML" id="MO1"/></fig></p>
    <p id="Par11">To address this challenge, MetaVelvet [<xref ref-type="bibr" rid="CR2">2</xref>] was developed as an extension to the de Bruijn graph (dBG)-based de novo assembler Velvet [<xref ref-type="bibr" rid="CR3">3</xref>], for the assembly of short-read metagenomic WGS data. MetaVelvet constructs a dBG for the mixed sequence reads of the multiple species, which is then partitioned into subgraphs for the single species. The multispecies dBG is partitioned at certain nodes, called chimeric nodes. A chimeric node corresponds to a stretch of nucleotide sequence in common between two evolutionarily similar species, and has two incoming and two outgoing nodes, representing the diverging sequences [<xref ref-type="bibr" rid="CR2">2</xref>]. A graph containing such a chimeric node is partitioned into two subgraphs with one pair of incoming and outgoing nodes each (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). To pair up the incoming and outgoing nodes, MetaVelvet uses node coverage differences.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Assembly strategy for MetaVelvet</p></caption><graphic xlink:href="12859_2020_3737_Fig2_HTML" id="MO2"/></fig></p>
    <p id="Par12">State-of-the-art approaches to WGS metagenomic data assembly includes several dBG-based approaches, such as metaSPAdes [<xref ref-type="bibr" rid="CR4">4</xref>] and Megahit [<xref ref-type="bibr" rid="CR5">5</xref>]. MetaSPAdes is an extension to the original SPAdes [<xref ref-type="bibr" rid="CR6">6</xref>] with modifications and new functions to support metagenome assembly. Megahit uses succinct dBGs [<xref ref-type="bibr" rid="CR7">7</xref>] for assembly to handle the increasingly large and complex metagenomic datasets produced by the latest sequencing technologies. Based on Burrows-Wheeler Transform [<xref ref-type="bibr" rid="CR8">8</xref>] succinct dBGs require less memory; e.g., 300 GB of human genome data can be stored in as little as 2.5 GB of memory. Megahit also implements a multiple k-mer strategy where an initial succinct dBG of order <italic>k</italic> is built from the reads, and the contigs are assembled based on the succinct dBG of order <italic>k-d</italic>, with <italic>d</italic> being the k-mer step size.</p>
    <p id="Par13">While this work focuses on de novo assemblers for short-read sequencing, recent advances in long-read sequencing technologies from companies such as Pacific Biosciences and Oxford Nanopore have enabled long-read sequencing of metagenomic samples [<xref ref-type="bibr" rid="CR9">9</xref>, <xref ref-type="bibr" rid="CR10">10</xref>] and present a promising development in metagenomic analysis. However, short-read sequencing still has many advantages, including higher accuracy, higher throughput, lower cost, and well-established data analysis pipelines.</p>
    <p id="Par14">While MetaVelvet does not have the disadvantage of requiring reference genomes, the partitioning of chimeric nodes, i.e., how to determine which incoming and outgoing edge pairs represent sequences from the same species when there are two possible pairings, poses a key challenge (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). As mentioned above, MetaVelvet considers node coverage, but not sequence information. Afiahayati et al. [<xref ref-type="bibr" rid="CR11">11</xref>] developed MetaVelvet-SL, an extension to MetaVelvet using supervised learning, to improve the accuracy of node partitioning prediction. In MetaVelvet-SL, read coverage as well as sequence information (dinucleotide frequencies) on the incoming and outgoing nodes and the candidate chimeric node (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) are used as features for a support vector machine (SVM) classifier that is trained to determine how to partition the dBG at the candidate chimeric node. While the consideration of dinucleotide frequencies does improve the chimeric node prediction accuracy, dinucleotide frequencies alone do not convey all sequence information that may help with chimeric node prediction as they do not cover patterns that exist over a range longer than two nucleotides.</p>
    <p id="Par15">Genome sequences contain species-specific patterns, and in particular, microbial DNA is known to show long-range correlations and patterns [<xref ref-type="bibr" rid="CR12">12</xref>, <xref ref-type="bibr" rid="CR13">13</xref>]. For a machine learning algorithm to utilize long-range patterns that exist in microbial DNA to help partitioning a multi-species dBG into single-species subgraphs, transformation techniques for sequence data [<xref ref-type="bibr" rid="CR14">14</xref>, <xref ref-type="bibr" rid="CR15">15</xref>] can be applied to the node sequences to engineer features that incorporate patterns at various scales. However, the kind of transformation and scale of sequence patterns that would be the most suitable to train a machine learning algorithm for the partitioning of a dBG remains unclear. To avoid the difficult task of determining suitable features for the machine learning model, we can allow machine learning algorithms to themselves discover appropriate features or representations. Deep learning, one of the latest developments in the field of machine learning, has been shown to outperform most traditional approaches [<xref ref-type="bibr" rid="CR16">16</xref>], especially in tasks where spatial relationships exist in the data, such as images and text. One of the key benefits of deep learning models is that they can automatically extract suitable representations from raw data for a given problem, eliminating the need for handcrafting features based on expert knowledge in traditional supervised learning approaches.</p>
    <p id="Par16">In this study, we aimed to improve the performance of the metagenome assembler MetaVelvet-SL in predicting the partitioning of a dBG at chimeric nodes by using a deep learning-based model. The algorithm, which we termed MetaVelvet-DL, predicts the incoming–outgoing node pairs of a chimeric node that are from the same species based on raw nucleotide sequences of the chimeric and incoming and outgoing nodes, and their read coverage information. We designed a deep learning architecture that consists of embedding, convolutional, max-pooling, and bidirectional long short-term memory (LSTM) layers. LSTM is a type of recurrent neural network [<xref ref-type="bibr" rid="CR17">17</xref>], where input data are fed sequentially to an LSTM unit. At each timestep, there are three important values to the LSTM unit: 1) input at the current timestep, 2) output of the LSTM at the previous timestep, and 3) the previous cell state. The cell state is responsible for remembering the spatial dependencies of neighboring inputs, the input and forget gates update the cell state, and the output gate controls the extent to which the output at each timestep is affected by the cell state. These mechanisms allow LSTM to remember longer-range interactions and avoid the vanishing and exploding gradient problems often encountered in traditional recurrent neural networks. LSTM has shown great promise in applications where data are sequential in nature, such as in speech recognition, protein homology detection, and protein subcellular localization [<xref ref-type="bibr" rid="CR18">18</xref>–<xref ref-type="bibr" rid="CR20">20</xref>]. As WGS metagenomics data generally cover complete genome sequences and spatial correlation and patterns can occur in concert with upstream or downstream sequences, we utilized bidirectional LSTM (biLSTM) [<xref ref-type="bibr" rid="CR21">21</xref>] to incorporate up- and downstream sequence information in the output of a biLSTM unit. Finally, we compared assembly performance of MetaVelvet-DL with that of MetaVelvet-SL and the state-of-the-art assemblers Megahit and metaSPAdes, using datasets from Critical Assessment of Metagenome Interpretation (CAMI) [<xref ref-type="bibr" rid="CR22">22</xref>]. The results showed that MetaVelvet-DL produces assemblies that have a lower rate of chimeric assembly and longer contigs.</p>
  </sec>
  <sec id="Sec2">
    <title>Results and discussion</title>
    <p id="Par17">We first present the accuracy of the deep learning classification model compared to the SVM model used in MetaVelvet-SL, followed by a comparison of the assembly results between MetaVelvet-DL, MetaVelvet-SL, MetaVelvet-DL-Kraken, and Megahit, and metaSPAdes, all with a k-mer size of 31 bp. MetaVelvet-DL-Kraken is a MetaVelvet-DL model trained on bacterial species predicted by the taxonomic identification software, Kraken [<xref ref-type="bibr" rid="CR23">23</xref>]. A comparison of the assembly results of MetaVelvet-DL-Marmoset and SL-Marmoset are presented to show the robustness of the DL models, and finally, the results of MetaVelvet-DL and MetaVelvet-SL and Megahit on the CAMI medium-complexity dataset are also presented.</p>
    <sec id="Sec3">
      <title>Classification model performance</title>
      <p id="Par18">The prediction results of the trained MetaVelvet-SL and MetaVelvet-DL models for the validation dataset are provided in Table <xref rid="Tab1" ref-type="table">1</xref>. MetaVelvet-DL showed higher sensitivities and specificities than MetaVelvet-SL for all three classes. When considering only true chimeric nodes and the rate at which they were incorrectly partitioned, i.e., true class 1 predicted as class 2 and true class 2 predicted as class 1, MetaVelvet-DL has a class 1 ➔ class 2 error rate of 14.8% and a class 2 ➔ class 1 error rate of 6.8%, whereas MetaVelvet-SL has the error rates 19.7 and 18.5%, respectively.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Validation dataset accuracy for MetaVelvet-DL and MetaVelvet-SL</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>MetaVelvet-DL</th><th>MetaVelvet-SL</th></tr></thead><tbody><tr><td>Accuracy</td><td>78.3%</td><td>57.5%</td></tr><tr><td>Class 1 Sensitivity</td><td>75.5%</td><td>64.3%</td></tr><tr><td>Class 1 Specificity</td><td>90.0%</td><td>80.7%</td></tr><tr><td>Class 2 Sensitivity</td><td>85.4%</td><td>66.8%</td></tr><tr><td>Class 2 Specificity</td><td>86.2%</td><td>71.0%</td></tr><tr><td>Class 3 Sensitivity</td><td>73.9%</td><td>41.4%</td></tr><tr><td>Class 3 Specificity</td><td>91.3%</td><td>84.7%</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec4">
      <title>CAMI low-complexity dataset assembly</title>
      <p id="Par19">The MetaVelvet-DL and SL predictions were compared to the true labels (Table <xref rid="Tab2" ref-type="table">2</xref>). The overall prediction accuracy on the CAMI low-complexity dataset was 55.6% for MetaVelvet-DL and 46.1% for MetaVelvet-SL. MetaVelvet-DL performed better than MetaVelvet-SL in all measures (sensitivity, specificity, and balanced accuracy) for each class, except for class 1 sensitivity, for which the two methods were comparable.
<table-wrap id="Tab2"><label>Table 2</label><caption><p>MetaVelvet-DL and -SL prediction accuracies on the CAMI low-complexity dataset</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>MetaVelvet-DL</th><th>MetaVelvet-SL</th></tr></thead><tbody><tr><td>Accuracy</td><td>55.6%</td><td>46.1%</td></tr><tr><td>Class 1 Sensitivity</td><td>35.9%</td><td>26.2%</td></tr><tr><td>Class 1 Specificity</td><td>82.9%</td><td>87.7%</td></tr><tr><td>Class 1 Balanced Accuracy</td><td>59.4%</td><td>56.9%</td></tr><tr><td>Class 2 Sensitivity</td><td>64.5%</td><td>54.5%</td></tr><tr><td>Class 2 Specificity</td><td>75.5%</td><td>63.6%</td></tr><tr><td>Class 2 Balanced Accuracy</td><td>70.0%</td><td>59.1%</td></tr><tr><td>Class 3 Sensitivity</td><td>60.1%</td><td>51.2%</td></tr><tr><td>Class 3 Specificity</td><td>70.1%</td><td>63.1%</td></tr><tr><td>Class 3 Balanced Accuracy</td><td>65.3%</td><td>57.2%</td></tr></tbody></table></table-wrap></p>
      <p id="Par20">We processed the CAMI low-complexity dataset assemblies generated by MetaVelvet-gold standard, MetaVelvet-DL, MetaVelvet-DL-Kraken, MetaVelvet-SL, Megahit, and metaSPAdes with MetaQUAST. We present the Total Contig Length, Number of Contigs (&gt; 500 bp), N50 (contigs &gt; 500 bp), Misassembled contig length ratio (Misassembled contigs length / Total length), and Genome fraction (%) calculated by MetaQUAST in Table <xref rid="Tab3" ref-type="table">3</xref>. The full MetaQUAST report can be found in Supplementary <xref rid="MOESM1" ref-type="media">A</xref>. We BLASTed the assemblies to the gold standard reference genomes and included in Table <xref rid="Tab3" ref-type="table">3</xref> to obtain the total chimeric contig length and chimeric contig length ratio, as well as the candidate chimeric node prediction accuracy (not for Megahit and metaSPAdes).
<table-wrap id="Tab3"><label>Table 3</label><caption><p>CAMI low-complexity dataset assembly results for the assemblers evaluated</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>MetaVelvet-gold standard</th><th>MetaVelvet-DL</th><th>MetaVelvet-DL-Kraken</th><th>MetaVelvet-SL</th><th>Megahit</th><th>metaSPAdes</th></tr></thead><tbody><tr><td>N50 (&gt; 500 bp)</td><td>5153</td><td>4130</td><td>4858</td><td>3830</td><td>5533</td><td>31,230</td></tr><tr><td># Contigs (&gt; 500 bp)</td><td>21,111</td><td>24,781</td><td>23,123</td><td>26,029</td><td>31,995</td><td>19,701</td></tr><tr><td>Total contig length</td><td>61,955,806</td><td>62,484,115</td><td>61,458,347</td><td>61,695,311</td><td>93,724,510</td><td>82,094,551</td></tr><tr><td>Misassembled contig length ratio</td><td>6.26e-3</td><td>8.52e-3</td><td>8.79e-3</td><td>8.66e-3</td><td>5.72e-3</td><td>7.36e-2</td></tr><tr><td>Genome fraction (%)</td><td>36.1</td><td>38.9</td><td>36.8</td><td>39.8</td><td>64.6</td><td>60.4</td></tr><tr><td>Total chimeric contig length</td><td>12,452,954 (20.1%)</td><td>12,750,152 (20.4%)</td><td>11,904,987 (19,4%)</td><td>12,417,820 (20.1%)</td><td>26,182,872 (27.9%)</td><td>42,291,210 (51.6%)</td></tr><tr><td>Chimeric class accuracy</td><td>26,315/26,315 (100%)</td><td>14,622/26,315 (55.6%)</td><td>15,493/26,315 (58.7%)</td><td>12,143/26,315 (46.1%)</td><td>NA</td><td>NA</td></tr></tbody></table></table-wrap></p>
      <p id="Par21">Of all the assemblers, metaSPAdes had the highest N50 values from contigs of &gt; 500 bp and the smallest number of contigs over 500 bp. However, metaSPAdes also has the highest misassembled contig length ratio (0.0736) that is an order higher than the other assemblers and the highest total chimeric contig length and ratio (0.516). Megahit had the largest number of contigs over 500 bp, total contig length, and genome fraction, but had the second highest total chimeric contig length and ratio (0.279). The MetaVelvet-based assemblers in general had much lower total contig lengths, and N50, and genome fraction than either Megahit or metaSPAdes but had much lower total chimeric contig lengths and ratios, with MetaVelvet-DL-Kraken having the lowest ratio at 0.194. They also had comparable misassembled contig length ratios to that of Megahit and much lower than that of metaSPAdes.</p>
      <p id="Par22">Within the MetaVelvet-based assemblers, MetaVelvet-gold standard had the largest N50 and the lowest misassembled contig length ratio as expected for a model using the gold standard labels. MetaVelvet-DL had the next lowest misassembled contig length ratio, followed by MetaVelvet-SL and then MetaVelvet-DL-Kraken. However, the trend is not as clear with total chimeric contig length, where MetaVelvet-DL-Kraken had the lowest ratio of total chimeric contig length and MetaVelvet-DL had the highest ratio, although all ratios for the MetaVelvet-based assemblers are very similar to each other. For chimeric class accuracy, the DL models also had much higher accuracy than that of the SL model. MetaVelvet-DL-Kraken, however, does have slightly higher prediction accuracy than that of MetaVelvet-DL.</p>
      <p id="Par23">As discussed earlier, looking only at N50 value does not reflect the total length of contigs assembled. For a more unbiased comparison of assembly quality, we removed the chimeric contigs and plotted the N-len(<italic>x</italic>) scores for all six assemblies from <italic>x</italic> = 1e7 bp to <italic>x</italic> = 3.5e7 bp (Fig. <xref rid="Fig3" ref-type="fig">3</xref>).
<fig id="Fig3"><label>Fig. 3</label><caption><p>N-len(x) plots for MetaVelvet-DL, MetaVelvet-DL-Kraken, MetaVelvet-SL, MetaVelvet-gold standard, metaSPAdes, and Megahit</p></caption><graphic xlink:href="12859_2020_3737_Fig3_HTML" id="MO3"/></fig></p>
      <p id="Par24">When compared based on N-len(<italic>x</italic>) scores, Megahit produced significantly longer contigs than the MetaVelvet-based assemblers and metaSPAdes at all values of <italic>x</italic>, with metaSPAdes having the lowest N-len(<italic>x</italic>) scores at all <italic>x</italic> among all the assemblers. N-len(<italic>x</italic>) scores for MetaVelvet-DL were higher than those for MetaVelvet-SL at all values of <italic>x</italic>, and closely approximated those of MetaVelvet-gold standard, even having longer length in some regions of <italic>x</italic>. It should be noted that while MetaVelvet-DL-Kraken had the lowest N-len(<italic>x</italic>) values among all MetaVelvet assemblers, it still had higher N-len(<italic>x</italic>) values than metaSPAdes at all values of <italic>x</italic>, and this was achieved while having incomplete information on the bacterial species in the CAMI dataset based on predictions by Kraken.</p>
      <p id="Par25">The bacterial families in the CAMI low-complexity and the marmoset rectal datasets are shown in Table <xref rid="Tab4" ref-type="table">4</xref>, and the MetaVelvet-DL-Marmoset and SL-Marmoset assembly results using the mismatched marmoset training data are shown in Table <xref rid="Tab5" ref-type="table">5</xref>. We can see that the classification accuracies are lower than those models using either gold standard-generated or Kraken-generated species. However, the deep learning model still had much higher accuracy than that of the SVM model. As expected, MetaVelvet-DL-Marmoset had higher total chimeric contig length and misassembled contig length ratio than those of MetaVelvet-DL and MetaVelvet-DL-Kraken. When compared with metaSPAdes, MetaVelvet-DL-Marmoset still showed more accurate results in terms of the proportion of chimera contigs length and misassembled contig length ratio, showing the robustness of the deep learning model to variations in the training dataset.
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Family-level comparison of bacterial contents in the CAMI low-complexity and marmoset rectal datasets</p></caption><table frame="hsides" rules="groups"><thead><tr><th>CAMI</th><th>Marmoset</th></tr></thead><tbody><tr><td>Anaeroplasmataceae</td><td>Actinomycetaceae</td></tr><tr><td>Chitinophagaceae</td><td>Bacteroidaceae</td></tr><tr><td>Clostridiaceae</td><td>Clostridiaceae</td></tr><tr><td>Chromobacteriaceae</td><td>Coriobacteriaceae</td></tr><tr><td>Comamonadaceae</td><td>Corynebacteriaceae</td></tr><tr><td>Desulfobacteraceae</td><td>Enterobacteriaceae</td></tr><tr><td>Flavobacteriaceae</td><td>Erysipelotrichaceae</td></tr><tr><td>Intrasporangiaceae</td><td>Lachnospiraceae</td></tr><tr><td>Oxalobacteraceae</td><td>Lachnospiraceae</td></tr><tr><td>Peptostreptococcaceae</td><td>Oscillospiraceae</td></tr><tr><td>Proteinivoraceae</td><td>Peptostreptococcaceae</td></tr><tr><td>Pseudomonadaceae</td><td>Porphyromonadaceae</td></tr><tr><td>Rhodobacteraceae</td><td>Prevotellaceae</td></tr><tr><td>Thermosporotrichaceae</td><td>Rikenellaceae</td></tr><tr><td>Veillonellaceae</td><td>Ruminococcaceae</td></tr><tr><td rowspan="2">Xanthomonadaceae</td><td>Streptococcaceae</td></tr><tr><td>Veillonellaceae</td></tr></tbody></table></table-wrap><table-wrap id="Tab5"><label>Table 5</label><caption><p>CAMI low-complexity dataset assembly results with MetaVelvet models trained with a dataset generated from mismatched reference genomes</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>MetaVelvet-DL-Marmoset</th><th>MetaVelvet-SL-Marmoset</th></tr></thead><tbody><tr><td>N50 (&gt; 500 bp)</td><td>6732</td><td>6599</td></tr><tr><td># Contigs (&gt; 500 bp)</td><td>23,188</td><td>23,299</td></tr><tr><td>Total contig length</td><td>66,787,785</td><td>66,053,025</td></tr><tr><td>Misassembled contig length ratio</td><td>2.17e-2</td><td>1.11e-2</td></tr><tr><td>Genome fraction (%)</td><td>40.5</td><td>42.1</td></tr><tr><td>Total chimeric contig length</td><td>15,671,826 (23.5%)</td><td>17,648,716 (26.7%)</td></tr><tr><td>Chimeric class accuracy</td><td>11,543/26,315 (43.9%)</td><td>7784/26,315 (29.6%)</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec5">
      <title>CAMI medium-complexity dataset assembly</title>
      <p id="Par26">To test the proposed DL models on more complex datasets, we trained from the gold standard species list a DL and an SL model and assembled the CAMI medium complexity dataset. The MetaQUAST and BLAST statistics can be found in Table <xref rid="Tab6" ref-type="table">6</xref>. The full MetaQUAST report can be found in Supplementary <xref rid="MOESM2" ref-type="media">B</xref>. From Table <xref rid="Tab6" ref-type="table">6</xref>, we can see that both MetaVelvet-based assemblers outperformed Megahit in terms of lower total chimeric contig lengths. However, Megahit has much higher N50, total contig lengths, misassembled contig length ratio, and genome fraction. Comparing the two MetaVelvet-based assemblers, the N50 values and total chimeric contig lengths were very comparable, with MetaVelvet-DL having slightly higher N50 values and longer assembled contigs. MetaVelvet-DL had slightly higher total chimeric contig length and ratio but have a much lower misassembled contig length ratio according to MetaQUAST. It should be noted that the reason for the poor comparison to Megahit is that despite using 200GB memory, the MetaVelvet-based assemblers could build their de Bruijn graphs with only part of the reads in the CAMI medium complexity dataset due heavy memory requirements. Furthermore, it should be noted that with the same amount of memory, metaSPAdes was unable to assemble the CAMI medium complexity dataset, failing to produce any output based on partial reads.
<table-wrap id="Tab6"><label>Table 6</label><caption><p>CAMI medium-complexity dataset assembly result with MetaVelvet models trained with training dataset generated from Kraken-predicted species genomes</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th>MetaVelvet-DL</th><th>MetaVelvet-SL</th><th>Megahit</th></tr></thead><tbody><tr><td>N50 (&gt; 500 bp)</td><td>997</td><td>991</td><td>2682</td></tr><tr><td># Contigs (&gt; 500 bp)</td><td>47,931</td><td>47,917</td><td>106,769</td></tr><tr><td>Total contig length</td><td>77,284,835</td><td>77,094,128</td><td>242,383,239</td></tr><tr><td>Misassembled contig length ratio</td><td>8.69e-3</td><td>1.10e-2</td><td>2.39e-3</td></tr><tr><td>Genome fraction (%)</td><td>14.6</td><td>14.6</td><td>45.3</td></tr><tr><td>Total chimeric contig length</td><td>9,796,796 (12.7%)</td><td>9,606,278 (12.5%)</td><td>13,140,546 (18.0%)</td></tr></tbody></table></table-wrap></p>
      <p id="Par27">In Fig. <xref rid="Fig4" ref-type="fig">4</xref>, we present a comparison of the distributions of true, DL, and SL-predicted class labels for the candidate chimeric nodes in dBG constructed from the CAMI low-complexity data. Based on the true labels, 3/4 of the candidate chimeric nodes were not chimeric, but repeat nodes. Class 1 true chimeric nodes were nearly 5 times more frequent than class 2 true chimeric nodes. As for MetaVelvet-DL, class 1 labels were the same amount as in the true labels, whereas class 2 labels were close to 6 times higher and class 3 labels nearly 30% less than those in the true labels.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Distributions of true, DL, and SL-predicted labels of candidate chimeric nodes for the CAMI low-complexity dataset</p></caption><graphic xlink:href="12859_2020_3737_Fig4_HTML" id="MO4"/></fig></p>
      <p id="Par28">It should be noted that the training datasets may contain some mislabeled samples. From Table <xref rid="Tab3" ref-type="table">3</xref>, we can see that MetaVelvet-gold standard assembly, which used the true class labels for the partitioning of candidate chimeric nodes, also has chimeric assemblies. Besides rare cases of higher-connectivity nodes, partitioning the candidate chimeric nodes according to the true labels obtained by BLAST should have drastically reduced the chimeric rate. However, as can be seen from Table <xref rid="Tab3" ref-type="table">3</xref>, the chimeric rate of MetaVelvet-gold standard is comparable to those of the other MetaVelvet assemblies. For MetaVelvet-DL, we used the same labeling scheme as used in MetaVelvet-SL. However, this scheme only looks at the highest scoring hit and does not consider any other BLAST hits, i.e., one or more of the HCI, HCO, LCI, LCO, and candidate chimeric nodes may be in fact be chimeric nodes. To show this, we created a dBG from a small set of reads simulated from the CAMI low-complexity reference genomes, with a total of 9247 samples of candidate chimeric nodes. The samples were labeled according to the MetaVelvet-SL labeling scheme and for each sample, we checked the chimeric status of the candidate chimeric, HCI, LCI, HCO, and LCO nodes. Out of the 9247 samples, 512 contained at least one node with a chimeric sequence, 401 of which are labeled as class 3. Since class 3 candidate chimeric nodes are not partitioned, this leads to chimeric contigs in the final assembly. While some of the chimeric node sequences in the samples are the results of the original Velvet assembly and cannot be eliminated without overhauling the entire Velvet implementation, we may be able to use the additional BLAST hits to reduce the chimeric sequences contributed to the final assembly for other samples. For example, using the original MetaVelvet-SL labeling scheme, if the highest-scoring hits for each of the four incoming and outgoing nodes of a sample would be mapped to the same species, this sample would be labeled as class 3. However, if the remaining hits for the HCI and HCO nodes contain a match to a different species, whereas all hits for the LCI and LCO nodes point to the same species, the candidate chimeric node can be relabeled as class 1, so that the subgraph containing the LCI and LCO nodes would be from the same species. In the training of the deep learning models, we used a balanced training set with equal numbers of all three classes. However, Fig. <xref rid="Fig4" ref-type="fig">4</xref> shows that in an actual assembly for a metagenomic sample, the distribution can be dominated by class 3 nodes and class 2 nodes can be few. Furthermore, Fig. <xref rid="Fig4" ref-type="fig">4</xref> also shows that MetaVelvet-DL does recognize the large proportion of class 3 nodes in the test dataset and has a class distribution closer to the true distribution than does MetaVelvet-SL.</p>
      <p id="Par29">In Fig. <xref rid="Fig5" ref-type="fig">5</xref>, we selected the top 500 contigs by length from each assembler and looked at the proportion of chimeric contigs in the top 500 contigs for the CAMI low-complexity dataset assemblies. The Velvet-based assemblers all had similar proportions of chimeric assembly at approximately 60%, as well as that of Megahit. MetaSPAdes had the highest proportion of chimeric contigs in the top 500 contigs at 87%. The difference between the Velvet-based assemblers and metaSPAdes becomes even more apparent when looking at the chimeric-to-total length ratio for the top 500 contigs, which are almost at 70% for the Velvet-based assemblers, but 93% for metaSPAdes. For CAMI medium-complexity dataset, the MetaVelvet-DL assembly produced 273 chimeric contigs in the top 500 contigs, with 5,547,178 bps out of the 10,081,697 bps (55.0%) total top 500 contig lengths being chimeric. For the MetaVelvet-SL assembly, 269 of the top 500 contigs were chimeric, with 5,452,132 bps of the 9,967,149 bps (54.7%) total top 500 contig lengths being chimeric.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Proportion of top 500 contigs that are chimeric, and chimeric-to-total contig length ratio for the top 500 contigs for MetaVelvet-gold standard, MetaVelvet-DL, MetaVelvet-DL-Kraken, MetaVelvet-SL, Megahit, and metaSPAdes</p></caption><graphic xlink:href="12859_2020_3737_Fig5_HTML" id="MO5"/></fig></p>
      <p id="Par30">It should be noted that the deep learning model can lead to overfitting, as evident from the decrease in accuracy between the validation set (Table <xref rid="Tab1" ref-type="table">1</xref>) and the test set (Table <xref rid="Tab2" ref-type="table">2</xref>). However, as shown in Table <xref rid="Tab3" ref-type="table">3</xref>, even with overfitting, MetaVelvet-DL produced the best assembly in terms of low chimeric assembly. Furthermore, the DL model trained with unrelated marmoset metagenomic data also produced a better assembly than its SL counterparts and Megahit. This indicates that the DL model may have found some non-species-specific sequence features that could be generalized to other datasets with different bacterial species content.</p>
      <p id="Par31">While MetaVelvet-DL was shown to produce accurate assemblies and to be robust to mismatches between training and test metagenome data, this model still has some limitations, and we would like to further improve the assembler in future. Because of the increasing size of metagenomic data, memory usage in Velvet-based assemblers has become a bottleneck. The adoption of more memory-efficient indexing methods is urgently needed to improve the ease of use of MetaVelvet-DL on systems with fewer resources. While MetaVelvet-DL outperformed well despite the exclusion of higher-order connectivity nodes, the inclusion of such nodes is another approach for further improving the metagenomic assembly quality. One way to treat a node with higher connectivity is to decompose it into all possible incoming and outgoing pairs. The classifier can then be used to predict the label of each possible pair, and the resulting labels can be aggregated to make a final decision on how to partition the higher-connectivity node. Finally, we adopted the MetaVelvet-SL approach to label candidate chimeric nodes in the training data. The MetaVelvet-SL labeling scheme considers only the best BLAST hit and ignores any additional hits to other species, which may be a cause of chimeric contigs in the MetaVelvet-gold standard assemblies. We would like to explore other labeling schemes in future.</p>
    </sec>
  </sec>
  <sec id="Sec6">
    <title>Methods</title>
    <p id="Par32">In the following sections, we will first provide a brief review of MetaVelvet-SL to establish the framework MetaVelvet-DL is built upon and reformulate the dBG partitioning problem as a three-class classification problem where the classes represent possible ways of partitioning a dBG. The proposed deep learning architecture uses a one-dimensional convolutional neural network (1D CNN) and biLSTM networks to predict class labels of candidate chimeric nodes.</p>
    <sec id="Sec7">
      <title>Overview of MetaVelvet-SL</title>
      <p id="Par33">MetaVelvet-SL first constructs a dBG with Velvet, and performs simplification and error removal of tips, bubbles, and erroneous connections using Velvet functions [<xref ref-type="bibr" rid="CR3">3</xref>]. However, typically, there remain nodes with multiple incoming and outgoing edges that could not be resolved to a single path. These chimeric nodes represent possible repeat regions that occur at multiple locations in a genome and are confirmed based on the actual read coverage and the expected coverage. However, in the assembly of multispecies genomic data, such chimeric nodes do not necessarily represent repeat regions, but may represent a stretch of nucleotide sequence that is evolutionarily conserved in different species.</p>
      <p id="Par34">In MetaVelvet and MetaVelvet-SL, the dBG constructed in Velvet is assumed to be composed of subgraphs that represent the individual species in a metagenomic sample. Therefore, one only needs to partition the multi-species dBG at the correct nodes to construct subgraphs and single-species contig assemblies. In MetaVelvet, partitioning is performed by identifying read coverage peaks, where each peak is assumed to represent one species in the microbial community. Each node is then assigned to a species, and a subgraph is formed by partitioning adjacent nodes having the same species assignment. Repeat nodes are distinguished from chimeric nodes by pair-end read mapping and coverage differences. In MetaVelvet-SL, a candidate chimeric node is defined as a node with two incoming and two outgoing nodes, which are labeled as higher- and lower-coverage incoming and outgoing nodes. There are three classes of possible arrangements at each candidate chimeric node as shown in Fig. <xref rid="Fig6" ref-type="fig">6</xref>: class 1, where the candidate node is chimeric, and the higher-coverage incoming and outgoing nodes belong to one species and the lower-coverage incoming and outgoing nodes belong to another species; class 2, where the candidate node is chimeric, and the higher-coverage incoming and lower-coverage outgoing nodes belong to one species and the lower-coverage and higher-coverage outgoings node belong to another; and class 3, where the candidate node is not chimeric, but a repeat node. MetaVelvet-SL uses a three-class SVM to predict the class labels of candidate chimeric nodes; in addition to the pair-end mapping and coverage information, which is also used in MetaVelvet, node sequence information in the form of dinucleotide frequencies is included in the SVM feature vector. MetaVelvet-SL performs metagenome assembly using the following steps:
<list list-type="order"><list-item><p id="Par35">Construct a dBG that consists of multi-species genomes using Velvet functions.</p></list-item><list-item><p id="Par36">Generate a list of candidate chimeric nodes from the dBG constructed in step 1 and obtain the nucleotide sequences as well as pair-end mapping and coverage information for these nodes and their incoming and outgoing nodes.</p></list-item><list-item><p id="Par37">Train a three-class classification SVM model and predict the class labels of candidate chimeric nodes using dinucleotide frequencies and pair-end mapping and coverage information as input features.</p></list-item><list-item><p id="Par38">Partition the multi-species dBG into subgraphs at candidate chimeric nodes that have been classified as classes 1 and 2 in step 2.</p></list-item></list><fig id="Fig6"><label>Fig. 6</label><caption><p>The three-class classification problem for graph partition in MetaVelvet-DL</p></caption><graphic xlink:href="12859_2020_3737_Fig6_HTML" id="MO6"/></fig></p>
      <p id="Par39">The MetaVelvet-DL algorithm developed in this study followed the same steps as MetaVelvet-SL, but replacing the SVM model in step 3 with a deep learning architecture, taking advantage of the latter’s automatic feature extraction ability to consider long-range patterns in same-species sequences with the aim to resolve the graph partition problem. It should be noted that while candidate chimeric nodes with more than two incoming and outgoing nodes do exist, these account for only 1.79% of the candidate chimeric nodes in human gut microbiome [<xref ref-type="bibr" rid="CR11">11</xref>]. Thus, in this study we focused on the modeling of nodes with two incoming and outgoing nodes. Another potential source of chimeric nodes is horizontal gene transfer between different species. While this phenomenon is not considered in this work, it is a future direction for the extension of this algorithm.</p>
    </sec>
    <sec id="Sec8">
      <title>Deep learning classification model</title>
      <p id="Par40">We designed a deep learning architecture, illustrated in Fig. <xref rid="Fig7" ref-type="fig">7</xref>, to predict whether a candidate chimeric node is a true chimeric or a repeat node. The architecture follows directly from the structure of the problem itself: there are two incoming and two outgoing nodes, and we need to predict the incoming–outgoing nodes that form a correct pair, or whether none of the nodes do. To this end, we used one 1D convolutional layer and four biLSTM layers on each node sequence, except for the candidate node. The structure then combined the outputs of the biLSTM layers to represent both possible pairings and uses a series of fully connected layers to determine the correct partition method. Hereafter, the higher-coverage incoming node, lower-coverage incoming node, higher-coverage outgoing node, and lower-coverage outgoing node are denoted as HCI, LCI, HCO, and LCO nodes, respectively.
<fig id="Fig7"><label>Fig. 7</label><caption><p>Deep learning architecture for candidate chimeric node classification in MetaVelvet-DL</p></caption><graphic xlink:href="12859_2020_3737_Fig7_HTML" id="MO7"/></fig></p>
      <sec id="Sec9">
        <title>Input</title>
        <p id="Par41">The input to the deep learning architecture includes the sequences for a candidate chimeric node, the two incoming nodes, and the two outgoing nodes, and coverage information that includes:
<list list-type="order"><list-item><p id="Par42">Number of reads connecting the HCI and HCO nodes.</p></list-item><list-item><p id="Par43">Number of reads connecting the HCI and LCO nodes.</p></list-item><list-item><p id="Par44">Number of reads connecting the LCI and HCO nodes.</p></list-item><list-item><p id="Par45">Number of reads connecting the LCI and LCO nodes.</p></list-item><list-item><p id="Par46">Coverage ratios of the incoming nodes to the candidate chimeric node.</p></list-item><list-item><p id="Par47">Coverage ratios of the outgoing nodes to the candidate chimeric node.</p></list-item><list-item><p id="Par48">Coverage of the candidate chimeric node.</p></list-item><list-item><p id="Par49">Length of the candidate chimeric node.</p></list-item></list></p>
        <p id="Par50">The coverage features are included as additional evidence for graph partitions. A higher number of pair-end reads mapped to a certain pair of incoming–outgoing nodes gives stronger evidence for partitioning. In cases where the incoming or outgoing nodes have highly similar sequences, coverage features can be weighted higher in the decision process. For each of the eight coverage features, a histogram is computed and divided into 10 equally spaced quantiles. The pair-end and coverage feature values of each candidate chimeric node are then one-hot-encoded according to their respective quantile and concatenated to form a binary vector. For sequence data, instead of assigning the four nucleotides ‘A’, ‘G’, ‘C’, and ‘T’ the numbers 1, 2, 3, and 4, or using one-hot encoding, we assigned all possible hexanucleotides a unique integer between 1 and 4096, e.g., ‘AAAAAA’ = 1, ‘AAAAAG’ = 2, and ‘TTTTTT’ = 4096. Accordingly, a 6-bp sliding window is slid from the 5′ to the 3′ end of a sequence at 1-bp step size, at each step assigning the observed hexanucleotide its corresponding integer to obtain a numeric representation of the nucleotide sequence. Using this representation allows us to include short-range patterns in the input data, while leaving sufficient freedom for the deep learning model to find an optimal representation for the classification problem. As input to the deep learning architecture, we extracted 250 bp from the 3′ end of the incoming nodes and 250 bp from the 5′ end of the outgoing nodes and converted the nucleotide sequences to integer sequences as described above. In case the length of a node was less than 250 bp, the integer sequences were padded with zeros so that all sequences have the same length.</p>
      </sec>
      <sec id="Sec10">
        <title>Embedding layer</title>
        <p id="Par51">The first layer of the deep learning architecture proposed here is an embedding layer. The embedding layer is applied only to the integer-transformed nucleotide sequences of the candidate chimeric and incoming and outgoing nodes. In natural language processing, word embedding is a dense representation of words in the form of a numerical vector [<xref ref-type="bibr" rid="CR24">24</xref>] and serves as a method for dimension reduction from the original word space and to encapsulate co-occurrence information [<xref ref-type="bibr" rid="CR25">25</xref>]. In our architecture, we chose to implement an embedding layer that embeds each integer into a numerical vector of length 64, and the embeddings are learned during the training process.</p>
      </sec>
      <sec id="Sec11">
        <title>Convolutional layers</title>
        <p id="Par52">After embedding, the dense representation of each of the incoming and outgoing nodes of a candidate chimeric node is passed through a 1D CNN layer. A nucleotide sequence is 1D data where spatial relationships exist on various scales. The 1D CNN is used to learn features present within the nucleotide sequences, taking advantage of its strength in identifying spatial patterns that exist within input data [<xref ref-type="bibr" rid="CR26">26</xref>]. The 1D CNN filter is a sliding window that moves across the input data with a step size of 1, convolving the values of the window with the input within the window at each step and producing a 1D feature map as output. In the architecture proposed here, each of the four 1D CNN layers has 32 filters of size 64 × 12, where 64 is the size of the embedding layer output and 12 is the window length.</p>
      </sec>
      <sec id="Sec12">
        <title>Batch normalization</title>
        <p id="Par53">Each 1D CNN layer is subjected to batch normalization, which transforms each activation in the output feature map from the 1D CNN layers such that they have zero mean and unit variance. This step can speed up the learning by using large learning rates [<xref ref-type="bibr" rid="CR27">27</xref>].</p>
      </sec>
      <sec id="Sec13">
        <title>Maxpooling</title>
        <p id="Par54">Maxpooling is applied to the batch-normalized feature maps. Maxpooling with 1D input is simply a moving window that takes the maximum value within the window at each step. Such an operation downsizes the input and reduces dimensionality, but still allows the most prominent features in each window to be observed [<xref ref-type="bibr" rid="CR28">28</xref>]. In the architecture proposed here, we set the maxpooling size to 4.</p>
      </sec>
      <sec id="Sec14">
        <title>BiLSTM</title>
        <p id="Par55">For each of the incoming and outgoing nodes, the output from the maxpooling layer is used as input to four consecutive biLSTM layers. As WGS metagenomics data generally cover complete genome sequences and spatial correlations or patterns can occur in concert with upstream or downstream sequences, we utilized biLSTM [<xref ref-type="bibr" rid="CR21">21</xref>] to process each maxpooling output both forward and backward to incorporate up- and downstream sequence information in the output of a biLSTM unit. We stacked four biLSTM layers, where the input to the first layer is the output of the maxpooling layer, and the input of the subsequent layers is the output of the respective previous layers. Each subsequent layer will learn sequence patterns at a larger scale than the previous one. In the architecture proposed here, we used biLSTM layers of sizes 128, 64, 32, and 16.</p>
      </sec>
      <sec id="Sec15">
        <title>Fully connected layers</title>
        <p id="Par56">Fully connected layers where all neurons in one layer are connected to all neurons in the next are used to aggregate all previous layers and to generate a nonlinear combination of the features learned in the previous layers. Let us first denote the network stacks described above from the integer sequence inputs to the embedding layer to the output of the final biLSTM layer for the HCI, LCI, HCO, and LCO nodes as M<sub>HCI</sub>, M<sub>LCI</sub>, M<sub>HCO</sub>, and M<sub>LCO</sub>, respectively. We then concatenate pairs of network stacks to obtain the following:
<list list-type="order"><list-item><p id="Par57">M<sub>1A</sub>: the concatenation of M<sub>HCI</sub> and M<sub>HCO</sub></p></list-item><list-item><p id="Par58">M<sub>1B</sub>: the concatenation of M<sub>LCI</sub> and M<sub>LCO</sub></p></list-item><list-item><p id="Par59">M<sub>2A</sub>: the concatenation of M<sub>HCI</sub> and M<sub>LCO</sub></p></list-item><list-item><p id="Par60">M<sub>2B</sub>: the concatenation of M<sub>LCI</sub> and M<sub>HCO</sub></p></list-item></list>and the output of each concatenation is connected to a separate single layer of 512 neurons. The outputs of the single layers are further concatenated as follows:
<list list-type="order"><list-item><p id="Par61">M<sub>1</sub>: the concatenation of M<sub>1A</sub> and M<sub>1B</sub></p></list-item><list-item><p id="Par62">M<sub>2</sub>: the concatenation of M<sub>2A</sub> and M<sub>2B</sub></p></list-item></list>where M<sub>1</sub> and M<sub>2</sub> correspond to class 1 and 2 pairings, respectively. The outputs of M<sub>1</sub> and M<sub>2</sub> are again each connected to a single layer of 512 neurons. The one-hot-encoded features of pair-end and coverage information are next used as inputs to a single layer of 512 neurons. The three layers are then concatenated and used as input to three fully connected layers of sizes 512, 256, and 128. The output of the final fully connected layer is then fed into a softmax layer with three outputs corresponding to the three classes.</p>
        <p id="Par63">The deep learning architecture presented above reflects two design goals. First, in dBGs constructed from metagenomic samples, we observed that node sequence lengths can range from tens to thousands of base pairs. To accurately capture sequence patterns at various resolutions, we included four biLSTM layers, each layer capturing increasingly longer-range patterns. Second, the architecture contains two large subnetworks that are concatenated in the fully connected layers, where each subnetwork represents one possible partition of a chimeric node. The fully connected layers then combine the subnetworks and read coverage information to decide on which is the most probable partition for a candidate chimeric node.</p>
      </sec>
    </sec>
    <sec id="Sec16">
      <title>Data</title>
      <p id="Par64">To compare the performance of the MetaVelvet-DL, MetaVelvet-SL, Megahit, and metaSPAdes assemblies, we used low- and medium complexity datasets from the first Critical Assessment of Metagenome Interpretation (CAMI) challenge, which is an effort to provide a standardized benchmark for comparing metagenomic data analysis tools. The low-complexity dataset comprises approximately 50,000,000 pair-end reads with Illumina HighSeq error profile from 40 microbial and viral genomes and 20 circular elements simulating a single sample, for a total of 15 Gb. The medium-complexity dataset covers 132 genomes and 100 circular elements simulating two samples, for a total of 40 Gb. In both datasets, the pair-end reads have read length of 150 bp, a mean insertion length of 270 bp, and a standard deviation of 27 bp.</p>
    </sec>
    <sec id="Sec17">
      <title>Training strategy for unknown bacterial species in a metagenomic sample</title>
      <p id="Par65">We generated a training set of candidate chimeric nodes, using gold-standard bacterial species genomes for the CAMI low-complexity dataset. A dBG was constructed at a k-mer size of 31 bp using 150-bp pair-end reads with a 270-bp insertion length and 50× coverage. The processing pipeline we used is as follows:
<list list-type="order"><list-item><p id="Par66">Use the gold standard list of bacterial species for CAMI low-complexity dataset.</p></list-item><list-item><p id="Par67">Generate simulated pair-end reads from the reference genomes of the gold standard species using DWGSIM (<ext-link ext-link-type="uri" xlink:href="https://github.com/nh13/DWGSIM">https://github.com/nh13/DWGSIM</ext-link>).</p></list-item><list-item><p id="Par68">Construct a dBG from the simulated data and identify the candidate chimeric nodes.</p></list-item><list-item><p id="Par69">BLAST the candidate chimeric, incoming, and outgoing node sequences to the reference genomes to determine the partition class label for each candidate chimeric node.</p></list-item><list-item><p id="Par70">Train the deep learning model with the simulated dataset.</p></list-item><list-item><p id="Par71">Construct a dBG for the unknown metagenomic sample and identify the candidate chimeric nodes.</p></list-item><list-item><p id="Par72">Predict the partition classes of the candidate chimeric nodes in the unknown metagenomic sample and partition the dBG accordingly.</p></list-item></list></p>
      <p id="Par73">From the above pipeline we created a training set of candidate chimeric nodes from dBGs that were constructed at a k-mer size of 31 bp, using 50 × −coverage, 150-bp pair-end reads with an insertion size of 270 bp simulated from the gold standard species list for CAMI low-complexity dataset. Based on the strategy used in MetaVelvet-SL, we BLASTed the node sequences to the reference genomes of the gold standard bacterial species to obtain the true labels of the candidate chimeric nodes for the training set. In MetaVelvet-SL, we considered the highest-ranking match for each of the incoming/outgoing node sequences. When the HCI and HCO nodes had the same highest-ranking match and the LCI and LCO had the same highest-ranking match different from that of HCI and HCO, we labeled the candidate chimeric node as class 1. When the HCI and LCO had the same highest-ranking match and the LCI and HCO had the same highest-ranking match different from that of HCI and LCO, we labeled the candidate chimeric node as class 2. All other candidate nodes were labeled as class 3. For the training set, 50,000 candidate chimeric nodes from each of classes 1, 2, and 3 were selected to create a training set of 150,000 samples. Another 1000 candidate chimeric nodes from each class were selected to create a validation set of 3000 samples, with a batch size of 100 samples over 256 epochs. The generated datasets are used to train and validate a deep learning model and an SVM model, and their resulting assemblies are denoted as MetaVelvet-DL and MetaVelvet-SL in the discussion. For comparison, we also performed an assembly of CAMI low-complexity dataset where we did not use either the SL or DL model predictions, but the true labels for the candidate chimeric nodes to partition the dBG. We refer to this as the MetaVelvet-gold standard in the discussion.</p>
      <p id="Par74">In real-world applications, a workflow to train a model for chimeric node prediction would first use a phylogenetic analysis software to predict the bacterial species in the unknown sample. Then, a training dataset would be created using simulations with the reference genomes of the predicted species. Here we trained a deep learning chimeric node prediction model using simulated read data generated from the genomes of a set of bacterial species predicted to be present in the CAMI low-complexity dataset by Kraken [<xref ref-type="bibr" rid="CR28">28</xref>], which we will refer to as MetaVelvet-DL-Kraken. The training set contains 20,000 samples of each class, and the validation set contains 1000 samples of each class. The models were trained with a batch size of 100 samples over 100 epochs.</p>
      <p id="Par75">To demonstrate the robustness of MetaVelvet-DL, we also trained a deep learning and an SVM model using a highly mismatched training dataset generated from an unpublished microbial community found in a marmoset (<italic>Callithrix jacchus</italic>) rectal sample. The bacterial species families in the CAMI and marmoset datasets are shown in Table <xref rid="Tab4" ref-type="table">4</xref>. It can be seen from the table that the two lists are mismatched, with very few common families in the two datasets. The training set has 20,000 samples of each of classes 1, 2, and 3, and 1000 samples of each class for validation. The models were trained with a batch size of 100 samples over 100 epochs. Hereafter, these models are referred to as MetaVelvet-DL-Marmoset and MetaVelvet-SL-Marmoset.</p>
      <p id="Par76">Finally, to evaluate the performance of MetaVelvet-DL on more complex datasets, we took one of the CAMI medium-complexity samples and trained DL and SL models with the same steps used to generate the MetaVelvet-DL model.</p>
    </sec>
    <sec id="Sec18">
      <title>Assessment</title>
      <p id="Par77">To bring focus to the quality of metagenome assemblies with respect to chimeric assembly, we used MetaQUAST [<xref ref-type="bibr" rid="CR29">29</xref>] to provide a quantitative evaluation of various MetaVelvet-based assemblers with models trained with different training datasets, together with metaSPAdes and Megahit. In addition to providing standard quality statistics such as N50 and mapped genome fraction, MetaQUAST also includes metrics such as number of interspecies translocations and number of misassembled contigs [<xref ref-type="bibr" rid="CR29">29</xref>], which are important in metagenome assembly.</p>
      <p id="Par78">We also BLASTed the assembled contigs to the gold standard reference genomes. If non-overlapping parts of a contigs are found to have hits in different species, then that contig is considered as a chimeric contig. By identifying the chimeric contigs through BLAST, we compared total chimeric contig lengths and proportions of chimeric contig length of each of the assemblers as a metric for assembly quality.</p>
      <p id="Par79">Another common metric for comparing genome assemblies is the N50 score, which is the length of the shortest contig where if all contigs longer than N50 summed together would account for 50% of the total assembly. However, comparing N50 of different assemblies is biased because of the differing total contig lengths in different assemblies. Therefore, we used the following generalized score, termed the N-len(<italic>x</italic>) score:</p>
      <p id="Par80">
        <disp-formula id="Equ1">
          <label>1</label>
          <alternatives>
            <tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$ \mathrm{N}\hbox{-} \mathrm{len}(x)=\left|{S}_i\right|\ni {\sum}_{j=1}^i\left|{S}_j\right|\ge x\;\mathrm{and}\;{\sum}_{j=1}^{i-1}\left|{S}_j\right|\le x, $$\end{document}</tex-math>
            <mml:math id="M2" display="block">
              <mml:mi mathvariant="normal">N</mml:mi>
              <mml:mo>‐</mml:mo>
              <mml:mi>len</mml:mi>
              <mml:mfenced close=")" open="(">
                <mml:mi>x</mml:mi>
              </mml:mfenced>
              <mml:mo>=</mml:mo>
              <mml:mfenced close="|" open="|">
                <mml:msub>
                  <mml:mi>S</mml:mi>
                  <mml:mi>i</mml:mi>
                </mml:msub>
              </mml:mfenced>
              <mml:mo>∋</mml:mo>
              <mml:msubsup>
                <mml:mo>∑</mml:mo>
                <mml:mrow>
                  <mml:mi>j</mml:mi>
                  <mml:mo>=</mml:mo>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
                <mml:mi>i</mml:mi>
              </mml:msubsup>
              <mml:mfenced close="|" open="|">
                <mml:msub>
                  <mml:mi>S</mml:mi>
                  <mml:mi>j</mml:mi>
                </mml:msub>
              </mml:mfenced>
              <mml:mo>≥</mml:mo>
              <mml:mi>x</mml:mi>
              <mml:mspace width="0.12em"/>
              <mml:mtext>and</mml:mtext>
              <mml:mspace width="0.12em"/>
              <mml:msubsup>
                <mml:mo>∑</mml:mo>
                <mml:mrow>
                  <mml:mi>j</mml:mi>
                  <mml:mo>=</mml:mo>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>i</mml:mi>
                  <mml:mo>−</mml:mo>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
              </mml:msubsup>
              <mml:mfenced close="|" open="|">
                <mml:msub>
                  <mml:mi>S</mml:mi>
                  <mml:mi>j</mml:mi>
                </mml:msub>
              </mml:mfenced>
              <mml:mo>≤</mml:mo>
              <mml:mi>x</mml:mi>
              <mml:mo>,</mml:mo>
            </mml:math>
            <graphic xlink:href="12859_2020_3737_Article_Equ1.gif" position="anchor"/>
          </alternatives>
        </disp-formula>
      </p>
      <p id="Par81">where L is the total length of all contigs, <italic>S</italic><sub><italic>j</italic></sub> denotes the j-th contig in the total set of contigs sorted by length in a decreasing order, and | <italic>S</italic><sub><italic>j</italic></sub> | denotes its length. Based on this formulation, the N50 measure is simply a special case of the N-len(<italic>x</italic>) score where <italic>x</italic> = L/2 [<xref ref-type="bibr" rid="CR2">2</xref>]. Using the N-len(<italic>x</italic>) score, we can compare the length of the shortest contig in the smallest set of contigs whose total length just exceeds the same value among all assemblers.</p>
    </sec>
  </sec>
  <sec id="Sec19">
    <title>Conclusion</title>
    <p id="Par82">We developed a dBG-based short-read de novo assembler that is an improvement over existing algorithms by introducing a deep learning model for a more accurate partition of multi-species dBGs into single-species subgraphs. The assembler, called MetaVelvet-DL, was shown to produce a lower ratio of misassembled contig length than those of MetaVelvet-SL and metaSPAdes, one of the state-of-the-art metagenome assemblers. MetaVelvet-DL assemblies also had higher N-len(<italic>x</italic>) scores than those of MetaVelvet-SL and metaSPAdes assemblies across a large range of assembly lengths, and closely approximated those of the gold-standard MetaVelvet assembly. While the proposed algorithm does not outperform the state-of-the-art algorithms in all aspects, we feel that the novel use of deep learning methods to learn representations directly from sequence data for dBG partitioning holds promise for future improvements.</p>
  </sec>
  <sec id="Sec20">
    <title>Availability and requirements</title>
    <p id="Par83">Project name: MetaVelvet-DL</p>
    <p id="Par84">Project home page: <ext-link ext-link-type="uri" xlink:href="http://www.dna.bio.keio.ac.jp/metavelvet-dl/">http://www.dna.bio.keio.ac.jp/metavelvet-dl/</ext-link></p>
    <p id="Par85">Operating system: Platform independent</p>
    <p id="Par86">Programming language: Python 3</p>
    <p id="Par87">Other requirements: Tensorflow &gt; = 1.0, Keras &gt; = 2.0.5</p>
    <p id="Par88">License: GNU General Public License v2.0</p>
    <p id="Par89">Contact: yasu@bio.keio.ac.jp</p>
    <p id="Par90">Availability: The Python source code of MetaVelvet-DL is available at <ext-link ext-link-type="uri" xlink:href="http://www.dna.bio.keio.ac.jp/metavelvet-dl/">http://www.dna.bio.keio.ac.jp/metavelvet-dl/</ext-link>.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec21">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2020_3737_MOESM1_ESM.xlsx">
            <caption>
              <p>
                <bold>Additional file 1.</bold>
              </p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="12859_2020_3737_MOESM2_ESM.xlsx">
            <caption>
              <p>
                <bold>Additional file 2.</bold>
              </p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>CAMI</term>
        <def>
          <p id="Par4">Critical Assessment of Metagenome Interpretation</p>
        </def>
      </def-item>
      <def-item>
        <term>CNN</term>
        <def>
          <p id="Par5">Convolutional neural network</p>
        </def>
      </def-item>
      <def-item>
        <term>LSTM</term>
        <def>
          <p id="Par6">Long short-term memory</p>
        </def>
      </def-item>
      <def-item>
        <term>dBG</term>
        <def>
          <p id="Par7">De Bruijn graph</p>
        </def>
      </def-item>
      <def-item>
        <term>SVM</term>
        <def>
          <p id="Par8">Support vector machine</p>
        </def>
      </def-item>
      <def-item>
        <term>WGS</term>
        <def>
          <p id="Par9">Whole genome sequencing</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s12859-020-03737-6.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>Not applicable.</p>
    <sec id="FPar1">
      <title>About this supplement</title>
      <p id="Par91">This article has been published as part of <italic>BMC Bioinformatics Volume 22 Supplement 6, 2021: 19th International Conference on Bioinformatics 2020 (InCoB2020)</italic>. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="https://bmcbioinformatics.biomedcentral.com/articles/supplements/volume-22-supplement-6">https://bmcbioinformatics.biomedcentral.com/articles/supplements/volume-22-supplement-6</ext-link>.</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>KL designed and implemented the deep learning models and performed the analyses. YS was responsible for the conception and design of the deep learning model. All authors have read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>Publication of this supplement was funded by the Japan Agency for Medical Research and Development under the AMED-CREST, PRIME project of “Understanding the interactions and symbiosis between the microbiome and the host organism, leading to an understanding of the mechanisms of disease onset.” Publication of this supplement was also funded by JSPS KAKENHI (grant number 17H06410) from Japan. The funding agencies played no additional role in the research and preparation of this manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>The source code of MetaVelvet-DL is available at <ext-link ext-link-type="uri" xlink:href="http://www.dna.bio.keio.ac.jp/metavelvet-dl/">http://www.dna.bio.keio.ac.jp/metavelvet-dl/</ext-link>. CAMI datasets can be downloaded from <ext-link ext-link-type="uri" xlink:href="https://data.cami-challenge.org/">https://data.cami-challenge.org/</ext-link>. The marmoset metagenomic data are currently not publicly available while the manuscript is still being prepared but can be made available upon request.</p>
  </notes>
  <notes id="FPar2">
    <title>Ethics approval and consent to participate</title>
    <p id="Par92">All animal experiments were approved by the Institutional Animal Care and Use Committee (CIEA ref. nos. 12025 and 13071). The study was conducted in accordance with the Declaration of Helsinki and with the guidelines of CIEA that comply with the Guidelines for Proper Conduct of Animal Experiments published by the Science Council of Japan. Animal care was conducted in accordance with the Guide for the Care and Use of Laboratory Animals (Institute for Laboratory Animal Resources, 2011).</p>
  </notes>
  <notes id="FPar3">
    <title>Consent for publication</title>
    <p id="Par93">Not applicable.</p>
  </notes>
  <notes id="FPar4" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par94">None declared.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ranjan</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rani</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Metwally</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>McGee</surname>
            <given-names>HS</given-names>
          </name>
          <name>
            <surname>Perkins</surname>
            <given-names>DL</given-names>
          </name>
        </person-group>
        <article-title>Advantages of whole genome shotgun versus 16S amplicon sequencing</article-title>
        <source>Biochem Biophys Res Comun</source>
        <year>2016</year>
        <volume>496</volume>
        <issue>4</issue>
        <fpage>967</fpage>
        <lpage>977</lpage>
        <pub-id pub-id-type="doi">10.1016/j.bbrc.2015.12.083</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Namiki</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hachiya</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Tanaka</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Sakakibara</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>MetaVelvet: an extension of velvet assembler to de novo metagenome assembly from short read sequence reads</article-title>
        <source>Nucl Acids Res</source>
        <year>2012</year>
        <volume>40</volume>
        <issue>20</issue>
        <fpage>e155</fpage>
        <pub-id pub-id-type="doi">10.1093/nar/gks678</pub-id>
        <pub-id pub-id-type="pmid">22821567</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>
        <source>Genome Res</source>
        <year>2008</year>
        <volume>18</volume>
        <issue>5</issue>
        <fpage>821</fpage>
        <lpage>829</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.074492.107</pub-id>
        <pub-id pub-id-type="pmid">18349386</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Nerk</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Meleshko</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Korobeynikov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>metaSPAdes: a new versatile metagenomic assembler</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <issue>5</issue>
        <fpage>824</fpage>
        <lpage>834</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.213959.116</pub-id>
        <pub-id pub-id-type="pmid">28298430</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>DH</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>CM</given-names>
          </name>
          <name>
            <surname>Luo</surname>
            <given-names>RB</given-names>
          </name>
          <name>
            <surname>Sadakane</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Lam</surname>
            <given-names>TW</given-names>
          </name>
        </person-group>
        <article-title>MEGAHIT: an ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <issue>10</issue>
        <fpage>1674</fpage>
        <lpage>1676</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv033</pub-id>
        <pub-id pub-id-type="pmid">25609793</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bankevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nurk</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Dvorkin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kulikov</surname>
            <given-names>AS</given-names>
          </name>
          <name>
            <surname>Lesin</surname>
            <given-names>VM</given-names>
          </name>
          <name>
            <surname>Nikolenko</surname>
            <given-names>SI</given-names>
          </name>
          <name>
            <surname>Pham</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>AD</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>
        <source>J Comput Biol</source>
        <year>2012</year>
        <volume>19</volume>
        <fpage>455</fpage>
        <lpage>477</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id>
        <pub-id pub-id-type="pmid">22506599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Bowe</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Raphael</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Tang</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Succinct de Bruijn Graphs</article-title>
        <source>Algorithms in bioinformatics</source>
        <year>2012</year>
        <publisher-loc>Berlin</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>225</fpage>
        <lpage>235</lpage>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Burrow M, Wheeler DJ. A block-sorting lossless data compression algorithm. Digit SRC Res Rep. 1994; 1–18. Technical Report 124.</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Frank</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Pan</surname>
            <given-names>Y</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Improved metagenome assemblies and taxonomic binning using long-read circular consensus sequence data</article-title>
        <source>Sci Rep</source>
        <year>2016</year>
        <volume>6</volume>
        <fpage>25373</fpage>
        <pub-id pub-id-type="doi">10.1038/srep25373</pub-id>
        <pub-id pub-id-type="pmid">27156482</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Brown</surname>
            <given-names>BL</given-names>
          </name>
          <name>
            <surname>Watson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Minot</surname>
            <given-names>SS</given-names>
          </name>
          <name>
            <surname>Rivera</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Franklin</surname>
            <given-names>RB</given-names>
          </name>
        </person-group>
        <article-title>MinION nanopore sequencing of environmental metagenomes: a synthetic approach</article-title>
        <source>Gigascience</source>
        <year>2017</year>
        <volume>6</volume>
        <issue>3</issue>
        <fpage>1</fpage>
        <lpage>10</lpage>
        <pub-id pub-id-type="doi">10.1093/gigascience/gix007</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Afiahayati</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>K, and Sakakibara Y. MetaVelvet-SL: an extension of the velvet assembler to a de novo metagenomics assembler utilizing supervised learning</article-title>
        <source>DNA Res</source>
        <year>2015</year>
        <volume>22</volume>
        <issue>1</issue>
        <fpage>69</fpage>
        <lpage>77</lpage>
        <pub-id pub-id-type="doi">10.1093/dnares/dsu041</pub-id>
        <pub-id pub-id-type="pmid">25431440</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Allen</surname>
            <given-names>TE</given-names>
          </name>
          <name>
            <surname>Price</surname>
            <given-names>ND</given-names>
          </name>
          <name>
            <surname>Joyce</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Palsson</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Long-range periodic patterns in microbial genomes indicate significant multi-scale chromosomal organization</article-title>
        <source>PLoS Comput Biol</source>
        <year>2006</year>
        <volume>2</volume>
        <issue>1</issue>
        <fpage>e2</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.0020002</pub-id>
        <pub-id pub-id-type="pmid">16410829</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>WT</given-names>
          </name>
          <name>
            <surname>Marr</surname>
            <given-names>TG</given-names>
          </name>
          <name>
            <surname>Kaneko</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Understanding long-range correlations in DNA-sequences</article-title>
        <source>Phsica D</source>
        <year>1994</year>
        <volume>75</volume>
        <issue>1–3</issue>
        <fpage>392</fpage>
        <lpage>416</lpage>
        <pub-id pub-id-type="doi">10.1016/0167-2789(94)90294-1</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Arneodo</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Bacry</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Graves</surname>
            <given-names>PV</given-names>
          </name>
          <name>
            <surname>Muzy</surname>
            <given-names>JF</given-names>
          </name>
        </person-group>
        <article-title>Characterizing long-range correlations in DNA sequences from wavelet analysis</article-title>
        <source>Phys Rev Lett</source>
        <year>1995</year>
        <volume>74</volume>
        <fpage>3293</fpage>
        <lpage>3296</lpage>
        <pub-id pub-id-type="doi">10.1103/PhysRevLett.74.3293</pub-id>
        <pub-id pub-id-type="pmid">10058160</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Sussilo D, Kundaje A, Anastassiou D. Spectrogram analysis of genomes. EURASIP J Adv Signal Process. 2004:790248 10.1155/S1110865704310048.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bengio</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Courville</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Vincent</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Representation learning: a review and new perspectives</article-title>
        <source>IEEE Trans Pattern Anal Mach Intell</source>
        <year>2013</year>
        <volume>35</volume>
        <issue>8</issue>
        <fpage>1798</fpage>
        <lpage>1828</lpage>
        <pub-id pub-id-type="doi">10.1109/TPAMI.2013.50</pub-id>
        <pub-id pub-id-type="pmid">23787338</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hochreiter</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Schmidhuber</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Long short-term memory</article-title>
        <source>Neural Comput</source>
        <year>1997</year>
        <volume>9</volume>
        <issue>8</issue>
        <fpage>1735</fpage>
        <lpage>1780</lpage>
        <pub-id pub-id-type="doi">10.1162/neco.1997.9.8.1735</pub-id>
        <pub-id pub-id-type="pmid">9377276</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Graves A, Mohamed AR, and Hinton G. Speech recognition with deep recurrent neural networks. Proc. IEEE Int. Conf. Acoust. Speech Signal Process., 2013, 6645–6649.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hochreiter</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Heusel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Obermayer</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Fast model-based protein homology detection without alignment</article-title>
        <source>Bioinformatics</source>
        <year>2007</year>
        <volume>23</volume>
        <issue>14</issue>
        <fpage>1728</fpage>
        <lpage>1736</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btm247</pub-id>
        <pub-id pub-id-type="pmid">17488755</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Thireou</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Reczko</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Bidirectional long short-term memory networks for predicting the subcellular localization of eukaryotic proteins</article-title>
        <source>IEEE/ACM Transac Comput Biol Bioinf</source>
        <year>2007</year>
        <volume>4</volume>
        <issue>3</issue>
        <fpage>441</fpage>
        <lpage>446</lpage>
        <pub-id pub-id-type="doi">10.1109/tcbb.2007.1015</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Graves</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Schmidhuber</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Framewise phoneme classification with bidirectional LSTM and other neural network architectures</article-title>
        <source>Neural Netw</source>
        <year>2005</year>
        <volume>18</volume>
        <issue>5–6</issue>
        <fpage>602</fpage>
        <lpage>610</lpage>
        <pub-id pub-id-type="doi">10.1016/j.neunet.2005.06.042</pub-id>
        <pub-id pub-id-type="pmid">16112549</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sczyrba</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Critical assessment of Metagnome interpretation - a benchmark of metagenomics software</article-title>
        <source>Nat Methods</source>
        <year>2017</year>
        <volume>14</volume>
        <fpage>1063</fpage>
        <lpage>1071</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.4458</pub-id>
        <pub-id pub-id-type="pmid">28967888</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wood</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Kraken: ultrafast metagenomic sequence classification using exact alignments</article-title>
        <source>Genome Biol</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>R45</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2014-15-3-r46</pub-id>
        <pub-id pub-id-type="pmid">24580780</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mikolov</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sutskever</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Corrado</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Dean</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Distributed representations of words and phrases and their compositionality</article-title>
        <source>In Proc Adv Neural Inf Process Syst</source>
        <year>2013</year>
        <volume>26</volume>
        <issue>2</issue>
        <fpage>3111</fpage>
        <lpage>3119</lpage>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Levy</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Goldberg</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>Neural word embedding as implicit matrix factorization</article-title>
        <source>In Proc Adv Neural Inf Process Syst</source>
        <year>2014</year>
        <volume>27</volume>
        <issue>2</issue>
        <fpage>2177</fpage>
        <lpage>2185</lpage>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lecun</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Bottou</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Bengio</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Haffner</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Gradient-based learning applied to document recognition</article-title>
        <source>Proc IEEE</source>
        <year>1998</year>
        <volume>86</volume>
        <issue>11</issue>
        <fpage>2278</fpage>
        <lpage>2324</lpage>
        <pub-id pub-id-type="doi">10.1109/5.726791</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ioffe</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Szegedy</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Batch normalization: accelerating deep network training by reducing internal covariate shift</article-title>
        <source>Proc Int Conf Machine Learning</source>
        <year>2015</year>
        <volume>37</volume>
        <fpage>448</fpage>
        <lpage>456</lpage>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Scherer D, Muller A, and Behnke S. Evaluation of pooling operations in convolutional architectures for object recognition. In Proc. of the Intl. Conf. on Artificial Neural Networks, 2010; 92–101.</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mikheenko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>MetaQUAST: evaluation of metagenome assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>7</issue>
        <fpage>1088</fpage>
        <lpage>1090</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv697</pub-id>
        <pub-id pub-id-type="pmid">26614127</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
