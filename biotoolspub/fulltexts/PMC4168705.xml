<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4168705</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-15-S9-S2</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-15-S9-S2</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Proceedings</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SWAP-Assembler: scalable and efficient genome assembly towards thousands of cores</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="A1">
        <name>
          <surname>Meng</surname>
          <given-names>Jintao</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I2">2</xref>
        <xref ref-type="aff" rid="I3">3</xref>
      </contrib>
      <contrib contrib-type="author" id="A2">
        <name>
          <surname>Wang</surname>
          <given-names>Bingqiang</given-names>
        </name>
        <xref ref-type="aff" rid="I4">4</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes" id="A3">
        <name>
          <surname>Wei</surname>
          <given-names>Yanjie</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>yj.wei@siat.ac.cn</email>
      </contrib>
      <contrib contrib-type="author" id="A4">
        <name>
          <surname>Feng</surname>
          <given-names>Shengzhong</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
      </contrib>
      <contrib contrib-type="author" id="A5">
        <name>
          <surname>Balaji</surname>
          <given-names>Pavan</given-names>
        </name>
        <xref ref-type="aff" rid="I5">5</xref>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Shenzhen Institutes of Advanced Technology, Chinese Academy of Sciences, 518055 Shenzhen, P.R. China</aff>
    <aff id="I2"><label>2</label>Institute of Computing Technology, Chinese Academy of Sciences, 100190 Beijing, P.R. China</aff>
    <aff id="I3"><label>3</label>University of Chinese Academy of Sciences, 100049 Beijing, P.R. China</aff>
    <aff id="I4"><label>4</label>Beijing Genomics Institute, 518083 Shenzhen, P.R. China</aff>
    <aff id="I5"><label>5</label>Mathematics and Computer Science Division, Argonne National Laboratory, 60439-4844 USA</aff>
    <pub-date pub-type="collection">
      <year>2014</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>10</day>
      <month>9</month>
      <year>2014</year>
    </pub-date>
    <volume>15</volume>
    <issue>Suppl 9</issue>
    <supplement>
      <named-content content-type="supplement-title">Proceedings of the Fourth Annual RECOMB Satellite Workshop on Massively Parallel Sequencing (RECOMB-Seq 2014)</named-content>
      <named-content content-type="supplement-editor">Mihai Pop and Ali Bashir</named-content>
    </supplement>
    <fpage>S2</fpage>
    <lpage>S2</lpage>
    <permissions>
      <copyright-statement>Copyright Â© 2014 Meng et al.; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2014</copyright-year>
      <copyright-holder>Meng et al.; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/4.0">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0">http://creativecommons.org/licenses/by/4.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.biomedcentral.com/1471-2105/15/S9/S2"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>There is a widening gap between the throughput of massive parallel sequencing machines and the ability to analyze these sequencing data. Traditional assembly methods requiring long execution time and large amount of memory on a single workstation limit their use on these massive data.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>This paper presents a highly scalable assembler named as SWAP-Assembler for processing massive sequencing data using thousands of cores, where SWAP is an acronym for Small World Asynchronous Parallel model. In the paper, a mathematical description of multi-step bi-directed graph (MSG) is provided to resolve the computational interdependence on merging edges, and a highly scalable computational framework for SWAP is developed to automatically preform the parallel computation of all operations. Graph cleaning and contig extension are also included for generating contigs with high quality. Experimental results show that SWAP-Assembler scales up to 2048 cores on Yanhuang dataset using only 26 minutes, which is better than several other parallel assemblers, such as ABySS, Ray, and PASHA. Results also show that SWAP-Assembler can generate high quality contigs with good N50 size and low error rate, especially it generated the longest N50 contig sizes for Fish and Yanhuang datasets.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>In this paper, we presented a highly scalable and efficient genome assembly software, SWAP-Assembler. Compared with several other assemblers, it showed very good performance in terms of scalability and contig quality. This software is available at: <ext-link ext-link-type="uri" xlink:href="https://sourceforge.net/projects/swapassembler">https://sourceforge.net/projects/swapassembler</ext-link></p>
      </sec>
    </abstract>
    <kwd-group>
      <kwd>genome assembly</kwd>
      <kwd>parallel computing</kwd>
      <kwd>De Bruijn graph</kwd>
    </kwd-group>
    <conference>
      <conf-date>31 March-1 April 2014</conf-date>
      <conf-name>RECOMB-Seq: Fourth Annual RECOMB Satellite Workshop on Massively Parallel Sequencing</conf-name>
      <conf-loc>Pittsburgh, PA, USA</conf-loc>
    </conference>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>To cope with massive sequence data generated by next-generation sequencing machines, a highly scalable and efficient parallel solution for fundamental bioinformatic applications is important [<xref ref-type="bibr" rid="B1">1</xref>,<xref ref-type="bibr" rid="B2">2</xref>]. With the help of high performance computing, cloud computing [<xref ref-type="bibr" rid="B3">3</xref>,<xref ref-type="bibr" rid="B4">4</xref>], and many-cores in GPU [<xref ref-type="bibr" rid="B5">5</xref>], successful scalable examples have been seen in many embarrassingly parallel applications: sequence alignment [<xref ref-type="bibr" rid="B6">6</xref>-<xref ref-type="bibr" rid="B8">8</xref>], SNP searching [<xref ref-type="bibr" rid="B9">9</xref>,<xref ref-type="bibr" rid="B10">10</xref>], expression analysis [<xref ref-type="bibr" rid="B11">11</xref>], etc. However, for tightly coupled graph related problems, such as genome assembly, a scalable solution is a still a big challenge [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>].</p>
    <p>State-of-the-art trials on parallel assemblers include ABySS [<xref ref-type="bibr" rid="B14">14</xref>], Ray [<xref ref-type="bibr" rid="B15">15</xref>], PASHA [<xref ref-type="bibr" rid="B16">16</xref>], and YAGA [<xref ref-type="bibr" rid="B17">17</xref>-<xref ref-type="bibr" rid="B19">19</xref>]. ABySS adopts the traditional de Bruijn graph data structure proposed by Pevzner et. al. [<xref ref-type="bibr" rid="B20">20</xref>] and follows the similar assembly strategy as EULER SR [<xref ref-type="bibr" rid="B21">21</xref>] and Velvet [<xref ref-type="bibr" rid="B22">22</xref>]. The parallelization is achieved by distributing <italic>k</italic>-mers to multi-servers to build a distributed de Bruijn graph, and error removal and graph reduction are implemented over MPI communication primitives. Ray extends <italic>k</italic>-mers (or seeds) into contigs with a heuristical greedy strategy by measuring the overlapping level of reads in both direction. Based on the observation that the time consuming part of genome assembly are generating and distributing <italic>k</italic>-mers, constructing and simplifying the distributed de Bruijn graph, PASHA concentrates its effort on parallelizing these two stages to improve its efficiency. However, PASHA allows only single process for each unanimous path, and this limits its degree of parallelism. In their experiments, ABySS and PASHA take about 87 hours and 21 hours to assembly the Yoruban male genome with a coverage of 42X.</p>
    <p>To avoid merging <italic>k</italic>-mers on two different servers, which can result in too many small inter-process messages and the communication latency, YAGA constructs a distributed de Bruijn graph by maintaining edge tuples in a community of servers. Reducible edges belonging to one unanimous path are grouped into one server using a list rank algorithm [<xref ref-type="bibr" rid="B23">23</xref>], then these unanimous paths are reduced locally on separated servers. The complexity of YAGA is bounded by <inline-formula><mml:math id="M1" name="1471-2105-15-S9-S2-i1" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> computing time, <inline-formula><mml:math id="M2" name="1471-2105-15-S9-S2-i2" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> communication volume, and <italic>O</italic>(<italic>log</italic><sup>2</sup>(<italic>n</italic>)) communication rounds, where <italic>n </italic>is the number of nucleotides in all reads, and <italic>p </italic>denotes the number of processors. Due to the fact that the recursive list ranking algorithm used in YAGA has a memory usage of <inline-formula><mml:math id="M3" name="1471-2105-15-S9-S2-i3" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi><mml:mstyle class="text"><mml:mtext class="textsf">log</mml:mtext></mml:mstyle><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>, this will use large amount of memory and cause low efficiency.</p>
    <p>Our previous work [<xref ref-type="bibr" rid="B24">24</xref>] tries to avoid access collision of merging two neighbor edges. In this work, 1-step bi-directed graph and a computational model named as SWAP are proposed for edge merging operation. In its experiments, the prototype of edge merging algorithm using SWAP can scale to 640 cores on both Yeast and C.elegans dataset. However this exploratory work only focuses on the edge merging operation of genome assembly, some other important problems are not addressed, for example, contig extension, complexity analysis etc.</p>
    <p>The scalability of previous assemblers is affected by the computational interdependence on merging <italic>k</italic>-mers/edges in unanimous paths. Sequential assemblers, for example Velvet and SOAPdenovo, process each path sequentially. Parallel assemblers can process several paths in parallel, however <italic>k</italic>-mers/edges sharing one path are merged one by one. SWAP-Assembler resolves the computational interdependence on merging edges sharing the same path with MSG. For each path, at most half of its edges can be merged concurrently in each round, and merging multiple edges on the same path can be done in parallel using SWAP computational framework. In Figure <xref ref-type="fig" rid="F1">1</xref>, the parallel strategy of SWAP-Assembler is compared with other assemblers using an example of two linked paths, we can see that a deeper parallelism on edge merging can be achieved by SWAP-Assembler.</p>
    <fig id="F1" position="float">
      <label>Figure 1</label>
      <caption>
        <p><bold>Parallel strategy comparison on k-mers/edges merging for different assemblers</bold>. Two linked paths with 3 nodes and 5 nodes are given as an example, merging a linked path with 3 nodes needs 2 operations/rounds, and merging a path with 5 nodes needs 4 operations/rounds. To assemble these two paths, sequential assemblers need 6 operations, and parallel assemblers need 4 rounds. For SWAP-Assembler different processes can merge several edges on the same path in parallel using the SWAP computational framework, and merging of these 2 paths can be finished in 2 rounds. For a given sequencing data, if we treat the sequencing coverage as an constant number, the upper bound of the three assemby strategies on merging k-mers/edges are bounded by O(g), O(log(g)), and O(log(log(g))) respecitively, here g denotes the genome size and the longest path for a genome of length g will be bounded by O(log(g)). The upper bound of edge merging operations in SWAP-Assembler and expected length of longest path are proved in Appedix 3. Reference of the k-mers merging strategy for these assemblers can be found in their papers or codes. For velvet 1.1.04, the k-mers merging method can be found in its code "./src/concatenatedGraph.c"; for SOAPdenovo-V1.05, its method is in the code "./src/31mer/contig.c"; for ABySS 1.3.5, the method can be found in "./Parallel/NetworkSequenceCollection.cpp"; for YAGA, the method has been descripted in the last paragraph in the methods section [<xref ref-type="bibr" rid="B18">18</xref>]; for Pasha, its method is presented in the last paragraph at the graph simplification subsection [<xref ref-type="bibr" rid="B16">16</xref>].</p>
      </caption>
      <graphic xlink:href="1471-2105-15-S9-S2-1"/>
    </fig>
    <p>In this paper, we present a highly scalable and efficient genome assembler named as SWAP-Assembler, which can scale to thousands of cores on processing massive sequencing data such as Yanhuang (500G). SWAP-Assembler includes five fully parallelized steps: input parallelization, graph construction, graph cleaning, graph reduction and contig extension. Compared with our previous work, two fundamental improvements have been made for graph reduction. Firstly MSG is presented as a comprehensive mathematical abstraction for genome assembly. Using MSG and semi-group theory, the computational interdependence on merging edges is resolved. Secondly, we have developed a scalable computational framework for SWAP, this framework triggers the parallel computation of all operations with no interference. In this paper, complexity of this framework and SWAP-Assembler is also analyzed and proved in detail. In addition, two steps in SWAP-Assembler are used to improve the quality of contigs. One is graph cleaning, which adopts the traditional strategy of removing <italic>k</italic>-molecules and edges with low frequency, and the other one is contig extension, which resolves special edges and some cross nodes using a heuristic method. Experimental results show that SWAP-Assembler can scale up to 2048 cores on Yanhuang dataset using only 26 minutes, which is the fastest compared with other assemblers, such as ABySS, Ray and PASHA. Conitg evaluation results confirm that SWAP-Assembler generates good results on N50 size with lowest error rate for <italic>S. aureus </italic>and <italic>R. sphaeroides </italic>datasets. When processing larger datasets (Fish and Yanhuang) without using external error correction tools, SWAP-Assembler generates the longest N50 contig sizes of 1309 bp and 1368 bp for these two datasets.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <p>In this section, our method for genome assembly towards thousands of cores is presented. We first abstract the genome assembly problem with MSG. Generating longer sequences (contigs) from shorter sequences corresponds to merging semi-extended edges to full-extended edges in MSG. In addition, computational interdependence of edge merging is resolved by introducing a semi-group over a closed edge set <italic>Es </italic>V <bold>0 </bold>in MSG. The edge set <italic>Es </italic>V <bold>0 </bold>is proved to be a semi-group with respect to edge merging operation. According to the associativity law of semi-group, the final results will be the same as long as all edges have been merged regardless of the merging order, thus these edge merging operations can be computed in parallel.</p>
    <p>In order to maximally utilize the potential parallelism resolved by MSG, a scalable SWAP computational framework is developed. As one edge may be accessed by two merging operations in two different processes at the same time, a lock-computing-unlock mechanism introduced in [<xref ref-type="bibr" rid="B24">24</xref>] is adopted for avoiding the conflict. For the problems which can be abstracted with semi-group, the corresponding operations can be done in parallel, and SWAP computational framework can achieve linearly scale up for these problems.</p>
    <p>Based on MSG and SWAP computational framework, SWAP-Assembler is developed with five steps, including input parallelization, graph construction, graph cleaning, graph reduction, and contig extension. In the following, we first present MSG and the SWAP computational framework, then details of SWAP-Assembler's five steps will be followed.</p>
    <sec>
      <title>Mathematical formulation of genome assembly using MSG</title>
      <p>Given a biological genome sample with reference sequence <italic>w â </italic>â<italic><sup>g </sup></italic>, where N = {<italic>A, T, C, G</italic>}, <italic>g </italic>= <italic>|w|</italic>, a large number of short sequences called <bold>reads</bold>, <italic>S </italic>= {<italic>s</italic><sub>1</sub><italic>, s</italic><sub>2</sub><italic>, ..., s<sub>h</sub></italic>}, can be generated from the sequencing machines. Genome assembly is the process of reconstructing the reference genome sequence from these reads. Unfortunately, the genome assembly problem of finding the shortest string with all reads as its substring falls into a NP-hard problem [<xref ref-type="bibr" rid="B25">25</xref>].</p>
      <p>Finding the original sequence from all possible Euler paths cannot be solved in polynomial time [<xref ref-type="bibr" rid="B26">26</xref>]. In real cases, gaps and branches caused by uneven coverage, erroneous reads and repeats prevent obtaining full length genome, and a set of shorter genome sequences called <bold>contigs </bold>are generated by merging unanimous paths instead. Our method focuses on finding a mathematical and highly scalable solution for the following standard genome assembly (SGA) problem, which is also illustrated in Figure <xref ref-type="fig" rid="F2">2</xref>.</p>
      <fig id="F2" position="float">
        <label>Figure 2</label>
        <caption>
          <p><bold>The process of genome assembly and the standard genome assembly (SGA) problem</bold>.</p>
        </caption>
        <graphic xlink:href="1471-2105-15-S9-S2-2"/>
      </fig>
      <p>Problem of Standard Genome Assembly (SGA)</p>
      <p><bold>Input</bold>: Given a set of reads without errors <italic>S </italic>= {<italic>s</italic><sub>1</sub><italic>, s</italic><sub>2</sub><italic>, ..., s<sub>h</sub></italic>}</p>
      <p><bold>Output</bold>: A set of contigs <italic>C </italic>= {<italic>c</italic><sub>1</sub><italic>, c</italic><sub>2</sub><italic>, ..., c<sub>w</sub></italic>}</p>
      <p><bold>Requirement</bold>: Each contig maps to an unanimous path in the De Bruijn graph constructed from the set of reads <italic>S</italic>.</p>
      <sec>
        <title>Preliminaries</title>
        <p>We first define some variables. Let <italic>s â </italic>â<italic><sup>l </sup></italic>be a DNA sequence of length <italic>l</italic>. Any substring derived from s with length <italic>k</italic>, is called a <italic>k</italic>-mer of <italic>s</italic>, and it is denoted by <italic>Î± </italic>= <italic>s</italic>[<italic>j</italic>]<italic>s</italic>[<italic>j </italic>+ 1] <italic>. . . s</italic>[<italic>j </italic>+ <italic>k â </italic>1], 0 â¤ <italic>j &lt; l â k </italic>+ 1. The set of <italic>k</italic>-mers of a given string <italic>s </italic>can be written as Z(<italic>s, k</italic>), where <italic>k </italic>must be odd. The reverse complement of a <italic>k</italic>-mer <italic>Î±</italic>, denoted by <inline-formula><mml:math id="M4" name="1471-2105-15-S9-S2-i4" overflow="scroll"><mml:mi>Î±</mml:mi><mml:mi>â²</mml:mi></mml:math></inline-formula>, is obtained by reversing <italic>Î± </italic>and complementing each base by the following bijection of M, M : {<italic>a </italic>â <italic>t, t</italic>â<italic>a, c</italic>â<italic>g, g </italic>â <italic>c</italic>}. Note that <inline-formula><mml:math id="M5" name="1471-2105-15-S9-S2-i5" overflow="scroll"><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:msup><mml:mrow><mml:mi>â²</mml:mi></mml:mrow><mml:mrow><mml:mi>â²</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>.</p>
        <p>A <italic>k</italic>-molecule <inline-formula><mml:math id="M6" name="1471-2105-15-S9-S2-i6" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover></mml:math></inline-formula> is a pair of complementary <italic>k</italic>-mers {<italic>Î±, Î±'</italic>}. Let <inline-formula><mml:math id="M7" name="1471-2105-15-S9-S2-i7" overflow="scroll"><mml:mi>.</mml:mi><mml:mo class="MathClass-rel">&gt;</mml:mo></mml:math></inline-formula> be the partial ordering relation between the strings of equal length, and <inline-formula><mml:math id="M8" name="1471-2105-15-S9-S2-i8" overflow="scroll"><mml:mi>Î±</mml:mi><mml:mi>.</mml:mi><mml:mo class="MathClass-rel">&gt;</mml:mo><mml:mi>Î²</mml:mi></mml:math></inline-formula> indicates that <italic>Î± </italic>is lexicographically larger than <italic>Î²</italic>. We designate the lexicographically larger one of two complementary <italic>k</italic>-mers as the positive <italic>k</italic>-mer, denoted as <italic>Î±</italic><sup>+</sup>, and the smaller one as the negative <italic>k</italic>-mer, denoted as <italic>Î±â</italic>, where <inline-formula><mml:math id="M9" name="1471-2105-15-S9-S2-i9" overflow="scroll"><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mi>.</mml:mi><mml:mo class="MathClass-rel">&gt;</mml:mo><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup></mml:math></inline-formula>. We choose the positive <italic>k</italic>-mer <italic>Î±</italic><sup>+ </sup>as representative <italic>k</italic>-mer for <italic>k</italic>-molecule {<italic>Î±, Î±'</italic>}, denoted as <italic>Î±</italic><sup>+</sup>, implying that <inline-formula><mml:math id="M10" name="1471-2105-15-S9-S2-i10" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover><mml:mo class="MathClass-rel">=</mml:mo><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">{</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup></mml:mrow><mml:mo class="MathClass-close">}</mml:mo></mml:mrow><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">{</mml:mo><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>Î±</mml:mi><mml:mi>â²</mml:mi></mml:mrow><mml:mo class="MathClass-close">}</mml:mo></mml:mrow></mml:math></inline-formula>. The relationship between <italic>k</italic>-mer and <italic>k</italic>-molecule is illustrated in Figure <xref ref-type="fig" rid="F3">3</xref>. The set of all <italic>k</italic>-molecules of a given string <italic>s </italic>is known as k-spectrum of <italic>s</italic>, and it can be written as S(<italic>s, k</italic>). Noted that S(<italic>s, k</italic>) = S(<italic>s', k</italic>).</p>
        <fig id="F3" position="float">
          <label>Figure 3</label>
          <caption>
            <p><bold>Each k-molecule consists of one positive k-mer and one negative k-mer</bold>.</p>
          </caption>
          <graphic xlink:href="1471-2105-15-S9-S2-3"/>
        </fig>
        <p>Notation <italic>suf </italic>(<italic>a, l</italic>) (<italic>pre</italic>(<italic>a, l</italic>), respectively) is used to denote the length <italic>l </italic>suffix (prefix) of string <italic>a</italic>. The symbol â is introduced to denote the concatenation operation between two strings. For example, if <italic>s</italic><sub>1 </sub>= "<italic>abc</italic>"<italic>, s</italic><sub>2 </sub>= "<italic>def </italic>", then <italic>s</italic><sub>1 </sub>Â°<italic>s</italic><sub>2 </sub>= "<italic>abcdef </italic>". The number of edges attached to <italic>k</italic>-molecule <italic>Î±</italic>Ë is denoted as <italic>degree</italic>(<inline-formula><mml:math id="M11" name="1471-2105-15-S9-S2-i11" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover></mml:math></inline-formula>). All notations are listed in Table <xref ref-type="table" rid="T1">1</xref>.</p>
        <table-wrap id="T1" position="float">
          <label>Table 1</label>
          <caption>
            <p>List of notations.</p>
          </caption>
          <table frame="hsides" rules="groups">
            <thead>
              <tr>
                <th align="left">Definition</th>
                <th align="left">Notation</th>
                <th align="left">Example</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">set of nucleotides</td>
                <td align="left">â</td>
                <td align="left">â = {<italic>A, T, C, G</italic>}</td>
              </tr>
              <tr>
                <td align="left">reference sequence</td>
                <td align="left">
                  <italic>W</italic>
                </td>
                <td align="left"><italic>w </italic>= "<italic>T AGT CGAGG</italic>"</td>
              </tr>
              <tr>
                <td align="left">read set</td>
                <td align="left">
                  <italic>S</italic>
                </td>
                <td align="left"><italic>S </italic>= { "<italic>T AGT CG</italic>", "<italic>AGT CGA</italic>", "<italic>T CGAGG</italic>" }</td>
              </tr>
              <tr>
                <td align="left"><italic>k</italic>-mer</td>
                <td align="left"><italic>Î± </italic>or <italic>Î±<sup>/</sup></italic></td>
                <td align="left"><italic>Î± </italic>= "<italic>T AG</italic>"<italic>, Î±<sup>/ </sup></italic>= "<italic>CT A</italic>"</td>
              </tr>
              <tr>
                <td align="left">positive <italic>k</italic>-mer</td>
                <td align="left"><italic><sub>Î±</sub></italic>+</td>
                <td align="left"><italic>Î±</italic><sup>+ </sup>= "<italic>T AG</italic>"</td>
              </tr>
              <tr>
                <td align="left">negative <italic>k</italic>-mer</td>
                <td align="left">
                  <italic><sub>Î±</sub>â</italic>
                </td>
                <td align="left"><italic>Î±<sup>â </sup></italic>= "<italic>CT A</italic>"</td>
              </tr>
              <tr>
                <td align="left">representative <italic>k</italic>-mer</td>
                <td align="left"><italic><sub>Î±</sub></italic>+</td>
                <td align="left"><italic>Î±</italic><sup>+ </sup>= "<italic>T AG</italic>"</td>
              </tr>
              <tr>
                <td align="left"><italic>k</italic>-molecule</td>
                <td align="left">
                  <sup>
                    <inline-formula>
                      <mml:math id="M12" name="1471-2105-15-S9-S2-i85" overflow="scroll">
                        <mml:mrow>
                          <mml:mover accent="false">
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                            </mml:mrow>
                            <mml:mo class="MathClass-op">^</mml:mo>
                          </mml:mover>
                          <mml:mo class="MathClass-rel">=</mml:mo>
                          <mml:msup>
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mo class="MathClass-bin">+</mml:mo>
                            </mml:mrow>
                          </mml:msup>
                          <mml:mo class="MathClass-rel">=</mml:mo>
                          <mml:mrow>
                            <mml:mo class="MathClass-open">{</mml:mo>
                            <mml:mrow>
                              <mml:msup>
                                <mml:mrow>
                                  <mml:mi>Î±</mml:mi>
                                </mml:mrow>
                                <mml:mrow>
                                  <mml:mo class="MathClass-bin">+</mml:mo>
                                </mml:mrow>
                              </mml:msup>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:msup>
                                <mml:mrow>
                                  <mml:mi>Î±</mml:mi>
                                </mml:mrow>
                                <mml:mrow>
                                  <mml:mo class="MathClass-bin">-</mml:mo>
                                </mml:mrow>
                              </mml:msup>
                            </mml:mrow>
                            <mml:mo class="MathClass-close">}</mml:mo>
                          </mml:mrow>
                        </mml:mrow>
                      </mml:math>
                    </inline-formula>
                  </sup>
                </td>
                <td align="left"><inline-formula><mml:math id="M13" name="1471-2105-15-S9-S2-i86" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover></mml:math></inline-formula> = {"<italic>T AG</italic>", "<italic>CT A</italic>"}</td>
              </tr>
              <tr>
                <td align="left">set of <italic>k</italic>-mers</td>
                <td align="left">â¤(<italic>s, k</italic>)</td>
                <td align="left">â¤("<italic>T AGT CG</italic>", 3) ={"TAG","AGT","GTC","TCG"}</td>
              </tr>
              <tr>
                <td align="left">set of <italic>k</italic>-molecules</td>
                <td align="left">S(<italic>s, k</italic>)</td>
                <td align="left">â¤("<italic>T AGT C</italic>", 3) = {{"<italic>T AG</italic>", "<italic>CT A</italic>"}, {"<italic>AGT </italic>", "<italic>ACT </italic>"}, {"<italic>GT C</italic>", "<italic>GAC</italic>"}, {"<italic>T CG</italic>", "<italic>CGA</italic>"}}</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </sec>
      <sec>
        <title>1-step Bi-directed Graph</title>
        <p><bold>Definition 1: 1-step bi-directed graph</bold>. The 1-step bi-directed de Bruijn graph of order <italic>k </italic>for a given string <italic>s </italic>can be presented as,</p>
        <p>
          <disp-formula id="bmcM1">
            <label>(1)</label>
            <mml:math id="M14" name="1471-2105-15-S9-S2-i12" overflow="scroll">
              <mml:msubsup>
                <mml:mrow>
                  <mml:mi>G</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>k</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
              </mml:msubsup>
              <mml:mrow>
                <mml:mo class="MathClass-open">(</mml:mo>
                <mml:mrow>
                  <mml:mi>s</mml:mi>
                </mml:mrow>
                <mml:mo class="MathClass-close">)</mml:mo>
              </mml:mrow>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:mrow>
                <mml:mo class="MathClass-open">{</mml:mo>
                <mml:mrow>
                  <mml:mi>V</mml:mi>
                  <mml:mi>s</mml:mi>
                  <mml:mo class="MathClass-punc">,</mml:mo>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mi>E</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>s</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mn>1</mml:mn>
                    </mml:mrow>
                  </mml:msubsup>
                </mml:mrow>
                <mml:mo class="MathClass-close">}</mml:mo>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>In the rest of the paper, 1-step bi-directed de Bruijn graph of order <italic>k </italic>is abbreviated as 1<bold>-step bi-directed graph</bold>. In equation (1), the vertex set <italic>V<sub>s </sub></italic>is the <italic>k</italic>-spectrum of <italic>s</italic>,</p>
        <p>
          <disp-formula id="bmcM2">
            <label>(2)</label>
            <mml:math id="M15" name="1471-2105-15-S9-S2-i13" overflow="scroll">
              <mml:msub>
                <mml:mrow>
                  <mml:mi>V</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>s</mml:mi>
                </mml:mrow>
              </mml:msub>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:mi mathvariant="double-struck">S</mml:mi>
              <mml:mrow>
                <mml:mo class="MathClass-open">(</mml:mo>
                <mml:mrow>
                  <mml:mi>s</mml:mi>
                  <mml:mo class="MathClass-punc">,</mml:mo>
                  <mml:mi>k</mml:mi>
                </mml:mrow>
                <mml:mo class="MathClass-close">)</mml:mo>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>and the 1-step bi-directed edge set <inline-formula><mml:math id="M16" name="1471-2105-15-S9-S2-i14" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula> is defined as follows,</p>
        <p>
          <disp-formula id="bmcM3">
            <label>(3)</label>
            <mml:math id="M17" name="1471-2105-15-S9-S2-i15" overflow="scroll">
              <mml:mrow>
                <mml:mtable class="aligned">
                  <mml:mtr>
                    <mml:mtd columnalign="right">
                      <mml:msubsup>
                        <mml:mrow>
                          <mml:mi>E</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>s</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mn>1</mml:mn>
                        </mml:mrow>
                      </mml:msubsup>
                    </mml:mtd>
                    <mml:mtd columnalign="left">
                      <mml:mo class="MathClass-rel">=</mml:mo>
                      <mml:mrow>
                        <mml:mo class="MathClass-open">{</mml:mo>
                        <mml:mrow>
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>e</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                              <mml:mi>Î²</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mn>1</mml:mn>
                            </mml:mrow>
                          </mml:msubsup>
                          <mml:mo class="MathClass-rel">=</mml:mo>
                          <mml:mrow>
                            <mml:mo class="MathClass-open">(</mml:mo>
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:mi>Î²</mml:mi>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:msub>
                                <mml:mrow>
                                  <mml:mi>d</mml:mi>
                                </mml:mrow>
                                <mml:mrow>
                                  <mml:mi>Î±</mml:mi>
                                </mml:mrow>
                              </mml:msub>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:msub>
                                <mml:mrow>
                                  <mml:mi>d</mml:mi>
                                </mml:mrow>
                                <mml:mrow>
                                  <mml:mi>Î²</mml:mi>
                                </mml:mrow>
                              </mml:msub>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:msubsup>
                                <mml:mrow>
                                  <mml:mi>c</mml:mi>
                                </mml:mrow>
                                <mml:mrow>
                                  <mml:mi>Î±</mml:mi>
                                  <mml:mi>Î²</mml:mi>
                                </mml:mrow>
                                <mml:mrow>
                                  <mml:mn>1</mml:mn>
                                </mml:mrow>
                              </mml:msubsup>
                            </mml:mrow>
                            <mml:mo class="MathClass-close">)</mml:mo>
                          </mml:mrow>
                          <mml:mo class="MathClass-op">â</mml:mo>
                          <mml:mover accent="true">
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                            </mml:mrow>
                            <mml:mo class="MathClass-op">^</mml:mo>
                          </mml:mover>
                          <mml:mo class="MathClass-punc">,</mml:mo>
                          <mml:mover accent="true">
                            <mml:mrow>
                              <mml:mi>Î²</mml:mi>
                            </mml:mrow>
                            <mml:mo class="MathClass-op">^</mml:mo>
                          </mml:mover>
                          <mml:mo class="MathClass-rel">â</mml:mo>
                          <mml:mi mathvariant="double-struck">S</mml:mi>
                          <mml:mrow>
                            <mml:mo class="MathClass-open">(</mml:mo>
                            <mml:mrow>
                              <mml:mi>s</mml:mi>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:mi>k</mml:mi>
                            </mml:mrow>
                            <mml:mo class="MathClass-close">)</mml:mo>
                          </mml:mrow>
                          <mml:mo class="MathClass-punc">,</mml:mo>
                          <mml:mi>s</mml:mi>
                          <mml:mi>u</mml:mi>
                          <mml:mspace class="tmspace" width="2.77695pt"/>
                          <mml:mi>f</mml:mi>
                          <mml:mrow>
                            <mml:mo class="MathClass-open">(</mml:mo>
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:mi>k</mml:mi>
                              <mml:mo class="MathClass-bin">-</mml:mo>
                              <mml:mn>1</mml:mn>
                            </mml:mrow>
                            <mml:mo class="MathClass-close">)</mml:mo>
                          </mml:mrow>
                          <mml:mo class="MathClass-rel">=</mml:mo>
                        </mml:mrow>
                      </mml:mrow>
                    </mml:mtd>
                    <mml:mtd columnalign="right"/>
                  </mml:mtr>
                  <mml:mtr>
                    <mml:mtd columnalign="right"/>
                    <mml:mtd columnalign="left">
                      <mml:mspace class="quad" width="1em"/>
                      <mml:mspace class="quad" width="1em"/>
                      <mml:mi>p</mml:mi>
                      <mml:mi>r</mml:mi>
                      <mml:mi>e</mml:mi>
                      <mml:mspace class="tmspace" width="2.77695pt"/>
                      <mml:mrow>
                        <mml:mo class="MathClass-open">(</mml:mo>
                        <mml:mrow>
                          <mml:mi>Î²</mml:mi>
                          <mml:mo class="MathClass-punc">,</mml:mo>
                          <mml:mi>k</mml:mi>
                          <mml:mo class="MathClass-bin">-</mml:mo>
                          <mml:mn>1</mml:mn>
                        </mml:mrow>
                        <mml:mo class="MathClass-close">)</mml:mo>
                      </mml:mrow>
                      <mml:mi>Ë</mml:mi>
                      <mml:mrow>
                        <mml:mo class="MathClass-open">(</mml:mo>
                        <mml:mrow>
                          <mml:mi>Î±</mml:mi>
                          <mml:mo class="MathClass-bin">â</mml:mo>
                          <mml:mi>Î²</mml:mi>
                          <mml:mrow>
                            <mml:mo class="MathClass-open">[</mml:mo>
                            <mml:mrow>
                              <mml:mi>k</mml:mi>
                              <mml:mo class="MathClass-bin">-</mml:mo>
                              <mml:mn>1</mml:mn>
                            </mml:mrow>
                            <mml:mo class="MathClass-close">]</mml:mo>
                          </mml:mrow>
                        </mml:mrow>
                        <mml:mo class="MathClass-close">)</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-rel">â</mml:mo>
                      <mml:mrow>
                        <mml:mo class="MathClass-open">(</mml:mo>
                        <mml:mrow>
                          <mml:mi mathvariant="double-struck">Z</mml:mi>
                          <mml:mrow>
                            <mml:mo class="MathClass-open">(</mml:mo>
                            <mml:mrow>
                              <mml:mi>s</mml:mi>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:mi>k</mml:mi>
                              <mml:mo class="MathClass-bin">+</mml:mo>
                              <mml:mn>1</mml:mn>
                            </mml:mrow>
                            <mml:mo class="MathClass-close">)</mml:mo>
                          </mml:mrow>
                          <mml:mo class="MathClass-bin">â¨</mml:mo>
                          <mml:mi mathvariant="double-struck">Z</mml:mi>
                          <mml:mrow>
                            <mml:mo class="MathClass-open">(</mml:mo>
                            <mml:mrow>
                              <mml:mi>s</mml:mi>
                              <mml:mi>â²</mml:mi>
                              <mml:mo class="MathClass-punc">,</mml:mo>
                              <mml:mi>k</mml:mi>
                              <mml:mo class="MathClass-bin">+</mml:mo>
                              <mml:mn>1</mml:mn>
                            </mml:mrow>
                            <mml:mo class="MathClass-close">)</mml:mo>
                          </mml:mrow>
                        </mml:mrow>
                        <mml:mo class="MathClass-close">)</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">)</mml:mo>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mtd>
                  </mml:mtr>
                  <mml:mtr>
                    <mml:mtd columnalign="right"/>
                  </mml:mtr>
                </mml:mtable>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>Equations (3) declares that any two overlapped <italic>k</italic>-molecules can be connected with one 1-step bi-directed edge when they are consecutive in sequence <italic>s </italic>or the complementary sequence <italic>s</italic>'. Here <italic>d<sub>Î± </sub></italic>denotes the direction of <italic>k</italic>-mer <italic>Î±</italic>, if <italic>Î± </italic>= <italic>Î±</italic><sup>+</sup>, <italic>d<sub>Î± </sub></italic>='+', otherwise <italic>d<sub>Î± </sub></italic>= '-'. <inline-formula><mml:math id="M18" name="1471-2105-15-S9-S2-i16" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula> is the content or <bold>label </bold>of the edge, and is initialized with <italic>Î²</italic>[<italic>k â </italic>1], that is <inline-formula><mml:math id="M19" name="1471-2105-15-S9-S2-i17" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mi>Î²</mml:mi><mml:mrow><mml:mo class="MathClass-open">[</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mo class="MathClass-close">]</mml:mo></mml:mrow></mml:math></inline-formula>, and we have <inline-formula><mml:math id="M20" name="1471-2105-15-S9-S2-i18" overflow="scroll"><mml:mi>s</mml:mi><mml:mi>u</mml:mi><mml:mspace class="tmspace" width="2.77695pt"/><mml:mi>f</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">â</mml:mo></mml:mrow></mml:msup><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-rel">=</mml:mo><mml:mi>Î²</mml:mi></mml:math></inline-formula>.</p>
        <p><bold>Lemma 1</bold>. Given two <italic>k</italic>-molecules <inline-formula><mml:math id="M21" name="1471-2105-15-S9-S2-i19" overflow="scroll"><mml:mrow><mml:mover accent="false"><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover><mml:mo class="MathClass-punc">,</mml:mo><mml:mover accent="false"><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover><mml:mo class="MathClass-rel">â</mml:mo><mml:mi mathvariant="double-struck">S</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>s</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, there are four possible connections, and for each type of connection exactly two equivalent 1-step bi-directed edge representations exist,</p>
        <p>1 <inline-formula><mml:math id="M22" name="1471-2105-15-S9-S2-i20" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">+</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:msup><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">+</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-punc">,</mml:mo><mml:mspace class="tmspace" width="2.77695pt"/><mml:mspace class="tmspace" width="2.77695pt"/><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">-</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">-</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula></p>
        <p>2 <inline-formula><mml:math id="M23" name="1471-2105-15-S9-S2-i21" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">+</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:msup><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">-</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">+</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-punc">,</mml:mo><mml:mspace class="tmspace" width="2.77695pt"/><mml:mspace class="tmspace" width="2.77695pt"/><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">+</mml:mo><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-rel">=</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">+</mml:mo><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula></p>
        <p>3 <inline-formula><mml:math id="M24" name="1471-2105-15-S9-S2-i22" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:msup><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">-</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-punc">,</mml:mo><mml:mspace class="tmspace" width="2.77695pt"/><mml:mspace class="tmspace" width="2.77695pt"/><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">-</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula></p>
        <p>4 <inline-formula><mml:math id="M25" name="1471-2105-15-S9-S2-i23" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:msup><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">-</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">-</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">-</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-punc">,</mml:mo><mml:mspace class="tmspace" width="2.77695pt"/><mml:mspace class="tmspace" width="2.77695pt"/><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">+</mml:mo><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msup><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mspace class="tmspace" width="2.77695pt"/><mml:msup><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow></mml:msup><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-bin">+</mml:mo><mml:mi>Î±</mml:mi><mml:mo class="MathClass-bin">+</mml:mo></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula></p>
        <p>In each type of connection, the first bi-directed edge representation and the second one are equivalent. The first bi-directed edge is associated with <italic>k</italic>-molecule <inline-formula><mml:math id="M26" name="1471-2105-15-S9-S2-i24" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover></mml:math></inline-formula>, and the second one is associated with <inline-formula><mml:math id="M27" name="1471-2105-15-S9-S2-i25" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover></mml:math></inline-formula>. Figure <xref ref-type="fig" rid="F4">4</xref> illustrates all four possible connections. For example in Figure <xref ref-type="fig" rid="F4">4</xref>-(a), a positive <italic>k</italic>-mer "TAG" points to positive <italic>k</italic>-mer "AGT" with a label "A", and the corresponding edge is <inline-formula><mml:math id="M28" name="1471-2105-15-S9-S2-i26" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>T</mml:mi><mml:mspace class="tmspace" width="2.77695pt"/><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mspace class="tmspace" width="2.77695pt"/><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>T</mml:mi><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>A</mml:mi><mml:mi>G</mml:mi><mml:mi>T</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mo class="MathClass-bin">+</mml:mo><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>T</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
        <fig id="F4" position="float">
          <label>Figure 4</label>
          <caption>
            <p><bold>The illustration of four possible connections</bold>.</p>
          </caption>
          <graphic xlink:href="1471-2105-15-S9-S2-4"/>
        </fig>
        <p>Given a set of reads <italic>S </italic>= {<italic>s</italic><sub>1</sub><italic>, s</italic><sub>2</sub><italic>, . . . , s</italic><sub>h</sub>}, a 1-step bi-directed graph derived from <italic>S </italic>with order <italic>k </italic>is,</p>
        <p>
          <disp-formula id="bmcM4">
            <label>(4)</label>
            <mml:math id="M29" name="1471-2105-15-S9-S2-i27" overflow="scroll">
              <mml:mrow>
                <mml:msubsup>
                  <mml:mrow>
                    <mml:mi>G</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mi>k</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mn>1</mml:mn>
                  </mml:mrow>
                </mml:msubsup>
                <mml:mrow>
                  <mml:mo class="MathClass-open">(</mml:mo>
                  <mml:mrow>
                    <mml:mi>S</mml:mi>
                  </mml:mrow>
                  <mml:mo class="MathClass-close">)</mml:mo>
                </mml:mrow>
                <mml:mo class="MathClass-rel">=</mml:mo>
                <mml:mrow>
                  <mml:mo class="MathClass-open">{</mml:mo>
                  <mml:mrow>
                    <mml:mi>V</mml:mi>
                    <mml:mi>s</mml:mi>
                    <mml:mo class="MathClass-punc">,</mml:mo>
                    <mml:mspace class="tmspace" width="2.77695pt"/>
                    <mml:msubsup>
                      <mml:mrow>
                        <mml:mi>E</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>S</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>1</mml:mn>
                      </mml:mrow>
                    </mml:msubsup>
                  </mml:mrow>
                  <mml:mo class="MathClass-close">}</mml:mo>
                </mml:mrow>
                <mml:mo class="MathClass-rel">=</mml:mo>
                <mml:mrow>
                  <mml:mo class="MathClass-open">{</mml:mo>
                  <mml:mrow>
                    <mml:munder class="msub">
                      <mml:mrow>
                        <mml:mo class="MathClass-op">âª</mml:mo>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>1</mml:mn>
                        <mml:mo class="MathClass-rel">â¤</mml:mo>
                        <mml:mi>i</mml:mi>
                        <mml:mo class="MathClass-rel">â¤</mml:mo>
                        <mml:mi>h</mml:mi>
                      </mml:mrow>
                    </mml:munder>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>V</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>s</mml:mi>
                        <mml:mi>i</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-punc">,</mml:mo>
                    <mml:munder class="msub">
                      <mml:mrow>
                        <mml:mo class="MathClass-op"> âª</mml:mo>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>1</mml:mn>
                        <mml:mo class="MathClass-rel">â¤</mml:mo>
                        <mml:mi>i</mml:mi>
                        <mml:mo class="MathClass-rel">â¤</mml:mo>
                        <mml:mi>h</mml:mi>
                      </mml:mrow>
                    </mml:munder>
                    <mml:msubsup>
                      <mml:mrow>
                        <mml:mi>E</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>s</mml:mi>
                        <mml:mi>i</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mn>1</mml:mn>
                      </mml:mrow>
                    </mml:msubsup>
                  </mml:mrow>
                  <mml:mo class="MathClass-close">}</mml:mo>
                </mml:mrow>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>Each read <italic>s<sub>i </sub></italic>corresponds to a path in <inline-formula><mml:math id="M30" name="1471-2105-15-S9-S2-i28" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi mathvariant="double-struck">S</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>, and read <italic>s<sub>i </sub></italic>can be recovered by concatenating (<italic>k </italic>â 1)-prefix of the first <italic>k</italic>-molecule and the edge labels on the path consisted by S(<italic>s<sub>i</sub>, k</italic>). As an example, an 1-step bi-directed de Bruijn graph derived from <italic>S </italic>= {"<italic>T AGT CG</italic>", "<italic>AGT CGA</italic>", "<italic>T CGAGG</italic>"} is plotted in Figure <xref ref-type="fig" rid="F5">5</xref>.</p>
        <fig id="F5" position="float">
          <label>Figure 5</label>
          <caption>
            <p><bold>An example of 1-step bi-directed graph</bold>. Here semi-extended k-molecules are colored with yellow, and semi-extended edges are plotted with dashed line.</p>
          </caption>
          <graphic xlink:href="1471-2105-15-S9-S2-5"/>
        </fig>
      </sec>
      <sec>
        <title>Multi-step Bi-directed Graph and Its Properties</title>
        <p><bold>Definition 2: edge merging operation</bold>. Given two 1-step bi-directed edges <inline-formula><mml:math id="M31" name="1471-2105-15-S9-S2-i29" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow></mml:msub><mml:mi>.</mml:mi><mml:msubsup><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="M32" name="1471-2105-15-S9-S2-i30" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>Î²</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>Î³</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î³</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> in a 1-step bi-directed graph, if <inline-formula><mml:math id="M33" name="1471-2105-15-S9-S2-i31" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mi>.</mml:mi><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-rel">=</mml:mo><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mi>.</mml:mi><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula> and <italic>degree</italic>(<inline-formula><mml:math id="M34" name="1471-2105-15-S9-S2-i32" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover></mml:math></inline-formula>) = 2, we can obtain a 2-step bi-directed edge <inline-formula><mml:math id="M35" name="1471-2105-15-S9-S2-i33" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>Î³</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î³</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> by merging edges <inline-formula><mml:math id="M36" name="1471-2105-15-S9-S2-i34" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula> and <inline-formula><mml:math id="M37" name="1471-2105-15-S9-S2-i35" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula>, <inline-formula><mml:math id="M38" name="1471-2105-15-S9-S2-i36" overflow="scroll"><mml:mrow><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mo class="MathClass-bin">â</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow></mml:math></inline-formula>. Using symbol â to denote <bold>edge merging operation </bold>between two bi-directed edges attached to the same <italic>k</italic>-molecule with the same direction, and the 2-step bi-directed edge is written as,</p>
        <p>
          <disp-formula id="bmcM5">
            <label>(5)</label>
            <mml:math id="M39" name="1471-2105-15-S9-S2-i37" overflow="scroll">
              <mml:msubsup>
                <mml:mrow>
                  <mml:mi>e</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>Î±</mml:mi>
                  <mml:mi>Î²</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
              </mml:msubsup>
              <mml:mo class="MathClass-bin">â</mml:mo>
              <mml:msubsup>
                <mml:mrow>
                  <mml:mi>e</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>Î²</mml:mi>
                  <mml:mi>Î³</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
              </mml:msubsup>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:msubsup>
                <mml:mrow>
                  <mml:mi>e</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>Î±</mml:mi>
                  <mml:mi>Î³</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mn>2</mml:mn>
                </mml:mrow>
              </mml:msubsup>
              <mml:mspace class="tmspace" width="2.77695pt"/>
              <mml:mspace class="tmspace" width="2.77695pt"/>
              <mml:mspace class="tmspace" width="2.77695pt"/>
              <mml:mi>o</mml:mi>
              <mml:mi>r</mml:mi>
              <mml:mspace class="tmspace" width="2.77695pt"/>
              <mml:mspace class="tmspace" width="2.77695pt"/>
              <mml:mspace class="tmspace" width="2.77695pt"/>
              <mml:msubsup>
                <mml:mrow>
                  <mml:mi>e</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>Î³</mml:mi>
                  <mml:mi>Î²</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
              </mml:msubsup>
              <mml:mo class="MathClass-bin">â</mml:mo>
              <mml:msubsup>
                <mml:mrow>
                  <mml:mi>e</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>Î²</mml:mi>
                  <mml:mi>Î±</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
              </mml:msubsup>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:msubsup>
                <mml:mrow>
                  <mml:mi>e</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>Î³</mml:mi>
                  <mml:mi>Î±</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mn>2</mml:mn>
                </mml:mrow>
              </mml:msubsup>
            </mml:math>
          </disp-formula>
        </p>
        <p>Two edges <inline-formula><mml:math id="M40" name="1471-2105-15-S9-S2-i38" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula> and <inline-formula><mml:math id="M41" name="1471-2105-15-S9-S2-i39" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î³</mml:mi><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula> in equation (5) are equivalent, indicating it is same to apply edge merging operation on <inline-formula><mml:math id="M42" name="1471-2105-15-S9-S2-i40" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula> and <inline-formula><mml:math id="M43" name="1471-2105-15-S9-S2-i41" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula>, and to apply edge merging operation on <inline-formula><mml:math id="M44" name="1471-2105-15-S9-S2-i42" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î³</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula> and <inline-formula><mml:math id="M45" name="1471-2105-15-S9-S2-i43" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula>. Figure <xref ref-type="fig" rid="F6">6</xref> shows an example on edge merging operation.</p>
        <fig id="F6" position="float">
          <label>Figure 6</label>
          <caption>
            <p><bold>An example for edge merging operation</bold>.</p>
          </caption>
          <graphic xlink:href="1471-2105-15-S9-S2-6"/>
        </fig>
        <p><bold>Zero edge 0 </bold>is defined to indicate all non-existing bi-directed edges. Note that <inline-formula><mml:math id="M46" name="1471-2105-15-S9-S2-i44" overflow="scroll"><mml:mn>0</mml:mn><mml:mo class="MathClass-bin">â</mml:mo><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mn>0</mml:mn><mml:mo class="MathClass-punc">,</mml:mo><mml:mspace class="tmspace" width="2.77695pt"/><mml:mspace class="tmspace" width="2.77695pt"/><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:msubsup><mml:mo class="MathClass-bin">â</mml:mo><mml:mn>0</mml:mn><mml:mo class="MathClass-rel">=</mml:mo><mml:mn>0</mml:mn></mml:math></inline-formula>. A <italic>z</italic>-step bi-directed edge can be obtained by,</p>
        <p>
          <disp-formula id="bmcM6">
            <label>(6)</label>
            <mml:math id="M47" name="1471-2105-15-S9-S2-i45" overflow="scroll">
              <mml:mrow>
                <mml:msubsup>
                  <mml:mrow>
                    <mml:mi>e</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mi>Î±</mml:mi>
                    <mml:mi>Î³</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mi>z</mml:mi>
                  </mml:mrow>
                </mml:msubsup>
                <mml:mo class="MathClass-rel">=</mml:mo>
                <mml:mfenced open="{">
                  <mml:mrow>
                    <mml:mtable class="array" columnlines="none" equalcolumns="false" equalrows="false">
                      <mml:mtr>
                        <mml:mtd class="array" columnalign="left">
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>e</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                              <mml:mi>Î²</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>x</mml:mi>
                            </mml:mrow>
                          </mml:msubsup>
                          <mml:mo class="MathClass-bin">â</mml:mo>
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>e</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î²</mml:mi>
                              <mml:mi>Î³</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>y</mml:mi>
                            </mml:mrow>
                          </mml:msubsup>
                          <mml:mo>,</mml:mo>
                        </mml:mtd>
                        <mml:mtd class="array" columnalign="left">
                          <mml:mi>i</mml:mi>
                          <mml:mi>f</mml:mi>
                          <mml:mo class="MathClass-op">â</mml:mo>
                          <mml:mi>Î²</mml:mi>
                          <mml:mo class="MathClass-punc">,</mml:mo>
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>e</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                              <mml:mi>Î²</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>x</mml:mi>
                            </mml:mrow>
                          </mml:msubsup>
                          <mml:mo class="MathClass-rel">â </mml:mo>
                          <mml:mn>0</mml:mn>
                          <mml:mo class="MathClass-punc">,</mml:mo>
                          <mml:mspace class="tmspace" width="2.77695pt"/>
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>e</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î²</mml:mi>
                              <mml:mi>Î³</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>y</mml:mi>
                            </mml:mrow>
                          </mml:msubsup>
                          <mml:mo class="MathClass-rel">â </mml:mo>
                          <mml:mn>0</mml:mn>
                          <mml:mo class="MathClass-punc">,</mml:mo>
                          <mml:mspace class="tmspace" width="2.77695pt"/>
                          <mml:mi>z</mml:mi>
                          <mml:mo class="MathClass-rel">=</mml:mo>
                          <mml:mi>x</mml:mi>
                          <mml:mo class="MathClass-bin">+</mml:mo>
                          <mml:mi>y</mml:mi>
                        </mml:mtd>
                      </mml:mtr>
                      <mml:mtr>
                        <mml:mtd class="array" columnalign="left"/>
                        <mml:mtd class="array" columnalign="left">
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>e</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î±</mml:mi>
                              <mml:mi>Î²</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>x</mml:mi>
                            </mml:mrow>
                          </mml:msubsup>
                          <mml:mi>.</mml:mi>
                          <mml:msub>
                            <mml:mrow>
                              <mml:mi>d</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î²</mml:mi>
                            </mml:mrow>
                          </mml:msub>
                          <mml:mo class="MathClass-rel">=</mml:mo>
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>e</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î²</mml:mi>
                              <mml:mi>Î³</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>y</mml:mi>
                            </mml:mrow>
                          </mml:msubsup>
                          <mml:mi>.</mml:mi>
                          <mml:msub>
                            <mml:mrow>
                              <mml:mi>d</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>Î²</mml:mi>
                            </mml:mrow>
                          </mml:msub>
                          <mml:mo class="MathClass-punc">,</mml:mo>
                          <mml:mspace class="tmspace" width="2.77695pt"/>
                          <mml:mi>d</mml:mi>
                          <mml:mi>e</mml:mi>
                          <mml:mi>g</mml:mi>
                          <mml:mi>r</mml:mi>
                          <mml:mi>e</mml:mi>
                          <mml:mi>e</mml:mi>
                          <mml:mrow>
                            <mml:mo class="MathClass-open">(</mml:mo>
                            <mml:mrow>
                              <mml:mover accent="false">
                                <mml:mrow>
                                  <mml:mi>Î²</mml:mi>
                                </mml:mrow>
                                <mml:mo class="MathClass-op">^</mml:mo>
                              </mml:mover>
                            </mml:mrow>
                            <mml:mo class="MathClass-close">)</mml:mo>
                          </mml:mrow>
                          <mml:mo class="MathClass-rel">=</mml:mo>
                          <mml:mn>2</mml:mn>
                        </mml:mtd>
                      </mml:mtr>
                      <mml:mtr>
                        <mml:mtd class="array" columnalign="left">
                          <mml:mn>0</mml:mn>
                        </mml:mtd>
                        <mml:mtd class="array" columnalign="left">
                          <mml:mstyle class="text">
                            <mml:mtext class="textsf">otherwise</mml:mtext>
                          </mml:mstyle>
                        </mml:mtd>
                      </mml:mtr>
                    </mml:mtable>
                  </mml:mrow>
                </mml:mfenced>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p><bold>Definition 3: Multi-step Bi-directed Graph(MSG)</bold>. A MSG derived from a read set <italic>S </italic>= {<italic>s</italic><sub>1</sub><italic>, s</italic><sub>2</sub><italic>, . . . , s<sub>h</sub></italic>}, is written as,</p>
        <p>
          <disp-formula id="bmcM7">
            <label>(7)</label>
            <mml:math id="M48" name="1471-2105-15-S9-S2-i46" overflow="scroll">
              <mml:mrow>
                <mml:msub>
                  <mml:mrow>
                    <mml:mi>G</mml:mi>
                  </mml:mrow>
                  <mml:mrow>
                    <mml:mi>k</mml:mi>
                  </mml:mrow>
                </mml:msub>
                <mml:mrow>
                  <mml:mo class="MathClass-open">(</mml:mo>
                  <mml:mrow>
                    <mml:mi>S</mml:mi>
                  </mml:mrow>
                  <mml:mo class="MathClass-close">)</mml:mo>
                </mml:mrow>
                <mml:mo class="MathClass-rel">=</mml:mo>
                <mml:mrow>
                  <mml:mo class="MathClass-open">{</mml:mo>
                  <mml:mrow>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>V</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>S</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-punc">,</mml:mo>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>E</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>S</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                  </mml:mrow>
                  <mml:mo class="MathClass-close">}</mml:mo>
                </mml:mrow>
                <mml:mo class="MathClass-rel">=</mml:mo>
                <mml:mrow>
                  <mml:mo class="MathClass-open">{</mml:mo>
                  <mml:mrow>
                    <mml:mstyle displaystyle="true">
                      <mml:munder>
                        <mml:mrow>
                          <mml:mo>â</mml:mo>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mn>1</mml:mn>
                          <mml:mo class="MathClass-rel">â¤</mml:mo>
                          <mml:mi>i</mml:mi>
                          <mml:mo class="MathClass-rel">â¤</mml:mo>
                          <mml:mi>h</mml:mi>
                        </mml:mrow>
                      </mml:munder>
                    </mml:mstyle>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>V</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>s</mml:mi>
                        <mml:mi>i</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-punc">,</mml:mo>
                    <mml:mspace class="tmspace" width="2.77695pt"/>
                    <mml:mspace class="tmspace" width="2.77695pt"/>
                    <mml:mstyle displaystyle="true">
                      <mml:munder>
                        <mml:mrow>
                          <mml:mo> â</mml:mo>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mn>1</mml:mn>
                          <mml:mo class="MathClass-rel">â¤</mml:mo>
                          <mml:mi>j</mml:mi>
                          <mml:mo class="MathClass-rel">â¤</mml:mo>
                          <mml:mi>g</mml:mi>
                        </mml:mrow>
                      </mml:munder>
                    </mml:mstyle>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">(</mml:mo>
                      <mml:mrow>
                        <mml:mstyle displaystyle="true">
                          <mml:munder>
                            <mml:mrow>
                              <mml:mo>â</mml:mo>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mn>1</mml:mn>
                              <mml:mo class="MathClass-rel">â¤</mml:mo>
                              <mml:mi>i</mml:mi>
                              <mml:mo class="MathClass-rel">â¤</mml:mo>
                              <mml:mi>h</mml:mi>
                            </mml:mrow>
                          </mml:munder>
                        </mml:mstyle>
                        <mml:msubsup>
                          <mml:mrow>
                            <mml:mi>E</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>s</mml:mi>
                            <mml:mi>i</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msubsup>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">)</mml:mo>
                    </mml:mrow>
                  </mml:mrow>
                  <mml:mo class="MathClass-close">}</mml:mo>
                </mml:mrow>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>where <italic>g </italic>is the length of reference sequence <italic>w</italic>, <inline-formula><mml:math id="M49" name="1471-2105-15-S9-S2-i47" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msubsup><mml:mo class="MathClass-bin">+</mml:mo><mml:mrow><mml:mo class="MathClass-open">{</mml:mo><mml:mrow><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msubsup><mml:mstyle class="text"><mml:mtext class="textsf">|</mml:mtext></mml:mstyle><mml:mo class="MathClass-op">â</mml:mo><mml:mover accent="false"><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover><mml:mo class="MathClass-punc">,</mml:mo><mml:mover accent="false"><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover><mml:mo class="MathClass-rel">â</mml:mo><mml:mi mathvariant="double-struck">S</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>k</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow><mml:mo class="MathClass-close">}</mml:mo></mml:mrow></mml:math></inline-formula>. A MSG is obtained through edge merging operations.</p>
        <p>Given an <italic>x</italic>-step bi-directed edge <inline-formula><mml:math id="M50" name="1471-2105-15-S9-S2-i48" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>Î±</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>Î²</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>d</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>c</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>, if there exists edge <inline-formula><mml:math id="M51" name="1471-2105-15-S9-S2-i49" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î³</mml:mi><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mi>y</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula> or <inline-formula><mml:math id="M52" name="1471-2105-15-S9-S2-i50" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mi>z</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula> satisfying <inline-formula><mml:math id="M53" name="1471-2105-15-S9-S2-i51" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î³</mml:mi><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mi>y</mml:mi></mml:mrow></mml:msubsup><mml:mo class="MathClass-bin">â</mml:mo><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">â </mml:mo><mml:mn>0</mml:mn></mml:math></inline-formula> or <inline-formula><mml:math id="M54" name="1471-2105-15-S9-S2-i52" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:msubsup><mml:mo class="MathClass-bin">â</mml:mo><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î³</mml:mi></mml:mrow><mml:mrow><mml:mi>z</mml:mi></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">â </mml:mo><mml:mn>0</mml:mn></mml:math></inline-formula>, then we call edge <inline-formula><mml:math id="M55" name="1471-2105-15-S9-S2-i53" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula> as a <bold>semi-extended edge</bold>, and the corresponding <italic>k</italic>-molecule <italic>Î±</italic>Ë or <italic>Î²</italic>Ë as <bold>semi-extended </bold><italic>k</italic><bold>-molecule</bold>. If <inline-formula><mml:math id="M56" name="1471-2105-15-S9-S2-i54" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î±</mml:mi><mml:mi>Î²</mml:mi></mml:mrow><mml:mrow><mml:mi>x</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula> cannot be extended by any edge, this edge is called as <bold>full-extended edge</bold>, and <italic>k</italic>-molecule <inline-formula><mml:math id="M57" name="1471-2105-15-S9-S2-i55" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î±</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover></mml:math></inline-formula> and <inline-formula><mml:math id="M58" name="1471-2105-15-S9-S2-i56" overflow="scroll"><mml:mover accent="false"><mml:mrow><mml:mi>Î²</mml:mi></mml:mrow><mml:mo class="MathClass-op">^</mml:mo></mml:mover></mml:math></inline-formula> are <bold>full-extended </bold><italic>k</italic><bold>-molecules</bold>. In Figure <xref ref-type="fig" rid="F5">5</xref> and <xref ref-type="fig" rid="F6">6</xref>, semi-extended <italic>k</italic>-molecule and full-extended <italic>k</italic>-molecule are plotted with different colors (yellow for semi-extended <italic>k</italic>-molecules and blue for full-extended <italic>k</italic>-molecules), semi-extended edge and full-extended edge are drawn with different lines (broken line for semi-extended edges and real line for full-extended edges).</p>
        <p><bold>Property 1</bold>. If the set of full-extended edges in the MSG defined in equation 7 is denoted as <inline-formula><mml:math id="M59" name="1471-2105-15-S9-S2-i57" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">*</mml:mo></mml:mrow></mml:msubsup></mml:math></inline-formula>, then the set of labels on all edges in <inline-formula><mml:math id="M60" name="1471-2105-15-S9-S2-i58" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">*</mml:mo></mml:mrow></mml:msubsup></mml:math></inline-formula> can be written as,</p>
        <p>
          <disp-formula id="bmcM8">
            <label>(8)</label>
            <mml:math id="M61" name="1471-2105-15-S9-S2-i59" overflow="scroll">
              <mml:msubsup>
                <mml:mrow>
                  <mml:mi>L</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>S</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mo class="MathClass-bin">*</mml:mo>
                </mml:mrow>
              </mml:msubsup>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:mrow>
                <mml:mo class="MathClass-open">{</mml:mo>
                <mml:mrow>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mi>c</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>Î±</mml:mi>
                      <mml:mi>Î²</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>x</mml:mi>
                    </mml:mrow>
                  </mml:msubsup>
                  <mml:mstyle class="text">
                    <mml:mtext class="textsf">|</mml:mtext>
                  </mml:mstyle>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mi>e</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>Î±</mml:mi>
                      <mml:mi>Î²</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>x</mml:mi>
                    </mml:mrow>
                  </mml:msubsup>
                  <mml:mo class="MathClass-rel">=</mml:mo>
                  <mml:mrow>
                    <mml:mo class="MathClass-open">(</mml:mo>
                    <mml:mrow>
                      <mml:mi>Î±</mml:mi>
                      <mml:mo class="MathClass-punc">,</mml:mo>
                      <mml:mi>Î²</mml:mi>
                      <mml:mo class="MathClass-punc">,</mml:mo>
                      <mml:msub>
                        <mml:mrow>
                          <mml:mi>d</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>Î±</mml:mi>
                        </mml:mrow>
                      </mml:msub>
                      <mml:mo class="MathClass-punc">,</mml:mo>
                      <mml:msub>
                        <mml:mrow>
                          <mml:mi>d</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>Î²</mml:mi>
                        </mml:mrow>
                      </mml:msub>
                      <mml:mo class="MathClass-punc">,</mml:mo>
                      <mml:msubsup>
                        <mml:mrow>
                          <mml:mi>c</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>Î±</mml:mi>
                          <mml:mi>Î²</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>x</mml:mi>
                        </mml:mrow>
                      </mml:msubsup>
                    </mml:mrow>
                    <mml:mo class="MathClass-close">)</mml:mo>
                  </mml:mrow>
                  <mml:mo class="MathClass-punc">,</mml:mo>
                  <mml:mspace class="tmspace" width="2.77695pt"/>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mi>e</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>Î±</mml:mi>
                      <mml:mi>Î²</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>x</mml:mi>
                    </mml:mrow>
                  </mml:msubsup>
                  <mml:mo class="MathClass-rel">â</mml:mo>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mi>E</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>S</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mo class="MathClass-bin">*</mml:mo>
                    </mml:mrow>
                  </mml:msubsup>
                </mml:mrow>
                <mml:mo class="MathClass-close">}</mml:mo>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>and we have <inline-formula><mml:math id="M62" name="1471-2105-15-S9-S2-i60" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mo class="MathClass-bin">*</mml:mo></mml:mrow></mml:msubsup><mml:mo class="MathClass-rel">=</mml:mo><mml:mi>C</mml:mi></mml:math></inline-formula>, C is the set of contigs. The proof is presented in Appendix 1.</p>
        <p><bold>Property 2</bold>. Edge merging operation â over the multi-step bi-directed edge set <inline-formula><mml:math id="M63" name="1471-2105-15-S9-S2-i61" overflow="scroll"><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-bin">â¨</mml:mo><mml:mn>0</mml:mn></mml:math></inline-formula> is associative, and <italic>Q</italic>(<inline-formula><mml:math id="M64" name="1471-2105-15-S9-S2-i62" overflow="scroll"><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-bin">â¨</mml:mo><mml:mn>0</mml:mn></mml:math></inline-formula>,â) is a semigroup. The proof is presented in Appendix 1.</p>
        <p>The key property of 1-step bi-directed graph <inline-formula><mml:math id="M65" name="1471-2105-15-S9-S2-i63" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> is that each read <italic>s </italic>corresponds to a path starting from the first <italic>k</italic>-molecule of <italic>s </italic>and ending at the last <italic>k</italic>-molecule. Similarly, each chromosome can also be regarded as a path. However because of sequencing gaps, read errors, and repeats in the set of reads, chromosome will be broken into pieces, or contigs. Within a MSG, each contig corresponds to one full-extended edge in <inline-formula><mml:math id="M66" name="1471-2105-15-S9-S2-i64" overflow="scroll"><mml:msub><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>, and this has been presented and proved in Property 1. Property 2 ensures that the edge merging operation â over the set of multi-step bi-directed edges has formed a semi-group, and this connects the standard genome assembly (SGA) problem with edge merging operations in semi-group. According to the associativity law of semi-group, the final full-extended edges or contigs will be the same as long as all edges have been merged regardless of the merging order, thus these edge merging operations can be computed in parallel. Finally in order to reconstruct the genome with a large set of contigs, we need to merge all semi-extended edges into full-extended edges in semi-group <italic>Q</italic>(<inline-formula><mml:math id="M67" name="1471-2105-15-S9-S2-i65" overflow="scroll"><mml:msub><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-bin">â¨</mml:mo><mml:mn>0</mml:mn></mml:math></inline-formula>, â).</p>
      </sec>
    </sec>
    <sec>
      <title>SWAP computational framework</title>
      <p>The lock-computing-unlock mechanism of SWAP was first introduced in our previous work [<xref ref-type="bibr" rid="B24">24</xref>], where no implementation details and complexity analysis is given. In this section, we present the mathematical description of the problems which can be solved by SWAP, then a scalable computational framework for SWAP model and its programming interface are presented. Its complexity and scalability is analyzed in Appendix 3.</p>
      <p><bold>Definition 4: small world of operations</bold>. Semi-group <italic>SG</italic>(<italic>A, R</italic>) is defined on set <italic>A </italic>with an associative operation <italic>R </italic>: <italic>A Ã A </italic>â <italic>A. R</italic>(<italic>a<sub>i</sub>, a<sub>j</sub></italic>) is used to denote the associative operation on <italic>a<sub>i </sub></italic>and <italic>a<sub>j</sub>, a<sub>i</sub>, a<sub>j </sub></italic>â <italic>A</italic>. The elements <italic>a<sub>i </sub></italic>and <italic>a<sub>j</sub></italic>, together with the operation <italic>R</italic>(<italic>a<sub>i</sub>, a<sub>j </sub></italic>) are grouped as a <bold>small world </bold>of the operation R(<italic>a<sub>i</sub>, a<sub>j</sub></italic>). We denote this small world as [<italic>a<sub>i</sub>, a<sub>j</sub></italic>], and [<italic>a<sub>i</sub>, a<sub>j</sub></italic>] = {<italic>R</italic>(<italic>a<sub>i</sub>, a<sub>j</sub></italic>)<italic>, a<sub>i</sub>, a<sub>j</sub></italic>}.</p>
      <p><bold>Activity </bold><italic>ACT </italic>(<italic>A</italic>, Ï) are given on a semi-group <italic>SG</italic>(<italic>A, R</italic>) as the computational works performed by a graph algorithm, where operation set <italic>Ï </italic>is a subset of <italic>R</italic>.</p>
      <p>In real application, an operation corresponds to a basic operation of a given algorithm. For example, for MSG based genome assembly application, an operation can be defined as edge merging. For topological sorting, re-ordering a pair of vertices can be defined as an operation.</p>
      <p>For any two small worlds [<italic>a</italic><sub>1</sub><italic>, a</italic><sub>2</sub>], [<italic>b</italic><sub>1</sub><italic>, b</italic><sub>2</sub>], where <italic>a</italic><sub>1 </sub>â  <italic>b</italic><sub>1</sub><italic>, a</italic><sub>1 </sub><italic>I</italic>= <italic>b</italic><sub>2</sub><italic>, a</italic><sub>2 </sub>â  <italic>b</italic><sub>1</sub><italic>, a</italic><sub>2 </sub>â  <italic>b</italic><sub>2</sub>, the corresponding operations <italic>R</italic>(<italic>a</italic><sub>1</sub><italic>, a</italic><sub>2</sub>) and <italic>R</italic>(<italic>b</italic><sub>1</sub><italic>, b</italic><sub>2</sub>), can be computed independently, thus, there exists potential parallelism in computing activity induced from the semi-group <italic>SG</italic>(<italic>A, R</italic>). We use SWAP for such parallel computing. The basic schedule of SWAP is <bold>Lock</bold>-<bold>Computing</bold>-<bold>Unlock</bold>. For an operation <italic>R</italic>(<italic>a, b</italic>) in <italic>Ï</italic>, the three-steps of SWAP are listed below:</p>
      <p>1 <bold>Lock </bold>action is applied to lock <italic>R</italic>(<italic>a, b</italic>)'s small world [<italic>a, b</italic>].</p>
      <p>2 <bold>Computing </bold>is performed for operation <italic>R</italic>(<italic>a, b</italic>), and the values of <italic>a, b </italic>are updated accordingly. In MSG, this corresponds to merging two edges.</p>
      <p>3 <bold>Unlock </bold>action is triggered to release operation <italic>R</italic>(<italic>a, b</italic>)<italic>!s </italic>small world [<italic>a, b</italic>].</p>
      <p>In SWAP computational framework, all operations <italic>Ï </italic>in activity <italic>ACT </italic>(<italic>A, Ï</italic>) can be distributed among a group of processes. Each process needs to fetch related elements, for example <italic>a </italic>and <italic>b</italic>, to compute operation <italic>R</italic>(<italic>a, b</italic>). At the same time, this process also has to cooperate with other processes for sending or updating local variables. Each process should have two threads, one is SWAP thread, which performs computing tasks using the three-steps schedule of SWAP, and the other is service thread, which listens and replies to remote processes. In the implementation of our framework, we avoid multi-threads technology by using nonblocking communication and finite-state machine in each process to ensure its efficiency.</p>
      <p>The activity <italic>ACT </italic>(<italic>A, Ï</italic>) on set <italic>A </italic>with operations in <italic>Ï </italic>can be treated as a graph <italic>G</italic>(<italic>Ï, A</italic>) with <italic>Ï </italic>as its vertices and <italic>A </italic>as its edges. Adjacent list is used to store the graph <italic>G</italic>(<italic>Ï, A</italic>), and a hash function <italic>hashF un</italic>(<italic>x</italic>) is used to distribute the set <italic>Ï </italic>into <italic>p </italic>subset for <italic>p </italic>processes, where <inline-formula><mml:math id="M68" name="1471-2105-15-S9-S2-i66" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:mstyle displaystyle="true"><mml:munderover><mml:mrow><mml:mo class="MathClass-op"> â</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover></mml:mstyle><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>, and <italic>A<sub>i </sub></italic>is associated with <italic>Ï<sub>i</sub></italic>. Note that <inline-formula><mml:math id="M69" name="1471-2105-15-S9-S2-i67" overflow="scroll"><mml:mi>A</mml:mi><mml:mi>C</mml:mi><mml:mi>T</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>A</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>Ï</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-rel">=</mml:mo><mml:mstyle displaystyle="true"><mml:munderover><mml:mrow><mml:mo class="MathClass-op"> â</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover></mml:mstyle><mml:mi>A</mml:mi><mml:mi>C</mml:mi><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>, which is illustrated in Figure <xref ref-type="fig" rid="F7">7</xref>. In Appendix 2, the pseudocodes of SWAP thread and service thread are demonstrated in Algorithm 1 and Algorithm 2, respectively.</p>
      <fig id="F7" position="float">
        <label>Figure 7</label>
        <caption>
          <p><bold>Illustration of the distribution of an activity ACT (A, Ï) on a cluster using SWAP computational framework</bold>. Operation set Ï is distributed over p processors, here <inline-formula><mml:math id="M70" name="1471-2105-15-S9-S2-i83" overflow="scroll"><mml:mi>Ï</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:mstyle displaystyle="true"><mml:munderover><mml:mrow><mml:mo class="MathClass-op"> â</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover></mml:mstyle><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mstyle displaystyle="true"><mml:munderover><mml:mrow><mml:mo class="MathClass-op"> â</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover></mml:mstyle><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-rel">=</mml:mo><mml:mn>0</mml:mn></mml:math></inline-formula> and <inline-formula><mml:math id="M71" name="1471-2105-15-S9-S2-i84" overflow="scroll"><mml:mi>A</mml:mi><mml:mi>C</mml:mi><mml:mi>T</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>A</mml:mi><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>Ï</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-rel">=</mml:mo><mml:mstyle displaystyle="true"><mml:munderover><mml:mrow><mml:mo class="MathClass-op"> â</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mi>p</mml:mi><mml:mo class="MathClass-bin">-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:munderover></mml:mstyle><mml:mi>A</mml:mi><mml:mi>C</mml:mi><mml:msub><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>A</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msub><mml:mrow><mml:mi>Ï</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
        </caption>
        <graphic xlink:href="1471-2105-15-S9-S2-7"/>
      </fig>
      <p>Algorithm 1 describes the three-steps of SWAP computational framework, and Algorithm 2 on remote processers can cooperate with Algorithm 1 for running this schedule. The message functions, internal functions, and user-defined functions in Algorithm 1 and Algorithm 2 are listed in Table <xref ref-type="table" rid="T2">2</xref>, where user-defined functions can be redefined for user-specific computational problems.</p>
      <table-wrap id="T2" position="float">
        <label>Table 2</label>
        <caption>
          <p>Description of message functions, internal functions, and user-defined functions used in Algorithm 1 and 2.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left">Class</th>
              <th align="left">Function name</th>
              <th align="left">Function description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Message functions</td>
              <td align="left">Msg Lock(<italic>a, p</italic>)</td>
              <td align="left">Lock <italic>a </italic>in process <italic>p</italic></td>
            </tr>
            <tr>
              <td/>
              <td align="left">Msg Unlock(<italic>a, p</italic>)</td>
              <td align="left">Unlock <italic>a </italic>in process <italic>p</italic></td>
            </tr>
            <tr>
              <td/>
              <td align="left">Msg Read(<italic>a, p</italic>)</td>
              <td align="left">Fetch associated values of <italic>a</italic></td>
            </tr>
            <tr>
              <td/>
              <td align="left">Msg Write(<italic>a, newa, p</italic>)</td>
              <td align="left">Update associated values of <italic>a </italic>with <italic>newa</italic></td>
            </tr>
            <tr>
              <td/>
              <td align="left">Msg Locksuccess(<italic>a, R</italic>(<italic>a, b</italic>), <italic>p</italic>)</td>
              <td align="left">Send Locksuccess Message back to <italic>R</italic>(<italic>a, b</italic>)</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Msg Lockfailed(<italic>a, R</italic>(<italic>a, b</italic>), <italic>p</italic>)</td>
              <td align="left">Send Lockfailed Message back to <italic>R</italic>(<italic>a, b</italic>)</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Msg ReadBack(<italic>a, R</italic>(<italic>a, b</italic>), <italic>p</italic>)</td>
              <td align="left">Send associated value of <italic>a </italic>back to <italic>R</italic>(<italic>a, b</italic>)</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Msg End()</td>
              <td align="left">Command to stop the service thread</td>
            </tr>
            <tr>
              <td align="left">Internal functions</td>
              <td align="left">proc(<italic>a</italic>)</td>
              <td align="left">Get process ID of <italic>a</italic></td>
            </tr>
            <tr>
              <td/>
              <td align="left">trylock(<italic>a</italic>)</td>
              <td align="left">Lock a</td>
            </tr>
            <tr>
              <td/>
              <td align="left">unlock(<italic>a</italic>)</td>
              <td align="left">Unlock <italic>a</italic></td>
            </tr>
            <tr>
              <td align="left">User-defined functions</td>
              <td align="left">GetSmallWorld( <italic>R</italic>(<italic>a, b</italic>) )</td>
              <td align="left">Get small world [<italic>a, b</italic>] from operation <italic>R</italic>(<italic>a, b</italic>)</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Operation(<italic>a,b</italic>)</td>
              <td align="left">Compute the operation <italic>R</italic>(<italic>a, b</italic>)</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>Similar to CSMA/CA in 802.11 protocol [<xref ref-type="bibr" rid="B27">27</xref>], Algorithm 1 adapts random back-off algorithm to avoid lock collision. A variety of backoff algorithms can be used, without loss of generality, binary exponential backoff [<xref ref-type="bibr" rid="B27">27</xref>] is used in SWAP thread. Note that all collided operations in <italic>Ï<sub>i </sub></italic>share only one binary backoff, so the cost can be ignored as long as the number of relations in <italic>Ï<sub>i </sub></italic>is huge.</p>
      <p>The complexity and scalability analysis for SWAP computational framework are presented in Appendix 3. When the number of processes is less than the number of operations in <italic>Ï</italic>, which is true for most cases, equation (<bold>??</bold>) shows that SWAP computational framework can linearly scale up with the increasing number of cores. When the number of processes is larger than the number of operations, according to equation (<bold>??</bold>) the running time will be dominated by the communication round, which is bounded by <italic>log</italic>(<italic>d<sub>max</sub></italic>), where <italic>d<sub>max </sub></italic>is the diameter of graph <italic>G</italic>(<italic>Ï, A</italic>).</p>
    </sec>
    <sec>
      <title>Implementation of SWAP-Assembler</title>
      <p>Based on MSG and SWAP computational framework, SWAP-Assembler consists with five steps, including input parallelization, graph construction, graph cleaning, graph reduction, and contig extension. Complexity analysis of SWAP-Assembler are presented in the end of this section.</p>
      <sec>
        <title>Input parallelization</title>
        <p>As the size of data generated by next generation sequencing technology generally has hundreds of Giga bytes, loading these data with one process costs hours to finish [<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B16">16</xref>]. Similar to Ray [<xref ref-type="bibr" rid="B15">15</xref>] and YAGA [<xref ref-type="bibr" rid="B18">18</xref>], we use input parallelization to speedup the loading process. Given input reads with <italic>n </italic>nucleotides from a genome of size <italic>g</italic>, we divide the input file equally into <italic>p </italic>virtual data block, <italic>p </italic>is the number of processes. Each process reads the data located in its virtual data block only once. The computational complexity of this step is bounded by <inline-formula><mml:math id="M72" name="1471-2105-15-S9-S2-i68" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>. For E.coli dataset of 4.4G bytes, SWAP-Assembler loads the data into memory in 4 seconds with 64 cores while YAGA uses 516.5 seconds [<xref ref-type="bibr" rid="B18">18</xref>], and for Yanhuang dataset SWAP-Assembler loads the data in 10 minutes while Ray costs 2 hour and 42 minutes.</p>
      </sec>
      <sec>
        <title>Graph construction</title>
        <p>This step aims to construct a 1-step bi-directed graph <inline-formula><mml:math id="M73" name="1471-2105-15-S9-S2-i69" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>G</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">{</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>V</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-punc">,</mml:mo><mml:msubsup><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">}</mml:mo></mml:mrow></mml:math></inline-formula>, where <italic>V<sub>s </sub></italic>and <inline-formula><mml:math id="M74" name="1471-2105-15-S9-S2-i70" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>E</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mn>1</mml:mn></mml:mrow></mml:msubsup></mml:math></inline-formula> are <italic>k</italic>-molecule set and 1-step bi-directed edge set. In this step, input sequences are broken into overlapping <italic>k</italic>-molecules by sliding a window of length <italic>k </italic>along the input sequence. A <italic>k</italic>-molecule can have up to eight edges, and each edge corresponds to a possible one-base extension, {<italic>A, C, G, T</italic>} in either direction. The adjacent <italic>k</italic>-molecule can be easily obtained by adding the base extension to the source <italic>k</italic>-molecule. The generated graph has <italic>O</italic>(<italic>n</italic>) <italic>k</italic>-molecules and <italic>O</italic>(<italic>n</italic>) bi-directed edges distributed among <italic>p </italic>processors. Graph construction of 1-step bi-directed graph can be achieved in <inline-formula><mml:math id="M75" name="1471-2105-15-S9-S2-i71" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> parallel computing time, and <inline-formula><mml:math id="M76" name="1471-2105-15-S9-S2-i72" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> parallel communication volume.</p>
        <p>An improvement to our previous work [<xref ref-type="bibr" rid="B24">24</xref>] is that the time usage on graph construction is overlapped with the previous step. As CPU computation and network communication can be performed when only partial data are loaded from the first step, they can be overlapped and combined as a pipeline. Computation and communication time used in this step are hid behind the time used on disk I/O in previous step.</p>
      </sec>
      <sec>
        <title>Graph cleaning</title>
        <p>This step cleans the erroneous <italic>k</italic>-molecules, based on the assumption that the erroneous <italic>k</italic>-mers have lower frequency compared with the correct ones [<xref ref-type="bibr" rid="B19">19</xref>]. Assuming that the errors are random, we identify the <italic>k</italic>-molecules with low frequency as erroneous <italic>k</italic>-molecules, and delete them from the vertex set. SWAP-Assembler also removes all edges with low frequency in the 1-step bi-directed graph, and the <italic>k</italic>-molecules without any attached edges. The frequency threshold can be set by users, or our method will calculate it automatically based on the average coverage of <italic>k</italic>-molecules. In our case, we prefer 3 ~ 10% of the average coverage as the threshold depending on the species.</p>
        <p>All the operations in this step can be finished in <inline-formula><mml:math id="M77" name="1471-2105-15-S9-S2-i73" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> parallel computation time, and about 60 ~ 80% of the <italic>k</italic>-molecules can be removed from our graph.</p>
      </sec>
      <sec>
        <title>Graph reduction</title>
        <p>In order to recover contigs, all semi-extended edges in MSG need to be merged into full-extended edges. This task can be defined as edge merging computing activity and denoted as <italic>ACT </italic>(<inline-formula><mml:math id="M78" name="1471-2105-15-S9-S2-i74" overflow="scroll"><mml:mi>E</mml:mi><mml:mi>s</mml:mi><mml:mo class="MathClass-bin">â¨</mml:mo><mml:mn>0</mml:mn><mml:mo class="MathClass-punc">,</mml:mo><mml:mi>Ï</mml:mi></mml:math></inline-formula>), where the edge merging operation set <italic>Ï </italic>is,</p>
        <p>
          <disp-formula id="bmcM9">
            <label>(9)</label>
            <mml:math id="M79" name="1471-2105-15-S9-S2-i75" overflow="scroll">
              <mml:mi>Ï</mml:mi>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:mrow>
                <mml:mo class="MathClass-open">{</mml:mo>
                <mml:mrow>
                  <mml:mrow>
                    <mml:mo class="MathClass-open">(</mml:mo>
                    <mml:mrow>
                      <mml:msubsup>
                        <mml:mrow>
                          <mml:mi>e</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>Î²</mml:mi>
                          <mml:mi>Î±</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>u</mml:mi>
                        </mml:mrow>
                      </mml:msubsup>
                      <mml:mo class="MathClass-punc">,</mml:mo>
                      <mml:msubsup>
                        <mml:mrow>
                          <mml:mi>e</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>Î±</mml:mi>
                          <mml:mi>Î³</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>v</mml:mi>
                        </mml:mrow>
                      </mml:msubsup>
                    </mml:mrow>
                    <mml:mo class="MathClass-close">)</mml:mo>
                  </mml:mrow>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mo>|</mml:mo>
                      <mml:mi>e</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>Î²</mml:mi>
                      <mml:mi>Î±</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>v</mml:mi>
                    </mml:mrow>
                  </mml:msubsup>
                  <mml:mo>â</mml:mo>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mi>e</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>Î±</mml:mi>
                      <mml:mi>Î³</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>v</mml:mi>
                    </mml:mrow>
                  </mml:msubsup>
                  <mml:mo class="MathClass-rel">â </mml:mo>
                  <mml:mn>0</mml:mn>
                  <mml:mo class="MathClass-punc">,</mml:mo>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mi>e</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>Î²</mml:mi>
                      <mml:mi>Î±</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>u</mml:mi>
                    </mml:mrow>
                  </mml:msubsup>
                  <mml:mo class="MathClass-punc">,</mml:mo>
                  <mml:msubsup>
                    <mml:mrow>
                      <mml:mi>e</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>Î±</mml:mi>
                      <mml:mi>Î³</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>v</mml:mi>
                    </mml:mrow>
                  </mml:msubsup>
                  <mml:mo class="MathClass-rel">â</mml:mo>
                  <mml:msub>
                    <mml:mrow>
                      <mml:mi>E</mml:mi>
                    </mml:mrow>
                    <mml:mrow>
                      <mml:mi>s</mml:mi>
                    </mml:mrow>
                  </mml:msub>
                </mml:mrow>
                <mml:mo class="MathClass-close">}</mml:mo>
              </mml:mrow>
            </mml:math>
          </disp-formula>
        </p>
        <p>in which <inline-formula><mml:math id="M80" name="1471-2105-15-S9-S2-i76" overflow="scroll"><mml:msubsup><mml:mrow><mml:mi>e</mml:mi></mml:mrow><mml:mrow><mml:mi>Î²</mml:mi><mml:mi>Î±</mml:mi></mml:mrow><mml:mrow><mml:mi>u</mml:mi></mml:mrow></mml:msubsup></mml:math></inline-formula> indicates an <italic>u</italic>-step bi-directed edge connecting two vertices <italic>Î² </italic>and <italic>Î±</italic>. All semi-extended edges of <italic>E<sub>s </sub></italic>will be merged into full-extended edges finally.</p>
        <p>In order to compute edge merging operations in <italic>Ï<sub>i </sub></italic>using our SWAP computational framework, two user-defined functions in Table <xref ref-type="table" rid="T2">2</xref> are described as Algorithm 3 and Algorithm 4 in Appendix 2. For each process, the edge merging step has a computing complexity of <inline-formula><mml:math id="M81" name="1471-2105-15-S9-S2-i77" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>, communication volume of <inline-formula><mml:math id="M82" name="1471-2105-15-S9-S2-i78" overflow="scroll"><mml:mfenced close=")" open="("><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi><mml:mspace class="tmspace" width="2.77695pt"/><mml:mstyle class="text"><mml:mtext class="textsf">log</mml:mtext></mml:mstyle><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mstyle class="text"><mml:mtext class="textsf">log</mml:mtext></mml:mstyle><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:mfenced></mml:math></inline-formula>, and communication round of <italic>O</italic>(log(log(<italic>g</italic>))). The proposed methods has much less computation round of <italic>O</italic>(<italic>loglog</italic>(<italic>g</italic>)) than YAGA with <italic>O</italic>(<italic>log</italic>(<italic>n</italic>)2) [<xref ref-type="bibr" rid="B18">18</xref>,<xref ref-type="bibr" rid="B19">19</xref>]. The detailed complexity analysis is provided in Appendix 4.</p>
      </sec>
      <sec>
        <title>Contig extension</title>
        <p>In order to extend the length of contigs while maintaining as less errors as possible, three types of special edges and two type of special vertices are processed in our method.</p>
        <p>The first type of special edge is tip edge, which is connected with an terminal vertex and has a length less than <italic>k</italic>, where <italic>k </italic>is the <italic>k</italic>-mer size. These tip edges are deleted from the graph. The second type is self-loop edge, whose beginning vertex and terminal vertex are same. If this vertex has another edge which can be merged with this self-loop edge, they will be merged, otherwise it will be removed. The last type is multiple edge, whose two vertices are directly connected by two different edges. In this case the edge with lower coverage will be removed.</p>
        <p>In addition, processing two special vertices can help further improve the quality of contigs. The first is cross vertex shown in Figure <xref ref-type="fig" rid="F8">8</xref>-(e), which has more than two edges on both sides. For each cross vertex, we sort all its edges according to their coverage. When the coverage difference between the two edges is less than 20%, then these two edges are merged as long as they can be merged regardless of other edges. The second vertex is virtual cross vertex shown in Figure <xref ref-type="fig" rid="F8">8</xref>-(f). We treat edge <italic>e</italic><sub>0 </sub>with its two end vertices as one virtual vertex <italic>A* </italic>and <italic>A* </italic>has more than two edges on both sides. All its edges are ranked according to their coverage. When the coverage difference between two edges on different nodes is less than 20%, these two edges will be merged with the edge <italic>e</italic><sub>0 </sub>regardless of other edges. By processing these two special vertices using the heuristic method, we can partly resolve some of the repeats satisfying our strict conditions at the cost of introducing errors and mismatches into contigs occasionally.</p>
        <fig id="F8" position="float">
          <label>Figure 8</label>
          <caption>
            <p><bold>Two type of special vertex defined in contig extension step</bold>.</p>
          </caption>
          <graphic xlink:href="1471-2105-15-S9-S2-8"/>
        </fig>
        <p>The graph reduction step and contig extension step need to be iterated in a constant number of rounds to extend full-extended edges or stop when no special edges and special vertices can be found. The number of errors and mismatches introduced in contigs can be controlled by the percentage of special edges and vertices processed in contig extension stage. In our method, we process all edges and vertices aiming at obtaining longer contigs. The computing complexity for contig extension step will be bounded by <inline-formula><mml:math id="M83" name="1471-2105-15-S9-S2-i79" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula>. As the graph shrinks greatly after graph reduction and contig extension step, all the remaining edges are treated as contigs. The complexity of SWAP-Assembler is dominated by graph reduction step, which is bounded by <inline-formula><mml:math id="M84" name="1471-2105-15-S9-S2-i80" overflow="scroll"><mml:mi>O</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:math></inline-formula> parallel computing time, <inline-formula><mml:math id="M85" name="1471-2105-15-S9-S2-i81" overflow="scroll"><mml:mi>O</mml:mi><mml:mfenced close=")" open="("><mml:mrow><mml:mfrac><mml:mrow><mml:mi>n</mml:mi><mml:mo class="MathClass-bin">â</mml:mo><mml:mstyle class="text"><mml:mtext class="textsf">log</mml:mtext></mml:mstyle><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mstyle class="text"><mml:mtext class="textsf">log</mml:mtext></mml:mstyle><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>g</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfrac></mml:mrow></mml:mfenced></mml:math></inline-formula> communication volume, and <italic>O</italic>(log(log(<italic>n</italic>))) communication round. According to complexity analysis results of graph reduction step in equation (<bold>??</bold>), when the number of processors is less than the length of longest path <italic>d<sub>max</sub></italic>, the speedup of SWAP-Assembler can be calculated as follows,</p>
        <p>
          <disp-formula id="bmcM10">
            <label>(10)</label>
            <mml:math id="M86" name="1471-2105-15-S9-S2-i82" overflow="scroll">
              <mml:mi>S</mml:mi>
              <mml:mi>p</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>e</mml:mi>
              <mml:mi>d</mml:mi>
              <mml:mi>u</mml:mi>
              <mml:mi>p</mml:mi>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:mfrac>
                <mml:mrow>
                  <mml:mi>n</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>R</mml:mi>
                  <mml:mi>u</mml:mi>
                  <mml:mi>n</mml:mi>
                  <mml:mspace class="tmspace" width="2.77695pt"/>
                  <mml:mi>T</mml:mi>
                  <mml:mi>i</mml:mi>
                  <mml:mi>m</mml:mi>
                  <mml:mi>e</mml:mi>
                </mml:mrow>
              </mml:mfrac>
              <mml:mo class="MathClass-rel">=</mml:mo>
              <mml:mfrac>
                <mml:mrow>
                  <mml:mi>p</mml:mi>
                </mml:mrow>
                <mml:mrow>
                  <mml:mi>b</mml:mi>
                  <mml:mi>L</mml:mi>
                  <mml:mspace class="tmspace" width="2.77695pt"/>
                  <mml:mstyle class="text">
                    <mml:mtext class="textsf">log</mml:mtext>
                  </mml:mstyle>
                  <mml:mrow>
                    <mml:mo class="MathClass-open">(</mml:mo>
                    <mml:mrow>
                      <mml:mn>3</mml:mn>
                      <mml:mi>c</mml:mi>
                      <mml:mi>q</mml:mi>
                      <mml:mo class="MathClass-bin">â</mml:mo>
                      <mml:mstyle class="text">
                        <mml:mtext class="textsf">log</mml:mtext>
                      </mml:mstyle>
                      <mml:mrow>
                        <mml:mo class="MathClass-open">(</mml:mo>
                        <mml:mrow>
                          <mml:mi>g</mml:mi>
                        </mml:mrow>
                        <mml:mo class="MathClass-close">)</mml:mo>
                      </mml:mrow>
                    </mml:mrow>
                    <mml:mo class="MathClass-close">)</mml:mo>
                  </mml:mrow>
                  <mml:mo class="MathClass-bin">+</mml:mo>
                  <mml:mi>r</mml:mi>
                  <mml:mi>S</mml:mi>
                  <mml:mo class="MathClass-bin">+</mml:mo>
                  <mml:mn>1</mml:mn>
                </mml:mrow>
              </mml:mfrac>
            </mml:math>
          </disp-formula>
        </p>
        <p>Equation (10) indicates that, for a given genome with fixed length <italic>g</italic>, the speedup is proportional to the number of processors; while for a given number of processors <italic>p</italic>, the speedup is inversely proportional to logarithm of the logarithm of the genome size <italic>g</italic>. However when the number of processors is larger than the length of longest path <italic>d<sub>max</sub></italic>, the running time will be bounded by the number of communication round, which is presented in equation (<bold>??</bold>) in Appendix 4. In either situation, we can conclude that the scalability or the optimal number of cores will increase with larger genomes.</p>
      </sec>
    </sec>
  </sec>
  <sec sec-type="results">
    <title>Results</title>
    <p>SWAP-Assembler is a highly scalable and efficient genome assembler using multi-step bi-directed graph (MSG). In this section, we perform several computational experiments to evaluate the scalability and assembly quality of SWAP-Assembler. In the experiments, TianHe 1A [<xref ref-type="bibr" rid="B28">28</xref>] is used as the high performance cluster. 512 computing nodes are allocated for the experiment with 12 cores and 24GB memory on each node. By comparing with several state-of-the-art sequential and parallel assemblers, such as Velvet [<xref ref-type="bibr" rid="B22">22</xref>], SOAPdenovo [<xref ref-type="bibr" rid="B29">29</xref>], Pasha [<xref ref-type="bibr" rid="B16">16</xref>], ABySS [<xref ref-type="bibr" rid="B14">14</xref>] and Ray [<xref ref-type="bibr" rid="B15">15</xref>], we evaluate the scalability, quality of contigs in terms of N50, error rate and coverage for SWAP-Assembler.</p>
    <sec>
      <title>Experimental data</title>
      <p>Five datasets in Table <xref ref-type="table" rid="T3">3</xref> are selected for the experiments. <italic>S. aureus, R. sphaeroides </italic>and <italic>human chromosome 14 </italic>(Hg14) datasets are taken from GAGE project [<xref ref-type="bibr" rid="B30">30</xref>], Fish dataset is downloaded from the Assemblathon 2 [<xref ref-type="bibr" rid="B31">31</xref>,<xref ref-type="bibr" rid="B32">32</xref>], and Yanhuang dataset [<xref ref-type="bibr" rid="B33">33</xref>] is provided by BGI [<xref ref-type="bibr" rid="B34">34</xref>].</p>
      <table-wrap id="T3" position="float">
        <label>Table 3</label>
        <caption>
          <p>Details about the five short read datasets.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left">-</th>
              <th align="left">
                <italic>S. aureus</italic>
              </th>
              <th align="left">
                <italic>R. sphaeroides</italic>
              </th>
              <th align="left">Hg14</th>
              <th align="left">Fish</th>
              <th align="left">YanHuang</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Fastq data size (Gbytes)</td>
              <td align="right">0.684</td>
              <td align="right">0.906</td>
              <td align="right">14.2</td>
              <td align="right">425</td>
              <td align="right">495</td>
            </tr>
            <tr>
              <td align="left">Read length (bp)</td>
              <td align="right">37, 101</td>
              <td align="right">101</td>
              <td align="right">101</td>
              <td align="right">101</td>
              <td align="right">80-120</td>
            </tr>
            <tr>
              <td align="left">No. of reads (million)</td>
              <td align="right">4.8</td>
              <td align="right">4.1</td>
              <td align="right">62</td>
              <td align="right">1910</td>
              <td align="right">1859</td>
            </tr>
            <tr>
              <td align="left">Coverage</td>
              <td align="right">90X</td>
              <td align="right">90X</td>
              <td align="right">70X</td>
              <td align="right">192X</td>
              <td align="right">57X</td>
            </tr>
            <tr>
              <td align="left">Reference size (Mbp)</td>
              <td align="right">2.90</td>
              <td align="right">4.60</td>
              <td align="right">88.6</td>
              <td align="right">1000</td>
              <td align="right">3000</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </sec>
    <sec>
      <title>Scalability evaluation</title>
      <p>The scalability of our method is first evaluated on a share memory machine with 32 cores and 1T memory. Five other assemblers including Velvet, SOAPdenovo, Pasha, ABySS and Ray, are included for comparison. Only the first three small datasets in Table <xref ref-type="table" rid="T3">3</xref> are used in this test due to the memory limitation. The results are presented in Table <xref ref-type="table" rid="T4">4</xref>, and the corresponding figures are plotted in Figure <xref ref-type="fig" rid="F9">9</xref>. According to Table <xref ref-type="table" rid="T4">4</xref>, SWAP-Assembler has the lowest running time on all three datasets for 16 cores and 32 cores, and SOAPdenovo has the lowest time usage on 4 cores and 8 cores. According to Figure <xref ref-type="fig" rid="F9">9</xref>, SOAPdenovo, Ray and SWAP-Assembler can scale to 32 cores, however Pasha and ABySS can only scale to 16 cores. Figure <xref ref-type="fig" rid="F9">9</xref> also shows that Ray and SWAP-Assembler can achieve nearly linear speedup and SWAP-Assembler is more efficient than Ray.</p>
      <table-wrap id="T4" position="float">
        <label>Table 4</label>
        <caption>
          <p>Time usage results of three small datasets on a share memory machine with 32 cores.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left">Assembler</th>
              <th align="left">Cores</th>
              <th align="left">
                <italic>S. aureus</italic>
              </th>
              <th align="left">
                <italic>R. sphaeroides</italic>
              </th>
              <th align="left">Hg14</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Velvet</td>
              <td align="left">1</td>
              <td align="left">159</td>
              <td align="left">265</td>
              <td align="left">5432</td>
            </tr>
            <tr>
              <td align="left">SOAPdenovo</td>
              <td align="left">4</td>
              <td align="left">44</td>
              <td align="left">71</td>
              <td align="left">1004</td>
            </tr>
            <tr>
              <td/>
              <td align="left">8</td>
              <td align="left">44</td>
              <td align="left">69</td>
              <td align="left">933</td>
            </tr>
            <tr>
              <td/>
              <td align="left">16</td>
              <td align="left">36</td>
              <td align="left">57</td>
              <td align="left">742</td>
            </tr>
            <tr>
              <td/>
              <td align="left">32</td>
              <td align="left">38</td>
              <td align="left">45</td>
              <td align="left">584</td>
            </tr>
            <tr>
              <td align="left">Pasha</td>
              <td align="left">4</td>
              <td align="left">215</td>
              <td align="left">342</td>
              <td align="left">5494</td>
            </tr>
            <tr>
              <td/>
              <td align="left">8</td>
              <td align="left">159</td>
              <td align="left">255</td>
              <td align="left">3938</td>
            </tr>
            <tr>
              <td/>
              <td align="left">16</td>
              <td align="left">147</td>
              <td align="left">255</td>
              <td align="left">3436</td>
            </tr>
            <tr>
              <td/>
              <td align="left">32</td>
              <td align="left">183</td>
              <td align="left">289</td>
              <td align="left">4852</td>
            </tr>
            <tr>
              <td align="left">ABySS</td>
              <td align="left">4</td>
              <td align="left">174</td>
              <td align="left">302</td>
              <td align="left">4138</td>
            </tr>
            <tr>
              <td/>
              <td align="left">8</td>
              <td align="left">146</td>
              <td align="left">234</td>
              <td align="left">3079</td>
            </tr>
            <tr>
              <td/>
              <td align="left">16</td>
              <td align="left">139</td>
              <td align="left">226</td>
              <td align="left">2588</td>
            </tr>
            <tr>
              <td/>
              <td align="left">32</td>
              <td align="left">147</td>
              <td align="left">235</td>
              <td align="left">2596</td>
            </tr>
            <tr>
              <td align="left">Ray</td>
              <td align="left">4</td>
              <td align="left">1247</td>
              <td align="left">1778</td>
              <td align="left">24145</td>
            </tr>
            <tr>
              <td/>
              <td align="left">8</td>
              <td align="left">707</td>
              <td align="left">1050</td>
              <td align="left">13116</td>
            </tr>
            <tr>
              <td/>
              <td align="left">16</td>
              <td align="left">454</td>
              <td align="left">688</td>
              <td align="left">7222</td>
            </tr>
            <tr>
              <td/>
              <td align="left">32</td>
              <td align="left">351</td>
              <td align="left">467</td>
              <td align="left">4235</td>
            </tr>
            <tr>
              <td align="left">SWAP-Assembler</td>
              <td align="left">4</td>
              <td align="left">81</td>
              <td align="left">129</td>
              <td align="left">2167</td>
            </tr>
            <tr>
              <td/>
              <td align="left">8</td>
              <td align="left">42</td>
              <td align="left">69</td>
              <td align="left">1187</td>
            </tr>
            <tr>
              <td/>
              <td align="left">16</td>
              <td align="left">24</td>
              <td align="left">38</td>
              <td align="left">685</td>
            </tr>
            <tr>
              <td/>
              <td align="left">32</td>
              <td align="left">13</td>
              <td align="left">21</td>
              <td align="left">408</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>(Time unit: seconds)</p>
        </table-wrap-foot>
      </table-wrap>
      <fig id="F9" position="float">
        <label>Figure 9</label>
        <caption>
          <p><bold>Time usage comparison on a share memory machine for three small datasets (Time unit: seconds in logarithmic scale)</bold>. In this test, the length of k-mer for all assemblers is set to be 31 and the k-mers cutoff threshold is set to be 3. For the three datasets, the sequencing data filtered by ALLPATH-LG is their input data. The time usage is recorded until the contig is generated. The horizontal axis is marked with the name of assemblers and the number of cores used.</p>
        </caption>
        <graphic xlink:href="1471-2105-15-S9-S2-9"/>
      </fig>
      <p>The time usage for each step of SWAP-Assembler on the share memory machine is also presented in Table <xref ref-type="table" rid="T5">5</xref> and Figure <xref ref-type="fig" rid="F10">10</xref>. The input parallelization step is overlapped with graph construction, thus we treat these two steps as one in this experiment. According to Table <xref ref-type="table" rid="T5">5</xref>, for all three datasets the most time-consuming step is graph reduction, and the fastest steps are graph cleaning and contig extension. Figure <xref ref-type="fig" rid="F10">10</xref> shows that input parallelization &amp; graph construction, graph cleaning and graph reduction can achieve nearly linear speedup when the number of cores increases from 4 to 32 cores, whereas the contig extension step does not benefit as much as other steps.</p>
      <table-wrap id="T5" position="float">
        <label>Table 5</label>
        <caption>
          <p>Time usage details of SWAP-Assembler's five steps on processing three small datasets using a share memory machine with 32 cores.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th/>
              <th align="left">Steps</th>
              <th align="left">4 cores</th>
              <th align="left">8 cores</th>
              <th align="left">16 cores</th>
              <th align="left">32 cores</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">
                <italic>S. aureus</italic>
              </td>
              <td align="left">input parallelization &amp; graph construction</td>
              <td align="right">31.29</td>
              <td align="right">16.32</td>
              <td align="right">9.55</td>
              <td align="right">4.91</td>
            </tr>
            <tr>
              <td/>
              <td align="left">graph cleaning</td>
              <td align="right">2.14</td>
              <td align="right">1.07</td>
              <td align="right">0.6</td>
              <td align="right">0.3</td>
            </tr>
            <tr>
              <td/>
              <td align="left">graph reduction</td>
              <td align="right">45.75</td>
              <td align="right">24.2</td>
              <td align="right">13.23</td>
              <td align="right">7.67</td>
            </tr>
            <tr>
              <td/>
              <td align="left">contig extension</td>
              <td align="right">1.54</td>
              <td align="right">0.89</td>
              <td align="right">0.6</td>
              <td align="right">0.52</td>
            </tr>
            <tr>
              <td align="left">
                <italic>R. sphaeroides</italic>
              </td>
              <td align="left">input parallelization &amp; graph construction</td>
              <td align="right">49.19</td>
              <td align="right">26.42</td>
              <td align="right">14.88</td>
              <td align="right">7.79</td>
            </tr>
            <tr>
              <td/>
              <td align="left">graph cleaning</td>
              <td align="right">3.63</td>
              <td align="right">1.99</td>
              <td align="right">0.97</td>
              <td align="right">0.54</td>
            </tr>
            <tr>
              <td/>
              <td align="left">graph reduction</td>
              <td align="right">73.78</td>
              <td align="right">39.31</td>
              <td align="right">20.83</td>
              <td align="right">12.19</td>
            </tr>
            <tr>
              <td/>
              <td align="left">contig extension</td>
              <td align="right">2.37</td>
              <td align="right">1.33</td>
              <td align="right">0.85</td>
              <td align="right">0.64</td>
            </tr>
            <tr>
              <td align="left">Hg14</td>
              <td align="left">input parallelization &amp; graph construction</td>
              <td align="right">628</td>
              <td align="right">327</td>
              <td align="right">184</td>
              <td align="right">98</td>
            </tr>
            <tr>
              <td/>
              <td align="left">graph cleaning</td>
              <td align="right">71</td>
              <td align="right">37</td>
              <td align="right">19</td>
              <td align="right">10</td>
            </tr>
            <tr>
              <td/>
              <td align="left">graph reduction</td>
              <td align="right">1328</td>
              <td align="right">734</td>
              <td align="right">413</td>
              <td align="right">242</td>
            </tr>
            <tr>
              <td/>
              <td align="left">contig extension</td>
              <td align="right">140</td>
              <td align="right">89</td>
              <td align="right">69</td>
              <td align="right">58</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>(Time unit: seconds)</p>
        </table-wrap-foot>
      </table-wrap>
      <fig id="F10" position="float">
        <label>Figure 10</label>
        <caption>
          <p><bold>Time usage details of SWAP-Assembler's five steps on processing three small datasets using a share memory machine with 32 cores (Time unit: seconds in logarithmic scale)</bold>. In this test, the length of k-mer for SWAP-Assembler is set to be 31 and the k-mers cutoff threshold is set to be 3. For the three datasets, the sequencing data filtered by ALLPATH-LG is their input data. The horizontal axis is marked with the name of datasets and the number of cores used.</p>
        </caption>
        <graphic xlink:href="1471-2105-15-S9-S2-10"/>
      </fig>
      <p>To further evaluate the scalability of SWAP-Assembler from 64 to 4096 cores on TianHe 1A, we have compared our method with two parallel assemblers, ABySS and Ray, and the results are included in Table <xref ref-type="table" rid="T6">6</xref>. According to Table <xref ref-type="table" rid="T6">6</xref> SWAP-Assembler is 119 times and 73 times faster than ABySS and Ray for 1024 cores on the <italic>S. aureus </italic>dataset. On the same dataset, ABySS and Ray cannot gain any speedup beyond 64 and 128 cores, respectively. However SWAP-Assembler scales up to 512 cores. For the <italic>R. sphaeroides </italic>dataset, ABySS, Ray, and SWAP-Assembler can scale up to 128, 256, and 1024 cores, respectively.</p>
      <table-wrap id="T6" position="float">
        <label>Table 6</label>
        <caption>
          <p>Scalability evaluation on parallel assemblers 1 (Time unit: seconds).</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left">dataset</th>
              <th align="left">software</th>
              <th align="right">64</th>
              <th align="right">128</th>
              <th align="right">256</th>
              <th align="right">512</th>
              <th align="right">1024</th>
              <th align="right">2048</th>
              <th align="right">4096</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left"><italic>S. aureus </italic>(2.87 Mb)</td>
              <td align="left">ABySS</td>
              <td align="right">248</td>
              <td align="right">269</td>
              <td align="right">334</td>
              <td align="right">554</td>
              <td align="right">831</td>
              <td align="right">
                <sub>-2</sub>
              </td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">244</td>
              <td align="right">198</td>
              <td align="right">202</td>
              <td align="right">266</td>
              <td align="right">510</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">23</td>
              <td align="right">15</td>
              <td align="right">8</td>
              <td align="right">5</td>
              <td align="right">7</td>
              <td align="right">13</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td align="left"><italic>R. sphaeroides </italic>(4.60 Mb)</td>
              <td align="left">ABySS</td>
              <td align="right">492</td>
              <td align="right">454</td>
              <td align="right">522</td>
              <td align="right">718</td>
              <td align="right">1312</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">287</td>
              <td align="right">183</td>
              <td align="right">181</td>
              <td align="right">190</td>
              <td align="right">285</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">43</td>
              <td align="right">29</td>
              <td align="right">15</td>
              <td align="right">7</td>
              <td align="right">7</td>
              <td align="right">7</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td align="left">Hg14 (88.29 Mb)</td>
              <td align="left">ABySS</td>
              <td align="right">6472</td>
              <td align="right">5299</td>
              <td align="right">6935</td>
              <td align="right">9045</td>
              <td align="right">16530</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">2926</td>
              <td align="right">1746</td>
              <td align="right">1288</td>
              <td align="right">1517</td>
              <td align="right">2266</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">585</td>
              <td align="right">428</td>
              <td align="right">203</td>
              <td align="right">128</td>
              <td align="right">59</td>
              <td align="right">67</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td align="left">Fish (1 Gb</td>
              <td align="left">ABySS</td>
              <td align="right"><sub>* </sub>3</td>
              <td align="right">
                <sub>4</sub>
              </td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">*</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">+</td>
              <td align="right">13941</td>
              <td align="right">8622</td>
              <td align="right">3263</td>
              <td align="right">962</td>
              <td align="right">971</td>
              <td align="right">2582</td>
            </tr>
            <tr>
              <td align="left">Yanhuang (3 Gb)</td>
              <td align="left">ABySS</td>
              <td align="right">*</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">*</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">+</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">*</td>
              <td align="right">11243</td>
              <td align="right">5761</td>
              <td align="right">4021</td>
              <td align="right">1783</td>
              <td align="right">1608</td>
              <td align="right">1778</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>1 This table records the time usage on assembling all five datasets with different number of cores, and the length of <italic>k</italic>-mer is set to be 23. For ABySS and Ray, the time is recorded until contigs are generated.</p>
          <p>2 â denotes assembler with this parameter has not been tested.</p>
          <p><italic>3 â </italic>denotes assembler with this parameter has run out of memory.</p>
          <p>4 + denotes assembler with this parameter has run out of time, the time limit is 12 hours.</p>
        </table-wrap-foot>
      </table-wrap>
      <p>For three larger datasets, Table <xref ref-type="table" rid="T6">6</xref> shows that scalability of SWAP-Assembler is also better than the other two methods. On Hg14 dataset, SWAP-Assembler is 280 times faster than ABySS, and 38 times faster than Ray when using 1024 cores. Similar to the results on <italic>R. sphaeroides </italic>dataset, three assemblers still hold their turning point of scalability at 128, 256 and 1024 cores, respectively. Fish and Yanhuang dataset cannot be assembled by ABySS and Ray in 12 hours, so their running times are not recorded in Table <xref ref-type="table" rid="T6">6</xref>. For 1024 cores, SWAP-Assembler assembles Fish dataset in 16 minutes, while it takes 26 minutes with 2048 cores to assemble the Yanhuang dataset. The speedup curves of SWAP-Assembler on processing five datasets are shown in Figure <xref ref-type="fig" rid="F11">11</xref>. It shows that the speedup of assembling two small datasets have a turning point at 512 cores, and linear speedup to 1024 cores is achieved for other three larger datasets. SWAP-Assembler can still benefits from the increasing cores up to 2048 cores on processing Yanhuang dataset.</p>
      <fig id="F11" position="float">
        <label>Figure 11</label>
        <caption>
          <p><bold>Linear speedup of SWAP-Assembler on processing five datasets</bold>.</p>
        </caption>
        <graphic xlink:href="1471-2105-15-S9-S2-11"/>
      </fig>
      <p>Memory footprint is a bottleneck for assembling large genomes, and parallel assemblers is a solution for large genome assembly by using more memory on the computational nodes. For our case, Fish and Yanhuang genome assembly needs 1.6T bytes and 1.8T bytes memory, respectively. As in Tianhe 1A each server has 24G memory, Fish genomes cannot be assembled on a cluster with 64 servers. The same reasoning applies to Yanhuang dataset.</p>
      <p>SWAP-Assembler has better scalability compared with Ray and ABySS due to two important improvements. Firstly, computational interdependence of edge merging operations on one single unanimous path is resolved by MSG. Secondly, SWAP computational framework can trigger parallel computation of all operations without interference, and the communication latency is hidden by improving the computing throughput. Ray and ABySS cannot merge the <italic>k</italic>-mers in a single linear chain in parallel, and PASHA can only parallelize the <italic>k</italic>-mer merging work on different chains, which limits their degree of parallelism.</p>
    </sec>
    <sec>
      <title>Assembly quality assessment</title>
      <p>This part evaluate the assembly quality of SWAP-Assembler. To be compatible with the comparison results from GAGE, we follow the error correction method of GAGE. ALLPATH-LG [<xref ref-type="bibr" rid="B35">35</xref>] and Quake [<xref ref-type="bibr" rid="B36">36</xref>] are used to correct errors for <italic>S. aureus </italic>and <italic>R. sphaeriodes </italic>datasets. The corrected reads are used as the input to ABySS, Ray and SWAP-Assembler. In addition, two other sequential genome assemblers, Velvet and SOAPdenovo, are selected in this experiment for comparison, and a machine with 1TB memory is used. The <italic>k</italic>-mer size for all assemblers varies between 19 and 31, and best assembly results from the experiments of different <italic>k</italic>-mer sizes for each assembler are reported in Table <xref ref-type="table" rid="T7">7</xref> and Table <xref ref-type="table" rid="T8">8</xref>.</p>
      <table-wrap id="T7" position="float">
        <label>Table 7</label>
        <caption>
          <p>Assembly results of <italic>S.aureus </italic>and <italic>R. sphaeriodes </italic>datasets.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left">Software</th>
              <th align="left">
                <italic>S. aureus</italic>
              </th>
              <th align="left">Contigs</th>
              <th align="left"/>
              <th/>
              <th align="left" colspan="4"><italic>R. sphaeroides </italic>Contigs</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td/>
              <td align="left">
                <bold>Num</bold>
              </td>
              <td align="left">
                <bold>N50(kb)</bold>
              </td>
              <td align="left">
                <bold>Errors</bold>
              </td>
              <td align="left">
                <bold>N50 corr. (kb)</bold>
              </td>
              <td align="left">
                <bold>Num</bold>
              </td>
              <td align="left">
                <bold>N50(kb)</bold>
              </td>
              <td align="left">
                <bold>Errors</bold>
              </td>
              <td align="left">
                <bold>N50 corr.(kb)</bold>
              </td>
            </tr>
            <tr>
              <td colspan="9">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Velvet</td>
              <td align="right">162</td>
              <td align="right">48.4</td>
              <td align="right">28</td>
              <td align="right">41.5</td>
              <td align="right">583</td>
              <td align="right">15.7</td>
              <td align="right">35</td>
              <td align="right">
                <bold>14.5</bold>
              </td>
            </tr>
            <tr>
              <td align="left">SOAPdenovo</td>
              <td align="right">
                <bold>107</bold>
              </td>
              <td align="right">
                <bold>288.2</bold>
              </td>
              <td align="right">48</td>
              <td align="right">
                <bold>62.7</bold>
              </td>
              <td align="right">
                <bold>204</bold>
              </td>
              <td align="right">
                <bold>131.7</bold>
              </td>
              <td align="right">414</td>
              <td align="right">14.3</td>
            </tr>
            <tr>
              <td align="left">ABySS</td>
              <td align="right">302</td>
              <td align="right">29.2</td>
              <td align="right">14</td>
              <td align="right">24.8</td>
              <td align="right">1915</td>
              <td align="right">5.9</td>
              <td align="right">55</td>
              <td align="right">4.2</td>
            </tr>
            <tr>
              <td align="left">Ray</td>
              <td align="right">221</td>
              <td align="right">36.6</td>
              <td align="right">15</td>
              <td align="right">35.6</td>
              <td align="right">752</td>
              <td align="right">11.5</td>
              <td align="right">17</td>
              <td align="right">11.2</td>
            </tr>
            <tr>
              <td align="left">SWAP-Assembler</td>
              <td align="right">183</td>
              <td align="right">51.1</td>
              <td align="right">
                <bold>3</bold>
              </td>
              <td align="right">37.8</td>
              <td align="right">529</td>
              <td align="right">16.2</td>
              <td align="right">
                <bold>7</bold>
              </td>
              <td align="right">12.3</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <table-wrap id="T8" position="float">
        <label>Table 8</label>
        <caption>
          <p>Contig statistics on the assembly results of <italic>S.aureus, R. sphaeroides </italic>datasets. (Unit: Percentage %).</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left">Dataset</th>
              <th align="left">Software</th>
              <th align="left">Assembly</th>
              <th align="left">Chaff</th>
              <th align="left">Unalign</th>
              <th align="left">Unalign</th>
              <th align="left">Duplicate</th>
              <th align="left">Compress</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td/>
              <td/>
              <td align="left">
                <bold>Size</bold>
              </td>
              <td align="left">
                <bold>Size</bold>
              </td>
              <td align="left">
                <bold>Ref bases</bold>
              </td>
              <td align="left">
                <bold>ASM bases</bold>
              </td>
              <td align="left">
                <bold>Ref bases</bold>
              </td>
              <td align="left">
                <bold>Ref bases</bold>
              </td>
            </tr>
            <tr>
              <td colspan="8">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">
                <italic>S. aureus </italic>
              </td>
              <td align="left">Velvet</td>
              <td align="right">99.2</td>
              <td align="right">0.45</td>
              <td align="right">0.79</td>
              <td align="right">0.03</td>
              <td align="right">0.1</td>
              <td align="right">1.28</td>
            </tr>
            <tr>
              <td align="left">(2.9 Mb)</td>
              <td align="left">SOAPdenovo</td>
              <td align="right">101.3</td>
              <td align="right">0.35</td>
              <td align="right">
                <bold>0.38</bold>
              </td>
              <td align="right">
                <bold>0.01</bold>
              </td>
              <td align="right">1.44</td>
              <td align="right">1.41</td>
            </tr>
            <tr>
              <td/>
              <td align="left">ABySS</td>
              <td align="right">127</td>
              <td align="right">66</td>
              <td align="right">1.37</td>
              <td align="right">
                <italic>&lt;</italic>
                <bold>0.01</bold>
              </td>
              <td align="right">23.3</td>
              <td align="right">
                <bold>0.99</bold>
              </td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">98.4</td>
              <td align="right">
                <bold>0.1</bold>
              </td>
              <td align="right">0.88</td>
              <td align="right">0.04</td>
              <td align="right">
                <bold>0.08</bold>
              </td>
              <td align="right">1.26</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">
                <bold>99.3</bold>
              </td>
              <td align="right">0.28</td>
              <td align="right">0.8</td>
              <td align="right">0.02</td>
              <td align="right">1.29</td>
              <td align="right">1.45</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Velvet</td>
              <td align="right">97.8</td>
              <td align="right">0.54</td>
              <td align="right">1.6</td>
              <td align="right">0.01</td>
              <td align="right">0.29</td>
              <td align="right">0. 92</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SOAPdenovo</td>
              <td align="right">
                <bold>99.9</bold>
              </td>
              <td align="right">0.45</td>
              <td align="right">
                <bold>0.88</bold>
              </td>
              <td align="right">0.02</td>
              <td align="right">1.07</td>
              <td align="right">0.51</td>
            </tr>
            <tr>
              <td align="left"><italic>R. sphaeroides </italic>(4.6 Mb)</td>
              <td align="left">ABySS</td>
              <td align="right">108</td>
              <td align="right">1.65</td>
              <td align="right">3.01</td>
              <td align="right">0.15</td>
              <td align="right">10.04</td>
              <td align="right">
                <bold>0.04</bold>
              </td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">99</td>
              <td align="right">
                <bold>0.13</bold>
              </td>
              <td align="right">1.03</td>
              <td align="right">
                <italic>&lt;</italic>
                <bold>0.01</bold>
              </td>
              <td align="right">
                <bold>0.27</bold>
              </td>
              <td align="right">0.73</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">99.1</td>
              <td align="right">
                <bold>0.13</bold>
              </td>
              <td align="right">1.08</td>
              <td align="right">0.11</td>
              <td align="right">0.83</td>
              <td align="right">0.75</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>Table <xref ref-type="table" rid="T7">7</xref> presents the results of four metrics for evaluation: the number of contigs, N50, number of erroneous contigs and error-corrected N50. Error-corrected N50 is used to exclude the misleading assessment of larger N50 by correcting erroneously concatenated contigs. Each erroneous contig is broken at every misjoin and at every indel longer than 5 bases. From Table <xref ref-type="table" rid="T7">7</xref>, SWAP-Assembler generates 3 and 7 error contigs on <italic>S. aureus </italic>and <italic>R. sphaeriodes </italic>datasets, respectively, which are the smallest compared with other assemblers. N50 size and error-corrected N50 size for SWAP-Assembler are also longer than two other parallel assemblers, Ray and ABySS. SOAPdenovo has minimal number of contigs and largest N50 size for both datasets.</p>
      <p>Table <xref ref-type="table" rid="T8">8</xref> summarizes the statistics of contigs generated for these two datasets. Three metrics in [<xref ref-type="bibr" rid="B30">30</xref>] are used to evaluate the quality of the contigs. In this table, "assembly size" close to its genome size is better. Larger "chaff size" can be indicative of the assembler being unable to integrate short repeat structures into larger contigs or not properly correcting erroneous bases. Coverage can be measured by the percentage of reference bases aligned to any assembled contig, which is "100%-Unaligned ref bases" [<xref ref-type="bibr" rid="B30">30</xref>]. SWAP-Assembler and Ray both have the smallest chaff size of 0.13% on <italic>R. sphaeroides </italic>dataset, and they show very close coverage and assembly sizes. In terms of <italic>S. aureus </italic>dataset, Ray has a lower chaff size of 0.10% compared with SWAP-Assembler, however, SWAP-Assembler generates better assembly size of 99.3% and larger coverage of 99.2%.</p>
      <p>We also analyzed the contig statistics for three larger datasets and the results are presented in Table <xref ref-type="table" rid="T9">9</xref>. Because these datasets do not have a standard reference set and the original script provided by GAGE requires a reference set, we wrote a script to analyze the assembly results using the number of contigs, N50 size, max length of contigs and bases in the contigs for evaluation. The original data of three datasets are directly processed by five assemblers with a fixed <italic>k</italic>-mer size of 31. According to Table <xref ref-type="table" rid="T9">9</xref>, the N50 size of contigs generated by SWAP-Assembler is longest for all three datasets. For Fish and Yanhuang datasets, SWAP-Assembler also performs best in the number of contigs and max length of contigs. However for SWAP-Assembler on Hg14 dataset, whose reads are extracted from the human dataset by mapping the human chromosome 14, the number of contigs, max length of contigs and bases in contigs have a rank of second, third, and second, respectively. SWAP-Assembler has a best N50 size for all datasets. This is because it has efficient graph cleaning and contig extension steps, which can handle sequencing errors efficiently. Four other assemblers, without the help from external tools on error correction, are affected by the quality of input reads on larger datasets.</p>
      <table-wrap id="T9" position="float">
        <label>Table 9</label>
        <caption>
          <p>Contig statistics of Hg14, Fish and Yanhuang datasets.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="center">Dataset</th>
              <th align="center">Software</th>
              <th align="center" colspan="4">Contigs</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td/>
              <td/>
              <td align="left">
                <bold>Num</bold>
              </td>
              <td align="left">
                <bold>N50 (bp)</bold>
              </td>
              <td align="left">
                <bold>Max (bp)</bold>
              </td>
              <td align="left">
                <bold>BasesInContig (Mbp)</bold>
              </td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td/>
              <td align="left">Velvet</td>
              <td align="right">90,784</td>
              <td align="right">1688</td>
              <td align="right">25,729</td>
              <td align="right">
                <bold>83.3</bold>
              </td>
            </tr>
            <tr>
              <td align="left">Hg 14 (88.3 Mb)</td>
              <td align="left">SOAPdenovo</td>
              <td align="right">200,153</td>
              <td align="right">836</td>
              <td align="right">21,144</td>
              <td align="right">96.4</td>
            </tr>
            <tr>
              <td/>
              <td align="left">ABySS</td>
              <td align="right">190,693</td>
              <td align="right">1914</td>
              <td align="right">
                <bold>26,697</bold>
              </td>
              <td align="right">107.4</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">
                <bold>76,950</bold>
              </td>
              <td align="right">964</td>
              <td align="right">14,399</td>
              <td align="right">68.4</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">88,609</td>
              <td align="right">
                <bold>2036</bold>
              </td>
              <td align="right">21,246</td>
              <td align="right">96.4</td>
            </tr>
            <tr>
              <td align="left">Fish (1 Gb)</td>
              <td align="left">Velvet</td>
              <td align="right">-</td>
              <td align="right">-</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SOAPdenovo</td>
              <td align="right">3291290</td>
              <td align="right">378</td>
              <td align="right">7181</td>
              <td align="right">1,134.40</td>
            </tr>
            <tr>
              <td/>
              <td align="left">ABySS</td>
              <td align="right">-</td>
              <td align="right">-</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">-</td>
              <td align="right">-</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">
                <bold>2881443</bold>
              </td>
              <td align="right">
                <bold>1309</bold>
              </td>
              <td align="right">
                <bold>35,962</bold>
              </td>
              <td align="right">
                <bold>1,097.90</bold>
              </td>
            </tr>
            <tr>
              <td/>
              <td align="left">Velvet</td>
              <td align="right">-</td>
              <td align="right">-</td>
              <td align="right">-</td>
              <td align="right">-</td>
            </tr>
            <tr>
              <td align="left">Yanhuang (3 Gb)</td>
              <td align="left">SOAPdenovo</td>
              <td align="right">8,584,515</td>
              <td align="right">841</td>
              <td align="right">23,782</td>
              <td align="right">
                <bold>3396.2</bold>
              </td>
            </tr>
            <tr>
              <td/>
              <td align="left">ABySS</td>
              <td align="right">9,218,967</td>
              <td align="right">1059</td>
              <td align="right">24,428</td>
              <td align="right">3691.8</td>
            </tr>
            <tr>
              <td/>
              <td align="left">Ray</td>
              <td align="right">3,755,103</td>
              <td align="right">266</td>
              <td align="right">6,765</td>
              <td align="right">1620.1</td>
            </tr>
            <tr>
              <td/>
              <td align="left">SWAP-Assembler</td>
              <td align="right">
                <bold>2,379,151</bold>
              </td>
              <td align="right">
                <bold>1368</bold>
              </td>
              <td align="right">
                <bold>31,152</bold>
              </td>
              <td align="right">2434.3</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>In conclusion, SWAP-Assembler is a highly scalable and efficient genome assembler. The evaluation shows that our assembler can scales up to 2048 cores, which is much better than other parallel assemblers, and the quality of contigs generated by SWAP-Assembler is the best in terms of error rate for several small datasets and N50 size for two larger data sets.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions">
    <title>Conclusion</title>
    <p>In this paper, SWAP-Assembler, a fast and efficient genome assembler scaling up to thousands of cores, is presented. In SWAP-Assembler, two fundamental improvements are crucial for its scalability. Firstly, MSG is presented as a comprehensive mathematical abstraction for genome assembly. With MSG the computational interdependence is resolved. Secondly, SWAP computational framework triggers the parallel computation of all operations without interference. Two additional steps are included to improve the quality of contigs. One is graph cleaning, which adopts the traditional methods of removing <italic>k</italic>-molecules and edges with low frequency, and the other is contig extension, which resolves special edges and some cross nodes with a heuristic method. Results show that SWAP-Assembler can scale up to 2048 cores on Yanhuang dataset using only 26 minutes, which is the best compared to other parallel assemblers, such as ABySS and Ray. Conitg evaluation results confirm that SWAP-Assembler can generate good results on contigs N50 size and retain low error rate. When processing massive datasets without using external error correction tools, SWAP-Assembler is immune from low data quality and generated longest N50 contig size.</p>
    <p>For large genome and metagenome data of Tara bytes, for example the human gut microbial community sequencing data, highly scalable and efficient assemblers will be essential for data analysis. Our future work will extend our algorithm development for massive matagenomics dataset with additional modules.</p>
    <p>The program can be downloaded from <ext-link ext-link-type="uri" xlink:href="https://sourceforge.net/projects/swapassembler">https://sourceforge.net/projects/swapassembler</ext-link>.</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>JT carried out the parallel genome assembly studies, participated in the development of SWAP-Assembler and drafted the manuscript. BQ participated in the design and optimization of SWAP-Assembler. YJ participated in the development of SWAP-Assembler and modification of this manuscript. SZ participated in the design of the study and design of the performance test. Pavan conceived of the study, and participated in its design and coordination and helped to draft the manuscript. All authors read and approved the final manuscript.</p>
  </sec>
  <sec>
    <title>Additional file 1</title>
    <p>Appendix. Appendix 1 property proof of MSG, Appendix 2 algorithms for SWAP-Assembler, Appendix 3 complexity analysis of SWAP computational framework, Appendix 4 complexity analysis of graph reduction.</p>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>The authors would like to thank for the suggestions and modifications from Francis YL Chin, SM Yiu, C.M. Leung, Yu Peng and Yi Wang from the University of Hongkong, and anonymous reviewers invited by Recomb-seq 2014. The calculations of this work were performed on TianHe-1A at National Supercomputer Center in Tianjin.</p>
  </sec>
  <sec>
    <title>Declarations</title>
    <p>Funding for the publication of this article was provided by National Science Foundation of China under grant No. 11204342, the Science Technology and Innovation Committee of Shenzhen Municipality under grant No. JCYJ20120615140912201, and Shenzhen Peacock Plan under grant No. KQCX20130628112914299.</p>
    <p>This article has been published as part of BMC Bioinformatics Volume 15 Supplement 9, 2014: Proceedings of the Fourth Annual RECOMB Satellite Workshop on Massively Parallel Sequencing (RECOMB-Seq 2014). The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/bmcbioinformatics/supplements/15/S9">http://www.biomedcentral.com/bmcbioinformatics/supplements/15/S9</ext-link>.</p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Schatz</surname>
          <given-names>MC</given-names>
        </name>
        <name>
          <surname>Langmead</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>SL</given-names>
        </name>
        <article-title>Cloud computing and the dna data race</article-title>
        <source>Nature biotechnology</source>
        <year>2010</year>
        <volume>28</volume>
        <issue>7</issue>
        <fpage>691</fpage>
        <pub-id pub-id-type="doi">10.1038/nbt0710-691</pub-id>
        <?supplied-pmid 20622843?>
        <pub-id pub-id-type="pmid">20622843</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Stein</surname>
          <given-names>LD</given-names>
        </name>
        <etal/>
        <article-title>The case for cloud computing in genome informatics</article-title>
        <source>Genome Biol</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>5</issue>
        <fpage>207</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2010-11-5-207</pub-id>
        <?supplied-pmid 20441614?>
        <pub-id pub-id-type="pmid">20441614</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Armbrust</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Fox</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Griffith</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Joseph</surname>
          <given-names>AD</given-names>
        </name>
        <name>
          <surname>Katz</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Konwinski</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Lee</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Patterson</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Rabkin</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Stoica</surname>
          <given-names>I</given-names>
        </name>
        <etal/>
        <article-title>A view of cloud computing</article-title>
        <source>Communications of the ACM</source>
        <year>2010</year>
        <volume>53</volume>
        <issue>4</issue>
        <fpage>50</fpage>
        <lpage>58</lpage>
        <pub-id pub-id-type="doi">10.1145/1721654.1721672</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Dean</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Ghemawat</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Mapreduce: simplified data processing on large clusters</article-title>
        <source>Communications of the ACM</source>
        <year>2008</year>
        <volume>51</volume>
        <issue>1</issue>
        <fpage>107</fpage>
        <lpage>113</lpage>
        <pub-id pub-id-type="doi">10.1145/1327452.1327492</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Owens</surname>
          <given-names>JD</given-names>
        </name>
        <name>
          <surname>Houston</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Luebke</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Green</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Stone</surname>
          <given-names>JE</given-names>
        </name>
        <name>
          <surname>Phillips</surname>
          <given-names>JC</given-names>
        </name>
        <article-title>Gpu computing</article-title>
        <source>Proceedings of the IEEE</source>
        <year>2008</year>
        <volume>96</volume>
        <issue>5</issue>
        <fpage>879</fpage>
        <lpage>899</lpage>
        <pub-id pub-id-type="doi">10.1109/JPROC.2008.917757</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="book">
        <name>
          <surname>Matsunaga</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Tsugawa</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Fortes</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Cloudblast: Combining mapreduce and virtualization on distributed resources for bioinformatics applications</article-title>
        <source>eScience, 2008 eScience'08 IEEE Fourth International Conference On</source>
        <year>2008</year>
        <publisher-name>IEEE</publisher-name>
        <fpage>222</fpage>
        <lpage>229</lpage>
        <pub-id pub-id-type="doi">10.1109/eScience.2008.62</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Wall</surname>
          <given-names>DP</given-names>
        </name>
        <name>
          <surname>Kudtarkar</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Fusaro</surname>
          <given-names>VA</given-names>
        </name>
        <name>
          <surname>Pivovarov</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Patil</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Tonellato</surname>
          <given-names>PJ</given-names>
        </name>
        <article-title>Cloud computing for comparative genomics</article-title>
        <source>BMC bioinformatics</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>259</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-259</pub-id>
        <?supplied-pmid 20482786?>
        <pub-id pub-id-type="pmid">20482786</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Liu</surname>
          <given-names>CM</given-names>
        </name>
        <name>
          <surname>Wong</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Wu</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Luo</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Yiu</surname>
          <given-names>SM</given-names>
        </name>
        <name>
          <surname>Li</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Wang</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Yu</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Chu</surname>
          <given-names>X</given-names>
        </name>
        <name>
          <surname>Zhao</surname>
          <given-names>K</given-names>
        </name>
        <etal/>
        <article-title>Soap3: ultra-fast gpu-based parallel alignment tool for short reads</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>6</issue>
        <fpage>878</fpage>
        <lpage>879</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts061</pub-id>
        <?supplied-pmid 22285832?>
        <pub-id pub-id-type="pmid">22285832</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Schatz</surname>
          <given-names>MC</given-names>
        </name>
        <article-title>Cloudburst: highly sensitive read mapping with mapreduce</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>11</issue>
        <fpage>1363</fpage>
        <lpage>1369</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp236</pub-id>
        <?supplied-pmid 19357099?>
        <pub-id pub-id-type="pmid">19357099</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Langmead</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Schatz</surname>
          <given-names>MC</given-names>
        </name>
        <name>
          <surname>Lin</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Pop</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>SL</given-names>
        </name>
        <article-title>Searching for snps with cloud computing</article-title>
        <source>Genome Biol</source>
        <year>2009</year>
        <volume>10</volume>
        <issue>11</issue>
        <fpage>134</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2009-10-11-r134</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Langmead</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Hansen</surname>
          <given-names>KD</given-names>
        </name>
        <name>
          <surname>Leek</surname>
          <given-names>JT</given-names>
        </name>
        <etal/>
        <article-title>Cloud-scale rna-sequencing differential expression analysis with myrna</article-title>
        <source>Genome Biol</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>8</issue>
        <fpage>83</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2010-11-8-r83</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal">
        <name>
          <surname>McPherson</surname>
          <given-names>JD</given-names>
        </name>
        <article-title>Next-generation gap</article-title>
        <source>Nature Methods</source>
        <year>2009</year>
        <volume>6</volume>
        <fpage>2</fpage>
        <lpage>5</lpage>
      </mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Shendure</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Ji</surname>
          <given-names>H</given-names>
        </name>
        <article-title>Next-generation dna sequencing</article-title>
        <source>Nature biotechnology</source>
        <year>2008</year>
        <volume>26</volume>
        <issue>10</issue>
        <fpage>1135</fpage>
        <lpage>1145</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt1486</pub-id>
        <?supplied-pmid 18846087?>
        <pub-id pub-id-type="pmid">18846087</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Simpson</surname>
          <given-names>JT</given-names>
        </name>
        <name>
          <surname>Wong</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Jackman</surname>
          <given-names>SD</given-names>
        </name>
        <name>
          <surname>Schein</surname>
          <given-names>JE</given-names>
        </name>
        <name>
          <surname>Jones</surname>
          <given-names>SJ</given-names>
        </name>
        <name>
          <surname>Birol</surname>
        </name>
        <article-title>Abyss: a parallel assembler for short read sequence data</article-title>
        <source>Genome research</source>
        <year>2009</year>
        <volume>19</volume>
        <issue>6</issue>
        <fpage>1117</fpage>
        <lpage>1123</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.089532.108</pub-id>
        <?supplied-pmid 19251739?>
        <pub-id pub-id-type="pmid">19251739</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Boisvert</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Laviolette</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Corbeil</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Ray: simultaneous assembly of reads from a mix of high-throughput sequencing technologies</article-title>
        <source>Journal of Computational Biology</source>
        <year>2010</year>
        <volume>17</volume>
        <issue>11</issue>
        <fpage>1519</fpage>
        <lpage>1533</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2009.0238</pub-id>
        <?supplied-pmid 20958248?>
        <pub-id pub-id-type="pmid">20958248</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Liu</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Schmidt</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Maskell</surname>
          <given-names>DL</given-names>
        </name>
        <article-title>Parallelized short read assembly of large genomes using de bruijn graphs</article-title>
        <source>BMC bioinformatics</source>
        <year>2011</year>
        <volume>12</volume>
        <issue>1</issue>
        <fpage>354</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-12-354</pub-id>
        <?supplied-pmid 21867511?>
        <pub-id pub-id-type="pmid">21867511</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="other">
        <name>
          <surname>Jackson</surname>
          <given-names>BG</given-names>
        </name>
        <name>
          <surname>Aluru</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Parallel construction of bidirected string graphs for genome assembly</article-title>
        <source>Parallel Processing</source>
        <year>2008</year>
        <comment>ICPP'08. 37th International Conference On, pp. 346-353 (2008). IEEE</comment>
      </mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Jackson</surname>
          <given-names>BG</given-names>
        </name>
        <name>
          <surname>Schnable</surname>
          <given-names>PS</given-names>
        </name>
        <name>
          <surname>Aluru</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Parallel short sequence assembly of transcriptomes</article-title>
        <source>BMC bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <issue>Suppl 1</issue>
        <fpage>14</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-S1-S14</pub-id>
        <?supplied-pmid 19134199?>
        <pub-id pub-id-type="pmid">19134199</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="other">
        <name>
          <surname>Jackson</surname>
          <given-names>BG</given-names>
        </name>
        <name>
          <surname>Regennitter</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Yang</surname>
          <given-names>X</given-names>
        </name>
        <name>
          <surname>Schnable</surname>
          <given-names>PS</given-names>
        </name>
        <name>
          <surname>Aluru</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Parallel de novo assembly of large genomes from high-throughput short reads</article-title>
        <source>Parallel &amp; Distributed Processing (IPDPS), 2010 IEEE International Symposium On</source>
        <year>2010</year>
        <fpage>1</fpage>
        <lpage>10</lpage>
        <comment>IEEE</comment>
      </mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Pevzner</surname>
          <given-names>PA</given-names>
        </name>
        <name>
          <surname>Tang</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Waterman</surname>
          <given-names>MS</given-names>
        </name>
        <article-title>An eulerian path approach to dna fragment assembly</article-title>
        <source>Proceedings of the National Academy of Sciences</source>
        <year>2001</year>
        <volume>98</volume>
        <issue>17</issue>
        <fpage>9748</fpage>
        <lpage>9753</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.171285098</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Chaisson</surname>
          <given-names>MJ</given-names>
        </name>
        <name>
          <surname>Pevzner</surname>
          <given-names>PA</given-names>
        </name>
        <article-title>Short read fragment assembly of bacterial genomes</article-title>
        <source>Genome research</source>
        <year>2008</year>
        <volume>18</volume>
        <issue>2</issue>
        <fpage>324</fpage>
        <lpage>330</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.7088808</pub-id>
        <?supplied-pmid 18083777?>
        <pub-id pub-id-type="pmid">18083777</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Zerbino</surname>
          <given-names>DR</given-names>
        </name>
        <name>
          <surname>Birney</surname>
          <given-names>E</given-names>
        </name>
        <article-title>Velvet: algorithms for de novo short read assembly using de bruijn graphs</article-title>
        <source>Genome research</source>
        <year>2008</year>
        <volume>18</volume>
        <issue>5</issue>
        <fpage>821</fpage>
        <lpage>829</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.074492.107</pub-id>
        <?supplied-pmid 18349386?>
        <pub-id pub-id-type="pmid">18349386</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Dehne</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Song</surname>
          <given-names>SW</given-names>
        </name>
        <article-title>Randomized parallel list ranking for distributed memory multiprocessors</article-title>
        <source>International journal of parallel programming</source>
        <year>1997</year>
        <volume>25</volume>
        <issue>1</issue>
        <fpage>1</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1007/BF02700044</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="book">
        <name>
          <surname>Meng</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Yuan</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Cheng</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Wei</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Feng</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Small world asynchronous parallel model for genome assembly</article-title>
        <source>Network and Parallel Computing</source>
        <year>2012</year>
        <publisher-name>Springer, Gwangju</publisher-name>
        <fpage>145</fpage>
        <lpage>155</lpage>
      </mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Pop</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>SL</given-names>
        </name>
        <name>
          <surname>Shumway</surname>
          <given-names>M</given-names>
        </name>
        <article-title>Genome sequence assembly: Algorithms and issues</article-title>
        <source>Computer</source>
        <year>2002</year>
        <volume>35</volume>
        <issue>7</issue>
        <fpage>47</fpage>
        <lpage>54</lpage>
        <pub-id pub-id-type="doi">10.1109/MC.2002.1016901</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kapun</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Tsarev</surname>
          <given-names>F</given-names>
        </name>
        <article-title>De bruijn superwalk with multiplicities problem is np-hard</article-title>
        <source>BMC bioinformatics</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>Suppl 5</issue>
        <fpage>7</fpage>
        <?supplied-pmid 23323831?>
        <pub-id pub-id-type="pmid">23323831</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="book">
        <name>
          <surname>Andrew</surname>
          <given-names>S</given-names>
        </name>
        <source>Computer Networks</source>
        <year>2003</year>
        <publisher-name>Prentice Hall, The Netherlands</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Yang</surname>
          <given-names>XJ</given-names>
        </name>
        <name>
          <surname>Liao</surname>
          <given-names>XK</given-names>
        </name>
        <name>
          <surname>Lu</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Hu</surname>
          <given-names>QF</given-names>
        </name>
        <name>
          <surname>Song</surname>
          <given-names>JQ</given-names>
        </name>
        <name>
          <surname>Su</surname>
          <given-names>JS</given-names>
        </name>
        <article-title>The tianhe-1a supercomputer: its hardware and software</article-title>
        <source>Journal of Computer Science and Technology</source>
        <year>2011</year>
        <volume>26</volume>
        <issue>3</issue>
        <fpage>344</fpage>
        <lpage>351</lpage>
        <pub-id pub-id-type="doi">10.1007/s02011-011-1137-8</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Li</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Zhu</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Ruan</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Qian</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Fang</surname>
          <given-names>X</given-names>
        </name>
        <name>
          <surname>Shi</surname>
          <given-names>Z</given-names>
        </name>
        <name>
          <surname>Li</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Li</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Shan</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Kristiansen</surname>
          <given-names>K</given-names>
        </name>
        <etal/>
        <article-title>De novo assembly of human genomes with massively parallel short read sequencing</article-title>
        <source>Genome research</source>
        <year>2010</year>
        <volume>20</volume>
        <issue>2</issue>
        <fpage>265</fpage>
        <lpage>272</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.097261.109</pub-id>
        <?supplied-pmid 20019144?>
        <pub-id pub-id-type="pmid">20019144</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B30">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Salzberg</surname>
          <given-names>SL</given-names>
        </name>
        <name>
          <surname>Phillippy</surname>
          <given-names>AM</given-names>
        </name>
        <name>
          <surname>Zimin</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Puiu</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Magoc</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Koren</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Treangen</surname>
          <given-names>TJ</given-names>
        </name>
        <name>
          <surname>Schatz</surname>
          <given-names>MC</given-names>
        </name>
        <name>
          <surname>Delcher</surname>
          <given-names>AL</given-names>
        </name>
        <name>
          <surname>Roberts</surname>
          <given-names>M</given-names>
        </name>
        <etal/>
        <article-title>Gage: A critical evaluation of genome assemblies and assembly algorithms</article-title>
        <source>Genome Research</source>
        <year>2012</year>
        <volume>22</volume>
        <issue>3</issue>
        <fpage>557</fpage>
        <lpage>567</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.131383.111</pub-id>
        <?supplied-pmid 22147368?>
        <pub-id pub-id-type="pmid">22147368</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B31">
      <mixed-citation publication-type="other">
        <name>
          <surname>Bradnam</surname>
          <given-names>KR</given-names>
        </name>
        <name>
          <surname>Fass</surname>
          <given-names>JN</given-names>
        </name>
        <name>
          <surname>Alexandrov</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Baranay</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Bechner</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Birol</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Boisvert10</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Chapman</surname>
          <given-names>JA</given-names>
        </name>
        <name>
          <surname>Chapuis</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Chikhi</surname>
          <given-names>R</given-names>
        </name>
        <etal/>
        <article-title>Assemblathon 2: evaluating de novo methods of genome assembly in three vertebrate species</article-title>
        <source>arXiv preprint arXiv:1301.5406</source>
        <year>2013</year>
      </mixed-citation>
    </ref>
    <ref id="B32">
      <mixed-citation publication-type="other">
        <article-title>Assemblathon 2</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://assemblathon.org/assemblathon2">http://assemblathon.org/assemblathon2</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B33">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Luo</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Liu</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Xie</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Li</surname>
          <given-names>Z</given-names>
        </name>
        <name>
          <surname>Huang</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Yuan</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>He</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Chen</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Pan</surname>
          <given-names>Q</given-names>
        </name>
        <name>
          <surname>Liu</surname>
          <given-names>Y</given-names>
        </name>
        <etal/>
        <article-title>Soapdenovo2: an empirically improved memory-efficient short-read de novo assembler</article-title>
        <source>GigaScience</source>
        <year>2012</year>
        <volume>1</volume>
        <issue>1</issue>
        <fpage>18</fpage>
        <pub-id pub-id-type="doi">10.1186/2047-217X-1-18</pub-id>
        <?supplied-pmid 23587118?>
        <pub-id pub-id-type="pmid">23587118</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B34">
      <mixed-citation publication-type="other">
        <name>
          <surname>Huang</surname>
          <given-names>Yan</given-names>
        </name>
        <article-title>The First Asian Diploid Genome</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://yh.genomics.org.cn">http://yh.genomics.org.cn</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B35">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Gnerre</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>MacCallum</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Przybylski</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Ribeiro</surname>
          <given-names>FJ</given-names>
        </name>
        <name>
          <surname>Burton</surname>
          <given-names>JN</given-names>
        </name>
        <name>
          <surname>Walker</surname>
          <given-names>BJ</given-names>
        </name>
        <name>
          <surname>Sharpe</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Hall</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Shea</surname>
          <given-names>TP</given-names>
        </name>
        <name>
          <surname>Sykes</surname>
          <given-names>S</given-names>
        </name>
        <etal/>
        <article-title>High-quality draft assemblies of mammalian genomes from massively parallel sequence data</article-title>
        <source>Proceedings of the National Academy of Sciences</source>
        <year>2011</year>
        <volume>108</volume>
        <issue>4</issue>
        <fpage>1513</fpage>
        <lpage>1518</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1017351108</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B36">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kelley</surname>
          <given-names>DR</given-names>
        </name>
        <name>
          <surname>Schatz</surname>
          <given-names>MC</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>SL</given-names>
        </name>
        <etal/>
        <article-title>Quake: quality-aware detection and correction of sequencing errors</article-title>
        <source>Genome Biol</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>11</issue>
        <fpage>116</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2010-11-11-r116</pub-id>
        <?supplied-pmid 20423531?>
        <pub-id pub-id-type="pmid">20423531</pub-id>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
