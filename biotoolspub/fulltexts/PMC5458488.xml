<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Acta Crystallogr D Struct Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Acta Crystallogr D Struct Biol</journal-id>
    <journal-id journal-id-type="publisher-id">Acta Cryst. D</journal-id>
    <journal-title-group>
      <journal-title>Acta Crystallographica. Section D, Structural Biology</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2059-7983</issn>
    <publisher>
      <publisher-name>International Union of Crystallography</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5458488</article-id>
    <article-id pub-id-type="publisher-id">rr5147</article-id>
    <article-id pub-id-type="doi">10.1107/S2059798317007859</article-id>
    <article-id pub-id-type="coden">ACSDAD</article-id>
    <article-id pub-id-type="pii">S2059798317007859</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Papers</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Recent developments in the <italic>CCP-EM</italic> software suite</article-title>
      <alt-title>Recent developments in the <italic>CCP-EM</italic> software suite</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Burnley</surname>
          <given-names>Tom</given-names>
        </name>
        <xref ref-type="aff" rid="a">a</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0002-4883-1546</contrib-id>
        <name>
          <surname>Palmer</surname>
          <given-names>Colin M.</given-names>
        </name>
        <xref ref-type="aff" rid="a">a</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0003-0496-6796</contrib-id>
        <name>
          <surname>Winn</surname>
          <given-names>Martyn</given-names>
        </name>
        <xref ref-type="aff" rid="a">a</xref>
      </contrib>
      <aff id="a"><label>a</label>Scientific Computing Department, <institution>Science and Technology Facilities Council</institution>, Research Complex at Harwell, Didcot OX11 0FA, <country>England</country></aff>
    </contrib-group>
    <pub-date pub-type="collection">
      <day>01</day>
      <month>6</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>31</day>
      <month>5</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>31</day>
      <month>5</month>
      <year>2017</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>73</volume>
    <issue>Pt 6</issue>
    <issue-id pub-id-type="publisher-id">d170600</issue-id>
    <fpage>469</fpage>
    <lpage>477</lpage>
    <history>
      <date date-type="received">
        <day>14</day>
        <month>5</month>
        <year>2017</year>
      </date>
      <date date-type="accepted">
        <day>26</day>
        <month>5</month>
        <year>2017</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Burnley et al. 2017</copyright-statement>
      <copyright-year>2017</copyright-year>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0/uk/">
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution (CC-BY) Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original authors and source are cited.</license-p>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/">http://creativecommons.org/licenses/by/2.0/uk/</ali:license_ref>
      </license>
    </permissions>
    <self-uri xlink:href="https://doi.org/10.1107/S2059798317007859">A full version of this article is available from Crystallography Journals Online.</self-uri>
    <abstract abstract-type="toc">
      <p>An overview is given of the new <italic>CCP-EM</italic> software suite, including the underpinning framework, the current functionality and the distribution procedure. This first version of the suite has a focus on building and refining atomic models.</p>
    </abstract>
    <abstract>
      <p>As part of its remit to provide computational support to the cryo-EM community, the Collaborative Computational Project for Electron cryo-Microscopy (CCP-EM) has produced a software framework which enables easy access to a range of programs and utilities. The resulting software suite incorporates contributions from different collaborators by encapsulating them in Python task wrappers, which are then made accessible <italic>via</italic> a user-friendly graphical user interface as well as a command-line interface suitable for scripting. The framework includes tools for project and data management. An overview of the design of the framework is given, together with a survey of the functionality at different levels. The current <italic>CCP-EM</italic> suite has particular strength in the building and refinement of atomic models into cryo-EM reconstructions, which is described in detail.</p>
    </abstract>
    <kwd-group>
      <kwd>Collaborative Computational Project for Electron cryo-Microscopy</kwd>
      <kwd>
        <italic>CCP-EM</italic>
      </kwd>
      <kwd>cryo-EM</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>Medical Research Council</funding-source>
        <award-id>MR/J000825/1</award-id>
        <award-id>MR/N009614/1</award-id>
      </award-group>
    </funding-group>
    <conference>
      <conf-date/>
      <conf-name>Proceedings of the CCP-EM Spring Symposium</conf-name>
      <conf-loc/>
    </conference>
  </article-meta>
</front>
<body>
  <sec id="sec1">
    <label>1.</label>
    <title>Introduction   </title>
    <p>The Collaborative Computational Project for Electron cryo-Microscopy (CCP-EM) was initiated in 2012 to support the computational needs of the macromolecular electron cryo-microscopy (cryo-EM) community. To this end, it aims to support both software developers and users in a manner analogous to the way in which the long-running Collaborative Computational Project, Number 4 (CCP4; Winn <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb54"> ▸</xref>) has supported the macromolecular crystallography (MX) community. CCP-EM is mandated to provide user training and developer support and to establish a coherent community for the exchange of best practices and novel ideas.</p>
    <p>The creation of the CCP-EM project has been described previously (Wood <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb55"> ▸</xref>). In this contribution, we specifically address the <italic>CCP-EM</italic> software suite: a multi-platform suite of tools that, in time, aims to cover all aspects of cryo-EM data processing from image manipulation to the building of atomic models, and to cover multiple techniques such as single-particle reconstruction (SPR), tomography and diffraction. Packaging tools together allows better management of structural biology projects, as well as better distribution and testing of software, to the benefit of both users and developers. Here, we describe the development of the <italic>CCP-EM</italic> software suite and its initial functionality.</p>
    <p>The <italic>CCP-EM</italic> software suite was conceived as a generic framework that could support a wide variety of functionalities, whether written by ourselves or provided by external programs. As a collaborative project, the ability to incorporate programs from external partners is a high priority. There are clear conceptual similarities to other frameworks such as <italic>Appion</italic> (Lander <italic>et al.</italic>, 2009<xref ref-type="bibr" rid="bb25"> ▸</xref>), <italic>Scipion</italic> (de la Rosa-Trevín <italic>et al.</italic>, 2016<xref ref-type="bibr" rid="bb35"> ▸</xref>) and <italic>Focus</italic> (Biyani <italic>et al.</italic>, 2017<xref ref-type="bibr" rid="bb4"> ▸</xref>). One unique feature of the <italic>CCP-EM</italic> framework is its close connection to the highly successful <italic>CCP</italic>4 suite for macromolecular crystallography, which arises out of historic links. This connection allows the reuse of software-engineering technologies deployed previously for <italic>CCP</italic>4, and the easy incorporation of crystallographic programs for the interpretation of high-resolution reconstructions. Nevertheless, the <italic>CCP-EM</italic> suite is distinct from <italic>CCP</italic>4 and is firmly directed towards the cryo-EM community.</p>
    <p>A public beta release of the <italic>CCP-EM</italic> suite was made in 2016, and has been used since then in several CCP-EM training courses. The initial focus has been on fitting, building and refining of atomic models into high- or medium-resolution single-particle reconstructions. This focus partly reflects our historical links to the macromolecular crystallography community, but is also timely given the recent ‘resolution revolution’ (Kühlbrandt, 2014<xref ref-type="bibr" rid="bb24"> ▸</xref>). The <italic>CCP-EM</italic> suite aims to assist microscopists who are perhaps obtaining high-resolution structures for the first time, and may be unfamiliar with topics such as reciprocal-space refinement or the use of structural restraints. Equally, for the many crystallographers who are moving into the cryo-EM field, the suite aims to help them adapt familiar tools to new data sets. In all cases, the <italic>CCP-EM</italic> suite provides convenient pipelining and data-management tools, which are becoming essential as cryo-EM moves to become a high-throughput and widespread technique (Stuart <italic>et al.</italic>, 2016<xref ref-type="bibr" rid="bb44"> ▸</xref>).</p>
    <p>In the following section, we describe the generic software framework and the design decisions that have been made. We cover the underlying software libraries which support applications visible to the general user, as well as facilitating further development. We then go on to give an overview of the current functionality, including small utilities and major programs. We finish with a quick discussion of future plans.</p>
  </sec>
  <sec id="sec2">
    <label>2.</label>
    <title>Software framework   </title>
    <p>The <italic>CCP-EM</italic> software framework is primarily written in Python. Python is an interpreted language that is widely used in the scientific community; examples in structural biology include <italic>CCP</italic>4 (Winn <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb54"> ▸</xref>), <italic>PHENIX</italic> (Adams <italic>et al.</italic>, 2010<xref ref-type="bibr" rid="bb1"> ▸</xref>), <italic>PyMOL</italic> (Schrödinger), <italic>Scipion</italic> (de la Rosa-Trevín <italic>et al.</italic>, 2016<xref ref-type="bibr" rid="bb35"> ▸</xref>) and <italic>DIALS</italic> (Waterman <italic>et al.</italic>, 2016<xref ref-type="bibr" rid="bb52"> ▸</xref>). Its convenience and shallow learning curve have aided its popularity, and furthermore it is cross-platform as it does not require compilation.</p>
    <sec id="sec2.1">
      <label>2.1.</label>
      <title>Libraries and utilities   </title>
      <p>The <italic>CCP-EM</italic> software framework has a modular organization which can be roughly divided into three layers (Fig. 1<xref ref-type="fig" rid="fig1"> ▸</xref>). The top-level GUI (graphical user interface) layer is written using the PyQt toolkit. This provides a simple graphical interface to the associated programs. Distinct from this is the mid-level management layer, which is written in pure Python. This provides a bridge between the GUI layer and the third layer: the set of functional programs. These programs originate from collaborating developers and are written in a wide variety of languages (including C, C++, Fortran and Python) with distinct control methods and input conventions.</p>
      <p>The second, management layer provides Python task wrappers for each of the functional programs and gives a common interface style accessible <italic>via</italic> the GUI or the CLI (command-line interface). Command arguments are in the JSON (JavaScript Object Notation) format. This is a lightweight metadata format which is commonly used as it is more human-readable than other markup formats (for example XML) and is fully supported in the Python standard library (Fig. 2<xref ref-type="fig" rid="fig2"> ▸</xref> shows an example JSON input file). Each specific task is derived from from two principal base classes. A CCPEMTask class provides the pure Python wrapper to the application, defining in a generic way the parameters appropriate to the task, which are then translated as inputs to the various APIs of the underlying applications. Workflows can be constructed using these wrappers, allowing tasks to be linked together and/or run in parallel. The second base class, CCPEMWindow, contains the PyQt4 functionality that provides the GUI window. Each CCPEMWindow holds an instance of the relevant CCPEMTask to allow access to the defined input arguments and trigger the activation of a job. A simple PyQt image viewer has been developed to visualize the contents of MRC-format image stacks.</p>
      <p>The software framework has a suite of unit tests to ensure the reliability and reusability of the codebase, and the support programs also have a series of implementation tests to allow autonomous testing of the suite before distribution. It should be noted that the suite has a number of third-party dependencies. These have been selected with care, and are mainstream and well maintained. Every effort has been made to ensure the modularity of the framework such that in the event of a dependency becoming unavailable or unsuitable it could be substituted with an equivalent, either sourced from another third party or developed in-house.</p>
    </sec>
    <sec id="sec2.2">
      <label>2.2.</label>
      <title>Python MRC file library   </title>
      <p>The MRC file format is one of the principal formats for cryo-EM data, and is used in common programs such as <italic>RELION</italic> (Scheres <italic>et al.</italic>, 2008<xref ref-type="bibr" rid="bb38"> ▸</xref>) and for the deposition of experimental volumes in the EMDB (Tagari <italic>et al.</italic>, 2002<xref ref-type="bibr" rid="bb45"> ▸</xref>; Lawson <italic>et al.</italic>, 2016<xref ref-type="bibr" rid="bb26"> ▸</xref>). Closely related to the CCP4 map format, it can be used to store individual micrographs, stacks of two-dimensional images, three-dimensional volumes and stacks of three-dimensional volumes. Several variants of the MRC format had emerged, but recently the developers of several major EM software packages agreed a standardized definition, known as the MRC2014 format (Cheng <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb7"> ▸</xref>), together with a process for agreeing future revisions. In order to allow developers to use MRC files as easily and flexibly as possible, we have written <italic>mrcfile.py</italic>, which is an open-source, stand-alone Python library for the reading, writing and validation of MRC2014 files. It is available in the <italic>ccpem-python</italic> environment (see §<xref ref-type="sec" rid="sec2.3"/>2.3), but can also be obtained separately from PyPI (<ext-link ext-link-type="uri" xlink:href="https://pypi.python.org/pypi/mrcfile">https://pypi.python.org/pypi/mrcfile</ext-link>) or GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/ccpem/mrcfile">https://github.com/ccpem/mrcfile</ext-link>).</p>
      <p>The main design goals of the <italic>mrcfile</italic> Python library are to make data from an MRC file available as a <italic>NumPy</italic> array (van der Walt <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb51"> ▸</xref>) <italic>via</italic> a clear and simple interface, and to allow easy validation of MRC files against the MRC2014 standard. Python’s standard file-handling semantics are used as far as possible; for example, MRC files are opened by calling the <monospace>mrcfile.open()</monospace> function and closed after use by calling <monospace>close()</monospace>. The file header and data arrays are simply accessed <italic>via</italic> header and data fields on the open MRC file object. Files can be validated for compliance with the MRC2014 standard using the <monospace>mrcfile.validate()</monospace> function. Other features include seamless support of gzip-compressed files (as used for maps downloaded from the EMDB) and a memory-mapped file option for fast random access to small chunks of very large files. To make it as simple as possible to install and use, <italic>mrcfile</italic> is written in pure Python (fully compatible with Python versions 2 and 3) and its only dependency is <italic>NumPy</italic>. A brief example of its usage is shown in Fig. 3<xref ref-type="fig" rid="fig3"> ▸</xref>. A full usage guide and a description of the underlying design are available in the online documentation (<ext-link ext-link-type="uri" xlink:href="http://mrcfile.readthedocs.org/">http://mrcfile.readthedocs.org/</ext-link>).</p>
    </sec>
    <sec id="sec2.3">
      <label>2.3.</label>
      <title>Python toolkit for EM   </title>
      <p>A number of other Python modules are available within the <italic>CCP-EM</italic> software framework. These are used internally in the suite, but may also act as a useful toolkit for programmers wishing to write their own scripts. Currently, Python 2.7.11 is packaged with the suite along with specific libraries developed by CCP-EM and collaborators and additional open-source dependencies. The latter include common scientific modules such as <italic>NumPy</italic> (van der Walt <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb51"> ▸</xref>), <italic>SciPy</italic> (Jones <italic>et al.</italic>, 2001<xref ref-type="bibr" rid="bb19"> ▸</xref>), <italic>Biopython</italic> (Cock <italic>et al.</italic>, 2009<xref ref-type="bibr" rid="bb8"> ▸</xref>) and the Python imaging library <italic>Pillow</italic> (<ext-link ext-link-type="uri" xlink:href="https://python-pillow.org">https://python-pillow.org</ext-link>). This Python ‘ecosystem’ can be accessed by invoking <italic>ccpem-python</italic> from the command line.</p>
      <p>Led by the University of York, <italic>clipper-python</italic> has been developed to provide Python bindings to the established C++ Clipper library (Cowtan, 2003<xref ref-type="bibr" rid="bb9"> ▸</xref>), which underpins a number of <italic>CCP</italic>4 programs such as <italic>Buccaneer</italic> (Cowtan, 2006<xref ref-type="bibr" rid="bb10"> ▸</xref>) and which is also used in <italic>Coot</italic> (Emsley <italic>et al.</italic>, 2010<xref ref-type="bibr" rid="bb12"> ▸</xref>). The Clipper library was originally developed to aid the organization of crystallo­graphic data and enhance the performance of crystallographic computation, and as such has many features that are applicable to EM data processing, in particular for high-resolution model building. Of particular relevance is the NXmap class, which is a noncrystallographic map class that stores a map of an arbitrary data type. In contrast to the Xmap crystallo­graphic map class, it is finite in extent and has no symmetry, and is therefore appropriate for EM volumes derived from SPR or tomography (Cowtan, 2003<xref ref-type="bibr" rid="bb9"> ▸</xref>). <italic>clipper-python</italic> exposes many of the C++ arrays as pythonic <italic>NumPy</italic> arrays; this in turn conveniently links the specific objects found in MX and EM (such as map volumes) to the <italic>NumPy</italic> library for the rapid development and deployment of new algorithms.</p>
      <p><italic>ConKit</italic> (Simkovic <italic>et al.</italic>, 2017<xref ref-type="bibr" rid="bb42"> ▸</xref>), developed at the University of Liverpool, is a Python interface for the analysis, manipulation and visualization of evolutionary contact predictions from several alternative algorithms: <italic>HHblits</italic> (Remmert <italic>et al.</italic>, 2012<xref ref-type="bibr" rid="bb34"> ▸</xref>), <italic>JackHMMER</italic> (Johnson <italic>et al.</italic>, 2010<xref ref-type="bibr" rid="bb17"> ▸</xref>), <italic>HHfilter</italic> (Remmert <italic>et al.</italic>, 2012<xref ref-type="bibr" rid="bb34"> ▸</xref>), <italic>CCMpred</italic> (Seemayer <italic>et al.</italic>, 2014<xref ref-type="bibr" rid="bb41"> ▸</xref>), <italic>PSICOV</italic> (Jones <italic>et al.</italic>, 2012<xref ref-type="bibr" rid="bb18"> ▸</xref>) and <italic>bbcontacts</italic> (Andreani &amp; Söding, 2015<xref ref-type="bibr" rid="bb3"> ▸</xref>). This library facilitates the inclusion of additional structure restraints inferred from deep-sequencing data, based on contact predictions made by external programs and provided in one of a number of data formats. Initial efforts using this approach for guiding models into cryo-EM density have proved successful (Schep <italic>et al.</italic>, 2016<xref ref-type="bibr" rid="bb37"> ▸</xref>).</p>
    </sec>
  </sec>
  <sec id="sec3">
    <label>3.</label>
    <title>Graphical user interface and job management   </title>
    <p>Initial interfaces have been provided for a series of model-building tools applicable to high-to-medium-resolution (&lt;10 Å) volumes. These tasks can be accessed <italic>via</italic> the control GUI, as stand­alone task GUIs or <italic>via</italic> the CLI. The control GUI (Fig. 4<xref ref-type="fig" rid="fig4"> ▸</xref>) contains simple project-management utilities allowing users to create new projects, record a chronological list of jobs and monitor the status of ongoing processes. Details of projects and jobs are stored in an SQLite database that is integrated <italic>via</italic> PyQt4/Qt4 bindings. The GUI is designed such that jobs are launched as detached, separate processes, so that the main GUI thread can be launched and terminated without interfering with long-running subtasks that are launched from it.</p>
    <p>Each new project created by a user is stored in a separate directory, and child tasks of that project are stored in individual subdirectories. The top project directory stores the SQLite database file used to record the following information for each task: incremental job number, date and time of job initiation and completion, task type, task name, job location and current status. Clicking on the task entry launches its task window. The left-hand toolbar launches a new instance of the selected task. If Test mode is selected, new tasks will be preloaded with parameters and data from that task’s unit test to allow new users to trial an application and examine the expected output.</p>
    <p>Each task window has a similar basic layout (Fig. 4<xref ref-type="fig" rid="fig4"> ▸</xref>), with a toolbar and four main tabs: Setup, Pipeline, Launcher and Results. The toolbar provides a Run button for launching the task, a New button for cloning the current task (<italic>i.e.</italic> preserving any defined inputs) and a Load button for opening previous runs. The Coot, CCP4mg and Chimera buttons provide quick links to commonly used molecular-graphics programs. The Terminal and Output buttons launch a terminal or file-browser instance in the task’s subdirectory to allow rapid file navigation, whilst the Info button displays a brief description of the task and provides clickable hyperlinks to the task’s online documentation. Finally, there is a Kill button for terminating the task and a green hexagon status indicator. The status indicator is grey when ready, spins when running and is coloured green on successful completion of the task or red upon failure.</p>
    <p>The Setup tab allows input parameters to be entered by the user. Appropriate defaults are used wherever possible and required user input is highlighted in red. Each input has a tooltip, which is visible upon mouse hover and gives a brief description to aid new users. Programs originally developed for the <italic>CCP</italic>4 suite have keyworded input for specifying extended functionality where appropriate.</p>
    <p>The Pipeline tab shows the individual jobs that make up the task. For example, in the <italic>MOLREP</italic> task three processes are launched in series. Initially <italic>SFCHECK</italic> (Vaguine <italic>et al.</italic>, 1999<xref ref-type="bibr" rid="bb49"> ▸</xref>) analyzes the input <monospace>.mrc</monospace> file, followed by the main <italic>MOLREP</italic> (Vagin &amp; Teplyakov, 2010<xref ref-type="bibr" rid="bb48"> ▸</xref>) process and finally a third <italic>SFCHECK</italic> process comparing the fitted structure with the input map. The status of each subprocess is colour-coded: grey for ready, blue for running and green for finished. Clicking on each job displays information in the right-hand widget, including the job’s log file. Double-clicking on the log file opens the text file in the user’s standard editor. If the standard error file of the job process is greater than 0 bytes in size then it is also displayed to alert the user to potential problems.</p>
    <p>The Launcher tab highlights important files associated with the task, for example in the <italic>REFMAC</italic> (Murshudov <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb28"> ▸</xref>) refinement task the input PDB and map files are shown along with the refined output PDB file. A brief description of each file is given and double-clicking will launch an appropriate application to view the file. For standard files (for example text or PDF files) the user’s normal desktop application will be launched, while for structural biology files (<italic>e.g.</italic> coordinate files or map volumes) the user can select their preferred molecular-graphics (MG) program from a list of those available. Clicking Open Selected will open all selected files at once, allowing the rapid visualization of the results of a task.</p>
    <p>Molecular-graphics integration is provided for three of the most common MG programs: <italic>Coot</italic> (Emsley <italic>et al.</italic>, 2010<xref ref-type="bibr" rid="bb12"> ▸</xref>), <italic>Chimera</italic> (Pettersen <italic>et al.</italic>, 2004<xref ref-type="bibr" rid="bb33"> ▸</xref>) and <italic>CCP</italic>4<italic>mg</italic> (McNicholas <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb27"> ▸</xref>). <italic>Coot</italic> is packaged with <italic>CCP-EM</italic>, while the others are used if available. (<italic>CCP-EM</italic> searches the system paths to find the expected MG executable, or users can explicitly set this path <italic>via</italic> the <italic>CCP-EM</italic> settings.) In the simplest cases, tasks will launch the MG program and the selected files will be automatically loaded. However, for some tasks specialized run scripts have been produced. For example, the <italic>MRC to MTZ</italic> task loads all calculated map coefficients in <italic>Coot</italic> so that different degrees of sharpening and blurring can be compared (see §<xref ref-type="sec" rid="sec4.8"/>4.8), the <italic>TEMPy:DiffMap</italic> task loads scaled maps into <italic>Chimera</italic> and the <italic>DockEM</italic> task allows selections of best hits to be displayed in <italic>Chimera</italic>.</p>
    <p>Finally, the Results tab uses a PyQt Webkit widget to display an HTML file of the task’s results. This HTML file is produced by the <italic>jsrview</italic> package from <italic>CCP</italic>4 (Winn <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb54"> ▸</xref>) <italic>via</italic> its Python bindings <italic>pyrvapi</italic> (log files from <italic>CCP</italic>4-derived programs are pre-processed using the <italic>CCP</italic>4 smartie library; Briggs, 2007<xref ref-type="bibr" rid="bb5"> ▸</xref>). The <italic>jsrview</italic> package was initially developed by E. Krissinel to support dynamic HTML output in <italic>CCP</italic>4’s <italic>jsPISA</italic> webserver (Krissinel, 2015<xref ref-type="bibr" rid="bb23"> ▸</xref>). This package allows a developer to create dynamic and interactive HTML pages using a library of high-level C functions featuring various graphical widgets (such as plots, molecular graphics, tables, buttons, comboboxes <italic>etc.</italic>) and nested layouts (tabs, folders and grids). The functions generate a task file with a pseudo-program for a real-time JavaScript interpreter, based on jQuery, which is loaded in the browser widget using a bootstrap HTML page. The package may be used in programs written in C, C++ and Fortran, as well as Python through the set of corresponding bindings. The resulting output may be served either from the local file system or <italic>via</italic> a remote server. This would allow <italic>CCP-EM</italic> to efficiently transfer to web-based applications in the future if required.</p>
  </sec>
  <sec id="sec4">
    <label>4.</label>
    <title><italic>CCP-EM</italic> tasks   </title>
    <p>The initial set of applications in the <italic>CCP-EM</italic> suite is focused primarily on model building into volumes derived from single-particle reconstruction and high-resolution subtomogram averaging. Fig. 5<xref ref-type="fig" rid="fig5"> ▸</xref> shows in detail the task for refinement of atomic models, while Fig. 6<xref ref-type="fig" rid="fig6"> ▸</xref> gives an overview of possible routes through the suite.</p>
    <p>If a user has an appropriate atomic model available, such as a homologous domain from a high-resolution crystal structure, then either <italic>MOLREP</italic> (Vagin &amp; Teplyakov, 2010<xref ref-type="bibr" rid="bb48"> ▸</xref>) or <italic>DockEM</italic> (Roseman, 2000<xref ref-type="bibr" rid="bb36"> ▸</xref>) can be used to dock the structure into the cryo-EM volume. If no atomic model is available then <italic>Buccaneer</italic> (Cowtan, 2006<xref ref-type="bibr" rid="bb10"> ▸</xref>) can be used for <italic>de novo</italic> model building. The next step is to refine the structure, <italic>i.e.</italic> to optimize the fit of the atomic model to both the experimental volume and the established stereochemical restraints. Either <italic>Flex-EM</italic> (Topf <italic>et al.</italic>, 2008<xref ref-type="bibr" rid="bb46"> ▸</xref>) or <italic>REFMAC</italic> (Murshudov <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb28"> ▸</xref>) can be employed here. Initially developed for low-resolution crystallography, additional structural restraints can be helpful when the information content in the map density is low. <italic>ProSMART</italic> (Nicholls <italic>et al.</italic>, 2012<xref ref-type="bibr" rid="bb29"> ▸</xref>) can used to generate such additional restraints for <italic>REFMAC</italic>. <italic>Flex-EM</italic> requires rigid-body definitions and these can be produced using the helper program <italic>RIBFIND</italic> (Pandurangan &amp; Topf, 2012<italic>a</italic>
<xref ref-type="bibr" rid="bb30"> ▸</xref>,<italic>b</italic>
<xref ref-type="bibr" rid="bb31"> ▸</xref>). <italic>CCP-EM</italic> also includes the <italic>TEMPy</italic> library (Farabella <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb13"> ▸</xref>), and task interfaces for <italic>TEMPy:DiffMap</italic> (difference map) and <italic>TEMPy:SMOC</italic> (Segment-based Manders’ Overlap Coefficient) for structural validation are provided.</p>
    <p>Other general utility tasks that are provided include <italic>MRC to MTZ</italic> for the conversion of map files to structure factors, and <italic>MRCEdit</italic> for viewing and editing MRC header information. <italic>CCP-EM</italic> also maintains the MRC image-processing system (Crowther <italic>et al.</italic>, 1996<xref ref-type="bibr" rid="bb11"> ▸</xref>), and GUIs are provided for the <italic>mrc</italic>2<italic>tif</italic> and <italic>mrcallspacea</italic> routines.</p>
    <sec id="sec4.1">
      <label>4.1.</label>
      <title><italic>MOLREP</italic>   </title>
      <p><italic>MOLREP</italic> (Vagin &amp; Teplyakov, 2010<xref ref-type="bibr" rid="bb48"> ▸</xref>) was originally developed as an automated program for molecular replacement in <italic>CCP</italic>4 and has since been adapted for rigid-body docking into cryo-EM maps. It was extensively used by Amunts <italic>et al.</italic> (2014<xref ref-type="bibr" rid="bb2"> ▸</xref>) for the placement of homologous structures into the yeast mitochondrial large ribosomal subunit and other large complexes (for further methodological details, see Brown <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb6"> ▸</xref>). <italic>MOLREP</italic> works in reciprocal space, is relatively fast and is best suited to high-resolution maps. Although by default the single best-fit structure is returned, multiple solutions can be examined by specifying the number of copies expected in the cryo-EM volume. <italic>MOLREP</italic> uses a rotation function with a phased translation function. A spherically averaged phased translation function can also be used in which the centre of mass of the input model is found before optimizing the orientation (Vagin &amp; Isupov, 2001<xref ref-type="bibr" rid="bb47"> ▸</xref>), which can be advantageous when using distantly related search models or with lower resolution maps.</p>
    </sec>
    <sec id="sec4.2">
      <label>4.2.</label>
      <title><italic>DockEM</italic>   </title>
      <p><italic>DockEM</italic> (Roseman, 2000<xref ref-type="bibr" rid="bb36"> ▸</xref>) is an exhaustive rigid-body docking algorithm. With a defined angular sweep, all possible orientations of the search model are examined within a defined area of the target map and the cross-correlation (CC) score is calculated. The top ten best poses are returned (as ranked by CC) and can be selected to be viewed in <italic>Chimera</italic>. Once the <italic>DockEM</italic> scoring has been completed, the analysis can be repeated to return more poses and/or the peak radius, which defines the exclusion threshold for neighbouring solutions, can be altered.</p>
      <p>Owing to the exhaustive nature of <italic>DockEM</italic> it is slower than <italic>MOLREP</italic>, but it is useful for low-resolution data sets where <italic>MOLREP</italic> cannot produce an unambiguous solution. The scoring function, along with visualization in <italic>Chimera</italic>, allows users to consider the relative quality of multiple possible fits.</p>
    </sec>
    <sec id="sec4.3">
      <label>4.3.</label>
      <title><italic>Buccaneer</italic>   </title>
      <p><italic>Buccaneer</italic> (Cowtan, 2006<xref ref-type="bibr" rid="bb10"> ▸</xref>) is used for automated <italic>de novo</italic> model building and originates from the <italic>CCP</italic>4 suite. Required inputs are an EM map (MRC format) and an expected sequence (FASTA format or similar). Partial PDB models can also be specified for extension by the program. The <italic>Buccaneer</italic> pipeline runs multiple iterations of statistical chain tracing (identifying connected C<sup>α</sup> atoms and docking sequence) followed by coordinate refinement using <italic>REFMAC</italic>. Currently, input maps should have a resolution of ∼5 Å or better. Users can adjust the overall sharpening level, and this can significantly improve the number of residues that are able to be correctly positioned. Models built by <italic>Buccaneer</italic> can be loaded into <italic>Coot</italic> for validation and further manual model building.</p>
    </sec>
    <sec id="sec4.4">
      <label>4.4.</label>
      <title><italic>Flex-EM</italic>   </title>
      <p><italic>Flex-EM</italic> (Topf <italic>et al.</italic>, 2008<xref ref-type="bibr" rid="bb46"> ▸</xref>; Joseph <italic>et al.</italic>, 2016<xref ref-type="bibr" rid="bb21"> ▸</xref>) provides flexible fitting of rigid-body domains against EM volumes using real-space restraints. It requires an atomic model that has been rigid-body fitted and the corresponding map. Rigid-body domains must also be supplied, either defined manually or by using the <italic>RIBFIND</italic> task. <italic>Flex-EM</italic> is suitable for medium-resolution data sets, ∼15 Å or better, and two modes of refinement are available: conjugate-gradient minimization (CG) and simulated-annealing molecular dynamics (MD). By default, Ramachandran φ–ψ restraints are included, but these can be switched off as required. The CCF score (real-space cross-correlation) is recorded per iteration and is shown in the Results tab. <italic>Flex-EM</italic> is an extension of <italic>Modeller</italic> (Webb &amp; Sali, 2016<xref ref-type="bibr" rid="bb53"> ▸</xref>) and requires <italic>Modeller</italic> to be installed separately (<ext-link ext-link-type="uri" xlink:href="https://www.salilab.org/modeller/">https://www.salilab.org/modeller/</ext-link>).</p>
    </sec>
    <sec id="sec4.5">
      <label>4.5.</label>
      <title><italic>RIBFIND</italic>   </title>
      <p><italic>RIBFIND</italic> was developed by Pandurangan &amp; Topf (2012<italic>a</italic>
<xref ref-type="bibr" rid="bb30"> ▸</xref>,<italic>b</italic>
<xref ref-type="bibr" rid="bb31"> ▸</xref>) to cluster rigid-body domains for <italic>Flex-EM</italic>. <italic>DSSP</italic> (Kabsch &amp; Sander, 1983<xref ref-type="bibr" rid="bb22"> ▸</xref>) is used to identify secondary-structure elements (SSEs) <italic>via</italic> neighbourhood-based clustering. The number of SSEs generated by the clustering is tuneable <italic>via</italic> two spatial proximity parameters: the residue-contact distance, which represents the contact between any two residues (side-chain centroid–centroid distance) enforcing the minimum distance between the clustered SSEs, and the cluster cutoff, which clusters any two SSEs based on the percentage of residues in contact with them. The contact distance is set as an <italic>a priori</italic> input and the cluster cutoff can be tuned visually, post-processing, using a <italic>JSmol</italic> (Hanson <italic>et al.</italic>, 2013<xref ref-type="bibr" rid="bb15"> ▸</xref>) plugin widget.</p>
    </sec>
    <sec id="sec4.6">
      <label>4.6.</label>
      <title><italic>REFMAC</italic>   </title>
      <p><italic>REFMAC</italic> has been used extensively for high-resolution structure refinement of macromolecules against X-ray crystallographic data (Murshudov <italic>et al.</italic>, 2011<xref ref-type="bibr" rid="bb28"> ▸</xref>). It has recently been re-optimized for use with high-resolution EM maps from SPRs (Brown <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb6"> ▸</xref>). <italic>REFMAC</italic> uses a maximum-likelihood target function to simultaneously optimize the agreement of the input model with the experimental density and with expected stereochemical restraints. Here, the experimental gradients are calculated in reciprocal space. This has several advantages compared with real-space refinement beyond the convenience of use for pre-existing MX-derived applications, which include the following: all parameters can be refined against all data, resolution-dependent weighting can be applied, and overall quality metrics, in particular Fourier shell correlation (FSC), become available (Brown <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb6"> ▸</xref>). Real-space refinement also has advantages such as local parameter optimization and rapid local adjustments (for example rotamer searches), and allows user visualization and intervention. Therefore, it is recommended that <italic>REFMAC</italic> is used in concert with the real-space refinement and validation routines available in <italic>Coot</italic>, and the <italic>CCP-EM</italic> GUI provides quick launching from the <italic>REFMAC</italic> task window for this.</p>
      <p>For use with EM data, the <italic>REFMAC</italic> process itself requires some data manipulation. The <italic>CCP-EM</italic> task (Fig. 5<xref ref-type="fig" rid="fig5"> ▸</xref>) uses the pipeline functionality to handle this automatically for the convenience of the user. The input map (<monospace>.mrc</monospace>) is converted internally to structure factors (<monospace>.mtz</monospace>) and map sharpening can be applied at this point. If selected, the ‘find in map’ option will add a <italic>MOLREP</italic> process to the pipeline to perform rigid-body docking. The ‘local’ refinement mode extracts the map volume around the input model coordinates and refines against this volume only (as opposed to the whole volume). This is useful for very large systems or where atomic models are only available for specific domains; however, careful manipulation is required to place the refined model back into the correct orientation (with respect to the whole volume) and this is handled automatically after refinement in the <italic>CCP-EM</italic> pipeline. If the macromolecule includes nucleic acids, <italic>LIBG</italic> (Brown <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb6"> ▸</xref>) can be added to the pipeline to automatically generate additional restraints to maintain base pairing and stacking. Finally, if appropriate half-maps are available after three-dimensional map reconstruction, cross-validation processes, as described by Brown <italic>et al.</italic> (2015<xref ref-type="bibr" rid="bb6"> ▸</xref>), are added to the pipeline and run automatically.</p>
      <p><italic>REFMAC</italic> has a number of other options which are helpful for EM refinement and are exposed in the <italic>CCP-EM</italic> task window. These include setting the relative weight of the experimental and stereochemical restraints (along with an option to automatically determine weights), pre-refinement map sharpening and the use of additional restraints, including jelly-body restraints or external restraints from <italic>ProSMART</italic>.</p>
    </sec>
    <sec id="sec4.7">
      <label>4.7.</label>
      <title><italic>ProSMART</italic>   </title>
      <p><italic>ProSMART</italic> (<italic>Procrustes Structural Matching Alignment and Restraint Tool</italic>) was originally developed by Nicholls <italic>et al.</italic> (2012<xref ref-type="bibr" rid="bb29"> ▸</xref>) to aid the modelling of low-resolution X-ray structures <italic>via</italic> the generation of additional restraints, and has since been successfully applied to model refinement from cryo-EM data (Brown <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb6"> ▸</xref>). The external restraints generated by <italic>ProSMART</italic> can be added to <italic>REFMAC</italic> to supplement its standard dictionary of restraints. The additional interatomic distances can be generated in a number of ways: from high-resolution homologous structures, secondary-structure restraints or multiple chains within the target model, or the modelled structure can be self-restrained to the current conformation. The <italic>CCP-EM</italic> task allows the generation of these restraints, which can then be visualized in <italic>Coot</italic> and edited as required. They can be then be added to the <italic>REFMAC</italic> process <italic>via</italic> the input in the ‘external restraints’ section of the setup task.</p>
    </sec>
    <sec id="sec4.8">
      <label>4.8.</label>
      <title><italic>Map to MTZ</italic>   </title>
      <p>This task runs the ‘sfcalc’ mode of <italic>REFMAC</italic> and has two specific roles: the conversion of real-space maps in MRC format to reciprocal-space structure factors in MTZ format, and map sharpening/blurring (Nicholls <italic>et al.</italic>, 2012<xref ref-type="bibr" rid="bb29"> ▸</xref>). Presently, the optimum sharpening coefficient (where ‘optimum’ means maximizing the interpretable density features) cannot be analytically determined either locally or globally, although attempts are ongoing. Visual inspection of maps with different sharpening factors, however, reveal significant differences, which can impact both manual and automated model building. Therefore, the <italic>Map to MTZ</italic>
<italic>CCP-EM</italic> task applies an array of sharpening factors for assessment. A Wilson plot is displayed, allowing inspection of potential truncation pathologies arising from over-sharpening (Nicholls <italic>et al.</italic>, 2012<xref ref-type="bibr" rid="bb29"> ▸</xref>), and the task is linked to <italic>Coot</italic> for visual inspection. This process is recommended for new data sets and it should be noted that local areas may have different optimal sharpening values.</p>
    </sec>
    <sec id="sec4.9">
      <label>4.9.</label>
      <title><italic>TEMPy</italic>   </title>
      <p><italic>TEMPy</italic> implements a wide variety of scoring functions for model-to-map and map-to-map fits (Vasishtan &amp; Topf, 2011<xref ref-type="bibr" rid="bb50"> ▸</xref>; Farabella <italic>et al.</italic>, 2015<xref ref-type="bibr" rid="bb13"> ▸</xref>; Joseph <italic>et al.</italic>, 2017<xref ref-type="bibr" rid="bb20"> ▸</xref>), as well as other functions for map and model manipulations. It was designed as a Python library with a series of command-line scripts for useful routines. The <italic>CCP-EM</italic> suite currently has two <italic>TEMPy</italic> interfaces: <italic>TEMPy:DiffMap</italic> and <italic>TEMPy:SMOC</italic>. <italic>TEMPy:DiffMap</italic> produces difference density maps <italic>via</italic> the scaled subtraction of two experimental maps or an experimental map and a coordinate model (where the model is converted into a calculated volume). <italic>TEMPy:SMOC</italic> (Segment-based Manders’ Overlap Coefficient) is a local validation metric that produces a correlation score per residue calculated on segments of overlapping residue windows. This method of calculating localized fit to density can alert users to areas of a model which require attention, and is particularly suited to medium-resolution data sets (∼4–10 Å).</p>
    </sec>
    <sec id="sec4.10">
      <label>4.10.</label>
      <title>MRC image-processing system   </title>
      <p>The MRC–LMB have provided a comprehensive software library for EM since the early days (Crowther <italic>et al.</italic>, 1996<xref ref-type="bibr" rid="bb11"> ▸</xref>), together with a large set of programs and utilities (for example <italic>XIMDISP</italic>; Smith, 1999<xref ref-type="bibr" rid="bb43"> ▸</xref>). <italic>CCP-EM</italic> has taken over long-term maintenance of this software and it is distributed as part of the suite. The majority of the routines are written in Fortran and are available <italic>via</italic> a CLI; however, two programs (<italic>mrc</italic>2<italic>tif</italic> and <italic>mrcallspacea</italic>) have <italic>CCP-EM</italic> GUIs and more will be produced if requested by the community.</p>
    </sec>
  </sec>
  <sec id="sec5">
    <label>5.</label>
    <title>Availability and future plans   </title>
    <p>Currently, <italic>CCP-EM</italic> binary installations are available to download from <ext-link ext-link-type="uri" xlink:href="http://www.ccpem.ac.uk">http://www.ccpem.ac.uk</ext-link> and are available for 64-bit Linux and Apple platforms, with plans to extend to 64-bit Windows in the near future. The Linux distributions are built on a nightly basis using a Jenkins CI (continuous integration) platform hosted by SESC Build Service (STFC). This autonomous system compiles the code, runs the unit tests and reports the status of the distribution, highlighting any potential errors that have inadvertently been introduced. This allows the rapid development and deployment of new functionality.</p>
    <p>Here, we have described the current functionality of the <italic>CCP-EM</italic> software suite, which is focused on the fitting and building of atomic models, while also providing generic tools for manipulating and visualizing image and volume data. We are currently working on extending the range of applications for single-particle reconstruction, and have plans to cover subtomogram averaging as well. We are working closely with the EMDB (Patwardhan, 2017<xref ref-type="bibr" rid="bb32"> ▸</xref>) on providing tools for map and model validation as part of structure determination, <italic>i.e.</italic> to be applied prior to deposition (Henderson <italic>et al.</italic>, 2012<xref ref-type="bibr" rid="bb16"> ▸</xref>). Documentation on the <italic>CCP-EM</italic> software is available from the website, and further information, feedback and user questions can be obtained from the mailing list at <ext-link ext-link-type="uri" xlink:href="http://www.jiscmail.ac.uk/CCPEM">http://www.jiscmail.ac.uk/CCPEM</ext-link>. Software developers who wish to discuss including their programs in the <italic>CCP-EM</italic> distribution should contact the authors of this article.</p>
  </sec>
</body>
<back>
  <ack>
    <p>We would like to thank the UK Medical Research Council for the award of Partnership Grants MR/J000825/1 and MR/N009614/1 to support the work of CCP-EM. We thank Alan Roseman, Maya Topf, Kevin Cowtan, Garib Murshudov, Oleg Kovalevskiy, Ardan Patwardhan, Eugene Krissinel, Jude Short, Agnel Joseph, Arun Prasad Pandurangan and many others for their contributions to the suite. We also thank the Research Complex at Harwell for hosting the core CCP-EM team, and the EPSRC-funded CCPForge service for hosting the developmental version of the <italic>CCP-EM</italic> software. Finally, we are very grateful to the members of the cryo-EM community for their support of the project.</p>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="bb1">
      <mixed-citation publication-type="other">Adams, P. D. <italic>et al.</italic> (2010). <italic>Acta Cryst.</italic> D<bold>66</bold>, 213–221.</mixed-citation>
    </ref>
    <ref id="bb2">
      <mixed-citation publication-type="other">Amunts, A., Brown, A., Bai, X.-C., Llácer, J. L., Hussain, T., Emsley, P., Long, F., Murshudov, G., Scheres, S. H. W. &amp; Ramakrishnan, V. (2014). <italic>Science</italic>, <bold>343</bold>, 1485–1489. (2014). </mixed-citation>
    </ref>
    <ref id="bb3">
      <mixed-citation publication-type="other">Andreani, J. &amp; Söding, J. (2015). <italic>Bioinformatics</italic>, <bold>31</bold>, 1729–1737.</mixed-citation>
    </ref>
    <ref id="bb4">
      <mixed-citation publication-type="other">Biyani, N., Righetto, R. D., McLeod, R., Caujolle-Bert, D., Castano-Diez, D., Goldie, K. N. &amp; Stahlberg, H. (2017). <italic>J. Struct. Biol.</italic>
<bold>198</bold>, 124–133.</mixed-citation>
    </ref>
    <ref id="bb5">
      <mixed-citation publication-type="other">Briggs, P. (2007). <italic>CCP4 Newsl. Protein Crystallogr.</italic>
<bold>46</bold>, contribution 5.</mixed-citation>
    </ref>
    <ref id="bb6">
      <mixed-citation publication-type="other">Brown, A., Long, F., Nicholls, R. A., Toots, J., Emsley, P. &amp; Murshudov, G. (2015). <italic>Acta Cryst.</italic> D<bold>71</bold>, 136–153.</mixed-citation>
    </ref>
    <ref id="bb7">
      <mixed-citation publication-type="other">Cheng, A., Henderson, R., Mastronarde, D., Ludtke, S. J., Schoenmakers, R. H., Short, J., Marabini, R., Dallakyan, S., Agard, D. &amp; Winn, M. D. (2015). <italic>J. Struct. Biol.</italic>
<bold>192</bold>, 146–150.</mixed-citation>
    </ref>
    <ref id="bb8">
      <mixed-citation publication-type="other">Cock, P. J. A., Antao, T., Chang, J. T., Chapman, B. A., Cox, C. J., Dalke, A., Friedberg, I., Hamelryck, T., Kauff, F., Wilczynski, B. &amp; de Hoon, M. J. L. (2009). <italic>Bioinformatics</italic>, <bold>25</bold>, 1422–1423.</mixed-citation>
    </ref>
    <ref id="bb9">
      <mixed-citation publication-type="other">Cowtan, K. (2003). <italic>IUCr Comput. Comm. Newsl.</italic>
<bold>2</bold>, 4–9.</mixed-citation>
    </ref>
    <ref id="bb10">
      <mixed-citation publication-type="other">Cowtan, K. (2006). <italic>Acta Cryst.</italic> D<bold>62</bold>, 1002–1011.</mixed-citation>
    </ref>
    <ref id="bb11">
      <mixed-citation publication-type="other">Crowther, R. A., Henderson, R. &amp; Smith, J. M. (1996). <italic>J. Struct. Biol.</italic>
<bold>116</bold>, 9–16.</mixed-citation>
    </ref>
    <ref id="bb12">
      <mixed-citation publication-type="other">Emsley, P., Lohkamp, B., Scott, W. G. &amp; Cowtan, K. (2010). <italic>Acta Cryst.</italic> D<bold>66</bold>, 486–501.</mixed-citation>
    </ref>
    <ref id="bb13">
      <mixed-citation publication-type="other">Farabella, I., Vasishtan, D., Joseph, A. P., Pandurangan, A. P., Sahota, H. &amp; Topf, M. (2015). <italic>J. Appl. Cryst.</italic>
<bold>48</bold>, 1314–1323.</mixed-citation>
    </ref>
    <ref id="bb15">
      <mixed-citation publication-type="other">Hanson, R. M., Prilusky, J., Renjian, Z., Nakane, T. &amp; Sussman, J. L. (2013). <italic>Isr. J. Chem.</italic>
<bold>53</bold>, 207–216.</mixed-citation>
    </ref>
    <ref id="bb16">
      <mixed-citation publication-type="other">Henderson, R. <italic>et al.</italic> (2012). <italic>Structure</italic>, <bold>20</bold>, 205–214.</mixed-citation>
    </ref>
    <ref id="bb17">
      <mixed-citation publication-type="other">Johnson, S., Eddy, S. R. &amp; Portugaly, E. (2010). <italic>BMC Bioinformatics</italic>, <bold>11</bold>, 431–438.</mixed-citation>
    </ref>
    <ref id="bb18">
      <mixed-citation publication-type="other">Jones, D. T., Buchan, D. W. A., Cozzetto, D. &amp; Pontil, M. (2011). <italic>Bioinformatics</italic>, <bold>28</bold>, 184–190.</mixed-citation>
    </ref>
    <ref id="bb19">
      <mixed-citation publication-type="other">Jones, E. <italic>et al.</italic> (2001). <italic>SciPy.</italic> http://www.scipy.org.</mixed-citation>
    </ref>
    <ref id="bb20">
      <mixed-citation publication-type="other">Joseph, A. P., Lagerstedt, I., Patwardhan, A., Topf, M. &amp; Winn, M. D. (2017). <italic>J. Struct. Biol.</italic>
<bold>195</bold>, 294–305.</mixed-citation>
    </ref>
    <ref id="bb21">
      <mixed-citation publication-type="other">Joseph, A. P., Malhotra, S., Burnley, T., Wood, C., Clare, D. K., Winn, M. &amp; Topf, M. (2016). <italic>Methods</italic>, <bold>100</bold>, 42–49.</mixed-citation>
    </ref>
    <ref id="bb22">
      <mixed-citation publication-type="other">Kabsch, W. &amp; Sander, C. (1983). <italic>Biopolymers</italic>, <bold>22</bold>, 2577–2637.</mixed-citation>
    </ref>
    <ref id="bb23">
      <mixed-citation publication-type="other">Krissinel, E. (2015). <italic>Nucleic Acids Res.</italic>
<bold>43</bold>, W314–W319.</mixed-citation>
    </ref>
    <ref id="bb24">
      <mixed-citation publication-type="other">Kühlbrandt, W. (2014). <italic>Science</italic>, <bold>343</bold>, 1443–1444.</mixed-citation>
    </ref>
    <ref id="bb25">
      <mixed-citation publication-type="other">Lander, G. C., Stagg, S. M., Voss, N. R., Cheng, A., Fellmann, D., Pulokas, J., Yoshioka, C., Irving, C., Mulder, A., Lau, P.-W., Lyumkis, D., Potter, C. S. &amp; Carragher, B. (2009). <italic>J. Struct. Biol.</italic>
<bold>166</bold>, 95–102.</mixed-citation>
    </ref>
    <ref id="bb26">
      <mixed-citation publication-type="other">Lawson, C. L., Patwardhan, A., Baker, M. L., Hryc, C., Garcia, E. S., Hudson, B. P., Lagerstedt, I., Ludtke, S. J., Pintilie, G., Sala, R., Westbrook, J. D., Berman, H. M., Kleywegt, G. J. &amp; Chiu, W. (2016). <italic>Nucleic Acids Res.</italic>
<bold>44</bold>, D396–D403.</mixed-citation>
    </ref>
    <ref id="bb27">
      <mixed-citation publication-type="other">McNicholas, S., Potterton, E., Wilson, K. S. &amp; Noble, M. E. M. (2011). <italic>Acta Cryst.</italic> D<bold>67</bold>, 386–394.</mixed-citation>
    </ref>
    <ref id="bb28">
      <mixed-citation publication-type="other">Murshudov, G. N., Skubák, P., Lebedev, A. A., Pannu, N. S., Steiner, R. A., Nicholls, R. A., Winn, M. D., Long, F. &amp; Vagin, A. A. (2011). <italic>Acta Cryst.</italic> D<bold>67</bold>, 355–367.</mixed-citation>
    </ref>
    <ref id="bb29">
      <mixed-citation publication-type="other">Nicholls, R. A., Long, F. &amp; Murshudov, G. N. (2012). <italic>Acta Cryst.</italic> D<bold>68</bold>, 404–417.</mixed-citation>
    </ref>
    <ref id="bb30">
      <mixed-citation publication-type="other">Pandurangan, A. P. &amp; Topf, M. (2012<italic>a</italic>). <italic>J. Struct. Biol.</italic>
<bold>177</bold>, 520–531.</mixed-citation>
    </ref>
    <ref id="bb31">
      <mixed-citation publication-type="other">Pandurangan, A. P. &amp; Topf, M. (2012<italic>b</italic>). <italic>Bioinformatics</italic>, <bold>28</bold>, 2391–2393.</mixed-citation>
    </ref>
    <ref id="bb32">
      <mixed-citation publication-type="other">Patwardhan, A. (2017). <italic>Acta Cryst.</italic> D<bold>73</bold>, 503–508.</mixed-citation>
    </ref>
    <ref id="bb33">
      <mixed-citation publication-type="other">Pettersen, E. F., Goddard, T. D., Huang, C. C., Couch, G. S., Greenblatt, D. M., Meng, E. C. &amp; Ferrin, T. E. (2004). <italic>J. Comput. Chem.</italic>
<bold>25</bold>, 1605–1612.</mixed-citation>
    </ref>
    <ref id="bb34">
      <mixed-citation publication-type="other">Remmert, M., Biegert, A., Hauser, A. &amp; Söding, J. (2012). <italic>Nature Methods</italic>, <bold>9</bold>, 173–175.</mixed-citation>
    </ref>
    <ref id="bb35">
      <mixed-citation publication-type="other">Rosa-Trevín, J. M. de la <italic>et al.</italic> (2016). <italic>J. Struct. Biol.</italic>
<bold>195</bold>, 93–99.</mixed-citation>
    </ref>
    <ref id="bb36">
      <mixed-citation publication-type="other">Roseman, A. M. (2000). <italic>Acta Cryst.</italic> D<bold>56</bold>, 1332–1340.</mixed-citation>
    </ref>
    <ref id="bb37">
      <mixed-citation publication-type="other">Schep, D. G., Zhaoa, J., John, L. &amp; Rubinstein, J. L. (2016). <italic>Proc. Natl Acad. Sci. USA</italic>, <bold>113</bold>, 3245–3250.</mixed-citation>
    </ref>
    <ref id="bb38">
      <mixed-citation publication-type="other">Scheres, S. H. W., Núñez-Ramírez, R., Sorzano, C. O. S., Carazo, J. M. &amp; Marabini, R. (2008). <italic>Nature Protoc.</italic>
<bold>3</bold>, 977–990.</mixed-citation>
    </ref>
    <ref id="bb41">
      <mixed-citation publication-type="other">Seemayer, S., Gruber, M. &amp; Söding, J. (2014). <italic>Bioinformatics</italic>, <bold>30</bold>, 3128–3130.</mixed-citation>
    </ref>
    <ref id="bb42">
      <mixed-citation publication-type="other">Simkovic, F., Thomas, J. M. H. &amp; Rigden, D. J. (2017). <italic>Bioinformatics</italic>, https://doi.org/10.1093/bioinformatics/btx148.</mixed-citation>
    </ref>
    <ref id="bb43">
      <mixed-citation publication-type="other">Smith, J. M. (1999). <italic>J. Struct. Biol.</italic>
<bold>125</bold>, 223–228.</mixed-citation>
    </ref>
    <ref id="bb44">
      <mixed-citation publication-type="other">Stuart, D. I., Subramaniam, S. &amp; Abrescia, N. G. A. (2016). <italic>Nature Methods</italic>, <bold>13</bold>, 607–608.</mixed-citation>
    </ref>
    <ref id="bb45">
      <mixed-citation publication-type="other">Tagari, M., Newman, R., Chagoyen, M., Carazo, J. M. &amp; Henrick, K. (2002). <italic>Trends Biochem. Sci.</italic>
<bold>27</bold>, 589.</mixed-citation>
    </ref>
    <ref id="bb46">
      <mixed-citation publication-type="other">Topf, M., Lasker, K., Webb, B., Wolfson, H., Chiu, W. &amp; Sali, A. (2008). <italic>Structure</italic>, <bold>16</bold>, 295–307.</mixed-citation>
    </ref>
    <ref id="bb47">
      <mixed-citation publication-type="other">Vagin, A. A. &amp; Isupov, M. N. (2001). <italic>Acta Cryst.</italic> D<bold>57</bold>, 1451–1456.</mixed-citation>
    </ref>
    <ref id="bb48">
      <mixed-citation publication-type="other">Vagin, A. &amp; Teplyakov, A. (2010). <italic>Acta Cryst.</italic> D<bold>66</bold>, 22–25.</mixed-citation>
    </ref>
    <ref id="bb49">
      <mixed-citation publication-type="other">Vaguine, A. A., Richelle, J. &amp; Wodak, S. J. (1999). <italic>Acta Cryst.</italic> D<bold>55</bold>, 191–205.</mixed-citation>
    </ref>
    <ref id="bb50">
      <mixed-citation publication-type="other">Vasishtan, D. &amp; Topf, M. (2011). <italic>J. Struct. Biol.</italic>
<bold>174</bold>, 333–343.</mixed-citation>
    </ref>
    <ref id="bb51">
      <mixed-citation publication-type="other">Walt, S. van der, Colbert, S. C. &amp; Varoquaux, G. (2011). <italic>Comput. Sci. Eng.</italic>
<bold>13</bold>, 22–30.</mixed-citation>
    </ref>
    <ref id="bb52">
      <mixed-citation publication-type="other">Waterman, D. G., Winter, G., Gildea, R. J., Parkhurst, J. M., Brewster, A. S., Sauter, N. K. &amp; Evans, G. (2016). <italic>Acta Cryst.</italic> D<bold>72</bold>, 558–575.</mixed-citation>
    </ref>
    <ref id="bb53">
      <mixed-citation publication-type="other">Webb, B. &amp; Sali, A. (2016). <italic>Curr. Protoc. Bioinform.</italic>
<bold>54</bold>, 5.6.1–5.6.37.</mixed-citation>
    </ref>
    <ref id="bb54">
      <mixed-citation publication-type="other">Winn, M. D. <italic>et al.</italic> (2011). <italic>Acta Cryst.</italic> D<bold>67</bold>, 235–242.</mixed-citation>
    </ref>
    <ref id="bb55">
      <mixed-citation publication-type="other">Wood, C., Burnley, T., Patwardhan, A., Scheres, S., Topf, M., Roseman, A. &amp; Winn, M. (2015). <italic>Acta Cryst.</italic> D<bold>71</bold>, 123–126.</mixed-citation>
    </ref>
  </ref-list>
</back>
<floats-group>
  <fig id="fig1" orientation="portrait" position="float">
    <label>Figure 1</label>
    <caption>
      <p>Architecture of the <italic>CCP-EM</italic> software suite. The task wrappers and core libraries shown in green are written in pure Python, whereas the GUI layer is written in PyQt4. The GUI thread is independent of the job processes; task progress is monitored by a job-launch module and is recorded in an SQLite database. JSON files serve as intermediaries allowing the task to be controlled ‘headless’ without the GUI layer.</p>
    </caption>
    <graphic xlink:href="d-73-00469-fig1"/>
  </fig>
  <fig id="fig2" orientation="portrait" position="float">
    <label>Figure 2</label>
    <caption>
      <p>JSON files are used as a convenient, human-readable store of parameters and provide a consistent input for <italic>CCP-EM</italic>-supported applications. In this example, input parameters for a <italic>MOLREP</italic> job are shown, including the use of a spherically averaged phase translation function and searching for two copies of the search model in the EM volume.</p>
    </caption>
    <graphic xlink:href="d-73-00469-fig2"/>
  </fig>
  <fig id="fig3" orientation="portrait" position="float">
    <label>Figure 3</label>
    <caption>
      <p>Basic usage of the <italic>mrcfile</italic> Python library. In this example, a compressed map downloaded from the EMDB is opened and a 2 × 3 slice of data is taken from it. A new MRC file is then created, the data are copied into it and checked, and the file is closed. Finally, the file is validated to confirm that it complies with the MRC2014 standard.</p>
    </caption>
    <graphic xlink:href="d-73-00469-fig3"/>
  </fig>
  <fig id="fig4" orientation="portrait" position="float">
    <label>Figure 4</label>
    <caption>
      <p><italic>CCP-EM</italic> project and task window. Top: <italic>CCP-EM</italic> project window showing the taskbar which is used to launch applications on the left and the project job history on the right. Bottom: example of the <italic>CCP-EM</italic>
<italic>DockEM</italic> task. The toolbar at the top gives rapid access to molecular-graphics programs, job files, documentation and job launch. The input parameter setup tab is shown below, with required inputs highlighted in red. Additional launcher and results tabs appear as the job is launched and completed, respectively.</p>
    </caption>
    <graphic xlink:href="d-73-00469-fig4"/>
  </fig>
  <fig id="fig5" orientation="portrait" position="float">
    <label>Figure 5</label>
    <caption>
      <p><italic>CCP-EM</italic><italic>REFMAC</italic> task for the refinement and validation of atomic models in high-resolution cryo-EM maps. The single task includes the generation of structure factors from an input reconstruction, as well as the application of multiple blurring and sharpening factors. The left panel shows the <italic>CCP-EM</italic> pipeline for refinement and validation against experimental half-maps. The centre panel shows the results tab and the right panel shows the input and refined model in <italic>Coot</italic>.</p>
    </caption>
    <graphic xlink:href="d-73-00469-fig5"/>
  </fig>
  <fig id="fig6" orientation="portrait" position="float">
    <label>Figure 6</label>
    <caption>
      <p>Model-building pipeline in <italic>CCP-EM</italic>. For maps (or segments thereof) with resolutions of less than ∼5 Å and an appropriate model it is suggested to try <italic>DockEM</italic> followed by <italic>Flex-EM</italic>. For higher resolution data <italic>MOLREP</italic> and <italic>REFMAC</italic> can be used for refinement if a suitable model is available. If no model is available then <italic>Buccaneer</italic> can be used to build a model <italic>de novo</italic>. Note that for medium-resolution data sets a combination of approaches is recommended.</p>
    </caption>
    <graphic xlink:href="d-73-00469-fig6"/>
  </fig>
</floats-group>
