<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7355258</article-id>
    <article-id pub-id-type="pmid">32657415</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btaa503</article-id>
    <article-id pub-id-type="publisher-id">btaa503</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Bioinformatics of Microbes and Microbiomes</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Discovery of multi-operon colinear syntenic blocks in microbial genomes</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Svetlitsky</surname>
          <given-names>Dina</given-names>
        </name>
        <xref ref-type="aff" rid="btaa503-aff1">b1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Dagan</surname>
          <given-names>Tal</given-names>
        </name>
        <xref ref-type="aff" rid="btaa503-aff2">b2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ziv-Ukelson</surname>
          <given-names>Michal</given-names>
        </name>
        <xref ref-type="aff" rid="btaa503-aff1">b1</xref>
        <xref ref-type="corresp" rid="btaa503-cor1"/>
        <!--<email>michaluz@cs.bgu.ac.il</email>-->
      </contrib>
    </contrib-group>
    <aff id="btaa503-aff1"><label>b1</label><institution>Department of Computer Science, Ben-Gurion University of the Negev</institution>, Beer-Sheva, <country country="IL">Israel</country></aff>
    <aff id="btaa503-aff2"><label>b2</label><institution>Institute of Microbiology, Kiel University</institution>, Kiel 24118, <country country="DE">Germany</country></aff>
    <author-notes>
      <corresp id="btaa503-cor1">To whom correspondence should be addressed. E-mail: <email>michaluz@cs.bgu.ac.il</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <month>7</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2020-07-13">
      <day>13</day>
      <month>7</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>13</day>
      <month>7</month>
      <year>2020</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>36</volume>
    <issue>Suppl 1</issue>
    <issue-title>ISMB 2020 Proceedings</issue-title>
    <fpage>i21</fpage>
    <lpage>i29</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2020. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license license-type="cc-by-nc" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btaa503.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>An important task in comparative genomics is to detect functional units by analyzing gene-context patterns. Colinear syntenic blocks (CSBs) are groups of genes that are consistently encoded in the same neighborhood and in the same order across a wide range of taxa. Such CSBs are likely essential for the regulation of gene expression in prokaryotes. Recent results indicate that colinearity can be conserved across multiple operons, thus motivating the discovery of multi-operon CSBs. This computational task raises scalability challenges in large datasets.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>We propose an efficient algorithm for the discovery of cross-strand multi-operon CSBs in large genomic datasets. The proposed algorithm uses match-point arithmetic, which is scalable for large datasets of microbial genomes in terms of running time and space requirements. The algorithm is implemented and incorporated into a tool with a graphical user interface, called CSBFinder-S. We applied CSBFinder-S to data mine 1485 prokaryotic genomes and analyzed the identified cross-strand CSBs. Our results indicate that most of the syntenic blocks are exclusively colinear. Additional results indicate that transcriptional regulation by overlapping transcriptional genes is abundant in bacteria. We demonstrate the utility of CSBFinder-S to identify common function of the gene-pair PulEF in multiple contexts, including Type 2 Secretion System, Type 4 Pilus System and DNA uptake machinery.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>CSBFinder-S software and code are publicly available at <ext-link ext-link-type="uri" xlink:href="https://github.com/dinasv/CSBFinder">https://github.com/dinasv/CSBFinder</ext-link>.</p>
      </sec>
      <sec id="s4">
        <title>Supplementary information</title>
        <p><xref ref-type="supplementary-material" rid="sup1">Supplementary data</xref> are available at <italic>Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>European Research Council</institution>
            <institution-id institution-id-type="DOI">10.13039/100010663</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>281357</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Israel Science Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/501100003977</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>179/14</award-id>
        <award-id>939/18</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>An important problem in genomics is the organization of genes in the genomes, and the interpretation of genomic information that is encoded in genomic contexts (<xref rid="btaa503-B42" ref-type="bibr">Rogozin <italic>et al.</italic>, 2004</xref>). In the absence of selective pressure on gene order, successive rearrangement will lead to randomization of gene order (<xref rid="btaa503-B19" ref-type="bibr">Huynen <italic>et al.</italic>, 2000</xref>; <xref rid="btaa503-B33" ref-type="bibr">Mushegian and Koonin, 1996</xref>). Nevertheless, functionally related genes may be constrained to remain close to each other due to natural selection, forming a <italic>syntenic block (SB)</italic>: (<xref rid="btaa503-B35" ref-type="bibr">Overbeek <italic>et al.</italic>, 1999</xref>)—a group of genes that are located close to each other in several different genomes. Here, we study <italic>colinear syntenic blocks (CSBs)</italic>, where a CSB is an SB with a conserved gene order across all its instances.</p>
    <p>To compare genes from different microbial genomes, the respective genes need to be annotated using orthology group IDs. Public microbial databases often provide such annotations. For example the Integrated Microbial Genomes database (<xref rid="btaa503-B7" ref-type="bibr">Chen <italic>et al.</italic>, 2019</xref>) provides gene assignments to COG (<xref rid="btaa503-B49" ref-type="bibr">Tatusov <italic>et al.</italic>, 2000</xref>), Pfam (<xref rid="btaa503-B2" ref-type="bibr">Bateman <italic>et al.</italic>, 2002</xref>) and TIGRfam (<xref rid="btaa503-B45" ref-type="bibr">Selengut <italic>et al.</italic>, 2007</xref>) protein families. Large datasets of newly sequenced genomes that are not included in public databases, can be analyzed using tools such as SwiftOrtho (<xref rid="btaa503-B17" ref-type="bibr">Hu and Friedberg, 2019</xref>), SonicParanoid (<xref rid="btaa503-B8" ref-type="bibr">Cosentino and Iwasaki, 2019</xref>), OMA (<xref rid="btaa503-B1" ref-type="bibr">Altenhoff <italic>et al.</italic>, 2018</xref>) or ProteinOrtho (<xref rid="btaa503-B26" ref-type="bibr">Lechner <italic>et al.</italic>, 2011</xref>) for the inference of gene orthology groups.</p>
    <p>Selection pressure for the conservation of CSBs can be due to several reasons, including the interaction of the gene products in pathways or complexes (<xref rid="btaa503-B10" ref-type="bibr">Dandekar <italic>et al.</italic>, 1998</xref>; <xref rid="btaa503-B31" ref-type="bibr">Marsh <italic>et al.</italic>, 2013</xref>), common lateral gene transfer events (<xref rid="btaa503-B9" ref-type="bibr">Danchin <italic>et al.</italic>, 2000</xref>), co-localization of the gene transcripts in the cell (<xref rid="btaa503-B9" ref-type="bibr">Danchin <italic>et al.</italic>, 2000</xref>), gene proximity to the Origin of Replication Signal (ORI) and gene co-expression under specific environmental conditions (<xref rid="btaa503-B40" ref-type="bibr">Rocha, 2008</xref>).</p>
    <p>The identification of CSBs across different genomes is important for the discovery of new biological systems. Examples are bacterial defense mechanisms (<xref rid="btaa503-B11" ref-type="bibr">Doron <italic>et al.</italic>, 2018</xref>) and functions relevant for host-associated lifestyle (<xref rid="btaa503-B27" ref-type="bibr">Levy <italic>et al.</italic>, 2018</xref>).</p>
    <p>CSBs in prokaryotic genomes often correspond to operons; those are neighboring genes that constitute a single unit of transcription and translation. CSBs in prokaryotes can span multiple operons. A recent study showed that the contiguity of the tufB-secE operons in <italic>Salmonella</italic> is essential for the organism’s fitness (<xref rid="btaa503-B6" ref-type="bibr">Brandis <italic>et al.</italic>, 2019</xref>). The authors further concluded that the concatenation of the operons, by an inter-operon terminator–promoter overlap, plays a significant role in regulation of gene expression. Notably, the orientation of genes in conserved multi-operons may have implications to gene expression due to overlapping gene regulatory elements [e.g. as in Excludons (<xref rid="btaa503-B46" ref-type="bibr">Sesto <italic>et al.</italic>, 2013</xref>)]. Thus, an approach for the detection of multi-operon CSBs could benefit from integration of gene orientation information. This motivated us to develop a novel bioinformatic approach that facilitates the identification and study of <italic>multi-operon cross-strand CSBs.</italic></p>
    <p>The general SB discovery problem (also denoted ‘gene cluster discovery’) has been well-formalized and extensively studied on the theoretical front (reviewed in <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S1.2</xref>). In a nutshell, previous works for SB discovery can be classified into two categories: reference-based approaches versus non-reference-based approaches. Non-reference-based approaches (e.g. <xref rid="btaa503-B5" ref-type="bibr">Böcker <italic>et al.</italic>, 2009</xref>; <xref rid="btaa503-B14" ref-type="bibr">He and Goldwasser, 2005</xref>) seek some ancestral consensus pattern that does not necessarily appear in its exact form as a substring in one of the input sequences. Such approaches suffer from a search space that grows exponentially with increasing input size. Thus, these approaches are not feasible for data mining of thousands of genomes.</p>
    <p>To solve this problem, the reference-based gene cluster model was proposed in <xref rid="btaa503-B20" ref-type="bibr">Jahn (2011)</xref>. In this model, a gene cluster is not represented by an optimal consensus gene set but rather by a set of genes that appears as a substring of one of the input genomes. This constraint results in a polynomially bounded search space. In <xref rid="btaa503-B20" ref-type="bibr">Jahn (2011)</xref>, it was shown that the results obtained by using a reference-based model are highly comparable to the results obtained by non-reference-based approaches. As scalability is one of our main objectives in this article, the model presented here is also reference-based.</p>
    <p>There are currently several available tools for the analysis of multiple genomes for the discovery of SBs [GECKO 3 (<xref rid="btaa503-B52" ref-type="bibr">Winter <italic>et al.</italic>, 2016</xref>) and Evolclust (<xref rid="btaa503-B29" ref-type="bibr">Marcet-Houben and Gabaldón, 2019</xref>)], and for the discovery of CSBs [CYNTENATOR (<xref rid="btaa503-B41" ref-type="bibr">Rödelsperger and Dieterich, 2010</xref>), MCScanX (<xref rid="btaa503-B51" ref-type="bibr">Wang <italic>et al.</italic>, 2012</xref>) and i-ADHoRe 3 (<xref rid="btaa503-B38" ref-type="bibr">Proost <italic>et al.</italic>, 2012</xref>)]. All of the aforementioned tools cannot scale up to thousands of microbial genomes in all-versus-all search mode, and would require an infeasible amount of running time or memory consumption. In addition, except for GECKO 3, these tools are lacking a well-defined model for SB discovery; instead, each of these tools indirectly defines an SB through its algorithm, and employs a heuristic search. A comprehensive review of these tools is given in <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S1.1</xref>.</p>
    <p>In a previous work (<xref rid="btaa503-B48" ref-type="bibr">Svetlitsky <italic>et al.</italic>, 2019</xref>), we formalized the CSB discovery optimization problem, as follows. Given an input of <italic>m</italic> genomes, modelled as strings of gene identifiers and parameters <italic>k</italic> and <italic>q</italic>: a CSB is formally defined as a pattern that appears as a substring of at least one of the input genomes, and has instances in at least <italic>q</italic> of the input genomes, where each instance may vary from the CSB pattern by at most <italic>k</italic> gene insertions (see Definition 1 in Section 2.1).</p>
    <p>Following the CSB discovery problem formalization, we also gave an exact, polynomial time and space algorithm to solve it. In that work, we targeted the data mining of CSBs that encode operons, and enforced this by segmenting the input genomes to directons (consecutive genes encoded on the same strand). Testing the algorithm performance showed that there is a large overlap between the inferred CSBs and experimentally verified operons in <italic>E.coli K-12 str. MG1655</italic>.</p>
    <p>However, the time complexity of that algorithm was sensitive to the parameter <italic>k</italic> by a multiplicative factor, while the space complexity of the algorithm was sensitive to the parameter <inline-formula id="IE1"><mml:math id="IM1"><mml:mo>ℓ</mml:mo></mml:math></inline-formula>, denoting an upper bound on the length of the CSBs. For the purpose of operon detection, small values of <italic>k</italic> and <inline-formula id="IE2"><mml:math id="IM2"><mml:mo>ℓ</mml:mo></mml:math></inline-formula> make sense. In contrast, in this work our goal is to discover colinear <italic>multi-operon CSBs</italic> that can <italic>span both strands</italic>. This goal requires larger values of <italic>k</italic> and <inline-formula id="IE3"><mml:math id="IM3"><mml:mo>ℓ</mml:mo></mml:math></inline-formula> that pose a challenge to the scalability of CSB discovery.</p>
    <p><italic>Our contribution and roadmap.</italic> In this article, we generalize CSB discovery to extract cross-strand multi-operon CSBs. To scale up to this generalization, a novel exact algorithm that uses Match-Point (MP) arithmetic is proposed (Section 2). The time and space complexities of the algorithm are insensitive to the parameters <italic>k</italic> and <inline-formula id="IE4"><mml:math id="IM4"><mml:mo>ℓ</mml:mo></mml:math></inline-formula>. We show that in practice, the new algorithm is indeed faster than the algorithm given in <xref rid="btaa503-B48" ref-type="bibr">Svetlitsky <italic>et al.</italic> (2019)</xref> for larger values of <italic>k</italic> (Section 4.1). Additional advantages of the algorithm are its simplicity of implementation, and the fact that it is easily parallelizable, yielding further scalability.</p>
    <p>The implementation of the proposed algorithm is incorporated in a publicly available tool, including a graphical user interface, denoted CSBFinder-S. The workflow of the tool is given in <xref ref-type="fig" rid="btaa503-F1">Figure 1</xref>. CSBFinder-S takes as an input a set of genomes, where each genome is modeled as a sequence of gene identifiers; a gene identifier indicates the corresponding gene orthology group as well as the strand (+/−) in which the gene is encoded (<xref ref-type="fig" rid="btaa503-F1">Fig. 1A</xref>). The genomes are mined to identify all patterns that qualify as CSBs according to user-specified parameters (<xref ref-type="fig" rid="btaa503-F1">Fig. 1B</xref>). Next, the discovered CSBs are ranked according to a probabilistic score that is adjusted by the gene content similarity between all the genomes in which the corresponding CSB appears (<xref ref-type="fig" rid="btaa503-F1">Fig. 1C</xref>). Finally, the CSBs are clustered to families according to their gene content similarity, and the rank of a family is determined by the score of its highest scoring CSB (<xref ref-type="fig" rid="btaa503-F1">Fig. 1D</xref>).
</p>
    <fig id="btaa503-F1" orientation="portrait" position="float">
      <label>Fig. 1.</label>
      <caption>
        <p>The proposed workflow for cross-strand CSB discovery and analysis. (<bold>A</bold>) A dataset of input genomes, where each genome is modeled as a sequence of gene identifiers; an identifier is assigned to a gene based on the gene orthology group to which the gene belongs and the strand (+/−) in which the gene is encoded. Genes marked by the same letter belong to the same gene orthology group. (<bold>B</bold>) CSB discovery, where each CSB consists of a pattern (outlined by a rectangle) and its instances. A CSB must have an instance in at least <italic>q</italic> genomes, and each instance can vary from the pattern by up to <italic>k</italic> gene insertions, where <italic>q</italic> and <italic>k</italic> are user specified parameters. (<bold>C</bold>) Ranking CSBs using a probabilistic similarity-adjusted score. Note that the CSB exemplified in (B) is ranked second in this example. (<bold>D</bold>) Clustering CSBs to families based on gene content and ranking families by their highest scoring CSB</p>
      </caption>
      <graphic xlink:href="btaa503f1"/>
    </fig>
    <p>CSBFinder-S provides several novel mechanisms to help the user sort, filter and interpret the discovered CSBs. One such mechanism is a ranking score that takes into account the gene content similarity between the genomes in which the corresponding CSBs appear (Section 3.7.3). Additional options enable the user to constrain the structural features of the inferred CSBs (length, abundance, etc.), as well as to extract CSBs confined to specific functional semantic categories. The new functions are available via a graphical user interface that also includes a taxonomic viewer of the genomes that contain instances of each CSB (Section 3.7.1).</p>
    <p>We applied CSBFinder-S to data mine 1485 prokaryotic genomes and analyzed the identified cross-strand CSBs (Section 4). Our results indicate that most of the SBs are exclusively colinear. Additional results indicate that transcriptional regulation by overlapping transcriptional genes is abundant in bacteria. We demonstrate the utility of CSBFinder-S to identify common function of the gene-pair PulEF in multiple contexts, including Type 2 Secretion System, Type 4 Pilus System and DNA uptake machinery.</p>
  </sec>
  <sec>
    <title>2 Algorithm</title>
    <sec>
      <title>2.1 Preliminaries and definitions</title>
      <p>Let Σ denote a finite set of characters representing gene identifiers, where a gene identifier indicates the corresponding gene orthology group as well as the strand (+/−) in which the gene is encoded. A genome is represented by a string <italic>T</italic> = <inline-formula id="IE5"><mml:math id="IM5"><mml:mrow><mml:msub><mml:mo>σ</mml:mo><mml:mn>1</mml:mn></mml:msub><mml:mo>…</mml:mo><mml:msub><mml:mo>σ</mml:mo><mml:mi>n</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> of concatenated characters, where <inline-formula id="IE6"><mml:math id="IM6"><mml:mrow><mml:msub><mml:mo>σ</mml:mo><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mo>σ</mml:mo><mml:mi>n</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mo>Σ</mml:mo></mml:mrow></mml:math></inline-formula>. For any set <italic>ψ</italic>, let <inline-formula id="IE7"><mml:math id="IM7"><mml:mrow><mml:mo>|</mml:mo><mml:mo>ψ</mml:mo><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula> denote the number of members in <italic>ψ</italic>. For a string <italic>P</italic>, we use <inline-formula id="IE8"><mml:math id="IM8"><mml:mrow><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula> to denote the length of <italic>P</italic> and <inline-formula id="IE9"><mml:math id="IM9"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> = <italic>σ<sub>i</sub></italic> to denote the <italic>i</italic>th character of <italic>P</italic>. For <inline-formula id="IE10"><mml:math id="IM10"><mml:mrow><mml:mn>1</mml:mn><mml:mo>≤</mml:mo><mml:mi>i</mml:mi><mml:mo>≤</mml:mo><mml:mi>j</mml:mi><mml:mo>≤</mml:mo><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula>: <inline-formula id="IE11"><mml:math id="IM11"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> = <inline-formula id="IE12"><mml:math id="IM12"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo>…</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mo>σ</mml:mo><mml:mi>i</mml:mi></mml:msub><mml:mo>…</mml:mo><mml:msub><mml:mo>σ</mml:mo><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> is a substring of <italic>P</italic>, starting from index <italic>i</italic> and ending at index <italic>j</italic>. <inline-formula id="IE13"><mml:math id="IM13"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> is a proper substring of <italic>P</italic> if <inline-formula id="IE14"><mml:math id="IM14"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> is a substring of <italic>P</italic> and if <inline-formula id="IE15"><mml:math id="IM15"><mml:mrow><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>′</mml:mo><mml:mo>|</mml:mo><mml:mo>&lt;</mml:mo><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula>. <inline-formula id="IE16"><mml:math id="IM16"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> is a suffix of <italic>P</italic> if <inline-formula id="IE17"><mml:math id="IM17"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo><mml:mo>=</mml:mo><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo>…</mml:mo><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE18"><mml:math id="IM18"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> is a prefix of <italic>P</italic> if <inline-formula id="IE19"><mml:math id="IM19"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo><mml:mo>=</mml:mo><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mn>1…</mml:mn><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula>. A string <inline-formula id="IE20"><mml:math id="IM20"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> is a subsequence of a string <italic>P</italic>, if <inline-formula id="IE21"><mml:math id="IM21"><mml:mrow><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>′</mml:mo><mml:mo>|</mml:mo><mml:mo>≥</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula> and if <italic>P</italic> can be obtained from <inline-formula id="IE22"><mml:math id="IM22"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> by inserting zero or more characters to <inline-formula id="IE23"><mml:math id="IM23"><mml:mrow><mml:mi>P</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
      <p>Given a pattern string <italic>P</italic> and a string <italic>T</italic>: An <italic>instance of P in T</italic> is a substring <inline-formula id="IE24"><mml:math id="IM24"><mml:mrow><mml:mi>T</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> of <italic>T</italic>, such that <italic>P</italic> is a subsequence of <inline-formula id="IE25"><mml:math id="IM25"><mml:mrow><mml:mi>T</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula>. Given an integer <italic>k</italic>: A <italic>k-instance of P in T</italic> is an instance <inline-formula id="IE26"><mml:math id="IM26"><mml:mrow><mml:mi>T</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> of <italic>P</italic> in <italic>T</italic>, such that <inline-formula id="IE27"><mml:math id="IM27"><mml:mrow><mml:mo>|</mml:mo><mml:mi>T</mml:mi><mml:mo>′</mml:mo><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo><mml:mo>≤</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:math></inline-formula>, i.e. <inline-formula id="IE28"><mml:math id="IM28"><mml:mrow><mml:mi>T</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> can be obtained from <italic>P</italic> by inserting at most <italic>k</italic> characters to <italic>P</italic>. We say that <inline-formula id="IE29"><mml:math id="IM29"><mml:mrow><mml:mi>T</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> is a <italic>minimal k-instance</italic> of <italic>P</italic> in <italic>T</italic>, if there is no proper substring of <inline-formula id="IE30"><mml:math id="IM30"><mml:mrow><mml:mi>T</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> that is also a <italic>k</italic>-instance of <italic>P</italic> in <italic>T</italic>.<statement id="mthst1"><p><bold>Example 1</bold> We refer the reader to <xref ref-type="fig" rid="btaa503-F2">Figure 2a</xref> for an illustration of the concept of a minimal <italic>k</italic>-instance. For the pattern <italic>P</italic> = BAC and <italic>k</italic> = <italic> </italic>3, <inline-formula id="IE31"><mml:math id="IM31"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mn>4…8</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> = BAACC is a <italic>k</italic>-instance of <italic>P</italic> in <italic>S</italic><sub>2</sub>, as <italic>P</italic> is a subsequence of BAACC, and two character insertions are needed to obtain BAACC from <italic>P</italic>. It is not minimal, as <inline-formula id="IE32"><mml:math id="IM32"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mn>4…7</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> = BAAC is a <italic>k</italic>-instance of <italic>P</italic> in <italic>S</italic><sub>2</sub> and a proper substring of BAACC. <inline-formula id="IE33"><mml:math id="IM33"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mn>2…7</mml:mn><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:mtext>BABAAC</mml:mtext></mml:mrow></mml:math></inline-formula> is also a <italic>k</italic>-instance of <italic>P</italic> in <italic>S</italic><sub>2</sub>, but it is not minimal as well. <inline-formula id="IE34"><mml:math id="IM34"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mn>4…7</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> = BAAC (marked in gray) is a minimal <italic>k</italic>-instance of <italic>P</italic> in <italic>S</italic><sub>2</sub>. <inline-formula id="IE35"><mml:math id="IM35"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mn>9…15</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> = BDAADDC is not a <italic>k</italic>-instance of <italic>P</italic>, since <inline-formula id="IE36"><mml:math id="IM36"><mml:mrow><mml:mo>|</mml:mo><mml:mtext>BDAADDC</mml:mtext><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mo>|</mml:mo><mml:mtext>BAC</mml:mtext><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula> = <inline-formula id="IE37"><mml:math id="IM37"><mml:mrow><mml:mn>4</mml:mn><mml:mo>&gt;</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:math></inline-formula>.</p></statement></p>
      <p>The pattern discovery problem is defined as follows:<statement id="mthst2"><p><bold>Definition 1 (CSB)</bold> <italic>Given a set of strings</italic> <inline-formula id="IE38"><mml:math id="IM38"><mml:mrow><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula><italic>over alphabet Σ, and integers k and q. A string P is a CSB if the following conditions hold:</italic><list list-type="order"><list-item><p>P is a substring of at least one string from S.</p></list-item><list-item><p>P has a minimal k-instance in at least q different strings from S.</p></list-item></list></p></statement></p>
      <p><italic>The</italic> <bold><italic>Colinear Syntenic Block (CSB) Discovery Problem</italic></bold> <italic>is to find all strings P s.t. P is a CSB, and to report minimal k-instances for each of the discovered CSBs.</italic></p>
      <p>In this article, we use some notions from MP arithmetic, previously applied to the related problem of computing the pairwise longest common subsequence (<xref rid="btaa503-B4" ref-type="bibr">Bergroth <italic>et al.</italic>, 2000</xref>; <xref rid="btaa503-B18" ref-type="bibr">Hunt and Szymanski, 1977</xref>). Given two strings, <italic>P</italic> and <italic>T</italic>, a <bold>match-point</bold> of <italic>P</italic> versus <italic>T</italic> is an ordered pair of positions (<italic>i</italic>, <italic>j</italic>), such that <inline-formula id="IE39"><mml:math id="IM39"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula>. For a set of strings <italic>S</italic> and an integer <italic>q</italic>, define the <bold>match-points of <italic>S</italic> abiding by <italic>q</italic></bold> to be the collection of MPs of <italic>S<sub>x</sub></italic> versus <italic>S<sub>y</sub></italic>, accumulated across all pairs of strings <inline-formula id="IE40"><mml:math id="IM40"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:math></inline-formula> s.t. <inline-formula id="IE41"><mml:math id="IM41"><mml:mrow><mml:mi>x</mml:mi><mml:mo>≠</mml:mo><mml:mi>y</mml:mi></mml:mrow></mml:math></inline-formula> and each MP corresponds to a character in Σ that appears in at least <italic>q</italic> strings from <italic>S</italic> (see <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S1</xref> for an example).</p>
      <p>An ordered set of MPs forms a chain; given two strings, <italic>P</italic> and <italic>T</italic>, a <bold>chain</bold> of <italic>P</italic> versus <italic>T</italic> is an ordered set of MPs of <italic>P</italic> versus <italic>T</italic>: <inline-formula id="IE42"><mml:math id="IM42"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> such that <inline-formula id="IE43"><mml:math id="IM43"><mml:mrow><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>&lt;</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>&lt;</mml:mo><mml:mo>…</mml:mo><mml:mo>&lt;</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>.</p>
      <p>Since our proposed algorithm uses MP arithmetic, we represent each minimal <italic>k</italic>-instance by a corresponding chain. However, note that a specific minimal <italic>k</italic>-instance could be represented by more than one chain.<statement id="mthst3"><p><bold>Example 2</bold> In <xref ref-type="fig" rid="btaa503-F2">Figure 2b</xref> for pattern <italic>P</italic> = <italic>BAC</italic> and <italic>k</italic> = 3, the chains <inline-formula id="IE44"><mml:math id="IM44"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>5</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>7</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE45"><mml:math id="IM45"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>6</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>7</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> both represent the minimal <italic>k</italic>-instance BAAC of <italic>P</italic> in <italic>S</italic><sub>2</sub>.</p></statement></p>
      <p>Therefore, we define a canonical representation of the chains corresponding to a minimal <italic>k</italic>-instance: Given two strings <italic>P</italic> and <italic>T</italic>, a chain of <italic>P</italic> versus <italic>T</italic> is <bold>canonical</bold> if each prefix of length <italic>i</italic> of this chain, for <inline-formula id="IE46"><mml:math id="IM46"><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>…</mml:mo><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula>, corresponds to some minimal <italic>k</italic>-instance of <inline-formula id="IE47"><mml:math id="IM47"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>…</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> in <italic>T</italic>.<statement id="mthst4"><p><bold>Example 3</bold> In the previously mentioned example, the chain <inline-formula id="IE48"><mml:math id="IM48"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>5</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>7</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> (the second chain shown in Fig. 2b) is canonical, as the chain <inline-formula id="IE49"><mml:math id="IM49"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>5</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> corresponds to a minimal <italic>k</italic>-instance of <inline-formula id="IE50"><mml:math id="IM50"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mn>1…2</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> (BA) and the chain <inline-formula id="IE51"><mml:math id="IM51"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> corresponds to a minimal <italic>k</italic>-instance of <inline-formula id="IE52"><mml:math id="IM52"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> (<italic>B</italic>). However, the chain <inline-formula id="IE53"><mml:math id="IM53"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>6</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>7</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is not canonical, as the chain <inline-formula id="IE54"><mml:math id="IM54"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>6</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> corresponds to a non-minimal <italic>k</italic>-instance (BAA) of <inline-formula id="IE55"><mml:math id="IM55"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mn>1…2</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> (BA).</p></statement></p>
      <p>The data structures used by the algorithm are <italic>MatchLists</italic> and <italic>NextMatch</italic>, defined as follows. <italic>MatchLists</italic>[1:<inline-formula id="IE56"><mml:math id="IM56"><mml:mrow><mml:mo>|</mml:mo><mml:mo>Σ</mml:mo><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula>][1: m] is a two-dimensional array, that contains for each <inline-formula id="IE57"><mml:math id="IM57"><mml:mrow><mml:mo>σ</mml:mo><mml:mo>∈</mml:mo><mml:mo>Σ</mml:mo></mml:mrow></mml:math></inline-formula> and for each <inline-formula id="IE58"><mml:math id="IM58"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:math></inline-formula>, an ordered list of indices in <italic>S<sub>y</sub></italic> with the character <italic>σ</italic> i.e. <inline-formula id="IE59"><mml:math id="IM59"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:mo>σ</mml:mo></mml:mrow></mml:math></inline-formula> for each <inline-formula id="IE60"><mml:math id="IM60"><mml:mrow><mml:mi>p</mml:mi><mml:mo>∈</mml:mo><mml:mtext>MatchLists</mml:mtext><mml:mo stretchy="false">[</mml:mo><mml:mo>σ</mml:mo><mml:mo stretchy="false">]</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mi>y</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
      <p>For any input string <inline-formula id="IE61"><mml:math id="IM61"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:math></inline-formula>, and any index <inline-formula id="IE62"><mml:math id="IM62"><mml:mrow><mml:mn>1</mml:mn><mml:mo>≤</mml:mo><mml:mi>i</mml:mi><mml:mo>≤</mml:mo><mml:mo>|</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula>; let <italic>σ</italic> denote a character in Σ such that the string <inline-formula id="IE63"><mml:math id="IM63"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>σ</mml:mo></mml:mrow></mml:math></inline-formula> is a substring of some input string in <italic>S</italic>. Then, <inline-formula id="IE64"><mml:math id="IM64"><mml:mrow><mml:msub><mml:mrow><mml:mtext>NextMatch</mml:mtext></mml:mrow><mml:mi>y</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mo>σ</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is defined to be the smallest index <italic>j</italic>, <inline-formula id="IE65"><mml:math id="IM65"><mml:mrow><mml:mi>i</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>j</mml:mi><mml:mo>≤</mml:mo><mml:mo>|</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula>, s.t. <inline-formula id="IE66"><mml:math id="IM66"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:mo>σ</mml:mo></mml:mrow></mml:math></inline-formula>. The requirement for the appearance of <inline-formula id="IE67"><mml:math id="IM67"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>σ</mml:mo></mml:mrow></mml:math></inline-formula> as a substring of one of the input strings is used to reduce the time and space complexity of the algorithm (<xref ref-type="supplementary-material" rid="sup1">Supplementary Section S2.2</xref>). This requirement is justified by the fact that according to Definition 1, two consecutive MPs can be a part of a chain only if the corresponding characters appear as substring of length two in one of the input strings.<statement id="mthst5"><p><bold>Example 4</bold> In <xref ref-type="fig" rid="btaa503-F2">Figure 2</xref>, <inline-formula id="IE68"><mml:math id="IM68"><mml:mrow><mml:msub><mml:mrow><mml:mtext>NextMatch</mml:mtext></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mn>9</mml:mn><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mn>11</mml:mn></mml:mrow></mml:math></inline-formula> as this is the closest MP with the character <italic>A</italic> in <italic>S</italic><sub>2</sub> to the right of index 9. There is no point in computing <inline-formula id="IE69"><mml:math id="IM69"><mml:mrow><mml:msub><mml:mrow><mml:mtext>NextMatch</mml:mtext></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mn>9</mml:mn><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> during pre-processing, as there is no substring <italic>BC</italic> in the dataset, and consequently (by Definition 1), there will be no pattern with <italic>BC</italic> as its substring thus there will be no corresponding chain with these characters. Only the values of <inline-formula id="IE70"><mml:math id="IM70"><mml:mrow><mml:msub><mml:mrow><mml:mtext>NextMatch</mml:mtext></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mn>9</mml:mn><mml:mo>,</mml:mo><mml:mi>A</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE71"><mml:math id="IM71"><mml:mrow><mml:msub><mml:mrow><mml:mtext>NextMatch</mml:mtext></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mn>9</mml:mn><mml:mo>,</mml:mo><mml:mi>D</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> need to be computed.</p></statement></p>
    </sec>
    <sec>
      <title>2.2 A match-point arithmetic-based algorithm</title>
      <p>The proposed algorithm consists of a pre-processing stage and a main stage. During the pre-processing stage, the input genomes are annotated with the alphabet Σ to generate the input strings. Based on these input strings, data structures are constructed to support efficient MP arithmetic operations. Then, during the main stage, the MPs of <italic>S</italic> abiding by <italic>q</italic> are processed to form chains representing CSB instances. A partial pseudo-code describing the main algorithm is given below. The pseudo-code for the procedure <italic>findInstances</italic> and additional procedures is given in <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S2.2</xref>. The algorithm is exemplified throughout the text and in <xref ref-type="fig" rid="btaa503-F2">Figure 2</xref>.
</p>
      <fig id="btaa503-F2" orientation="portrait" position="float">
        <label>Fig. 2.</label>
        <caption>
          <p>(<bold>A</bold>) Pattern <italic>P</italic> =BAC, which is a substring of <italic>S</italic><sub>1</sub>, and its <italic>k</italic>-instances in string <italic>S</italic><sub>2</sub> for <italic>k </italic>=<italic> </italic>3. The <italic>k</italic>-instances of BAC in <italic>S</italic><sub>2</sub> are outlined by rectangles, and the rectangle marking a minimal <italic>k</italic>-instance is grey-filled. (<bold>B</bold>) Execution of the algorithm on the dataset <italic>S</italic>=<inline-formula id="IE72"><mml:math id="IM72"><mml:mrow><mml:mo>{</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula> with the parameters <italic>k </italic>=<italic> </italic>3 and <italic>q </italic>=<italic> </italic>2. An ‘X’ represents a MP of <italic>S</italic><sub>1</sub> versus <italic>S</italic><sub>2</sub>. The MPs are assembled to chains that represent minimal <italic>k</italic>-instances of a specific pattern. Each chain of the pattern <italic>BA</italic> is extended, if possible, to form a chain of the pattern <italic>BAC</italic>. The pattern <italic>BAC</italic> is then reported as a CSB, as it has instances in both <italic>S</italic><sub>1</sub> and <italic>S</italic><sub>2</sub>. Additional elaboration on this figure is found in the body of the text</p>
        </caption>
        <graphic xlink:href="btaa503f2"/>
      </fig>
      <p>
        <boxed-text id="btaa503-BOX1" position="float" orientation="portrait">
          <sec>
            <title><bold>Algorithm 1</bold> Pseudo-code of the MP arithmetic-based algorithm</title>
            <p>1: <bold>Input:</bold> A set of strings <inline-formula id="IE73"><mml:math id="IM73"><mml:mrow><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>m</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, integers <italic>k</italic>, <italic>q</italic></p>
            <p>2: <bold>Output:</bold> All CSBs in <italic>S</italic> and their minimal k-instances</p>
            <p>3: Construct the data structures <italic>MatchLists</italic> and <italic>NextMatch</italic></p>
            <p>4: <bold>for</bold><inline-formula id="IE74"><mml:math id="IM74"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:math></inline-formula><bold>do</bold></p>
            <p>5:  <bold>for</bold><inline-formula id="IE75"><mml:math id="IM75"><mml:mrow><mml:mi>i</mml:mi><mml:mo>←</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula> to <inline-formula id="IE76"><mml:math id="IM76"><mml:mrow><mml:mo>|</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula><bold>do</bold></p>
            <p>6:   <bold>for</bold><inline-formula id="IE77"><mml:math id="IM77"><mml:mrow><mml:mi>j</mml:mi><mml:mo>←</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:math></inline-formula><bold>to</bold><inline-formula id="IE78"><mml:math id="IM78"><mml:mrow><mml:mo>|</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>|</mml:mo></mml:mrow></mml:math></inline-formula><bold>do</bold></p>
            <p>7:    <inline-formula id="IE79"><mml:math id="IM79"><mml:mrow><mml:mi>P</mml:mi><mml:mo>←</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mi>i</mml:mi><mml:mo>…</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula></p>
            <p>8:    <inline-formula id="IE80"><mml:math id="IM80"><mml:mrow><mml:mi mathvariant="italic">InstanceLis</mml:mi><mml:msub><mml:mi>t</mml:mi><mml:mi>P</mml:mi></mml:msub><mml:mo>←</mml:mo></mml:mrow></mml:math></inline-formula> new list</p>
            <p>9:    <inline-formula id="IE81"><mml:math id="IM81"><mml:mrow><mml:mi mathvariant="italic">count</mml:mi><mml:mo>←</mml:mo></mml:mrow></mml:math></inline-formula><italic>findInstances</italic>(<inline-formula id="IE82"><mml:math id="IM82"><mml:mrow><mml:mi>P</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mi mathvariant="italic">InstanceLis</mml:mi><mml:msub><mml:mi>t</mml:mi><mml:mi>P</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>,</p>
            <p>10:                <italic>MatchLists</italic>, <italic>NextMatch</italic>)</p>
            <p>11:    <bold>if</bold><inline-formula id="IE83"><mml:math id="IM83"><mml:mrow><mml:mi mathvariant="italic">count</mml:mi><mml:mo>≥</mml:mo><mml:mi>q</mml:mi></mml:mrow></mml:math></inline-formula><bold>then</bold></p>
            <p>12:     Report <italic>P</italic> as a CSB and <italic>InstanceList<sub>P</sub></italic> as its instances</p>
            <p>13:     <bold>else</bold></p>
            <p>14:     Exit internal loop</p>
          </sec>
        </boxed-text>
      </p>
      <p><italic>Pre-processing stage</italic>. To detect CSBs spanning both strands, the input genomes are pre-processed to generate the set of input strings, as detailed in Section 3.2. Then, the two data structures <italic>Matchlists</italic> and <italic>NextMatch</italic> are constructed from the MPs of <italic>S</italic> abiding by <italic>q</italic> (construction details are given in <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S2.2</xref>).</p>
      <p><italic>Main stage</italic>. During the main stage, the proposed algorithm iterates over all input strings in <italic>S</italic>, and extracts substrings that are candidate CSBs. Consider, in turn, input string <inline-formula id="IE84"><mml:math id="IM84"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:math></inline-formula>. Each index in <italic>S<sub>x</sub></italic> serves as a starting point for substrings that are potential CSBs. The consideration of candidate CSBs is done by gradually increasing the length of the considered substrings, and checking if they abide by the definition of a CSB and the corresponding user specified parameters (<italic>k</italic> and <italic>q</italic>).</p>
      <p>In what follows, we describe an algorithm that computes the minimal <italic>k</italic>-instances of a specific substring <inline-formula id="IE85"><mml:math id="IM85"><mml:mrow><mml:mi>P</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>x</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> in <italic>S<sub>y</sub></italic>. This algorithm is easily extended to the general CSB finding algorithm by applying it in ‘all versus all’ mode to the input strings. In the algorithm, a minimal <italic>k</italic>-instance <inline-formula id="IE86"><mml:math id="IM86"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>y</mml:mi></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mi>s</mml:mi><mml:mo>…</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> of <italic>P</italic> is represented by a corresponding canonical chain that starts with the MP <inline-formula id="IE87"><mml:math id="IM87"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>s</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> and ends with the MP <inline-formula id="IE88"><mml:math id="IM88"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo><mml:mo>,</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. In each iteration, we try to extend each chain that represents a minimal <italic>k</italic>-instance of <inline-formula id="IE89"><mml:math id="IM89"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>…</mml:mo><mml:mo>|</mml:mo><mml:mi>P</mml:mi><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> in <italic>S<sub>y</sub></italic> to a chain that represents a minimal <italic>k</italic>-instance of <italic>P</italic> in <italic>S<sub>y</sub></italic> by augmenting it with an additional MP. A MP can extend a chain, only if it is the closest MP to the right of the chain’s end. This MP can be obtained in constant time using the <italic>NextMatch</italic> data structure.<statement id="mthst6"><p><bold>Example 5</bold> We illustrate the extension of a chain using the example in <xref ref-type="fig" rid="btaa503-F2">Figure 2</xref>. The current pattern is <inline-formula id="IE90"><mml:math id="IM90"><mml:mrow><mml:mi>P</mml:mi><mml:mo>=</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">[</mml:mo><mml:mn>1…3</mml:mn><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:mtext>BAC</mml:mtext></mml:mrow></mml:math></inline-formula>. The chains of the prefix <inline-formula id="IE91"><mml:math id="IM91"><mml:mrow><mml:mi>P</mml:mi><mml:mo stretchy="false">[</mml:mo><mml:mn>1…2</mml:mn><mml:mo stretchy="false">]</mml:mo><mml:mo>=</mml:mo><mml:mtext>BA</mml:mtext></mml:mrow></mml:math></inline-formula> are considered for extension by MPs to obtain the chains of <italic>P</italic>. The first chain consisting of the MPs <inline-formula id="IE92"><mml:math id="IM92"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is not extended; the MP (3, 1) cannot extend the first chain as it is positioned to the left of the end of the chain. Although the MP (3, 7) can possibly extend this chain without exceeding the number of allowed insertions, this extension will create a <italic>k</italic>-instance that is not minimal, as this MP can also extend the second chain <inline-formula id="IE93"><mml:math id="IM93"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>5</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>. The second chain is extended by the MP (3, 7), as it is the closest MP to the right of the chain’s end. The third chain <inline-formula id="IE94"><mml:math id="IM94"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>9</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>11</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is not extended by the MP (3, 15) because this extension would create a chain of length seven, resulting in <inline-formula id="IE95"><mml:math id="IM95"><mml:mrow><mml:mn>4</mml:mn><mml:mo>&gt;</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:math></inline-formula> insertions. We refer the reader to <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S2.2</xref> for a more formal description of this step.</p></statement></p>
      <p><italic>Time and space complexity analysis</italic>. The time complexity of the algorithm is <inline-formula id="IE96"><mml:math id="IM96"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mtext>OCC</mml:mtext><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, where <italic>m</italic> denotes the number of input strings, <italic>n</italic> denotes the average length of an input string, and <italic>OCC</italic> denotes the sum of lengths of all the surviving chains, corresponding to all CSB instances reported in the output. The space complexity of the algorithm is <inline-formula id="IE97"><mml:math id="IM97"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mi>r</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, where <italic>r</italic> is the number of MPs of <italic>S</italic> abiding by <italic>q</italic>. A comprehensive analysis of time and space complexities can be found in <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S2.2</xref>. The time complexity analysis is briefly summarized below.</p>
      <p>In the pre-processing stage, computing for each character in Σ all the indexes in which it appears and storing them in <italic>MatchLists</italic> takes <italic>O</italic>(<italic>nm</italic>) time. Constructing <italic>NextMatch</italic> takes <italic>O</italic>(<italic>r</italic>) time.</p>
      <p>In the main stage, chains of MPs are computed and reported as CSB instances. Note that a MP is an instance of length one, and if a pattern is not a CSB (i.e. there are less than <italic>q</italic> input strings encoding instances of this pattern), then there is no point in extending the pattern by an additional character. Hence, all active chains that are maintained during the runtime of the algorithm, represent instances and are part of the output. <inline-formula id="IE98"><mml:math id="IM98"><mml:mrow><mml:mtext>OCC</mml:mtext><mml:mo>≥</mml:mo><mml:mi>r</mml:mi></mml:mrow></mml:math></inline-formula>, as MPs abiding by the quorum could participate in one or more instances. As a result, the time complexity of the algorithm proposed in this article is <inline-formula id="IE99"><mml:math id="IM99"><mml:mrow><mml:mi>O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>n</mml:mi><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mtext>OCC</mml:mtext><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>.</p>
      <p>Note that the value of the parameter <italic>OCC</italic> is output sensitive; in a given experiment, <italic>OCC</italic> depends on the size and composition of <italic>S</italic>, as well as on the values assigned to the parameters <italic>q</italic> and <italic>k</italic>. Hence, we provide an empirical measurement of <italic>OCC</italic> on the benchmark dataset used in this study (described in Section 3.1). According to our measurements, the values of <italic>OCC</italic> ranges between 1.5 nm (for <italic>q </italic>=<italic> </italic>100 and <italic>k </italic>=<italic> </italic>0) and 11.7 nm (for <italic>q </italic>=<italic> </italic>10 and <italic>k </italic>=<italic> </italic>20). Additional details are given in <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S2.3</xref>.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Materials and methods</title>
    <sec>
      <title>3.1 Dataset</title>
      <p>1485 fully sequenced prokaryotic strains with COG ID annotations [Clusters of Orthologous Groups (<xref rid="btaa503-B49" ref-type="bibr">Tatusov <italic>et al.</italic>, 2000</xref>)] were downloaded from GenBank (NCBI; ver 10/2012). A list of all the genomes included in this dataset is provided in the <xref ref-type="supplementary-material" rid="sup1">Supplementary Materials</xref>.</p>
    </sec>
    <sec>
      <title>3.2 Generation of input strings from the dataset</title>
      <p>In our string representation, each character in the alphabet is coded as a gene-orthology group followed by a strand specifier, e.g. A(+) denotes a gene belonging to gene orthology group A, and residing on the positive strand. The reverse complement sequence of each input genome is also considered as an extension of the string representing the genome to detect reverse complement instances of a pattern. For example C(+)B(−)A(−) is considered to be an instance of the pattern A(+)B(+)C(−).</p>
    </sec>
    <sec>
      <title>3.3 Running time measurements</title>
      <p>The Suffix-Tree (ST)-based algorithm (<xref rid="btaa503-B48" ref-type="bibr">Svetlitsky <italic>et al.</italic>, 2019</xref>) and the MP-based algorithm presented in this article are both implemented as part of the CSBFinder-S tool and can be selected by the user. In this experiment, both algorithms were run in cross-strand CSB discovery mode. The average running time of both algorithms on the benchmark dataset (Section 3.1) was measured by executing CSBFinder-S on an Intel Xeon X5680 machine with 192 GB RAM, using the ‘time’ command in Linux. For each tested value of the parameter <italic>k</italic>, CSBFinder-S was executed five times in a single threaded mode with the Java option -Xmx190g, and the quorum parameter set to 50. The results are given in Section 4.1.</p>
    </sec>
    <sec>
      <title>3.4 Calculation of enrichment in different functional categories</title>
      <p>CSBFinder-S was executed on the dataset described in Section 3.1 with the parameters <italic>q </italic>=<italic> </italic>30, <italic>k </italic>=<italic> </italic>0, and with the length of a CSB constrained to three genes, resulting in 5234 CSBs of length three. Each CSB of length three (or its reverse complement) has one of the following strand order combination patterns: <inline-formula id="IE100"><mml:math id="IM100"><mml:mrow><mml:mo>→</mml:mo><mml:mo>→</mml:mo><mml:mo>→</mml:mo><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mo>←</mml:mo><mml:mo>→</mml:mo><mml:mo>→</mml:mo><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mo>→</mml:mo><mml:mo>←</mml:mo><mml:mo>←</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE101"><mml:math id="IM101"><mml:mrow><mml:mo>→</mml:mo><mml:mo>←</mml:mo><mml:mo>→</mml:mo></mml:mrow></mml:math></inline-formula>. These patterns are equivalent to their reverse complement strand order combination patterns: <inline-formula id="IE102"><mml:math id="IM102"><mml:mrow><mml:mo>←</mml:mo><mml:mo>←</mml:mo><mml:mo>←</mml:mo><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mo>←</mml:mo><mml:mo>←</mml:mo><mml:mo>→</mml:mo><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mo>→</mml:mo><mml:mo>→</mml:mo><mml:mo>←</mml:mo></mml:mrow></mml:math></inline-formula> and <inline-formula id="IE103"><mml:math id="IM103"><mml:mrow><mml:mo>←</mml:mo><mml:mo>→</mml:mo><mml:mo>←</mml:mo></mml:mrow></mml:math></inline-formula>, respectively. The strand order combination pattern <inline-formula id="IE104"><mml:math id="IM104"><mml:mrow><mml:mo>→</mml:mo><mml:mo>←</mml:mo><mml:mo>→</mml:mo></mml:mrow></mml:math></inline-formula> was excluded due to a limited number of CSBs with this pattern.</p>
      <p>The detection of significant enrichment within a specific COG functional category, was performed for the first gene of CSBs having a specific strand combination pattern, using a one-sided hypergeometric test [Python library SciPy (<xref rid="btaa503-B50" ref-type="bibr">Virtanen <italic>et al.</italic>, 2020</xref>)]. In our dataset, the population size is the total number of distinct functional categories collected from all genes participating in any of the extracted CSBs. For a functional category <italic>X</italic> and a strand order combination pattern <italic>Y</italic>, the number of successes in the population is the number of genes belonging to the category <italic>X</italic>, the sample size is the number of distinct categories belonging to any of the genes in the first position of the strand order combination pattern <italic>Y</italic>, and the number of successes in the sample is the number of genes in the first position of the strand order combination pattern <italic>Y</italic> belonging to category <italic>X</italic>.</p>
      <p>The hypergeometric test was performed for each COG functional category out of 25 different categories, and for each strand order combination pattern, resulting in a total of 75 <italic>P</italic>-values. Finally, these <italic>P</italic>-values were corrected using a two-stage FDR correction (<xref rid="btaa503-B3" ref-type="bibr">Benjamini and Hochberg, 2000</xref>) [Python library Statsmodels (<xref rid="btaa503-B44" ref-type="bibr">Seabold and Perktold, 2010</xref>)]. The results of this analysis are detailed in Section 4.2.</p>
    </sec>
    <sec>
      <title>3.5 Detecting SBs using CSBFinder-S</title>
      <p>CSBFinder-S was executed on the dataset described in Section 3.1 using parameters <italic>q </italic>=<italic> </italic>1 and <italic>k </italic>=<italic> </italic>0, resulting in 595 708 CSBs. This yielded the set of all possible substrings of length two or more that appear in at least one of the genomes and contain only genes that are annotated into orthology groups. Next, ignoring strand and gene order information, CSBs that contain the exact same genes were united to form the generalized set of SBs. The resulting SBs were then filtered to 26 270 SBs that have more than 30 instances. These SBs are analyzed in Section 4.3.</p>
    </sec>
    <sec>
      <title>3.6 Exemplifying different functional contexts</title>
      <p>CSBFinder-S was executed on the dataset described in Section 3.1 with the parameters <italic>q </italic>=<italic> </italic>30 and <italic>k </italic>=<italic> </italic>10. The CSBs were ranked using a ranking score that is adjusted using a taxonomic similarity to overcome a sampling bias (Section 3.7.3). A pre-specified parameter <italic>δ</italic> bounds the allowed similarity between any two genomes in the dataset in order for them to be considered distinct (see Section 3.7.3 for further details). In this example, the parameter <italic>δ</italic> was set to 0.7. The entire run in multi-threaded mode took 17 min and 16 s and yielded 133 823 CSBs spanning 13 686 families. The results of this benchmark are given in Section 4.4.</p>
    </sec>
    <sec>
      <title>3.7 Additional features of CSBFinder-S</title>
      <sec>
        <title>3.7.1 Semantic filters and a taxonomic view</title>
        <p>The advantage of using COGs to represent gene orthology groups is that each COG usually has a specific functional description in addition to an association to one of 26 general functional categories. CSBFinder-S allows the user to filter the resulting CSBs by specifying keywords that are required to appear in the functional description of any of their COGs. The functional description of COGs is extracted from an input file that contains information from the COG database (<xref rid="btaa503-B49" ref-type="bibr">Tatusov <italic>et al.</italic>, 2000</xref>). This file also contains common gene IDs of COGs, extracted from the Conserved Domaines Databse (CDD) (<xref rid="btaa503-B30" ref-type="bibr">Marchler-Bauer <italic>et al.</italic>, 2015</xref>). The users can also provide their own file with a functional description of gene orthology groups in their dataset. In addition, if the user provides a file containing a taxonomic annotation (phylum, class, genus and species), a taxonomic view is then displayed for each CSB, showing the genomes containing instances of this CSB (see for example <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S5</xref>).</p>
      </sec>
      <sec>
        <title>3.7.2 Multi-threading</title>
        <p>As each potential pattern can be processed independently by a different thread, a multi-threading option was incorporated into the implementation of the algorithm. This further accelerates the practical running time of the tool.</p>
      </sec>
      <sec>
        <title>3.7.3 Taxonomic similarity-adjusted ranking score</title>
        <p>One of the main difficulties in inferring synteny from multiple genomes is the bias incurred by the biased sampling of genomes, i.e. some strains and species are more frequently represented in the dataset than others. This could be handled by normalizing the input sequences to keep only one representative from each distinct taxonomic group, albeit at the cost of reducing the sampling density. Furthermore, different users may prefer to apply different levels of normalization; some users emphasize CSBs that are conserved across a wide taxonomic range, while others focus on CSBs that characterize a narrow taxonomic scope. In the latter case, sample size reduction comes at great expense in sensitivity.</p>
        <p>The single-strand CSBs described in <xref rid="btaa503-B48" ref-type="bibr">Svetlitsky <italic>et al.</italic> (2019)</xref>, were scored using the assumption that any two genomes from the dataset have a randomized gene order, unless there exists a selection pressure against this randomization. This can result in over-estimation of a ranking score for CSBs that are present mostly in closely related genomes. To overcome sampling bias and allow the user to control the level of redundancy normalization, CSBFinder-S incorporates a measure of divergence between genomes into the ranking score computation. A detailed review of the original score in <xref rid="btaa503-B48" ref-type="bibr">Svetlitsky <italic>et al.</italic> (2019)</xref> can be found in <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S3</xref>.</p>
        <p>In a related work, <xref rid="btaa503-B22" ref-type="bibr">Junier and Rivoire (2016)</xref> inferred pairs of co-localized genes from multiple genomes to study synteny in bacterial genomes. In their computation of the significance score, they reduce the weight of each genome that participates in the score computation proportionally to the number of other genomes to which it is similar.</p>
        <p>In this work, we apply a similar approach. In our implementation an inter-genomic similarity measure, denoted <italic>D<sub>ij</sub></italic>, is computed between any two genomes <inline-formula id="IE105"><mml:math id="IM105"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:math></inline-formula>. The similarity measure used here is the Jaccard index of the sets of gene orthology groups of the respective genomes. Here, a similarity of one implies that the two genomes have identical gene orthology groups, whereas if the similarity is 0, the two genomes do not share any gene orthology groups.</p>
        <p>The proposed (and implemented) modifications affect parameters <italic>m</italic> and <italic>q<sub>W</sub></italic> (described in <xref ref-type="supplementary-material" rid="sup1">Supplementary Section S3</xref>) in the computation of the ranking score. These two parameters now depend on a pre-specified threshold <italic>δ</italic> bounding from below the allowed similarity between two genomes in order for them to be considered distinct. First, consider the parameter <italic>m</italic> which denotes the total number of genomes in the dataset. This number is reduced to an effective number <inline-formula id="IE106"><mml:math id="IM106"><mml:mrow><mml:mi>m</mml:mi><mml:mo>′</mml:mo><mml:mo>≤</mml:mo><mml:mi>m</mml:mi></mml:mrow></mml:math></inline-formula> of non-redundant genomes participating in the dataset. <inline-formula id="IE107"><mml:math id="IM107"><mml:mrow><mml:mi>m</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> will be computed as follows:
<disp-formula id="E1"><label>(1)</label><mml:math id="M1"><mml:mrow><mml:mi>m</mml:mi><mml:mo>′</mml:mo><mml:mo>=</mml:mo><mml:msub><mml:mo>Σ</mml:mo><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mo>|</mml:mo><mml:mo>{</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi>S</mml:mi><mml:mo>:</mml:mo><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mo>δ</mml:mo><mml:mo>}</mml:mo><mml:mo>|</mml:mo></mml:mrow></mml:mfrac><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p>
        <p>Second, consider the parameter <italic>q<sub>W</sub></italic>, which denotes, per each CSB <italic>W</italic>, the number of genomes in which it has an instance. The corrected parameter <inline-formula id="IE108"><mml:math id="IM108"><mml:mrow><mml:msubsup><mml:mi>q</mml:mi><mml:mi>W</mml:mi><mml:mo>′</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> will be computed as follows:
<disp-formula id="E2"><label>(2)</label><mml:math id="M2"><mml:mrow><mml:msubsup><mml:mi>q</mml:mi><mml:mi>W</mml:mi><mml:mo>′</mml:mo></mml:msubsup><mml:mo>=</mml:mo><mml:msub><mml:mo>Σ</mml:mo><mml:mrow><mml:mo>{</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>:</mml:mo><mml:mi>W</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>}</mml:mo></mml:mrow></mml:msub><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mo>|</mml:mo><mml:mo>{</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>:</mml:mo><mml:mi>W</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo> </mml:mo><mml:mtext>and</mml:mtext><mml:mo> </mml:mo><mml:msub><mml:mi>D</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mo>δ</mml:mo><mml:mo>}</mml:mo><mml:mo>|</mml:mo></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula>where <inline-formula id="IE109"><mml:math id="IM109"><mml:mrow><mml:mi>W</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> indicates that <italic>W</italic> has an instance in <italic>S<sub>i</sub></italic> (respectively, for <inline-formula id="IE110"><mml:math id="IM110"><mml:mrow><mml:mi>W</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>).</p>
        <p>Note that <italic>δ</italic> is a user specified parameter between 0 and 1. If <italic>δ</italic> is set to 1, the input genomes are considered to be independent, whereas if <italic>δ</italic> is set to 0 all genomes are considered to be similar.</p>
      </sec>
    </sec>
  </sec>
  <sec>
    <title>4 Results</title>
    <sec>
      <title>4.1 Scaling up to support large values of <italic>k</italic></title>
      <p>In <xref rid="btaa503-B48" ref-type="bibr">Svetlitsky <italic>et al.</italic> (2019)</xref>, we described and implemented a ST-based algorithm for the discovery of CSBs, which is sensitive to the parameter <italic>k</italic> (the number of allowed insertions) by a multiplicative factor, in terms of time complexity. Here, we proposed and implemented a MP arithmetic based algorithm that is insensitive to the parameter <italic>k</italic>. Both algorithms are exact and address the same formally defined computational problem (see Definition 1). Thus, if both algorithms are run with the same genome pre-processing setup and in the same CSB discovery mode (i.e. allowing the consideration of CSBs spanning either one or both strands), the output returned by both algorithms is identical. In this experiment, both algorithms were run in cross-strand CSB discovery mode.</p>
      <p>In this section, we give a comparison of the practical running times of the ST based algorithm described in the previous paper versus the MP based algorithm described in the current manuscript (technical details are given in Section 3.3). Our results show that on our benchmark dataset (described in Section 3.1), the MP algorithm indeed outperforms the ST algorithm in terms of practical running time for larger values of the parameter <italic>k</italic> (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S1</xref>). In particular, for <italic>k </italic>=<italic> </italic>8, the MP algorithm is ∼5% faster than the ST algorithm on average, while for <italic>k </italic>=<italic> </italic>20 the MP algorithm is ∼38% faster.</p>
      <p>Thus, a major advantage of the MP algorithm is its reduced sensitivity to the number of allowed insertions. This feature pays off when seeking multi-operon CSBs, in which large values of <italic>k</italic> need to be accommodated. For example the CSBs described in Section 4.4 were obtained by running CSBFinder-S with the parameter <italic>k </italic>=<italic> </italic>10, allowing the discovery of CSB instances of higher divergence (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S2</xref>). Notably, the running time of the MP algorithm increases only slightly with <italic>k</italic>. This slight increase could be due to the constants involved in processing a larger number of CSBs and CSB instances that are discovered when more insertions are allowed.</p>
    </sec>
    <sec>
      <title>4.2 Functional analysis of cross-strand CSBs</title>
      <p>The enhanced scalability of CSBFinder-S and its ability to identify CSBs spanning both strands makes it possible to run an analysis characterizing CSBs with different strand spanning patterns. CSBs of length three were split to three different strand combination groups, depending on the strand combination pattern of their genes: <inline-formula id="IE111"><mml:math id="IM111"><mml:mrow><mml:mo>→</mml:mo><mml:mo>→</mml:mo><mml:mo>→</mml:mo><mml:mo>,</mml:mo><mml:mo> </mml:mo><mml:mo>→</mml:mo><mml:mo>←</mml:mo><mml:mo>←</mml:mo></mml:mrow></mml:math></inline-formula> or <inline-formula id="IE112"><mml:math id="IM112"><mml:mrow><mml:mo>←</mml:mo><mml:mo>→</mml:mo><mml:mo>→</mml:mo></mml:mrow></mml:math></inline-formula>. Using the hypergeometric test, the enrichment for each functional category in the first position of CSBs, belonging to each strand combination group, was tested (details in Section 3.4). Significant results (<italic>P</italic>-value <inline-formula id="IE113"><mml:math id="IM113"><mml:mo>≤</mml:mo></mml:math></inline-formula> 0.05) were obtained for the ‘Transcription’ functional category for the strand combination pattern <inline-formula id="IE114"><mml:math id="IM114"><mml:mrow><mml:mo>←</mml:mo><mml:mo>→</mml:mo><mml:mo>→</mml:mo></mml:mrow></mml:math></inline-formula> (FDR corrected <italic>P</italic>-value = <inline-formula id="IE115"><mml:math id="IM115"><mml:mrow><mml:mn>1.71</mml:mn><mml:mo>×</mml:mo><mml:msup><mml:mrow><mml:mn>10</mml:mn></mml:mrow><mml:mrow><mml:mo>−</mml:mo><mml:mn>34</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>), and for the ‘Translation, ribosomal structure and biogenesis’ functional category for the strand combination pattern <inline-formula id="IE116"><mml:math id="IM116"><mml:mrow><mml:mo>→</mml:mo><mml:mo>→</mml:mo><mml:mo>→</mml:mo></mml:mrow></mml:math></inline-formula> (FDR corrected <italic>P</italic>-value = 0.01).</p>
      <p>The enrichment of transcription related genes in the first position of the strand combination pattern <inline-formula id="IE117"><mml:math id="IM117"><mml:mrow><mml:mo>←</mml:mo><mml:mo>→</mml:mo><mml:mo>→</mml:mo></mml:mrow></mml:math></inline-formula>, corresponds well with the results of a previous analysis of conserved gene pairs in 100 prokaryotic genomes (<xref rid="btaa503-B24" ref-type="bibr">Korbel <italic>et al.</italic>, 2004</xref>). In that study, an analysis of a set of conserved divergently transcribed gene pairs (i.e. gene pairs with the strand pattern <inline-formula id="IE118"><mml:math id="IM118"><mml:mrow><mml:mo>←</mml:mo><mml:mo>→</mml:mo></mml:mrow></mml:math></inline-formula>) showed that there is strong enrichment of pairs in which one gene encodes a transcriptional regulator, while the other encodes any other class of protein. Here, we generalized this result for longer blocks of consecutive genes.</p>
      <p>Another previous related study investigated the inter-relationship between transcription regulation and chromosomal organization of transcription units (TUs) in <italic>Escherichia coli</italic>, <italic>Bacillus subtilis</italic> and <italic>Saccharomyces cerevisiae</italic> (<xref rid="btaa503-B15" ref-type="bibr">Hershberg <italic>et al.</italic>, 2005</xref>). Transcription factors that regulate an adjacent TU were found to be very common in <italic>E.coli</italic> and in <italic>B.subtilis</italic> (44 and 42% of all transcription factors in these genomes follow this pattern, respectively), but practically non-existent in the yeast <italic>S.cerevisiae</italic>.</p>
      <p>These two aforementioned studies serve as a positive validation of our approach and motivate the utilization of CSBFinder-S to include strand information in CSB detection. Furthermore, our results indicate that transcriptional regulation by overlapping transcriptional genes is abundant in bacteria, as previously suggested for genes arranged in excludons (<xref rid="btaa503-B46" ref-type="bibr">Sesto <italic>et al.</italic>, 2013</xref>).</p>
    </sec>
    <sec>
      <title>4.3 Colinearity among syntenic blocks</title>
      <p>Having a scalable tool that can data-mine CSBs spanning multiple operons, we can now harness it to re-examine the colinearity of SBs. The definition of an SB is similar to the definition of a CSB (see Definition 1); the only difference is in how an instance is defined: Given a pattern string <italic>P</italic> and a string <italic>T</italic>, an instance of <italic>P</italic> in <italic>T</italic> is a substring <inline-formula id="IE119"><mml:math id="IM119"><mml:mrow><mml:mi>T</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula> of <italic>T</italic> such that the characters of <italic>P</italic> constitute a subset of the characters of <inline-formula id="IE120"><mml:math id="IM120"><mml:mrow><mml:mi>T</mml:mi><mml:mo>′</mml:mo></mml:mrow></mml:math></inline-formula>. In others words, unlike CSBs, SBs are not required to be colinearly conserved.</p>
      <p>Previous approaches for finding general SBs, with no restrictions on gene order, showed that colinearity is largely conserved across instances of SBs. In one study, SBs were extracted from 133 bacterial genomes and then the percentage of gene pairs that remain adjacent, in each genome where an SB occurs, was computed (<xref rid="btaa503-B28" ref-type="bibr">Ling <italic>et al.</italic>, 2009</xref>). This measure showed that a large proportion of the gene order is preserved across all SBs. In another study (<xref rid="btaa503-B52" ref-type="bibr">Winter <italic>et al.</italic>, 2016</xref>), half of the 65 SBs obtained by searching the genome of <italic>Synechocystis</italic> sp. PCC 6803 against 677 bacterial genomes were shown to be exclusively colinearly conserved. Furthermore, most of the found SBs had a dominant (i.e. most frequent) colinear variant.</p>
      <p>In this section, we execute CSBFinder-S on a dataset of 1485 archaeal and eubacterial genomes spanning 31 phyla (Section 3.1). CSBFinder-S was executed with the parameters <italic>k </italic>=<italic> </italic>0 and <italic>q </italic>=<italic> </italic>1, i.e. the quorum restriction was removed and insertions were prohibited to uncover all possible orders of any set of genes that occurs consecutively in any of these genomes. The resulting CSBs were transformed to SBs by merging all CSBs that share the same gene set into a single SB (details in Section 3.5). We focus on SBs that appear in at least 30 different genomes in our dataset, and distinguish between ‘exclusively ordered SBs’, which are SBs that have only one colinear order, versus the rest of the SBs, denoted hereafter ‘shuffled SBs’. Our goal is to estimate how often SBs are colinearly conserved, and whether exclusively ordered SBs are different from shuffled SBs in terms of their size and their taxonomic distribution.</p>
      <p>First, we compute the proportion of exclusively ordered versus shuffled SBs in the computed set of SBs. This analysis reveals that our set of SBs include 20 088 exclusively ordered SBs and only 6182 shuffled SBs. Thus, the frequency of shuffled SBs is substantially smaller than the frequency of exclusively ordered SBs—a staggering 76.5% of the SBs have only one gene order. Our results show that exclusively ordered SBs are much more common than previously thought.</p>
      <p>Analyzing the length distributions of exclusively ordered SBs versus shuffled SBs, we find a negative correlation between the proportion of shuffled SBs and their length; almost half of the SBs of length two have at least two gene order variants among their instances (out of four possible order and strand combinations). In comparison, only 3% of the SBs of length seven are shuffled (see <xref ref-type="fig" rid="btaa503-F3">Figure 3</xref>). Furthermore, the average length of exclusively ordered SBs is 4.91 that is considerably larger than the average length of shuffled SBs (2.61). We note, however, that SBs in our analysis may be dependent due to shared COGs. To test the effect of such dependency on our results, we examined all SBs of length two (9855 SBs), including 5675 exclusively ordered SBs and 4180 shuffled SBs. We found that 4008 (70%) of the exclusively ordered SBs are substrings of longer exclusively ordered SBs. Of the shuffled SBs, 1198 (25%) have a colinear variant that is a substring of a longer exclusively ordered SB; in most of these SBs (1137; 95%), this colinear variant is the dominant one among all other order and strand combinations. Thus, our results demonstrate that SBs of length two that are commonly colinear, are likely to be conserved as part of longer colinear SBs.
</p>
      <fig id="btaa503-F3" orientation="portrait" position="float">
        <label>Fig. 3.</label>
        <caption>
          <p>Frequency of shuffled and exclusively ordered SBs according to SB length</p>
        </caption>
        <graphic xlink:href="btaa503f3"/>
      </fig>
      <p>To quantify the taxonomic diversity of SBs, we analyzed the taxonomic diversity of the genomes containing instances of shuffled SBs versus genomes containing instances of exclusively ordered SBs. We used the <xref rid="btaa503-B47" ref-type="bibr">Shannon (1948)</xref> index to quantify the biodiversity of SBs, denoted by <inline-formula id="IE121"><mml:math id="IM121"><mml:mrow><mml:mi>H</mml:mi><mml:mo>=</mml:mo><mml:mo>Σ</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mtext>ln</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula>, where <italic>p<sub>i</sub></italic> is the proportion of genomes belonging to the <italic>i</italic>th taxon in the dataset. The Shannon index was computed for each SB and for three different taxa groups: Phylum, Class and Genus, by considering the genomes containing at least one instance of the corresponding SB. The comparison of average values for all shuffled and exclusively ordered SBs shows that the instances of shuffled SBs are found in more diverse taxa in comparison to exclusively ordered SBs, in all tested taxonomic levels (<xref rid="btaa503-T1" ref-type="table">Table 1</xref>). Thus, the taxonomic resolution of the analyzed data is expected to have an effect on the proportion of exclusively ordered versus shuffled SBs; for example analysis of specific taxonomic groups would yield a higher proportion of exclusively ordered SBs.
</p>
      <table-wrap id="btaa503-T1" orientation="portrait" position="float">
        <label>Table 1.</label>
        <caption>
          <p>The average Shannon index of exclusively ordered versus shuffled SBs</p>
        </caption>
        <table frame="hsides" rules="groups">
          <colgroup span="1">
            <col valign="top" align="left" span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
            <col valign="top" align="char" char="." span="1"/>
          </colgroup>
          <thead>
            <tr>
              <th rowspan="1" colspan="1"/>
              <th rowspan="1" colspan="1">Phylum</th>
              <th rowspan="1" colspan="1">Class</th>
              <th rowspan="1" colspan="1">Genus</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="1" colspan="1">Exclusively ordered</td>
              <td rowspan="1" colspan="1">0.458</td>
              <td rowspan="1" colspan="1">0.312</td>
              <td rowspan="1" colspan="1">2.278</td>
            </tr>
            <tr>
              <td rowspan="1" colspan="1">Shuffled</td>
              <td rowspan="1" colspan="1">0.780</td>
              <td rowspan="1" colspan="1">1.307</td>
              <td rowspan="1" colspan="1">2.841</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </sec>
    <sec>
      <title>4.4 Contextual analysis of CSBs</title>
      <p>In this section, we exemplify how the functional semantic filter implemented in CSBFinder-S, coupled with the data-mining algorithm, can be utilized for contextual and evolutionary analysis of CSB families. CSBFinder-S was used to analyze the dataset of 1485 chromosomal genomes (Section 3.1) to obtain CSBs spanning both strands (details in Section 3.6). We focus our example on secretion systems, as they play a critical role in the evolution of bacterial virulence (<xref rid="btaa503-B13" ref-type="bibr">Green and Mecsas, 2016</xref>).</p>
      <p>In Section 4.3 we observed that many SBs of length two have more than one colinear variant. However, in most of these SBs, the dominant variant is a substring of a longer exclusively ordered SB. The most common shuffled SB of length two that has genes related to secretion, consists of the genes PulE (COG2804) and PulF (COG1459). In CSBFinder-S execution without insertions, there are two CSBs consisting of this gene pair: PulE(+)PulF(+) has 745 instances, and PulF(+)PulE(+) has 41 instances (see <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S3</xref>). The dominant CSB is a substring of longer exclusively colinear CSBs, while the second CSB is not a substring of any other CSBs. This motivated us to explore longer CSBs that contain the PulE(+)PulF(+) CSB.</p>
      <p>To examine different functional contexts of PulEF, we executed CSBFinder-S with up to 10 insertions. Allowing a large number of insertions revealed CSB instances with higher divergence (see <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S2</xref> for an example). The results were filtered for CSBs containing the PulEF COG IDs and then re-clustered into families using the CSBFinder-S user interface (<xref ref-type="supplementary-material" rid="sup1">Supplementary Table S2</xref>). <xref ref-type="fig" rid="btaa503-F4">Figure 4</xref> illustrates seven of the resulting CSBs selected to exemplify three distinct contexts: Type II Secretion System (T2SS), Type IV Pilus system (T4PS) and DNA uptake machinery. Genes that function in these contexts share several structural and functional features, and were previously shown to be evolutionary related (<xref rid="btaa503-B12" ref-type="bibr">Giltner <italic>et al.</italic>, 2012</xref>; <xref rid="btaa503-B36" ref-type="bibr">Peabody <italic>et al.</italic>, 2003</xref>).
</p>
      <fig id="btaa503-F4" orientation="portrait" position="float">
        <label>Fig. 4.</label>
        <caption>
          <p>Seven of the CSBs obtained after filtration using the keywords PulE and PulF. The COGs in the figure were annotated with gene IDs using the CDD database (<xref rid="btaa503-B30" ref-type="bibr">Marchler-Bauer <italic>et al.</italic>, 2015</xref>). The taxonomic classes in which each CSB has an instance are indicated. <inline-formula id="IE122"><mml:math id="IM122"><mml:mrow><mml:mo>α</mml:mo><mml:mo>−</mml:mo><mml:mo>δ</mml:mo></mml:mrow></mml:math></inline-formula> are the classes of proteobacteria, B. stands for the class Bacilli. COGs are color coded, except for COGs appearing in only one CSB that are colored in gray. A question mark denotes an uncharacterized gene. Note that the instances of the CSBs shown in this figure can have up to 10 gene insertions. To exemplify this, some of the instances of CSB 4 are shown in <xref ref-type="supplementary-material" rid="sup1">Supplementary Figure S2</xref>. *Gene names may be ambiguous, see text</p>
        </caption>
        <graphic xlink:href="btaa503f4"/>
      </fig>
      <p>Homologous proteins shared across these three contexts include proteins forming filamentous structures (e.g. pillins and pseudopillins), the cytoplasmic ATPases (e.g. pulE and its homologs) and the membrane proteins (e.g. pulF and its homologs). A common ancestry has been previously suggested for the T2SS, T4PS and the Archaeal Flagella, based on their homologous ATPases and their homologous transmembrane proteins (<xref rid="btaa503-B36" ref-type="bibr">Peabody <italic>et al.</italic>, 2003</xref>). Note that the user interface of CSBFinder-S enables to display a detailed taxonomic distribution of the instances of each CSB (<xref ref-type="supplementary-material" rid="sup1">Supplementary Figs S5–S8</xref>). Furthermore, the different orientation of genes in CSBs 5, 6 and 7 indicates that these CSBs likely include multiple operons. In what follows, we elaborate on the different functional contexts of PulE(+)PulF(+) CSB.</p>
      <p><italic>T2SS context</italic>: CSBs 1 and 2 in <xref ref-type="fig" rid="btaa503-F4">Figure 4</xref> contain genes from the Type II Secretion System (T2SS), and in particular, the second CSB contains most of the known T2SS genes. The T2SS is a membrane spanning secretion system composed of 12–15 different secretory pathway proteins that secrete a wide variety of folded exoproteins (<xref rid="btaa503-B25" ref-type="bibr">Korotkov <italic>et al.</italic>, 2012</xref>). The order of T2SS genes is typically well conserved, where variations in gene content in different species are usually found at the 5′ and 3′ ends of the gene cluster (<xref rid="btaa503-B43" ref-type="bibr">Sandkvist, 2001</xref>). The first CSB we present in <xref ref-type="fig" rid="btaa503-F4">Figure 4</xref>, was detected in alpha-, beta-, gamma- and delta-proteobacteria, while the second CSB was found only in gamma-proteobacteria. T2SSs contain five pilins (PulGHIJK) needed for secretion; PulG is the major pseudo-pilin, while the other four are minor pseudo-pilins (<xref rid="btaa503-B37" ref-type="bibr">Possot <italic>et al.</italic>, 2000</xref>). The three copies of pulG (COG2165) in the second CSB correspond to homologs of pulG, pulH and PulI, which are classified into the same COG ID due to sequence similarity.</p>
      <p><italic>DNA uptake context</italic>: CSBs 3–5 in <xref ref-type="fig" rid="btaa503-F4">Figure 4</xref> exemplify the occurrence of pulEF in the context of natural competence (DNA uptake). These CSBs include COG4537, a gene homologous to ComGC, that functions in DNA uptake in Gram-positive bacteria (<xref rid="btaa503-B32" ref-type="bibr">Muschiol <italic>et al.</italic>, 2015</xref>). Indeed, these three CSBs are found exclusively in Gram-positive strains; CSB 4 is found in the genera <italic>Bacillus</italic>, <italic>Geobacillus</italic> and <italic>Staphylococcus</italic>, whereas the other two CSBs are <italic>Streptococcus</italic>-specific. Note that PulE and PulF in these CSBs are termed in these organisms ComGA and ComGB, respectively (classified into the same COG IDs).</p>
      <p>Examining the instances of CSB 4 reveals that it has 10 instances in <italic>Bacillus</italic> strains with 7–10 gene insertions, 2 instances in <italic>Geobacillus</italic> strains with 5 gene insertions and 19 instances in <italic>Staphylococcus</italic> strains without any gene insertions (see <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S2</xref>). Thus, setting the parameter <italic>k</italic> to 10 (i.e. enabling up to 10 insertions) revealed further instances of this CSB in strains where the gene synteny is less conserved (typically distantly related strains). In addition, as the instance quorum was set to 30 in this benchmark, if less than 10 insertions were allowed this CSB would not have passed the quorum and thus would not have been detected.</p>
      <p><italic>T4P context</italic>: CSBs 6 and 7 have many genes in common and were clustered by CSBFinder-S to the same CSB family. The surrounding context of CSB 6 seems to indicate that it functions in the type IV pilus biogenesis (T4P) system, while the context of CSB 7 is quite puzzling as it does not include pilus genes. The T2SS and the T4P pathways share many homologous proteins, suggesting a common evolutionary origin (<xref rid="btaa503-B34" ref-type="bibr">Nunn, 1999</xref>). Well characterized roles of T4P systems include adherence to natural surfaces, twitching motility, modulation of biofilm architecture, DNA uptake (competence) and transfer (conjugation), secretion of exoproteins and bacteriophage susceptibility (<xref rid="btaa503-B12" ref-type="bibr">Giltner <italic>et al.</italic>, 2012</xref>). Note that PulE and PulF in these CSBs are termed in these organisms PilF and PilG, respectively (classified into the same COG IDs).</p>
      <p>The T4P gene PilA, as well as ComGC in the DNA uptake system and PulG in the T2SS, are type IV pilin proteins with a distinct N-terminal signal sequence (<xref rid="btaa503-B12" ref-type="bibr">Giltner <italic>et al.</italic>, 2012</xref>). Proteins with this unique signal sequence are called prepilins and are not competent for assembly until the signal is cleaved, using prepilin peptidases (PilD/PulO), that is included in CSB 7. The protein SecA, an ATPase that is present in both CSBs 6 and 7, is a primary component of the Sec pathway that inserts prepillins into the cytoplasmic membrane. It is conceivable that the co-expression of PilA and SecA in CSB 6 may be important for Sec-mediated translocation of the prepilin PilA.</p>
      <p><italic>Accessory virulence genes across different contexts</italic>: CSBs 4, 5 and 6 in <xref ref-type="fig" rid="btaa503-F4">Figure 4</xref> illustrate multi-operon context including genes that play a role in resistance to antimicrobial substances. These genes span CSBs from two distinct functions (DNA uptake versus T4P) and a wide taxonomic range (both Gram-positive and Gram-negative bacteria, correspondingly). CSB 4 contains a GloB-homolog—a predicted glyoxylase that is part of a methylglyoxal degradation pathway; it has been previously shown that methylglyoxal has an antibacterial activity against <italic>Staphylococcus aureus</italic> (<xref rid="btaa503-B21" ref-type="bibr">Jervis-Bardy <italic>et al.</italic>, 2011</xref>). The resistance factor found in CSB 5 is an MrcB-homolog—a penicillin binding protein. The presence of antimicrobial genes in the neighborhood of DNA uptake genes may be related to the functional link between antibiotic stress response and the induction of natural competence (<xref rid="btaa503-B39" ref-type="bibr">Prudhomme <italic>et al.</italic>, 2006</xref>).</p>
      <p>Genes associated with antimicrobial resistance are also found in CSB 6 (in the predicted context of Pilus Assembly in gamma-proteobacteria): this CSB contains the operon AmpDE, which plays a role in the regulation of the AmpC gene encoding a beta-lactamase. AmpE is a signal transduction inner-membrane protein, predicted to be activated in the presence of beta-lactam (<xref rid="btaa503-B16" ref-type="bibr">Honoré <italic>et al.</italic>, 1989</xref>), while AmpD is the predicted repressor of AmpC. The longest CSB that includes PulEF comprises 36 genes, among which are AmpE and AmpD (<xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S4</xref>, see details in Section S4.5).</p>
    </sec>
  </sec>
  <sec>
    <title>5 Discussion</title>
    <p>We propose an efficient algorithm for the discovery of cross-strand, multi-operon CSBs in large genomic datasets. The proposed algorithm uses match-point arithmetic and is thus both time and space scalable. The new algorithm is insensitive to the number of allowed insertions and to the length of the sought CSBs, thus it enables the discovery of CSBs spanning multiple operons. The algorithm was implemented and incorporated into a tool with a graphical user interface, denoted CSBFinder-S.</p>
    <p>CSBFinder-S differs from our previously released tool for CSB discovery (<xref rid="btaa503-B48" ref-type="bibr">Svetlitsky <italic>et al.</italic>, 2019</xref>) by several major contributions. Mainly, it is more general; while in the previous version of the tool CSBs were confined to directons (consecutive genes encoded on the same strand), the new tool can also detect cross-strand multi-operon CSBs. This generalization is scalable due to the newly proposed algorithm (Section 2), and due to its multi-threaded implementation (Section 3.7.2). In addition, CSBFinder-S incorporates a measure of divergence between the input genomes to overcome sampling bias in the ranking score computation (Section 3.7.3).</p>
    <p>Furthermore, CSBFinder-S offers new functions to help the user navigate through the database of discovered CSBs. These include filters that enable the user to constrain the structural features of the inferred CSBs (length, abundance, etc.), as well as to extract CSBs confined to specific functional semantic categories (exemplified in Section 4.4). The user interface also includes a taxonomic viewer of the genomes in which CSB instances appear (see for example <xref ref-type="supplementary-material" rid="sup1">Supplementary Fig. S5</xref>), and the option to re-cluster the found CSBs into families according to user-specified parameters.</p>
    <p>Notably, despite extensive shuffling of prokaryotic genomes, most SBs in our dataset were exclusively ordered, also when considering cross-strand CSBs that can span multiple operons. The CSBs we uncovered with CSBFinder-S likely represent functional units whose expression is tightly coordinated and their gene order evolves under a strong purifying selection (<xref rid="btaa503-B23" ref-type="bibr">Koonin, 2009</xref>). The analysis of conserved colinear gene orders is instrumental for functional studies of microbial organisms.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This study was partially supported by the European Research Council [281357 to T.D.]; and the Israel Science Foundation [179/14 and 939/18 to D.S. and M.Z.-U.].</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>btaa503_Supplementary_Data</label>
      <media xlink:href="btaa503_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btaa503-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Altenhoff</surname><given-names>A.M.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>The OMA orthology database in 2018: retrieving evolutionary relationships among all domains of life through richer web and programmatic interfaces</article-title>. <source>Nucleic Acids Res</source>., <volume>46</volume>, <fpage>D477</fpage>–<lpage>D485</lpage>.<pub-id pub-id-type="pmid">29106550</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bateman</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2002</year>) 
<article-title>The Pfam protein families database</article-title>. <source>Nucleic Acids Res</source>., <volume>30</volume>, <fpage>276</fpage>–<lpage>280</lpage>.<pub-id pub-id-type="pmid">11752314</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Benjamini</surname><given-names>Y.</given-names></name>, <name name-style="western"><surname>Hochberg</surname><given-names>Y.</given-names></name></person-group> (<year>2000</year>) 
<article-title>On the adaptive control of the false discovery rate in multiple testing with independent statistics</article-title>. <source>J. Educ. Behav. Stat</source>., <volume>25</volume>, <fpage>60</fpage>–<lpage>83</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa503-B4">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Bergroth</surname><given-names>L.</given-names></name></person-group><etal>et al</etal> (<year>2000</year>) A survey of longest common subsequence algorithms. In <italic>Proceedings of Seventh International Symposium on String Processing and Information Retrieval, 2000. SPIRE 2000</italic> IEEE, pp. <fpage>39</fpage>–<lpage>48</lpage>. Piscataway, New Jersey, USA.</mixed-citation>
    </ref>
    <ref id="btaa503-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Böcker</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2009</year>) 
<article-title>Computation of median gene clusters</article-title>. <source>J. Comput. Biol</source>., <volume>16</volume>, <fpage>1085</fpage>–<lpage>1099</lpage>.<pub-id pub-id-type="pmid">19689215</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Brandis</surname><given-names>G.</given-names></name></person-group><etal>et al</etal> (<year>2019</year>) 
<article-title>Operon concatenation is an ancient feature that restricts the potential to rearrange bacterial chromosomes</article-title>. <source>Mol. Biol. Evol</source>., <volume>36</volume>, <fpage>1990</fpage>–<lpage>2000</lpage>.<pub-id pub-id-type="pmid">31132113</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Chen</surname><given-names>I.-M.A.</given-names></name></person-group><etal>et al</etal> (<year>2019</year>) 
<article-title>IMG/M v. 5.0: an integrated data management and comparative analysis system for microbial genomes and microbiomes</article-title>. <source>Nucleic Acids Res</source>., <volume>47</volume>, <fpage>D666</fpage>–<lpage>D677</lpage>.<pub-id pub-id-type="pmid">30289528</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cosentino</surname><given-names>S.</given-names></name>, <name name-style="western"><surname>Iwasaki</surname><given-names>W.</given-names></name></person-group> (<year>2019</year>) 
<article-title>SonicParanoid: fast, accurate and easy orthology inference</article-title>. <source>Bioinformatics</source>, <volume>35</volume>, <fpage>149</fpage>–<lpage>151</lpage>.<pub-id pub-id-type="pmid">30032301</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Danchin</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2000</year>) 
<article-title>Mapping the bacterial cell architecture into the chromosome</article-title>. <source>Philos. Trans. R. Soc. Lond. B Biol. Sci</source>., <volume>355</volume>, <fpage>179</fpage>–<lpage>190</lpage>.<pub-id pub-id-type="pmid">10724454</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Dandekar</surname><given-names>T.</given-names></name></person-group><etal>et al</etal> (<year>1998</year>) 
<article-title>Conservation of gene order: a fingerprint of proteins that physically interact</article-title>. <source>Trends Biochem. Sci</source>., <volume>23</volume>, <fpage>324</fpage>–<lpage>328</lpage>.<pub-id pub-id-type="pmid">9787636</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Doron</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Systematic discovery of antiphage defense systems in the microbial pangenome</article-title>. <source>Science</source>, <volume>359</volume>, <fpage>eaar4120</fpage>.<pub-id pub-id-type="pmid">29371424</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Giltner</surname><given-names>C.L.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>Type IV pilin proteins: versatile molecular modules</article-title>. <source>Microbiol. Mol. Biol. Rev</source>., <volume>76</volume>, <fpage>740</fpage>–<lpage>772</lpage>.<pub-id pub-id-type="pmid">23204365</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Green</surname><given-names>E.R.</given-names></name>, <name name-style="western"><surname>Mecsas</surname><given-names>J.</given-names></name></person-group> (<year>2016</year>) 
<article-title>Bacterial secretion systems—an overview</article-title>. <source>Microbiol. Spectr</source>., <volume>4</volume>, <fpage>213</fpage>–<lpage>239</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa503-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>He</surname><given-names>X.</given-names></name>, <name name-style="western"><surname>Goldwasser</surname><given-names>M.H.</given-names></name></person-group> (<year>2005</year>) 
<article-title>Identifying conserved gene clusters in the presence of homology families</article-title>. <source>J. Comput. Biol</source>., <volume>12</volume>, <fpage>638</fpage>–<lpage>656</lpage>.<pub-id pub-id-type="pmid">16108708</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hershberg</surname><given-names>R.</given-names></name></person-group><etal>et al</etal> (<year>2005</year>) 
<article-title>Chromosomal organization is shaped by the transcription regulatory network</article-title>. <source>Trends Genet</source>., <volume>21</volume>, <fpage>138</fpage>–<lpage>142</lpage>.<pub-id pub-id-type="pmid">15734572</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Honoré</surname><given-names>N.</given-names></name></person-group><etal>et al</etal> (<year>1989</year>) 
<article-title>Regulation of enterobacterial cephalosporinase production: the role of a membrane-bound sensory transducer</article-title>. <source>Mol. Microbiol</source>., <volume>3</volume>, <fpage>1121</fpage>–<lpage>1130</lpage>.<pub-id pub-id-type="pmid">2607970</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hu</surname><given-names>X.</given-names></name>, <name name-style="western"><surname>Friedberg</surname><given-names>I.</given-names></name></person-group> (<year>2019</year>) 
<article-title>SwiftOrtho: a fast, memory-efficient, multiple genome orthology classifier</article-title>. <source>GigaScience</source>, <volume>8</volume>, <fpage>giz118</fpage>.<pub-id pub-id-type="pmid">31648300</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B18">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Hunt</surname><given-names>J.W.</given-names></name>, <name name-style="western"><surname>Szymanski</surname><given-names>T.G.</given-names></name></person-group> (<year>1977</year>) 
<article-title>A fast algorithm for computing longest common subsequences</article-title>. <source>Commun. ACM</source>, <volume>20</volume>, <fpage>350</fpage>–<lpage>353</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa503-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Huynen</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>2000</year>) 
<article-title>Exploitation of gene context</article-title>. <source>Curr. Opin. Struct. Biol</source>., <volume>10</volume>, <fpage>366</fpage>–<lpage>370</lpage>.<pub-id pub-id-type="pmid">10851194</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Jahn</surname><given-names>K.</given-names></name></person-group> (<year>2011</year>) 
<article-title>Efficient computation of approximate gene clusters based on reference occurrences</article-title>. <source>J. Comput. Biol</source>., <volume>18</volume>, <fpage>1255</fpage>–<lpage>1274</lpage>.<pub-id pub-id-type="pmid">21899430</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B21">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Jervis-Bardy</surname><given-names>J.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>Methylglyoxal-infused honey mimics the anti-<italic>Staphylococcus aureus</italic> biofilm activity of manuka honey: potential implication in chronic rhinosinusitis</article-title>. <source>Laryngoscope</source>, <volume>121</volume>, <fpage>1104</fpage>–<lpage>1107</lpage>.<pub-id pub-id-type="pmid">21520131</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B22">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Junier</surname><given-names>I.</given-names></name>, <name name-style="western"><surname>Rivoire</surname><given-names>O.</given-names></name></person-group> (<year>2016</year>) Conserved units of co-expression in bacterial genomes: an evolutionary insight into transcriptional regulation. <source>PLoS One</source>, <volume>11</volume>, <fpage>e0155740</fpage>.<pub-id pub-id-type="pmid">27195891</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Koonin</surname><given-names>E.V.</given-names></name></person-group> (<year>2009</year>) 
<article-title>Evolution of genome architecture</article-title>. <source>Int. J. Biochemist. Cell Biol</source>., <volume>41</volume>, <fpage>298</fpage>–<lpage>306</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa503-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Korbel</surname><given-names>J.O.</given-names></name></person-group><etal>et al</etal> (<year>2004</year>) 
<article-title>Analysis of genomic context: prediction of functional associations from conserved bidirectionally transcribed gene pairs</article-title>. <source>Nat. Biotechnol</source>., <volume>22</volume>, <fpage>911</fpage>–<lpage>917</lpage>.<pub-id pub-id-type="pmid">15229555</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Korotkov</surname><given-names>K.V.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>The type ii secretion system: biogenesis, molecular architecture and mechanism</article-title>. <source>Nature Reviews Microbiology</source>, <volume>10</volume>, <fpage>336</fpage>–<lpage>351</lpage>.<pub-id pub-id-type="pmid">22466878</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lechner</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>2011</year>) 
<article-title>Proteinortho: detection of (co-)orthologs in large-scale analysis</article-title>. <source>BMC Bioinformatics</source>, <volume>12</volume>, <fpage>124</fpage>.<pub-id pub-id-type="pmid">21526987</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Levy</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Genomic features of bacterial adaptation to plants</article-title>. <source>Nat. Genet</source>., <volume>50</volume>, <fpage>138</fpage>–<lpage>150</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa503-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Ling</surname><given-names>X.</given-names></name></person-group><etal>et al</etal> (<year>2009</year>) 
<article-title>Detecting gene clusters under evolutionary constraint in a large number of genomes</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>571</fpage>–<lpage>577</lpage>.<pub-id pub-id-type="pmid">19158161</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Marcet-Houben</surname><given-names>M.</given-names></name>, <name name-style="western"><surname>Gabaldón</surname><given-names>T.</given-names></name></person-group> (<year>2019</year>) 
<article-title>EvolClust: automated inference of evolutionary conserved gene clusters in eukaryotes</article-title>. <source>Bioinformatics</source>, <volume>36</volume>, 1265--1266.</mixed-citation>
    </ref>
    <ref id="btaa503-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Marchler-Bauer</surname><given-names>A.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>CDD: NCBI’s conserved domain database</article-title>. <source>Nucleic Acids Res</source>., <volume>43</volume>, <fpage>D222</fpage>–<lpage>D226</lpage>.<pub-id pub-id-type="pmid">25414356</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Marsh</surname><given-names>J.A.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) 
<article-title>Protein complexes are under evolutionary selection to assemble via ordered pathways</article-title>. <source>Cell</source>, <volume>153</volume>, <fpage>461</fpage>–<lpage>470</lpage>.<pub-id pub-id-type="pmid">23582331</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Muschiol</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>Uptake of extracellular DNA: competence induced pili in natural transformation of streptococcus pneumoniae</article-title>. <source>Bioessays</source>, <volume>37</volume>, <fpage>426</fpage>–<lpage>435</lpage>.<pub-id pub-id-type="pmid">25640084</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Mushegian</surname><given-names>A.R.</given-names></name>, <name name-style="western"><surname>Koonin</surname><given-names>E.V.</given-names></name></person-group> (<year>1996</year>) 
<article-title>A minimal gene set for cellular life derived by comparison of complete bacterial genomes</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>93</volume>, <fpage>10268</fpage>–<lpage>10273</lpage>.<pub-id pub-id-type="pmid">8816789</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Nunn</surname><given-names>D.</given-names></name></person-group> (<year>1999</year>) 
<article-title>Bacterial type II protein export and pilus biogenesis: more than just homologies?</article-title><source>Trends Cell Biol</source>., <volume>9</volume>, <fpage>402</fpage>–<lpage>408</lpage>.<pub-id pub-id-type="pmid">10481178</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B35">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Overbeek</surname><given-names>R.</given-names></name></person-group><etal>et al</etal> (<year>1999</year>) 
<article-title>The use of gene clusters to infer functional coupling</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>96</volume>, <fpage>2896</fpage>–<lpage>2901</lpage>.<pub-id pub-id-type="pmid">10077608</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Peabody</surname><given-names>C.R.</given-names><suffix>Jr.</suffix></name></person-group><etal>et al</etal> (<year>2003</year>) 
<article-title>Type II protein secretion and its relationship to bacterial type IV pili and archaeal flagella</article-title>. <source>Microbiology</source>, <volume>149</volume>, <fpage>3051</fpage>–<lpage>3072</lpage>.<pub-id pub-id-type="pmid">14600218</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B37">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Possot</surname><given-names>O.M.</given-names></name></person-group><etal>et al</etal> (<year>2000</year>) 
<article-title>Multiple interactions between pullulanase secreton components involved in stabilization and cytoplasmic membrane association of pule</article-title>. <source>J. Bacteriol</source>., <volume>182</volume>, <fpage>2142</fpage>–<lpage>2152</lpage>.<pub-id pub-id-type="pmid">10735856</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B38">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Proost</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>i-ADHoRe 3.0—fast and sensitive detection of genomic homology in extremely large data sets</article-title>. <source>Nucleic Acids Res</source>., <volume>40</volume>, <fpage>e11</fpage>–<lpage>e11</lpage>.<pub-id pub-id-type="pmid">22102584</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B39">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Prudhomme</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>2006</year>) 
<article-title>Antibiotic stress induces genetic transformability in the human pathogen <italic>Streptococcus pneumoniae</italic></article-title>. <source>Science</source>, <volume>313</volume>, <fpage>89</fpage>–<lpage>92</lpage>.<pub-id pub-id-type="pmid">16825569</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B40">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Rocha</surname><given-names>E.P.</given-names></name></person-group> (<year>2008</year>) 
<article-title>The organization of the bacterial genome</article-title>. <source>Annu. Rev. Genet</source>., <volume>42</volume>, <fpage>211</fpage>–<lpage>233</lpage>.<pub-id pub-id-type="pmid">18605898</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B41">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Rödelsperger</surname><given-names>C.</given-names></name>, <name name-style="western"><surname>Dieterich</surname><given-names>C.</given-names></name></person-group> (<year>2010</year>) 
<article-title>CYNTENATOR: progressive gene order alignment of 17 vertebrate genomes</article-title>. <source>PLoS One</source>, <volume>5</volume>, <fpage>e8861</fpage>.<pub-id pub-id-type="pmid">20126624</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B42">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Rogozin</surname><given-names>I.B.</given-names></name></person-group><etal>et al</etal> (<year>2004</year>) 
<article-title>Computational approaches for the analysis of gene neighbourhoods in prokaryotic genomes</article-title>. <source>Brief. Bioinf</source>., <volume>5</volume>, <fpage>131</fpage>–<lpage>149</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa503-B43">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sandkvist</surname><given-names>M.</given-names></name></person-group> (<year>2001</year>) 
<article-title>Type II secretion and pathogenesis</article-title>. <source>Infect. Immun</source>., <volume>69</volume>, <fpage>3523</fpage>–<lpage>3535</lpage>.<pub-id pub-id-type="pmid">11349009</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B44">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Seabold</surname><given-names>S.</given-names></name>, <name name-style="western"><surname>Perktold</surname><given-names>J.</given-names></name></person-group> (<year>2010</year>) Statsmodels: econometric and statistical modeling with Python. In: <italic>Proceedings of the 9th Python in Science Conference</italic>, p. 61. Austin, Texas.</mixed-citation>
    </ref>
    <ref id="btaa503-B45">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Selengut</surname><given-names>J.D.</given-names></name></person-group><etal>et al</etal> (<year>2007</year>) 
<article-title>TIGRFAMs and genome properties: tools for the assignment of molecular function and biological process in prokaryotic genomes</article-title>. <source>Nucleic Acids Res</source>., <volume>35</volume>, <fpage>D260</fpage>–<lpage>D264</lpage>.<pub-id pub-id-type="pmid">17151080</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B46">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Sesto</surname><given-names>N.</given-names></name></person-group><etal>et al</etal> (<year>2013</year>) 
<article-title>The excludon: a new concept in bacterial antisense RNA-mediated gene regulation</article-title>. <source>Nat. Rev. Microbiol</source>., <volume>11</volume>, <fpage>75</fpage>–<lpage>82</lpage>.<pub-id pub-id-type="pmid">23268228</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B47">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Shannon</surname><given-names>C.E.</given-names></name></person-group> (<year>1948</year>) 
<article-title>A mathematical theory of communication</article-title>. <source>Bell Syst. Tech. J</source>., <volume>27</volume>, <fpage>379</fpage>–<lpage>423</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa503-B48">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Svetlitsky</surname><given-names>D.</given-names></name></person-group><etal>et al</etal> (<year>2019</year>) 
<article-title>CSBFinder: discovery of colinear syntenic blocks across thousands of prokaryotic genomes</article-title>. <source>Bioinformatics</source>, <volume>35</volume>, <fpage>1634</fpage>–<lpage>1643</lpage>.<pub-id pub-id-type="pmid">30321308</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B49">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Tatusov</surname><given-names>R.L.</given-names></name></person-group><etal>et al</etal> (<year>2000</year>) 
<article-title>The COG database: a tool for genome-scale analysis of protein functions and evolution</article-title>. <source>Nucleic Acids Res</source>., <volume>28</volume>, <fpage>33</fpage>–<lpage>36</lpage>.<pub-id pub-id-type="pmid">10592175</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B50">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Virtanen</surname><given-names>P.</given-names></name></person-group><etal>et al</etal> (<year>2020</year>) SciPy 1.0—fundamental algorithms for scientific computing in Python. <italic>Nat. Methods,</italic><volume>17</volume>, <fpage>261</fpage>–<lpage>272</lpage>.</mixed-citation>
    </ref>
    <ref id="btaa503-B51">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Wang</surname><given-names>Y.</given-names></name></person-group><etal>et al</etal> (<year>2012</year>) 
<article-title>MCScanX: a toolkit for detection and evolutionary analysis of gene synteny and collinearity</article-title>. <source>Nucleic Acids Res</source>., <volume>40</volume>, <fpage>e49</fpage>–<lpage>e49</lpage>.<pub-id pub-id-type="pmid">22217600</pub-id></mixed-citation>
    </ref>
    <ref id="btaa503-B52">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Winter</surname><given-names>S.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>Finding approximate gene clusters with GECKO 3</article-title>. <source>Nucleic Acids Res</source>., <volume>44</volume>, <fpage>9600</fpage>–<lpage>9610</lpage>.<pub-id pub-id-type="pmid">27679480</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
