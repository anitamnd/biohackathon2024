<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Res</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Res</journal-id>
    <journal-id journal-id-type="publisher-id">GENOME</journal-id>
    <journal-title-group>
      <journal-title>Genome Research</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1088-9051</issn>
    <issn pub-type="epub">1549-5469</issn>
    <publisher>
      <publisher-name>Cold Spring Harbor Laboratory Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3530679</article-id>
    <article-id pub-id-type="medline">9518021</article-id>
    <article-id pub-id-type="doi">10.1101/gr.132480.111</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Resource</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SOAPindel: Efficient identification of indels from short paired reads</article-title>
      <alt-title alt-title-type="left-running">Li et al.</alt-title>
      <alt-title alt-title-type="right-running">SOAPindel: Indel detection by local assembly</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Li</surname>
          <given-names>Shengting</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="aff" rid="aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Li</surname>
          <given-names>Ruiqiang</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="author-notes" rid="fn1">7</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Li</surname>
          <given-names>Heng</given-names>
        </name>
        <xref ref-type="aff" rid="aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Lu</surname>
          <given-names>Jianliang</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Li</surname>
          <given-names>Yingrui</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Bolund</surname>
          <given-names>Lars</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="aff" rid="aff4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Schierup</surname>
          <given-names>Mikkel H.</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">2</xref>
        <xref ref-type="corresp" rid="cor1">8</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Wang</surname>
          <given-names>Jun</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">1</xref>
        <xref ref-type="aff" rid="aff5">5</xref>
        <xref ref-type="aff" rid="aff6">6</xref>
        <xref ref-type="corresp" rid="cor1">8</xref>
      </contrib>
      <aff id="aff1"><label>1</label>BGI Shenzhen, Shenzhen 518000, China;</aff>
      <aff id="aff2"><label>2</label>Bioinformatics Research Centre, Aarhus University, DK 8000 Aarhus C, Denmark;</aff>
      <aff id="aff3"><label>3</label>Broad Institute, Cambridge, Massachusetts 02142, USA;</aff>
      <aff id="aff4"><label>4</label>Human Genetics, Aarhus University, DK 8000 Aarhus C, Denmark;</aff>
      <aff id="aff5"><label>5</label>The Novo Nordisk Foundation Center for Basic Metabolic Research, University of Copenhagen, 2200 Copenhagen, Denmark;</aff>
      <aff id="aff6"><label>6</label>Department of Biology, University of Copenhagen, 2200 Copenhagen, Denmark</aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="present-address" id="fn1">
        <label>7</label>
        <p>Present address: Biodynamic Optical Imaging Center, and College of Life Sciences, Peking University, Beijing 100871, China.</p>
      </fn>
      <corresp id="cor1"><label>8</label>Corresponding authors E-mail <email xlink:type="simple">mheide@birc.au.dk</email> E-mail <email xlink:type="simple">wangj@genomics.cn</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <month>1</month>
      <year>2013</year>
    </pub-date>
    <volume>23</volume>
    <issue>1</issue>
    <fpage>195</fpage>
    <lpage>200</lpage>
    <history>
      <date date-type="received">
        <day>29</day>
        <month>9</month>
        <year>2011</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>9</month>
        <year>2012</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>
        <ext-link ext-link-type="uri" xlink:href="http://www.genome.org/site/misc/terms.xhtml">© 2013, Published by Cold Spring Harbor Laboratory Press</ext-link>
      </copyright-statement>
      <copyright-year>2013</copyright-year>
      <license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by-nc/3.0/">
        <license-p>This article is distributed exclusively by Cold Spring Harbor Laboratory Press for the first six months after the full-issue publication date (see <ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/site/misc/terms.xhtml">http://genome.cshlp.org/site/misc/terms.xhtml</ext-link>). After six months, it is available under a Creative Commons License (Attribution-NonCommercial 3.0 Unported License), as described at <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/3.0/">http://creativecommons.org/licenses/by-nc/3.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <self-uri xlink:title="pdf" xlink:type="simple" xlink:href="195.pdf"/>
    <abstract>
      <p>We present a new approach to indel calling that explicitly exploits that indel differences between a reference and a sequenced sample make the mapping of reads less efficient. We assign all unmapped reads with a mapped partner to their expected genomic positions and then perform extensive de novo assembly on the regions with many unmapped reads to resolve homozygous, heterozygous, and complex indels by exhaustive traversal of the de Bruijn graph. The method is implemented in the software SOAPindel and provides a list of candidate indels with quality scores. We compare SOAPindel to Dindel, Pindel, and GATK on simulated data and find similar or better performance for short indels (&lt;10 bp) and higher sensitivity and specificity for long indels. A validation experiment suggests that SOAPindel has a false-positive rate of ∼10% for long indels (&gt;5 bp), while still providing many more candidate indels than other approaches.</p>
    </abstract>
  </article-meta>
</front>
<body>
  <p>Calling indels from the mapping of short paired-end sequences to a reference genome is much more challenging than SNP calling because the indel by itself interferes with accurate mapping and therefore indels up to a few base pairs in size are allowed in the most popular mapping approaches (<xref ref-type="bibr" rid="B6">Li et al. 2008</xref>; <xref ref-type="bibr" rid="B5">Li and Durbin 2009</xref>; <xref ref-type="bibr" rid="B7">Li et al. 2009</xref>). The most powerful indel calling approach would be to perform de novo assembly of each genome and identify indels by alignment of genomes. However, this is computationally daunting and requires very high sequencing coverage. Therefore, local approaches offer more promise. Recent approaches exploit the paired-end information to perform local realignment of poorly mapped pairs, thus allowing for longer indels (<xref ref-type="bibr" rid="B11">Ye et al. 2009</xref>; <xref ref-type="bibr" rid="B4">Homer and Nelson 2010</xref>; <xref ref-type="bibr" rid="B9">McKenna et al. 2010</xref>; <xref ref-type="bibr" rid="B1">Albers et al. 2011</xref>). One such approach, Dindel, maps reads to a set of candidate haplotypes obtained from mapping or from external information. It uses a probabilistic framework that naturally integrates various sources of sequencing errors and was found to have high specificity for identification of indels of sizes up to half the read length (<xref ref-type="bibr" rid="B1">Albers et al. 2011</xref>). Deletions longer than that can be called using split read approaches such as implemented in Pindel (<xref ref-type="bibr" rid="B11">Ye et al. 2009</xref>). Long insertions remain problematic because short reads will not span them and a certain amount of de novo assembly is required.</p>
  <p>Our approach, implemented in SOAPindel, performs full local de novo assembly of regions where reads appear to map poorly as indicated by an excess of paired-end reads where only one of the mates maps. The idea is to collect all unmapped reads at their expected genomic positions, then perform a local assembly of the regions with a high density of such reads and finally align these assemblies to the reference. A related idea has recently been published by <xref ref-type="bibr" rid="B2">Carnevali et al. (2012)</xref>, but their approach is designed for a different sequencing method, and software is not available for comparison.</p>
  <p>While conceptually simple, our approach is sensitive to various sources of errors, e.g., false mate pairs, sequencing errors, nonunique mapping, and repetitive sequences. We deal with these complexities by examining all the paths in an extended de Bruijn graph (<xref ref-type="bibr" rid="B12">Zerbino and Birney 2008</xref>) and choose those that anchor at some points on the reference genome sequence. In this way, we can detect heterozygous indels as two different paths in the de Bruijn graph and, in principle, call multiallelic indels in polyploid samples or pools of individuals. Unlike, e.g., Pindel, the approach treats insertions and deletions in the same way and has no constraint on indel length other than that determined by the local assembly.</p>
  <p>We explore the specificity and the sensitivity of SOAPindel by extensive simulations based on the human genome and by indel calling on one of the high-coverage samples of the 1000 Genomes Project. We estimate a low false-positive rate of the de novo indel calls by direct Sanger resequencing as well as from simulated reads data based on the Venter genome and the chimpanzee genome, mapped against the reference genome. We benchmark SOAPindel against Dindel, Pindel, and GATK, and it shows similar or better specificity and sensitivity for short indels and much higher sensitivity for long indels.</p>
  <sec sec-type="results">
    <title>Results</title>
    <p>The SOAPindel algorithm is outlined in <xref ref-type="fig" rid="F1">Figure 1</xref> (for details, see Methods). The performance of SOAPindel on indels simulated from the Venter-hg19 alignments is compared with Dindel, GATK, and Pindel in <xref ref-type="fig" rid="F2">Figure 2</xref>. Three quality thresholds were used for SOAPindel for illustration. Lowering the quality score to Q1, the false-negative rate is very low, but this is at the expense of a very high number of false-positive indels. For Q10, SOAPindel has an acceptable false-positive rate similar to Dindel, while still being more sensitive than Dindel and GATK. We recommend the use of Q10 based on a false-positive rate on simulated data of about the 1% expected, while missing only ∼20% of real indels (see Supplemental Fig. S2). Pindel is more sensitive but has a very high false-positive rate. These findings are true over the complete spectrum of indel sizes, but the greatest difference is being found for indels &gt;30 bp in size. There is little difference in the pattern when indels are divided into insertions and deletions relative to hg19 (see Supplemental Fig. S3). The cause of the very high false-negative rate is investigated in more detail in the Supplemental Material, where it is shown that low complexity sequence and high density of variation in close proximity contribute to the lack of sensitivity (Supplemental Fig. S4).</p>
    <fig id="F1" position="float">
      <label>Figure 1.</label>
      <caption>
        <p>Outline of the SOAPindel algorithm. (<italic>A</italic>) Identify nonmapping mates. (<italic>B</italic>) Pile up unmapped reads. (<italic>C</italic>) Identify clusters of unmapped reads. (<italic>D</italic>) Cut out clusters and add mapped reads. (<italic>E</italic>) Error correct clusters. (<italic>F</italic>) Find candidate indels by de novo assembly. (<italic>G</italic>) Treatment of repeats. (<italic>H</italic>) Extended local assembly with nails. (<italic>I</italic>) Local alignment between nails. For details, see Methods.</p>
      </caption>
      <graphic xlink:href="195fig1"/>
    </fig>
    <fig id="F2" position="float">
      <label>Figure 2.</label>
      <caption>
        <p>False-negative (FN) (<italic>A</italic>) and false-positive (FP) (<italic>B</italic>) rates of indels called by SOAPindel, Dindel, Pindel, and GATK on data simulated based on hg19. The read length is 100 bp, and the coverage is 20×, and SNP and indel variation are from the empirical differences of the Venter and hg19 genomes. The numbers of FP and FN indels refer to histograms, whereas the lines correspond to the percentage of indels being either FN or FP (secondary <italic>y</italic>-axis).</p>
      </caption>
      <graphic xlink:href="195fig2"/>
    </fig>
    <p>In <xref ref-type="fig" rid="F3">Figure 3</xref>, the effects of indel length, sequence coverage, and read length on the sensitivity and specificity of the different methods are summarized and divided into insertions and deletions. Sequence coverage is a major determinant of the sensitivity, whereas read length is mainly important for the size limit of indel detection for the alignment-based approaches, but not for SOAPindel. For indels of size 100, Pindel can call deletions but not insertions, and SOAPindel is the only approach that maintains both high specificity and sensitivity in this case. False-negative rates for heterozygous and homozygous indels separately are shown in Supplemental Figure S5. Heterozygotes are more difficult to detect than homozygotes, because detecting them involves assembly of two different paths, which is particularly difficult when the sequencing depth is low.</p>
    <fig id="F3" position="float">
      <label>Figure 3.</label>
      <caption>
        <p>The effect of indel size, coverage, and read length on the false-negative and false-positive rates of SOAPindel, Dindel, Pindel, and GATK on simulated data based on hg19, chromosome 22. (<italic>A</italic>,<italic>B</italic>) FN and FP percentage for read length of 100 bp and coverage of 5/10/20/40/80×, with fixed indel sizes of 1/3/5/10/30/50/100. Every column is split into two parts: % of insertion and % of deletion. (<italic>C</italic>,<italic>D</italic>) FN and FP percentage for read lengths of 50/75/100/125 bp and coverage of 20×, with the same fixed indel sizes and also split into insertion and deletion.</p>
      </caption>
      <graphic xlink:href="195fig3"/>
    </fig>
    <p>Indel calling results using SOAPindel (Q10) on short read data from the NA18507 individual are shown for the whole genome in <xref ref-type="fig" rid="F4">Figure 4A</xref>. A total of 1,018,647 Q10 indels were called. More deletions than insertions were found, which may partly be due to the fact that hg19 is assembled from many individuals with a bias toward using the longer variant of indels among these individuals in the assembly. Two notable peaks in deletion sizes are seen, and we manually investigated the peak around 170 bp. There are 322 Q10 indels around 170–172 bp, and 296 (92%) of them are around the centromere and share sequence similarity with the alpha satellite. <xref ref-type="fig" rid="F4">Figure 4B</xref> compares indel calling on chromosome 7 with other methods (using their default settings). For all size classes, SOAPindel reports more indels, while GATK and Dindel find no indels, and Pindel finds no insertions larger than 19 bp in this data set, which is based on 40-bp read length.</p>
    <fig id="F4" position="float">
      <label>Figure 4.</label>
      <caption>
        <p>SOAPindel predictions (Q10) on NA18507. (<italic>A</italic>) Distribution of insertion and deletion. (<italic>B</italic>) Comparison of the detected insertion and deletion between SOAPindel, Dindel, Pindel, and GATK on chromosome 7. The result is shown as a histogram of the number of indels (<italic>B</italic>: <italic>left y</italic>-axis) and log ratio lines (<italic>B</italic>: <italic>right y</italic>-axis).</p>
      </caption>
      <graphic xlink:href="195fig4"/>
    </fig>
    <p>We used different approaches to investigate the false-positive rate of SOAPindel in this data set. First, we attempted experimental validation of 30 Q10 indel positions (size &gt;5 bp) detected by SOAPindel in the same two ENCODE regions, ENm010 (hg19:chr7:26730761–27230760) and ENm013 (hg19:chr7:89428340–90542763), previously used to validate Dindel. Twenty-six of these were confirmed, including a 93-bp insertion (<xref ref-type="table" rid="T1">Table 1</xref>). Thus, the specificity is ∼86% for indels &gt;5 bp. (For further details, see Supplemental Table S1.) Second, we used comparison to the alignment of chimpanzee (panTro3) with hg19 for validation. An indel variant found in NA18507 was considered to be validated if the chimpanzee sequence against hg19 had an indel of the same size that could be slid into the exact same position without increasing the number of mismatches. This can only validate at most 50% of the real indels because the chimpanzee is expected to be similar to the hg19 variant in half of all cases. Furthermore, the alignment of hg19 and panTro3 is incomplete, in particular, in repetitive and indel-rich regions. About 20% of the indels (Q10) called by SOAPindel are confirmed by this approach (<xref ref-type="table" rid="T2">Table 2</xref>). The confirmation rate is almost independent of size (Supplemental Fig. S6) up to 100 bp, which is the threshold for the human–chimpanzee alignment to be broken. <xref ref-type="table" rid="T2">Table 2</xref> also shows a comparison with the indel calls of Dindel for chromosome 7. SOAPindel finds more indels that can be confirmed by the human–chimpanzee alignment, suggesting that SOAPindel has a higher sensitivity than Dindel. However, the specificity for short indels seems lower since a smaller percentage of SOAPindel calls than Dindel calls are validated by the alignment. The exception is for indels &gt;10 bp, where SOAPindel calls many more indels than Dindel and has a confirmation rate of 23% compared with 7% for Dindel (<xref ref-type="table" rid="T2">Table 2</xref>). Finally, <xref ref-type="table" rid="T3">Table 3</xref> shows the distribution of indel calls over introns, exons, and intergenic regions. Coding indels shows an enrichment of in-frame indels; 50.0% of all indel calls (and 82% of all indel calls &gt;1 bp) are multiples of three. <xref ref-type="bibr" rid="B13">Mills et al. (2011)</xref> and <xref ref-type="bibr" rid="B14">Mullaney et al. (2010)</xref> reported that in-frame indels should constitute 50%–60% of all indels. Our result is in the lower range of these numbers, suggesting some false-positive indel calls for very short indels, in particular.</p>
    <table-wrap id="T1" position="float">
      <label>Table 1.</label>
      <caption>
        <p>Validation results from 30 long indels (&gt;5 bp) called in NA18507 in the ENCODE regions ENm010 and ENm013</p>
      </caption>
      <graphic xlink:href="195tbl1"/>
    </table-wrap>
    <table-wrap id="T2" position="float">
      <label>Table 2.</label>
      <caption>
        <p>Validating indels by the chimpanzee genome</p>
      </caption>
      <graphic xlink:href="195tbl2"/>
    </table-wrap>
    <table-wrap id="T3" position="float">
      <label>Table 3.</label>
      <caption>
        <p>The genomic distribution of NA18507 indels</p>
      </caption>
      <graphic xlink:href="195tbl3"/>
    </table-wrap>
  </sec>
  <sec sec-type="discussion">
    <title>Discussion</title>
    <p>SOAPindel explicitly performs extensive local de novo assembly in regions where indels are expected, using both reads that map to these regions and unmapped reads that should map to the regions based on the mapping position of the mate. Recently, <xref ref-type="bibr" rid="B2">Carnevali et al. (2012)</xref> published an indel calling approach that also uses local reassembly in an iterative fashion for the Complete Genomics sequencing approach, but it is not clear how this would work on Illumina sequence data, and software is not available for comparison to SOAPindel predictions.</p>
    <p>Local assembly as compared with realignment, which is used by widely used indel detection tools such as GATK and Dindel, is expected to be most powerful for long insertions and deletions, and this is what we have found using both simulated data and analyses of short read data from one human genome.</p>
    <p>All indel detection methods based on reference sequence mapping share the property that it is easier to find long deletions than long insertions. This is because the length of the read can be used for mapping deletions, whereas only part of the read (read length minus size of insert) can be used for mapping insertions. SOAPindel suffers less from this asymmetry in insertion and deletion calling than alignment-based approaches since it combines local assembly with mapping, and on simulated data the asymmetry is very low (<xref ref-type="fig" rid="F3">Fig. 3</xref>). However, insertions always need more evidence than deletions to enable their detection.</p>
    <p>SOAPindel have no preset limitations on indel size, but certain conditions can affect the max indel size that can be detected. For sufficiently long deletions, the mapped reads will be drawn apart. Hence, the cluster of unmapped reads will be split into two clusters (<xref ref-type="fig" rid="F5">Fig. 5A</xref>). The threshold deletion length limitation for cluster splitting is around (insert size × 1.2 − read length) × 2. Cluster splitting does not imply that we cannot detect this deletion. The cutting border [the default is max&lt;read_len,50&gt;] could be extended by the length of the deletion to be detected. Thus, for detection of a 1000-bp size deletion, one should set the parameter “-ext 1000.” However, extending the border will increase the misassembly rate. For long insertions, the main problem is that both paired reads can be within the insertions and not be mapped (<xref ref-type="fig" rid="F5">Fig. 5B</xref>). When the size of the insertion is larger than (insert size × 1.2 − read length) × 2, we cannot detect the insertion from single end mapped reads alone.</p>
    <fig id="F5" position="float">
      <label>Figure 5.</label>
      <caption>
        <p>Illustration of some theoretical detection limits for SOAPindel. (<italic>A</italic>) Deletion size threshold. (<italic>B</italic>) Insertion size threshold.</p>
      </caption>
      <graphic xlink:href="195fig5"/>
    </fig>
    <p>SOAPindel does not exploit reads mapping to multiple positions and does not make use of candidate indel information provided by some alignment tools. It is also limited in the handling of certain types of repetitive sequences (<xref ref-type="fig" rid="F1">Fig. 1G</xref>). Even though all alignment tools share this problem, they can find candidate positions if a unique piece of sequence (several base pairs are enough) exists around the indel. So Dindel can resolve many of the cases illustrated in <xref ref-type="fig" rid="F1">Figure 1G1</xref> and <xref ref-type="fig" rid="F1">1G2</xref> if provided with proper candidates by alignment tools. For these reasons, we will include candidate indel information in the next release of SOAPindel (version 2.0).</p>
    <p>The present version of SOAPindel is programmed in Perl and thus runs on most platforms. The SOAPindel pipeline contains two major parts: (1) preparing the clusters; (2) assembly and alignment. Running times and memory requirements are different for these two components. For part one, both the running time and memory consuming are nearly linear in coverage and do not easily benefit from increasing the number of CPUs. For the complete NA18507 data, a maximum of 5 GB of memory and ∼30 h of CPU time is needed. Part two is easily parallelized. Every cluster can be assembled and aligned separately. There are a total of 12.8M clusters for NA18507. Each cluster uses ∼0.15 sec and ∼10 MB of memory. The running time of SOAPindel is compared with the three other methods in Supplemental Figure S7.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <sec>
      <title>The SOAPindel algorithm</title>
      <p>The pipeline is outlined in <xref ref-type="fig" rid="F1">Figure 1</xref>. First, we identify all sets of reads where only one mate maps, allowing for no gaps and at most three mismatches. If both reads map at a distance that is more than 40% different from the expected distance, they are treated as two pairs of single-mapped reads. Reads with multiple mapping positions are ignored during this initial screening with a small loss in sensitivity but a large gain in specificity. Each unmapped read collected is given an approximate candidate genomic position using the orientation and expected distance from the mapped mate (<xref ref-type="fig" rid="F1">Fig. 1B</xref>). The underlying idea is that the density of such virtually mapped reads is higher around real indels. Note that since we do not allow for gaps during mapping, many reads that other approaches map with gaps are included in this set of reads.</p>
      <p>Next, clusters of virtual reads are identified as regions with high coverage of reads separated by regions of low coverage (the coverage threshold is a parameter set by the user; we use the value 2 when average sequencing depth &lt;40×, and to 1/20 of the depth for higher coverage in order to reduce the computational time) (<xref ref-type="fig" rid="F1">Fig. 1C</xref>). If a cluster is too long, it will be cut into small fixed-length (default 300-bp) pieces with overlaps (default 100 bp). The genomic region around each cluster is then cut out of the alignment with a proper small extension as border and treated as a separate entity. Reads that initially mapped to the region are then added before local assembly (<xref ref-type="fig" rid="F1">Fig. 1D</xref>).</p>
      <p>When the coverage is high, the cumulative error rate is high due to sequencing errors, mapping errors, and false mate pairs. We perform one round of error correction by calling all SNPs in the region and then remove reads from the set that contain one or more mismatches that are not among the identified SNPs (<xref ref-type="fig" rid="F1">Fig. 1E</xref>).</p>
      <p>As in most other de novo assembly algorithms (<xref ref-type="bibr" rid="B8">Li et al. 2010</xref>), we use a <italic>K</italic>-dimensional De Bruijn graph of four symbols (A|T|G|C) to store possible paths among <italic>K</italic>-mer vertices for each candidate region. Since regions are small, all reads and repeat information can be kept in memory so we can resolve some of the hard problems in genome-wide de novo assembly (<xref ref-type="fig" rid="F1">Fig. 1H1</xref>). (The assembly procedure is shown in the Supplemental Material and Supplemental Fig. S1.) Heterozygotes in a diploid genome cause bubbles in the graph. Whole genome assembly typically only traces one of the two paths (the one that is most strongly supported), but we trace both (<xref ref-type="fig" rid="F1">Fig. 1H1a</xref>). Likewise, short repeats whose length ≥<italic>K</italic> will cause forks on the graph (<xref ref-type="fig" rid="F1">Fig. 1H1b</xref>), and tandem repeats with length ≥ max 〈<italic>K</italic>, <italic>L</italic>〉 + <italic>L</italic> (<italic>L</italic> is the pattern length; ATATAT's pattern is AT) will cause loops (<xref ref-type="fig" rid="F1">Fig. 1H1c</xref>). Whole genome assembly will trace only one path or break the path, but we can trace either path as long as the repeat length is shorter than the read length.</p>
      <p>With low coverage, the path may be broken because the default <italic>K</italic>-mer length is too long. In order not to lose specificity by generally lowering <italic>K</italic>-mer length, we use a dynamic approach of decreasing <italic>K</italic>-mer length where the path is broken. For candidate homozygous indels, we search for unused reads with gradually shorter <italic>K</italic>-mers until a path is formed or the lower bound on <italic>K</italic>-mer length has been reached. For candidate heterozygous indels (cases where one path with many unmapped reads is broken), we completely redo the assembly for gradually decreasing <italic>K</italic>-mer lengths.</p>
      <p>During assembly we exploit that all unique <italic>K</italic>-mers on the reference should be collinear with the local assembly, and we can use them as markers to guide the direction, remove errors, and control the length of the local assembly.</p>
      <p>Finally, we align all contigs (assembly results) to the reference and call the genotype of any indels present. The number of alignable contigs is twice the number of heterozygous indels plus heterozygous SNPs, since heterozygosity in the sample of both indels and SNPs causes bifurcations in the graph. Since the time complexity of pairwise alignment is <italic>O</italic>(<italic>n</italic><sup>2</sup>), we save significant computational time by exploiting the unique <italic>K</italic>-mers again to shorten the length of the region to be aligned. For each contig, we compare its <italic>K</italic>-mer set with the <italic>K</italic>-mer set of the reference to identify all nail pairs (a nail is a <italic>K</italic>-mer that is unique on both contig and reference; a nail pair is a pair of adjacent nails). The presence of one or more nail pairs with different distances on the contig and the reference is sufficient for calling a candidate indel. A Smith-Waterman alignment between uneven nail pairs defines the exact position and sequence of candidate indels (<xref ref-type="fig" rid="F1">Fig. 1I</xref>) (for more details, see the Supplemental Material). This constitutes the full set of candidates for further processing.</p>
    </sec>
    <sec>
      <title>Quality scores of candidate indels</title>
      <p>Several filters have been designed for increasing specificity, and all can be modified by the user and are described in the Supplemental Material. The most important of these are also integrated in a quality score. SOAPindel uses a method similar to Phred (<xref ref-type="bibr" rid="B3">Ewing and Green 1998</xref>) to assign Q-values to all candidate indels.</p>
      <p>We use five parameters that are particularly effective at discriminating between true and false indels:<list list-type="order"><list-item><p>Coverage</p></list-item><list-item><p>Indel size</p></list-item><list-item><p>Number of neighboring SNPs and indels</p></list-item><list-item><p>Position of the second different base pair (Indels surrounded by low-complexity sequence are more likely to be false positives.)</p></list-item><list-item><p>Distance to the edge on assembled contig (Indels near the edge are more likely to be false positives.)</p></list-item></list></p>
      <p>We generated training data to build up the parameter threshold lookup table by simulating data based on the alignments between the Venter genome and hg19. Running SOAPindel on this simulation data set produces the training data and the lookup table for assigning Q-values to candidate indels. Retraining should therefore be done if using this quality score for calling indels in genomes of other species.</p>
    </sec>
    <sec>
      <title>Complex repeats</title>
      <p>Three different categories of repeats can currently not be handled by SOAPindel: (1) Repeats with length &gt;(max read length) and distance &gt;(max cluster length) (default 300) (<xref ref-type="fig" rid="F1">Fig. 1G1</xref>). (2) Repeats with length &gt;(max read length) and distance &lt;(max cluster length) will confuse assembly (<xref ref-type="fig" rid="F2">Fig. 1G2</xref>). (3) Palindrome repeats with length &gt;(max read length) will break the assembly (<xref ref-type="fig" rid="F3">Fig. 1G3</xref>).</p>
    </sec>
    <sec>
      <title>Simulations</title>
      <p>We simulated data based on the Venter genome (assembled from long reads; see <ext-link ext-link-type="uri" xlink:href="http://huref.jcvi.org/">http://huref.jcvi.org/</ext-link>) and mapped simulated read pairs against hg19 in order to evaluate the performance of the different indel callers. Paired reads were simulated from the observed differences between the two genomes, sampling either from the same genome or from different genomes to allow for a diploid individual to show a homozygous and heterozygous SNP/indel, respectively. The ratio of homozygotes to heterozygotes was fixed at 2:3, and paired-end reads were 100-bp reads with 500-bp insert size, and the coverage was 20×. We introduced random sequencing errors corresponding to a read quality q32 for the first 75 bp, q31 for the next 15 bp, and q30 (0.1% error) for the last 10 bp. We did not introduce sequencing errors causing indels in the reads, since indel errors are much rarer than wrong bases in Illumina sequencing (<xref ref-type="bibr" rid="B10">Minoche et al. 2011</xref>).</p>
      <p>In a different set of simulations specifically designed to test FN and FP as a function of indel size, we generated artificial data based on human chromosome 22. We introduced random SNPs at a density of 1 in 1000. Insertion or deletion events were randomly placed at 0.025% of the positions as heterozygous or homozygous at a ratio of 3:2. Data sets were simulated with the following combinations of parameters: Indel sizes (1, 3, 5, 10, 30, 50, 100); read lengths: (50 bp, 75 bp, 100 bp, 125 bp); and coverages: (5×, 10×, 20×, 40×, and 80×) with insert size = 500 bp in all cases. Sequencing errors in reads were introduced as above.</p>
      <p>Mapping of the simulated reads to the hg19 was done using SOAP2 (<xref ref-type="bibr" rid="B7">Li et al. 2009</xref>) or BWA (<xref ref-type="bibr" rid="B5">Li and Durbin 2009</xref>) (SOAPindel supports both formats).</p>
    </sec>
    <sec>
      <title>Benchmarking</title>
      <p>We benchmarked SOAPindel against Dindel (version 1.01), Pindel (version 0.2.4d), and GATK (version 1.4-9) on all simulated data and for analyses of real data. In all cases, we used default parameter settings. For SOAPindel, we investigated three quality thresholds (Q1, Q5, and Q10), whereas for the other programs, we used default settings. The evaluation measures were sensitivity and specificity as a function of indel size, sequencing depth, and read length. To determine whether a candidate indel is a true positive, we required the candidate indel to match a real indel of identical size, but allowing a small tolerance in the position of the indel (depending on the complexity of the adjacent sequence).</p>
    </sec>
    <sec>
      <title>Validation</title>
      <p>Validation was based on analysis of the sample NA18507 (<ext-link ext-link-type="uri" xlink:href="http://ftp.ncbi.nih.gov/1000genomes/ftp/data/NA18507/sequence_read/">http://ftp.ncbi.nih.gov/1000genomes/ftp/data/NA18507/sequence_read/</ext-link>). Two types of validation were pursued. First, as a direct validation, we randomly chose 30 insertions and deletions with Q10 or above and longer than 5 bp for Sanger sequencing after PCR amplification. Second, we compared the detected indels to the alignment between chimpanzee genome and hg19 in order to determine whether a new indel call matched the chimpanzee sequence. We note that this can validate at most 50% of real indels since the chimpanzee is equally likely to match the new indel call and the reference genome.</p>
    </sec>
  </sec>
  <sec>
    <title>Data access</title>
    <p>The SOAPindel program is written in Perl and can be obtained from <ext-link ext-link-type="uri" xlink:href="http://soap.genomics.org.cn/soapindel.html">http://soap.genomics.org.cn/soapindel.html</ext-link> or <ext-link ext-link-type="uri" xlink:href="https://sourceforge.net/projects/soapindel">https://sourceforge.net/projects/soapindel</ext-link>.</p>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgments</title>
    <p>We thank Min Jian, Ye Yin, Feng Wang, and Jia Lu for their contributions to PCR-based indel validation; Freddy B. Christiansen for extensive comments on previous versions of the manuscript; Cornelis Arnout Albers for advice on Dindel comparisons; and three anonymous reviewers for comments that greatly improved the manuscript. We acknowledge funding from EU FP7 Marie Curie IAPP “NextGene,” BGI-Shenzhen, LuCamp (Lundbeck Foundation Center), the Danish Research Councils, the National Basic Research Program of China (973 program no. 2011CB809201, 2011CB809202, 2011CB809203), the National Natural Science Foundation of China (30890032, 31161130357), Shenzhen Key Laboratory of Transomics Biotechnologies (CXB201108250096A), and Shenzhen Key Laboratory of Gene Bank for National Life Science.</p>
  </ack>
  <fn-group>
    <fn fn-type="supplementary-material">
      <p>[Supplemental material is available for this article.]</p>
    </fn>
    <fn>
      <p>Article published online before print. Article, supplemental material, and publication date are at <ext-link ext-link-type="uri" xlink:href="http://www.genome.org/cgi/doi/10.1101/gr.132480.111">http://www.genome.org/cgi/doi/10.1101/gr.132480.111</ext-link>.</p>
    </fn>
  </fn-group>
  <ref-list>
    <title>References</title>
    <ref id="B1">
      <mixed-citation publication-type="journal"><name><surname>Albers</surname><given-names>CA</given-names></name>, <name><surname>Lunter</surname><given-names>G</given-names></name>, <name><surname>Macarthur</surname><given-names>DG</given-names></name>, <name><surname>McVean</surname><given-names>G</given-names></name>, <name><surname>Ouwehand</surname><given-names>WH</given-names></name>, <name><surname>Durbin</surname><given-names>R</given-names></name><year>2011</year><article-title>Dindel: Accurate indel calls from short-read data</article-title>. <source>Genome Res</source><volume>21</volume>: <fpage>961</fpage>–<lpage>973</lpage><pub-id pub-id-type="pmid">20980555</pub-id></mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal"><name><surname>Carnevali</surname><given-names>P</given-names></name>, <name><surname>Baccash</surname><given-names>J</given-names></name>, <name><surname>Halpern</surname><given-names>AL</given-names></name>, <name><surname>Nazarenko</surname><given-names>I</given-names></name>, <name><surname>Nilsen</surname><given-names>GB</given-names></name>, <name><surname>Pant</surname><given-names>KP</given-names></name>, <name><surname>Ebert</surname><given-names>JC</given-names></name>, <name><surname>Brownley</surname><given-names>A</given-names></name>, <name><surname>Morenzoni</surname><given-names>M</given-names></name>, <name><surname>Karpinchyk</surname><given-names>V</given-names></name>, <etal/><year>2012</year><article-title>Computational techniques for human genome resequencing using mated gapped reads</article-title>. <source>J Comput Biol</source><volume>19</volume>: <fpage>279</fpage>–<lpage>292</lpage><pub-id pub-id-type="pmid">22175250</pub-id></mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal"><name><surname>Ewing</surname><given-names>B</given-names></name>, <name><surname>Green</surname><given-names>P</given-names></name><year>1998</year><article-title>Base-calling of automated sequencer traces using phred. II. Error probabilities</article-title>. <source>Genome Res</source><volume>8</volume>: <fpage>186</fpage>–<lpage>194</lpage><pub-id pub-id-type="pmid">9521922</pub-id></mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal"><name><surname>Homer</surname><given-names>N</given-names></name>, <name><surname>Nelson</surname><given-names>SF</given-names></name><year>2010</year><article-title>Improved variant discovery through local re-alignment of short-read next-generation sequencing data using SRMA</article-title>. <source>Genome Biol</source><volume>11</volume>: <fpage>R99</fpage><comment>doi: 10.1186/gb-2010-11-10-r99</comment><pub-id pub-id-type="pmid">20932289</pub-id></mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal"><name><surname>Li</surname><given-names>H</given-names></name>, <name><surname>Durbin</surname><given-names>R</given-names></name><year>2009</year><article-title>Fast and accurate short read alignment with Burrows-Wheeler transform</article-title>. <source>Bioinformatics</source><volume>25</volume>: <fpage>1754</fpage>–<lpage>1760</lpage><pub-id pub-id-type="pmid">19451168</pub-id></mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal"><name><surname>Li</surname><given-names>H</given-names></name>, <name><surname>Ruan</surname><given-names>J</given-names></name>, <name><surname>Durbin</surname><given-names>R</given-names></name><year>2008</year><article-title>Mapping short DNA sequencing reads and calling variants using mapping quality scores</article-title>. <source>Genome Res</source><volume>18</volume>: <fpage>1851</fpage>–<lpage>1858</lpage><pub-id pub-id-type="pmid">18714091</pub-id></mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="journal"><name><surname>Li</surname><given-names>R</given-names></name>, <name><surname>Yu</surname><given-names>C</given-names></name>, <name><surname>Li</surname><given-names>Y</given-names></name>, <name><surname>Lam</surname><given-names>TW</given-names></name>, <name><surname>Yiu</surname><given-names>SM</given-names></name>, <name><surname>Kristiansen</surname><given-names>K</given-names></name>, <name><surname>Wang</surname><given-names>J</given-names></name><year>2009</year><article-title>SOAP2: An improved ultrafast tool for short read alignment</article-title>. <source>Bioinformatics</source><volume>25</volume>: <fpage>1966</fpage>–<lpage>1967</lpage><pub-id pub-id-type="pmid">19497933</pub-id></mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal"><name><surname>Li</surname><given-names>R</given-names></name>, <name><surname>Zhu</surname><given-names>H</given-names></name>, <name><surname>Ruan</surname><given-names>J</given-names></name>, <name><surname>Qian</surname><given-names>W</given-names></name>, <name><surname>Fang</surname><given-names>X</given-names></name>, <name><surname>Shi</surname><given-names>Z</given-names></name>, <name><surname>Li</surname><given-names>Y</given-names></name>, <name><surname>Li</surname><given-names>S</given-names></name>, <name><surname>Shan</surname><given-names>G</given-names></name>, <name><surname>Kristiansen</surname><given-names>K</given-names></name>, <etal/><year>2010</year><article-title>De novo assembly of human genomes with massively parallel short read sequencing</article-title>. <source>Genome Res</source><volume>20</volume>: <fpage>265</fpage>–<lpage>272</lpage><pub-id pub-id-type="pmid">20019144</pub-id></mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal"><name><surname>McKenna</surname><given-names>A</given-names></name>, <name><surname>Hanna</surname><given-names>M</given-names></name>, <name><surname>Banks</surname><given-names>E</given-names></name>, <name><surname>Sivachenko</surname><given-names>A</given-names></name>, <name><surname>Cibulskis</surname><given-names>K</given-names></name>, <name><surname>Kernytsky</surname><given-names>A</given-names></name>, <name><surname>Garimella</surname><given-names>K</given-names></name>, <name><surname>Altshuler</surname><given-names>D</given-names></name>, <name><surname>Gabriel</surname><given-names>S</given-names></name>, <name><surname>Daly</surname><given-names>M</given-names></name>, <etal/><year>2010</year><article-title>The Genome Analysis Toolkit: A MapReduce framework for analyzing next-generation DNA sequencing data</article-title>. <source>Genome Res</source><volume>20</volume>: <fpage>1297</fpage>–<lpage>1303</lpage><pub-id pub-id-type="pmid">20644199</pub-id></mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal"><name><surname>Mills</surname><given-names>RE</given-names></name>, <name><surname>Pittard</surname><given-names>WS</given-names></name>, <name><surname>Mullaney</surname><given-names>JM</given-names></name>, <name><surname>Farooq</surname><given-names>U</given-names></name>, <name><surname>Creasy</surname><given-names>TH</given-names></name>, <name><surname>Mahurkar</surname><given-names>AA</given-names></name>, <name><surname>Kemeza</surname><given-names>DM</given-names></name>, <name><surname>Strassler</surname><given-names>DS</given-names></name>, <name><surname>Ponting</surname><given-names>CP</given-names></name>, <name><surname>Webber</surname><given-names>C</given-names></name>, <etal/><year>2011</year><article-title>Natural genetic variation caused by small insertions and deletions in the human genome</article-title>. <source>Genome Res</source><volume>21</volume>: <fpage>830</fpage>–<lpage>839</lpage><pub-id pub-id-type="pmid">21460062</pub-id></mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal"><name><surname>Minoche</surname><given-names>AE</given-names></name>, <name><surname>Dohm</surname><given-names>JC</given-names></name>, <name><surname>Himmelbauer</surname><given-names>H</given-names></name><year>2011</year><article-title>Evaluation of genomic high-throughput sequencing data generated on Illumina HiSeq and genome analyzer systems</article-title>. <source>Genome Biol</source><volume>12</volume>: <fpage>R112</fpage><comment>doi: 10.1186/gb-2011-12-11-r112</comment><pub-id pub-id-type="pmid">22067484</pub-id></mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal"><name><surname>Mullaney</surname><given-names>JM</given-names></name>, <name><surname>Mills</surname><given-names>RE</given-names></name>, <name><surname>Pittard</surname><given-names>WS</given-names></name>, <name><surname>Devine</surname><given-names>SE</given-names></name><year>2010</year><article-title>Small insertions and deletions (INDELs) in human genomes</article-title>. <source>Hum Mol Genet</source><volume>19</volume>: <fpage>R131</fpage>–<lpage>R136</lpage><pub-id pub-id-type="pmid">20858594</pub-id></mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal"><name><surname>Ye</surname><given-names>K</given-names></name>, <name><surname>Schulz</surname><given-names>MH</given-names></name>, <name><surname>Long</surname><given-names>Q</given-names></name>, <name><surname>Apweiler</surname><given-names>R</given-names></name>, <name><surname>Ning</surname><given-names>Z</given-names></name><year>2009</year><article-title>Pindel: A pattern growth approach to detect break points of large deletions and medium sized insertions from paired-end short reads</article-title>. <source>Bioinformatics</source><volume>25</volume>: <fpage>2865</fpage>–<lpage>2871</lpage><pub-id pub-id-type="pmid">19561018</pub-id></mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal"><name><surname>Zerbino</surname><given-names>DR</given-names></name>, <name><surname>Birney</surname><given-names>E</given-names></name><year>2008</year><article-title>Velvet: Algorithms for de novo short read assembly using de Bruijn graphs</article-title>. <source>Genome Res</source><volume>18</volume>: <fpage>821</fpage>–<lpage>829</lpage><pub-id pub-id-type="pmid">18349386</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
