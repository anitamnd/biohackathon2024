<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6821287</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btz284</article-id>
    <article-id pub-id-type="publisher-id">btz284</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Notes</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Systems Biology</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>clustermq enables efficient parallelization of genomic analyses</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-6862-5221</contrib-id>
        <name>
          <surname>Schubert</surname>
          <given-names>Michael</given-names>
        </name>
        <xref ref-type="corresp" rid="btz284-cor1"/>
        <!--<email>m.schubert@rug.nl</email>-->
        <xref ref-type="aff" rid="btz284-aff1"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Wren</surname>
          <given-names>Jonathan</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <aff id="btz284-aff1"><institution>European Molecular Biology Laboratory, European Bioinformatics Institute (EMBL-EBI), Wellcome Trust Genome Campus</institution>, Cambridge, UK</aff>
    <author-notes>
      <corresp id="btz284-cor1">To whom correspondence should be addressed. E-mail: <email>m.schubert@rug.nl</email>. Present address: European Research Institute for the Biology of Ageing, University of Groningen, University Medical Center Groningen, 9713 AV Groningen, the Netherlands</corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>11</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2019-05-27">
      <day>27</day>
      <month>5</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>5</month>
      <year>2019</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>35</volume>
    <issue>21</issue>
    <fpage>4493</fpage>
    <lpage>4495</lpage>
    <history>
      <date date-type="received">
        <day>30</day>
        <month>11</month>
        <year>2018</year>
      </date>
      <date date-type="rev-recd">
        <day>11</day>
        <month>4</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>5</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2019. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2019</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btz284.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>High performance computing (HPC) clusters play a pivotal role in large-scale bioinformatics analysis and modeling. For the statistical computing language R, packages exist to enable a user to submit their analyses as jobs on HPC schedulers. However, these packages do not scale well to high numbers of tasks, and their processing overhead quickly becomes a prohibitive bottleneck.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>Here we present <italic>clustermq</italic>, an R package that can process analyses up to three orders of magnitude faster than previously published alternatives. We show this for investigating genomic associations of drug sensitivity in cancer cell lines, but it can be applied to any kind of parallelizable workflow.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>The package is available on CRAN and <ext-link ext-link-type="uri" xlink:href="https://github.com/mschubert/clustermq">https://github.com/mschubert/clustermq</ext-link>. Code for performance testing is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/mschubert/clustermq-performance">https://github.com/mschubert/clustermq-performance</ext-link>.</p>
      </sec>
      <sec id="s4">
        <title>Supplementary information</title>
        <p><xref ref-type="supplementary-material" rid="sup1">Supplementary data</xref> are available at <italic>Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <counts>
      <page-count count="3"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>The volume of data produced in the biological sciences has recently increased by orders of magnitude across many disciplines, most apparent in single cell sequencing (<xref rid="btz284-B7" ref-type="bibr">Svensson <italic>et al.</italic>, 2018</xref>). In order to analyze this data, there is a need not only for efficient algorithms, but also for efficient and user-friendly utilization of high performance computing (HPC). Having reached a limit in the speed of single processors, the focus has shifted to distributing computing power to multiple processors or indeed multiple machines. HPC clusters have played and are continuing to play an integral role in bioinformatic data analysis and modelling. However, efficient parallelization using low-level systems such as MPI, or submitting jobs that later communicate via network sockets, requires specialist knowledge. </p>
    <p>For the popular statistical computing language <xref rid="btz284-B4" ref-type="bibr">R (Ihaka and Gentleman, 1996</xref>) several packages have been developed that are able to automate parallel workflows on HPC without the need for low-level programming. The best-known packages for this are <italic>BatchJobs</italic> (<xref rid="btz284-B1" ref-type="bibr">Bischl <italic>et al.</italic>, 2015</xref>) and <italic>batchtools</italic> (<xref rid="btz284-B6" ref-type="bibr">Lang <italic>et al.</italic>, 2017</xref>). They provide a consistent interface for distributing tasks over multiple workers by automatically creating the files required for processing each individual computation, and collect the results back to the main session upon completion.</p>
    <p>However, these packages write arguments and results of individual function calls to a networked file system. This is highly inefficient for a large number of calls and effectively limits these packages at about 10<sup>6</sup> function evaluations (cf. <xref ref-type="fig" rid="btz284-F1">Fig. 1</xref> and <xref ref-type="supplementary-material" rid="sup1">Supplementary Methods</xref>). In addition, it hinders load balancing between computing nodes (as it requires a file-system based lock mechanism) and the use of remote compute facilities without shared storage systems.
</p>
    <fig id="btz284-F1" orientation="portrait" position="float">
      <label>Fig. 1.</label>
      <caption>
        <p>Performance evaluation of HPC packages for (<bold>a</bold>) processing overhead and (<bold>b</bold>) application to GDSC data. Along the range of tested number of function calls, <italic>clustermq</italic> requires substantially less time for processing in both scenarios. Indicated measurements are averages of two runs with range shown as vertical bars. (b) The dashed grey line indicates the actual number of calls required for all GDSC associations </p>
      </caption>
      <graphic xlink:href="btz284f1"/>
    </fig>
    <p>Here we present the R package <italic>clustermq</italic> that overcomes these limitations and provides a minimal interface to submit jobs on a range of different schedulers (LSF, SGE, Slurm, PBS, Torque). It distributes data over the network without involvement of network-mounted storage, monitors the progress of up to 10<sup>9</sup> function evaluations and collects back the results.</p>
  </sec>
  <sec>
    <title>2 Implementation</title>
    <p>In order to provide efficient distribution of data as well as compute instructions, we use the <italic>ZeroMQ</italic> library (<xref rid="btz284-B3" ref-type="bibr">Hintjens, 2013</xref>), which provides a level of abstraction of simple network sockets and handles low-level operations such as message envelopes and timeouts. The main function used to distribute tasks on compute nodes and subsequently collect the results is the <italic>Q</italic> function. It takes named iterated arguments, and a list of <italic>const</italic> (objects that do not change their value between function calls) and export objects (which will be made available in the worker environment). The <italic>Q</italic> function will check which schedulers are available, and is hence often usable without any additional required setup (cf. <xref ref-type="supplementary-material" rid="sup1">Supplementary User Guide</xref>).</p>
    <p>
      <disp-quote content-type="extract">
        <p>
          <monospace># load the library and create a simple function</monospace>
        </p>
        <p>
          <monospace>library(clustermq)</monospace>
        </p>
        <p><monospace>fx= function(x, y) x * 2</monospace> <monospace>+</monospace> <monospace>y</monospace></p>
        <p>
          <monospace># queue the function call on your scheduler</monospace>
        </p>
        <p><monospace>Q(fx, x</monospace> <monospace>=</monospace> <monospace>1: 3,const=list(y</monospace> <monospace>=</monospace> <monospace>1),n_jobs</monospace> <monospace>=</monospace> <monospace>1)</monospace></p>
        <p>
          <monospace># list(3, 5, 7)</monospace>
        </p>
      </disp-quote>
    </p>
    <p>Another way of parallelization is to register <italic>clustermq</italic> as a parallel <italic>foreach</italic> backend. This is particularly useful if a third-party package uses <italic>foreach</italic> loops internally, like all <italic>Bioconductor</italic> (<xref rid="btz284-B2" ref-type="bibr">Gentleman <italic>et al.</italic>, 2004</xref>) packages that make use of <italic>BiocParallel</italic>.</p>
    <p>
      <disp-quote content-type="extract">
        <p>
          <monospace>library(foreach)</monospace>
        </p>
        <p><monospace>register_dopar_cmq(n_jobs</monospace> <monospace>=</monospace> <monospace>2, memory</monospace> <monospace>=</monospace> <monospace>1024)</monospace></p>
        <p>
          <monospace># this will be executed as jobs</monospace>
        </p>
        <p><monospace>foreach(i</monospace> <monospace>=</monospace> <monospace>1: 3)</monospace></p>
        <p>
          <monospace># also for Bioconductor packages using this</monospace>
        </p>
        <p>
          <monospace>BiocParallel:: register(BiocParallel::DoparParam())</monospace>
        </p>
        <p>
          <monospace>BiocParallel::bplapply(1: 3,sqrt)</monospace>
        </p>
      </disp-quote>
    </p>
    <p>In addition, the package provides a documented worker API that can be used to build tools that need fine-grained control over the calls sent out instead of the normal scatter-gather approach (cf. <xref ref-type="supplementary-material" rid="sup1">Supplementary Technical Documentation</xref>).</p>
  </sec>
  <sec>
    <title>3 Evaluation</title>
    <p>In order to evaluate the performance of <italic>clustermq</italic> compared to the <italic>BatchJobs</italic> and <italic>batchtools</italic> packages (cf. <xref ref-type="supplementary-material" rid="sup1">Supplementary Methods</xref>), we first tested the overhead cost for each of these tools by evaluating a function of negligible runtime and repeating this between 1000 and 10<sup>9</sup> times. We found that <italic>clustermq</italic> has about 1000× less overhead cost compared to the other packages when processing 10<sup>5</sup> or more calls, although across the whole range a clear speedup is apparent (<xref ref-type="fig" rid="btz284-F1">Fig. 1a</xref>). The maximum number of calls that <italic>BatchJobs</italic> could successfully process was 10<sup>5</sup>, while <italic>batchtools</italic> increased this limit to 10<sup>6</sup>. By contrast, <italic>clustermq</italic> was able to process 10<sup>9</sup> calls in about one hour.</p>
    <p>For our second evaluation, we chose a realistic scenario with application to biological data. The Genomics of Drug Sensitivity in Cancer (GDSC) project published molecular data of approximately 1000 cell lines and their response (IC<sub>50</sub>) to 265 drugs (<xref rid="btz284-B5" ref-type="bibr">Iorio <italic>et al.</italic>, 2016</xref>). We ask the question if any one of 1073 genomic or epigenomic events (mutation/copy number aberration of a gene and differential promoter methylation, respectively) is correlated with a significant difference in drug sensitivity across all cell lines or for 25 specific cancer types (<italic>n</italic> = 7 392 970 associations). We found that for this setup, <italic>clustermq</italic> is able to process the associations in about one hour with 10% lost to overhead (<xref ref-type="fig" rid="btz284-F1">Fig. 1b;</xref> dashed line). The other packages produced too many small temporary files for our networked file system to handle, and by extrapolation processing all associations would have taken over a week.</p>
    <p>To achieve similar results using the previously published packages one would need to adapt the analysis code to chunk together related associations and explicitly loop through different subsets of data. <italic>clustermq</italic> lifts this requirement and lets the analyst focus on the biological question they are trying to address instead of manually optimizing code parallelization for execution time (cf. <xref ref-type="supplementary-material" rid="sup1">Supplementary Discussion</xref>).</p>
  </sec>
  <sec>
    <title>4 Conclusion</title>
    <p>The <italic>clustermq</italic> R package enables computational analysts to efficiently distribute a large number of function calls via HPC schedulers, while reducing the need to adapt code between different systems. We have shown its utility for drug screening data, but it can be used a broad range of analyses. This includes <italic>Bioconductor</italic> packages that make use of <italic>BiocParallel</italic>. </p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="sup1">
      <label>btz284_Supplementary_Data</label>
      <media xlink:href="btz284_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btz284-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Bischl</surname><given-names>B.</given-names></name></person-group><etal>et al</etal> (<year>2015</year>) 
<article-title>BatchJobs and BatchExperiments: abstraction mechanisms for using R in batch environments</article-title>. <source>J. Stat. Softw</source>., <volume>64</volume>, <fpage>1</fpage>–<lpage>25</lpage>.</mixed-citation>
    </ref>
    <ref id="btz284-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Gentleman</surname><given-names>R.C.</given-names></name></person-group><etal>et al</etal> (<year>2004</year>) 
<article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>. <source>Genome Biol</source>., <volume>5</volume>, <fpage>R80</fpage>.<pub-id pub-id-type="pmid">15461798</pub-id></mixed-citation>
    </ref>
    <ref id="btz284-B3">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name name-style="western"><surname>Hintjens</surname><given-names>P.</given-names></name></person-group> (<year>2013</year>) <source>ZeroMQ: Messaging for Many Applications</source>. 
<publisher-name>O’Reilly Media, Inc, Sebastopol, California</publisher-name>.</mixed-citation>
    </ref>
    <ref id="btz284-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Ihaka</surname><given-names>R.</given-names></name>, <name name-style="western"><surname>Gentleman</surname><given-names>R.</given-names></name></person-group> (<year>1996</year>) 
<article-title>R: a language for data analysis and graphics</article-title>. <source>J. Comput. Graph. Stat</source>., <volume>5</volume>, <fpage>299</fpage>–<lpage>314</lpage>.</mixed-citation>
    </ref>
    <ref id="btz284-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Iorio</surname><given-names>F.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>A landscape of pharmacogenomic interactions in cancer</article-title>. <source>Cell</source>, <volume>166</volume>, <fpage>740</fpage>–<lpage>754</lpage>.<pub-id pub-id-type="pmid">27397505</pub-id></mixed-citation>
    </ref>
    <ref id="btz284-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Lang</surname><given-names>M.</given-names></name></person-group><etal>et al</etal> (<year>2017</year>) 
<article-title>batchtools: tools for R to work on batch systems</article-title>. <source>J. Open Source Softw</source>., <volume>2</volume>, <fpage>135</fpage>.</mixed-citation>
    </ref>
    <ref id="btz284-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Svensson</surname><given-names>V.</given-names></name></person-group><etal>et al</etal> (<year>2018</year>) 
<article-title>Exponential scaling of single-cell RNA-seq in the past decade</article-title>. <source>Nat. Protoc</source>., <volume>13</volume>, <fpage>599</fpage>–<lpage>604</lpage>.<pub-id pub-id-type="pmid">29494575</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
