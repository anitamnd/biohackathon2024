<?properties open_access?>
<?subarticle report40177?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Wellcome Open Res</journal-id>
    <journal-id journal-id-type="iso-abbrev">Wellcome Open Res</journal-id>
    <journal-id journal-id-type="pmc">Wellcome Open Res</journal-id>
    <journal-title-group>
      <journal-title>Wellcome Open Research</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2398-502X</issn>
    <publisher>
      <publisher-name>F1000 Research Limited</publisher-name>
      <publisher-loc>London, UK</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7388197</article-id>
    <article-id pub-id-type="pmid">32766455</article-id>
    <article-id pub-id-type="doi">10.12688/wellcomeopenres.15853.2</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software Tool Article</subject>
      </subj-group>
      <subj-group>
        <subject>Articles</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PyOmeroUpload: A Python toolkit for uploading images and metadata to OMERO</article-title>
      <fn-group content-type="pub-status">
        <fn>
          <p>[version 2; peer review: 2 approved]</p>
        </fn>
      </fn-group>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Hay</surname>
          <given-names>Johnny</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Software</role>
        <role content-type="http://credit.casrai.org/">Writing – Original Draft Preparation</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9685-3718</contrib-id>
        <xref ref-type="aff" rid="a1">1</xref>
        <xref ref-type="aff" rid="a2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Troup</surname>
          <given-names>Eilidh</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Software</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-5666-8427</contrib-id>
        <xref ref-type="aff" rid="a1">1</xref>
        <xref ref-type="aff" rid="a2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Clark</surname>
          <given-names>Ivan</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Resources</role>
        <xref ref-type="aff" rid="a2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Pietsch</surname>
          <given-names>Julian</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Resources</role>
        <xref ref-type="aff" rid="a2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zieliński</surname>
          <given-names>Tomasz</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Supervision</role>
        <role content-type="http://credit.casrai.org/">Writing – Original Draft Preparation</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0194-5706</contrib-id>
        <xref ref-type="aff" rid="a2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Millar</surname>
          <given-names>Andrew</given-names>
        </name>
        <role content-type="http://credit.casrai.org/">Conceptualization</role>
        <role content-type="http://credit.casrai.org/">Supervision</role>
        <role content-type="http://credit.casrai.org/">Writing – Original Draft Preparation</role>
        <role content-type="http://credit.casrai.org/">Writing – Review &amp; Editing</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-1756-3654</contrib-id>
        <xref ref-type="corresp" rid="c1">a</xref>
        <xref ref-type="aff" rid="a2">2</xref>
      </contrib>
      <aff id="a1"><label>1</label>EPCC, University of Edinburgh, Edinburgh, EH9 3FD, UK</aff>
      <aff id="a2"><label>2</label>SynthSys and School of Biological Sciences, University of Edinburgh, Edinburgh, EH9 3FD, UK</aff>
    </contrib-group>
    <author-notes>
      <corresp id="c1">
        <label>a</label>
        <email xlink:href="mailto:Andrew.Millar@ed.ac.uk">Andrew.Millar@ed.ac.uk</email>
      </corresp>
      <fn fn-type="COI-statement">
        <p>No competing interests were disclosed.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>26</day>
      <month>8</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>5</volume>
    <elocation-id>96</elocation-id>
    <history>
      <date date-type="accepted">
        <day>17</day>
        <month>8</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright: © 2020 Hay J et al.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access article distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="wellcomeopenres-5-17849.pdf"/>
    <abstract>
      <p>Tools and software that automate repetitive tasks, such as metadata extraction and deposition to data repositories, are essential for researchers to share Open Data, routinely. For research that generates microscopy image data, OMERO is an ideal platform for storage, annotation and publication according to open research principles. We present
<italic>PyOmeroUpload</italic>, a Python toolkit for automatically extracting metadata from experiment logs and text files, processing images and uploading these payloads to OMERO servers to create fully annotated, multidimensional datasets. The toolkit comes packaged in portable, platform-independent Docker images that enable users to deploy and run the utilities easily, regardless of Operating System constraints. A selection of use cases is provided, illustrating the primary capabilities and flexibility offered with the toolkit, along with a discussion of limitations and potential future extensions.
<italic>PyOmeroUpload</italic> is available from:
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/pyOmeroUpload">https://github.com/SynthSys/pyOmeroUpload</ext-link>.</p>
    </abstract>
    <kwd-group kwd-group-type="author">
      <kwd>Data sharing</kwd>
      <kwd>research data management</kwd>
      <kwd>microscopy</kwd>
      <kwd>OMERO</kwd>
      <kwd>metadata</kwd>
      <kwd>Docker</kwd>
    </kwd-group>
    <funding-group>
      <award-group id="fund-1" xlink:href="http://dx.doi.org/10.13039/501100000268">
        <funding-source>Biotechnology and Biological Sciences Research Council</funding-source>
        <award-id>BB/M018040</award-id>
      </award-group>
      <award-group id="fund-2">
        <funding-source>Wellcome Trust</funding-source>
        <award-id>204804</award-id>
      </award-group>
      <funding-statement>This work was funded by the Wellcome Trust [204804; Institutional Strategic Support Fund].
This work was also supported by the Biotechnology and Biological Sciences Research Council (BBSRC) through the UK Centre for Mammalian Synthetic Biology [BB/M018040].
</funding-statement>
      <funding-statement>
        <italic>The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</italic>
      </funding-statement>
    </funding-group>
  </article-meta>
  <notes notes-type="version-changes">
    <sec sec-type="version-changes">
      <label>Revised</label>
      <title>Amendments from Version 1</title>
      <p>The updates in the second version of the article are primarily related to the comments and suggestions from our peer reviewers. To help users understand how metadata are extracted by default in the toolkit, we have added two new figures: an excerpt from the example log text file and a screenshot of the resulting Key-Value pairs as they appear in the OMERO UI. A review of the beneficial effects of adopting the OME-TIFF format in the toolkit has been added to the discussion section, which we hope will address our reviewers' comments on the potential advantages of this format for both interoperability and pyramidal features. There were also two minor enhancements added to the PyOmeroUpload toolkit implementation as a result of feedback from our reviewers: these include additional CLI parameters for including provenance metadata, and one to skip metadata extraction entirely. The corresponding GitHub repository URLs and Zenodo artifact DOIs have been updated in the Software Availability and References sections.</p>
    </sec>
  </notes>
</front>
<body>
  <sec sec-type="intro">
    <title>Introduction</title>
    <sec>
      <title>Background</title>
      <p>Creating Open Data through sharing, discovery and re-use of research data are integral activities for promoting Open Science
<sup><xref rid="ref-1" ref-type="bibr">1</xref></sup>. Effective data management, storage and cataloguing strategies are essential for enabling open research of this sort, and are therefore vital activities for fulfilling the requirements of publicly- and charity-funded research, as re-stated for example in the BEIS Open Research Data Task Force report (2018) and elsewhere
<sup><xref rid="ref-2" ref-type="bibr">2</xref>–
<xref rid="ref-4" ref-type="bibr">4</xref></sup>. Workflows that include regular data sharing can support these activities. To that end, it is imperative that researchers are empowered with open tools, software and user communities that embed Open Science within ongoing research, not as an afterthought. We present an open source software toolkit designed to aid researchers by facilitating the management of imaging data and accompanying metadata.</p>
      <p>Contemporary research in cell biology generates substantial volumes of microscopy data. The volume and velocity of data produced presents challenges for smaller laboratories that typically do not have the infrastructure, software or expertise to sustain bespoke resources and workflows for this data management task. Data discovery and re-use depend on high-quality metadata, including detailed descriptions of experimental conditions, materials used, operational procedures and analysis methods
<sup><xref rid="ref-5" ref-type="bibr">5</xref></sup>. Software intended to support this process must therefore encourage rich metadata definition. The more streamlined the process of depositing data, and enriching data with metadata that has been captured at the point of generation, the greater the quantity and quality of data that can be shared.</p>
      <p>The foremost open source software platform for managing microscopy image data is Open Microscopy Environment’s (OME) Remote Objects (OMERO)
<sup><xref rid="ref-6" ref-type="bibr">6</xref>,
<xref rid="ref-7" ref-type="bibr">7</xref></sup>. OMERO is intended as a complete platform for managing images in a secure central repository where data can be viewed, organized, analyzed and shared online
<sup><xref rid="ref-8" ref-type="bibr">8</xref></sup>. The platform is frequently updated and supports importing over 150 image formats, full multi-dimensional image viewing, analysis with scripts and plugins, data conversion and publishing through URLs. OMERO also provides excellent cataloguing capabilities, where data can be annotated with tags, comments, key-value pairs, tables and supplementary files; images can be browsed or searched through accordingly, and shared with collaborators. Another excellent feature of OMERO is that it provides comprehensive support for a variety of users and software developers in the form of programming APIs for Java, Python, MATLAB and C++. Additionally, OMERO is supported by a very active community of microscopy researchers, while the OME staff runs regular workshops and engages very effectively with the online community via support forums.</p>
    </sec>
    <sec>
      <title>Rationale</title>
      <p>One of the greatest barriers to wide adoption of open research principles and data sharing is the effort required to deposit data and accompanying metadata into an online repository. Hence solutions that can streamline and automate this process for researchers are needed. One of the research groups within our centre routinely perform time-lapse microscopy experiments in which organisms are monitored over a period of hours, with bright-field and fluorescence images captured every 2.5 minutes (for example Granados
<italic>et al.</italic>, 2018)
<sup><xref rid="ref-9" ref-type="bibr">9</xref></sup>. The images are acquired using three optical channels across twenty or more latitudinal/longitudinal positions, through multiple z-planes. These kinds of data benefit hugely from the multi-dimensional ‘hypercube’ format feature in OMERO, that allows one single “OMERO image” to represent the whole recorded timeseries in a five-dimensional structure, including space, time and channel
<sup><xref rid="ref-8" ref-type="bibr">8</xref></sup>. At the time of initiating the experiment, the biological context is known (including strains, medium, and conditions) and it is the optimum moment to capture this information, for example in a text file. These types of experiments are perfect candidates for automation of data deposition, wherein large quantities of images are generated (typically 90,000 raster images or more, constituting 30 GB per experiment) and detailed descriptions can be constructed by combining technical metadata obtained from the experimental setup (such as time resolution, exposure time, z-positions) and user input.</p>
      <p>Python has become a language of choice for biological applications, so easy integration of image data processing in this environment is welcome. At the same time, using Python software on Windows platforms – which dominate laboratories’ IT infrastructure and microscopy management software – can still be cumbersome.</p>
      <p>A Python-based tool that facilitates microscopy data deposition was conceived:
<italic>PyOmeroUpload</italic> toolkit, by which the data generated by laboratories’ microscopes could be programmatically uploaded to an OMERO server along with experimental metadata, thus removing the burden on researchers of manually performing this process.
<italic>PyOmeroUpload</italic> performs two principal functions: it parses metadata from user-friendly, human-readable semi-structured text files and creates multi-dimensional images from a directory structure populated with multiple images across multiple dimensions, before uploading the reconstituted data and extracted metadata to an OMERO server. For heavy data producers, this drastically reduces the resource cost of uploading and cataloguing their data and offers the additional benefit of enforcing lab-specific metadata conventions.</p>
      <p><italic>PyOmeroUpload</italic> complements the presently available tools for deposition of data and metadata in OMERO:
<italic>OMERO.insight</italic>
<sup><xref rid="ref-10" ref-type="bibr">10</xref></sup> and
<italic>OMERO.cli</italic>
<sup><xref rid="ref-11" ref-type="bibr">11</xref></sup>. The Insight client is a desktop application featuring a rich GUI (Graphical User Interface) for viewing and importing data, using the Bio-Formats
<sup><xref rid="ref-12" ref-type="bibr">12</xref></sup> library for translation of proprietary file formats. The CLI is “a set of Python-based system administration, deployment and advanced user tools”
<sup><xref rid="ref-13" ref-type="bibr">13</xref></sup> that allows users to import images to an OMERO server from the command line, typically via a Shell script. Neither of these is capable of transforming raw two-dimensional image data into multi-dimensional ‘hypercube’ images, and neither offers a method of automatic metadata extraction.</p>
      <p>The
<italic>PyOmeroUpload</italic> library permits easier interaction with the OMERO server than with the standard API by presenting a collection of higher-level functions that simplify session management, ad-hoc uploading and querying. Newer releases (&gt;= 5.6) of the Python OMERO library (
<italic>omero-py</italic>)
<sup><xref rid="ref-14" ref-type="bibr">14</xref></sup> are distributed through PyPi
<sup><xref rid="ref-15" ref-type="bibr">15</xref></sup> and Conda
<sup><xref rid="ref-16" ref-type="bibr">16</xref></sup>, which support Windows, Linux and Mac OS Operating Systems (OS). Previous versions (&lt; 5.5) of the Python OMERO library were distributed through the Conda Bioconda
<sup><xref rid="ref-17" ref-type="bibr">17</xref></sup> channel, which only supports 64-bit Linux and Mac OS systems. Since many biology research labs use Windows OS, this constraint presented a significant obstacle.</p>
      <p>To address these issues we prepared pre-packaged, virtualized
<italic>Docker</italic>
<sup><xref rid="ref-18" ref-type="bibr">18</xref></sup> containers that allow easy use of
<italic>PyOmeroUpload</italic> by both Windows and Linux users directly through the command line, Python Shell, in code or via
<italic>Jupyter</italic> Notebooks
<sup><xref rid="ref-19" ref-type="bibr">19</xref></sup>. Our software was developed during the period that OMERO continued to be built with Python 2 and distributed through Bioconda, so using the client Python libraries was challenging on Windows systems, and the Docker solution provided a viable option for Windows users. Although recent releases of omero-py can be installed through Conda or Pip on all OSs, our fully portable, packaged toolkit offers further convenience for users since these containers also have the advantage of hiding any systems administration activities required for accessing OMERO from within Python from less experienced users.</p>
    </sec>
  </sec>
  <sec>
    <title>Implementation</title>
    <sec>
      <title>PyOmeroUpload</title>
      <p>The PyOmeroUpload toolkit software architecture comprises three main components: the metadata parser, data transfer manager and data broker. The data transfer manager provides a high-level interface for transferring data in a specified directory structure to a remote OMERO server. The data broker service makes extensive use of the OMERO Python API modules, exposing core functions for administering HTTP sessions, creating OMERO datasets and multi-dimensional images, and linking metadata objects. The uploader software is extensible, since the metadata parser can be replaced if required for a particular use case. Likewise, the image processing can be performed by a custom code module to compose the data into the multi-dimensional images.</p>
      <p>The OMERO Python API is the core dependency for connecting to and managing sessions with the OMERO server, as well as for retrieving data objects and executing queries. The OMERO API can be used with the Blitz Gateway, “a Python client-side library that facilitates working with the OMERO API”
<sup><xref rid="ref-20" ref-type="bibr">20</xref></sup>, or it can be utilized via a number of lower ‘service’ levels that provide stateless access. Although accessing the OMERO Python API with the Blitz Gateway as a context manager is encouraged, we found the stateless service level APIs to be more powerful and flexible.</p>
    </sec>
    <sec>
      <title>OMEROConnect</title>
      <p>To enable the software for Windows OS users, and to minimize complexity, the OMERO Python library and PyOmeroUpload package are wrapped into portable Docker image definitions provided in the OMEROConnect repository. These images are specified by a hierarchy of Dockerfiles that build upon one another, inheriting from a base image which incorporates all the necessary libraries for OMERO access. There are four Docker images in total, as described in
<xref rid="T1" ref-type="table">Table 1</xref>.</p>
      <table-wrap id="T1" orientation="portrait" position="anchor">
        <label>Table 1. </label>
        <caption>
          <title>OMEROConnect Docker images.</title>
        </caption>
        <table frame="hsides" rules="groups" content-type="article-table">
          <thead>
            <tr>
              <th align="left" valign="top" rowspan="1" colspan="1">Image Name</th>
              <th align="left" valign="top" rowspan="1" colspan="1">Description</th>
              <th align="left" valign="top" rowspan="1" colspan="1">Parent Image</th>
              <th align="left" valign="top" rowspan="1" colspan="1">Docker Pull Command</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_base</td>
              <td align="left" valign="top" rowspan="1" colspan="1">The base image that contains
<break/>environment necessary for the OMERO
<break/>Python API libraries</td>
              <td align="left" valign="top" rowspan="1" colspan="1">openjdk/11
<sup><xref rid="ref-22" ref-type="bibr">22</xref></sup>
</td>
              <td align="left" valign="top" rowspan="1" colspan="1">docker pull biordm/omero-
<break/>connect:omero_base</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_
<break/>uploader</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Image with the installed PyOmeroUpload
<break/>library</td>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_base</td>
              <td align="left" valign="top" rowspan="1" colspan="1">docker pull biordm/omero-
<break/>connect:omero_uploader</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_jupyter</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Image that contains Jupyter Notebook
<break/>server with OMERO API, PyOmeroUpload
<break/>and common scientific libraries</td>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_uploader</td>
              <td align="left" valign="top" rowspan="1" colspan="1">docker pull biordm/omero-
<break/>connect:omero_jupyter</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_ide</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Container with fully-fledged graphical IDE
<break/>for python development</td>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_jupyter</td>
              <td align="left" valign="top" rowspan="1" colspan="1">docker pull biordm/omero-
<break/>connect:omero_ide</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </sec>
  </sec>
  <sec>
    <title>Operation</title>
    <sec>
      <title>Installation – Conda</title>
      <p>Basic installation on Windows, Linux and Mac OS systems is by Conda, following the typical usage pattern. The OMERO Python library requires Python 3.6 or greater, so a corresponding Conda environment can be created. The commands
<sup><xref rid="ref-14" ref-type="bibr">14</xref></sup> are as follows:</p>
      <p>
        <preformat>
          <styled-content style="font-size:15px;color:#808080;">$ conda create -n omero_upload -c ome python=3.6 zeroc-ice36-python omero-py
$ conda activate omero_upload
$ pip install git+https://github.com/SynthSys/pyOmeroUpload.git@v5.6.2_2.0.0</styled-content>
        </preformat>
      </p>
      <p>Alternatively, the provided Docker containers can be used instead, as described in the section below.</p>
    </sec>
    <sec>
      <title>Installation – Docker</title>
      <p>For an alternative installation using pre-built Docker images, which work regardless of host OS or available system libraries, Docker containers can be deployed (and the instructions at
<ext-link ext-link-type="uri" xlink:href="https://docs.docker.com/docker-for-windows/install/">https://docs.docker.com/docker-for-windows/install/</ext-link> can be followed to install Docker for Windows). The relevant Docker images can be pulled from DockerHub
<sup><xref rid="ref-21" ref-type="bibr">21</xref></sup> with the commands listed in the table above.</p>
      <p>For example, to utilize the library from the command line, the following commands can be executed (for downloading the Docker image, starting the Docker container, connecting to it and accessing the uploader library):</p>
      <p>
        <preformat>
          <styled-content style="font-size:15px;color:#808080;">$ docker pull biordm/omero-connect:omero_uploader
$ docker run -t -d --name omero-uploader --entrypoint /bin/bash biordm/omero-connect:omero_uploader</styled-content>
        </preformat>
      </p>
      <p>In order to access local files, the docker volume should be mapped to a local folder using the -v command option. For instance, to access data in C:\Temp\omero_data, the command is as follows (where the local mounted files will be available in the ~/work directory from within the container):</p>
      <p>
        <preformat>
          <styled-content style="font-size:15px;color:#808080;">$ docker run -t -d --name omero-uploader -v 
'/c/Temp/omero_data:/home/jovyan/work:rw' --entrypoint /bin/bash biordm/omero-
connect:omero_uploader</styled-content>
        </preformat>
      </p>
      <p><bold>Hint</bold>: Windows users should enable access to the local drive in the Docker Desktop app settings (under Settings » Resources » File Sharing).</p>
      <p><bold>Hint</bold>: Before running a Docker container with new parameters, the old one must be removed first, or the new one can be labelled with a different name to avoid conflicts.</p>
      <p><bold>Hint</bold>: Some useful commands for listing all containers, stopping and removing a container are as follows:</p>
      <p>
        <preformat>
          <styled-content style="font-size:15px;color:#808080;">$ docker ps -a
$ docker stop {CONTAINER_ID}
$ docker rm {CONTAINER_ID}</styled-content>
        </preformat>
      </p>
    </sec>
    <sec>
      <title>Using the toolkit</title>
      <p>The main entry point is the function launch_upload in the PyOmeroUploader class of the pyomero_upload module. The function accepts parameters for creating a connection to the desired remote OMERO server and for defining the location of metadata and image files. For example, the following commands can be executed from within the Python Shell (Windows users must run this from within the Docker container, after the `docker exec…` command):</p>
      <p>
        <preformat>
          <styled-content style="font-size:15px;color:#808080;">$ python
&gt;&gt;&gt; from pyomero_upload.pyomero_upload import PyOmeroUploader
&gt;&gt;&gt; uploader = PyOmeroUploader('USERNAME', 'PASSWORD', 'demo.openmicroscopy.org')
&gt;&gt;&gt; uploader.launch_upload('dataset_name', '/path/to/data', True)</styled-content>
        </preformat>
      </p>
    </sec>
  </sec>
  <sec>
    <title>Use cases</title>
    <p>The toolkit has been designed with a range of researchers, data generators, curators and developers in mind so a variety of use cases can be explored.</p>
    <p>To demonstrate the use cases below, we use the Docker images, as they work on both Linux-like and Windows systems, and provide test data to be used in the examples below. Follow the steps below (in Windows PowerShell) before exploring the use cases:</p>
    <p>
      <preformat>
        <styled-content style="font-size:15px;color:#808080;"># retrieving test data

$ cd C:\Temp
$ git clone https://github.com/SynthSys/omero_connect_demo

# getting and starting Omero connect docker
$ docker pull biordm/omero-connect:omero_jupyter
$ docker run --name omero-jupyter -p 8888:8888 -v 
'/c/Temp/omero_connect_demo:/home/jovyan/work:rw' biordm/omero-connect:omero_jupyter
</styled-content>
      </preformat>
    </p>
    <p>These commands download the demo Jupyter notebooks and data from the omero_connect_demo repository, then run a container named omero-jupyter which has a work directory linked to the downloaded demo data (at C:\Temp\omero_connect_demo).</p>
    <p>The user should see output similar to that in
<xref ref-type="fig" rid="f1">Figure 1</xref>, where the localhost with exposed port URL and unique token are provided for accessing the Jupyter Notebook instance running in the Docker container. The user should make a note of the access token (the string starting with “token=”) as it is needed to access the notebooks, and leave this terminal open in the background with the running Docker container.</p>
    <fig fig-type="figure" id="f1" orientation="portrait" position="anchor">
      <label>Figure 1. </label>
      <caption>
        <title>Windows PowerShell terminal showing output of the Docker run command for an omero_jupyter container.</title>
      </caption>
      <graphic xlink:href="wellcomeopenres-5-17849-g0000"/>
    </fig>
    <p>In the use cases below, the OMERO public demo server is the target instance; users must provide their own login credentials for access to this server, and this requires registration
<sup><xref rid="ref-23" ref-type="bibr">23</xref></sup>. You can register for a free demo account for OMERO at
<ext-link ext-link-type="uri" xlink:href="https://help.openmicroscopy.org/demo-server.html">https://help.openmicroscopy.org/demo-server.html</ext-link>.</p>
    <sec>
      <title>Use case 1: uploading a data folder</title>
      <p>The primary use case is for data generators and curators who wish to deposit their data in an OMERO server, typically as part of a data sharing workflow. PyOmeroUpload can be of particular benefit to these users because it supports the automation of such processes by including a CLI tool that is easily integrated with other programs or scripts.</p>
      <p>We provided a simple script – upload_cli – that invokes the necessary Python functions to perform an upload, and it can be modified for individual needs. To upload the provided test data (mapped from the local file system in the steps above) into the OMERO demo server, run the following commands from a new shell window:</p>
      <p>
        <preformat>
          <styled-content style="font-size:15px;color:#808080;">$ docker exec -it omero-jupyter bash
$ cd work
$ python -m pyomero_upload.upload_cli -d test_data -n my_first_dataset -u USER -s
demo.openmicroscopy.org -y</styled-content>
        </preformat>
      </p>
      <p>After completion, the script creates a new dataset in demo OMERO. The dataset consists of 3 cubes with additional dimensions for 3 channels and 3 timepoints as shown in
<xref ref-type="fig" rid="f2">Figure 2</xref>.</p>
      <fig fig-type="figure" id="f2" orientation="portrait" position="anchor">
        <label>Figure 2. </label>
        <caption>
          <title>Screenshot of an uploaded hypercube image as displayed in the OMERO web client ‘iviewer’ GUI.</title>
        </caption>
        <graphic xlink:href="wellcomeopenres-5-17849-g0001"/>
      </fig>
      <p>For more advanced use cases, the provided data transfer script can be invoked with additional parameters as described in the README under
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/pyOmeroUpload/blob/master/README.md">https://github.com/SynthSys/pyOmeroUpload/blob/master/README.md</ext-link>.</p>
      <p>The provided, default implementation transforms images into five-dimensional hypercubes following the rules:</p>
      <list list-type="simple">
        <list-item>
          <label>1. </label>
          <p>Target directory contains sub-directories named ‘pos{xxx}’, each of which corresponds to a microscope position, where ‘{xxx}’ is a unique numeric identifier for that position</p>
        </list-item>
        <list-item>
          <label>2. </label>
          <p>Within each sub-directory, there are multiple image files per z-section, time point and channel</p>
        </list-item>
        <list-item>
          <label>3. </label>
          <p>Each image file adheres to a naming convention of ‘{abc}_{timepoint}_{channel}_{z-section}’ where ‘{abc}’ can be any arbitrary string</p>
        </list-item>
      </list>
      <p>For insight into how the metadata is extracted by the default metadata parser, the ‘*Acq.txt’ and ‘*log.txt’ files can be inspected (in the test_data). For ease of reference, an excerpt of the beginning of the example ‘*log.txt’ file is shown in
<xref ref-type="fig" rid="f3">Figure 3</xref>.The metadata tags and key-value pairs in OMERO are generated from colon-delimited key-value pairs in the text files, while the tables are generated from tab-separated tabular text and attached to the dataset as ‘h5’ files. Examples of the KVPs are displayed below in
<xref ref-type="fig" rid="f4">Figure 4</xref>. Pre-defined regular expressions are used to extract particular elements of metadata, and these could be modified for individual needs.</p>
      <fig fig-type="figure" id="f3" orientation="portrait" position="anchor">
        <label>Figure 3. </label>
        <caption>
          <title>Text in the log.txt file that is parsed, and where KVPs are extracted from, by the default PyOmeroUpload metadata extractor.</title>
        </caption>
        <graphic xlink:href="wellcomeopenres-5-17849-g0002"/>
      </fig>
      <fig fig-type="figure" id="f4" orientation="portrait" position="anchor">
        <label>Figure 4. </label>
        <caption>
          <title>Screenshot of the KVPs as they appear in the OMERO server UI.</title>
        </caption>
        <graphic xlink:href="wellcomeopenres-5-17849-g0003"/>
      </fig>
    </sec>
    <sec>
      <title>Use case 2: interactive OMERO operations with Jupyter</title>
      <p>In the second use case, users can interact with OMERO through Jupyter Notebooks using the provided docker image.</p>
      <p>Using the same Docker container as before in Use Case 1, users should pay attention to the startup screen as in
<xref ref-type="fig" rid="f1">Figure 1</xref>. When the Docker container is started for the first time, a unique token is displayed for accessing the Jupyter Notebook instance running within. The token must be provided either in the URL or on the login page to access the Jupyter Notebook, and if the Docker container is restarted then this token is not displayed again.</p>
      <p>By visiting the address
<ext-link ext-link-type="uri" xlink:href="http://127.0.0.1:8888">http://127.0.0.1:8888</ext-link> in a browser, the Jupyter Notebook server can be accessed, and the notebooks shown in the table below are available in the ‘work’ directory (after logging in with the token). To begin with, the omero_upload notebook demonstrates invocation of the launch_upload entry point function with appropriate parameters. After running the upload cell is completed, the output will report the number of images deposited along with the destination dataset identifier. Once data are uploaded, the target server is queried in a successive cell to retrieve and verify the corresponding dataset. The query notebook provides more extensive (meta)data retrieval and exploration operations, while the API notebook utilizes the OMERO JSON API to retrieve metadata through an alternative mechanism (see
<xref rid="T2" ref-type="table">Table 2</xref>).</p>
      <table-wrap id="T2" orientation="portrait" position="anchor">
        <label>Table 2. </label>
        <caption>
          <title>Demonstration Jupyter Notebooks.</title>
        </caption>
        <table frame="hsides" rules="groups" content-type="article-table">
          <thead>
            <tr>
              <th align="left" valign="top" rowspan="1" colspan="1">Sample Notebook</th>
              <th align="left" valign="top" rowspan="1" colspan="1">Description</th>
              <th align="left" valign="top" rowspan="1" colspan="1">Features</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_upload.ipynb</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Demonstrates how to connect upload data
<break/>by invoking the PyOmeroUpload </td>
              <td align="left" rowspan="1" colspan="1">   •   Importing modules
<break/>   •   Configuring OMERO server connection
<break/>       parameters
<break/>   •   Uploading a data directory</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_query.ipynb</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Demonstrates how to query the (meta)data
<break/>services using the standard OMERO Python
<break/>library</td>
              <td align="left" rowspan="1" colspan="1">   •   Using OMERO Python library client
<break/>   •   Constructing and executing
<break/>       parameterized HQL queries
<break/>   •   Exploring the OMERO object model
<break/>       and hierarchy</td>
            </tr>
            <tr>
              <td align="left" valign="top" rowspan="1" colspan="1">omero_api.ipynb</td>
              <td align="left" valign="top" rowspan="1" colspan="1">Demonstrates how to query the (meta)data
<break/>services using the OMERO JSON API
<sup><xref rid="ref-28" ref-type="bibr">28</xref></sup>,
<break/>without depending on the PyOmeroUpload
<break/>client</td>
              <td align="left" rowspan="1" colspan="1">   •   Using the Python ‘requests’
<sup><xref rid="ref-29" ref-type="bibr">29</xref></sup> library to
<break/>       connect with and query the OMERO
<break/>       JSON API over HTTP
<break/>   •   Processing JSON responses</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>It is possible to use the notebooks on Linux-like platforms outside of the Docker container, after following the relevant installation steps for the pyOmeroUpload library.</p>
      <p>These notebooks demonstrate interactions with OMERO, and can be adapted for deeper analysis and visualization using the preinstalled Python libraries such as for example
<italic>Pandas</italic>
<sup><xref rid="ref-24" ref-type="bibr">24</xref></sup>,
<italic>NumPy</italic>
<sup><xref rid="ref-25" ref-type="bibr">25</xref></sup>,
<italic>Matplotlib</italic>
<sup><xref rid="ref-26" ref-type="bibr">26</xref></sup> and
<italic>seaborn</italic>
<sup><xref rid="ref-27" ref-type="bibr">27</xref></sup>. If other Python libraries are required, they can be installed with the following commands:</p>
      <p>
        <preformat>
          <styled-content style="font-size:15px;color:#808080;">$ docker exec -it omero-jupyter bash
$ conda install {PACKAGE_NAME}
</styled-content>
        </preformat>
      </p>
    </sec>
    <sec>
      <title>Use case 3: implementing a custom metadata parser or image processing module</title>
      <p>There are myriad file formats, structures and ontologies associated with metadata collected during experimental data generation. The captured metadata are stored either in semi-structured text or according to customized schema. It would be an impossible task to develop a software that could extract meaningful information from such a variety of inputs. Therefore, the PyOmeroUpload toolkit is designed with modularity in mind, allowing specification of a custom metadata parser and image processing module at runtime.</p>
      <p>The custom metadata parser extends the abstract base class ‘MetadataParser’. The interface is simple and mandates only one function, ‘extract_metadata’, which must return a Python dictionary containing a description and any metadata tags, key-value pairs and table elements in the form of ‘{ “description”: “”, “tags”: [], “kvps”: [], “tables”: [] }’. The tags list is simply a collection of string values while the KVPs list is a nested array containing keys paired alongside their corresponding values within sub-arrays, and the tables list is a collection of Pandas
<italic>DataFrame</italic>
<sup><xref rid="ref-30" ref-type="bibr">30</xref></sup> objects, complete with name attributes that have been assigned a value. The dictionary object is then passed to the broker instance which processes and uploads the metadata as children objects linked with the parent dataset in the OMERO server. Our own implementation, ‘MetadataAggregator’ which combines extracted metadata from two further implementations – ‘AcqMetadataParser’ and ‘LogMetadataParser’ – can be used as an example of the parser. </p>
      <p>The structure of the metadata parsing component in PyOmeroUpload permits a great deal of flexibility for customisation. For example, users can easily create an alternative implementation that extracts imaging parameters from various custom acquisition programs, or makes use of the utilities provided by BioFormats for doing so. By capturing the technical microscopy metadata (for example channels and exposure times etc.) in addition to experimental metadata (for example strains, project aims and related research etc.) which preserves the biological context of the data, such custom parsers could help to enrich the data deposited in OMERO.</p>
      <p>Customized classes for image processing should inherit from the image processor interface, and must implement the ‘process_image’ function which expects a reference to the current OMERO server session connection, a file path, and a reference to the target OMERO dataset object. The function should contain the logic required to pre-process for example to form the hypercubes and upload them to OMERO server. The example implementation is the ‘DefaultImageProcessor’ in the ‘omero_data_transfer.default_image_processor’ module.</p>
      <p>For the convenience of developers, we created the omero_ide Docker which provides JetBrains’ PyCharm
<sup><xref rid="ref-31" ref-type="bibr">31</xref></sup> IDE (Integrated Development Environment) and Codium
<sup><xref rid="ref-32" ref-type="bibr">32</xref></sup>, the Open Source software binaries of VSCode
<sup><xref rid="ref-33" ref-type="bibr">33</xref></sup>. The container runs an OpenSSH
<sup><xref rid="ref-34" ref-type="bibr">34</xref></sup> server that enables users to establish an X11
<sup><xref rid="ref-35" ref-type="bibr">35</xref></sup> SSH connection so that the IDE GUI can be displayed, as if the IDE is running on the host system. For Linux and Mac OS users, the connection can be established simply by entering the standard `ssh -X jovyan@127.0.0.1 -p 2222` in the command terminal. For Windows users, an
<italic>X Server</italic> application must be installed such as MobaXTerm
<sup><xref rid="ref-36" ref-type="bibr">36</xref></sup> or XMing
<sup><xref rid="ref-37" ref-type="bibr">37</xref></sup>.</p>
    </sec>
    <sec>
      <title>Use case 4: updating the OMERO Python library dependency</title>
      <p>Like all software packages, maintainability of the toolkit is vital to achieve sustained, long term use. Since the OMERO software itself is regularly updated and the OMERO libraries are sensitive to parity between versions, it is essential to equip the toolkit with a convenient mechanism for updating the constituent versions.</p>
      <p>In order to update the core OMERO Python library, the omero_base image Dockerfile contains two static variables: ‘OMERO_VERSION’ and ‘ZEROC_ICE_PACKAGE’. If necessary, these variables can be modified to meet the requirements of the target OMERO server version. The only requirement is that the relevant ‘omero-py’ library
<sup><xref rid="ref-14" ref-type="bibr">14</xref></sup> is available in the Python Package Index (PyPI) repository
<sup><xref rid="ref-15" ref-type="bibr">15</xref></sup>. After updating these version variables, then the Docker images need to be rebuilt as described in their README. Fortunately, the PyOmeroUpload toolkit is resilient to differences between versions of the core OMERO client library and target server; for example, v5.6.2_2.0.0 – which depends on version 5.6.2 of the OMERO client library – has been tested and found to be compatible with target servers running OMERO 5.4.10. This feature mitigates the need for regular updates in the Docker images to keep pace with OMERO releases, and allows one uploader Docker container to interoperate with multiple different servers running various versions of OMERO.</p>
    </sec>
    <sec>
      <title>Results from a real example</title>
      <p>The PyOmeroUpload toolkit was used to upload two datasets to the public OMERO demonstration server. The original microscopy data in each dataset comprised around 90,000 individual 512 × 512 pixel, covering 25 microscope positions, 3 channels, 5 z-sections and 240 timepoints. This amounted to approximately 30GB per dataset. The data in each dataset was structured into one directory per microscope position, containing individual files that adhered to a file naming convention specifying the channel, z-section and timepoint of each image, with metadata residing at the top directory level in two semi-structured text files. The toolkit was executed using the default included metadata parser and image processor classes as described in the
<italic>Operation</italic> section above. The project containing these datasets is published on the University of Edinburgh School of Biology public OMERO server at
<ext-link ext-link-type="uri" xlink:href="https://publicomero.bio.ed.ac.uk/webclient/?show=project-55">https://publicomero.bio.ed.ac.uk/webclient/?show=project-55</ext-link>. After uploading, each dataset contained 25 hypercube images corresponding to each microscope position, with the individual components of each hypercube accessible in the OMERO server full viewer.</p>
    </sec>
  </sec>
  <sec sec-type="discussion">
    <title>Discussion</title>
    <p>Modern research relies on various data types and management techniques, so it is implausible to conceive of one software platform that can cater for the needs of all research groups even within a moderate-sized Department. Specialized resources and tools such as OMERO, which is dedicated only to microscopy data, and Jupyter notebooks for data analysis, are key to providing satisfactory user experience and unlocking maximum value from using a data repository. However, the diverse systems must interoperate such that relationships between different datasets are captured and existing metadata are reused. Minimizing the “human” factor in data deposition and automation of the process assures high quality data and improves the productivity of experimental researchers. Our work seeks to facilitate programmatic access to data resources, as a key contribution to the integrated and sustainable research data management envisaged by the FAIR principles
<sup><xref rid="ref-38" ref-type="bibr">38</xref></sup>.</p>
    <p>Our expected users are biological or biomedical researchers who apply, and perhaps develop, automated microscopy and analysis to perform increasingly data-rich studies. They necessarily prioritize research innovation and data generation, rather than underpinning software development. We therefore address the interaction of this user group with the specialized resources that add value to data for them.</p>
    <p>The many benefits of the OMERO ecosystem are noted above. Development of the toolkit was driven by a few, specific barriers for researchers wishing to deposit their data conveniently into OMERO: namely, dependencies on OpenSSL system libraries and Java security certificates; compatibility between different versions of client libraries and server installations; and the resulting deleterious impact on the portability of solutions built to harness the power and adaptability of the Python OMERO API. Many of these issues have been addressed with the recent release of omero-py 5.6
<sup><xref rid="ref-14" ref-type="bibr">14</xref></sup>, especially the difficulties around installation of Python OMERO libraries on Microsoft Windows OS, which are now largely resolved since the upgrade to Python 3 and migration to PyPi. Prior to this release, the OMEROConnect Docker images provided a viable and convenient method for Windows users to utilize the OMERO Python library. While the OMERO ecosystem provides good user experience for manual interaction with microscopy data, we tried to address some of the issues with automated or programmatic access to the repository from a Python environment.</p>
    <p>One potential feature that would benefit OMERO is the implementation of a full featured RESTful
<sup><xref rid="ref-39" ref-type="bibr">39</xref></sup> API. Using standard HTTP methods to upload and retrieve (meta)data in an OMERO server through JSON payloads and multipart file attachments would completely remove the dependency on a bespoke client library (other than one for handling HTTP requests), thus maximizing interoperability. However, it must be acknowledged that many of the file formats supported by OMERO via the Bio-Formats library are complex, with multiple constituents and particular conversion sequences that are performed on the client side rather than on the server. OMERO does expose a JSON API which provides some CRUD (Create, Read, Update, Delete) operations but it does not mimic all the functions available in the client library.</p>
    <p>As an effective compromise between flexibility and interoperability, the RESTful API could make use of an open, exchangeable image format that would streamline the image data ingest process; a perfect candidate for this standardisation would be the OME-TIFF format. The advantages with this format are that image planes constituting a 5D image can be stored within one multi-page TIFF file, and OME-XML metadata blocks are embedded in each TIFF file’s header
<sup><xref rid="ref-40" ref-type="bibr">40</xref></sup>, so it is extremely portable. The format also supports the generation of pyramidal levels from large resolution planes
<sup><xref rid="ref-41" ref-type="bibr">41</xref></sup>, allowing whole slide images or very large acquisitions to be handled efficiently in OMERO.</p>
    <p>Utilisation of the OME-TIFF format could present an alternative approach to the current implementation of PyOmeroUpload, which leverages raw pixel format, and in principle PyOmeroUpload could convert image directory structures into OME-TIFF using the existing libraries
<sup><xref rid="ref-42" ref-type="bibr">42</xref>,
<xref rid="ref-43" ref-type="bibr">43</xref></sup>. However, uploading image data in its original format, rather than in raw pixel format, requires use of the OMERO CLI tool. We found this method is less portable because it depends on additional binaries being installed and we had difficulty making it work in a Jupyter Notebook environment. Ideally, the benefits of the OME-TIFF format for direct upload to an OMERO server could be maximised through a native Python image import implementation or the RESTful API.</p>
    <p>In the future, PyOmeroUpload could be combined with additional image processing implementations that could make use of machine or deep learning libraries which would pre-process the image data, performing tasks such as denoising, segmentation and feature detection. The results could be applied as ROIs to the images in OMERO, further enriching attached metadata.</p>
  </sec>
  <sec>
    <title>Summary</title>
    <p>The PyOmeroUpload toolkit assists users of OMERO with the tasks of uploading, annotating and sharing their (meta)data using programmatic access from a python environment. It provides an extensible framework for automating a data deposition workflow by allowing specification of metadata extraction and image processing modules, while insulating the user from the lower-level interactions and exposing a simpler API for typical data sharing tasks.</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>The sample data utilized in the upload demonstration operations are maintained in the SynthSys GitHub repository at
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/omero_connect_demo/releases/tag/v1.0.0">https://github.com/SynthSys/omero_connect_demo/releases/tag/v1.0.0</ext-link>.</p>
    <p>Data relating to the referenced Granados (2018) paper are published at
<ext-link ext-link-type="uri" xlink:href="https://publicomero.bio.ed.ac.uk/webclient/?show=project-55">https://publicomero.bio.ed.ac.uk/webclient/?show=project-55</ext-link>
</p>
  </sec>
  <sec>
    <title>Software availability</title>
    <sec>
      <title>PyOmeroUpload Toolkit</title>
      <list list-type="simple">
        <list-item>
          <label>1. </label>
          <p>Docker images are available from:
<ext-link ext-link-type="uri" xlink:href="https://hub.docker.com/r/biordm/omero-connect">https://hub.docker.com/r/biordm/omero-connect</ext-link>
</p>
        </list-item>
        <list-item>
          <label>2. </label>
          <p>Source code is available from:
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/pyOmeroUpload">https://github.com/SynthSys/pyOmeroUpload</ext-link>
</p>
        </list-item>
        <list-item>
          <label>3. </label>
          <p>Release of source code at time of publication is available from:
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/pyOmeroUpload/releases/tag/v5.6.2_2.2.0">https://github.com/SynthSys/pyOmeroUpload/releases/tag/v5.6.2_2.2.0</ext-link>
</p>
        </list-item>
        <list-item>
          <label>4. </label>
          <p>Archived source code at time of publication:
<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.5281/zenodo.3982334">https://doi.org/10.5281/zenodo.3982334</ext-link>
<sup><xref rid="ref-44" ref-type="bibr">44</xref></sup>
</p>
        </list-item>
        <list-item>
          <label>5. </label>
          <p>Licence:
<ext-link ext-link-type="uri" xlink:href="https://opensource.org/licenses/MIT">MIT</ext-link>
</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>OMEROConnect Docker Images</title>
      <list list-type="simple">
        <list-item>
          <label>1. </label>
          <p>Docker images are available from:
<ext-link ext-link-type="uri" xlink:href="https://hub.docker.com/r/biordm/omero-connect">https://hub.docker.com/r/biordm/omero-connect</ext-link>
</p>
        </list-item>
        <list-item>
          <label>2. </label>
          <p>Source code is available from:
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/OMEROConnect">https://github.com/SynthSys/OMEROConnect</ext-link>
</p>
        </list-item>
        <list-item>
          <label>3. </label>
          <p>Release of source code at time of publication is available from:
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/OMEROConnect/releases/tag/v5.6.2_2.2.0">https://github.com/SynthSys/OMEROConnect/releases/tag/v5.6.2_2.2.0</ext-link>
</p>
        </list-item>
        <list-item>
          <label>4. </label>
          <p>Archived source code at time of publication:
<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.3982311">https://doi.org/10.5281/zenodo.3982311</ext-link>
<sup><xref rid="ref-45" ref-type="bibr">45</xref></sup>
</p>
        </list-item>
        <list-item>
          <label>5. </label>
          <p>Licence:
<ext-link ext-link-type="uri" xlink:href="https://opensource.org/licenses/MIT">MIT</ext-link>
</p>
        </list-item>
      </list>
    </sec>
    <sec>
      <title>OMEROConnect Demo Notebooks</title>
      <list list-type="simple">
        <list-item>
          <label>1. </label>
          <p>Source code is available from:
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/omero_connect_demo">https://github.com/SynthSys/omero_connect_demo</ext-link>
</p>
        </list-item>
        <list-item>
          <label>2. </label>
          <p>Release of source code at time of publication is available from:
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/omero_connect_demo/releases/tag/v1.0.0">https://github.com/SynthSys/omero_connect_demo/releases/tag/v1.0.0</ext-link>
</p>
        </list-item>
        <list-item>
          <label>3. </label>
          <p>Archived source code at time of publication:
<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.5281/zenodo.3746514">https://doi.org/10.5281/zenodo.3746514</ext-link>
<sup><xref rid="ref-46" ref-type="bibr">46</xref></sup>
</p>
        </list-item>
        <list-item>
          <label>4. </label>
          <p>Licence:
<ext-link ext-link-type="uri" xlink:href="https://opensource.org/licenses/MIT">MIT</ext-link>
</p>
        </list-item>
      </list>
    </sec>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgments</title>
    <p>The authors thank The Open Microscopy Environment team for providing such comprehensive software platforms, packages, tools and support, and for assistance in making effective use of the OMERO client library API.</p>
    <p>Finally, the authors thank the Bioconda Development Team for assistance with creating, merging and re-building packages for the Conda channel.</p>
  </ack>
  <ref-list>
    <ref id="ref-1">
      <label>1</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Molloy</surname><given-names>JC</given-names></name></person-group>:
<article-title>The Open Knowledge Foundation: Open Data Means Better Science.</article-title><source><italic toggle="yes">PLoS Biol.</italic></source><year>2011</year>;<volume>9</volume>(<issue>12</issue>):<fpage>e1001195</fpage>.
<pub-id pub-id-type="doi">10.1371/journal.pbio.1001195</pub-id><!--<pub-id pub-id-type="pmcid">3232214</pub-id>--><?supplied-pmid 22162946?><pub-id pub-id-type="pmid">22162946</pub-id></mixed-citation>
    </ref>
    <ref id="ref-2">
      <label>2</label>
      <mixed-citation publication-type="journal"><collab>HEFCE, RCUK, UUK &amp; Wellcome</collab>:
<article-title>Concordat on Open Research Data</article-title>.<year>2016</year><ext-link ext-link-type="uri" xlink:href="https://www.ukri.org/files/legacy/documents/concordatonopenresearchdata-pdf/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-3">
      <label>3</label>
      <mixed-citation publication-type="journal"><collab>The Open Research Data Task Force</collab>:
<article-title>Realising the Potential: Final Report of the Open Research Data Task Force</article-title>.<year>2018</year><ext-link ext-link-type="uri" xlink:href="https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/775006/Realising-the-potential-ORDTF-July-2018.pdf">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-4">
      <label>4</label>
      <mixed-citation publication-type="journal"><collab>Scottish Science Advisory Council</collab>:
<article-title>Open Research: How data sharing can advance scientific impact in Scotland</article-title>.<year>2019</year><ext-link ext-link-type="uri" xlink:href="https://www.scottishscience.org.uk/sites/default/files/article-attachments/SSAC%20Briefing%20Note%20-%20Open%20Research.pdf">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-5">
      <label>5</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zielinski</surname><given-names>T</given-names></name><name><surname>Hay</surname><given-names>J</given-names></name><name><surname>Millar</surname><given-names>AJ</given-names></name></person-group>:
<article-title>The grant is dead, long live the data - migration as a pragmatic exit strategy for research data preservation [version 2; peer review: 2 approved].</article-title><source><italic toggle="yes">Wellcome Open Res.</italic></source><year>2019</year>;<volume>4</volume>:<fpage>104</fpage>.
<pub-id pub-id-type="doi">10.12688/wellcomeopenres.15341.2</pub-id><!--<pub-id pub-id-type="pmcid">6652102</pub-id>--><?supplied-pmid 31363499?><pub-id pub-id-type="pmid">31363499</pub-id></mixed-citation>
    </ref>
    <ref id="ref-6">
      <label>6</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>The Open Microscopy Environment - OMERO</article-title>.
<source><italic toggle="yes">openmicroscopy.org</italic></source>.<year>2020</year><ext-link ext-link-type="uri" xlink:href="https://www.openmicroscopy.org/omero/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-7">
      <label>7</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Swedlow</surname><given-names>JR</given-names></name><name><surname>Goldberg</surname><given-names>IG</given-names></name><name><surname>Eliceiri</surname><given-names>KW</given-names></name><etal/></person-group>:
<article-title>Bioimage Informatics for Experimental Biology.</article-title><source><italic toggle="yes">Annu Rev Biophys.</italic></source><year>2009</year>;<volume>38</volume>:<fpage>327</fpage>–<lpage>346</lpage>.
<pub-id pub-id-type="doi">10.1146/annurev.biophys.050708.133641</pub-id><!--<pub-id pub-id-type="pmcid">3522875</pub-id>--><?supplied-pmid 19416072?><pub-id pub-id-type="pmid">19416072</pub-id></mixed-citation>
    </ref>
    <ref id="ref-8">
      <label>8</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Allan</surname><given-names>C</given-names></name><name><surname>Burel</surname><given-names>JM</given-names></name><name><surname>Moore</surname><given-names>J</given-names></name><etal/></person-group>:
<article-title>OMERO: flexible, model-driven data management for experimental biology.</article-title><source><italic toggle="yes">Nat Methods.</italic></source><year>2012</year>;<volume>9</volume>(<issue>3</issue>):<fpage>245</fpage>–<lpage>253</lpage>.
<pub-id pub-id-type="doi">10.1038/nmeth.1896</pub-id><!--<pub-id pub-id-type="pmcid">3437820</pub-id>--><?supplied-pmid 22373911?><pub-id pub-id-type="pmid">22373911</pub-id></mixed-citation>
    </ref>
    <ref id="ref-9">
      <label>9</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Granados</surname><given-names>AA</given-names></name><name><surname>Pietsch</surname><given-names>JMJ</given-names></name><name><surname>Cepeda-Humerez</surname><given-names>SA</given-names></name><etal/></person-group>:
<article-title>Distributed and dynamic intracellular organization of extracellular information.</article-title><source><italic toggle="yes">Proc Natl Acad Sci U S A.</italic></source><year>2018</year>;<volume>115</volume>(<issue>23</issue>):<fpage>6088</fpage>–<lpage>6093</lpage>.
<pub-id pub-id-type="doi">10.1073/pnas.1716659115</pub-id><!--<pub-id pub-id-type="pmcid">6003323</pub-id>--><?supplied-pmid 29784812?><pub-id pub-id-type="pmid">29784812</pub-id></mixed-citation>
    </ref>
    <ref id="ref-10">
      <label>10</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>Importing Data with OMERO.insight Version 5.</article-title><source><italic toggle="yes">Open Microscopy Environment (OME) | Help.</italic></source><ext-link ext-link-type="uri" xlink:href="https://help.openmicroscopy.org/importing-data-5.html">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-11">
      <label>11</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>Import images — OMERO 5.4.10 documentation.</article-title><source><italic toggle="yes">Open Microscopy Environment (OME) | Docs.</italic></source><year>2019</year><ext-link ext-link-type="uri" xlink:href="https://docs.openmicroscopy.org/omero/5.4.10/users/cli/import.html">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-12">
      <label>12</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>The Open Microscopy Environment - Bio-Formats.</article-title><source><italic toggle="yes">openmicroscopy.org.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://www.openmicroscopy.org/bio-formats/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-13">
      <label>13</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>OMERO clients overview — OMERO 5.4.10 documentation.</article-title><source><italic toggle="yes">Open Microscopy Environment (OME) | Docs.</italic></source><year>2019</year><ext-link ext-link-type="uri" xlink:href="https://docs.openmicroscopy.org/omero/5.4.10/users/clients-overview.html">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-14">
      <label>14</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Team</collab>:
<article-title>omero-py: Python bindings to the OMERO.blitz server.</article-title>Open Microscopy Environment,<year>2020</year>.</mixed-citation>
    </ref>
    <ref id="ref-15">
      <label>15</label>
      <mixed-citation publication-type="journal"><collab>Python Software Foundation</collab>:
<article-title>PyPI · The Python Package Index</article-title>.
<source><italic toggle="yes">PyPI</italic></source>.<year>2020</year><ext-link ext-link-type="uri" xlink:href="https://pypi.org/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-16">
      <label>16</label>
      <mixed-citation publication-type="journal"><collab>Anaconda, Inc</collab>:
<article-title>Conda | Conda documentation.</article-title><source><italic toggle="yes">Conda.</italic></source><year>2017</year><ext-link ext-link-type="uri" xlink:href="https://conda.io/en/latest/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-17">
      <label>17</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Grüning</surname><given-names>B</given-names></name><name><surname>Dale</surname><given-names>R</given-names></name><name><surname>Sjödin</surname><given-names>A</given-names></name><etal/></person-group>:
<article-title>Bioconda: sustainable and comprehensive software distribution for the life sciences.</article-title><source><italic toggle="yes">Nat Methods.</italic></source><year>2018</year>;<volume>15</volume>(<issue>7</issue>):<fpage>475</fpage>–<lpage>476</lpage>.
<pub-id pub-id-type="doi">10.1038/s41592-018-0046-7</pub-id><?supplied-pmid 29967506?><pub-id pub-id-type="pmid">29967506</pub-id></mixed-citation>
    </ref>
    <ref id="ref-18">
      <label>18</label>
      <mixed-citation publication-type="journal"><collab>Docker Inc</collab>:
<article-title>Empowering App Development for Developers | Docker.</article-title><source><italic toggle="yes">Docker.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://www.docker.com/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-19">
      <label>19</label>
      <mixed-citation publication-type="journal"><collab>Project Jupyter</collab>:
<article-title>Project Jupyter.</article-title><source><italic toggle="yes">Project Jupyter</italic></source>.<year>2020</year><ext-link ext-link-type="uri" xlink:href="https://jupyter.org/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-20">
      <label>20</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>Blitz Gateway documentation — OMERO 5.5.1 documentation.</article-title><source><italic toggle="yes">Open Microscopy Environment (OME) | Docs.</italic></source><year>2019</year><ext-link ext-link-type="uri" xlink:href="https://docs.openmicroscopy.org/omero/5.5.1/developers/PythonBlitzGateway.html">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-21">
      <label>21</label>
      <mixed-citation publication-type="journal"><collab>Docker Inc</collab>:
<article-title>Docker Hub.</article-title><source><italic toggle="yes">Docker Hub.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://hub.docker.com/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-22">
      <label>22</label>
      <mixed-citation publication-type="journal"><collab>Docker Inc</collab>:
<article-title>Docker Hub | OpenJDK.</article-title><source><italic toggle="yes">Docker Hub.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://hub.docker.com/_/openjdk">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-23">
      <label>23</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>OMERO Demo Server.</article-title><source><italic toggle="yes">Open Microscopy Environment (OME) | Help.</italic></source><year>2018</year><ext-link ext-link-type="uri" xlink:href="https://help.openmicroscopy.org/demo-server.html">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-24">
      <label>24</label>
      <mixed-citation publication-type="journal"><collab>The PyData Development Team</collab>:
<article-title>pandas: Powerful data structures for data analysis, time series, and statistics</article-title>.<year>2020</year>.</mixed-citation>
    </ref>
    <ref id="ref-25">
      <label>25</label>
      <mixed-citation publication-type="journal"><collab>NumPy Developers</collab>:
<article-title>numpy: NumPy is the fundamental package for array computing with Python</article-title>.<year>2020</year><ext-link ext-link-type="uri" xlink:href="https://github.com/numpy/numpy">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-26">
      <label>26</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hunter</surname><given-names>JD</given-names></name><name><surname>Droettboom</surname><given-names>M</given-names></name></person-group>:
<article-title>matplotlib: Python plotting package</article-title>.<year>2020</year><ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/matplotlib/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-27">
      <label>27</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Waskom</surname><given-names>M</given-names></name></person-group>:
<article-title>seaborn: seaborn: statistical data visualization</article-title>.<year>2020</year><ext-link ext-link-type="uri" xlink:href="https://seaborn.pydata.org/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-28">
      <label>28</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>JSON API — OMERO 5.4.10 documentation.</article-title><source><italic toggle="yes">Open Microscopy Environment (OME) | Docs.</italic></source><year>2019</year><ext-link ext-link-type="uri" xlink:href="https://docs.openmicroscopy.org/omero/5.4.10/developers/json-api.html">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-29">
      <label>29</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Reitz</surname><given-names>K</given-names></name></person-group>:
<article-title>requests: Python HTTP for Humans</article-title>.<year>2020</year><ext-link ext-link-type="uri" xlink:href="https://requests.readthedocs.io/en/master/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-30">
      <label>30</label>
      <mixed-citation publication-type="journal"><collab>The Pandas Development Team</collab>:
<article-title>pandas.DataFrame — pandas 1.0.3 documentation.</article-title><source><italic toggle="yes">Pandas | API Reference.</italic></source><year>2014</year><ext-link ext-link-type="uri" xlink:href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-31">
      <label>31</label>
      <mixed-citation publication-type="journal"><collab>JetBrains s.r.o</collab>:
<article-title>PyCharm: the Python IDE for Professional Developers by JetBrains.</article-title><source><italic toggle="yes">JetBrains.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://www.jetbrains.com/pycharm/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-32">
      <label>32</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>O’Brien</surname><given-names>T</given-names></name></person-group>:
<article-title>VSCodium - Open Source Binaries of VSCode.</article-title><source><italic toggle="yes">VSCodium.com.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://vscodium.com/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-33">
      <label>33</label>
      <mixed-citation publication-type="journal"><collab>Microsoft</collab>:
<article-title>Visual Studio Code - Code Editing. Redefined</article-title>.
<source><italic toggle="yes">Visual Studio Code.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://code.visualstudio.com/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-34">
      <label>34</label>
      <mixed-citation publication-type="journal"><collab>OpenBSD Project</collab>:
<article-title>OpenSSH.</article-title><source><italic toggle="yes">OpenSSH.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://www.openssh.com/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-35">
      <label>35</label>
      <mixed-citation publication-type="journal"><collab>The X.Org Foundation</collab>:
<article-title>X.Org.</article-title><source><italic toggle="yes">X.Org.</italic></source><year>2019</year><ext-link ext-link-type="uri" xlink:href="https://www.x.org/wiki/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-36">
      <label>36</label>
      <mixed-citation publication-type="journal"><collab>Mobatek</collab>:
<article-title>MobaXterm free Xserver and tabbed SSH client for Windows</article-title>.<year>2020</year><ext-link ext-link-type="uri" xlink:href="https://mobaxterm.mobatek.net/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-37">
      <label>37</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Harrison</surname><given-names>C</given-names></name></person-group>:
<article-title>Xming X Server for Windows - Official Website.</article-title><source><italic toggle="yes">straightrunning.com.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="http://www.straightrunning.com/XmingNotes/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-38">
      <label>38</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wilkinson</surname><given-names>MD</given-names></name><name><surname>Dumontier</surname><given-names>M</given-names></name><name><surname>Aalbersberg</surname><given-names>IJ</given-names></name><etal/></person-group>:
<article-title>The FAIR Guiding Principles for scientific data management and stewardship.</article-title><source><italic toggle="yes">Sci Data.</italic></source><year>2016</year>;<volume>3</volume>: 160018.
<pub-id pub-id-type="doi">10.1038/sdata.2016.18</pub-id><!--<pub-id pub-id-type="pmcid">4792175</pub-id>--><?supplied-pmid 26978244?><pub-id pub-id-type="pmid">26978244</pub-id></mixed-citation>
    </ref>
    <ref id="ref-39">
      <label>39</label>
      <mixed-citation publication-type="journal"><collab>Wikipedia</collab>:
<article-title>Representational state transfer.</article-title><source><italic toggle="yes">Wikipedia.</italic></source><year>2020</year><ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Representational_state_transfer">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-40">
      <label>40</label>
      <mixed-citation publication-type="journal"><collab>The Open Microscopy Environment</collab>:
<article-title>The OME-TIFF format — OMERO 6.0.1 documentation</article-title>.
<italic>Open Microscopy Environment (OME)</italic>|
<italic>Docs</italic><year>2019</year><ext-link ext-link-type="uri" xlink:href="https://docs.openmicroscopy.org/ome-model/6.0.1/ome-tiff">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-41">
      <label>41</label>
      <mixed-citation publication-type="journal"><collab>The OME Blog</collab>:
<article-title>Update on the OME-TIFF pyramidal format</article-title>.
<italic>Open Microscopy Environment (OME)</italic>|
<italic>Blog</italic><year>2018</year><ext-link ext-link-type="uri" xlink:href="https://blog.openmicroscopy.org/file-formats/community/2018/11/29/ometiffpyramid/">Reference Source</ext-link></mixed-citation>
    </ref>
    <ref id="ref-42">
      <label>42</label>
      <mixed-citation publication-type="journal"><collab>CellProfiler</collab>:
<article-title>CellProfiler/python-bioformats</article-title>.
<italic>CellProfiler</italic> (Original work published 2014). [Python].<year>2020</year>
<ext-link ext-link-type="uri" xlink:href="https://github.com/CellProfiler/python-bioformats">Reference Source</ext-link>
</mixed-citation>
    </ref>
    <ref id="ref-43">
      <label>43</label>
      <mixed-citation publication-type="journal"><collab>APEER</collab>:
<article-title>Apeer-Micro/Apeer-Ometiff-Library</article-title>.
<italic>APEER</italic> (Original work published 2019). [Python].<year>2020</year>
<ext-link ext-link-type="uri" xlink:href="https://github.com/apeer-micro/apeer-ometiff-library">Reference Source</ext-link>
</mixed-citation>
    </ref>
    <ref id="ref-44">
      <label>44</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hay</surname><given-names>J</given-names></name><name><surname>Zielinski</surname><given-names>T</given-names></name></person-group>:
<article-title>pyOmeroUpload (Version v5.6.2_2.2.0).</article-title><source><italic toggle="yes">Zenodo.</italic></source><year>2020</year><pub-id pub-id-type="doi">10.5281/zenodo.3982334</pub-id></mixed-citation>
    </ref>
    <ref id="ref-45">
      <label>45</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hay</surname><given-names>J</given-names></name><name><surname>Zielinski</surname><given-names>T</given-names></name></person-group>:
<article-title>OMEROConnect (Version v5.6.2_2.2.0).</article-title><source><italic toggle="yes">Zenodo.</italic></source><year>2020</year><pub-id pub-id-type="doi">10.5281/zenodo.3982311</pub-id></mixed-citation>
    </ref>
    <ref id="ref-46">
      <label>46</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hay</surname><given-names>J</given-names></name><name><surname>Zielinski</surname><given-names>T</given-names></name></person-group>:
<article-title>omero_connect_demo (Version v1.0.0).</article-title><source><italic toggle="yes">Zenodo.</italic></source><year>2020</year><pub-id pub-id-type="doi">10.5281/zenodo.3746514</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
<sub-article id="report40177" article-type="peer-review">
  <front-stub>
    <article-id pub-id-type="doi">10.21956/wellcomeopenres.17849.r40177</article-id>
    <title-group>
      <article-title>Reviewer response for version 2</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Chessel</surname>
          <given-names>Anatole</given-names>
        </name>
        <xref ref-type="aff" rid="r40177a1">1</xref>
        <role>Referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1326-6305</contrib-id>
      </contrib>
      <aff id="r40177a1"><label>1</label>LOB, École polytechnique, Institut Polytechnique de Paris, Paris, France</aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="COI-statement">
        <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>27</day>
      <month>8</month>
      <year>2020</year>
    </pub-date>
    <permissions>
      <copyright-statement>Copyright: © 2020 Chessel A</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access peer review report distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <related-article related-article-type="peer-reviewed-article" id="d38e2301" ext-link-type="doi" xlink:href="10.12688/wellcomeopenres.15853.2">Version 2</related-article>
    <custom-meta-group>
      <custom-meta>
        <meta-name>recommendation</meta-name>
        <meta-value>approve</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>No further comments.</p>
    <p>Are the conclusions about the tool and its performance adequately supported by the findings presented in the article?</p>
    <p>Yes</p>
    <p>Is the rationale for developing the new software tool clearly explained?</p>
    <p>Yes</p>
    <p>Is the description of the software tool technically sound?</p>
    <p>Yes</p>
    <p>Are sufficient details of the code, methods and analysis (if applicable) provided to allow replication of the software development and its use by others?</p>
    <p>Yes</p>
    <p>Is sufficient information provided to allow interpretation of the expected output datasets and any results generated using the tool?</p>
    <p>Yes</p>
    <p>Reviewer Expertise:</p>
    <p>Bioimage informatics, biological data science, computational biology</p>
    <p>I confirm that I have read this submission and believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
  </body>
</sub-article>
<sub-article id="report39530" article-type="peer-review">
  <front-stub>
    <article-id pub-id-type="doi">10.21956/wellcomeopenres.17390.r39530</article-id>
    <title-group>
      <article-title>Reviewer response for version 1</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Chessel</surname>
          <given-names>Anatole</given-names>
        </name>
        <xref ref-type="aff" rid="r39530a1">1</xref>
        <role>Referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1326-6305</contrib-id>
      </contrib>
      <aff id="r39530a1"><label>1</label>LOB, École polytechnique, Institut Polytechnique de Paris, Paris, France</aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="COI-statement">
        <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>28</day>
      <month>7</month>
      <year>2020</year>
    </pub-date>
    <permissions>
      <copyright-statement>Copyright: © 2020 Chessel A</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access peer review report distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <related-article related-article-type="peer-reviewed-article" id="d38e2385" ext-link-type="doi" xlink:href="10.12688/wellcomeopenres.15853.1">Version 1</related-article>
    <custom-meta-group>
      <custom-meta>
        <meta-name>recommendation</meta-name>
        <meta-value>approve</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>Hay
<italic>et al.</italic> propose a toolkit in python meant to help with the loading of imaging data and metadata into an OMERO instance. They provide easy to use docker containers all the way to jupyter notebooks exemplifying the use of their tool on a demo server.</p>
    <p> While the idea of FAIR open data is increasingly getting traction across the scientific community, in actual practice many issues, sometime seemingly low level, can make the actual sharing, or even just local management, of complex data surprisingly hard. The PyOmeroUpload toolkit, which interact with OMERO, arguably the most widely used client-server software for microscopy image management, aims at easing one key step of data management workflow, actually getting data in the data management system. Great care has obviously been put in making an easy to use and easy to maintain system and the paper is well written and very didactic, and one can only hope that it will be used in practice and ease the life of many researchers worldwide.</p>
    <p> A few minor comments/questions:
<list list-type="bullet"><list-item><p>More advanced examples, including a few line of standard ‘*Acq.txt’ and ‘*log.txt’, or the predefined regular expression, would have helped in showing what is available out of the box and what would need additional work to implement.</p></list-item><list-item><p>Increasingly acquisition are becoming so large as to need specialized pyramidal format. A few of those are now available in OMERO, how compatible would PyOmeroUpload be with them?</p></list-item><list-item><p>Some advanced options of OMERO import include linking the data instead of copying it, to avoid data duplication. Would they be easy to include in PyOmeroUpload?</p></list-item><list-item><p>As noted by the authors, the addition of ROIs would be an interesting next step, either via 'on the fly' analysis or the reading of precomputed rois files. The format of those is even less standard that images unfortunately...</p></list-item></list>
</p>
    <p>Are the conclusions about the tool and its performance adequately supported by the findings presented in the article?</p>
    <p>Yes</p>
    <p>Is the rationale for developing the new software tool clearly explained?</p>
    <p>Yes</p>
    <p>Is the description of the software tool technically sound?</p>
    <p>Yes</p>
    <p>Are sufficient details of the code, methods and analysis (if applicable) provided to allow replication of the software development and its use by others?</p>
    <p>Yes</p>
    <p>Is sufficient information provided to allow interpretation of the expected output datasets and any results generated using the tool?</p>
    <p>Yes</p>
    <p>Reviewer Expertise:</p>
    <p>Bioimage informatics, biological data science, computational biology</p>
    <p>I confirm that I have read this submission and believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
  </body>
  <sub-article id="comment4322-39530" article-type="response">
    <front-stub>
      <contrib-group>
        <contrib contrib-type="author">
          <name>
            <surname>Hay</surname>
            <given-names>Johnny</given-names>
          </name>
          <aff/>
        </contrib>
      </contrib-group>
      <author-notes>
        <fn fn-type="COI-statement">
          <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
        </fn>
      </author-notes>
      <pub-date pub-type="epub">
        <day>14</day>
        <month>8</month>
        <year>2020</year>
      </pub-date>
    </front-stub>
    <body>
      <p>Thank you for your constructive and positive review, our detailed responses are listed below : 
<list list-type="bullet"><list-item><p>More advanced examples, including a few line of standard ‘*Acq.txt’ and ‘*log.txt’, or the predefined regular expression, would have helped in showing what is available out of the box and what would need additional work to implement.
<list list-type="bullet"><list-item><p>We have added an excerpt of the example log.txt file in the 'Use Case 1' section, and we hope that users can refer to the 'omero_connect_demo' example data repository for further details. The provided parser supports all the forms of annotations currently available in OMERO. </p></list-item></list>
</p></list-item></list>  
<list list-type="bullet"><list-item><p>Increasingly acquisition are becoming so large as to need specialized pyramidal format. A few of those are now available in OMERO, how compatible would PyOmeroUpload be with them?
<list list-type="bullet"><list-item><p>This is an excellent point: supporting large resolution pyramidal formats would be a very useful feature for PyOmeroUpload. We added discussion of using OME-TIFF format as an alternative approach in the discussion section. </p></list-item></list>
</p></list-item></list>
<list list-type="bullet"><list-item><p>Some advanced options of OMERO import include linking the data instead of copying it, to avoid data duplication. Would they be easy to include in PyOmeroUpload?
<list list-type="bullet"><list-item><p>Due to the hierarchical many-to-many data structure in OMERO, it is possible and indeed preferable to link multiple different parent containers with the same child images rather than copy these child elements, which results in inefficiencies of duplication.The challenges to implementing this feature are primarily related to defining ‘uniqueness’ in uploaded data: that is, which attributes of an entity in OMERO constitute its unique ID? In the case of uploaded images, PyOmeroUpload could of course run a preliminary scan of all the images owned by the active user to compare original filenames or titles, and if the filename of the image to be uploaded already exists on the server. However, that is very use case specific i.e. depends on naming conventions, tags used etc. so such feature enhancement in PyOmeroUpload would require careful consideration, although technically it is entirely feasible</p></list-item></list>
</p></list-item></list>
<list list-type="bullet"><list-item><p>As noted by the authors, the addition of ROIs would be an interesting next step, either via 'on the fly' analysis or the reading of precomputed rois files.
<list list-type="bullet"><list-item><p>The most suitable candidate format for standardising and persisting OMERO ROI annotations is OME-XML. At present the main mechanism for importing and exporting ROIs that we found is the OME ROI tool (https://github.com/glencoesoftware/ome-omero-roitool), which is a Java implementation for parsing OME-XML. To integrate this tool, it would be necessary to invoke the Java application as a process from the PyOmeroUpload toolkit. Alternatively, it may be possible to either embed the OME-XML in an OME-TIFF image file header, or to attach the ROIs as separate OME-XML file annotations linked with the image. However, it is not immediately clear how easily these file annotations could then be viewed in the OMERO UI. It would certainly be an interesting feature to explore, especially to enable easier sharing of image analyses. </p></list-item></list>
</p></list-item></list>
</p>
    </body>
  </sub-article>
</sub-article>
<sub-article id="report38747" article-type="peer-review">
  <front-stub>
    <article-id pub-id-type="doi">10.21956/wellcomeopenres.17390.r38747</article-id>
    <title-group>
      <article-title>Reviewer response for version 1</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Swedlow</surname>
          <given-names>Jason R</given-names>
        </name>
        <xref ref-type="aff" rid="r38747a1">1</xref>
        <role>Referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2198-1958</contrib-id>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Besson</surname>
          <given-names>Sébastien</given-names>
        </name>
        <xref ref-type="aff" rid="r38747a1">1</xref>
        <role>Co-referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-8783-1429</contrib-id>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Moore</surname>
          <given-names>Josh</given-names>
        </name>
        <xref ref-type="aff" rid="r38747a1">1</xref>
        <role>Co-referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4028-811X</contrib-id>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Burel</surname>
          <given-names>Jean-Marie</given-names>
        </name>
        <xref ref-type="aff" rid="r38747a1">1</xref>
        <role>Co-referee</role>
      </contrib>
      <aff id="r38747a1"><label>1</label>Centre for Gene Regulation and Expression, School of Life Sciences, University of Dundee, Dundee, UK</aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="COI-statement">
        <p><bold>Competing interests: </bold>We are members of OME (https://openmicroscopy.org)  and develop and release OMERO, an open source image data management application used in this paper.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>25</day>
      <month>6</month>
      <year>2020</year>
    </pub-date>
    <permissions>
      <copyright-statement>Copyright: © 2020 Moore J et al.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open access peer review report distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <related-article related-article-type="peer-reviewed-article" id="d38e2593" ext-link-type="doi" xlink:href="10.12688/wellcomeopenres.15853.1">Version 1</related-article>
    <custom-meta-group>
      <custom-meta>
        <meta-name>recommendation</meta-name>
        <meta-value>approve</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>
      <bold>Summary</bold>
    </p>
    <p> This manuscript describes an extension of OMERO, the open source data management system built and released by OME. PyOmeroUpload is a series of Python tools, packaged in a Docker container, that aims to simplify the upload and import of imaging datasets from the command line. Overall, the paper is clearly written and PyOmeroUpload is a great example of how the wider community can extend open source infrastructure and tools to meet the needs of imaging data handling, curation and publication. The default pipeline includes tools that convert imaging data stored in a custom internal file format and publish it into a multi-dimensional representation enriched with tags and key/value pairs. A few core metadata concepts are missing from the generated output like physical pixel sizes as well as channel metadata like wavelengths however, these can be added in later iterations of the tool. The authors have included a public data set generated by the software as a proof-of-concept and this is very useful for assessing output.</p>
    <p> Minor Points. These all reflect impressions of the PyOmeroUpload itself. The manuscript is quite clear and easy to comprehend.
<list list-type="order"><list-item><p>PyOmeroUpload uses the OMERO API to create OMERO multi-dimensional images. Has the alternate approach of converting the original files into an open exchangeable format like OME-TIFF been discussed as part of the design (cf
<ext-link ext-link-type="uri" xlink:href="http://blog.openmicroscopy.org/community/file-formats/2019/06/25/formats/"><underline>http://blog.openmicroscopy.org/community/file-formats/2019/06/25/formats/</underline></ext-link>,
<ext-link ext-link-type="uri" xlink:href="https://forum.image.sc/t/converting-whole-slide-images-to-ome-tiff-a-new-workflow/32110"><underline>https://forum.image.sc/t/converting-whole-slide-images-to-ome-tiff-a-new-workflow/32110</underline></ext-link>)? </p></list-item><list-item><p>In terms of curated metadata, while PyOmeroUpload offers some flexibility on types of annotations the user can access, the public proof of concept hosted on the Univ of Edinburgh server uses tags as the primary mechanism to capture and search annotations. An example using key/value annotations might be also useful.  We suggest this-- and it is only a suggestion--  only because K-Vs have proven to be extremely powerful for annotation and search in our work on IDR (
<ext-link ext-link-type="uri" xlink:href="https://www.nature.com/articles/nmeth.4326"><underline>https://www.nature.com/articles/nmeth.4326</underline></ext-link>).</p></list-item><list-item><p>Thinking about ease of use and adoption of the tool, it seems that the user needs to define a valid file *log.txt and a file *acq.txt. Ideally this should be optional to make the application more generic. The authors might consider making these yml files.   </p></list-item><list-item><p>For the purposes of
<bold/>promoting PyOmeroUpload and capturing provenance, the data it imports could include an annotation that refers to the tool used for import. Has there been some consideration of including the name and version of the tool and maybe the DOI of the paper as systematic tags and or key/value pairs?</p></list-item></list>
</p>
    <p>Are the conclusions about the tool and its performance adequately supported by the findings presented in the article?</p>
    <p>Yes</p>
    <p>Is the rationale for developing the new software tool clearly explained?</p>
    <p>Yes</p>
    <p>Is the description of the software tool technically sound?</p>
    <p>Yes</p>
    <p>Are sufficient details of the code, methods and analysis (if applicable) provided to allow replication of the software development and its use by others?</p>
    <p>Yes</p>
    <p>Is sufficient information provided to allow interpretation of the expected output datasets and any results generated using the tool?</p>
    <p>Yes</p>
    <p>Reviewer Expertise:</p>
    <p>cell biology, cell cycle, imaging, image informatics</p>
    <p>We confirm that we have read this submission and believe that we have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
  </body>
  <sub-article id="comment4321-38747" article-type="response">
    <front-stub>
      <contrib-group>
        <contrib contrib-type="author">
          <name>
            <surname>Hay</surname>
            <given-names>Johnny</given-names>
          </name>
          <aff/>
        </contrib>
      </contrib-group>
      <author-notes>
        <fn fn-type="COI-statement">
          <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
        </fn>
      </author-notes>
      <pub-date pub-type="epub">
        <day>14</day>
        <month>8</month>
        <year>2020</year>
      </pub-date>
    </front-stub>
    <body>
      <p>Thank you for your constructive and positive review, we are pleased to know that the main OMERO authors find our toolkit to be a useful extension. Our detailed responses are listed below: 
<list list-type="bullet"><list-item><p>PyOmeroUpload uses the OMERO API to create OMERO multi-dimensional images. Has the alternate approach of converting the original files into an open exchangeable format like OME-TIFF been discussed as part of the design. 
<list list-type="bullet"><list-item><p>This is an excellent idea, and we have added a review of the benefits of converting the original files into OME-TIFF format in the discussion section. However, we had difficulty uploading images directly in the original format using the existing API due to the dependency on additional CLI binaries.  </p></list-item></list>
</p></list-item></list>  
<list list-type="bullet"><list-item><p>In terms of curated metadata, while PyOmeroUpload offers some flexibility on types of annotations the user can access, the public proof of concept hosted on the Univ of Edinburgh server uses tags as the primary mechanism to capture and search annotations. An example using key/value annotations might be also useful.   
<list list-type="bullet"><list-item><p>The KVP annotation is indeed a very powerful feature. PyOmeroUpload toolkit does in fact already provide support for automatically extracting KVPs. An excerpt of the relevant experimental log file has been added to the 'Use Case 1' section along with a screenshot of the KVPs as they appear on the OMERO UI.</p></list-item></list>
</p></list-item></list>  
<list list-type="bullet"><list-item><p>Thinking about ease of use and adoption of the tool, it seems that the user needs to define a valid file *log.txt and a file *acq.txt. Ideally this should be optional to make the application more generic. The authors might consider making these yml files.     
<list list-type="bullet"><list-item><p>This suggestion is an elegant solution to address the dependency on the *log.txt and *acq.txt in the default metadata parser. In the latest release of PyOmeroUpload, we have introduced another CLI parameter '-x' that allows users to specify whether the metadata extraction task should be skipped. Additionally, if the user forgets to specify this argument, the application applies enhanced logic to detect whether the file(s) are missing and report back to the user if so, but continues with the upload process regardless. </p><p> The semi-structured metadata format (the log and acq files) are “biologist” friendly, and as such they can be easily understood/edited by users. Based on our experience, yml files are perceived as more complex and daunting, although they would be far preferable in terms of programmatic interoperability and metadata structure. </p></list-item></list>
</p></list-item></list>  
<list list-type="bullet"><list-item><p>For the purposes of promoting PyOmeroUpload and capturing provenance, the data it imports could include an annotation that refers to the tool used for import.  
<list list-type="bullet"><list-item><p>Another great suggestion, and we have added these Key/Value pairs to uploads by default: ['Uploaded With', 'pyOmeroUpload x.x.x'] and ['PyOmeroUpload', '
<ext-link ext-link-type="uri" xlink:href="https://github.com/SynthSys/pyOmeroUpload">https://github.com/SynthSys/pyOmeroUpload</ext-link>']. These metadata elements can be disabled by the user through another CLI parameter if desired. </p></list-item></list>
</p></list-item></list>
</p>
    </body>
  </sub-article>
</sub-article>
