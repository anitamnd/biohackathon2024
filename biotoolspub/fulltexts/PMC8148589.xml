<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 201905//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioengineering (Basel)</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioengineering (Basel)</journal-id>
    <journal-id journal-id-type="publisher-id">bioengineering</journal-id>
    <journal-title-group>
      <journal-title>Bioengineering</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2306-5354</issn>
    <publisher>
      <publisher-name>MDPI</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8148589</article-id>
    <article-id pub-id-type="pmid">34066939</article-id>
    <article-id pub-id-type="doi">10.3390/bioengineering8050059</article-id>
    <article-id pub-id-type="publisher-id">bioengineering-08-00059</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Communication</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SeqFu: A Suite of Utilities for the Robust and Reproducible Manipulation of Sequence Files</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0001-7619-281X</contrib-id>
        <name>
          <surname>Telatin</surname>
          <given-names>Andrea</given-names>
        </name>
        <xref ref-type="aff" rid="af1-bioengineering-08-00059">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Fariselli</surname>
          <given-names>Piero</given-names>
        </name>
        <xref ref-type="aff" rid="af2-bioengineering-08-00059">2</xref>
        <xref rid="c1-bioengineering-08-00059" ref-type="corresp">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0003-0160-9312</contrib-id>
        <name>
          <surname>Birolo</surname>
          <given-names>Giovanni</given-names>
        </name>
        <xref ref-type="aff" rid="af2-bioengineering-08-00059">2</xref>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Pazos</surname>
          <given-names>Florencio</given-names>
        </name>
        <role>Academic Editor</role>
      </contrib>
    </contrib-group>
    <aff id="af1-bioengineering-08-00059"><label>1</label>Gut Microbes and Health Programme, Quadram Institute Bioscience, Norwich NR4 7UQ, UK; <email>andrea.telatin@quadram.ac.uk</email></aff>
    <aff id="af2-bioengineering-08-00059"><label>2</label>Department of Medical Sciences, University of Turin, 10126 Torino, Italy; <email>giovanni.birolo@unito.it</email></aff>
    <author-notes>
      <corresp id="c1-bioengineering-08-00059"><label>*</label>Correspondence: <email>piero.fariselli@unito.it</email>;</corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>07</day>
      <month>5</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="collection">
      <month>5</month>
      <year>2021</year>
    </pub-date>
    <volume>8</volume>
    <issue>5</issue>
    <elocation-id>59</elocation-id>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>3</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>05</day>
        <month>5</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Â© 2021 by the authors.</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>Licensee MDPI, Basel, Switzerland. This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY) license (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>).</license-p>
      </license>
    </permissions>
    <abstract>
      <p>Sequence files formats (FASTA and FASTQ) are commonly used in bioinformatics, molecular biology and biochemistry. With the advent of next-generation sequencing (NGS) technologies, the number of FASTQ datasets produced and analyzed has grown exponentially, urging the development of dedicated software to handle, parse, and manipulate such files efficiently. Several bioinformatics packages are available to filter and manipulate FASTA and FASTQ files, yet some essential tasks remain poorly supported, leaving gaps that any workflow analysis of NGS datasets must fill with custom scripts. This can introduce harmful variability and performance bottlenecks in pivotal steps. Here we present a suite of tools, called SeqFu (Sequence Fastx utilities), that provides a broad range of commands to perform both common and specialist operations with ease and is designed to be easily implemented in high-performance analytical pipelines. SeqFu includes high-performance implementation of algorithms to interleave and deinterleave FASTQ files, merge Illumina lanes, and perform various quality controls (identification of degenerate primers, analysis of length statistics, extraction of portions of the datasets). SeqFu dereplicates sequences from multiple files keeping track of their provenance. SeqFu is developed in Nim for high-performance processing, is freely available, and can be installed with the popular package manager Miniconda.</p>
    </abstract>
    <kwd-group>
      <kwd>bioinformatics</kwd>
      <kwd>FASTQ</kwd>
      <kwd>FASTA</kwd>
      <kwd>software</kwd>
      <kwd>next-generation sequencing</kwd>
    </kwd-group>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="sec1-bioengineering-08-00059">
    <title>1. Introduction</title>
    <p>The FASTA format was introduced in 1985 with the homonym software package developed by Lipman and Pearson [<xref rid="B1-bioengineering-08-00059" ref-type="bibr">1</xref>]. It is still the <italic>de facto</italic> standard format for nucleotide and protein sequences. With the advent of automatic capillary sequencing, the FASTQ format was introduced to store a quality score for each base [<xref rid="B1-bioengineering-08-00059" ref-type="bibr">1</xref>,<xref rid="B2-bioengineering-08-00059" ref-type="bibr">2</xref>]. These two file formats are ubiquitous in bioinformatics, and a broad set of utilities have been released over the years to help the users access and manipulate the sequences (from filtering tools like Cutadapt [<xref rid="B3-bioengineering-08-00059" ref-type="bibr">3</xref>] and Fastp [<xref rid="B4-bioengineering-08-00059" ref-type="bibr">4</xref>], to general toolkits like SeqKit [<xref rid="B5-bioengineering-08-00059" ref-type="bibr">5</xref>] and SeqTk [<xref rid="B6-bioengineering-08-00059" ref-type="bibr">6</xref>]).</p>
    <p>Here we present SeqFu, a novel suite of utilities to manipulate FASTA and FASTQ files. It is written in the Nim programming language which combines an intuitive syntax inspired by Python with the performance (and ease of distribution) of compiled programs. </p>
    <p>SeqFu provides easy access to commonly used operations (e.g., interleaving/deinterleaving FASTQ files), tools to facilitate testing and manual troubleshooting (e.g., inspecting FASTQ files and checking for the presence of oligonucleotide sequences), and more specialized utilities. </p>
    <p>Generic templates to prototype <italic>ad hoc</italic> tools are also available from the software repository.</p>
  </sec>
  <sec id="sec2-bioengineering-08-00059">
    <title>2. Materials and Methods</title>
    <p>SeqFu is written in Nim, a high-performance compiled language, was tested using three compiler versions (1.0, 1.2, and 1.4), and implements the FASTA/FASTQ parsing algorithm written by Heng Li [<xref rid="B7-bioengineering-08-00059" ref-type="bibr">7</xref>], which is available from the repository <uri xlink:href="https://github.com/lh3/biofast/">https://github.com/lh3/biofast/</uri> (accessed on 12 April 2021). SeqFu was designed and tested to run on Linux and macOS, but it should be possible to compile it for other POSIX compliant systems. </p>
    <p>Some modules and templates use an alternative implementation of the same algorithm called readfq (<uri xlink:href="https://github.com/andreas-wilm/nimreadfq">https://github.com/andreas-wilm/nimreadfq</uri>, accessed on 12 April 2021), while <italic>k</italic>-mer counting is achieved using the implementation given by the nimbioseq library (<uri xlink:href="https://github.com/jhbadger/nimbioseq">https://github.com/jhbadger/nimbioseq</uri>, accessed on 12 April 2021).</p>
    <p>The Perl library (FASTX::Reader), which implements the same algorithm for FASTX file parsing, is platform-independent and requires Perl 5.12 or greater.</p>
    <p>The full SeqFu code is freely available from the GitHub repository (<uri xlink:href="https://github.com/telatin/seqfu2">https://github.com/telatin/seqfu2</uri>, accessed on 12 April 2021), and its documentation is available at <uri xlink:href="https://telatin.github.io/seqfu2">https://telatin.github.io/seqfu2</uri> (accessed on 12 April 2021).</p>
    <p>The suite is automatically checked at each release by a set of tests.</p>
  </sec>
  <sec sec-type="results" id="sec3-bioengineering-08-00059">
    <title>3. Results</title>
    <p>SeqFu consists of a set of core modules bundled in a main âseqfuâ executable and an additional set of corollary utilities, each in a separate binary executable with the âfu-â prefix.</p>
    <p>The FASTQ/FASTA parsing library we adopted allows FASTA or FASTQ files to be used as input files, compressed with or without <italic>g</italic><italic>zip</italic>, and includes support for the less common âSanger FASTQâ format that allowed a single sequence to span multiple lines.</p>
    <p>The algorithm to scan for sub-sequences in a sequence string allows the query to be inserted using IUPAC ambiguous bases and will return full or partial matches from both strands of the target sequence.</p>
    <p>When paired-end input files are expected, the programs only specify the first pair file name, autodetecting the paired reverse.</p>
    <sec id="sec3dot1-bioengineering-08-00059">
      <title>3.1. Manual Inspection of Datasets</title>
      <p>SeqFu facilitates the testing of pipelines and workflows and has tools to inspect input files and view or extract the first or last sequences of a dataset. </p>
      <p>The <italic>seqfu view</italic> subprogram will render the quality string in the form of a coloured bar plot using Unicode characters and includes an âoligonucleotide matchâ function to visually highlight the presence of primers, adaptors, or other sequences of interest in the input file. This utility can be helpful for performing a first manual inspection of datasets or evaluating the efficacy of trimming steps and inspecting their output files. A screenshot of <italic>seqfu view</italic> with oligonucleotide matches highlighted is shown in <xref ref-type="fig" rid="bioengineering-08-00059-f001">Figure 1</xref>.</p>
      <p>The <italic>seqfu head</italic> and <italic>seqfu tail</italic> functions allow extraction of the first (or last) sequences from a dataset, mimicking the commonly used <italic>head</italic> and <italic>tail</italic> Unix utilities, with the addition of parameters to skip a number of sequences allowing, for example, the user to extract one sequence every 12, limited to the first 100 occurrences.</p>
      <p>Similarly, <italic>seqfu grep</italic> mimics the âGNU grepâ utility but allows for queries, both in the sequence name (either exact matches or regular expressions), and in the sequence itself. In the latter case, the oligonucleotide match is achieved as described above, allowing both strands to be queried and setting thresholds to allow for partial matches.</p>
      <p>A first overview of a FASTQ dataset can be obtained with <italic>seqfu qual</italic>, that will report the inferred quality encoding (e.g., âIllumina 1.8â) and an average quality profile of the reads.</p>
    </sec>
    <sec id="sec3dot2-bioengineering-08-00059">
      <title>3.2. FASTQ Dataset Management</title>
      <p>There are routine operations on FASTQ datasets (and specifically Illumina paired-end FASTQ datasets) that are commonly performed using Bash scripts, but which would definitely benefit from a more robust implementation with consistency checks and better performance and reliability from the unit tests.</p>
      <p>Paired-end sequences can be stored in two separate files or in a single âinterleavedâ file, where its paired reverse sequence follows each forward sequence. SeqFu implements the <italic>interleave</italic> and <italic>deinterleave</italic> functions that convert separate pairs into a single interleaved file or split an interleaved file into separate pairs, respectively. </p>
      <p>Another commonly performed task is merging the FASTQ files coming from different lanes of some Illumina sequencers. This task can be achieved with a <italic>seqfu lanes</italic> function, which processes a full run with a single command that requires half the time needed for a popular Bash script to achieve the same operation (see <xref ref-type="sec" rid="sec3dot7-bioengineering-08-00059">Section 3.7</xref>).</p>
    </sec>
    <sec id="sec3dot3-bioengineering-08-00059">
      <title>3.3. Sequence Statistics</title>
      <p>A common operation, also performed by other tools like SeqKit, is counting the number of sequences in one or more files. <italic>Seqfu count</italic> performs this operation for all supplied input files. It still detects paired-end datasets and prints the reads count only once per paired dataset, ensuring that both files have the same number of sequences; if the numbers are not the same, then an error is reported.</p>
      <p>The <italic>seqfu stats</italic> utility calculates a set of statistics based on the length of sequences in the input files (including the widely adopted <italic>N50</italic>, and the less commonly used <italic>auN</italic> [<xref rid="B8-bioengineering-08-00059" ref-type="bibr">8</xref>,<xref rid="B9-bioengineering-08-00059" ref-type="bibr">9</xref>]). It offers the option to print the output as raw tables, screen-friendly tables, or as a MultiQC-ready file that can be incorporated with ease into a report generated by the MultiQC tool [<xref rid="B10-bioengineering-08-00059" ref-type="bibr">10</xref>]. An example of a MultiQC report generated with <italic>seqfu stats</italic> is shown in <xref ref-type="fig" rid="bioengineering-08-00059-f002">Figure 2</xref>.</p>
      <p>Seqkit provides a similar function, so we compared the performance of <italic>seqfu stats</italic> with <italic>seqkit stat</italic> (see <xref ref-type="sec" rid="sec3dot8-bioengineering-08-00059">Section 3.8</xref>), and found an improvement in speed despite the additional calculations performed.</p>
    </sec>
    <sec id="sec3dot4-bioengineering-08-00059">
      <title>3.4. Other Utilities</title>
      <p><italic>Seqfu derep</italic> allows the dereplication of FASTA and FASTQ datasets, removing duplicate sequences and keeping track of the total number of occurrences found in the original dataset. SeqFu adds some user-friendly features compared with other tools (e.g., VSEARCH [<xref rid="B11-bioengineering-08-00059" ref-type="bibr">11</xref>]), such as the possibility of propagating the number of identical sequences initially present in a file. </p>
      <p>This means that, if a pipeline requires multiple dereplication steps, it remains possible to identify the initial number of sequences of a specific type; this is because the information is passed at each step via the âsize = NUMBERâ tag in the sequence header. The program can also generate a report, in JSON format, on the origin of the duplicated reads (to identify which files contained each sequence and how many times per file). </p>
      <p>These features, missing in alternative packages, can provide the foundation for performance improvements in metagenomics and metabarcoding pipelines.</p>
      <p>The tool <italic>fu-orf</italic> allows the extraction of open reading frames (ORFs) from nucleotide datasets, including paired-end reads that are joined before ORF extraction. The module translates each input sequence using the standard genetic code and will return all the open reading frames (that can be filtered requiring a minimum length).</p>
      <p>Other utilities include <italic>seqfu sort</italic> (to sort sequences by size), <italic>fu-sw</italic> (to perform a local alignment against a target sequence using the Smith-Waterman algorithm [<xref rid="B12-bioengineering-08-00059" ref-type="bibr">12</xref>]), <italic>seqfu rc</italic> (to reverse complement sequences, supporting degenerate bases written as IUPAC DNA characters), and <italic>fu-primers</italic> (to mask degenerate primers from FASTQ files).</p>
    </sec>
    <sec id="sec3dot5-bioengineering-08-00059">
      <title>3.5. Generic FASTX Utility Templates</title>
      <p>The software repository contains a set of templates for custom application based on FASTA or FASTQ file parsing. When each sequence is processed in an independent task, the process can be engineered in a multithreading application, for which we also provide specific templates.</p>
    </sec>
    <sec id="sec3dot6-bioengineering-08-00059">
      <title>3.6. Perl Library with The FASTX Parser</title>
      <p>The FASTA/FASTQ parser used in SeqFu is also available as a Perl module (FASTX::Reader), that can be found in MetaCPAN (<uri xlink:href="https://metacpan.org/release/FASTX-Reader">https://metacpan.org/release/FASTX-Reader</uri>, accessed on 20 April 2021) and BioConda (as âperl-fastx-readerâ).</p>
    </sec>
    <sec id="sec3dot7-bioengineering-08-00059">
      <title>3.7. SeqFu Performance of Interleave, Deinterleave</title>
      <p>We evaluated the SeqFu performance of <italic>interleave, deinterleave</italic>, and <italic>lanes</italic> programs were compared with commonly used Bash one-liners (that usually lack any control of input and output integrity). To make the comparison more relevant, we used uncompressed FASTQ files and restricted the commands to a single core. These three subprograms were implemented in SeqFu using a single thread.</p>
      <p>We compared <italic>seqfu interleave</italic> and <italic>seqfu deinterleave</italic> with the Bash commands shown in <xref ref-type="fig" rid="bioengineering-08-00059-f003">Figure 3</xref>.</p>
      <p>SeqFu was two times faster than Bash for interleaving, taking 4.7 Â± 0.14 s versus 11.4 Â± 0.07 s and three times faster for deinterleaving, taking 3.9 Â± 0.08 s versus 12.8 Â± 0.10 s. It should be noted that SeqFu provides easier access to the functions and a set of tests to prevent reading-corrupted input files or producing invalid output. </p>
      <p>The <italic>seqfu lanes</italic> program has been compared with a popular Bash script available via GitHub (<uri xlink:href="https://github.com/stephenturner/mergelanes">https://github.com/stephenturner/mergelanes</uri>, accessed on 1 May 2021), which benefits from the multithreading capabilities of Bash pipes, but does not perform any integrity check on the input files, with the possibility of producing corrupted datasets. We detected a 10-fold increase in speed (2.6 Â± 0.9 ms for <italic>seqfu lanes</italic> compared with 31.8 Â± 4.0 ms for the Bash script).</p>
    </sec>
    <sec id="sec3dot8-bioengineering-08-00059">
      <title>3.8. Comparison between SeqFu and SeqKit </title>
      <p>We compared the performance of the <italic>stats</italic> module with two other utilities: âSeqKitâ and ân50â, both available from BioConda. We used a file with only a few large sequences (the human genome reference) and another file with many small sequences (reference bacterial genomes of the gastrointestinal tract from the NIH Human Microbiome Project), both used to benchmark SeqKit (<uri xlink:href="https://bioinf.shenwei.me/seqkit/benchmark/">https://bioinf.shenwei.me/seqkit/benchmark/</uri>, accessed on 28 April 2021). Both datasets account for ~3 Gbp, but the Human genome reference is composed of 194 sequences, while the other is more fragmented with 67,748 sequences.</p>
      <p>We used â<italic>seqfu stats</italic>â, â<italic>seqkit stats --all</italic>â and â<italic>n50 -x</italic>â to ensure a similar output (by default, <italic>SeqKit</italic> does not calculate the N50), finding that SeqFu is four times faster with the human genome, and 1.1 times faster with the other dataset (thus the programs have similar performance with many sequences). We also compared the (peak) memory usage, which is similar for the considered programs (~1 Mb for the human genome, ~40 kb for the short sequences), and is determined by the size of the largest sequence parsed (see <xref ref-type="fig" rid="bioengineering-08-00059-f004">Figure 4</xref>).</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="sec4-bioengineering-08-00059">
    <title>4. Discussion</title>
    <p>In bioinformatics, it is currently possible and relatively easy to find software to perform complex tasks (such as sequence alignment, variant calling, genomic assembly). Many choices are available, and the community converges towards well-performing, high-quality and thoroughly-tested solutions. The situation is different for simpler tasks: for many of these the available solutions are few and often lacking in some way, since there is little merit in publishing these type of tools. Thus, it is common to rely on home-made scripts, bash hacks, and âglueâ code, resulting in slow, hard-to-use, and untested applications. </p>
    <p>SeqFu aims to improve this situation by providing an easily deployable set of well-documented, tested, and high-performance utilities. The recommended deployment strategy is through the widely adopted âMinicondaâ package manager (and specifically via the âBioCondaâ channel [<xref rid="B11-bioengineering-08-00059" ref-type="bibr">11</xref>]), while the code is published on GitHub. Full documentation is available online and in a compact format in the built-in command help. </p>
    <p>High-performance follows from using a compiled language, which is relevant for a tool to be used on real data. Since we focused on features unavailable in other tools, it is difficult to perform a comprehensive performance comparison due to the lack of alternative implementations. The common tasks of interleaving and deinterleaving paired-end reads, for example, are often performed with Bash scripts that are harder to implement, more error-prone, but also less efficient than SeqFu, which is up to three times faster. Similarly, the common operation of merging reads from multiple lanes of Illumina sequencers is ten times faster than the implementation provided by a popular Bash script. SeqFu stats is a subcommand that has a direct alternative in the well-known SeqKit tool. However, SeqFu is up to four times faster than SeqKit on datasets with large sequences.</p>
    <p>The provided commands are reasonably generic, providing many options to customize the results. However, by design, we keep the scope of each command limited to simple commands for simple tasks.</p>
    <p>In addition to common tasks, there are several scenarios where <italic>ad hoc</italic> scripts are required to perform operations tailored for custom sequencing libraries or downstream applications. It is common practice to use high-end programming languages like Python for these kinds of tasks, given the simple syntax and excellent parsing libraries available. We believe Nim to be an equally accessible language (thanks to a Python-inspired syntax) that can bring a performance boost in these scenarios (being a compiled language), hence our decision to curate a set of program templates that are easy to compile and distribute.</p>
  </sec>
  <sec sec-type="conclusions" id="sec5-bioengineering-08-00059">
    <title>5. Conclusions</title>
    <p>The SeqFu suite is an easy-to-install set of tools to manipulate FASTA and FASTQ files that fills some gaps left by other software in this category. SeqFu offers templates to build custom programs that can manipulate sequencing datasets with the performance advantage offered by a compiled language and multithreading support.</p>
    <p>Finally, SeqFu provides novel approaches for high performance processing of NGS datasets, like an improved dereplication tool (that can be particularly beneficial in metagenomics and metabarcoding pipelines), and simplify the reporting of its results both via JSON and MultiQC-enabled output.</p>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgments</title>
    <p>The authors would like to express their gratitude to Rebecca Ansorge, for testing the software, and to Judith Pell for carefully reviewing the manuscript. P.F. and G.B. thank the Italian Ministry for Education, University and Research under the programme âDipartimenti di Eccellenza 2018â2022 D15D18000410001â.</p>
  </ack>
  <fn-group>
    <fn>
      <p><bold>Publisherâs Note:</bold> MDPI stays neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <notes>
    <title>Author Contributions</title>
    <p>Conceptualization A.T., G.B. and P.F.; Methodology, A.T. and G.B.; Software, A.T.; writingâoriginal draft preparation, A.T. and G.B.; Validation G.B.; writingâreview and editing, P.F.; All authors have read and agreed to the published version of the manuscript.</p>
  </notes>
  <notes>
    <title>Funding</title>
    <p>This research has been possible thanks to the support of the Biotechnology and Biological Sciences Research Council (BBSRC); this research was funded by the BBSRC Institute Strategic Programme Gut Microbes and Health BB/R012490/1 and its constituent project BBS/E/F/000PR10353 and the collaboration supported by the BBSRC Flexible Talent Mobility Accounts (BB/R506552/1); Development and tests were performed on CLIMB-BIG-DATA computing infrastructure, funded by the UKâs Medical Research Council through grant MR/T030062/1.</p>
  </notes>
  <notes>
    <title>Institutional Review Board Statement</title>
    <p>Not applicable.</p>
  </notes>
  <notes>
    <title>Informed Consent Statement</title>
    <p>Not applicable.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Data Availability Statement</title>
    <p>The published version of the software has been archived in Zenodo, and available at <uri xlink:href="https://doi.org/10.5281/zenodo.4740106">https://doi.org/10.5281/zenodo.4740106</uri> (accessed on 6 May 2021).</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Conflicts of Interest</title>
    <p>The authors declare no conflict of interest.</p>
  </notes>
  <ref-list>
    <title>References</title>
    <ref id="B1-bioengineering-08-00059">
      <label>1.</label>
      <element-citation publication-type="web">
        <person-group person-group-type="author">
          <collab>Wikipedia Contributors</collab>
        </person-group>
        <article-title><italic>FASTQ FormatâWikipedia, The Free Encyclopedia</italic>, Wikipedia: 2021</article-title>
        <comment>Available online: <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/FASTQ_format">https://en.wikipedia.org/wiki/FASTQ_format</ext-link></comment>
        <date-in-citation content-type="access-date" iso-8601-date="2021-05-06">(accessed on 6 May 2021)</date-in-citation>
      </element-citation>
    </ref>
    <ref id="B2-bioengineering-08-00059">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Ruan</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R.</given-names>
          </name>
        </person-group>
        <article-title>Mapping Short DNA Sequencing Reads and Calling Variants Using Mapping Quality Scores</article-title>
        <source>Genome Res.</source>
        <year>2008</year>
        <volume>18</volume>
        <fpage>1851</fpage>
        <lpage>1858</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.078212.108</pub-id>
        <?supplied-pmid 18714091?>
        <pub-id pub-id-type="pmid">18714091</pub-id>
      </element-citation>
    </ref>
    <ref id="B3-bioengineering-08-00059">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Martin</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>Cutadapt Removes Adapter Sequences from High-Throughput Sequencing Reads</article-title>
        <source>EMBnet. J.</source>
        <year>2011</year>
        <volume>17</volume>
        <fpage>10</fpage>
        <pub-id pub-id-type="doi">10.14806/ej.17.1.200</pub-id>
      </element-citation>
    </ref>
    <ref id="B4-bioengineering-08-00059">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Gu</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>Fastp: An Ultra-Fast All-in-One FASTQ Preprocessor</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <fpage>i884</fpage>
        <lpage>i890</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty560</pub-id>
        <?supplied-pmid 30423086?>
        <pub-id pub-id-type="pmid">30423086</pub-id>
      </element-citation>
    </ref>
    <ref id="B5-bioengineering-08-00059">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shen</surname>
            <given-names>W.</given-names>
          </name>
          <name>
            <surname>Le</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Hu</surname>
            <given-names>F.</given-names>
          </name>
        </person-group>
        <article-title>SeqKit: A Cross-Platform and Ultrafast Toolkit for FASTA/Q File Manipulation</article-title>
        <source>PLoS ONE</source>
        <year>2016</year>
        <volume>11</volume>
        <elocation-id>e0163962</elocation-id>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0163962</pub-id>
        <?supplied-pmid 27706213?>
        <pub-id pub-id-type="pmid">27706213</pub-id>
      </element-citation>
    </ref>
    <ref id="B6-bioengineering-08-00059">
      <label>6.</label>
      <element-citation publication-type="web">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
        </person-group>
        <article-title>SeqTk</article-title>
        <comment>Available online: <ext-link ext-link-type="uri" xlink:href="https://github.com/lh3/seqtk">https://github.com/lh3/seqtk</ext-link></comment>
        <date-in-citation content-type="access-date" iso-8601-date="2021-05-06">(accessed on 6 May 2021)</date-in-citation>
      </element-citation>
    </ref>
    <ref id="B7-bioengineering-08-00059">
      <label>7.</label>
      <element-citation publication-type="web">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
        </person-group>
        <article-title>Fast High-Level Programming Languages. <italic>Heng Lis Blog</italic></article-title>
        <year>2020</year>
        <comment>Available online: <ext-link ext-link-type="uri" xlink:href="https://lh3.github.io/2020/05/17/fast-high-level-programming-languages">https://lh3.github.io/2020/05/17/fast-high-level-programming-languages</ext-link></comment>
        <date-in-citation content-type="access-date" iso-8601-date="2021-05-06">(accessed on 6 May 2021)</date-in-citation>
      </element-citation>
    </ref>
    <ref id="B8-bioengineering-08-00059">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Salzberg</surname>
            <given-names>S.L.</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>A.M.</given-names>
          </name>
          <name>
            <surname>Zimin</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Puiu</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Magoc</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Koren</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Treangen</surname>
            <given-names>T.J.</given-names>
          </name>
          <name>
            <surname>Schatz</surname>
            <given-names>M.C.</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>A.L.</given-names>
          </name>
          <name>
            <surname>Roberts</surname>
            <given-names>M.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>GAGE: A Critical Evaluation of Genome Assemblies and Assembly Algorithms</article-title>
        <source>Genome Res.</source>
        <year>2012</year>
        <volume>22</volume>
        <fpage>557</fpage>
        <lpage>567</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.131383.111</pub-id>
        <?supplied-pmid 22147368?>
        <pub-id pub-id-type="pmid">22147368</pub-id>
      </element-citation>
    </ref>
    <ref id="B9-bioengineering-08-00059">
      <label>9.</label>
      <element-citation publication-type="web">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
        </person-group>
        <article-title>AuN: A New Metric to Measure Assembly Contiguity. <italic>Heng Lis Blog</italic></article-title>
        <year>2020</year>
        <comment>Available online: <ext-link ext-link-type="uri" xlink:href="https://lh3.github.io/2020/04/08/a-new-metric-on-assembly-contiguity">https://lh3.github.io/2020/04/08/a-new-metric-on-assembly-contiguity</ext-link></comment>
        <date-in-citation content-type="access-date" iso-8601-date="2021-05-06">(accessed on 6 May 2021)</date-in-citation>
      </element-citation>
    </ref>
    <ref id="B10-bioengineering-08-00059">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ewels</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Magnusson</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Lundin</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>KÃ¤ller</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>MultiQC: Summarize Analysis Results for Multiple Tools and Samples in a Single Report</article-title>
        <source>Bioinform. Oxf. Engl.</source>
        <year>2016</year>
        <volume>32</volume>
        <fpage>3047</fpage>
        <lpage>3048</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw354</pub-id>
        <?supplied-pmid 27312411?>
        <pub-id pub-id-type="pmid">27312411</pub-id>
      </element-citation>
    </ref>
    <ref id="B11-bioengineering-08-00059">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <collab>The Bioconda Team</collab>
          <name>
            <surname>GrÃ¼ning</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Dale</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>SjÃ¶din</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Chapman</surname>
            <given-names>B.A.</given-names>
          </name>
          <name>
            <surname>Rowe</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Tomkins-Tinch</surname>
            <given-names>C.H.</given-names>
          </name>
          <name>
            <surname>Valieris</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>KÃ¶ster</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>Bioconda: Sustainable and Comprehensive Software Distribution for the Life Sciences</article-title>
        <source>Nat. Methods</source>
        <year>2018</year>
        <volume>15</volume>
        <fpage>475</fpage>
        <lpage>476</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-018-0046-7</pub-id>
        <pub-id pub-id-type="pmid">29967506</pub-id>
      </element-citation>
    </ref>
    <ref id="B12-bioengineering-08-00059">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smith</surname>
            <given-names>T.F.</given-names>
          </name>
          <name>
            <surname>Waterman</surname>
            <given-names>M.S.</given-names>
          </name>
        </person-group>
        <article-title>Identification of Common Molecular Subsequences</article-title>
        <source>J. Mol. Biol.</source>
        <year>1981</year>
        <volume>147</volume>
        <fpage>195</fpage>
        <lpage>197</lpage>
        <pub-id pub-id-type="doi">10.1016/0022-2836(81)90087-5</pub-id>
        <pub-id pub-id-type="pmid">7265238</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
<floats-group>
  <fig id="bioengineering-08-00059-f001" orientation="portrait" position="float">
    <label>Figure 1</label>
    <caption>
      <p>Example of the rendering of a FASTQ file by <italic>seqfu view</italic>, where the quality track is represented by a block of variable height and colors (gray, red, yellow, and green) and oligonucleotide matches are rendered as colored arrows.</p>
    </caption>
    <graphic xlink:href="bioengineering-08-00059-g001"/>
  </fig>
  <fig id="bioengineering-08-00059-f002" orientation="portrait" position="float">
    <label>Figure 2</label>
    <caption>
      <p>MultiQC report generated by <italic>seqfu stats</italic>. Furthermore, <italic>seqfu counts</italic> can generate a similar table.</p>
    </caption>
    <graphic xlink:href="bioengineering-08-00059-g002"/>
  </fig>
  <fig id="bioengineering-08-00059-f003" orientation="portrait" position="float">
    <label>Figure 3</label>
    <caption>
      <p>Bash script commonly used to interleave and deinterleave FASTQ files. At line 2 the command used to interleave two FASTQ files; at line 7 the command used to deinterleave a FASTQ file.</p>
    </caption>
    <graphic xlink:href="bioengineering-08-00059-g003"/>
  </fig>
  <fig id="bioengineering-08-00059-f004" orientation="portrait" position="float">
    <label>Figure 4</label>
    <caption>
      <p>Memory consumption and execution times of Seqkit, SeqFu and n50 using two datasets (reference bacterial genomes from the gastrointestinal tract, left, and the human genome, right). SeqKit has been used with default parameters (no N50) which skips the calculation of extended statistics, and with the ââallâ parameter (labelled as <italic>Seqkit all</italic>). SeqFu is the faster tool in both datasets, with a remarkable difference when parsing a file with few large sequences (human genome).</p>
    </caption>
    <graphic xlink:href="bioengineering-08-00059-g004"/>
  </fig>
</floats-group>
