<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6744700</article-id>
    <article-id pub-id-type="publisher-id">3019</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-019-3019-7</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>HH-suite3 for fast remote homology detection and deep protein annotation</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Steinegger</surname>
          <given-names>Martin</given-names>
        </name>
        <address>
          <email>themartinsteinegger@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Meier</surname>
          <given-names>Markus</given-names>
        </name>
        <address>
          <email>mmeier@mpibpc.mpg.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Mirdita</surname>
          <given-names>Milot</given-names>
        </name>
        <address>
          <email>milot.mirdita@mpibpc.mpg.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Vöhringer</surname>
          <given-names>Harald</given-names>
        </name>
        <address>
          <email>harald@ebi.ac.uk</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Haunsberger</surname>
          <given-names>Stephan J.</given-names>
        </name>
        <address>
          <email>stefan.haunsberger@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-9642-8244</contrib-id>
        <name>
          <surname>Söding</surname>
          <given-names>Johannes</given-names>
        </name>
        <address>
          <email>soeding@mpibpc.mpg.de</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label>Quantitative and Computational Biology Group, Max-Planck Institute for Biophysical Chemistry, Am Fassberg 11, Munich, 81379 Germany </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2171 9311</institution-id><institution-id institution-id-type="GRID">grid.21107.35</institution-id><institution>Center for Computational Biology, McKusick-Nathans Institute of Genetic Medicine, Johns Hopkins School of Medicine, </institution></institution-wrap>Baltimore, MD, USA </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0000 9709 7726</institution-id><institution-id institution-id-type="GRID">grid.225360.0</institution-id><institution>European Bioinformatics Institute, </institution></institution-wrap>Cambridge, CB10 1SD United Kingdom </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 0488 7120</institution-id><institution-id institution-id-type="GRID">grid.4912.e</institution-id><institution>Royal College of Surgeons, </institution></institution-wrap>Dublin, D02 YN77 Ireland </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>14</day>
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>14</day>
      <month>9</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2019</year>
    </pub-date>
    <volume>20</volume>
    <elocation-id>473</elocation-id>
    <history>
      <date date-type="received">
        <day>19</day>
        <month>2</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>2</day>
        <month>8</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2019</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold> This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver(<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>HH-suite is a widely used open source software suite for sensitive sequence similarity searches and protein fold recognition. It is based on pairwise alignment of profile Hidden Markov models (HMMs), which represent multiple sequence alignments of homologous proteins.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We developed a single-instruction multiple-data (SIMD) vectorized implementation of the Viterbi algorithm for profile HMM alignment and introduced various other speed-ups. These accelerated the search methods HHsearch by a factor 4 and HHblits by a factor 2 over the previous version 2.0.16. HHblits3 is ∼10× faster than PSI-BLAST and ∼20× faster than HMMER3. Jobs to perform HHsearch and HHblits searches with many query profile HMMs can be parallelized over cores and over cluster servers using OpenMP and message passing interface (MPI). The free, open-source, GPLv3-licensed software is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/soedinglab/hh-suite">https://github.com/soedinglab/hh-suite</ext-link>.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>The added functionalities and increased speed of HHsearch and HHblits should facilitate their use in large-scale protein structure and function prediction, e.g. in metagenomics and genomics projects.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Homology detection</kwd>
      <kwd>Sequence search</kwd>
      <kwd>Protein alignment</kwd>
      <kwd>Algorithm</kwd>
      <kwd>Profile HMM</kwd>
      <kwd>SIMD</kwd>
      <kwd>Functional annotation</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100007601</institution-id>
            <institution>Horizon 2020</institution>
          </institution-wrap>
        </funding-source>
        <award-id>685778</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2019</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p>A sizeable fraction of proteins in genomics and metagenomics projects remain without annotation due to the lack of an identifiable, annotated homologous protein [<xref ref-type="bibr" rid="CR1">1</xref>]. A high sensitivity in sequence similarity searches increases the chance of finding a homologous protein with an annotated function or a known structure from which the function or structure of the query protein can be inferred [<xref ref-type="bibr" rid="CR2">2</xref>]. Therefore, to find template proteins for comparative protein structure modeling and for deep functional annotation, the most sensitive search tools such as HMMER [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR4">4</xref>] and HHblits [<xref ref-type="bibr" rid="CR5">5</xref>] are often used [<xref ref-type="bibr" rid="CR6">6</xref>–<xref ref-type="bibr" rid="CR9">9</xref>]. These tools can improve homology detection by aligning not only single sequences against other sequences, but using more information in form of multiple sequence alignments (MSAs) containing many homologous sequences. From the frequencies of amino acids in each column of the MSA, they calculate a 20×length matrix of position-specific amino acid substitution scores, termed “sequence profile”.</p>
    <p>A profile Hidden Markov Model (HMM) extends sequence profiles by augmenting the position-specific amino acid substitution scores with position-specific penalties for insertions and deletions. These can be estimated from the frequencies of insertions and deletions in the MSA. The added information improves the sensitivity of profile HMM-based methods like HHblits or HMMER3 over ones based on sequence profiles, such as PSI-BLAST [<xref ref-type="bibr" rid="CR10">10</xref>].</p>
    <p>Only few search tools represent both the query and the target proteins as sequence profiles built from MSAs of homologous proteins [<xref ref-type="bibr" rid="CR11">11</xref>–<xref ref-type="bibr" rid="CR14">14</xref>]. In contrast, HHblits / HHsearch represent both the query and the target proteins as profile HMMs. This makes them among the most sensitive tools for sequence similarity search and remote homology detection [<xref ref-type="bibr" rid="CR5">5</xref>, <xref ref-type="bibr" rid="CR15">15</xref>].</p>
    <p>In recent years, various sequence search tools have been developed that are up to four orders of magnitude faster than BLAST [<xref ref-type="bibr" rid="CR16">16</xref>–<xref ref-type="bibr" rid="CR19">19</xref>]. This speed-up addresses the need to search massive amounts of environmental next-generation sequencing data against the ever-growing databases of annotated sequences. However, no homology can be found for many of these sequences even with sensitive methods, such as BLAST or MMseqs2 [<xref ref-type="bibr" rid="CR19">19</xref>].</p>
    <p>Genomics and metagenomics projects could annotate more sequence by adding HHblits searches through the PDB, Pfam and other profile databases to their pipelines [<xref ref-type="bibr" rid="CR8">8</xref>]. Additional computation costs would be marginal, since the version of HHblits presented in this work runs 20 times faster than HMMER, the standard tool for Pfam [<xref ref-type="bibr" rid="CR20">20</xref>] and InterPro [<xref ref-type="bibr" rid="CR21">21</xref>] annotations.</p>
    <p>In this work, our goal was to accelerate and parallelize various HH-suite algorithms with a focus on the most time-critical tools, HHblits and HHsearch. We applied data level parallelization using Advanced Vector Extension 2 (AVX2) or Streaming SIMD Extension 2 (SSE2) instructions, thread level parallelization using OpenMP, and parallelization across computers using MPI. Most important was the ample use of parallelization through SIMD arithmetic units present in all modern Intel, AMD and IBM CPUs, with which we achieved speed-ups per CPU core of a factor 2 to 4.</p>
  </sec>
  <sec id="Sec2">
    <title>Methods</title>
    <sec id="Sec3">
      <title>Overview of HH-suite</title>
      <p>The software HH-suite contains the search tools HHsearch [<xref ref-type="bibr" rid="CR15">15</xref>] and HHblits [<xref ref-type="bibr" rid="CR5">5</xref>], and various utilities to build databases of MSAs or profile HMMs, to convert MSA formats, etc.</p>
      <p>HHsearch aligns a profile HMM against a database of target profile HMMs. The search first aligns the query HMM with each of the target HMMs using the Viterbi dynamic programming algorithm, which finds the alignment with the maximum score. The E-value for the target HMM is calculated from the Viterbi score [<xref ref-type="bibr" rid="CR5">5</xref>]. Target HMMs that reach sufficient significance to be reported are realigned using the Maximum Accuracy algorithm (MAC) [<xref ref-type="bibr" rid="CR22">22</xref>]. This algorithm maximizes the expected number of correctly aligned pairs of residues minus a penalty between 0 and 1 (parameter -mact). Values near 0 produce greedy, long, nearly global alignments, values above 0.3 result in shorter, local alignments.</p>
      <p>HHblits is an accelerated version of HHsearch that is fast enough to perform iterative searches through millions of profile HMMs, e.g. through the Uniclust profile HMM databases, generated by clustering the UniProt database into clusters of globally alignable sequences [<xref ref-type="bibr" rid="CR23">23</xref>]. Analogously to PSI-BLAST and HMMER3, such iterative searches can be used to build MSAs by starting from a single query sequence. Sequences from matches to profile HMMs below some E-value threshold (e.g. 10<sup>−3</sup>) are added to the query MSA for the next search iteration.</p>
      <p>HHblits has a two-stage prefilter that reduces the number of database HMMs to be aligned with the slow Viterbi HMM-HMM alignment and MAC algorithms. For maximum speed, the target HMMs are represented in the prefilter as discretized sequences over a 219-letter alphabet in which each letter represents one of 219 archetypical profile columns. The two prefilter stages thus perform a profile-to-sequence alignment, first ungapped then gapped, using dynamic programming. Each stage filters away 95 to 99% of target HMMs.</p>
    </sec>
    <sec id="Sec4">
      <title>Overview of changes from HH-suite version 2.0.16 to 3</title>
      <sec id="Sec5">
        <title>Vectorized viterbi HMM-HMM alignment</title>
        <p>Most of the speed-up was achieved by developing efficient SIMD code and removing branches in the pairwise Viterbi HMM alignment algorithm. The new implementation aligns 4 (using SSE2) or 8 (using AVX2) target HMMs in parallel to one query HMM.</p>
      </sec>
      <sec id="Sec6">
        <title>Fast MAC HMM-HMM alignment</title>
        <p>We accelerated the Forward-Backward algorithm that computes posterior probabilities for all residue pairs (<italic>i</italic>,<italic>j</italic>) to be aligned with each other. These probabilities are needed by the MAC alignment algorithm. We improved the speed of the Forward-Backward and MAC algorithms by removing branches at the innermost loops and optimizing the order of indices, which reduced the frequency of cache misses.</p>
      </sec>
      <sec id="Sec7">
        <title>Memory reduction</title>
        <p>We reduced the memory required during Viterbi HMM-HMM alignment by a factor of 1.5 for SSE2 and implemented AVX2 with only a 1.3 times increase, despite the need to keep scores for 4 (SSE2) or 8 (AVX2) target profile HMMs in memory instead of just one. This was done by keeping only the current row of the 5 scoring matrices in memory during the dynamic programming (“<xref rid="Sec20" ref-type="sec">Memory reduction for backtracing and cell-off matrices</xref>” section), and by storing the 5 backtrace matrices, which previously required one byte per matrix cell, in a single backtrace matrix with one byte per cell (“<xref rid="Sec19" ref-type="sec">From quadratic to linear memory for scoring matrices</xref>” section). We also reduced the memory consumption of the Forward-Backward and MAC alignment algorithms by a factor of two, by moving from storing posterior probabilities with type double to storing their logarithms using type float. In total, we reduced the required memory by roughly a factor 1.75 (when using SSE2) or 1.16 (when using AVX2).</p>
      </sec>
      <sec id="Sec8">
        <title>Accelerating sequence filtering and profile computation</title>
        <p>For maximum sensitivity, HHblits and HHsearch need to reduce the redundancy within the input MSA by removing sequences that have a sequence identity to another sequence in the MSA larger than a specified cutoff (90% by default) [<xref ref-type="bibr" rid="CR15">15</xref>]. The redundancy filtering takes time <italic>O</italic>(<italic>N</italic><italic>L</italic><sup>2</sup>), where <italic>N</italic> is the number of MSA sequences and <italic>L</italic> the number of columns. It can be a runtime bottleneck for large MSAs, for example during iterative searches with HHblits. A more detailed explanation is given in “<xref rid="Sec22" ref-type="sec">SIMD-based MSA redundancy filter</xref>” section.</p>
        <p>Additionally, the calculation of the amino acid probabilities in the profile HMM columns from an MSA can become time-limiting. Its run time scales as <italic>O</italic>(<italic>N</italic><italic>L</italic><sup>2</sup>) because for each column it takes a time ∼<italic>O</italic>(<italic>N</italic><italic>L</italic>) to compute column-specific sequence weights based on the subalignment containing only the sequences that have no gap in that column.</p>
        <p>We redesigned these two algorithms to use SIMD instructions and optimized memory access through reordering of nested loops and array indices.</p>
      </sec>
      <sec id="Sec9">
        <title>Secondary structure scoring</title>
        <p>Search sensitivity could be slightly improved for remote homologs by modifying the weighting of the secondary structure alignment score with respect to profile column similarity score. In HH-suite3, the secondary structure score can contribute more than 20% of the total score. This increased the sensitivity to detect remote homologs slightly without negative impact on the high-precision.</p>
      </sec>
      <sec id="Sec10">
        <title>New features, code refactoring, and bug fixes</title>
        <p>HH-suite3 allows users to search a large number of query sequences by parallelizing HHblits/HHsearch searches over queries using OpenMP and MPI (hhblits_omp, hhblits_mpi, hhsearch_omp, hhsearch_mpi). We removed the limit on the maximum number of sequences in the MSAs (parameter -maxseqs &lt; max&gt;). We ported scripts in HH-suite from Perl to Python and added support for the new PDB format mmCIF, which we use to provide precomputed profile HMM and MSA databases for the protein data bank (PDB) [<xref ref-type="bibr" rid="CR24">24</xref>], Pfam [<xref ref-type="bibr" rid="CR20">20</xref>], SCOP [<xref ref-type="bibr" rid="CR25">25</xref>], and clustered UniProt databases (Uniclust) [<xref ref-type="bibr" rid="CR23">23</xref>].</p>
        <p>We adopted a new format for HHblits databases in which the column state sequences used for prefiltering (former *.cs219 files) are stored in the FFindex format. The FFindex format was already used in version 2.0.16 for the a3m MSA files and the hhm profile HMM files. This resulted in a ∼4 s saving for reading the prefilter database and improved scaling of HHblits with the number of cores. We also integrated our discriminative, sequence context-sensitive method to calculate pseudocounts for the profile HMMs, which slightly improves sensitivities for fold-level homologies [<xref ref-type="bibr" rid="CR26">26</xref>].</p>
        <p>To keep HH-suite sustainable and expandable in the longer term, we extensively refactored code by improving code reuse with the help of new classes with inheritance, replacing POSIX threads (pthreads) with OpenMP parallelization, removing global variables, moving from make to cmake, and moving the HH-suite project to GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/soedinglab/hh-suite">https://github.com/soedinglab/hh-suite</ext-link>). We fixed various bugs such as memory leaks and segmentation faults occurring with newer compilers.</p>
      </sec>
    </sec>
    <sec id="Sec11">
      <title>Supported platforms and hardware</title>
      <p>HHblits is developed under Linux, tested under Linux and macOS, and should run under any Unix-like operating systems. Intel and AMD CPUs that offer AVX2 or at least SSE2 instruction sets are supported (Intel CPUs: since 2006, AMD: since 2011). PowerPC CPUs with AltiVec vector extensions are also supported.</p>
      <p>Because we were unable to obtain funding for continued support of HH-suite, user support is unfortunately limited to bug fixes for the time being.</p>
    </sec>
    <sec id="Sec12">
      <title>Parallelization by vectorization using SIMD instructions</title>
      <p>All modern CPUs possess SIMD units, usually one per core, for performing arithmetic, logical and other operations on several data elements in parallel. In SSE2, four floating point operations are processed in a single clock cycle in dedicated 128-bit wide registers. Since 2012, the AVX standard allows to process eight floating point operations per clock cycle in parallel, held in 256 bit AVX registers. With the AVX2 extension came support for byte-, word- and integer-level operations, e.g. 32 single-byte numbers can be added or multiplied in parallel (32×1 byte=256 bits). Intel has supported AVX2 since 2013, AMD since 2015.</p>
      <p>HHblits 2.0.16 already used SSE2 in its prefilter for gapless and gapped profile-to-sequence alignment processing 16 dynamic programming cells in parallel, but it did not support HMM-HMM alignment using vectorized code.</p>
      <sec id="Sec13">
        <title>Abstraction layer for SIMD-based vector programming</title>
        <p>Intrinsic functions allow to write SIMD parallelized algorithms without using assembly instructions. However, they are tied to one specific variant of SIMD instruction set (such as AVX2), which makes them neither downwards compatible nor future-proof. To be able to compile our algorithms with different SIMD instruction set variants, we implemented an abstraction layer, simd.h. In this layer, the intrinsic functions are wrapped by preprocessor macros. Porting our code to a new SIMD standard therefore merely requires us to extend the abstraction layer to that new standard, whereas the algorithm remains unchanged.</p>
        <p>The simd.h header supports SSE2, AVX2 and AVX-512 instruction sets. David Miller has graciously extended the simd.h abstraction layer to support the AltiVec vector extension of PowerPC CPUs. Algorithm 1 shows a function that computes the scalar product of two vectors.</p>
        <p>
          <graphic position="anchor" xlink:href="12859_2019_3019_Figa_HTML" id="MO1"/>
        </p>
      </sec>
    </sec>
    <sec id="Sec14">
      <title>Vectorized viterbi HMM-HMM alignments</title>
      <sec id="Sec15">
        <title>The viterbi algorithm for aligning profile hMMs</title>
        <p>The Viterbi algorithm, when applied to profile HMMs, is formally equivalent to global sequence alignment with position-specific gap penalties [<xref ref-type="bibr" rid="CR27">27</xref>]. We had previously introduced a modification of the Viterbi algorithm that is formally equivalent to Smith-Waterman local sequence alignment [<xref ref-type="bibr" rid="CR15">15</xref>]. In HH-suite we use it to compute the best-scoring local alignment between two profile HMMs.</p>
        <p>HH-suite models MSA columns with &lt;50<italic>%</italic> gaps (default value) by match states and all other columns as insertion states. By traversing through the states of a profile HMM, the HMM can “emit” sequences. A match state (M) emits amino acids according to the 20 probabilities of amino acids estimated from their fraction in the MSA column, plus some pseudocounts. Insert states (I) emit amino acids according to a standard amino acid background distribution, while delete states (D) do not emit any amino acids.</p>
        <p>The alignment score between two HMMs in HH-suite is the sum over all co-emitted sequences of the log odds scores for the probability for the two aligned HMMs to co-emit this sequence divided by the probability of the sequence under the background model. Since M and I states emit amino acids and D states do not, M and I in one HMM can only be aligned with M or I states in the other HMM. Conversely, a D state can only be aligned with a D state or with a Gap G (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). The co-emission score can be written as the sum of the similarity scores of the aligned profile columns, in other words the match-match (MM) pair states, minus the position-specific penalties for indels: delete-open, delete-extend, insert-open and insert-extend.
<fig id="Fig1"><label>Fig. 1</label><caption><p>HMM-HMM alignment of query and target. The alignment is represented as red path through both HMMs. The corresponding pair state sequence is MM, MM, MI, MM, MM, DG, MM</p></caption><graphic xlink:href="12859_2019_3019_Fig1_HTML" id="MO2"/></fig>
</p>
        <p>
          <graphic position="anchor" xlink:href="12859_2019_3019_Figb_HTML" id="MO3"/>
        </p>
        <p>We denote the alignment pair states as MM, MI, IM, II, DD, DG, and GD. Figure <xref rid="Fig1" ref-type="fig">1</xref> shows an example of two aligned profile HMMs. In the third column HMM <italic>q</italic> emits a residue from its M state and HMM <italic>p</italic> emits a residue from the I state. The pair state for this alignment column is MI. In column six of the alignment HMM <italic>q</italic> does not emit anything since it passes through the D state. HMM <italic>p</italic> does not emit anything either since it has a gap in the alignment. The corresponding pair state is DG. To speed up the alignment, we exclude pair states II and DD, and we only allow transitions between a pair state and itself and between pair state MM and pair states MI, IM, DG, or GD.</p>
        <p>
          <graphic position="anchor" xlink:href="12859_2019_3019_Figc_HTML" id="MO4"/>
        </p>
        <p>To calculate the local alignment score, we need five dynamic programming matrices <italic>S</italic><sub>XY</sub>, one for each pair state XY ∈{MM, MI, IM, DG, GD }. They contain the score of the best partial alignment which ends in column <italic>i</italic> of <italic>q</italic> and column <italic>j</italic> of <italic>p</italic> in pair state XY. These five matrices are calculated recursively. 
<disp-formula id="Equ1"><label>1</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\begin{array}{*{20}l}  &amp;S_{\text{MM}}\left(i,j\right) = S_{\text{aa}}\left(q^{p}_{i},t^{p}_{j}\right)\ + S_{\text{ss}}\left(q^{ss}_{i},t^{ss}_{j}\right)\ + \\ &amp;\max \left\{ \!\! \begin{array}{c} \begin{aligned} &amp;0 \text{ (for {local} alignment)} \\ &amp;S_{\text{MM}}(i\,-\,1,j\,-\,1) + \log \left(q_{i\,-\,1}(\text{M,M}) \: t_{j\,-\,1}(\text{M,M}\right)) \\ &amp;S_{\text{MI}}(i\,-\,1,j\,-\,1) \;\,+ \log \left(q_{i\,-\,1}(\text{M,M}) \: t_{j\,-\,1}(\text{I,M}) \right) \\ &amp;S_{\text{II}}(i\,-\,1,j\,-\,1) \;\;\: + \log \left(q_{i\,-\,1}(\text{I,M}) \: t_{j\,-\,1}(\text{M,M}) \right) \\ &amp;S_{\text{DG}}(i\,-\,1,j\,-\,1) \: + \log \left(q_{i\,-\,1}(\text{D,M}) \: t_{j\,-\,1}(\text{M,M}) \right) \\ &amp;S_{\text{GD}}(i\,-\,1,j\,-\,1) \: + \log \left(q_{i\,-\,1}\left(\text{M,M}\right) \: t_{j\,-\,1}(\text{D,M}) \right) \end{aligned} \end{array} \right.  \end{array} $$ \end{document}</tex-math><mml:math id="M2"><mml:mtable class="align" columnalign="left"><mml:mtr><mml:mtd class="align-1"/><mml:mtd class="align-2"><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mtext>MM</mml:mtext></mml:mrow></mml:msub><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:mfenced><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mtext>aa</mml:mtext></mml:mrow></mml:msub><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msubsup><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:msubsup></mml:mrow></mml:mfenced><mml:mspace width="1em"/><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mtext>ss</mml:mtext></mml:mrow></mml:msub><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msubsup><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">ss</mml:mtext></mml:mrow></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mtext mathvariant="italic">ss</mml:mtext></mml:mrow></mml:msubsup></mml:mrow></mml:mfenced><mml:mspace width="1em"/><mml:mo>+</mml:mo><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"/><mml:mtd class="align-2"><mml:mo>max</mml:mo><mml:mfenced close="" open="{" separators=""><mml:mrow><mml:mspace width="0.3em"/><mml:mspace width="0.3em"/><mml:mtable><mml:mtr><mml:mtd><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn><mml:mtext>(for local alignment)</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mtext>MM</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mo>+</mml:mo><mml:mo>log</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>M,M</mml:mtext><mml:mo>)</mml:mo><mml:mspace width="2.22144pt"/><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>M,M</mml:mtext></mml:mrow></mml:mfenced><mml:mo>)</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mtext>MI</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mspace width="2.77626pt"/><mml:mspace width="0.3em"/><mml:mo>+</mml:mo><mml:mo>log</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>M,M</mml:mtext><mml:mo>)</mml:mo><mml:mspace width="2.22144pt"/><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>I,M</mml:mtext><mml:mo>)</mml:mo></mml:mrow></mml:mfenced></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mtext>II</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mspace width="2.77626pt"/><mml:mspace width="2.77626pt"/><mml:mspace width="2.22144pt"/><mml:mo>+</mml:mo><mml:mo>log</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>I,M</mml:mtext><mml:mo>)</mml:mo><mml:mspace width="2.22144pt"/><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>M,M</mml:mtext><mml:mo>)</mml:mo></mml:mrow></mml:mfenced></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mtext>DG</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mspace width="2.22144pt"/><mml:mo>+</mml:mo><mml:mo>log</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>D,M</mml:mtext><mml:mo>)</mml:mo><mml:mspace width="2.22144pt"/><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>M,M</mml:mtext><mml:mo>)</mml:mo></mml:mrow></mml:mfenced></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mtext>GD</mml:mtext></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mspace width="2.22144pt"/><mml:mo>+</mml:mo><mml:mo>log</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:msub><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mtext>M,M</mml:mtext></mml:mrow></mml:mfenced><mml:mspace width="2.22144pt"/><mml:msub><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi><mml:mspace width="0.3em"/><mml:mo>−</mml:mo><mml:mspace width="0.3em"/><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>(</mml:mo><mml:mtext>D,M</mml:mtext><mml:mo>)</mml:mo></mml:mrow></mml:mfenced></mml:mtd></mml:mtr></mml:mtable></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2019_3019_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula></p>
        <p>
          <disp-formula id="Equ2">
            <label>2</label>
            <alternatives>
              <tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$ {}{\begin{aligned} &amp;S_{\text{MI}}\left(i,j\right) = \max \left\{ \!\! \begin{array}{c} S_{\text{MM}}(i\,-\,1,j) + \log \left(q_{i\,-\,1}(\text{M,M}) \: t_{j}(\text{D,D}) \right) \\ S_{\text{MI}}(i\,-\,1,j) + \log \left(q_{i\,-\,1}(\text{M,M}) \: t_{j}(\text{I,I}) \right) \end{array} \right. \end{aligned}}  $$ \end{document}</tex-math>
              <mml:math id="M4">
                <mml:mtable>
                  <mml:mtr>
                    <mml:mtd>
                      <mml:msub>
                        <mml:mrow>
                          <mml:mi>S</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mtext>MI</mml:mtext>
                        </mml:mrow>
                      </mml:msub>
                      <mml:mfenced close=")" open="(" separators="">
                        <mml:mrow>
                          <mml:mi>i</mml:mi>
                          <mml:mo>,</mml:mo>
                          <mml:mi>j</mml:mi>
                        </mml:mrow>
                      </mml:mfenced>
                      <mml:mo>=</mml:mo>
                      <mml:mo>max</mml:mo>
                      <mml:mfenced close="" open="{" separators="">
                        <mml:mrow>
                          <mml:mspace width="0.3em"/>
                          <mml:mspace width="0.3em"/>
                          <mml:mtable>
                            <mml:mtr>
                              <mml:mtd>
                                <mml:msub>
                                  <mml:mrow>
                                    <mml:mi>S</mml:mi>
                                  </mml:mrow>
                                  <mml:mrow>
                                    <mml:mtext>MM</mml:mtext>
                                  </mml:mrow>
                                </mml:msub>
                                <mml:mo>(</mml:mo>
                                <mml:mi>i</mml:mi>
                                <mml:mspace width="0.3em"/>
                                <mml:mo>−</mml:mo>
                                <mml:mspace width="0.3em"/>
                                <mml:mn>1</mml:mn>
                                <mml:mo>,</mml:mo>
                                <mml:mi>j</mml:mi>
                                <mml:mo>)</mml:mo>
                                <mml:mo>+</mml:mo>
                                <mml:mo>log</mml:mo>
                                <mml:mfenced close=")" open="(" separators="">
                                  <mml:mrow>
                                    <mml:msub>
                                      <mml:mrow>
                                        <mml:mi>q</mml:mi>
                                      </mml:mrow>
                                      <mml:mrow>
                                        <mml:mi>i</mml:mi>
                                        <mml:mspace width="0.3em"/>
                                        <mml:mo>−</mml:mo>
                                        <mml:mspace width="0.3em"/>
                                        <mml:mn>1</mml:mn>
                                      </mml:mrow>
                                    </mml:msub>
                                    <mml:mo>(</mml:mo>
                                    <mml:mtext>M,M</mml:mtext>
                                    <mml:mo>)</mml:mo>
                                    <mml:mspace width="2.22144pt"/>
                                    <mml:msub>
                                      <mml:mrow>
                                        <mml:mi>t</mml:mi>
                                      </mml:mrow>
                                      <mml:mrow>
                                        <mml:mi>j</mml:mi>
                                      </mml:mrow>
                                    </mml:msub>
                                    <mml:mo>(</mml:mo>
                                    <mml:mtext>D,D</mml:mtext>
                                    <mml:mo>)</mml:mo>
                                  </mml:mrow>
                                </mml:mfenced>
                              </mml:mtd>
                            </mml:mtr>
                            <mml:mtr>
                              <mml:mtd>
                                <mml:msub>
                                  <mml:mrow>
                                    <mml:mi>S</mml:mi>
                                  </mml:mrow>
                                  <mml:mrow>
                                    <mml:mtext>MI</mml:mtext>
                                  </mml:mrow>
                                </mml:msub>
                                <mml:mo>(</mml:mo>
                                <mml:mi>i</mml:mi>
                                <mml:mspace width="0.3em"/>
                                <mml:mo>−</mml:mo>
                                <mml:mspace width="0.3em"/>
                                <mml:mn>1</mml:mn>
                                <mml:mo>,</mml:mo>
                                <mml:mi>j</mml:mi>
                                <mml:mo>)</mml:mo>
                                <mml:mo>+</mml:mo>
                                <mml:mo>log</mml:mo>
                                <mml:mfenced close=")" open="(" separators="">
                                  <mml:mrow>
                                    <mml:msub>
                                      <mml:mrow>
                                        <mml:mi>q</mml:mi>
                                      </mml:mrow>
                                      <mml:mrow>
                                        <mml:mi>i</mml:mi>
                                        <mml:mspace width="0.3em"/>
                                        <mml:mo>−</mml:mo>
                                        <mml:mspace width="0.3em"/>
                                        <mml:mn>1</mml:mn>
                                      </mml:mrow>
                                    </mml:msub>
                                    <mml:mo>(</mml:mo>
                                    <mml:mtext>M,M</mml:mtext>
                                    <mml:mo>)</mml:mo>
                                    <mml:mspace width="2.22144pt"/>
                                    <mml:msub>
                                      <mml:mrow>
                                        <mml:mi>t</mml:mi>
                                      </mml:mrow>
                                      <mml:mrow>
                                        <mml:mi>j</mml:mi>
                                      </mml:mrow>
                                    </mml:msub>
                                    <mml:mo>(</mml:mo>
                                    <mml:mtext>I,I</mml:mtext>
                                    <mml:mo>)</mml:mo>
                                  </mml:mrow>
                                </mml:mfenced>
                              </mml:mtd>
                            </mml:mtr>
                          </mml:mtable>
                        </mml:mrow>
                      </mml:mfenced>
                    </mml:mtd>
                  </mml:mtr>
                </mml:mtable>
              </mml:math>
              <graphic xlink:href="12859_2019_3019_Article_Equ2.gif" position="anchor"/>
            </alternatives>
          </disp-formula>
        </p>
        <p>
          <disp-formula id="Equ3">
            <label>3</label>
            <alternatives>
              <tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\begin{array}{*{20}l}  &amp;S_{\text{DG}}\left(i,j\right) = \max \left\{ \!\! \begin{array}{c} S_{\text{MM}}(i\,-\,1,j) + \log \left(q_{i\,-\,1}(\text{D,M}) \right) \\ S_{\text{DG}}(i\,-\,1,j) + \log \left(q_{i\,-\,1}(\text{D,D}) \right) \end{array} \right. \!\!\! \end{array} $$ \end{document}</tex-math>
              <mml:math id="M6">
                <mml:mtable class="align" columnalign="left">
                  <mml:mtr>
                    <mml:mtd class="align-1"/>
                    <mml:mtd class="align-2">
                      <mml:msub>
                        <mml:mrow>
                          <mml:mi>S</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mtext>DG</mml:mtext>
                        </mml:mrow>
                      </mml:msub>
                      <mml:mfenced close=")" open="(" separators="">
                        <mml:mrow>
                          <mml:mi>i</mml:mi>
                          <mml:mo>,</mml:mo>
                          <mml:mi>j</mml:mi>
                        </mml:mrow>
                      </mml:mfenced>
                      <mml:mo>=</mml:mo>
                      <mml:mo>max</mml:mo>
                      <mml:mfenced close="" open="{" separators="">
                        <mml:mrow>
                          <mml:mspace width="0.3em"/>
                          <mml:mspace width="0.3em"/>
                          <mml:mtable>
                            <mml:mtr>
                              <mml:mtd>
                                <mml:msub>
                                  <mml:mrow>
                                    <mml:mi>S</mml:mi>
                                  </mml:mrow>
                                  <mml:mrow>
                                    <mml:mtext>MM</mml:mtext>
                                  </mml:mrow>
                                </mml:msub>
                                <mml:mo>(</mml:mo>
                                <mml:mi>i</mml:mi>
                                <mml:mspace width="0.3em"/>
                                <mml:mo>−</mml:mo>
                                <mml:mspace width="0.3em"/>
                                <mml:mn>1</mml:mn>
                                <mml:mo>,</mml:mo>
                                <mml:mi>j</mml:mi>
                                <mml:mo>)</mml:mo>
                                <mml:mo>+</mml:mo>
                                <mml:mo>log</mml:mo>
                                <mml:mfenced close=")" open="(" separators="">
                                  <mml:mrow>
                                    <mml:msub>
                                      <mml:mrow>
                                        <mml:mi>q</mml:mi>
                                      </mml:mrow>
                                      <mml:mrow>
                                        <mml:mi>i</mml:mi>
                                        <mml:mspace width="0.3em"/>
                                        <mml:mo>−</mml:mo>
                                        <mml:mspace width="0.3em"/>
                                        <mml:mn>1</mml:mn>
                                      </mml:mrow>
                                    </mml:msub>
                                    <mml:mo>(</mml:mo>
                                    <mml:mtext>D,M</mml:mtext>
                                    <mml:mo>)</mml:mo>
                                  </mml:mrow>
                                </mml:mfenced>
                              </mml:mtd>
                            </mml:mtr>
                            <mml:mtr>
                              <mml:mtd>
                                <mml:msub>
                                  <mml:mrow>
                                    <mml:mi>S</mml:mi>
                                  </mml:mrow>
                                  <mml:mrow>
                                    <mml:mtext>DG</mml:mtext>
                                  </mml:mrow>
                                </mml:msub>
                                <mml:mo>(</mml:mo>
                                <mml:mi>i</mml:mi>
                                <mml:mspace width="0.3em"/>
                                <mml:mo>−</mml:mo>
                                <mml:mspace width="0.3em"/>
                                <mml:mn>1</mml:mn>
                                <mml:mo>,</mml:mo>
                                <mml:mi>j</mml:mi>
                                <mml:mo>)</mml:mo>
                                <mml:mo>+</mml:mo>
                                <mml:mo>log</mml:mo>
                                <mml:mfenced close=")" open="(" separators="">
                                  <mml:mrow>
                                    <mml:msub>
                                      <mml:mrow>
                                        <mml:mi>q</mml:mi>
                                      </mml:mrow>
                                      <mml:mrow>
                                        <mml:mi>i</mml:mi>
                                        <mml:mspace width="0.3em"/>
                                        <mml:mo>−</mml:mo>
                                        <mml:mspace width="0.3em"/>
                                        <mml:mn>1</mml:mn>
                                      </mml:mrow>
                                    </mml:msub>
                                    <mml:mo>(</mml:mo>
                                    <mml:mtext>D,D</mml:mtext>
                                    <mml:mo>)</mml:mo>
                                  </mml:mrow>
                                </mml:mfenced>
                              </mml:mtd>
                            </mml:mtr>
                          </mml:mtable>
                        </mml:mrow>
                      </mml:mfenced>
                      <mml:mspace width="0.3em"/>
                      <mml:mspace width="0.3em"/>
                      <mml:mspace width="0.3em"/>
                      <mml:mspace width="2em"/>
                    </mml:mtd>
                  </mml:mtr>
                </mml:mtable>
              </mml:math>
              <graphic xlink:href="12859_2019_3019_Article_Equ3.gif" position="anchor"/>
            </alternatives>
          </disp-formula>
        </p>
        <p>
          <disp-formula id="Equ4">
            <label>4</label>
            <alternatives>
              <tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document} $$\begin{array}{*{20}l}  &amp;S_{aa}\left(q^{p}_{i}, t^{p}_{j}\right) = \log \sum_{a=1}^{20} \frac{q^{p}_{i}(a)\,t^{p}_{j}(a)}{f_{a}} \end{array} $$ \end{document}</tex-math>
              <mml:math id="M8">
                <mml:mtable class="align" columnalign="left">
                  <mml:mtr>
                    <mml:mtd class="align-1"/>
                    <mml:mtd class="align-2">
                      <mml:msub>
                        <mml:mrow>
                          <mml:mi>S</mml:mi>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mtext mathvariant="italic">aa</mml:mtext>
                        </mml:mrow>
                      </mml:msub>
                      <mml:mfenced close=")" open="(" separators="">
                        <mml:mrow>
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>q</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>i</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>p</mml:mi>
                            </mml:mrow>
                          </mml:msubsup>
                          <mml:mo>,</mml:mo>
                          <mml:msubsup>
                            <mml:mrow>
                              <mml:mi>t</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>j</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>p</mml:mi>
                            </mml:mrow>
                          </mml:msubsup>
                        </mml:mrow>
                      </mml:mfenced>
                      <mml:mo>=</mml:mo>
                      <mml:mo>log</mml:mo>
                      <mml:munderover accent="false" accentunder="false">
                        <mml:mrow>
                          <mml:mo mathsize="big">∑</mml:mo>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mi>a</mml:mi>
                          <mml:mo>=</mml:mo>
                          <mml:mn>1</mml:mn>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:mn>20</mml:mn>
                        </mml:mrow>
                      </mml:munderover>
                      <mml:mfrac>
                        <mml:mrow>
                          <mml:munderover>
                            <mml:mrow>
                              <mml:mi>q</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>i</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>p</mml:mi>
                            </mml:mrow>
                          </mml:munderover>
                          <mml:mo>(</mml:mo>
                          <mml:mi>a</mml:mi>
                          <mml:mo>)</mml:mo>
                          <mml:mspace width="0.3em"/>
                          <mml:munderover>
                            <mml:mrow>
                              <mml:mi>t</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>j</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>p</mml:mi>
                            </mml:mrow>
                          </mml:munderover>
                          <mml:mo>(</mml:mo>
                          <mml:mi>a</mml:mi>
                          <mml:mo>)</mml:mo>
                        </mml:mrow>
                        <mml:mrow>
                          <mml:msub>
                            <mml:mrow>
                              <mml:mi>f</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                              <mml:mi>a</mml:mi>
                            </mml:mrow>
                          </mml:msub>
                        </mml:mrow>
                      </mml:mfrac>
                      <mml:mspace width="2em"/>
                    </mml:mtd>
                  </mml:mtr>
                </mml:mtable>
              </mml:math>
              <graphic xlink:href="12859_2019_3019_Article_Equ4.gif" position="anchor"/>
            </alternatives>
          </disp-formula>
        </p>
        <p>Vector <inline-formula id="IEq1"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$q^{p}_{i}$\end{document}</tex-math><mml:math id="M10"><mml:msubsup><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2019_3019_Article_IEq1.gif"/></alternatives></inline-formula> contains the 20 amino acid probabilities of <italic>q</italic> at position <italic>i</italic>, <inline-formula id="IEq2"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$t^{p}_{j}$\end{document}</tex-math><mml:math id="M12"><mml:msubsup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:msubsup></mml:math><inline-graphic xlink:href="12859_2019_3019_Article_IEq2.gif"/></alternatives></inline-formula> are the amino acid probabilities <italic>t</italic> at <italic>j</italic>, and <italic>f</italic><sub><italic>a</italic></sub> denotes the background frequency of amino acid <italic>a</italic>. The score <italic>S</italic><sub><italic>aa</italic></sub> measures the similarity of amino acid distributions in the two columns <italic>i</italic> and <italic>j</italic>. <italic>S</italic><sub><italic>ss</italic></sub> can optionally be added to <italic>S</italic><sub><italic>aa</italic></sub>. It measures the similarity of the secondary structure states of query and target HMM at <italic>i</italic> and <italic>j</italic> [<xref ref-type="bibr" rid="CR15">15</xref>].</p>
      </sec>
      <sec id="Sec16">
        <title>Vectorizations of smith-Waterman sequence alignment</title>
        <p>Much effort has gone into accelerating the dynamic programming based Smith-Waterman algorithm (at an unchanged time complexity of <italic>O</italic>(<italic>L</italic><sub><italic>q</italic></sub><italic>L</italic><sub><italic>t</italic></sub>)). While substantial accelerations using general purpose graphics processing units (GPGPUs) and field programmable gated arrays (FPGAs) were demonstrated [<xref ref-type="bibr" rid="CR28">28</xref>–<xref ref-type="bibr" rid="CR31">31</xref>], the need for a powerful GPGPU and the lack of of a single standard (e.g. Nvidia’s proprietary CUDA versus the OpenCL standard) have been impediments. SIMD implementations using the SSE2 and AVX2 standards with on-CPU SIMD vector units have demonstrated similar speed-ups as GPGPU implementations and have become widely used [<xref ref-type="bibr" rid="CR3">3</xref>, <xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR32">32</xref>–<xref ref-type="bibr" rid="CR35">35</xref>].</p>
        <p>To speed up the dynamic programming (DP) using SIMD, multiple cells in the DP matrix are processed jointly. However the value in cell (<italic>i</italic>,<italic>j</italic>) depends on those in the preceding cells (<italic>i</italic>−1,<italic>j</italic>−1), (<italic>i</italic>−1,<italic>j</italic>), and (<italic>i</italic>,<italic>j</italic>−1). This data dependency makes acceleration of the algorithm challenging.</p>
        <p>Four main approaches have been developed to address this challenge: (1) parallelizing over anti-diagonal stretches of cells in the DP matrices ((<italic>i</italic>,<italic>j</italic>),(<italic>i</italic>+1,<italic>j</italic>−1),…(<italic>i</italic>+15,<italic>j</italic>−15), assuming 16 cells fit into one SIMD register) [<xref ref-type="bibr" rid="CR32">32</xref>], (2) parallelizing over vertical or horizontal segments of the DP matrices (e.g. (<italic>i</italic>,<italic>j</italic>),(<italic>i</italic> + 1,<italic>j</italic>),…(<italic>i</italic> + 15,<italic>j</italic>)) [<xref ref-type="bibr" rid="CR33">33</xref>], (3) parallelizing over stripes of the DP matrices ((<italic>i</italic>,<italic>j</italic>),(<italic>i</italic>+1×<italic>D</italic>,<italic>j</italic>),…(<italic>i</italic>+15×<italic>D</italic>,<italic>j</italic>) where <italic>D</italic>:=ceil(query_length/16)) [<xref ref-type="bibr" rid="CR34">34</xref>] and (4) where 16 cells (<italic>i</italic>,<italic>j</italic>) of 16 target sequences are processed in parallel [<xref ref-type="bibr" rid="CR35">35</xref>].</p>
        <p>The last option is the fastest method for sequence-sequence alignments, because it avoids data dependencies. Here we present an implementation of this option that can align one query profile HMM to 4 (SSE2) or 8 (AVX2) target profile HMMs in parallel.</p>
      </sec>
      <sec id="Sec17">
        <title>Vectorized viterbi algorithm for aligning profile HMMs</title>
        <p>Algorithm 2 shows the scalar version of the Viterbi algorithm for pairwise profile HMM alignment based on the iterative update Eqs. (<xref rid="Equ1" ref-type="">1</xref>)–(<xref rid="Equ3" ref-type="">3</xref>). Algorithm 3 presents our vectorized and branch-less version (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). It aligns batches of 4 or 8 target HMMs together, depending on how many scores of type float fit into one SIMD register (4 for SSE2, 8 for AVX).
<fig id="Fig2"><label>Fig. 2</label><caption><p>SIMD parallelization over target profile HMMs. Batches of 4 or 8 database profile HMMs are aligned together by the vectorized Viterbi algorithm. Each cell (<italic>i</italic>,<italic>j</italic>) in the dynamic programming matrix is processed in parallel for 4 or 8 target HMMs</p></caption><graphic xlink:href="12859_2019_3019_Fig2_HTML" id="MO5"/></fig>
</p>
        <p>The vectorized algorithm needs to access the state transition and amino acid emission probabilities for these 4 or 8 targets at the same time. The memory is laid out (Fig. <xref rid="Fig3" ref-type="fig">3</xref>), such that the emission and transition probabilities of 4 or 8 targets are stored consecutively in memory. In this way, one set of 4 or 8 transition probabilities (for example MM) of the 4 or 8 target HMMs being aligned can be loaded jointly into one SIMD register.
<fig id="Fig3"><label>Fig. 3</label><caption><p>The layout of the log transition probabilities (top) and emission probabilities (bottom) in memory for single-instruction single data (SISD) and SIMD algorithms. For the SIMD algorithm, 4 (using SSE2) or 8 (using AVX 2) target profile HMMs (t1 – t4) are stored together in interleaved fashion: the 4 or 8 transition or emission values at position <italic>i</italic> in these HMMs are stored consecutively (indicated by the same color). In this way, a single cache line read of 64 bytes can fill four SSE2 or two AVX2 SIMD registers with 4 or 8 values each</p></caption><graphic xlink:href="12859_2019_3019_Fig3_HTML" id="MO6"/></fig>
</p>
        <p>The scalar versions of the functions MAX6, MAX2 contain branches. Branched code can considerably slow down code execution due to the high cost of branch mispredictions, when the partially executed instruction pipeline has to be discarded to resume execution of the correct branch.</p>
        <p>The functions MAX6 and MAX2 find the maximum score out of two or six input scores and also return the pair transition state that contributed the highest score. This state is stored in the backtrace matrix, which is needed to reconstruct the best-scoring alignment once all five DP matrices have been computed.</p>
        <p>
          <graphic position="anchor" xlink:href="12859_2019_3019_Figd_HTML" id="MO7"/>
        </p>
        <p>To remove the five if-statement branches in MAX6, we implemented a macro VMAX6 that implements one if-statement at a time. VMAX6 needs to be called 5 times, instead of just once as MAX6, and each call compares the current best score with the next of the 6 scores and updates the state of the best score so far by maximization. At each VMAX6 call, the current best state is overwritten by the new state if it has a better score.</p>
        <p>We call the function VMAX2 four times to update the four states GD, IM, DG and MI. The first line in VMAX2 compares the 4 or 8 values in SIMD register sMM with the corresponding values in register sXY and sets all bits of the four values in SIMD register res_gt_vec to 1 if the value in sMM is greater than the one in sXY and to 0 otherwise. The second line computes a bit-wise AND between the four values in res_gt_vec (either 0x00000000 or 0xFFFFFFFF) and the value for state MM. For those of the 4 or 8 sMM values that were greater than the corresponding sXY value, we obtain state MM in index_vec, for the others we get zero, which represents staying in the same state. The backtrace vector can then be combined using an XOR instruction.</p>
        <p>In order to calculate suboptimal, alternative alignments, we forbid the suboptimal alignment to pass through any cell (<italic>i</italic>,<italic>j</italic>) that is within 40 cells from any of the cells of the better-scoring alignments. These forbidden cells are stored in a matrix cell_off[i][j] in the scalar version of the Viterbi algorithm. The first if-statement in Algorithm 2 ensures that these cells obtain a score of −<italic>∞</italic>.</p>
        <p>To reduce memory requirements in the vectorized version, the cell-off flag is stored in the most significant bit of the backtracing matrix (Fig. <xref rid="Fig5" ref-type="fig">5</xref>) (see “<xref rid="Sec20" ref-type="sec">Memory reduction for backtracing and cell-off matrices</xref>” section). In the SIMD Viterbi algorithm, we shift the backtracing matrix cell-off bit to the right by one and load four 32bit (SSE2) or eight 64bit (AVX2) values into a SIMD register (line 23). We extract only the cell-off bits (line 24) by computing an AND between the co_mask and the cell_off register. We set elements in the register with cell_off bit to 0 and without to 0xFFFFFFFF by comparing if cell_mask is greater than cell_off (line 25). On line 26, we set the 4 or 8 values in the SIMD register cell_off to −<italic>∞</italic> if their cell-off bit was set and otherwise to 0. After this we add the generated vector to all five scores (MM, MI, IM, DG and GD).
<fig id="Fig4"><label>Fig. 4</label><caption><p>Two approaches to reduce the memory requirement for the DP score matrices from <italic>O</italic>(<italic>L</italic><sub><italic>q</italic></sub><italic>L</italic><sub><italic>t</italic></sub>) to <italic>O</italic>(<italic>L</italic><sub><italic>t</italic></sub>), where <italic>L</italic><sub><italic>q</italic></sub> and <italic>L</italic><sub><italic>t</italic></sub> are lengths of the query and target profile, respectively. (Top) One vector holds the scores of the previous row, <italic>S</italic><sub>XY</sub>(<italic>i</italic>−1,·), for pair state XY ∈{MM, MI, IM, GD and DG}, and the other holds the scores of the current row, <italic>S</italic><sub>XY</sub>(<italic>i</italic>,·) for pair state XY ∈{MM, MI, IM, GD and DG}. Vector pointers are swapped after each row has been processed. (Bottom) A single vector per pair state XY holds the scores of the current row up to <italic>j</italic>−1 and of the previous row for <italic>j</italic> to <italic>L</italic><sub><italic>t</italic></sub>. The second approach is somewhat faster and was chosen for HH-suite3</p></caption><graphic xlink:href="12859_2019_3019_Fig4_HTML" id="MO9"/></fig>
</p>
        <p>A small improvement in runtime was achieved by compiling both versions of the Viterbi method, one with and one without cell-off logic. For the first, optimal alignment, we call the version compiled without the cell off logic and for the alternative alignments the version with cell-off logic enabled. In C/C++, this can be done with preprocessor macros.</p>
        <p>Shorter profile HMMs are padded with probabilities of zero up to the length of the longest profile HMM in the batch (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). Therefore, the database needs to be sorted by decreasing profile HMM length. Sorting also improves IO performance due to linear access to the target HMMs for the Viterbi alignment, since the list of target HMMs that passed the prefilter is automatically sorted by length.</p>
      </sec>
      <sec id="Sec18">
        <title>Vectorized column similarity score</title>
        <p>The sum in the profile column similarity score <italic>S</italic><sub><italic>aa</italic></sub> in the first line in Algorithm 4 is is computed as the scalar product between the precomputed 20-dimensional vector <inline-formula id="IEq3"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$q^{p}_{i}(a)/f_{a}$\end{document}</tex-math><mml:math id="M14"><mml:msubsup><mml:mrow><mml:mi>q</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:msubsup><mml:mo>(</mml:mo><mml:mi>a</mml:mi><mml:mo>)</mml:mo><mml:mo>/</mml:mo><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mi>a</mml:mi></mml:mrow></mml:msub></mml:math><inline-graphic xlink:href="12859_2019_3019_Article_IEq3.gif"/></alternatives></inline-formula> and <inline-formula id="IEq4"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$t^{p}_{j}(a)$\end{document}</tex-math><mml:math id="M16"><mml:msubsup><mml:mrow><mml:mi>t</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:msubsup><mml:mo>(</mml:mo><mml:mi>a</mml:mi><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12859_2019_3019_Article_IEq4.gif"/></alternatives></inline-formula>. The SIMD code takes 39 instructions to compute the scores for 4 or 8 target columns, whereas the scalar version needed 39 instructions for a single target column.</p>
      </sec>
    </sec>
    <sec id="Sec19">
      <title>From quadratic to linear memory for scoring matrices</title>
      <p>Most of the memory in Algorithm 2 is needed for the five score matrices for pair states MM, MI, IM, GD and DG. For a protein of 15 000 residues, the five matrices need 15 000×15 000×4byte×5 matrices=4.5GB of memory per thread.</p>
      <p>In a naive implementation, the vectorized algorithm would need a factor of 4 or 8 more memory than that, since it would need to store the scores of 4 or 8 target profile HMMs in the score matrices. This would require 36GB of memory per thread, or 576GB for commonly used 16 core servers.</p>
      <p>However, we do not require the entire scoring matrices to reside in memory. We only need the backtracing matrices and the position (<italic>i</italic><sub>best</sub>,<italic>j</italic><sub>best</sub>) of the highest scoring cell to reconstruct the alignment.</p>
      <p>We implemented two approaches. The first uses two vectors per pair state (Fig. <xref rid="Fig4" ref-type="fig">4</xref> top). One holds the scores of the current row <italic>i</italic>, where (<italic>i</italic>,<italic>j</italic>) are the positions of the cell whose scores are to be computed, and the other vector holds the scores of the previous row <italic>i</italic>−1. After all the scores of a row <italic>i</italic> have been calculated, the pointers to the vectors are swapped and the former row becomes the current one.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Predecessor pair states for backtracing the Viterbi alignments are stored in a single byte of the backtrace matrix in HH-suite3 to reduce memory requirements. The bits 0 to 2 (blue) are used to store the predecessor state to the MM state, bits 3 to 6 store the predecessor of GD, IM, DG and MI pair states. The last bit denotes cells that are not allowed to be part of the suboptimal alignment because they are near to a cell that was part of a better-scoring alignment</p></caption><graphic xlink:href="12859_2019_3019_Fig5_HTML" id="MO8"/></fig>
</p>
      <p>The second approach uses only a single vector (Fig. <xref rid="Fig4" ref-type="fig">4</xref> bottom). Its elements from 1 to <italic>j</italic>−1 hold the scores of the current row that have already been computed. Its elements from <italic>j</italic> to the last position <italic>L</italic><sub><italic>t</italic></sub> hold the scores from the previous row <italic>i</italic>−1.</p>
      <p>The second variant turned out to be faster, even though it executes more instructions in each iteration. However, profiling showed that this is more than compensated by fewer cache misses, probably owed to the factor two lower memory required.</p>
      <p>We save a lot of memory by storing the currently needed scores of the target in a linear ring buffer of size <italic>O</italic>(<italic>L</italic><sub><italic>t</italic></sub>). However, we still need to keep the backtracing matrix (see next subsection), of quadratic size <italic>O</italic>(<italic>L</italic><sub><italic>q</italic></sub><italic>L</italic><sub><italic>t</italic></sub>) in memory. Therefore the memory complexity remains unaffected.</p>
    </sec>
    <sec id="Sec20">
      <title>Memory reduction for backtracing and cell-off matrices</title>
      <p>To compute an alignment by backtracing from the cell (<italic>i</italic><sub>best</sub>,<italic>j</italic><sub>best</sub>) with maximum score, we need to store for each cell (<italic>i</italic>,<italic>j</italic>) and every pair state (<italic>M</italic><italic>M</italic>,<italic>G</italic><italic>D</italic>,<italic>M</italic><italic>I</italic>,<italic>D</italic><italic>G</italic>,<italic>I</italic><italic>M</italic>) the previous cell and pair state the alignment would pass through, that is, which cell contributed the maximum score in (<italic>i</italic>,<italic>j</italic>). For that purpose it obviously suffices to only store the previous pair state.</p>
      <p>HHblits 2.0.16 uses five different matrices of type char, one for each pair state, and one char matrix to hold the cell-off values (in total 6 bytes). The longest known protein Titin has about 33 000 amino acids. To keep a 33 000×33 000×6<italic>b</italic><italic>y</italic><italic>t</italic><italic>e</italic> matrix in memory, we would need 6GB of memory. Since only a fraction of ∼10<sup>−5</sup> sequences are sequences longer than 15 000 residues in the UniProt database, we restrict the default maximum sequence length to 15 000. This limit can be increased with the parameter -maxres.</p>
      <p>But we would still need about 1.35GB to hold the backtrace and cell-off matrices. A naive SSE2 implementation would therefore need 5.4GB, and 10.8GB with AVX2. Because every thread needs its own backtracing and cell-off matrices, this can be a severe restriction.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3019_Fige_HTML" id="MO10"/>
      </p>
      <p>We reduce the memory requirements by storing all backtracing information and the cell-off flag in a single byte per cell (<italic>i</italic>,<italic>j</italic>). The preceding state for the IM, MI, GD, DG states can be held as single bit, with a 1 signifying that the preceding pair state was the same as the current one and 0 signifying it was MM. The preceding state for MM can be any of STOP, MM, IM, MI, GD, and DG. STOP represents the start of the alignment, which corresponds to the 0 in (eq. <xref rid="Equ1" ref-type="">1</xref>) contributing the largest of the 6 scores. We need three bits to store these six possible predecessor pair states. The backtracing information can, thus, be held in ‘4 + 3’ bits, which leaves one bit for the cell-off flag (Fig. <xref rid="Fig5" ref-type="fig">5</xref>). Due to the reduction to one byte per cell we need only 0.9GB (with SSE2) or 1.8GB (with AVX2) per thread to hold the backtracing and cell-off information.</p>
    </sec>
    <sec id="Sec21">
      <title>Viterbi early termination criterion</title>
      <p>For some query HMMs, a lot of non-homologous target HMMs pass the prefiltering stage, for example when they contain one of the very frequent coiled coil regions. To avoid having to align thousands of non-homologous target HMMs with the costly Viterbi algorithm, we introduced an early termination criterion in HHblits 2.0.16. We averaged 1/(1+E-value) over the last 200 processed Viterbi alignments and skipped all further database HMMs when this average dropped below 0.01, indicating that the last 200 target HMMs produced very few Viterbi E-values below 1.</p>
      <p>This criterion requires the targets to be processed by decreasing prefilter score, while our vectorized version of the Viterbi algorithm requires the database profile HMMs to be ordered by decreasing length. We solved this dilemma by sorting the list of target HMMs by decreasing prefilter score, splitting it into equal chunks (default size 2 000) with decreasing scores, and sorting target HMMs within each chunk by their lengths. After each chunk has been processed by the Viterbi algorithm, we compute the average of 1/(1+E-value) for the chunk and terminate early when this number drops below 0.01.</p>
    </sec>
    <sec id="Sec22">
      <title>SIMD-based MSA redundancy filter</title>
      <p>To build a profile HMM from an MSA, HH-suite reduces the redundancy by filtering out sequences that have more than a fraction seqid_max of identical residues with another sequence in the MSA. The scalar version of the function (Algorithm 5) returns 1 if two sequences <italic>x</italic> and <italic>y</italic> have a sequence identity above seqid_min and 0 otherwise. The SIMD version (Algorithm 6) has no branches and processes the amino acids in chunks of 16 (SSE2) or 32 (AVX2). It is about ∼11 times faster than the scalar version.</p>
      <p>
        <graphic position="anchor" xlink:href="12859_2019_3019_Figf_HTML" id="MO11"/>
      </p>
    </sec>
  </sec>
  <sec id="Sec23" sec-type="results">
    <title>Results</title>
    <sec id="Sec24">
      <title>Speed benchmarks</title>
      <sec id="Sec25">
        <title>Speed of HHsearch 2.0.16 versus HHsearch 3</title>
        <p>Typically more than 90% of the run time of HHsearch is spent in the Viterbi algorithm, while only a fraction of the time is spent in the maximum accuracy alignment. Only a small number of alignments reach an E-value low enough in the Viterbi algorithm to be processed further. HHsearch therefore profits considerably from the SIMD vectorization of the Viterbi algorithm.</p>
        <p>To compare the speed of the HHsearch versions, we randomly selected 1 644 sequences from Uniprot (release 2015_06), built profile HMMs, and measured the total run time for searching with the 1644 query HMMs through the PDB70 database (version 05Sep15). The PDB70 contains profile HMMs for a representative set of sequences from the PDB [<xref ref-type="bibr" rid="CR24">24</xref>], filtered with a maximum pairwise sequence identity of 70%. It contained 35 000 profile HMMs with an average length of 234 match states.</p>
        <p>HHsearch with SSE2 is 3.2 times faster and HHsearch with AVX2 vectorization is 4.2 times faster than HHsearch 2.0.16, averaged over all 1644 searches (Fig. <xref rid="Fig6" ref-type="fig">6</xref>a). For proteins longer than 1000, the speed-up factors are 5.0 and 7.4, respectively. Due to a runtime overhead of ∼20 s that is independent of the query HMM length (e.g. for reading in the profile HMMs), the speed-up shrinks for shorter queries. Most of this speed-up is owed to the vectorization of the Viterbi algorithm: The SSE2-vectorized Viterbi code ran 4.2 times faster than the scalar version.
<fig id="Fig6"><label>Fig. 6</label><caption><p>Speed comparisons. <bold>a</bold> runtime versus query profile length for 1644 searches with profile HMMs randomly sampled from UniProt. These queries were searched against the PDB70 database containing 35 000 profile HMMs of average length 234. The average speedup over HHsearch 2.0.16 is 3.2-fold for SSE2- vectorized HHsearch and 4.2-fold for AVX2-vectorized HHsearch. <bold>b</bold> Box plot for the distribution of total runtimes (in logarithmic scale) for one, two, or three search iterations using the 1644 profile HMMs as queries. PSI-BLAST and HHMER3 searches were done against the UniProt database (version 2015_06) containing 49 293 307 sequences. HHblits searches against the uniprot20 database, a clustered version of UniProt containing profile HMMs for each of its 7 313 957 sequence clusters. Colored numbers: speed-up factors relative to HMMER3</p></caption><graphic xlink:href="12859_2019_3019_Fig6_HTML" id="MO12"/></fig>
</p>
        <p>In HHblits, only part of the runtime is spent in the Viterbi algorithm, while the larger fraction is used by the prefilter, which was already SSE2-vectorized in HHblits 2.0.16. Hence we expected only a modest speed-up between HHblits 2.0.16 and SSE2-vectorized HHblits 3. Indeed, we observed an average speed-up of 1.2, 1.3, and 1.4 for 1, 2 and 3 search iterations, respectively (Fig. <xref rid="Fig6" ref-type="fig">6</xref>b), whereas AVX2-vectorized version is 1.9, 2.1, and 2.3 times faster than HHblits 2.0.16, respectively. AVX2-vectorized HHblits is 14, 20, and 29 times faster than HMMER3 [<xref ref-type="bibr" rid="CR4">4</xref>] (version 3.1b2) and 9, 10, and 11 times faster than PSI-BLAST [<xref ref-type="bibr" rid="CR10">10</xref>] (blastpgp 2.2.31) for 1, 2, and 3 search iterations.</p>
        <p>All runtime measurements were performed using the Unix tool time on a single core of a computer with two Intel Xeon E5-2640v3 CPUs with 128GB RAM.</p>
      </sec>
    </sec>
    <sec id="Sec26">
      <title>Sensitivity benchmark</title>
      <p>To measure the sensitivity of search tools to detect remotely homologous protein sequences, we used a benchmarking procedure very similar to the one described in [<xref ref-type="bibr" rid="CR5">5</xref>]. To annotate the uniprot20 (version 2015_06) with SCOP domains, we first generated a SCOP20 sequence set by redundancy-filtering the sequences in SCOP 1.75 [<xref ref-type="bibr" rid="CR25">25</xref>] to 20% maximum pairwise sequence identity using pdbfilter.pl with minimum coverage of 90% from HH-suite, resulting in 6616 SCOP domain sequences. We annotated a subset of uniprot20 sequences by the presence of SCOP domains by searching with each sequence in the SCOP20 set with blastpgp through the consensus sequences of the uniprot20 database and annotated the best matching sequence that covered ≥90<italic>%</italic> of the SCOP sequence and that had a minimum sequence identity of at least 30%.</p>
      <p>We searched with PSI-BLAST (2.2.31) and HMMER3 (v3.1b2) with three iterations, using the 6616 sequences in the SCOP20 set as queries, against a database made up of the UniProt plus the SCOP20 sequence set. We searched with HHblits versions 2.0.16 and 3 with three iterations through a database consisting of the uniprot20 HMMs plus the 6616 UniProt profile HMMs annotated by SCOP domains.</p>
      <p>We defined a sequence match as true positive if query and matched sequence were from the same SCOP superfamily and as false positive if they were from different SCOP folds and ignore all others. We excluded the self-matches as well as matches between Rossman-like folds (c.2-c.5, c.27 and 28, c.30 and 31) and between the four- to eight-bladed <italic>β</italic>-propellers (b.66-b.70), because they are probably true homologs [<xref ref-type="bibr" rid="CR2">2</xref>]. HMMER3 reported more than one false positive hit just in one out of three queries, despite setting the maximum E-value to 100 000, and we therefore measured the sensitivity up to the first false positive (AUC1) instead of the AUC5 we had used in earlier publications.</p>
      <p>We ran HHblits using hhblits -min_prefilter_hits 100 -n 1 -cpu $NCORES -ssm 0 -v 0 -wg and wrote checkpoint files after each iteration to restart the next iteration. We ran HMMER3 (v3.1b2) using hmmsearch –chkhmm -E 100000 and PSI-BLAST (2.2.31) using -evalue 10000 -num_descriptions 250000.</p>
      <p>The cumulative distribution over the 6616 queries of the sensitivity at the first false positive (AUC1) in Fig. <xref rid="Fig7" ref-type="fig">7</xref>a shows that HHblits 3 is as sensitive as HHblits 2.0.16 for 1, 2, and 3 search iterations. Consistent with earlier results [<xref ref-type="bibr" rid="CR5">5</xref>, <xref ref-type="bibr" rid="CR26">26</xref>], HHblits is considerably more sensitive than HMMER3 and PSI-BLAST.
<fig id="Fig7"><label>Fig. 7</label><caption><p>Sensitivity of sequence search tools. <bold>a</bold> We searched with 6616 SCOP20 domain sequences through the UniProt plus SCOP20 database using one to three search iterations. The sensitivity to detect homologous sequences is measured by cumulative distribution of the Area Under the Curve 1 (AUC1), the fraction of true positives ranked better than the first false positive match. True positive matches are defined as being from the same SCOP superfamily [<xref ref-type="bibr" rid="CR25">25</xref>], false positives have different SCOP folds, excepting known cases of inter-fold homologies. <bold>b</bold> Sensitivity of HHsearch with and without scoring secondary structure similarity, measured by the cumulative distribution of AUC1 for a comparison of 6616 profile HMMs built from SCOP20 domain sequences. Query HMMs include predicted secondary structure, target HMMs include actual secondary structure annotated by DSSP. True and false positives are defined as in A</p></caption><graphic xlink:href="12859_2019_3019_Fig7_HTML" id="MO13"/></fig>
</p>
      <p>We also compared the sensitivity of HHsearch 3 with and without scoring secondary structure similarity, because we slightly changed the weighting of the secondary structure score (Methods). We generated a profile HMM for each SCOP20 sequence using three search iterations with HHblits searches against the uniprot20 database of HMMs. We created the query set of profile HMMs by adding PSIPRED-based secondary structure predictions using the HH-suite script addss.pl, and we added structurally defined secondary structure states from DSSP [<xref ref-type="bibr" rid="CR36">36</xref>] using addss.pl to the target profile HMMs. We then searched with all 6616 query HMMs through the database of 6616 target HMMs. True positive and false positive matches were defined as before.</p>
      <p>Figure <xref rid="Fig7" ref-type="fig">7</xref>b shows that HHsearch 2.0.16 and 3 have the same sensitivity when secondary structure scoring is turned off. When turned on, HHsearch 3 has a slightly higher sensitivity due to the better weighting.</p>
    </sec>
  </sec>
  <sec id="Sec27" sec-type="conclusion">
    <title>Conclusions</title>
    <p>We have accelerated the algorithms most critical for runtime used in the HH-suite, most importantly the Viterbi algorithm for local and global alignments, using SIMD vector instructions. We have also added thread parallelization with OpenMP and parallelization across servers with Message Passing Interface (MPI). These extensions make the HH-suite well suited for large-scale deep protein annotation of metagenomics and genomics datasets.</p>
  </sec>
  <sec id="Sec28">
    <title>Availability and requirements</title>
    <p>
      <list list-type="bullet">
        <list-item>
          <p>Project name: HH-suite</p>
        </list-item>
        <list-item>
          <p>Project page: <ext-link ext-link-type="uri" xlink:href="https://github.com/soedinglab/hh-suite">https://github.com/soedinglab/hh-suite</ext-link></p>
        </list-item>
        <list-item>
          <p>Operating systems: Linux, macOS</p>
        </list-item>
        <list-item>
          <p>Programming languages: C++, Python utilities</p>
        </list-item>
        <list-item>
          <p>Other requirements: support for SSE2 or higher</p>
        </list-item>
        <list-item>
          <p>License: GPLv3</p>
        </list-item>
      </list>
    </p>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>AVX2</term>
        <def>
          <p>advanced vector extension (SIMD instruction set standards)</p>
        </def>
      </def-item>
      <def-item>
        <term>HMM</term>
        <def>
          <p>hidden Markov model</p>
        </def>
      </def-item>
      <def-item>
        <term>MSA</term>
        <def>
          <p>multiple sequence alignment</p>
        </def>
      </def-item>
      <def-item>
        <term>SIMD</term>
        <def>
          <p>single-instruction multiple-data</p>
        </def>
      </def-item>
      <def-item>
        <term>SSE2</term>
        <def>
          <p>streaming SIMD extensions 2</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank the HH-suite community for their contributions and bug reports. We want to especially thank Lim Heo (Michigan State University) for fixing a bug in the Viterbi global alignment mode and David Miller for adding PowerPC support to the HH-suite.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>MS &amp; JS designed research, MS developed vectorized code and performed analyses, M. Meier refactored code, added features, fixed bugs and performed benchmarks, M. Mirdita added features, fixed bugs and maintains databases, HV implemented mmCIF support, SH optimized the MAC algorithm memory usage, MS and JS wrote the manuscript. All authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work was supported by the European Research Council’s Horizon 2020 Framework Programme for Research and Innovation (“Virus-X”, project no. 685778).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>The datasets used and/or analysed during the current study are available from the corresponding author on request.</p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p>Not applicable.</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p>Not applicable.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Howe</surname>
            <given-names>AC</given-names>
          </name>
          <name>
            <surname>Jansson</surname>
            <given-names>JK</given-names>
          </name>
          <name>
            <surname>Malfatti</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Tringe</surname>
            <given-names>SG</given-names>
          </name>
          <name>
            <surname>Tiedje</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Brown</surname>
            <given-names>CT</given-names>
          </name>
        </person-group>
        <article-title>Tackling soil diversity with the assembly of large, complex metagenomes</article-title>
        <source>Proc Natl Acad Sci USA</source>
        <year>2014</year>
        <volume>111</volume>
        <issue>13</issue>
        <fpage>4904</fpage>
        <lpage>4909</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1402564111</pub-id>
        <pub-id pub-id-type="pmid">24632729</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Remmert</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Protein sequence comparison and fold recognition: progress and good-practice benchmarking</article-title>
        <source>Curr Opin Struct Biol</source>
        <year>2011</year>
        <volume>21</volume>
        <issue>3</issue>
        <fpage>404</fpage>
        <lpage>11</lpage>
        <pub-id pub-id-type="doi">10.1016/j.sbi.2011.03.005</pub-id>
        <pub-id pub-id-type="pmid">21458982</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>A new generation of homology search tools based on probabilistic inference</article-title>
        <source>Genome Inform</source>
        <year>2009</year>
        <volume>23</volume>
        <issue>1</issue>
        <fpage>205</fpage>
        <lpage>11</lpage>
        <?supplied-pmid 20180275?>
        <pub-id pub-id-type="pmid">20180275</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>Accelerated Profile HMM Searches</article-title>
        <source>PLOS Comput Biol</source>
        <year>2011</year>
        <volume>7</volume>
        <issue>10</issue>
        <fpage>1002195</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1002195</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Remmert</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Biegert</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Hauser</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>HHblits: lightning-fast iterative protein sequence searching by HMM-HMM alignment</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>2</issue>
        <fpage>173</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1818</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dill</surname>
            <given-names>KA</given-names>
          </name>
          <name>
            <surname>MacCallum</surname>
            <given-names>JL</given-names>
          </name>
        </person-group>
        <article-title>The protein-folding problem, 50 years on</article-title>
        <source>Science</source>
        <year>2012</year>
        <volume>338</volume>
        <issue>6110</issue>
        <fpage>1042</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1126/science.1219021</pub-id>
        <pub-id pub-id-type="pmid">23180855</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Biasini</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bienert</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Waterhouse</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Arnold</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Studer</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Schmidt</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kiefer</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Cassarino</surname>
            <given-names>TG</given-names>
          </name>
          <name>
            <surname>Bertoni</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bordoli</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>SWISS-MODEL: modelling protein tertiary and quaternary structure using evolutionary information</article-title>
        <source>Nucleic Acids Res</source>
        <year>2014</year>
        <volume>42</volume>
        <issue>W1</issue>
        <fpage>252</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gku340</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fidler</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Murphy</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Courtis</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Antonoudiou</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>El-Tohamy</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Ient</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Levine</surname>
            <given-names>TP</given-names>
          </name>
        </person-group>
        <article-title>Using HHsearch to tackle proteins of unknown function: A pilot study with PH domains</article-title>
        <source>Traffic</source>
        <year>2016</year>
        <volume>17</volume>
        <issue>11</issue>
        <fpage>1214</fpage>
        <lpage>26</lpage>
        <pub-id pub-id-type="doi">10.1111/tra.12432</pub-id>
        <pub-id pub-id-type="pmid">27601190</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Burstein</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Harrington</surname>
            <given-names>LB</given-names>
          </name>
          <name>
            <surname>Strutt</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Probst</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Anantharaman</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>BC</given-names>
          </name>
          <name>
            <surname>Doudna</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Banfield</surname>
            <given-names>JF</given-names>
          </name>
        </person-group>
        <article-title>New CRISPR-Cas systems from uncultivated microbes</article-title>
        <source>Nature</source>
        <year>2016</year>
        <volume>542</volume>
        <fpage>237</fpage>
        <pub-id pub-id-type="doi">10.1038/nature21059</pub-id>
        <pub-id pub-id-type="pmid">28005056</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>TL</given-names>
          </name>
          <name>
            <surname>Schäffer</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title>
        <source>Nucleic Acids Res</source>
        <year>1997</year>
        <volume>25</volume>
        <issue>17</issue>
        <fpage>3389</fpage>
        <lpage>402</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id>
        <pub-id pub-id-type="pmid">9254694</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rychlewski</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Jaroszewski</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Godzik</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Comparison of sequence profiles. Strategies for structural predictions using sequence information</article-title>
        <source>Protein Sci</source>
        <year>2000</year>
        <volume>9</volume>
        <issue>2</issue>
        <fpage>232</fpage>
        <lpage>41</lpage>
        <pub-id pub-id-type="doi">10.1110/ps.9.2.232</pub-id>
        <pub-id pub-id-type="pmid">10716175</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sadreyev</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Grishin</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>COMPASS: a tool for comparison of multiple protein alignments with assessment of statistical significance</article-title>
        <source>J Mol Biol</source>
        <year>2003</year>
        <volume>326</volume>
        <issue>1</issue>
        <fpage>317</fpage>
        <lpage>36</lpage>
        <pub-id pub-id-type="doi">10.1016/S0022-2836(02)01371-2</pub-id>
        <pub-id pub-id-type="pmid">12547212</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>SP5: Improving Protein Fold Recognition by Using Torsion Angle Profiles and Profile-Based Gap Penalty Model</article-title>
        <source>PloS One</source>
        <year>2008</year>
        <volume>3</volume>
        <issue>6</issue>
        <fpage>2325</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0002325</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Margelevičius</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Venclovas</surname>
            <given-names>Č</given-names>
          </name>
        </person-group>
        <article-title>Detection of distant evolutionary relationships between protein families using theory of sequence profile-profile comparison</article-title>
        <source>BMC Bioinform</source>
        <year>2010</year>
        <volume>11</volume>
        <issue>1</issue>
        <fpage>89</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-89</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Protein homology detection by HMM-HMM comparison</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <issue>7</issue>
        <fpage>951</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti125</pub-id>
        <pub-id pub-id-type="pmid">15531603</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>RC</given-names>
          </name>
        </person-group>
        <article-title>Search and clustering orders of magnitude faster than BLAST</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <issue>19</issue>
        <fpage>2460</fpage>
        <lpage>1</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq461</pub-id>
        <pub-id pub-id-type="pmid">20709691</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kielbasa</surname>
            <given-names>SM</given-names>
          </name>
          <name>
            <surname>Wan</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Sato</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Horton</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Frith</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Adaptive seeds tame genomic sequence comparison</article-title>
        <source>Genome Res</source>
        <year>2011</year>
        <volume>21</volume>
        <issue>3</issue>
        <fpage>487</fpage>
        <lpage>93</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.113985.110</pub-id>
        <pub-id pub-id-type="pmid">21209072</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Buchfink</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Huson</surname>
            <given-names>DH</given-names>
          </name>
        </person-group>
        <article-title>Fast and sensitive protein alignment using DIAMOND</article-title>
        <source>Nat Methods</source>
        <year>2014</year>
        <volume>12</volume>
        <issue>1</issue>
        <fpage>59</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.3176</pub-id>
        <pub-id pub-id-type="pmid">25402007</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>MMseqs2 enables sensitive protein sequence searching for the analysis of massive data sets</article-title>
        <source>Nat Biotechnol</source>
        <year>2017</year>
        <volume>35</volume>
        <issue>11</issue>
        <fpage>1026</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3988</pub-id>
        <pub-id pub-id-type="pmid">29035372</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>El-Gebali</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Mistry</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bateman</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
          <name>
            <surname>Luciani</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Potter</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Qureshi</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Richardson</surname>
            <given-names>LJ</given-names>
          </name>
          <name>
            <surname>Salazar</surname>
            <given-names>GA</given-names>
          </name>
          <name>
            <surname>Smart</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Pfam protein families database in 2019</article-title>
        <source>Nucleic Acids Res</source>
        <year>2018</year>
        <volume>47</volume>
        <issue>D1</issue>
        <fpage>427</fpage>
        <lpage>32</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky995</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mitchell</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Attwood</surname>
            <given-names>TK</given-names>
          </name>
          <name>
            <surname>Babbitt</surname>
            <given-names>PC</given-names>
          </name>
          <name>
            <surname>Blum</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bork</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Bridge</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Brown</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>H. -Y.</given-names>
          </name>
          <name>
            <surname>El-Gebali</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Fraser</surname>
            <given-names>MI</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Interpro in 2019: improving coverage, classification and access to protein sequence annotations</article-title>
        <source>Nucleic Acids Res</source>
        <year>2018</year>
        <volume>47</volume>
        <issue>D1</issue>
        <fpage>351</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky1100</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Biegert</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>De novo identification of highly diverged protein repeats by probabilistic consistency</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <issue>6</issue>
        <fpage>807</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btn039</pub-id>
        <pub-id pub-id-type="pmid">18245125</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mirdita</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>von den Driesch</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Galiez</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Martin</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Steinegger</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Uniclust databases of clustered and deeply annotated protein sequences and alignments</article-title>
        <source>Nucleic Acids Res</source>
        <year>2016</year>
        <volume>45</volume>
        <issue>D1</issue>
        <fpage>170</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkw1081</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gilliland</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Berman</surname>
            <given-names>HM</given-names>
          </name>
          <name>
            <surname>Weissig</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Shindyalov</surname>
            <given-names>IN</given-names>
          </name>
          <name>
            <surname>Westbrook</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bourne</surname>
            <given-names>PE</given-names>
          </name>
          <name>
            <surname>Bhat</surname>
            <given-names>TN</given-names>
          </name>
          <name>
            <surname>Feng</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>The Protein Data Bank</article-title>
        <source>Nucleic Acids Res</source>
        <year>2000</year>
        <volume>28</volume>
        <issue>1</issue>
        <fpage>235</fpage>
        <lpage>42</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/28.1.235</pub-id>
        <pub-id pub-id-type="pmid">10592235</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Andreeva</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Howorth</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Chandonia</surname>
            <given-names>J-M</given-names>
          </name>
          <name>
            <surname>Brenner</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Hubbard</surname>
            <given-names>TJ</given-names>
          </name>
          <name>
            <surname>Chothia</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Murzin</surname>
            <given-names>AG</given-names>
          </name>
        </person-group>
        <article-title>Data growth and its impact on the SCOP database: new developments</article-title>
        <source>Nucleic Acids Res</source>
        <year>2007</year>
        <volume>36</volume>
        <issue>Database issue</issue>
        <fpage>419</fpage>
        <lpage>25</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkm993</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Angermüller</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Biegert</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Söding</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Discriminative modelling of context-specific amino acid substitution probabilities</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>24</issue>
        <fpage>3240</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts622</pub-id>
        <pub-id pub-id-type="pmid">23080114</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Eddy</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>Profile hidden Markov models</article-title>
        <source>Bioinformatics</source>
        <year>1998</year>
        <volume>14</volume>
        <issue>9</issue>
        <fpage>755</fpage>
        <lpage>63</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/14.9.755</pub-id>
        <pub-id pub-id-type="pmid">9918945</pub-id>
      </element-citation>
    </ref>
    <ref id="CR28">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>ITS</given-names>
          </name>
          <name>
            <surname>Shum</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Truong</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>160-fold acceleration of the Smith-Waterman algorithm using a field programmable gate array (FPGA)</article-title>
        <source>BMC Bioinform</source>
        <year>2007</year>
        <volume>8</volume>
        <issue>1</issue>
        <fpage>185</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-8-185</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Manavski</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Valle</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>CUDA compatible GPU cards as efficient hardware accelerators for Smith-Waterman sequence alignment</article-title>
        <source>BMC Bioinform</source>
        <year>2008</year>
        <volume>9 Suppl 2</volume>
        <issue>Suppl 2</issue>
        <fpage>10</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-9-S2-S10</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Szalkowski</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Ledergerber</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Krähenbühl</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Dessimoz</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>SWPS3 - fast multi-threaded vectorized Smith-Waterman for IBM Cell/B.E. and x86/SSE2</article-title>
        <source>BMC Res Notes</source>
        <year>2008</year>
        <volume>1</volume>
        <issue>1</issue>
        <fpage>107</fpage>
        <pub-id pub-id-type="doi">10.1186/1756-0500-1-107</pub-id>
        <pub-id pub-id-type="pmid">18959793</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Maskell</surname>
            <given-names>DL</given-names>
          </name>
          <name>
            <surname>Schmidt</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>CUDASW++: optimizing Smith-Waterman sequence database searches for CUDA-enabled graphics processing units</article-title>
        <source>BMC Res Notes</source>
        <year>2009</year>
        <volume>2</volume>
        <issue>1</issue>
        <fpage>73</fpage>
        <pub-id pub-id-type="doi">10.1186/1756-0500-2-73</pub-id>
        <pub-id pub-id-type="pmid">19416548</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wozniak</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Using video-oriented instructions to speed up sequence comparison</article-title>
        <source>Bioinformatics</source>
        <year>1997</year>
        <volume>13</volume>
        <issue>2</issue>
        <fpage>145</fpage>
        <lpage>50</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/13.2.145</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rognes</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Seeberg</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Six-fold speed-up of Smith-Waterman sequence database searches using parallel processing on common microprocessors</article-title>
        <source>Bioinformatics</source>
        <year>2000</year>
        <volume>16</volume>
        <issue>8</issue>
        <fpage>699</fpage>
        <lpage>706</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/16.8.699</pub-id>
        <pub-id pub-id-type="pmid">11099256</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Farrar</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Striped Smith-Waterman speeds database searches six times over other SIMD implementations</article-title>
        <source>Bioinformatics</source>
        <year>2007</year>
        <volume>23</volume>
        <issue>2</issue>
        <fpage>156</fpage>
        <lpage>61</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btl582</pub-id>
        <pub-id pub-id-type="pmid">17110365</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rognes</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Faster Smith-Waterman database searches with inter-sequence SIMD parallelisation</article-title>
        <source>BMC Bioinform</source>
        <year>2011</year>
        <volume>12</volume>
        <issue>1</issue>
        <fpage>221</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-12-221</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kabsch</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Sander</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Dictionary of protein secondary structure: pattern recognition of hydrogen-bonded and geometrical features</article-title>
        <source>Biopolymers</source>
        <year>1983</year>
        <volume>22</volume>
        <issue>12</issue>
        <fpage>2577</fpage>
        <lpage>637</lpage>
        <pub-id pub-id-type="doi">10.1002/bip.360221211</pub-id>
        <pub-id pub-id-type="pmid">6667333</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
