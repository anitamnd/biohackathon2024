<?DTDIdentifier.IdentifierValue -//ES//DTD journal article DTD version 5.6.0//EN//XML?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName art560.dtd?>
<?SourceDTD.Version 5.6.0?>
<?ConverterInfo.XSLTName elsevier2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<?origin publisher?>
<?FILEmeta_XPRO102170 xml ?>
<?FILEmain xml ?>
<?FILEmain pdf ?>
<?FILEgr1 jpg ?>
<?FILEgr2 jpg ?>
<?FILEgr3 jpg ?>
<?FILEgr4 jpg ?>
<?FILEgr5 jpg ?>
<?FILEgr6 jpg ?>
<?FILEgr7 jpg ?>
<?FILEgr8 jpg ?>
<?FILEfx1 jpg ?>
<?FILEfx2 jpg ?>
<?FILEfx3 jpg ?>
<?FILEmmc1 zip ?>
<?FILEmmc2 zip ?>
<?FILEmmc3 jpg ?>
<?FILEmmc3 mp4 ?>
<?FILEmmc4 jpg ?>
<?FILEmmc4 mp4 ?>
<?FILEmmc5 jpg ?>
<?FILEmmc5 mp4 ?>
<?FILEmmc6 jpg ?>
<?FILEmmc6 mp4 ?>
<?FILEmmc7 jpg ?>
<?FILEmmc7 mp4 ?>
<?FILEmmc8 jpg ?>
<?FILEmmc8 mp4 ?>
<?FILEmmc9 jpg ?>
<?FILEmmc9 mp4 ?>
<?FILEmmc10 jpg ?>
<?FILEmmc10 mp4 ?>
<?FILEmmc11 jpg ?>
<?FILEmmc11 mp4 ?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">STAR Protoc</journal-id>
    <journal-id journal-id-type="iso-abbrev">STAR Protoc</journal-id>
    <journal-title-group>
      <journal-title>STAR Protocols</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2666-1667</issn>
    <publisher>
      <publisher-name>Elsevier</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10173857</article-id>
    <article-id pub-id-type="pii">S2666-1667(23)00128-4</article-id>
    <article-id pub-id-type="doi">10.1016/j.xpro.2023.102170</article-id>
    <article-id pub-id-type="publisher-id">102170</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Protocol</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Protocol for predicting drug-resistant protein mutations to an ERK2 inhibitor using RESISTOR</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="au1">
        <name>
          <surname>Guerin</surname>
          <given-names>Nathan</given-names>
        </name>
        <email>osprey@cs.duke.edu</email>
        <xref rid="aff1" ref-type="aff">1</xref>
        <xref rid="fn1" ref-type="fn">6</xref>
        <xref rid="cor1" ref-type="corresp">∗</xref>
      </contrib>
      <contrib contrib-type="author" id="au2">
        <name>
          <surname>Kaserer</surname>
          <given-names>Teresa</given-names>
        </name>
        <xref rid="aff2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author" id="au3">
        <name>
          <surname>Donald</surname>
          <given-names>Bruce R.</given-names>
        </name>
        <email>brd+sp22@cs.duke.edu</email>
        <xref rid="aff1" ref-type="aff">1</xref>
        <xref rid="aff3" ref-type="aff">3</xref>
        <xref rid="aff4" ref-type="aff">4</xref>
        <xref rid="aff5" ref-type="aff">5</xref>
        <xref rid="fn2" ref-type="fn">7</xref>
        <xref rid="cor2" ref-type="corresp">∗∗</xref>
      </contrib>
      <aff id="aff1"><label>1</label>Department of Computer Science, Duke University, Durham, NC 27708, USA</aff>
      <aff id="aff2"><label>2</label>Institute of Pharmacy/Pharmaceutical Chemistry, University of Innsbruck, 6020 Innsbruck Austria</aff>
      <aff id="aff3"><label>3</label>Department of Biochemistry, Duke University Medical Center, Durham, NC 22710, USA</aff>
      <aff id="aff4"><label>4</label>Department of Chemistry, Duke University, Durham, NC 27708, USA</aff>
      <aff id="aff5"><label>5</label>Department of Mathematics, Duke University, Durham, NC 27708, USA</aff>
    </contrib-group>
    <author-notes>
      <corresp id="cor1"><label>∗</label>Corresponding author <email>osprey@cs.duke.edu</email></corresp>
      <corresp id="cor2"><label>∗∗</label>Corresponding author <email>brd+sp22@cs.duke.edu</email></corresp>
      <fn id="fn1">
        <label>6</label>
        <p id="ntpara0010">Technical contact</p>
      </fn>
      <fn id="fn2">
        <label>7</label>
        <p id="ntpara0015">Lead contact</p>
      </fn>
    </author-notes>
    <pub-date pub-type="pmc-release">
      <day>27</day>
      <month>4</month>
      <year>2023</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on <pub-date
						pub-type="epub">.-->
    <pub-date pub-type="collection">
      <day>16</day>
      <month>6</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>27</day>
      <month>4</month>
      <year>2023</year>
    </pub-date>
    <volume>4</volume>
    <issue>2</issue>
    <elocation-id>102170</elocation-id>
    <permissions>
      <copyright-statement>© 2023 The Author(s)</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).</license-p>
      </license>
    </permissions>
    <abstract id="abs0010">
      <title>Summary</title>
      <p>Prospective predictions of drug-resistant protein mutants could improve the design of therapeutics less prone to resistance. Here, we describe RESISTOR, an algorithm that uses structure- and sequence-based criteria to predict resistance mutations. We demonstrate the process of using RESISTOR to predict ERK2 mutants likely to arise in melanoma ablating the efficacy of the ERK1/2 inhibitor SCH779284. RESISTOR is included in the free and open-source computational protein design software OSPREY.</p>
      <p>For complete details on the use and execution of this protocol, please refer to Guerin et al..<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref></p>
    </abstract>
    <abstract abstract-type="graphical" id="abs0015">
      <title>Graphical abstract</title>
      <fig id="undfig1" position="anchor">
        <graphic xlink:href="fx1"/>
      </fig>
    </abstract>
    <abstract abstract-type="author-highlights" id="abs0020">
      <title>Highlights</title>
      <p>
        <list list-type="simple" id="ulist0010">
          <list-item id="u0010">
            <label>•</label>
            <p id="p0010">RESISTOR is an OSPREY-based algorithm for predicting resistance mutations</p>
          </list-item>
          <list-item id="u0015">
            <label>•</label>
            <p id="p0015">RESISTOR employs structure and sequence data to predict resistance mutations</p>
          </list-item>
          <list-item id="u0020">
            <label>•</label>
            <p id="p0020">RESISTOR uses Pareto optimization to provide ranks of putative resistance mutations</p>
          </list-item>
          <list-item id="u0025">
            <label>•</label>
            <p id="p0025">RESISTOR and OSPREY are free and open-source software programs</p>
          </list-item>
        </list>
      </p>
    </abstract>
    <abstract abstract-type="editor-highlights" id="abs0025">
      <p>Publisher’s note: Undertaking any experimental protocol requires adherence to local institutional guidelines for laboratory safety and ethics.</p>
    </abstract>
    <abstract abstract-type="teaser" id="abs0030">
      <p>Prospective predictions of drug-resistant protein mutants could improve the design of therapeutics less prone to resistance. Here, we describe RESISTOR, an algorithm that uses structure- and sequence-based criteria to predict resistance mutations. We demonstrate the process of using RESISTOR to predict ERK2 mutants likely to arise in melanoma ablating the efficacy of the ERK1/2 inhibitor SCH779284. RESISTOR is included in the free and open-source computational protein design software OSPREY.</p>
    </abstract>
    <kwd-group id="kwrds0010">
      <title>Subject areas</title>
      <kwd>Bioinformatics</kwd>
      <kwd>Cancer</kwd>
      <kwd>High-throughput Screening</kwd>
      <kwd>Protein Biochemistry</kwd>
      <kwd>Structural Biology</kwd>
      <kwd>Biotechnology and Bioengineering</kwd>
      <kwd>Computer Sciences</kwd>
    </kwd-group>
  </article-meta>
</front>
<body>
  <sec id="sec1">
    <title>Before you begin</title>
    <p id="p0030">
      <disp-quote>
        <p>
          <inline-graphic xlink:href="fx2.gif"/>
          <bold>Timing: 1 h</bold>
        </p>
      </disp-quote>
    </p>
    <p id="p0035">This section describes the minimal hardware and operating system requirements, where to obtain the requisite software and its installation procedure, and the file formats of the sequence and structural inputs required to run RESISTOR. For the purposes of demonstration, we use RESISTOR to predict resistance mutations on the ERK2 kinase to the inhibitor SCH772984 (hereafter referred to as SCH7). Previously, we have used RESISTOR to prospectively predict resistance mutations in EGFR and BRAF, which we then validated experimentally.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref> In addition, we have employed aspects of RESISTOR, including multistate K∗ design and mutational signature probabilities, in other applications, such as our development of algorithms like BBK∗ (Branch and Bound Over K∗)<xref rid="bib2" ref-type="bibr"><sup>2</sup></xref> and our predictions of resistance-conferring mutations to inhibitors of kinases such as KIT, EGFR, ABL1, and ALK.<xref rid="bib3" ref-type="bibr"><sup>3</sup></xref></p>
    <p id="p0040">Here we offer abbreviated definitions and references for the terminology we use throughout this protocol. <italic>Positive design</italic> is the use of computational protein design algorithms to improve an objective, such as ligand binding. <italic>Negative design</italic> is the opposite, i.e., the goal is to make an objective worse, such as to ablate binding. RESISTOR uses <italic>multistate design</italic>,<xref rid="bib4" ref-type="bibr"><sup>4</sup></xref><sup>,</sup><xref rid="bib5" ref-type="bibr"><sup>5</sup></xref><sup>,</sup><xref rid="bib6" ref-type="bibr"><sup>6</sup></xref><sup>,</sup><xref rid="bib7" ref-type="bibr"><sup>7</sup></xref><sup>,</sup><xref rid="bib8" ref-type="bibr"><sup>8</sup></xref> or both positive and negative design in parallel, to mimic how mutations affect the competitive balance between a protein’s endogenous ligand and a competitive inhibitor. Resistance can occur via a protein’s increased activity with its endogenous ligand, decreased binding with an inhibitor, or a combination of these factors.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref><sup>,</sup><xref rid="bib3" ref-type="bibr"><sup>3</sup></xref><sup>,</sup><xref rid="bib6" ref-type="bibr"><sup>6</sup></xref><sup>,</sup><xref rid="bib7" ref-type="bibr"><sup>7</sup></xref></p>
    <p id="p0045">RESISTOR employs Pareto optimization over positive and negative design, mutational signature probabilities, and hotspot scores to rank prospective resistance mutants. The positive and negative design portions use the <italic>K∗ algorithm</italic><xref rid="bib9" ref-type="bibr"><sup>9</sup></xref> implemented in OSPREY,<xref rid="bib10" ref-type="bibr"><sup>10</sup></xref> which generates low-energy molecular ensembles to compute the partition functions the algorithm uses to provably approximate binding affinity, <inline-formula><mml:math id="M1" altimg="si1.gif"><mml:mrow><mml:msub><mml:mi>K</mml:mi><mml:mi>a</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>.<xref rid="bib4" ref-type="bibr"><sup>4</sup></xref><sup>,</sup><xref rid="bib9" ref-type="bibr"><sup>9</sup></xref>
<italic>Mutational signature probabilities</italic> are derived from data provided by Alexandrov et al.<xref rid="bib11" ref-type="bibr"><sup>11</sup></xref> and denote the probability a DNA base will mutate to another base in a given sequence context and cancer type. A <italic>hotspot score</italic> is the number of sequences with a mutation at a particular residue location which multistate design criteria predicts as structural resistance mutations.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref><sup>,</sup><xref rid="bib3" ref-type="bibr"><sup>3</sup></xref></p>
    <p id="p0050"><xref rid="fig1" ref-type="fig">Figure 1</xref> contains a conceptual overview of the RESISTOR protocol’s main phases.<fig id="fig1"><label>Figure 1</label><caption><p>Conceptual overview of the main steps involved in executing the RESISTOR protocol</p><p>The first phase, <underline>Preparation</underline>, involves obtaining the positive and negative design structure files in PDB format, along with the corresponding cDNA sequence. The structures need to be prepared for OSPREY K∗ design. Finally, the structures and additional inputs (outlined below) must be collected into a YAML design file. The second phase, <underline>Execution</underline>, involves using the OSPREY K∗ algorithm to compute provable approximations to the binding constant, <inline-formula><mml:math id="M2" altimg="si1.gif"><mml:mrow><mml:msub><mml:mi>K</mml:mi><mml:mi>a</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, and using RESISTOR to filter the results, assign mutational probabilities, and Pareto optimize. The final phase, <underline>Analysis</underline>, is where the user examines the RESISTOR-provided output of Pareto ranks and low-energy molecular ensembles. The details involved in each of these steps are explained comprehensively in this STAR Protocol.</p></caption><graphic xlink:href="gr1"/></fig></p>
    <sec id="sec1.1">
      <title>Hardware and software</title>
      <p id="p0055">RESISTOR requires a minimum of 32 GiB of RAM and 5 GiB of free hard disk space. You also will need to have a good text editor on your computer: vim, emacs, or any other text editor that can be used for editing ASCII characters will do; programs like Microsoft Word or LibreOffice Writer will not. Our demonstration of the protocol is on a Linux operating system, although with minor adjustments the process below could be carried out on Windows and macOS operating systems.</p>
    </sec>
    <sec id="sec1.2">
      <title>Installing the Software Dependencies</title>
      <p id="p0060">
        <disp-quote>
          <p>
            <inline-graphic xlink:href="fx2.gif"/>
            <bold>Timing: 20 min</bold>
          </p>
        </disp-quote>
      </p>
      <p id="p0065">RESISTOR requires Java 17, Miniconda, AmberTools, Julia, and OSPREY.<list list-type="simple" id="olist0010"><list-item id="o0010"><label>1.</label><p id="p0070">Install Java 17<list list-type="simple" id="olist0015"><list-item id="o0015"><label>a.</label><p id="p0075">Download an archive for the latest version of Java 17 for your platform from <ext-link ext-link-type="uri" xlink:href="https://jdk.java.net/archive/" id="intref0015">https://jdk.java.net/archive/</ext-link></p></list-item><list-item id="o0020"><label>b.</label><p id="p0080">Extract the archive to a location on your computer, e.g., $HOME/java/jdk-17.0.2.</p></list-item><list-item id="o0025"><label>c.</label><p id="p0085">In your shell’s profile, set the JAVA_HOME environment variable to the location you extracted the archive to, and add the java executable to your path, e.g.,<boxed-text id="dtbox1"><p id="p0090">export JAVA_HOME=$HOME/java/jdk-17.0.2</p><p id="p9787">export PATH=$PATH:$JAVA_HOME/bin</p></boxed-text></p></list-item><list-item id="o0030"><label>d.</label><p id="p0110">Verify java is available on your shell’s path by opening a new terminal window, typing java -version, and hitting enter. You should see output like the following:<boxed-text id="dtbox3"><p id="p0115">&gt; java -version</p><p id="p8984">openjdk version "17.0.2" 2022-01-18</p><p id="p9187">OpenJDK Runtime Environment (build 17.0.2+8-86)</p><p id="p9287">OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing)</p></boxed-text></p><p id="p0135"><xref rid="mmc3" ref-type="supplementary-material">Video S1</xref> demonstrates this procedure on Fedora Linux.</p></list-item></list></p></list-item></list><list list-type="simple" id="olist0020"><list-item id="o0035"><label>2.</label><p id="p0160">Install Python using Miniconda<list list-type="simple" id="olist0025"><list-item id="o0040"><label>a.</label><p id="p0165">Download the latest Python 3 version of Miniconda from <ext-link ext-link-type="uri" xlink:href="https://docs.conda.io/en/latest/miniconda.html" id="intref0020">https://docs.conda.io/en/latest/miniconda.html</ext-link>.</p></list-item><list-item id="o0045"><label>b.</label><p id="p0170">Run the interactive installer, e.g.,:<boxed-text id="dtbox5"><p id="p0175">&gt; sh Miniconda3-latest-Linux-x86_64.sh</p></boxed-text></p></list-item><list-item id="o0050"><label>c.</label><p id="p0185">When the installer asks you “Do you wish the installer to initialize Miniconda3</p><p id="p0190"><italic>by running conda init? [yes|no]</italic>”, type yes and hit enter.</p></list-item><list-item id="o0055"><label>d.</label><p id="p0195">Close and re-open your shell.</p></list-item><list-item id="o0060"><label>e.</label><p id="p0200">Now, when you log into your shell, a Miniconda environment is activated. Run the following command so its environment is <italic>not</italic> activated by default.<boxed-text id="dtbox7"><p id="p0205">&gt; conda config --set auto_activate_base false</p></boxed-text></p><p id="p0210"><xref rid="mmc4" ref-type="supplementary-material">Video S2</xref> demonstrates these steps on Fedora Linux.</p></list-item></list></p></list-item></list><list list-type="simple" id="olist0030"><list-item id="o0065"><label>3.</label><p id="p0220">Install AmberTools<list list-type="simple" id="olist0035"><list-item id="o0070"><label>a.</label><p id="p0225">Install AmberTools22 using the installation instructions for “Binary distribution via Conda” on <ext-link ext-link-type="uri" xlink:href="https://ambermd.org/GetAmber.php#ambertools" id="intref0025">https://ambermd.org/GetAmber.php#ambertools</ext-link>. In short:<boxed-text id="dtbox9"><p id="p0230">&gt; conda create --name AmberTools22</p><p id="p0235">&gt; conda activate AmberTools22</p><p id="p0240">(AmberTools22)&gt; conda install -c conda-forge ambertools=22 compilers</p></boxed-text></p></list-item><list-item id="o0075"><label>b.</label><p id="p0260">To verify that AmberTools is correctly installed, type:<boxed-text id="dtbox11"><p id="p0265">&gt; antechamber -h</p></boxed-text></p><p id="p0270">A help message for the antechamber program should be displayed.</p><p id="p0275"><xref rid="mmc5" ref-type="supplementary-material">Video S3</xref> demonstrates these steps on Fedora Linux.<disp-quote><p><bold><italic>Optional:</italic></bold> You can install the conda-packaged yamllint program into this conda environment. Yamllint is used to check the syntactic validity of YAML documents:</p></disp-quote><boxed-text id="dtbox12"><p id="p0280">&gt; conda activate AmberTools22</p><p id="p7982">(AmberTools22)&gt; conda install -c conda-forge yamllint</p></boxed-text></p><p id="p0290">If you choose to install yamllint, you should also create a default configuration file that disables its line length check. To do so, create the file $HOME/.config/yamllint/config (and the intermediary directories as necessary), and add the following content:<boxed-text id="dtbox13"><p id="p0295">extends: default</p><p id="p0300">rules:</p><p id="p7981"> line-length: disable</p></boxed-text></p></list-item></list></p></list-item></list><list list-type="simple" id="olist0040"><list-item id="o0080"><label>4.</label><p id="p0340">Install Julia<list list-type="simple" id="olist0045"><list-item id="o0085"><label>a.</label><p id="p0345">Download and extract the latest stable release of Julia. RESISTOR was developed using Julia v1.6, but any v1 release of Julia post Julia 1.6 should work.<list list-type="simple" id="olist0230"><list-item id="o0090"><label>i.</label><p id="p0350">Go to <ext-link ext-link-type="uri" xlink:href="https://julialang.org/downloads/" id="intref0030">https://julialang.org/downloads/</ext-link> to get the latest Julia package.</p></list-item><list-item id="o0095"><label>ii.</label><p id="p0355">Download the architecture-specific Linux archive to your computer.</p></list-item><list-item id="o0100"><label>iii.</label><p id="p0360">Extract the archive to a location on your computer, e.g., $HOME/julia/julia1.8</p></list-item></list></p></list-item><list-item id="o0105"><label>b.</label><p id="p0365">In your shell’s profile, add the executable to your path, e.g.,<boxed-text id="dtbox17"><p id="p0370">export JULIA_HOME=$HOME/julia/julia1.8</p><p id="p7370">export PATH=$PATH:$JULIA_HOME/bin</p></boxed-text></p></list-item><list-item id="o0110"><label>c.</label><p id="p0390">Close and re-open your shell. Then, to verify that Julia is correctly installed, type:<boxed-text id="dtbox19"><p id="p0395">&gt; julia --version</p></boxed-text></p><p id="p0400">which should print out the version of Julia you downloaded.</p><p id="p0405"><xref rid="mmc6" ref-type="supplementary-material">Video S4</xref> demonstrates these steps on Fedora Linux.</p></list-item></list></p></list-item></list><list list-type="simple" id="olist0050"><list-item id="o0115"><label>5.</label><p id="p0415">Install OSPREY with RESISTOR<list list-type="simple" id="olist0055"><list-item id="o0120"><label>a.</label><p id="p0420">Download OSPREY version 3.3 from <ext-link ext-link-type="uri" xlink:href="https://github.com/donaldlab/OSPREY3/releases/3.3-resistor" id="intref0035">https://github.com/donaldlab/OSPREY3/releases/3.3-resistor</ext-link></p></list-item><list-item id="o0125"><label>b.</label><p id="p0425">Extract the OSPREY distribution:<boxed-text id="dtbox21"><p id="p0430">&gt; tar --file osprey-3.3.tar --extract</p></boxed-text></p></list-item><list-item id="o0130"><label>c.</label><p id="p0440">Add the OSPREY executable to your PATH for simplified access. Assuming you have extracted the archive in the previous step in your home directory, add the following line to your shell’s profile file:<boxed-text id="dtbox23"><p id="p0445">export OSPREY_HOME=$HOME/osprey-3.3</p><p id="p7371">export PATH=$PATH:$OSPREY_HOME/bin</p></boxed-text></p></list-item><list-item id="o0135"><label>d.</label><p id="p0465">Verify you have OSPREY on your path by executing the following command in the terminal, which should display help text:<boxed-text id="dtbox25"><p id="p0470">&gt; osprey affinity --help</p></boxed-text></p><p id="p0475"><xref rid="mmc7" ref-type="supplementary-material">Video S5</xref> demonstrates this procedure on Fedora Linux. If you do not see the help text, see <xref rid="sec5.1" ref-type="sec">troubleshooting 1</xref>.</p></list-item></list></p></list-item></list></p>
      <p id="p0485">
        <supplementary-material content-type="local-data" id="mmc3">
          <caption>
            <title>Video S1. Demonstration of downloading and installing Java 17, related to installing the software dependencies step 1</title>
          </caption>
          <media xlink:href="mmc3.mp4"/>
        </supplementary-material>
      </p>
      <p id="p0490">
        <supplementary-material content-type="local-data" id="mmc4">
          <caption>
            <title>Video S2. Demonstration of downloading and installing Miniconda, related to installing the software dependencies step 2</title>
          </caption>
          <media xlink:href="mmc4.mp4"/>
        </supplementary-material>
      </p>
      <p id="p0495">
        <supplementary-material content-type="local-data" id="mmc5">
          <caption>
            <title>Video S3. Demonstration of installing AmberTools into a conda environment, related to installing the software dependencies step 3</title>
          </caption>
          <media xlink:href="mmc5.mp4"/>
        </supplementary-material>
      </p>
      <p id="p0500">
        <supplementary-material content-type="local-data" id="mmc6">
          <caption>
            <title>Video S4. Demonstration of downloading and installing Julia, related to installing the software dependencies step 4</title>
          </caption>
          <media xlink:href="mmc6.mp4"/>
        </supplementary-material>
      </p>
      <p id="p0505">
        <supplementary-material content-type="local-data" id="mmc7">
          <caption>
            <title>Video S5. Demonstration of downloading and installing OSPREY, related to installing the software dependencies step 5</title>
          </caption>
          <media xlink:href="mmc7.mp4"/>
        </supplementary-material>
      </p>
    </sec>
    <sec id="sec1.3">
      <title>Obtaining the sequence and structure files</title>
      <p id="p0510">
        <disp-quote>
          <p>
            <inline-graphic xlink:href="fx2.gif"/>
            <bold>Timing: &lt;</bold>
            <bold>1 h</bold>
          </p>
        </disp-quote>
        <list list-type="simple" id="olist0060">
          <list-item id="o0140">
            <label>6.</label>
            <p id="p0515">Download your positive and negative design structure files<list list-type="simple" id="olist0065"><list-item id="o0145"><label>a.</label><p id="p0520">Navigate to the Protein Data Bank (<ext-link ext-link-type="uri" xlink:href="https://www.rcsb.org/" id="intref0040">https://www.rcsb.org/</ext-link>) in your browser.</p></list-item><list-item id="o0150"><label>b.</label><p id="p0525">Search for the protein of interest. You will need to download a structure of the protein bound to the drug and the protein interacting with the endogenous ligand.</p></list-item><list-item id="o0155"><label>c.</label><p id="p0530">For ERK2 bound to SCH7, search the Protein Data Bank for PDB ID 4qta<xref rid="bib12" ref-type="bibr"><sup>12</sup></xref> and download the file in PDB format.</p></list-item><list-item id="o0160"><label>d.</label><p id="p0535">For ERK2 bound to AMP-PNP (adenylyl-imidodiphosphate, an analog of ATP), search the Protein Data Bank by PDB ID 2y9q<xref rid="bib13" ref-type="bibr"><sup>13</sup></xref> and download the file in PDB format.</p></list-item></list></p>
          </list-item>
        </list>
        <list list-type="simple" id="olist0070">
          <list-item id="o0165">
            <label>7.</label>
            <p id="p0540">Download the coding DNA sequence.<disp-quote><p><bold><italic>Note:</italic></bold> There are many places on the internet to download DNA sequences. For sequences of proteins implicated in carcinogenesis, such as ERK2, the COSMIC database<xref rid="bib14" ref-type="bibr"><sup>14</sup></xref> is one such good choice.</p></disp-quote><list list-type="simple" id="olist0075"><list-item id="o0170"><label>a.</label><p id="p0545">In a web browser, navigate to <ext-link ext-link-type="uri" xlink:href="https://cancer.sanger.ac.uk/cosmic" id="intref0045">https://cancer.sanger.ac.uk/cosmic</ext-link>.</p></list-item><list-item id="o0175"><label>b.</label><p id="p0550">Search for ERK2 and go to the gene view.</p></list-item><list-item id="o0180"><label>c.</label><p id="p0555">Download the cDNA sequence (ENST00000215832.10) in FASTA file format.</p></list-item></list></p>
          </list-item>
        </list>
        <list list-type="simple" id="olist0080">
          <list-item id="o0185">
            <label>8.</label>
            <p id="p0560">Choose your cancer-type specific mutational probabilities JSON file.<list list-type="simple" id="olist0085"><list-item id="o0190"><label>a.</label><p id="p0565">Identify the probabilities file you need. For this protocol, we will use the melanoma probabilities file, <italic>melanoma.json.</italic></p></list-item><list-item id="o0195"><label>b.</label><p id="p0570">Mark down the path to this file, which you will use in Assigning Pareto Ranks step 11.<disp-quote><p><bold><italic>Note:</italic></bold> The RESISTOR directory within the OSPREY distribution (osprey-3.3/resistor) contains mutational probability files for melanoma, non-small cell lung cancer, stomach cancer and pancreatic cancer. It is also possible to create your own mutational probabilities file, which is covered elsewhere.<xref rid="bib15" ref-type="bibr"><sup>15</sup></xref></p></disp-quote><disp-quote><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> Ensuring that the following prerequisites are met helps avoid downstream prediction problems: 1. When possible, use high-quality, high-resolution structures. While the cut-off for resolution is still a matter of discussion in the scientific community, previous successful designs have used X-Ray diffraction resolutions ranging between 1.4 and 3.15 Å.<xref rid="bib6" ref-type="bibr"><sup>6</sup></xref><sup>,</sup><xref rid="bib7" ref-type="bibr"><sup>7</sup></xref><sup>,</sup><xref rid="bib16" ref-type="bibr"><sup>16</sup></xref><sup>,</sup><xref rid="bib17" ref-type="bibr"><sup>17</sup></xref><sup>,</sup><xref rid="bib18" ref-type="bibr"><sup>18</sup></xref> We have also had success with cryo-EM resolutions between 3.4 and 11.5 Å. For NMR structures, we recommend that the structure determination use RDCs; 2. Check that the residue numbers and amino acid types in the positive and negative protein structures are the same, e.g., ALA 10 in the structure for the positive design and ALA 10 in the structure for the negative design refer to the same residue; and 3. that the cDNA sequence translates to the amino sequence in the structure files, i.e., they represent the same genetic variant. Furthermore, the FASTA file must begin with the codon that translates to residue number 1. In this example, PDB ID <ext-link ext-link-type="uri" xlink:href="pdb:4qta" id="intref0050">4qta</ext-link> (ERK2:SCH7) has a resolution of 1.45 Å, PDB ID <ext-link ext-link-type="uri" xlink:href="pdb:2y9q" id="intref0055">2y9q</ext-link> (ERK2:AMP-PNP) has a resolution of 1.55 Å, and the residue numbering in the two structures are the same and correspond to the canonical numbering also used in the FASTA file. See <xref rid="mmc8" ref-type="supplementary-material">Video S6</xref> for a demonstration of carrying out these checks.</p></disp-quote></p><p id="p0575">If your checks indicate discrepancies exist, you will need to manipulate the files to resolve them. As the PDB and FASTA file formats are standard in the fields of structural biology and bioinformatics there are many tools available for their manipulation, including Maestro<xref rid="bib19" ref-type="bibr"><sup>19</sup></xref> for manipulating structural information. Yet as both file formats are defined in human-readable ASCII text, oftentimes the simplest way to make any necessary tweaks in the files is with a standard text editor, such as emacs or vim.</p><p id="p0580">In cases where empirical structures are not available, it is possible to use docking, homology modeling, or other computational modeling techniques to generate structures.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref><sup>,</sup><xref rid="bib6" ref-type="bibr"><sup>6</sup></xref><sup>,</sup><xref rid="bib7" ref-type="bibr"><sup>7</sup></xref><sup>,</sup><xref rid="bib17" ref-type="bibr"><sup>17</sup></xref><sup>,</sup><xref rid="bib20" ref-type="bibr"><sup>20</sup></xref> For example, computational tools such as Modeller<xref rid="bib21" ref-type="bibr"><sup>21</sup></xref> or Alphafold<xref rid="bib22" ref-type="bibr"><sup>22</sup></xref> could be used to predict an initial protein structure, and docking tools such as AutoDock Vina<xref rid="bib23" ref-type="bibr"><sup>23</sup></xref> or those included in Maestro<xref rid="bib19" ref-type="bibr"><sup>19</sup></xref> could be used to dock the positive and negative design ligands.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref><sup>,</sup><xref rid="bib3" ref-type="bibr"><sup>3</sup></xref> With the recent explosion of available structural models, such as the Alphafold Protein Structure Database,<xref rid="bib24" ref-type="bibr"><sup>24</sup></xref> it may even be the case that a computationally predicted starting structure already exists. When taking such an approach, it is critical to have high confidence in the accuracy of any computationally generated structures as RESISTOR is very sensitive to variation in structural input.</p></list-item></list></p>
          </list-item>
        </list>
      </p>
      <p id="p0585">
        <supplementary-material content-type="local-data" id="mmc8">
          <caption>
            <title>Video S6. Demonstration of how to ensure a consistent numbering scheme is used among the structure and sequence file inputs, related to obtaining the sequence and structure files steps 6 and 7</title>
          </caption>
          <media xlink:href="mmc8.mp4"/>
        </supplementary-material>
      </p>
    </sec>
  </sec>
  <sec id="sec7">
    <title>Key resources table</title>
    <p id="p1580">
      <table-wrap position="float" id="undtbl1">
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th>REAGENT or RESOURCE</th>
              <th>SOURCE</th>
              <th>IDENTIFIER</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colspan="3">
                <bold>Deposited data</bold>
              </td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td>Model of ERK2:AMP-PNP protein structure</td>
              <td>Garai et al., 2012<xref rid="bib13" ref-type="bibr"><sup>13</sup></xref></td>
              <td>(PDB: <ext-link ext-link-type="uri" xlink:href="pdb:2y9q" id="intref0090">2y9q</ext-link>)</td>
            </tr>
            <tr>
              <td>Model of ERK2:SCH7 protein complex structure</td>
              <td>Chaikuad et al., 2014<xref rid="bib12" ref-type="bibr"><sup>12</sup></xref></td>
              <td>(PDB: <ext-link ext-link-type="uri" xlink:href="pdb:4qta" id="intref0095">4qta</ext-link>)</td>
            </tr>
            <tr>
              <td>cDNA of ERK2</td>
              <td>Tate et al., 2019<xref rid="bib14" ref-type="bibr"><sup>14</sup></xref></td>
              <td>ENST00000215832.10</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td colspan="3">
                <bold>Software and algorithms</bold>
              </td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td>OSPREY 3.3</td>
              <td>Hallen et al., 2018<xref rid="bib10" ref-type="bibr"><sup>10</sup></xref></td>
              <td>
                <ext-link ext-link-type="uri" xlink:href="https://github.com/donaldlab/OSPREY3/releases/3.3-resistor" id="intref0100">https://github.com/donaldlab/OSPREY3/releases/3.3-resistor</ext-link>
              </td>
            </tr>
            <tr>
              <td>AmberTools22</td>
              <td>Case et al., 2022<xref rid="bib26" ref-type="bibr"><sup>25</sup></xref></td>
              <td>
                <ext-link ext-link-type="uri" xlink:href="http://ambermd.org/GetAmber.php" id="intref0105">http://ambermd.org/GetAmber.php</ext-link>
              </td>
            </tr>
            <tr>
              <td>Maestro</td>
              <td>Schrödinger, LLC</td>
              <td>
                <ext-link ext-link-type="uri" xlink:href="https://www.schrodinger.com/products/maestro" id="intref0110">https://www.schrodinger.com/products/maestro</ext-link>
              </td>
            </tr>
            <tr>
              <td>Miniconda</td>
              <td>Anaconda, Inc.</td>
              <td>
                <ext-link ext-link-type="uri" xlink:href="https://docs.conda.io/en/latest/miniconda.html" id="intref0115">https://docs.conda.io/en/latest/miniconda.html</ext-link>
              </td>
            </tr>
            <tr>
              <td>Yamllint</td>
              <td>Vergé, 2023<xref rid="bib27" ref-type="bibr"><sup>26</sup></xref></td>
              <td><ext-link ext-link-type="uri" xlink:href="https://anaconda.org/conda-forge/yamllint" id="intref0120">https://anaconda.org/conda-forge/yamllint</ext-link>; Vergé A. Yamllint - A Linter for YAML Files. 2023.</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </p>
  </sec>
  <sec id="sec2">
    <title>Step-by-step method details</title>
    <p id="p0590">Here we describe the step-by-step details of how to use RESISTOR. These steps include how to 1) specify the K∗ positive and negative designs; 2) run OSPREY to compute each mutant’s positive and negative K∗ scores; 3) process the data to assign mutational probabilities and hotspot scores; and, 4) assign Pareto ranks to each prospective mutant. As a demonstration case, we use RESISTOR to predict ERK2 mutants likely to arise in melanoma that may ablate the efficacy of the ERK1/2 inhibitor SCH7.</p>
    <sec id="sec2.1">
      <title>Specifying the K∗ positive and negative designs</title>
      <p id="p0595">
        <disp-quote>
          <p>
            <inline-graphic xlink:href="fx2.gif"/>
            <bold>Timing: 1 h</bold>
          </p>
        </disp-quote>
      </p>
      <p id="p0600">In this step, we create the YAML files that are used to specify the input for the positive and negative K∗ designs. Positive design refers to improving the interaction between a protein and its endogenous ligand, which in this context is ERK2 with ATP. Negative design refers to ablating the binding between a protein and its targeting inhibitor, here ERK2 and SCH7. By this point, we assume you have completed the steps in the section <xref rid="sec1" ref-type="sec">before you begin</xref>, including having downloaded the PDB structure files <italic>4qta.pdb</italic> and <italic>2y9q.pdb</italic>, and the FASTA-formatted cDNA sequence file <italic>ENST00000215832.10.fasta</italic>.<list list-type="simple" id="olist0090"><list-item id="o0200"><label>1.</label><p id="p0605">Prepare each of the structure files.<list list-type="simple" id="olist0095"><list-item id="o0205"><label>a.</label><p id="p0610">Open a terminal shell and activate the AmberTools environment you created in <xref rid="sec1" ref-type="sec">before you begin</xref>:<boxed-text id="dtbox27"><p id="p0615">&gt; conda activate AmberTools22</p></boxed-text></p></list-item><list-item id="o0210"><label>b.</label><p id="p0625">Run <italic>pdb4amber</italic> on the two ERK2 structures to add any missing atoms:<boxed-text id="dtbox29"><p id="p0630">&gt; pdb4amber --add-missing-atoms -i 2y9q.pdb -o 2y9q.p4a.pdb</p><p id="p9473">&gt; pdb4amber --add-missing-atoms -i 4qta.pdb -o 4qta.p4a.pdb</p></boxed-text><disp-quote><p><bold><italic>Note:</italic></bold><italic>pdb4amber</italic> renumbers the residues in the input structures, starting from 1. We would like to keep our canonical residue numbering, and luckily <italic>pdb4amber</italic> outputs a mapping file from the original numbers to the new numbers it assigned the residues. This file is titled the name of the input file for <italic>pdb4amber</italic>, suffixed with <italic>_renum.txt</italic>, e.g., 2y9q.p4a_renum.txt. Within the OSPREY distribution there’s a program called <italic>p4a-undo.py</italic> (found in the osprey3.3/resistor directory) which re-assigns the original numbering and chain identifiers.</p></disp-quote></p></list-item><list-item id="o0215"><label>c.</label><p id="p0650">Using the same AmberTools22 conda environment, run p4a-undo.py with each of the two output structures from <italic>pdb4amber</italic>:<boxed-text id="dtbox31"><p id="p0655">&gt; python p4a-undo.py 2y9q.p4a.pdb 2y9q.p4a_renum.txt &gt; 2y9q.renum.pdb</p><p id="p9482">&gt; python p4a-undo.py 4qta.p4a.pdb 4qta.p4a_renum.txt &gt; 4qta.renum.pdb</p></boxed-text></p></list-item><list-item id="o0220"><label>d.</label><p id="p0675">Add hydrogens to the AMP-PNP and SCH7 structures using a molecular modeling program such as Maestro.<disp-quote><p><bold><italic>Note:</italic></bold> Epik<xref rid="bib25" ref-type="bibr"><sup>27</sup></xref> in Maestro<xref rid="bib19" ref-type="bibr"><sup>19</sup></xref> is quite good at correctly predicting <inline-formula><mml:math id="M3" altimg="si5.gif"><mml:mtext>p</mml:mtext><mml:msub><mml:mi>K</mml:mi><mml:mi>a</mml:mi></mml:msub></mml:math></inline-formula> and protonation states for small molecules. You will also need to compute the net charge of the small molecules for step 3, which Epik and Maestro provide. SCH7’s net charge is +1, whereas AMP-PNP has a net charge of -4.</p></disp-quote></p></list-item><list-item id="o0225"><label>e.</label><p id="p0680">Save the resulting protonated structures as <italic>2y9q.h.pdb</italic> and <italic>4qta.h.pdb.</italic><disp-quote><p><inline-graphic xlink:href="fx3.gif"/><bold>CRITICAL:</bold> Ensure when saving these protonated structures that the resulting PDB files do not contain trailing whitespace (if it does, remove it using your text editor) and the chain identifiers have been correctly preserved.</p></disp-quote></p></list-item></list></p></list-item></list><list list-type="simple" id="olist0100"><list-item id="o0230"><label>2.</label><p id="p0685">Split the structure files into their protein and ligand components.<list list-type="simple" id="olist0105"><list-item id="o0235"><label>a.</label><p id="p0690">Open <italic>2y9q.h.pdb</italic> in a text editor.</p></list-item><list-item id="o0240"><label>b.</label><p id="p0695">Extract the ATOM records corresponding to ERK2 and save them to a file called <italic>2y9q.erk2.pdb.</italic></p></list-item><list-item id="o0245"><label>c.</label><p id="p0700">Extract the ATOM records corresponding to AMP-PNP and save them as a file called <italic>2y9q.amppnp.pdb.</italic></p></list-item><list-item id="o0250"><label>d.</label><p id="p0705">Do the same for <italic>4qta.h.pdb</italic>, saving the corresponding files as <italic>4qta.erk2.pdb</italic> and <italic>4qta.sch7.pdb.</italic></p></list-item></list></p></list-item><list-item id="o0255"><label>3.</label><p id="p0710">Generate the forcefield parameters and connectivity templates for SCH7 and AMP-PNP.<list list-type="simple" id="olist0110"><list-item id="o0260"><label>a.</label><p id="p0715">Activate your AmberTools environment, as in step 1a.</p></list-item><list-item id="o0265"><label>b.</label><p id="p0720">Use the <italic>antechamber</italic> program from AmberTools to generate template files (files with a .<italic>prepi</italic> extension), and <italic>parmchk2</italic> to generate forcefield modification files (files with a <italic>.frcmod</italic> extension):</p></list-item></list></p></list-item></list><boxed-text id="dtbox33"><p id="p0725">&gt; antechamber -i 2y9q.amppnp.pdb -fi pdb -o amppnp.prepi -fo prepi -c bcc -nc -4</p><p id="p7787">&gt; parmkch2 -i amppnp.prepi -f prepi -a Y -o amppnp.frcmod</p><p id="p9885">&gt; antechamber -i 4qta.sch7.pdb -fi pdb -o sch7.prepi -fo prepi -c bcc -nc +1</p><p id="p7376">&gt; parmkch2 -i sch7.prepi -f prepi -a Y -o sch7.frcmod</p></boxed-text><disp-quote><p><bold><italic>Note:</italic></bold> For more information about these and other possible flags to the antechamber and parmchk2 programs, see section 16.1 of the Amber 22 Reference Manual, available from <ext-link ext-link-type="uri" xlink:href="http://www.ambermd.org" id="intref0060">http://www.ambermd.org</ext-link>.<xref rid="bib26" ref-type="bibr"><sup>25</sup></xref></p></disp-quote><list list-type="simple" id="olist0115"><list-item id="o0270"><label>4.</label><p id="p0745">Create template coordinates for the small molecules.<list list-type="simple" id="olist0120"><list-item id="o0275"><label>a.</label><p id="p0750">Locate the <italic>gen-templ-coords.sh</italic> script you will use to generate the template coordinates (in the osprey3.3/resistor directory of the OSPREY distribution).</p></list-item><list-item id="o0280"><label>b.</label><p id="p0755">Add the executable bit to the script by running the following command:<boxed-text id="dtbox34"><p id="p0760">&gt; chmod u+x gen-templ-coords.sh</p></boxed-text></p></list-item><list-item id="o0285"><label>c.</label><p id="p0770">Run <italic>gen-templ-coords.sh</italic> once for each of the ligands, using Unix pipe redirection to save the output. <italic>gen-templ-coords.sh</italic> expects as input the path of the ligand structure and the three-letter residue name of the ligand used in the structure:<boxed-text id="dtbox36"><p id="p0775">&gt; ./gen-templ-coords.sh 2y9q.amppnp.pdb ANP &gt; amppnp.tc</p><p id="p7377">&gt; ./gen-templ-coords.sh 4qta.sch7.pdb 38Z &gt; sch7.tc</p></boxed-text></p></list-item></list></p></list-item></list><list list-type="simple" id="olist0125"><list-item id="o0290"><label>5.</label><p id="p0795">Generate rotamers for AMP-PNP and SCH7<list list-type="simple" id="olist0130"><list-item id="o0295"><label>a.</label><p id="p0800">To allow the ligands to translate, rotate, and flex slightly, we define the flexible dihedrals for the ligands.</p></list-item><list-item id="o0300"><label>b.</label><p id="p0805">Determine the molecule-specific dihedrals using Maestro or other molecular visualization software. <xref rid="fig2" ref-type="fig">Figure 2</xref> demonstrates determining the dihedrals in Maestro.<fig id="fig2"><label>Figure 2</label><caption><p>Demonstration of using Maestro to compute the H62-N6-C6-C5 and C2′-C1′-N9-C4 dihedral angles for the extra rotamers definition of AMP-PNP</p><p>The red lines and numbers show the dihedrals and the computed angles. In <xref rid="fig3" ref-type="fig">Figure 3</xref>, these dihedrals are included in the rotamer definition for AMP-PNP. The values -3.8 and 106.9 are rounded to their nearest whole value, -4 and 107, respectively.</p></caption><graphic xlink:href="gr2"/></fig></p></list-item><list-item id="o0305"><label>c.</label><p id="p0810">Create a text file listing the dihedrals. The format of the file, and the rotamer specification for AMP-PNP is shown in <xref rid="fig3" ref-type="fig">Figure 3</xref>.<fig id="fig3"><label>Figure 3</label><caption><p>Definition of a rotamer for AMP-PNP. We specify 10 dihedrals</p><p>These dihedrals allow K∗ in OSPREY to minimize continuously in a voxel around the dihedrals to search for low-energy conformations. This rotamer is defined by its atom names from the PDB file, 2y9q. Lines that begin with an exclamation point (!) are comments. The comments here explain the structure of the file.</p></caption><graphic xlink:href="gr3"/></fig></p></list-item><list-item id="o0310"><label>d.</label><p id="p0815">Save the file as <italic>amppnp.rot.</italic></p></list-item><list-item id="o0315"><label>e.</label><p id="p0820">Repeat steps a-d for SCH7, saving that file as <italic>sch7.rot.</italic></p></list-item></list></p></list-item></list><list list-type="simple" id="olist0135"><list-item id="o0320"><label>6.</label><p id="p0825">Create a template YAML file for the ERK2:AMP-PNP positive K∗ design.<list list-type="simple" id="olist0140"><list-item id="o0325"><label>a.</label><p id="p0830">The OSPREY package contains a template K∗ affinity YAML file, located at osprey3.3/resistor/affinity.yaml. Make a copy of this file:<boxed-text id="dtbox38"><p id="p0835">&gt; cp affinity.yaml erk2-amppnp.yaml</p></boxed-text></p></list-item><list-item id="o0330"><label>b.</label><p id="p0845">Open the new file in your text editor and incorporate the files you’ve created thus far into the YAML file:<list list-type="simple" id="olist0145"><list-item id="o0335"><label>i.</label><p id="p0850">Copy the contents of 2y9q.erk2.pdb as the value for the protein.coordinates key.</p></list-item><list-item id="o0340"><label>ii.</label><p id="p0855">Copy the contents of 2y9q.amppnp.pdb as the value for the ligand.coordinates key.</p></list-item><list-item id="o0345"><label>iii.</label><p id="p0860">Copy the contents of amppnp.tc as the value for the ligand.extra_template_coordinates key.</p></list-item><list-item id="o0350"><label>iv.</label><p id="p0865">Copy the contents of <italic>amppnp.prepi</italic> as the value of the ligand.extra_templates key.</p></list-item><list-item id="o0355"><label>v.</label><p id="p0870">Copy the contents of <italic>amppnp.rot</italic> as the value of the ligand.extra_rotamers key.<disp-quote><p><bold><italic>Optional:</italic></bold> You can use a YAML syntax validator, such as yamllint,<xref rid="bib27" ref-type="bibr"><sup>26</sup></xref> to verify you have input syntactically valid YAML.</p></disp-quote></p></list-item></list></p></list-item><list-item id="o0360"><label>c.</label><p id="p0875">To verify that you have created the YAML file correctly, run OSPREY to verify the design file:<boxed-text id="dtbox39"><p id="p08351">&gt; osprey affinity --design erk2-amppnp.yaml --verify-design</p></boxed-text></p><p id="p0885">The output of the command should look like:<boxed-text id="dtbox2"><p id="p0890">WARNING: Using incubator modules: jdk.incubator.foreign</p><p id="p0895">Design file validated.</p></boxed-text></p><p id="p0900">See <xref rid="sec5.3" ref-type="sec">troubleshooting 2</xref> if your output is different, and <xref rid="sec5.7" ref-type="sec">troubleshooting 4</xref> if the command output says it can’t parse the YAML file.</p></list-item></list></p></list-item></list><list list-type="simple" id="olist0150"><list-item id="o0365"><label>7.</label><p id="p0905">Create a template YAML file for the ERK2:SCH7 negative K∗ design.<list list-type="simple" id="olist0155"><list-item id="o0370"><label>a.</label><p id="p0910">As in step 6a, copy the template K∗ affinity YAML file:<boxed-text id="dtbox4"><p id="p0915">&gt; cp affinity.yaml erk2-sch7.yaml</p></boxed-text></p></list-item><list-item id="o0375"><label>b.</label><p id="p0920">Open <italic>erk2-sch7.yaml</italic> in your text editor and incorporate the following files into the negative design specification:<list list-type="simple" id="olist0160"><list-item id="o0380"><label>i.</label><p id="p0925">Copy the contents of <italic>4qta.erk2.pdb</italic> as the value for the protein.coordinates key.</p></list-item><list-item id="o0385"><label>ii.</label><p id="p0930">Copy the contents of <italic>4qta.sch7.pdb</italic> as the value for the ligand.coordinates key.</p></list-item><list-item id="o0390"><label>iii.</label><p id="p0935">Copy the contents of <italic>sch7.tc</italic> as the value for the ligand.extra_template_coordinates key.</p></list-item><list-item id="o0395"><label>iv.</label><p id="p0940">Copy the contents of <italic>sch7.prepi</italic> as the value for the ligand.extra_templates key.</p></list-item><list-item id="o0400"><label>v.</label><p id="p0945">Copy the contents of <italic>sch7.rot</italic> as the value for the ligand.extra_rotamers key.</p></list-item></list></p></list-item><list-item id="o0405"><label>c.</label><p id="p0950">To ensure that your YAML file is in the correct format for OSPREY, use the <italic>affinity</italic> command’s --verify-design flag to check the design file:<boxed-text id="dtbox40"><p id="p0955">&gt; osprey affinity --design erk2-sch7.yaml --verify-design</p></boxed-text></p><p id="p0960">The output of the command should look like:<boxed-text id="dtbox41"><p id="p0965">WARNING: Using incubator modules: jdk.incubator.foreign</p><p id="p0970">Design file validated.</p></boxed-text></p><p id="p0975">See <xref rid="mmc9" ref-type="supplementary-material">Video S7</xref> for a demonstration of how to do this step and see <xref rid="sec5.3" ref-type="sec">troubleshooting 2</xref> if your output is different.</p></list-item></list></p></list-item></list><list list-type="simple" id="olist0165"><list-item id="o0410"><label>8.</label><p id="p0995">Choose residues to mutate and create mutational scan designs.<list list-type="simple" id="olist0170"><list-item id="o0415"><label>a.</label><p id="p1000">Taking the files you created in steps 6 and 7, add a YAML list of objects representing these mutants as the value of the scan.residues key, as is shown in <xref rid="fig4" ref-type="fig">Figure 4</xref>.<disp-quote><p><bold><italic>Note:</italic></bold> For this example, we have chosen to investigate residues Y36, A52, I56, R67, E71, Q105, D106, L107, M108, D111, K114, L156, and C166.</p></disp-quote></p></list-item><list-item id="o0420"><label>b.</label><p id="p1005">In each of the files generated in steps 6 and 7, set the ligand as flexible by adding it to the ligand.residue_configurations key in the YAML file. <xref rid="fig5" ref-type="fig">Figure 5</xref> shows how this is set in the <italic>erk2-amppnp.yaml</italic> and <italic>erk2-sch7.yaml</italic> files.</p></list-item><list-item id="o0425"><label>c.</label><p id="p1010">After adding these fields, again verify the syntax of the design files is correct:<boxed-text id="dtbox44"><p id="p1015">&gt; osprey affinity --design erk2-sch7.yaml --verify-design</p><p id="p7378">&gt; osprey affinity --design erk2-amppnp.yaml --verify-design</p></boxed-text></p></list-item></list></p></list-item></list><list list-type="simple" id="olist0175"><list-item id="o0430"><label>9.</label><p id="p1035">Generate the K∗ affinity designs for each of the point mutants.<list list-type="simple" id="olist0180"><list-item id="o0435"><label>a.</label><p id="p1040">Using the files you modified in step 8, use OSPREY to generate the positive and negative designs for each of the mutants:<boxed-text id="dtbox46"><p id="p1045">&gt; osprey affinity --design erk2-sch7.yaml --do-scan --scan-flex-distance 2.2</p><p id="p7379">&gt; osprey affinity --design erk2-amppnp.yaml --do-scan --scan-flex-distance 2.2</p></boxed-text><disp-quote><p><bold><italic>Note:</italic></bold> The --do-scan flag instructs OSPREY to generate a K∗ affinity design centered on each of the residues specified in the scan.residues key. These K∗ affinity designs each include a single mutable residue, which is set to mutate to all the other amino acids, and a flexible shell around the mutating residue. The optional --scan-flex-distance parameter denotes the radius of the OSPREY-generated flexible shell centered on the design's mutable residue. It defaults to 2 Å.</p></disp-quote></p></list-item><list-item id="o0440"><label>b.</label><p id="p1065">Verify that a positive and negative YAML design specification is created for each of the 13 residues of interest set in step 8a. The naming format of these files is <italic>{original-name}.{residue}.yaml</italic>, e.g., <italic>erk2-sch7.A36.yaml.</italic> There should be a total of 26 newly created files.</p></list-item></list></p></list-item></list></p>
      <p id="p1070">
        <fig id="fig4">
          <label>Figure 4</label>
          <caption>
            <p>Specification of the scan.residues key</p>
            <p>The value for the key is a list of objects representing residues in the structure. Each object has a chain key denoting the chain identifier in the structure, a res_num key denoting the residue number, and the aa_type key with the 3-letter amino acid code. In the example above, we specify that Y26 and A52 in chain A of the structure should be included in the scan. Below the ellipsis we would also include objects for I56, R67, E71, Q105, D106, L107, M108, D111, K114, L156, and C166.</p>
          </caption>
          <graphic xlink:href="gr4"/>
        </fig>
        <fig id="fig5">
          <label>Figure 5</label>
          <caption>
            <p>Demonstration of how to specify that the ligand should be flexible in both the positive and negative designs</p>
            <p>Left: residue 38Z on chain B at position 411 (which is SCH7) is set to be continuously flexible. Right: residue ANP on chain B at position 1359 (which is AMP-PNP) is set to be continuously flexible.</p>
          </caption>
          <graphic xlink:href="gr5"/>
        </fig>
      </p>
      <p id="p1075">
        <supplementary-material content-type="local-data" id="mmc9">
          <caption>
            <title>Video S7. Demonstration of creating the ERK2:AMP-PNP K∗ affinity YAML design file, related to specifying the K∗ positive and negative designs step 7</title>
          </caption>
          <media xlink:href="mmc9.mp4"/>
        </supplementary-material>
      </p>
    </sec>
    <sec id="sec2.2">
      <title>Running the K∗ predictions</title>
      <p id="p1080">
        <disp-quote>
          <p>
            <inline-graphic xlink:href="fx2.gif"/>
            <bold>Timing: 1 day to 1 week</bold>
          </p>
        </disp-quote>
      </p>
      <p id="p1085">The purpose of this step is to run the positive and negative K∗ mutant predictions with OSPREY. The range in expected time on this step is dependent on how many sequences you’re predicting, the number of flexible residues you’ve configured in your conformation space, and the capabilities of your computer(s). For additional background information on the interpretation of K∗ values and how they are used in predicting resistance mutations, see the <italic>Results</italic> and <italic>STAR Methods</italic> sections of Guerin et al., 2022.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref><list list-type="simple" id="olist0185"><list-item id="o0445"><label>10.</label><p id="p1090">Run the positive and negative K∗ designs.<list list-type="simple" id="olist0190"><list-item id="o0450"><label>a.</label><p id="p1095">Set the amount of memory to dedicate to the OSPREY process by exporting the JAVA_OPTS environment variable. Set this as high as you can, given the hardware you’re running the design on. Here’s how it could be set on a machine with 760GiB of RAM (while leaving some RAM for the operating system and other processes):<boxed-text id="dtbox48"><p id="p1100">&gt; export JAVA_OPTS="-Xmx720G -Xms720G"</p></boxed-text></p></list-item><list-item id="o0455"><label>b.</label><p id="p1110">Execute the <italic>affinity</italic> command in OSPREY on each of the individual mutant design files that you generated in step 9:<boxed-text id="dtbox50"><p id="p1115">&gt; osprey affinity --design {design-file} --frcmod {frcmod-file}</p></boxed-text></p><p id="p1120">where <italic>{design-file}</italic> is the path to one of the design files you generated in step 9, and <italic>{frcmod-file}</italic> is the path to the ligand-specific forcefield modification file you generated in step 3b, e.g.,:<boxed-text id="dtbox51"><p id="p1125">&gt; osprey affinity --design erk2-sch7.A36.yaml --frcmod sch7.frcmod</p></boxed-text><disp-quote><p><bold><italic>Note:</italic></bold> There are optional flags you can pass to the affinity command that could be helpful for your predictions. These flags include --save-confs, --ensemble-dir, and --cuda . --save-confs takes an integer argument and denotes the number of low-energy conformations from the K∗ molecular ensemble that OSPREY should save of each sequence. It defaults to not outputting structures; if you want structures add this argument and specify a number greater than 0. --ensemble-dir takes a path as an argument and indicates where structures should be saved. And if you have access to CUDA-enabled Nvidia GPUs, you may find that the --cuda flag substantially decreases the amount of time needed to run your designs.</p></disp-quote></p></list-item><list-item id="o0460"><label>c.</label><p id="p1140">Execute the following command to print the per-residue type K∗ predictions to the terminal screen. If you also want to save the output (both standard out and standard error) to files, you can use Unix pipes to pipe the output to the <italic>tee</italic> program:<boxed-text id="dtbox54"><p id="p1145">&gt; osprey affinity --design erk2-sch7.A36.yaml --frcmod sch7.frcmod &gt; &gt;(tee -a sch7.A36.stdout) 2&gt; &gt;(tee -a sch7.A36.stderr &gt;&amp;2)</p></boxed-text><disp-quote><p><bold><italic>Note:</italic></bold> There is an optional parameter, --epsilon, which takes a double value as an argument and defaults to 0.683 (see the <xref rid="mmc1" ref-type="supplementary-material">supplemental information</xref> of Ojewole et al. for justification for this default).<xref rid="bib2" ref-type="bibr"><sup>2</sup></xref></p></disp-quote><disp-quote><p><bold><italic>Note:</italic></bold>--epsilon must be between 0 and 1; values closer to 0 indicate a more accurate partition calculation and are thus more computationally expensive, and vice-versa. We recommend initially running K∗ affinity designs with an epsilon close to 1, such as 0.9999, and then gradually decreasing epsilon to obtain increasingly accurate K∗ scores while still completing in a reasonable amount of time.</p></disp-quote></p></list-item></list></p></list-item></list></p>
    </sec>
    <sec id="sec2.3">
      <title>Assign Pareto Ranks</title>
      <p id="p1155">
        <disp-quote>
          <p>
            <inline-graphic xlink:href="fx2.gif"/>
            <bold>Timing: 1 h</bold>
          </p>
        </disp-quote>
      </p>
      <p id="p1160">The purpose of this step is to compile and annotate the positive and negative K∗ mutant predictions with mutational signature probabilities and hotspot scores. In addition, we run the <italic>resistor</italic> program to compute the cutoff, <italic>c</italic>, from the K∗ predictions, and filter mutants that K∗ predicts not to be resistance mutants, or whose mutational probability is 0, and assign Pareto ranks.<disp-quote><p><bold><italic>Note:</italic></bold> Your positive and negative K∗ predictions from step 10 should be complete prior to beginning this step.</p></disp-quote><list list-type="simple" id="olist0195"><list-item id="o0465"><label>11.</label><p id="p1165">Compile the K∗ predictions.<list list-type="simple" id="olist0200"><list-item id="o0470"><label>a.</label><p id="p1170">Copy the template CSV file included in the OSPREY distribution (osprey3.3/resistor/resistor.csv) to <italic>erk2-resistor.csv.</italic></p></list-item><list-item id="o0475"><label>b.</label><p id="p1175">Using the output files from the predictions in step 10, which contain the <inline-formula><mml:math id="M4" altimg="si2.gif"><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:msub><mml:mi>g</mml:mi><mml:mn>10</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> K∗ scores for each of the sequences you evaluated at a particular residue location, fill out the following columns.<list list-type="simple" id="olist0205"><list-item id="o0480"><label>i.</label><p id="p1185"><italic>wild-type residue</italic> should have the 3-letter amino acid code for the wild-type residue at <italic>residue number</italic>.</p></list-item><list-item id="o0485"><label>ii.</label><p id="p1190"><italic>residue number</italic> should have the residue number of the residue.</p></list-item><list-item id="o0490"><label>iii.</label><p id="p1195"><italic>mutant residue</italic> should have the 3-letter amino acid code for the mutant residue RESISTOR is evaluating.</p></list-item><list-item id="o0495"><label>iv.</label><p id="p1200"><italic>wild-type K∗ (positive)</italic> should have the <inline-formula><mml:math id="M5" altimg="si3.gif"><mml:mrow><mml:mi mathvariant="normal">l</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:msub><mml:mi mathvariant="normal">g</mml:mi><mml:mn>10</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> K∗ score computed on the ERK2:AMP-PNP structure for <italic>residue number</italic>.</p></list-item><list-item id="o0500"><label>v.</label><p id="p1205"><italic>mutant K∗ (positive)</italic> should have the <inline-formula><mml:math id="M6" altimg="si3.gif"><mml:mrow><mml:mi mathvariant="normal">l</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:msub><mml:mi mathvariant="normal">g</mml:mi><mml:mn>10</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> K∗ score computed on the ERK2:AMP-PNP structure for <italic>residue number</italic> when <italic>mutant residue</italic> is substituted for <italic>wild-type residue</italic>.</p></list-item><list-item id="o0505"><label>vi.</label><p id="p1210"><italic>wild-type K∗ (negative)</italic> should have the <inline-formula><mml:math id="M7" altimg="si3.gif"><mml:mrow><mml:mi mathvariant="normal">l</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:msub><mml:mi mathvariant="normal">g</mml:mi><mml:mn>10</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> K∗ score computed on the ERK2:SCH7 structure for <italic>residue number</italic>.</p></list-item><list-item id="o0510"><label>vii.</label><p id="p1215"><italic>mutant K∗ (positive)</italic> should have the <inline-formula><mml:math id="M8" altimg="si3.gif"><mml:mrow><mml:mi mathvariant="normal">l</mml:mi><mml:mi mathvariant="normal">o</mml:mi><mml:msub><mml:mi mathvariant="normal">g</mml:mi><mml:mn>10</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> K∗ score computed on the ERK2:SCH772894 structure for <italic>residue number</italic> when <italic>mutant residue</italic> is substituted for <italic>wild-type residue</italic>.</p></list-item></list></p></list-item><list-item id="o0515"><label>c.</label><p id="p1220">Complete a new row for each mutant sequence you evaluated in step 10. Each positive/negative design pair from step 10 evaluated 21 different residue types in each location, meaning we must complete 21 rows for each residue. See <xref rid="fig6" ref-type="fig">Figure 6</xref> for an example of a partially completed worksheet.</p></list-item></list></p></list-item></list><list list-type="simple" id="olist0210"><list-item id="o0520"><label>12.</label><p id="p1225">Run the <italic>resistor</italic> program to assign mutational signature probabilities, filter predicted benign mutations, and assign Pareto ranks.<list list-type="simple" id="olist0215"><list-item id="o0525"><label>a.</label><p id="p1230">Open a terminal and change into the osprey3-3/resistor directory.</p></list-item><list-item id="o0530"><label>b.</label><p id="p1235">Download the required Julia dependencies:<list list-type="simple" id="olist0220"><list-item id="o0535"><label>i.</label><p id="p1240">Start the Julia interpreter with the following command:<boxed-text id="dtbox56"><p id="p1245">&gt; julia --project=.</p></boxed-text></p></list-item><list-item id="o0540"><label>ii.</label><p id="p1255">Activate Julia’s package manager by hitting the ']' key.</p></list-item><list-item id="o0545"><label>iii.</label><p id="p1260">Type instantiate and wait while the package manager downloads the dependencies.</p></list-item><list-item id="o0550"><label>iv.</label><p id="p1265">Exist the interpreter by entering CTRL-D or typing exit() and hitting enter.</p></list-item></list></p></list-item><list-item id="o0555"><label>c.</label><p id="p1270">Run the program to assign the mutational probabilities and cDNA codons to each mutant sequence:<boxed-text id="dtbox58"><p id="p1275">&gt; julia --project=. main.jl --mut-prob {mut-prob-file} --fasta {fasta-file} --identifier {id} --csv-file {csv-file} --pareto-config {pareto-config}</p></boxed-text></p><p id="p1280">where <italic>{mut-prob-file}</italic> is the path to the mutational probabilities file, <italic>{fasta-file}</italic> is the path to the cDNA file, <italic>{id}</italic> is the identifier of the sequence in <italic>{fasta-file}, {csv-file}</italic> is the path to the CSV file you created in step 11, and <italic>{pareto-config}</italic> is the path to the default Pareto optimization configuration JSON, e.g.,:<boxed-text id="dtbox59"><p id="p1285">&gt; julia --project=. main.jl --mut-prob osprey3-3/resistor/mutational-signatures/melanoma.json --fasta ./mapk1-cdna.fasta --identifier MAPK1 --csv-file erk2-resistor.csv --pareto-config osprey3-3/resistor/pareto-config.json</p></boxed-text></p><p id="p1290">This command.<list list-type="simple" id="olist0225"><list-item id="o0560"><label>i.</label><p id="p1295">Fills out the <italic>signature probability</italic> and <italic>codon</italic> columns.</p></list-item><list-item id="o0565"><label>ii.</label><p id="p1300">Filters rows whose <italic>mutant K∗ (positive)</italic> is less than 0, as this indicates the loss of function with the endogenous ligand.<xref rid="bib3" ref-type="bibr"><sup>3</sup></xref></p></list-item><list-item id="o0570"><label>iii.</label><p id="p1305">Filters rows whose <italic>signature probability</italic> is 0 (indicating that the mutant can only occur with 3 base changes).</p></list-item><list-item id="o0575"><label>iv.</label><p id="p1310">Computes the cut-off <italic>c</italic>, as defined in Equation 4 in Guerin et al.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref></p></list-item><list-item id="o0580"><label>v.</label><p id="p1315">Filters mutants whose ratio of positive to negative K∗ scores is below the cut-off.</p></list-item><list-item id="o0585"><label>vi.</label><p id="p1320">Fills out the <italic>hotspot count</italic> column by counting how many resistance mutations remain at each position after the filtering in the prior steps.</p></list-item><list-item id="o0590"><label>vii.</label><p id="p1325">Fills out the <italic>rank</italic> column by running Pareto optimization over the <italic>mutant K∗ (positive)</italic>, <italic>mutant K∗ (negative)</italic>, <italic>signature probability</italic>, and <italic>hotspot count</italic> columns.</p></list-item></list></p><p id="p1330">It outputs the completed table to standard out. You can redirect it to a file using I/O redirection in Linux or by piping the output to the <italic>tee</italic> command. <xref rid="fig7" ref-type="fig">Figure 7</xref> provides an example of the output file.<disp-quote><p><bold><italic>Note:</italic></bold> The Pareto JSON specification file is described in the <italic>README.md</italic>. By default, RESISTOR optimizes over mutational signature probability, the positive and negative K∗ scores, and the hotspot score. We've provided a template Pareto JSON specification file in the resistor directory, <italic>pareto-config.json</italic>, which specifies to optimize by maximizing a mutant's signature probability, positive design K∗ score, and hotspot score, and minimizing the mutant's negative design K∗ score. If you had other criteria to optimize over you could add these to this Pareto JSON specification file.</p></disp-quote><disp-quote><p><bold><italic>Note:</italic></bold> There are two additional optional flags to the command above that may be helpful in some circumstances. These flags are --debug and --c0. The --debug flag prints out intermediary CSV files after each filtering and computational step. It also prints the computed cut-off <italic>c</italic> to standard error. The --c0 flag allows you specify a different value for <inline-formula><mml:math id="M9" altimg="si4.gif"><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula>, for more information as to what this value is see Guerin et al.<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref></p></disp-quote></p></list-item></list></p></list-item></list><fig id="fig6"><label>Figure 6</label><caption><p>A partially completed worksheet from step 11c</p><p>The <inline-formula><mml:math id="M10" altimg="si2.gif"><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:msub><mml:mi>g</mml:mi><mml:mn>10</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> K∗ scores for the positive designs (ERK2:AMP-PNP) and negative designs (ERK2:SCH7) are put in columns D-G. Put the K∗ score, for the wild-type sequence, e.g., Q105, bound to the endogenous ligand in column D, and the mutant sequence, e.g., Q105A, bound to the endogenous ligand in column E. In columns F and G do the same for ERK2 bound to SCH7.</p></caption><graphic xlink:href="gr6"/></fig><fig id="fig7"><label>Figure 7</label><caption><p>The format of the output file resulting from running step 12c</p><p>Columns H-K are now filled out. Column H contains the computed signature probability, column I the corresponding codon from the cDNA FASTA file, column J the hotspot count, and column K the computed Pareto rank. The <inline-formula><mml:math id="M11" altimg="si2.gif"><mml:mrow><mml:mi>l</mml:mi><mml:mi>o</mml:mi><mml:msub><mml:mi>g</mml:mi><mml:mn>10</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> K∗ scores for the positive designs (ERK2:AMP-PNP) and negative designs (ERK2:SCH7) are included in columns D-G but are omitted above due to space constraints. The full output file is included in <xref rid="mmc1" ref-type="supplementary-material">Data S1</xref>.</p></caption><graphic xlink:href="gr7"/></fig></p>
    </sec>
  </sec>
  <sec id="sec3">
    <title>Expected outcomes</title>
    <p id="p1345">RESISTOR provides a protocol for ranking potential resistance mutations to existing and prospective therapeutics. In an earlier publication,<xref rid="bib1" ref-type="bibr"><sup>1</sup></xref> we used RESISTOR to successfully predict resistance mutations in BRAF and EGFR. In this example, we have applied RESISTOR to predicting resistance mutations to SCH7, an ERK1/2 inhibitor.</p>
    <p id="p1350">As an outcome, the predicted resistance mutations, as well as their Pareto ranks, are contained in the file output in step 12. With that file, one can analyze the predicted change in a mutant’s positive K∗ score and negative K∗ score, meaning that RESISTOR produces not only binary predictions of a mutant’s resistance or sensitivity profile but also whether a mutation is resistant because of increased binding to the endogenous ligand, decreased binding to the therapeutic, or a combination of the two factors. It also uses a specific cancer type’s mutational signature to predict how likely it is that a putative resistance mutation will occur in a specific cancer patient population. Additionally, as mentioned in step 10, RESISTOR’s use of OSPREY’s K∗ algorithm allows us to output molecular ensembles of low energy conformations for structural analysis. See <xref rid="fig8" ref-type="fig">Figure 8</xref> for an example of the OSPREY-generated low-energy structural ensemble.<fig id="fig8"><label>Figure 8</label><caption><p>OSPREY-generated structural ensembles of ERK2 E71K</p><p>Top: ERK2 E71K with SCH7. R70 and 71K are labeled, and SCH7 is in green. Bottom: ERK2 E71K with AMP-PNP. R70 and 71K are labeled, and AMP-PNP is green and purple. According to Brennen et al.,<xref rid="bib21" ref-type="bibr"><sup>21</sup></xref> the E71K mutation grants ERK2 resistance to SCH7. RESISTOR correctly predicts this resistance mutation and ranks it in top Pareto rank. These two OSPREY-generated, low energy structural ensemble files are included in <xref rid="mmc2" ref-type="supplementary-material">Data S2</xref>.</p></caption><graphic xlink:href="gr8"/></fig></p>
  </sec>
  <sec id="sec4">
    <title>Limitations</title>
    <p id="p1355">In the example we provided above for ERK2 and SCH7, we investigated only potential resistance mutations occurring within the binding pocket of the ligands. Modeling allosteric pathways to resistance, for example mutations distant from the binding pocket on the opposite side of ERK2 causing large-scale conformational rearrangement, while a goal of OSPREY, is not something we’ve yet incorporated into RESISTOR. Additionally, RESISTOR does not model resistance caused by phenomena such as splice variants, amplification, or mutations in related genes, which have been shown to be important in N-RAS, MEK1, MEK2, and other genes.<xref rid="bib28" ref-type="bibr"><sup>28</sup></xref> Additional modeling to incorporate these causes of resistance is left to future work.</p>
  </sec>
  <sec id="sec5">
    <title>Troubleshooting</title>
    <sec id="sec5.1">
      <title>Problem 1</title>
      <p id="p1360">You do not see help text when you run the osprey affinity --help command (related to <xref rid="sec1" ref-type="sec">before you begin</xref>, step 5).</p>
    </sec>
    <sec id="sec5.2">
      <title>Potential solution</title>
      <p id="p1365">There are different potential causes for this problem. If instead of help text you see the following printed out:<boxed-text id="dtbox62"><p id="p1370">&gt; osprey affinity --help</p><p id="p8371">ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.</p><p id="p7372">Please set the JAVA_HOME variable in your environment to match the</p><p id="p7373">location of your Java installation.</p></boxed-text></p>
      <p id="p1390">then you have not correctly installed and configured Java 17 as detailed in <xref rid="sec1" ref-type="sec">before you begin</xref>, step 1. Redo this step and try again. If the message is:<boxed-text id="dtbox63"><p id="p1395">&gt; osprey affinity --help</p><p id="p7374">Error occurred during initialization of boot layer</p><p id="p7375">java.lang.module.FindException: Module jdk.incubator.foreign not found</p></boxed-text></p>
      <p id="p1410">then it is possible that you are using a version of java that is newer than Java 17. At the current time only Java 17 is supported. It is often the case that there are multiple versions of Java installed in an operating system, and the default version in your operating system may not be Java 17. You can confirm that you are running the correct version of Java for OSPREY by running the command.<boxed-text id="dtbox64"><p id="p1415">$JAVA_HOME/bin/java -version</p></boxed-text></p>
      <p id="p1420">Below is a demonstration of the output of that command showing the <underline>incorrect</underline> version of Java:<boxed-text id="dtbox65"><p id="p1425">&gt; $JAVA_HOME/bin/java -version</p><p id="p8378">openjdk version "19" 2022-09-20</p><p id="p9371">OpenJDK Runtime Environment (build 19+36-2238)</p><p id="p9372">OpenJDK 64-Bit Server VM (build 19+36-2238, mixed mode, sharing)</p></boxed-text></p>
      <p id="p1445">The remedy in this case is to ensure that you have downloaded and configured Java 17, as detailed in <xref rid="sec1" ref-type="sec">before you begin</xref>, step 1.</p>
    </sec>
    <sec id="sec5.3">
      <title>Problem 2</title>
      <p id="p1450">When using the --verify-design option to the <italic>affinity</italic> command, you see output indicating that indicates a residue was deleted for not having a matching template (related to steps 6 and 7).</p>
    </sec>
    <sec id="sec5.4">
      <title>Potential solution</title>
      <p id="p1455">Note which residue the command says it deleted. The output tells you the atoms that it expects to find. Open the YAML file and look at that corresponding residue in either the protein or ligand coordinates. Identify the missing atoms and add them into the structure using a molecular visualization program such as Maestro. If just the labeling is off, fix the labeling. See <xref rid="mmc10" ref-type="supplementary-material">Video S8</xref> for a demonstration of how to do this.</p>
      <p id="p1460">
        <supplementary-material content-type="local-data" id="mmc10">
          <caption>
            <title>Video S8. Demonstration of how to address OSPREY affinity deleting a residue for a mismatched template, related to troubleshooting problem 2</title>
          </caption>
          <media xlink:href="mmc10.mp4"/>
        </supplementary-material>
      </p>
    </sec>
    <sec id="sec5.5">
      <title>Problem 3</title>
      <p id="p1465">When using the --verify-design option to the <italic>affinity</italic> command, you see output indicating that the residue does not exist (related to steps 6 and 7).</p>
    </sec>
    <sec id="sec5.6">
      <title>Potential solution</title>
      <p id="p1470">Look at the coordinates section of the YAML file for the residue mentioned in the error message. Ensure the residue’s number and amino acid identifier matches that used in the scan. See <xref rid="mmc11" ref-type="supplementary-material">Video S9</xref> for a demonstration of this issue and resolution steps.</p>
      <p id="p1475">
        <supplementary-material content-type="local-data" id="mmc11">
          <caption>
            <title>Video S9. Demonstration of an error where OSPREY affinity tells you that the residue you specified as flexible does not exist and how to resolve it, related to troubleshooting problem 3</title>
          </caption>
          <media xlink:href="mmc11.mp4"/>
        </supplementary-material>
      </p>
    </sec>
    <sec id="sec5.7">
      <title>Problem 4</title>
      <p id="p1480">OSPREY fails to parse the design file YAML specification (related to steps 6 and 7).</p>
    </sec>
    <sec id="sec5.8">
      <title>Potential solution</title>
      <p id="p1485">Use a YAML validator, such as yamllint, which can indicate on which line the YAML syntax is broken. Assuming you have installed yamllint as described in step 3 of Installing the Software Dependencies, default invocation of yamllint would look as follows:</p>
      <p id="p1490">
&gt; yamllint {design-file}
</p>
      <p id="p1495">Any errors will be identified with a description of the problem and the line number. Address them as appropriate. Additionally, the official YAML specification<xref rid="bib29" ref-type="bibr"><sup>29</sup></xref> is a good resource for learning how YAML documents are written and parsed.</p>
    </sec>
    <sec id="sec5.9">
      <title>Problem 5</title>
      <p id="p1500">The osprey affinity command begins to run but after some time fail to complete with an error (related to <xref rid="sec2.2" ref-type="sec">running the k∗ predictions</xref>).</p>
    </sec>
    <sec id="sec5.10">
      <title>Potential solution</title>
      <p id="p1505">The most common reason osprey affinity fails is that the design has run out of memory. The error output might look like this:<boxed-text id="dtbox66"><p id="p1510">edu.duke.cs.osprey.parallelism.TaskExecutor$TaskException: A task failed, no new tasks can be submitted</p><p id="p9474">at edu.duke.cs.osprey.parallelism.ConcurrentTaskExecutor.recordException(ConcurrentTaskExecutor.java:106)</p><p id="p9475">...</p></boxed-text></p>
      <p id="p1525">The important thing to remember is that error stack traces are read from the bottom to the top. Scroll to the bottom of the error and if you see a message that looks like:<boxed-text id="dtbox67"><p id="p1530">Caused by: java.lang.OutOfMemoryError: Map failed</p><p id="p9376">at java.base/sun.nio.ch.FileChannelImpl.map0(Native Method)</p><p id="p9377">at java.base/sun.nio.ch.FileChannelImpl.mapInternal(FileChannelImpl.java:1100)</p><p id="p9378">... 18 more</p></boxed-text></p>
      <p id="p1550">The affinity command failed because it ran out of memory. There are two potential solutions to try. The first is to increase the amount of memory allocated to OSPREY, if possible. This is defined in the JAVA_OPTS environment variable, e.g., to allocate 720 gigabytes to the Java heap, use:<boxed-text id="dtbox68"><p id="p1555">export JAVA_OPTS="-Xmx720G -Xms720G"</p></boxed-text></p>
      <p id="p1560">For designs where you run out of memory, the first attempt should be to try to make more memory available to OSPREY. If that is not possible, then the second potential solution is to reduce the number of flexible residues in your design. Oftentimes removing one or two flexible residues will allow a previously difficult design to finish. This should only be done when necessary, as removing flexible residue can reduce the accuracy of the predictions.</p>
    </sec>
  </sec>
  <sec id="sec6">
    <title>Resource availability</title>
    <sec id="sec6.1">
      <title>Lead contact</title>
      <p id="p1565">Further information and requests for resources and reagents should be directed to and will be fulfilled by the lead contact, Bruce R. Donald (brd+sp22@cs.duke.edu).</p>
    </sec>
    <sec id="sec6.2">
      <title>Materials availability</title>
      <p id="p1570">This study did not generate new unique reagents.</p>
    </sec>
    <sec sec-type="data-availability" id="sec6.3">
      <title>Data and code availability</title>
      <p id="p1575">The code and datasets used in this study is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/donaldlab/OSPREY3/releases/3.3-resistor" id="intref0065">https://github.com/donaldlab/OSPREY3/releases/3.3-resistor</ext-link> (<ext-link ext-link-type="doi" xlink:href="10.5281/zenodo.7633931" id="intref0070">https://doi.org/10.5281/zenodo.7633931</ext-link>), at the Protein Databank (<ext-link ext-link-type="uri" xlink:href="https://www.rcsb.org/structure/2Y9Q" id="intref0075">https://www.rcsb.org/structure/2Y9Q</ext-link> and <ext-link ext-link-type="uri" xlink:href="https://www.rcsb.org/structure/4QTA" id="intref0080">https://www.rcsb.org/structure/4QTA</ext-link>), and the COSMIC database (<ext-link ext-link-type="uri" xlink:href="https://cancer.sanger.ac.uk/cosmic/gene/analysis?ln=MAPK1" id="intref0085">https://cancer.sanger.ac.uk/cosmic/gene/analysis?ln=MAPK1</ext-link>).</p>
    </sec>
  </sec>
</body>
<back>
  <ref-list id="cebib0010">
    <title>References</title>
    <ref id="bib1">
      <label>1</label>
      <element-citation publication-type="journal" id="sref1">
        <person-group person-group-type="author">
          <name>
            <surname>Guerin</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Feichtner</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Stefan</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Kaserer</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>Resistor: an algorithm for predicting resistance mutations via Pareto optimization over multistate protein design and mutational signatures</article-title>
        <source>Cell Syst.</source>
        <volume>13</volume>
        <year>2022</year>
        <fpage>830</fpage>
        <lpage>843.e3</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cels.2022.09.003</pub-id>
        <pub-id pub-id-type="pmid">36265469</pub-id>
      </element-citation>
    </ref>
    <ref id="bib2">
      <label>2</label>
      <element-citation publication-type="journal" id="sref2">
        <person-group person-group-type="author">
          <name>
            <surname>Ojewole</surname>
            <given-names>A.A.</given-names>
          </name>
          <name>
            <surname>Jou</surname>
            <given-names>J.D.</given-names>
          </name>
          <name>
            <surname>Fowler</surname>
            <given-names>V.G.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>BBK∗ (branch and bound over K∗): a provable and efficient ensemble-based protein design algorithm to optimize stability and binding affinity over large sequence spaces</article-title>
        <source>J. Comput. Biol.</source>
        <volume>25</volume>
        <year>2018</year>
        <fpage>726</fpage>
        <lpage>739</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2017.0267</pub-id>
        <pub-id pub-id-type="pmid">29641249</pub-id>
      </element-citation>
    </ref>
    <ref id="bib3">
      <label>3</label>
      <element-citation publication-type="journal" id="sref3">
        <person-group person-group-type="author">
          <name>
            <surname>Kaserer</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Blagg</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>Combining mutational signatures, clonal fitness, and drug affinity to define drug-specific resistance mutations in cancer</article-title>
        <source>Cell Chem. Biol.</source>
        <volume>25</volume>
        <year>2018</year>
        <fpage>1359</fpage>
        <lpage>1371.e2</lpage>
        <pub-id pub-id-type="doi">10.1016/j.chembiol.2018.07.013</pub-id>
        <pub-id pub-id-type="pmid">30146241</pub-id>
      </element-citation>
    </ref>
    <ref id="bib4">
      <label>4</label>
      <element-citation publication-type="book" id="sref4">
        <person-group person-group-type="author">
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <part-title>Algorithms in Structural Molecular Biology</part-title>
        <year>2011</year>
        <publisher-name>MIT Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="bib5">
      <label>5</label>
      <element-citation publication-type="journal" id="sref5">
        <person-group person-group-type="author">
          <name>
            <surname>Hallen</surname>
            <given-names>M.A.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>COMETS (Constrained Optimization of Multistate Energies by Tree Search): a provable and efficient protein design algorithm to optimize binding affinity and specificity with respect to sequence</article-title>
        <source>J. Comput. Biol.</source>
        <volume>23</volume>
        <year>2016</year>
        <fpage>311</fpage>
        <lpage>321</lpage>
        <pub-id pub-id-type="pmid">26761641</pub-id>
      </element-citation>
    </ref>
    <ref id="bib6">
      <label>6</label>
      <element-citation publication-type="journal" id="sref6">
        <person-group person-group-type="author">
          <name>
            <surname>Frey</surname>
            <given-names>K.M.</given-names>
          </name>
          <name>
            <surname>Georgiev</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
          <name>
            <surname>Anderson</surname>
            <given-names>A.C.</given-names>
          </name>
        </person-group>
        <article-title>Predicting resistance mutations using protein design algorithms</article-title>
        <source>Proc. Natl. Acad. Sci. USA</source>
        <volume>107</volume>
        <year>2010</year>
        <fpage>13707</fpage>
        <lpage>13712</lpage>
        <pub-id pub-id-type="pmid">20643959</pub-id>
      </element-citation>
    </ref>
    <ref id="bib7">
      <label>7</label>
      <element-citation publication-type="journal" id="sref7">
        <person-group person-group-type="author">
          <name>
            <surname>Reeve</surname>
            <given-names>S.M.</given-names>
          </name>
          <name>
            <surname>Gainza</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Frey</surname>
            <given-names>K.M.</given-names>
          </name>
          <name>
            <surname>Georgiev</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
          <name>
            <surname>Anderson</surname>
            <given-names>A.C.</given-names>
          </name>
        </person-group>
        <article-title>Protein design algorithms predict viable resistance to an experimental antifolate</article-title>
        <source>Proc. Natl. Acad. Sci. USA</source>
        <volume>112</volume>
        <year>2015</year>
        <fpage>749</fpage>
        <lpage>754</lpage>
        <pub-id pub-id-type="pmid">25552560</pub-id>
      </element-citation>
    </ref>
    <ref id="bib8">
      <label>8</label>
      <element-citation publication-type="journal" id="sref8">
        <person-group person-group-type="author">
          <name>
            <surname>Gainza</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Nisonoff</surname>
            <given-names>H.M.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>Algorithms for protein design</article-title>
        <source>Curr. Opin. Struct. Biol.</source>
        <volume>39</volume>
        <year>2016</year>
        <fpage>16</fpage>
        <lpage>26</lpage>
        <pub-id pub-id-type="pmid">27086078</pub-id>
      </element-citation>
    </ref>
    <ref id="bib9">
      <label>9</label>
      <element-citation publication-type="journal" id="sref9">
        <person-group person-group-type="author">
          <name>
            <surname>Lilien</surname>
            <given-names>R.H.</given-names>
          </name>
          <name>
            <surname>Stevens</surname>
            <given-names>B.W.</given-names>
          </name>
          <name>
            <surname>Anderson</surname>
            <given-names>A.C.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>A novel ensemble-based scoring and search algorithm for protein redesign and its application to modify the substrate specificity of the gramicidin synthetase a phenylalanine adenylation enzyme</article-title>
        <source>J. Comput. Biol.</source>
        <volume>12</volume>
        <year>2005</year>
        <fpage>740</fpage>
        <lpage>761</lpage>
        <pub-id pub-id-type="pmid">16108714</pub-id>
      </element-citation>
    </ref>
    <ref id="bib10">
      <label>10</label>
      <element-citation publication-type="journal" id="sref10">
        <person-group person-group-type="author">
          <name>
            <surname>Hallen</surname>
            <given-names>M.A.</given-names>
          </name>
          <name>
            <surname>Martin</surname>
            <given-names>J.W.</given-names>
          </name>
          <name>
            <surname>Ojewole</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Jou</surname>
            <given-names>J.D.</given-names>
          </name>
          <name>
            <surname>Lowegard</surname>
            <given-names>A.U.</given-names>
          </name>
          <name>
            <surname>Frenkel</surname>
            <given-names>M.S.</given-names>
          </name>
          <name>
            <surname>Gainza</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Nisonoff</surname>
            <given-names>H.M.</given-names>
          </name>
          <name>
            <surname>Mukund</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>S.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Osprey 3.0: open-source protein redesign for you, with powerful new features</article-title>
        <source>J. Comput. Chem.</source>
        <volume>39</volume>
        <year>2018</year>
        <fpage>2494</fpage>
        <lpage>2507</lpage>
        <pub-id pub-id-type="doi">10.1002/jcc.25522</pub-id>
        <pub-id pub-id-type="pmid">30368845</pub-id>
      </element-citation>
    </ref>
    <ref id="bib11">
      <label>11</label>
      <element-citation publication-type="journal" id="sref11">
        <person-group person-group-type="author">
          <name>
            <surname>Alexandrov</surname>
            <given-names>L.B.</given-names>
          </name>
          <name>
            <surname>Nik-Zainal</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Wedge</surname>
            <given-names>D.C.</given-names>
          </name>
          <name>
            <surname>Aparicio</surname>
            <given-names>S.A.</given-names>
          </name>
          <name>
            <surname>Behjati</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Biankin</surname>
            <given-names>A.V.</given-names>
          </name>
          <name>
            <surname>Bignell</surname>
            <given-names>G.R.</given-names>
          </name>
          <name>
            <surname>Bolli</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Borg</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Børresen-Dale</surname>
            <given-names>A.L.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Signatures of mutational processes in human cancer</article-title>
        <source>Nature</source>
        <volume>500</volume>
        <year>2013</year>
        <fpage>415</fpage>
        <lpage>421</lpage>
        <pub-id pub-id-type="pmid">23945592</pub-id>
      </element-citation>
    </ref>
    <ref id="bib12">
      <label>12</label>
      <element-citation publication-type="journal" id="sref12">
        <person-group person-group-type="author">
          <name>
            <surname>Chaikuad</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Tacconi</surname>
            <given-names>E.M.C.</given-names>
          </name>
          <name>
            <surname>Zimmer</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Liang</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Gray</surname>
            <given-names>N.S.</given-names>
          </name>
          <name>
            <surname>Tarsounas</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Knapp</surname>
            <given-names>S.</given-names>
          </name>
        </person-group>
        <article-title>A unique inhibitor binding site in ERK1/2 is associated with slow binding kinetics</article-title>
        <source>Nat. Chem. Biol.</source>
        <volume>10</volume>
        <year>2014</year>
        <fpage>853</fpage>
        <lpage>860</lpage>
        <pub-id pub-id-type="doi">10.1038/nchembio.1629</pub-id>
        <pub-id pub-id-type="pmid">25195011</pub-id>
      </element-citation>
    </ref>
    <ref id="bib13">
      <label>13</label>
      <element-citation publication-type="journal" id="sref13">
        <person-group person-group-type="author">
          <name>
            <surname>Garai</surname>
            <given-names>Á.</given-names>
          </name>
          <name>
            <surname>Zeke</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Gógl</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Törő</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Fördős</surname>
            <given-names>F.</given-names>
          </name>
          <name>
            <surname>Blankenburg</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Bárkai</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Varga</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Alexa</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Emig</surname>
            <given-names>D.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Specificity of linear motifs that bind to a common mitogen-activated protein kinase docking groove</article-title>
        <source>Sci. Signal.</source>
        <volume>5</volume>
        <year>2012</year>
        <fpage>ra74</fpage>
        <pub-id pub-id-type="doi">10.1126/scisignal.2003004</pub-id>
        <pub-id pub-id-type="pmid">23047924</pub-id>
      </element-citation>
    </ref>
    <ref id="bib14">
      <label>14</label>
      <element-citation publication-type="journal" id="sref14">
        <person-group person-group-type="author">
          <name>
            <surname>Tate</surname>
            <given-names>J.G.</given-names>
          </name>
          <name>
            <surname>Bamford</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Jubb</surname>
            <given-names>H.C.</given-names>
          </name>
          <name>
            <surname>Sondka</surname>
            <given-names>Z.</given-names>
          </name>
          <name>
            <surname>Beare</surname>
            <given-names>D.M.</given-names>
          </name>
          <name>
            <surname>Bindal</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Boutselakis</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Cole</surname>
            <given-names>C.G.</given-names>
          </name>
          <name>
            <surname>Creatore</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Dawson</surname>
            <given-names>E.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>COSMIC: the catalogue of somatic mutations in cancer</article-title>
        <source>Nucleic Acids Res.</source>
        <volume>47</volume>
        <year>2019</year>
        <fpage>D941</fpage>
        <lpage>D947</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gky1015</pub-id>
        <pub-id pub-id-type="pmid">30371878</pub-id>
      </element-citation>
    </ref>
    <ref id="bib15">
      <label>15</label>
      <element-citation publication-type="journal" id="sref15">
        <person-group person-group-type="author">
          <name>
            <surname>Guerin</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Kaserer</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>RESISTOR: a new osprey module to predict resistance mutations</article-title>
        <source>J. Comput. Biol.</source>
        <volume>29</volume>
        <year>2022</year>
        <fpage>1346</fpage>
        <lpage>1352</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2022.0254</pub-id>
        <pub-id pub-id-type="pmid">36099194</pub-id>
      </element-citation>
    </ref>
    <ref id="bib16">
      <label>16</label>
      <element-citation publication-type="journal" id="sref16">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>C.-Y.</given-names>
          </name>
          <name>
            <surname>Georgiev</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Anderson</surname>
            <given-names>A.C.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>Computational structure-based redesign of enzyme activity</article-title>
        <source>Proc. Natl. Acad. Sci. USA</source>
        <volume>106</volume>
        <year>2009</year>
        <fpage>3764</fpage>
        <lpage>3769</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.0900266106</pub-id>
        <pub-id pub-id-type="pmid">19228942</pub-id>
      </element-citation>
    </ref>
    <ref id="bib17">
      <label>17</label>
      <element-citation publication-type="journal" id="sref17">
        <person-group person-group-type="author">
          <name>
            <surname>Wang</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Reeve</surname>
            <given-names>S.M.</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>G.T.</given-names>
          </name>
          <name>
            <surname>Ojewole</surname>
            <given-names>A.A.</given-names>
          </name>
          <name>
            <surname>Frenkel</surname>
            <given-names>M.S.</given-names>
          </name>
          <name>
            <surname>Gainza</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Keshipeddy</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Fowler</surname>
            <given-names>V.G.</given-names>
          </name>
          <name>
            <surname>Wright</surname>
            <given-names>D.L.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>Chiral evasion and stereospecific antifolate resistance in Staphylococcus aureus</article-title>
        <source>PLoS Comput. Biol.</source>
        <volume>18</volume>
        <year>2022</year>
        <fpage>e1009855</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1009855</pub-id>
        <pub-id pub-id-type="pmid">35143481</pub-id>
      </element-citation>
    </ref>
    <ref id="bib18">
      <label>18</label>
      <element-citation publication-type="journal" id="sref18">
        <person-group person-group-type="author">
          <name>
            <surname>Lowegard</surname>
            <given-names>A.U.</given-names>
          </name>
          <name>
            <surname>Frenkel</surname>
            <given-names>M.S.</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>G.T.</given-names>
          </name>
          <name>
            <surname>Jou</surname>
            <given-names>J.D.</given-names>
          </name>
          <name>
            <surname>Ojewole</surname>
            <given-names>A.A.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>Novel, provable algorithms for efficient ensemble-based computational protein design and their application to the redesign of the c-Raf-RBD:KRas protein-protein interface</article-title>
        <source>PLoS Comput. Biol.</source>
        <volume>16</volume>
        <year>2020</year>
        <fpage>e1007447</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1007447</pub-id>
        <pub-id pub-id-type="pmid">32511232</pub-id>
      </element-citation>
    </ref>
    <ref id="bib19">
      <label>19</label>
      <element-citation publication-type="book" id="sref19">
        <person-group person-group-type="author">
          <name>
            <surname>Schrödinger</surname>
            <given-names>L.L.C.</given-names>
          </name>
          <name>
            <surname>New York</surname>
          </name>
        </person-group>
        <part-title>Schrödinger Release 2022-4</part-title>
        <year>2022</year>
        <publisher-name>Maestro</publisher-name>
      </element-citation>
    </ref>
    <ref id="bib20">
      <label>20</label>
      <element-citation publication-type="journal" id="sref20">
        <person-group person-group-type="author">
          <name>
            <surname>Roberts</surname>
            <given-names>K.E.</given-names>
          </name>
          <name>
            <surname>Cushing</surname>
            <given-names>P.R.</given-names>
          </name>
          <name>
            <surname>Boisguerin</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>D.R.</given-names>
          </name>
          <name>
            <surname>Donald</surname>
            <given-names>B.R.</given-names>
          </name>
        </person-group>
        <article-title>Computational design of a PDZ domain peptide inhibitor that rescues CFTR activity</article-title>
        <source>PLoS Comput. Biol.</source>
        <volume>8</volume>
        <year>2012</year>
        <fpage>e1002477</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1002477</pub-id>
        <pub-id pub-id-type="pmid">22532795</pub-id>
      </element-citation>
    </ref>
    <ref id="bib21">
      <label>21</label>
      <element-citation publication-type="journal" id="sref21">
        <person-group person-group-type="author">
          <name>
            <surname>Webb</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Sali</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>Comparative protein structure modeling using MODELLER</article-title>
        <source>Curr. Protoc. Protein Sci.</source>
        <volume>86</volume>
        <year>2016</year>
        <fpage>2.9.1</fpage>
        <lpage>2.9.37</lpage>
        <pub-id pub-id-type="doi">10.1002/cpps.20</pub-id>
      </element-citation>
    </ref>
    <ref id="bib22">
      <label>22</label>
      <element-citation publication-type="journal" id="sref22">
        <person-group person-group-type="author">
          <name>
            <surname>Jumper</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Evans</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Pritzel</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Figurnov</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Ronneberger</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Tunyasuvunakool</surname>
            <given-names>K.</given-names>
          </name>
          <name>
            <surname>Bates</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Žídek</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Potapenko</surname>
            <given-names>A.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Highly accurate protein structure prediction with AlphaFold</article-title>
        <source>Nature</source>
        <volume>596</volume>
        <year>2021</year>
        <fpage>583</fpage>
        <lpage>589</lpage>
        <pub-id pub-id-type="doi">10.1038/s41586-021-03819-2</pub-id>
        <pub-id pub-id-type="pmid">34265844</pub-id>
      </element-citation>
    </ref>
    <ref id="bib23">
      <label>23</label>
      <element-citation publication-type="journal" id="sref23">
        <person-group person-group-type="author">
          <name>
            <surname>Trott</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Olson</surname>
            <given-names>A.J.</given-names>
          </name>
        </person-group>
        <article-title>AutoDock Vina: improving the speed and accuracy of docking with a new scoring function, efficient optimization, and multithreading</article-title>
        <source>J. Comput. Chem.</source>
        <volume>31</volume>
        <year>2010</year>
        <fpage>455</fpage>
        <lpage>461</lpage>
        <pub-id pub-id-type="doi">10.1002/jcc.21334</pub-id>
        <pub-id pub-id-type="pmid">19499576</pub-id>
      </element-citation>
    </ref>
    <ref id="bib24">
      <label>24</label>
      <element-citation publication-type="journal" id="sref24">
        <person-group person-group-type="author">
          <name>
            <surname>Varadi</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Anyango</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Deshpande</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Nair</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Natassia</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Yordanova</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Stroe</surname>
            <given-names>O.</given-names>
          </name>
          <name>
            <surname>Wood</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Laydon</surname>
            <given-names>A.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>AlphaFold Protein Structure Database: massively expanding the structural coverage of protein-sequence space with high-accuracy models</article-title>
        <source>Nucleic Acids Res.</source>
        <volume>50</volume>
        <year>2022</year>
        <fpage>D439</fpage>
        <lpage>D444</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkab1061</pub-id>
        <pub-id pub-id-type="pmid">34791371</pub-id>
      </element-citation>
    </ref>
    <ref id="bib26">
      <label>25</label>
      <element-citation publication-type="book" id="sref26">
        <person-group person-group-type="author">
          <name>
            <surname>Case</surname>
            <given-names>D.A.</given-names>
          </name>
          <name>
            <surname>Ben-Shalom</surname>
            <given-names>I.Y.</given-names>
          </name>
          <name>
            <surname>Brozell</surname>
            <given-names>S.R.</given-names>
          </name>
          <name>
            <surname>Cerutti</surname>
            <given-names>D.S.</given-names>
          </name>
          <name>
            <surname>Cheatham</surname>
            <given-names>T.E.</given-names>
            <suffix>III</suffix>
          </name>
          <name>
            <surname>Cruzeiro</surname>
            <given-names>V.W.D.</given-names>
          </name>
          <name>
            <surname>Darden</surname>
            <given-names>T.A.</given-names>
          </name>
          <name>
            <surname>Duke</surname>
            <given-names>R.E.</given-names>
          </name>
          <name>
            <surname>Ghoreishi</surname>
            <given-names>D.</given-names>
          </name>
        </person-group>
        <series>AMBER</series>
        <volume>2022</volume>
        <year>2022</year>
      </element-citation>
    </ref>
    <ref id="bib27">
      <label>26</label>
      <element-citation publication-type="book" id="sref27">
        <person-group person-group-type="author">
          <name>
            <surname>Vergé</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <source>Yamllint - A Linter for YAML Files</source>
        <year>2023</year>
      </element-citation>
    </ref>
    <ref id="bib25">
      <label>27</label>
      <element-citation publication-type="journal" id="sref25">
        <person-group person-group-type="author">
          <name>
            <surname>Shelley</surname>
            <given-names>J.C.</given-names>
          </name>
          <name>
            <surname>Cholleti</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Frye</surname>
            <given-names>L.L.</given-names>
          </name>
          <name>
            <surname>Greenwood</surname>
            <given-names>J.R.</given-names>
          </name>
          <name>
            <surname>Timlin</surname>
            <given-names>M.R.</given-names>
          </name>
          <name>
            <surname>Uchimaya</surname>
            <given-names>M.</given-names>
          </name>
        </person-group>
        <article-title>Epik: a software program for pKa prediction and protonation state generation for drug-like molecules</article-title>
        <source>J. Comput. Aided Mol. Des.</source>
        <volume>21</volume>
        <year>2007</year>
        <fpage>681</fpage>
        <lpage>691</lpage>
        <pub-id pub-id-type="doi">10.1007/s10822-007-9133-z</pub-id>
        <pub-id pub-id-type="pmid">17899391</pub-id>
      </element-citation>
    </ref>
    <ref id="bib28">
      <label>28</label>
      <element-citation publication-type="journal" id="sref28">
        <person-group person-group-type="author">
          <name>
            <surname>Rizos</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Menzies</surname>
            <given-names>A.M.</given-names>
          </name>
          <name>
            <surname>Pupo</surname>
            <given-names>G.M.</given-names>
          </name>
          <name>
            <surname>Carlino</surname>
            <given-names>M.S.</given-names>
          </name>
          <name>
            <surname>Fung</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Hyman</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Haydu</surname>
            <given-names>L.E.</given-names>
          </name>
          <name>
            <surname>Mijatov</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Becker</surname>
            <given-names>T.M.</given-names>
          </name>
          <name>
            <surname>Boyd</surname>
            <given-names>S.C.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>BRAF inhibitor resistance mechanisms in metastatic melanoma: spectrum and clinical impact</article-title>
        <source>Clin. Cancer Res.</source>
        <volume>20</volume>
        <year>2014</year>
        <fpage>1965</fpage>
        <lpage>1977</lpage>
        <pub-id pub-id-type="doi">10.1158/1078-0432.CCR-13-3122</pub-id>
        <pub-id pub-id-type="pmid">24463458</pub-id>
      </element-citation>
    </ref>
    <ref id="bib29">
      <label>29</label>
      <element-citation publication-type="other" id="sref29">
        <person-group person-group-type="author">
          <collab>YAML Language Development Team</collab>
        </person-group>
        <article-title>YAML Ain’t Markup Language (YAML<sup>TM</sup>) Revision 1.2.2</article-title>
        <ext-link ext-link-type="uri" xlink:href="https://yaml.org/spec/1.2.2/.2021" id="intref0130">https://yaml.org/spec/1.2.2/.2021</ext-link>
        <year>2021</year>
      </element-citation>
    </ref>
  </ref-list>
  <sec id="appsec2" sec-type="supplementary-material">
    <title>Supplemental information</title>
    <p id="p1605">
      <supplementary-material content-type="local-data" id="mmc1">
        <caption>
          <title>Data S1. The Pareto ranked RESISTOR predictions for ERK2 with SCH7, related to assigning the Pareto Ranks, step 12 and Figure 7</title>
        </caption>
        <media xlink:href="mmc1.zip"/>
      </supplementary-material>
      <supplementary-material content-type="local-data" id="mmc2">
        <caption>
          <title>Data S2. OSPREY-generated low energy structural ensembles for ERK2 E71K in complex with AMP-PNP and SCH7, related to expected outcomes and Figure 8</title>
        </caption>
        <media xlink:href="mmc2.zip"/>
      </supplementary-material>
    </p>
  </sec>
  <ack id="ack0010">
    <title>Acknowledgments</title>
    <p id="p1585">We thank all members of the Donald lab for helpful discussions and the <funding-source id="gs1"><institution-wrap><institution-id institution-id-type="doi">10.13039/100000002</institution-id><institution>NIH</institution></institution-wrap></funding-source> (grants R01-GM078031, R01-GM118543, and R35-GM144042 to B.R.D.) for funding. T.K. was funded in whole, or in part, by the <funding-source id="gs2"><institution-wrap><institution-id institution-id-type="doi">10.13039/501100002428</institution-id><institution>Austrian Science Fund</institution></institution-wrap></funding-source> (FWF) P34376. For the purpose of open access, the authors have applied a CC-BY public copyright license to any author-accepted manuscript version arising from this submission.</p>
    <sec id="sec8">
      <title>Author contributions</title>
      <p id="p1590">Conceptualization, N.G., T.K., B.R.D.; Methodology, N.G., T.K., B.R.D.; Software, N.G.; Validation, N.G., T.K.; Writing – Original Draft, N.G.; Writing – Review and Editing, T.K., B.R.D.; Funding Acquisition, T.K., B.R.D; Supervision, B.R.D.; Project Administration, B.R.D.</p>
    </sec>
    <sec sec-type="COI-statement" id="sec9">
      <title>Declaration of interests</title>
      <p id="p1595">B.R.D. is a founder of Ten63 Therapeutics, Inc.</p>
    </sec>
  </ack>
  <fn-group>
    <fn id="appsec1" fn-type="supplementary-material">
      <p id="p1600">Supplemental information can be found online at <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.xpro.2023.102170" id="intref0125">https://doi.org/10.1016/j.xpro.2023.102170</ext-link>.</p>
    </fn>
  </fn-group>
</back>
