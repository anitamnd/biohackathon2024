<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nucleic Acids Res</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nucleic Acids Res</journal-id>
    <journal-id journal-id-type="hwp">nar</journal-id>
    <journal-id journal-id-type="publisher-id">nar</journal-id>
    <journal-title-group>
      <journal-title>Nucleic Acids Research</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">0305-1048</issn>
    <issn pub-type="epub">1362-4962</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4652774</article-id>
    <article-id pub-id-type="pmid">26250111</article-id>
    <article-id pub-id-type="doi">10.1093/nar/gkv784</article-id>
    <article-categories>
      <subj-group subj-group-type="hwp-journal-coll">
        <subject>24</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Computational Biology</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>High speed BLASTN: an accelerated MegaBLAST search tool</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Chen</surname>
          <given-names>Ying</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ye</surname>
          <given-names>Weicai</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zhang</surname>
          <given-names>Yongdong</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
        <xref ref-type="corresp" rid="COR2">*</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Xu</surname>
          <given-names>Yuesheng</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="AFF2">
          <sup>2</sup>
        </xref>
        <xref ref-type="corresp" rid="COR1">*</xref>
      </contrib>
      <aff id="AFF1"><label>1</label>Guangdong Province Key Laboratory of Computational Science, School of Mathematics and Computational Science, Sun Yat-sen University, Guangzhou 510275, P. R. China</aff>
      <aff id="AFF2"><label>2</label>Department of Mathematics, Syracuse University, Syracuse, NY 13244, USA</aff>
    </contrib-group>
    <author-notes>
      <corresp id="COR1"><label>*</label>To whom correspondence should be addressed. Tel: +86 13760730216; Email: <email>yxu06@syr.edu</email></corresp>
      <corresp id="COR2">Correspondence may also be addressed to Yongdong Zhang. Tel: +86 18928925911; Email: <email>lnszyd@mail.sysu.edu.cn</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>18</day>
      <month>9</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>06</day>
      <month>8</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>06</day>
      <month>8</month>
      <year>2015</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the
							<pub-date pub-type="epub"/>. -->
    <volume>43</volume>
    <issue>16</issue>
    <fpage>7762</fpage>
    <lpage>7768</lpage>
    <history>
      <date date-type="accepted">
        <day>22</day>
        <month>7</month>
        <year>2015</year>
      </date>
      <date date-type="rev-recd">
        <day>20</day>
        <month>7</month>
        <year>2015</year>
      </date>
      <date date-type="received">
        <day>27</day>
        <month>1</month>
        <year>2015</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2015. Published by Oxford University Press on behalf of Nucleic Acids Research.</copyright-statement>
      <copyright-year>2015</copyright-year>
      <license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<uri xlink:type="simple" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</uri>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:title="pdf" xlink:type="simple" xlink:href="gkv784.pdf"/>
    <abstract>
      <p>Sequence alignment is a long standing problem in bioinformatics. The Basic Local Alignment Search Tool (BLAST) is one of the most popular and fundamental alignment tools. The explosive growth of biological sequences calls for speedup of sequence alignment tools such as BLAST. To this end, we develop high speed BLASTN (HS-BLASTN), a parallel and fast nucleotide database search tool that accelerates MegaBLAST—the default module of NCBI-BLASTN. HS-BLASTN builds a new lookup table using the FMD-index of the database and employs an accurate and effective seeding method to find short stretches of identities (called seeds) between the query and the database. HS-BLASTN produces the same alignment results as MegaBLAST and its computational speed is much faster than MegaBLAST. Specifically, our experiments conducted on a 12-core server show that HS-BLASTN can be 22 times faster than MegaBLAST and exhibits better parallel performance than MegaBLAST. HS-BLASTN is written in C++ and the related source code is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/chenying2016/queries">https://github.com/chenying2016/queries</ext-link> under the GPLv3 license.</p>
    </abstract>
    <counts>
      <page-count count="7"/>
    </counts>
    <custom-meta-group>
      <custom-meta>
        <meta-name>cover-date</meta-name>
        <meta-value>18 September 2015</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="SEC1">
    <title>INTRODUCTION</title>
    <p>Identifying sequences (in a target database) having statistically significant local alignments with a given query is routine in computational biology. BLAST (<xref rid="B1" ref-type="bibr">1</xref>,<xref rid="B2" ref-type="bibr">2</xref>), a heuristic search tool developed for this purpose, has found substantial applications in protein science (<xref rid="B3" ref-type="bibr">3</xref>) such as secondary and tertiary structure prediction (<xref rid="B4" ref-type="bibr">4</xref>), functional annotation (<xref rid="B5" ref-type="bibr">5</xref>) and orthology mapping (<xref rid="B6" ref-type="bibr">6</xref>), and in nucleotide science including human genome variation detection (<xref rid="B7" ref-type="bibr">7</xref>) and gene prediction (<xref rid="B8" ref-type="bibr">8</xref>). BLAST builds a lookup table for the query, and scans the database for seeds, which are heuristic points for significant local alignments. These seeds are then extended to longer ungapped alignments and finally to gapped alignments.</p>
    <p>Searching homologous sequences in a target database is a bottleneck in bioinformatics due to the exponential growth in the number of biological sequences (<xref rid="B3" ref-type="bibr">3</xref>). As a result, the acceleration of BLAST is an important problem. Over the past years, many methods were proposed to address this issue. They can be divided into two categories: hardware acceleration and improved indexing.</p>
    <p>Hardware methods may either utilize parallel computing (<xref rid="B9" ref-type="bibr">9</xref>,<xref rid="B10" ref-type="bibr">10</xref>) or use custom-designed hardware such as field-programmable gate arrays (FPGAs) (<xref rid="B11" ref-type="bibr">11</xref>,<xref rid="B12" ref-type="bibr">12</xref>) and graphic processing units (GPUs) (<xref rid="B13" ref-type="bibr">13</xref>,<xref rid="B14" ref-type="bibr">14</xref>) to increase speed.<xref rid="B10" ref-type="bibr">10</xref></p>
    <p>The second category, improved indexing, creates an index for the database (<xref rid="B15" ref-type="bibr">15</xref>), instead of indexing the <italic>query</italic> as in BLAST. Widely used software packages belonging to this category include SSAHA (<xref rid="B16" ref-type="bibr">16</xref>), miBLAST (<xref rid="B17" ref-type="bibr">17</xref>), BLAT (<xref rid="B18" ref-type="bibr">18</xref>), indexed MegaBLAST (<xref rid="B19" ref-type="bibr">19</xref>), usearch (<xref rid="B20" ref-type="bibr">20</xref>) and DIAMOND (<xref rid="B21" ref-type="bibr">21</xref>).</p>
    <p>MegaBLAST is currently the default module called from the program NCBI-BLASTN, which is a local nucleotide database search tool from the NCBI BLAST software distribution. Among the many solutions mentioned above, indexed MegaBLAST (<xref rid="B19" ref-type="bibr">19</xref>) and G-BLASTN (<xref rid="B14" ref-type="bibr">14</xref>) are dedicated to accelerating MegaBLAST and producing the same alignment results as MegaBLAST. Indexed MegaBLAST accelerates MegaBLAST by building an index for the target database. It stores the locations of each <italic>k</italic>-mer (<inline-formula><tex-math id="M2">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> ≥ <italic>k</italic>) that ends at every <italic>s</italic>-th (<italic>s</italic> = <inline-formula><tex-math id="M3">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> − <italic>k</italic> + 1) position in the database (<xref rid="B19" ref-type="bibr">19</xref>). The seed search algorithm first identifies <italic>k</italic>-seeds by using the index, and then checks if each <italic>k</italic>-seed is contained in a <inline-formula><tex-math id="M4">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seed. The experiments conducted in (<xref rid="B19" ref-type="bibr">19</xref>) showed that it is 2–4 times faster than MegaBLAST. However, the checking procedure can be time-consuming when the queries are long and the database is large. The other search tool, G-BLASTN is an open-source GPU alternative. It utilizes GPUs in parallelizing the scanning stage of NCBI-BLASTN. Compared with the sequential MegaBLAST, G-BLASTN is 14.8 times faster.</p>
    <p>The goal of this paper is to introduce HS-BLASTN, a parallel nucleotide sequence alignment tool that produces the same outputs as MegaBLAST with much faster computing speed. Formally, HS-BLASTN is a Burrow-Wheeler Transform (BWT) based solution to sequence alignment (see (<xref rid="B22" ref-type="bibr">22</xref>) for the definition of BWT). Over the past years, the BWT has been used intensively in next-generation sequencing (NGS) analysis. Many packages, such as Bowtie2 (<xref rid="B23" ref-type="bibr">23</xref>), BWA (<xref rid="B24" ref-type="bibr">24</xref>), cushaw2 (<xref rid="B25" ref-type="bibr">25</xref>), use the BWT as an indexing technique to map the NGS sequences (always contained in FASTQ format files) to the reference genomes. We adopt this indexing technique for the field of genomic database search—identifying all the statistically significant local alignments between a nucleotide query and a nucleotide database. Precisely, we use this data structure to accelerate MegaBLAST and produce the identical results. To do this HS-BLASTN employs a new database-derived lookup table based on the FMD-index introduced recently in (<xref rid="B26" ref-type="bibr">26</xref>), and uses an accurate and effective seeding method. This seeding method finds all seeds identified by MegaBLAST. HS-BLASTN is especially suitable for aligning a huge number of queries against a large database. Our experiments on searching two large query sets against the human genomic database show that HS-BLASTN achieves a significant speedup over MegaBLAST and much better parallel performance.</p>
    <p>In this paper, we first review the procedure of MegaBLAST and the definitions of the FMD-index, and then describe the implementation of HS-BLASTN, including the lookup table, the seeding algorithm and the ungapped extension method. Finally, we compare the performances of HS-BLASTN and MegaBLAST by conducting experiments.</p>
  </sec>
  <sec sec-type="materials|methods" id="SEC2">
    <title>MATERIALS AND METHODS</title>
    <p>The MegaBLAST search procedure consists of three stages: the setup stage, the preliminary search stage and the traceback stage. At the setup stage, MegaBLAST prepares the options, queries and database, and then builds the lookup table for the queries. At the preliminary search stage, it scans each subject, finds seeds using the lookup table and performs a gap-free alignment algorithm on these seeds. The gap-free alignments exceeding a threshold score will trigger a gapped alignment. Those gapped alignments, whose scores exceed another threshold, will be saved as preliminary matches. Finally, the traceback stage considers the ambiguous nucleotides from the preliminary matches and returns them with the traceback information added. The traceback information includes the number and positions of insertions, deletions and matching letters.</p>
    <p>The lookup table in MegaBLAST is a hash table. Each entry of the lookup table is an offset list that stores for one <italic>k</italic>-mer the offsets from the queries where the <italic>k</italic>-mer occurs. Since each letter is taken from {<italic>A</italic>, <italic>C</italic>, <italic>G</italic>, <italic>T</italic>}, the lookup table has 4<sup><italic>k</italic></sup> entries. In the second stage, MegaBLAST walks through each subject to find <inline-formula><tex-math id="M5">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds. Here it scans each of the subject's <italic>k</italic>-mer, calculates the <italic>k</italic>-mer's hash value, queries the lookup table and fetches the corresponding offset list. Each offset in the list yields a <italic>k</italic>-seed, which is a match of <italic>k</italic> consecutive nucleotides between the query and the subject. If <inline-formula><tex-math id="M6">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> is larger than <italic>k</italic>, we must also determine if this <italic>k</italic>-seed is contained in a <inline-formula><tex-math id="M7">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seed. In that case, MegaBLAST scans the database in strides. The maximum stride that ensures that we can find all seeds is <italic>s</italic> = <inline-formula><tex-math id="M8">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> − <italic>k</italic> + 1. See (<xref rid="B27" ref-type="bibr">27</xref>,<xref rid="B19" ref-type="bibr">19</xref>,<xref rid="B14" ref-type="bibr">14</xref>) for more details.</p>
    <p>The execution time of BLAST scales linearly in the size of the target sequence dataset. However, the sequence datasets grow exponentially making the acceleration of BLAST a pressing issue.</p>
    <p>Many profiling studies (<xref rid="B13" ref-type="bibr">13</xref>,<xref rid="B14" ref-type="bibr">14</xref>) have revealed that the preliminary stage is the most computationally intensive stage among the three stages in BLAST and therefore the most promising place to accelerate BLAST. As mentioned in the ‘Introduction’ section, there are currently two major approaches in the literature to achieve this goal, one of which is to use different kinds of custom-designed hardware. For example, GPU-BLAST (<xref rid="B13" ref-type="bibr">13</xref>) (resp. G-BLASTN (<xref rid="B14" ref-type="bibr">14</xref>)) uses GPUs to parallelize the preliminary stage of BLASTP (<xref rid="B1" ref-type="bibr">1</xref>,<xref rid="B2" ref-type="bibr">2</xref>) (resp. BLASTN (<xref rid="B28" ref-type="bibr">28</xref>)). Another way, suggested by many studies (<xref rid="B15" ref-type="bibr">15</xref>), is to replace the query-index used in BLAST by a database-derived index. There are several software packages that employ such an index. However, these packages are either less sensitive than BLAST, due to <italic>k</italic>-mers missing from the index, or suffer from poor performance on long queries and large databases due to their indexing and seeding methods.</p>
    <p>The key idea underlying HS-BLASTN is to replace the seeding step of MegaBLAST with a new lookup table and seeding algorithm. To this end, we build an FMD-index of the genomic database. We note that searching the database using its FMD-index gives us a bi-interval for each <italic>k</italic>-mer (see (<xref rid="B26" ref-type="bibr">26</xref>) for its definition). Thus, using the FMD-index we build a new lookup table storing the bi-intervals of all the <italic>k</italic>-mers, which are then used by a new seeding algorithm to find seeds. There are two advantages of HS-BLASTN over the other packages mentioned above. First, HS-BLASTN finds all the <inline-formula><tex-math id="M9">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds (<inline-formula><tex-math id="M10">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> ≥ <italic>k</italic>). Second, HS-BLASTN checks whether a set of <italic>k</italic>-seeds are contained in <inline-formula><tex-math id="M11">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds all at the same time, which makes it faster than indexed MegaBLAST that checks only each <italic>k</italic>-seed one at a time. Finally, we note that HS-BLASTN utilizes the same ungapped and gapped extension algorithms as used in MegaBLAST.</p>
    <p>In the remainder of this section, we introduce the notations to be used later, and then describe our database-derived lookup table, seeding algorithm and ungapped extension stage that are used in HS-BLASTN.</p>
    <sec id="SEC2-1">
      <title>Notations</title>
      <p>We use the finite order set Σ = {$,<italic>A</italic>, <italic>C</italic>, <italic>G</italic>, <italic>T</italic>} with $&lt;<italic>A</italic> &lt; <italic>C</italic> &lt; <italic>G</italic> &lt; <italic>T</italic> to represent the alphabet of DNA sequences. The letter $ is a sentinel that is used to mark the end of a sequence. For convenience, we also treat $, <italic>A</italic>, <italic>C</italic>, <italic>G</italic>, <italic>T</italic> as integers 0, 1, 2, 3, 4, respectively. Let <italic>S</italic> be a sequence with length |<italic>S</italic>|. For 0 ≤ <italic>i</italic> ≤ <italic>j</italic> &lt; |<italic>S</italic>|, we denote by <italic>S</italic>[<italic>i</italic>] the <italic>i</italic>th symbol in <italic>S</italic> and <italic>S</italic>[<italic>i</italic>, <italic>j</italic>] the substring of length (<italic>j</italic> − <italic>i</italic> + 1) starting at the <italic>i</italic>th-position and ending at the <italic>j</italic>th-position. We call <italic>S</italic><sub><italic>i</italic></sub> ≔ <italic>S</italic>[<italic>i</italic>, |<italic>S</italic>| − 1] the <italic>i</italic>th suffix of <italic>S</italic>. For two strings <italic>P</italic> and <italic>W</italic>, we write <italic>PW</italic> as their concatenation. We also define <inline-formula><tex-math id="M12">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\overline{S}$\end{document}</tex-math></inline-formula> as the reverse complement of <italic>S</italic>. In addition, given a symbol <italic>a</italic> ∈ Σ, we denote by <inline-formula><tex-math id="M13">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\overline{a}$\end{document}</tex-math></inline-formula> the complement of <italic>a</italic>. As defined in (<xref rid="B29" ref-type="bibr">29</xref>), a string terminated with $ is called a <italic>text</italic>.</p>
      <p>A sequence in the database is called a <italic>subject</italic>. A <italic>k-mer</italic> is a subsequence of length <italic>k</italic>. A <inline-formula><tex-math id="M14">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula><italic>-hit</italic>, or <inline-formula><tex-math id="M15">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula><italic>-seed</italic>, between a query <italic>Q</italic> and a subject <italic>S</italic> is a triplet (<italic>q</italic>, <italic>s</italic>, <inline-formula><tex-math id="M16">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>) such that <italic>Q</italic>[<italic>q</italic>, <italic>q</italic> + <inline-formula><tex-math id="M17">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> − 1] matches <italic>S</italic>[<italic>s</italic>, <italic>s</italic> + <inline-formula><tex-math id="M18">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> − 1]. When the value of <inline-formula><tex-math id="M19">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> is known from the context, we simply call a <inline-formula><tex-math id="M20">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-hit (<inline-formula><tex-math id="M21">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seed) a hit (seed).</p>
      <p>HS-BLASTN processes non-A/C/G/T symbols (also called ambiguous symbols) the same way as MegaBLAST. Ambiguous symbols in the subjects are replaced randomly by nucleotides when the FMD-index is constructed, and will be recovered in the traceback stage. During the search, a symbol from the subject may be aligned to an ambiguous symbol from the queries. This case will be simply treated as a mismatch. See the Supplementary File for more details about treating ambiguous symbols.</p>
    </sec>
    <sec id="SEC2-2">
      <title>The lookup table for database</title>
      <p>In this subsection, we describe the lookup table in HS-BLASTN. Because our lookup table is built atop the FMD-index and relies on the concept of the bi-interval, we first introduce the FMD-index and the bi-interval. Here, <italic>S</italic> represents a given text, <italic>n</italic> ≔ |<italic>S</italic>| denotes its length and <italic>P</italic> represents a given string with length <italic>m</italic> ≔ |<italic>P</italic>|.</p>
      <p>Given a text <italic>S</italic>, as defined in (<xref rid="B26" ref-type="bibr">26</xref>), the <italic>FMD-index</italic> of <italic>S</italic> is the <italic>FM-index</italic> built for <inline-formula><tex-math id="M22">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$S\overline{S}$\end{document}</tex-math></inline-formula>. The FM-index was introduced in (<xref rid="B30" ref-type="bibr">30</xref>) as a fast string matching tool. FM-index is a compressed representation of the suffix array, the BWT and the occurrence array built upon <italic>S</italic>. We discuss these concepts below.</p>
      <p>The <italic>suffix array</italic>
<italic>SA</italic> of <italic>S</italic> is an array of integers in the range [0, <italic>n</italic> − 1] specifying the lexicographic ordering of the <italic>n</italic> suffixes of <italic>S</italic>, that is, a permutation of the integers {0, 1, …, <italic>n</italic> − 1} such that <italic>S</italic><sub><italic>SA</italic>[0]</sub> &lt; <italic>S</italic><sub><italic>SA</italic>[1]</sub> &lt; ⋅⋅⋅ &lt; <italic>S</italic><sub><italic>SA</italic>[<italic>n</italic> − 1]</sub>. The <italic>suffix array interval</italic> [<italic>I</italic><sup><italic>l</italic></sup>(<italic>P</italic>), <italic>I</italic><sup><italic>u</italic></sup>(<italic>P</italic>)] of a given string <italic>P</italic> in <italic>S</italic> is defined to be the interval in <italic>SA</italic> such that <italic>P</italic> is a prefix of <italic>S</italic><sub><italic>SA</italic>[<italic>k</italic>]</sub> for all <italic>I</italic><sup><italic>l</italic></sup>(<italic>P</italic>) ≤ <italic>k</italic> ≤ <italic>I</italic><sup><italic>u</italic></sup>(<italic>P</italic>), but not a prefix of any other suffix of <italic>S</italic>. For convenience, we also denote by <italic>I</italic><sup><italic>s</italic></sup>(<italic>P</italic>) the size of this interval, that is, <italic>I</italic><sup><italic>s</italic></sup>(<italic>P</italic>) ≔ <italic>I</italic><sup><italic>u</italic></sup>(<italic>P</italic>) − <italic>I</italic><sup><italic>l</italic></sup>(<italic>P</italic>) + 1.</p>
      <p>The <italic>Burrows–Wheeler Transform</italic>, or <italic>BWT</italic>, is a data compression technique introduced in (<xref rid="B22" ref-type="bibr">22</xref>). The BWT of <italic>S</italic> is a sequence <italic>B</italic> computed by <italic>B</italic>[<italic>i</italic>] = <italic>S</italic>[<italic>SA</italic>[<italic>i</italic>] − 1] for <italic>SA</italic>[<italic>i</italic>] &gt; 0 and <italic>B</italic>[<italic>i</italic>] =$ otherwise. We need another two arrays <italic>C</italic>[<italic>a</italic>] and <italic>O</italic>[<italic>a</italic>][<italic>i</italic>] for any <italic>a</italic> ∈ Σ and 0 ≤ <italic>i</italic> &lt; <italic>n</italic>, where <italic>C</italic>[<italic>a</italic>] stores the number of symbols in <italic>S</italic> that are strictly smaller than <italic>a</italic>, and <italic>O</italic>[<italic>a</italic>][<italic>i</italic>] is called the <italic>occurrence array</italic>, which is a two-dimensional array that stores the occurrence of <italic>a</italic> in <italic>B</italic>[0, <italic>i</italic>]—the substring of <italic>B</italic> that consists of the first <italic>i</italic> + 1 symbols of <italic>B</italic>.</p>
      <p>We now introduce the bi-interval of <italic>P</italic> in <italic>S</italic>. Given the FMD-index of <italic>S</italic>, it holds that <inline-formula><tex-math id="M23">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$I^s(P)=I^s(\overline{P})$\end{document}</tex-math></inline-formula> where we define the bi-interval of <italic>P</italic> in <italic>S</italic> as <inline-formula><tex-math id="M24">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\omega (P):=[I^l(P), I^l(\overline{P}),I^s(P)]$\end{document}</tex-math></inline-formula>. Once we know the bi-interval of <italic>P</italic>, we can use the backward extension algorithm (Algorithm 2 in (<xref rid="B26" ref-type="bibr">26</xref>)) to get the bi-interval of <italic>aP</italic> and use the forward extension algorithm (Algorithm 3 in (<xref rid="B26" ref-type="bibr">26</xref>)) to get the bi-interval of <italic>Pa</italic>, for any <italic>a</italic> ∈ Σ.</p>
      <p>We build a lookup table for the database based on the FMD-index. Our lookup table is also a hash table. Unlike the lookup tables used in MegaBLAST or in indexed MegaBLAST, each cell in our lookup table stores the bi-interval of one <italic>k</italic>-mer. The number of entries in the lookup table is 4<sup><italic>k</italic></sup>. Our lookup table has three advantages. One, we do not have to build the lookup table each time when searching against the database. Two, our lookup table occupies much less space than that in indexed MegaBLAST. Finally three, our lookup table is more effective than the ones used in MegaBLAST and indexed MegaBLAST, as showed by our experimental results presented in ‘Experimental Results’ section.</p>
    </sec>
    <sec id="SEC2-3">
      <title>The seed search algorithm</title>
      <p>Our seed search algorithm will find all the <inline-formula><tex-math id="M25">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds between the query and the database. It consists of two steps: bi-interval identification and occurrence position detection.</p>
      <p>The first step, which determines the bi-intervals of <inline-formula><tex-math id="M26">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds, is described in Figure <xref ref-type="fig" rid="F1">1</xref>. Given a query to an HS-BLASTN search, we scan the query in strides (line 33). As in MegaBLAST, the maximum stride which ensures that all the <inline-formula><tex-math id="M27">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds will be found is <inline-formula><tex-math id="M28">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula> − <italic>k</italic> + 1 (line 1). For each <italic>k</italic>-word from the query encountered, we calculate its hash value (line 6) and fetch its bi-interval in the lookup table (line 7). For this bi-interval, we use the backward extension algorithm <monospace>BackwardExt</monospace> to conduct the backward search (line 9). If <italic>I</italic><sup><italic>s</italic></sup>(<italic>Q</italic>[<italic>j</italic>, <italic>i</italic> + <italic>k</italic> − 1]) is smaller than <italic>I</italic><sup><italic>s</italic></sup>(<italic>Q</italic>[<italic>j</italic> + 1, <italic>i</italic> + <italic>k</italic> − 1]) (line 10), then we know that some (<italic>k</italic> + <italic>i</italic> − <italic>j</italic>)-seeds cannot be extended in the left direction to yield (<italic>k</italic> + <italic>i</italic> − <italic>j</italic> + 1)-seeds. In this case, we extend it to the right, using the forward extension algorithm <monospace>ForwardExt</monospace> (line 25) and check if the bi-interval of <italic>Q</italic>[<italic>j</italic> + 1, <italic>j</italic> + <inline-formula><tex-math id="M29">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>] is not empty (line 29).</p>
      <fig id="F1" position="float">
        <label>Figure 1.</label>
        <caption>
          <p>Bi-interval Identification: the first step of the seed search algorithm in HS-BLASTN.</p>
        </caption>
        <graphic xlink:href="gkv784fig1"/>
      </fig>
      <p>The second step is illustrated in Figure <xref ref-type="fig" rid="F2">2</xref>. It takes the bi-intervals produced by step 1 as input to determine the exact positions of all the occurrences of <inline-formula><tex-math id="M30">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds in the database. To this end, for each bi-interval [<italic>l</italic>, <italic>u</italic>, <italic>s</italic>] and each <italic>k</italic> ∈ [<italic>l</italic>, <italic>u</italic>, <italic>s</italic>], we find <italic>SA</italic>[<italic>k</italic>]. In practice, the suffix array <italic>SA</italic> may be too large to reside in RAM. To overcome this difficulty, the implementation of the FMD-index in (<xref rid="B26" ref-type="bibr">26</xref>) stores explicitly only <italic>SA</italic>[0], <italic>SA</italic>[<italic>r</italic>], <italic>SA</italic>[2<italic>r</italic>], …, <italic>SA</italic>[|<italic>S</italic>|/<italic>r</italic> − 1], where <italic>r</italic> ≥ 1 is a fixed integer and is referred to as the <italic>suffix array interval</italic>. If <italic>k</italic> is a multiple of <italic>r</italic>, then <italic>SA</italic>[<italic>k</italic>] is available and it can be used immediately. Otherwise, we must iteratively call the <italic>Last-to-First column mapping</italic> (LF-mapping) (lines 7-8, see (<xref rid="B30" ref-type="bibr">30</xref>) for details) until we reach the position <italic>x</italic> that is divisible by <italic>r</italic> (line 6), and get <italic>SA</italic>[<italic>k</italic>] = <italic>SA</italic>[<italic>x</italic>] + <italic>iter</italic> (line 11), where <italic>iter</italic> is the number of iterations. The choice of the value of <italic>r</italic> is a tradeoff between efficiency and memory usage. In (<xref rid="B26" ref-type="bibr">26</xref>), <italic>r</italic> is set to be 32 so that the FMD-index built for the human genome database can reside in 8GB RAM.</p>
      <fig id="F2" position="float">
        <label>Figure 2.</label>
        <caption>
          <p>Occurrence Position Detection: the second step of the seed search algorithm in HS-BLASTN.</p>
        </caption>
        <graphic xlink:href="gkv784fig2"/>
      </fig>
      <p>We now analyze the time complexity of our seeding algorithm. The <monospace>BackwardExt</monospace> and <monospace>ForwardExt</monospace> are called <inline-formula><tex-math id="M31">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal {O}(|Q|)$\end{document}</tex-math></inline-formula> times in step 1, where |<italic>Q</italic>| denotes the length of query <italic>Q</italic>. A calling of <monospace>BackwardExt</monospace> or <monospace>ForwardExt</monospace> involves invoking the LF-mapping four times (see Algorithm 2 of (<xref rid="B26" ref-type="bibr">26</xref>)). Since the LF-mapping can be computed in constant time, step 1 can be finished in <inline-formula><tex-math id="M32">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal {O}(|Q|)$\end{document}</tex-math></inline-formula> time. In step 2, we denote the longest time needed to retrieve <italic>SA</italic>[<italic>k</italic>] by <italic>t</italic><sub>max </sub>, which is also a constant. If the number of <inline-formula><tex-math id="M33">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds is <italic>s</italic>, then step 2 can be conducted in <inline-formula><tex-math id="M34">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal {O}(st_{\max }) = \mathcal {O}(s)$\end{document}</tex-math></inline-formula> time.</p>
    </sec>
    <sec id="SEC2-4">
      <title>From seeds to ungapped alignments</title>
      <p>Both HS-BLASTN and MegaBLAST use the same ungapped extension algorithm to extend a subset of the seeds to ungapped alignments. However, MegaBLAST finds seeds and performs ungapped alignments at the same time, while HS-BLASTN triggers ungapped alignments after all the seeds have been found. In what follows, we first review the scanning stage in MegaBLAST and then introduce the ungapped extension stage in HS-BLASTN. For this purpose, we need another two notions. Given a seed (<italic>q</italic>, <italic>s</italic>, <inline-formula><tex-math id="M35">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>), the number <italic>d</italic> ≔ <italic>s</italic> − <italic>q</italic> is referred to as its <italic>diagonal</italic>. A seed is said to lie on diagonal <italic>d</italic> if its diagonal is <italic>d</italic>. If two seeds lie on the same diagonal, the one with a smaller subject offset will be extended first. The ungapped alignment of a seed can also be identified by a triplet <inline-formula><tex-math id="M36">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$(q\_{\rm start}, s\_{\rm start}, L)$\end{document}</tex-math></inline-formula>, where <inline-formula><tex-math id="M37">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$q\_{\rm start}, s\_{\rm start}$\end{document}</tex-math></inline-formula> represent the start offsets in the query and in the subject, respectively, and <italic>L</italic> is the length of the alignment. The end subject offset, <inline-formula><tex-math id="M38">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$s\_{\rm start} + L - 1$\end{document}</tex-math></inline-formula>, of this alignment is called the <italic>diagonal offset</italic> produced by the seed.</p>
      <p>At the preliminary search stage, MegaBLAST maintains a hash table. Each entry of the table corresponds to one diagonal and contains the diagonal offset produced by the last seed that lies on the diagonal. When MegaBLAST finds a seed, it calculates the seed's diagonal and fetches the corresponding diagonal offset from the hash table. If the diagonal offset exceeds the seed's subject offset, then no ungapped extension is necessary. Otherwise, an ungapped extension is performed on the seed and the diagonal offset in the corresponding hash cell will be replaced by the one produced by the seed.</p>
      <p>Once HS-BLASTN finds all the seeds, it sorts them using the quick sort algorithm (<xref rid="B31" ref-type="bibr">31</xref>). After sorted, the seeds that lie on the same diagonal cluster together and those having smaller subject offsets lie on the left hand side of those having larger subject offsets. According to (<xref rid="B31" ref-type="bibr">31</xref>), the computing time required for the sort is <inline-formula><tex-math id="M39">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$\mathcal {O}(s\log s)$\end{document}</tex-math></inline-formula>, where <italic>s</italic> is the number of seeds. Our experiments show that the sort is very fast in practical computation. In fact, the sorting procedure occupies &lt;1% of the total execution time.</p>
      <p>For seeds that lie on the same diagonal, the ungapped extension process begins with the left most seed. At the same time, we keep track of a number <italic>D</italic>, where <italic>D</italic> is initialized to be the diagonal offset produced by the left most seed. If the next seed's subject offset is less than <italic>D</italic>, then we know that it can be discarded. Otherwise it will trigger an ungapped extension and <italic>D</italic> will be updated with the seed's diagonal offset.</p>
    </sec>
  </sec>
  <sec id="SEC3">
    <title>IMPLEMENTATION</title>
    <p>We now describe the implementation of HS-BLASTN, including the implementation of the FMD-index, the parallel design and the usage of HS-BLASTN.</p>
    <sec id="SEC3-1">
      <title>The implementation of the FMD-index</title>
      <p>We modify the implementation of the FMD-index in (<xref rid="B26" ref-type="bibr">26</xref>). The first modification is that the lookup table is built for the target database and is integrated into the FMD-index. The lookup table plays a crucial role in our seeding algorithm. The second is that the value of the suffix array interval <italic>r</italic> is changed from 32 in (<xref rid="B26" ref-type="bibr">26</xref>) to 8. When a query is long and the database is large, many bi-intervals of <inline-formula><tex-math id="M40">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}$w$\end{document}</tex-math></inline-formula>-seeds will be obtained, which implies that the time-consuming LF-mapping will be repeatedly called many times. As a result, the performance of HS-BLASTN deteriorates. To settle this problem, a smaller value of <italic>r</italic> should be used.</p>
      <p>It is a challenge to choose the value of <italic>r</italic>. There are two factors that must be considered: efficiency and memory usage. To pick up an appropriate <italic>r</italic>, we build several FMD-indices for the human genomic database. These indices are constructed with different values of <italic>r</italic>. We then search a set of queries (these queries consist of the first 200 000 queries of query set 0 and query set 1, details of query sets 0 and 1 can be found in ‘Experimental Results’ section) using these indices and examine the execution time of step 2 of the seeding algorithm (Figure <xref ref-type="fig" rid="F2">2</xref>). The execution time and the sizes of the indices are shown in Figure <xref ref-type="fig" rid="F3">3</xref>, From the figure we can see that, a small value of <italic>r</italic> yields high performance but requires large memory occupation, while a large value of <italic>r</italic> yields slow speed and needs small memory usage. We choose <italic>r</italic> = 8 due to the fact that under this value, HS-BLASTN is feasible to run on a computer equipped with 16GB RAM and is fast enough, as showed by the experiments.</p>
      <fig id="F3" position="float">
        <label>Figure 3.</label>
        <caption>
          <p>When searching against the human genome database, the running time of step 2 of the seeding algorithm and the size of the FMD-index under different values of <italic>r</italic>. One CPU thread is used. The choice of <italic>r</italic> is a tradeoff between efficiency and memory usage: the smaller value of <italic>r</italic>, the less execution time, and the larger value of <italic>r</italic>, the smaller size of the FMD-index.</p>
        </caption>
        <graphic xlink:href="gkv784fig3"/>
      </fig>
    </sec>
    <sec id="SEC3-2">
      <title>Parallel design</title>
      <p>To make full use of the computational power provided by multi-core computers, we parallelize HS-BLASTN by using multiple CPU threads. Users are allowed to specify a desired number of searching threads (option<monospace>-num_threads</monospace>, as in <monospace>blastn</monospace>). HS-BLASTN first prepares the database and the queries. Because the search (the preliminary search stage and the traceback stage) on different queries are independent, HS-BLASTN distributes the queries across the searching threads. Each thread launches the search engine concurrently. The searching threads synchronize with each other when they finish their tasks. Finally, HS-BLASTN merges the results from all the threads into a single output. The whole HS-BLASTN search with <italic>N</italic> threads proceeds as Figure <xref ref-type="fig" rid="F4">4</xref>.</p>
      <fig id="F4" position="float">
        <label>Figure 4.</label>
        <caption>
          <p>The whole HS-BLASTN search procedure.</p>
        </caption>
        <graphic xlink:href="gkv784fig4"/>
      </fig>
      <p>During the search, the memory image of the FMD-index is shared by all threads. As a result, the memory footprint will not grow substantially when multiple threads are used.</p>
    </sec>
    <sec id="SEC3-3">
      <title>The usage of HS-BLASTN</title>
      <p>Using HS-BLASTN to conduct a database search involves two steps. The first step is to build the FMD-index for the target database, using the <monospace>index</monospace> command. The command to build the FMD-index for database <monospace>human.fa</monospace> looks like the following.</p>
      <p>
        <monospace>$hs-blastn index human.fa</monospace>
      </p>
      <p>The second step is to use the <monospace>align</monospace> command to search against the target database. HS-BLASTN supports a frequently used subset of the options in <monospace>blastn</monospace>. For example, we use the following command line to run HS-BLASTN in our experiments.</p>
      <p>
        <monospace>$hs-blastn align -db &lt;database&gt; \</monospace>
      </p>
      <p>
        <monospace>-query &lt;file&gt; -outfmt 7 -dust yes \</monospace>
      </p>
      <p>
        <monospace>-num_threads &lt;Integer&gt; \</monospace>
      </p>
      <p>
        <monospace>-window_masker_db &lt;masker_db&gt;</monospace>
      </p>
    </sec>
  </sec>
  <sec id="SEC4">
    <title>EXPERIMENTAL RESULTS</title>
    <p>To assess the execution time of HS-BLASTN and MegaBLAST we run HS-BLASTN and MegaBLAST on two query sets under different numbers of CPU threads. We will also compare their parallel performance when multiple CPU threads are used. The output results of the two alignment tools are the same in the two query sets. We first introduce the general setup, datasets and test methods, and then discuss the experimental results.</p>
    <p>Due to the large size of the FMD-index, before lunching the search engine, HS-BLASTN spends some time (about 6 s on our server) to load the index into RAM (step 2 of Figure <xref ref-type="fig" rid="F4">4</xref>). However, because the index is loaded only once, there is an overall performance benefit when aligning a large number of queries. As a result, compared to the long searching time, the time spent on loading the index can be almost neglected. Hence, to demonstrate the performance advantage of HS-BLASTN over MegaBLAST, we compare their execution time of searching two very large query sets.</p>
    <sec id="SEC4-1">
      <title>General setup and datasets</title>
      <p>The experiments are all conducted on a Linux server with two six-core Intel Xeon E5-2620 CPUs and has more than 16GB of RAM. The MegaBLAST that we use is the 64-bit build and is built from the source code of BLAST version 2.2.30+. Both the source codes of BLAST and HS-BLASTN are compiled with GCC version 4.4.6. The code of HS-BLASTN is compiled with the -O3 level of optimization set. The command lines used for building BLAST and HS-BLASTN are given in the Supplementary File.</p>
      <sec id="SEC4-1-1">
        <title>Database</title>
        <p>The database that we choose is the human build 38 (<ext-link ext-link-type="uri" xlink:href="http://hgdownload.soe.ucsc.edu/downloads.html#human">http://hgdownload.soe.ucsc.edu/downloads.html#human</ext-link>). We mask the database with the WindowMasker (<xref rid="B32" ref-type="bibr">32</xref>). The size of the FMD-index built for the database is about 12.2GB.</p>
      </sec>
      <sec id="SEC4-1-2">
        <title>Queries</title>
        <p>The queries are all Homo Sapience sequences. We extract two query sets from the file Hs.seq.all (<ext-link ext-link-type="ftp" xlink:href="ftp://ftp.ncbi.nih.gov/repository/UniGene/">ftp://ftp.ncbi.nih.gov/repository/UniGene/</ext-link>). Query set 0 consists of 2 millions of short queries with length ranging from 100 to 500. Query set 1 consists of about 870 000 long queries with length being 800–4000.</p>
      </sec>
    </sec>
    <sec id="SEC4-2">
      <title>Test methods</title>
      <p>We run both HS-BLASTN and MegaBLAST on each query set in the batch mode under different numbers of CPU threads. That is, each command line call of HS-BLASTN or MegaBLAST takes a query set as input. Our test method is different from that in (<xref rid="B19" ref-type="bibr">19</xref>,<xref rid="B14" ref-type="bibr">14</xref>), in which each command line call handles only one query at a time. Before the experiments are conducted, the FMD-index, which is constructed only once, has been built (the <monospace>index</monospace> command). The time spent on building the FMD-index is not included in the HS-BLASTN running time. The running time of HS-BLASTN and MegaBLAST that we record is the wall clock time and is measured by the standard <monospace>time</monospace> utility. We run each test five times and report the average execution time.</p>
    </sec>
    <sec id="SEC4-3">
      <title>Results</title>
      <p>In this subsection, we compare the performance of HS-BLASTN with that of MegaBLAST on each query set under different numbers of CPU threads. To this end, we use <italic>TH</italic>(<italic>q</italic>, <italic>n</italic>) (resp. <italic>TM</italic>(<italic>q</italic>, <italic>n</italic>)) to represent the execution time of HS-BLASTN (resp. MegaBLAST) running on query set <italic>q</italic> under <italic>n</italic> CPU threads. We define,
<disp-formula id="M1"><label>(1)</label><tex-math id="M41">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym} 
\usepackage{amsfonts} 
\usepackage{amssymb} 
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
}{}\begin{equation*} S(q,n):=\frac{TM(q,n)}{TH(q,n)} \end{equation*}\end{document}</tex-math></disp-formula>
as the relative speedup achieved by HS-BLASTN in comparison to MegaBLAST when both alignment tools running on query set <italic>q</italic> under <italic>n</italic> CPU threads.</p>
      <p>The experimental results are depicted in Figure <xref ref-type="fig" rid="F5">5</xref>. The running time of HS-BLASTN is close to 0 in comparison with that of MegaBLAST. For the sake of comparison, we demonstrate the logarithm of the execution time instead. The execution time can be found in the Supplementary File. Figure <xref ref-type="fig" rid="F5">5</xref> also shows the speedup <italic>S</italic>(<italic>q</italic>, <italic>n</italic>). In each test, HS-BLASTN loads the FMD-index into RAM before running the searching procedure. On our server, this overhead costs about 6 s, which are included in the execution time of HS-BLASTN.</p>
      <fig id="F5" position="float">
        <label>Figure 5.</label>
        <caption>
          <p>Logarithm of the execution time and speedup on searching against the human genomic database. <bold>Left:</bold> Each curve shows on a specific query set the logarithm of the execution time of HS-BLASTN or MegaBLAST as a function of CPU threads. The execution time of HS-BLASTN in each test includes about 6 s that are used for loading the FMD-index into RAM. <bold>Right:</bold> Each curve represents the speedup <italic>S</italic>(<italic>q</italic>, <italic>n</italic>) (see Equation (<xref ref-type="disp-formula" rid="M1">1</xref>)) achieved by HS-BLASTN in comparison to MegaBLAST when both alignment tools run on the same query set under the same number of CPU threads. On each query set, the execution time decreases when the number of CPU threads is raised. When both are running under 12 CPU threads, HS-BLASTN is 22 and 18 times faster than MegaBLAST on query set 0 and query set 1, respectively. On each query set, as we raise the number of CPU threads, the execution time of HS-BLASTN drops faster than that of MegaBLAST, which indicates improved performance with increasing thread number.</p>
        </caption>
        <graphic xlink:href="gkv784fig5"/>
      </fig>
      <p>HS-BLASTN is faster than MegaBLAST in all the tests, especially on query set 0. When both running under 12 CPU threads, HS-BLASTN is 22 and 18 times faster than MegaBLAST on query set 0 and query set 1, respectively. The speedup on query set 0 is larger than that on query set 1 under all the CPU threads. This is because on short queries, the seed identification step in MegaBLAST consumes a larger percentage of the total execution time.</p>
      <p>HS-BLASTN exhibits much better parallel performance than MegaBLAST. Although the execution time of the two aligners on all query sets decreases as we raise the number of CPU threads, HS-BLASTN scales better than MegaBLAST. The execution time of HS-BLASTN decreases more rapidly than that of MegaBLAST and the speedup <italic>S</italic>(<italic>q</italic>, <italic>n</italic>) becomes larger, which can be seen from Figure <xref ref-type="fig" rid="F5">5</xref>.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions" id="SEC5">
    <title>CONCLUSIONS</title>
    <p>We have introduced HS-BLASTN, a nucleotide database search tool that shows a computational speed improvement compared to MegaBLAST. HS-BLASTN accelerates MegaBLAST by creating a lookup table that stores the bi-intervals of all the <italic>k</italic>-mers and uses a seeding method that scans the queries in strides. We have demonstrated by experiments that HS-BLASTN exhibits a great performance advantage over MegaBLAST and a much better parallel performance than MegaBLAST. Because the number of biological sequences grows exponentially, HS-BLASTN, with its improved execution speed (10–20×) over MegaBLAST, is an important advance for bioinformatics genomic search.</p>
  </sec>
  <sec sec-type="supplementary-material" id="SEC6">
    <title>SUPPLEMENTARY DATA</title>
    <p><ext-link ext-link-type="uri" xlink:href="http://nar.oxfordjournals.org/lookup/suppl/doi:10.1093/nar/gkv784/-/DC1">Supplementary Data</ext-link> are available at NAR Online.</p>
    <supplementary-material id="PMC_1" content-type="local-data">
      <caption>
        <title>SUPPLEMENTARY DATA</title>
      </caption>
      <media mimetype="text" mime-subtype="html" xlink:href="supp_43_16_7762__index.html"/>
      <media xlink:role="associated-file" mimetype="application" mime-subtype="pdf" xlink:href="supp_gkv784_nar-00226-z-2015-File004.pdf"/>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <p>The authors are grateful to Dr C. Ross Schmidtlein of Memorial Sloan Kettering Cancer Center, New York, USA for his helpful comments which improve the presentation of the paper.</p>
  </ack>
  <sec id="SEC7">
    <title>FUNDING</title>
    <p>Guangdong Provincial Government of China through the ‘Computational Science Innovative Research Team’ program; Natural Science Foundation of China [11471013]; ‘Fundamental Research Funds for the Central Universities’ [13lgjc05, 14lgjc01]; Guangdong Province Sun Yat-sen University Education Development Foundation [305027].</p>
    <p><italic>Conflict of interest statement</italic>. None declared.</p>
  </sec>
  <ref-list>
    <title>REFERENCES</title>
    <ref id="B1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>S.F.</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W.</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W.</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>E.W.</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>D.J.</given-names>
          </name>
        </person-group>
        <article-title>Basic local alignment search tool</article-title>
        <source>J. Mol. Biol.</source>
        <year>1990</year>
        <volume>215</volume>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="B2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>S.F.</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>T.L.</given-names>
          </name>
          <name>
            <surname>Schäffer</surname>
            <given-names>A.A.</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Z.</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W.</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>D.J.</given-names>
          </name>
        </person-group>
        <article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title>
        <source>Nucleic Acids Res.</source>
        <year>1997</year>
        <volume>25</volume>
        <fpage>3389</fpage>
        <lpage>3402</lpage>
        <pub-id pub-id-type="pmid">9254694</pub-id>
      </element-citation>
    </ref>
    <ref id="B3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Daniels</surname>
            <given-names>N.M.</given-names>
          </name>
          <name>
            <surname>Gallant</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Peng</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Cowen</surname>
            <given-names>L.J.</given-names>
          </name>
          <name>
            <surname>Baym</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Berger</surname>
            <given-names>B.</given-names>
          </name>
        </person-group>
        <article-title>Compressive genomics for protein databases</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <fpage>i283</fpage>
        <lpage>i290</lpage>
        <pub-id pub-id-type="pmid">23812995</pub-id>
      </element-citation>
    </ref>
    <ref id="B4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rost</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Yachdav</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>The predictprotein server</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2004</year>
        <volume>32</volume>
        <fpage>W321</fpage>
        <lpage>W326</lpage>
        <pub-id pub-id-type="pmid">15215403</pub-id>
      </element-citation>
    </ref>
    <ref id="B5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Loewenstein</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Raimondo</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Redfern</surname>
            <given-names>O.C.</given-names>
          </name>
          <name>
            <surname>Watson</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Frishman</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Linial</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Orengo</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Thornton</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Tramontano</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>Protein function annotation by homology-based inference</article-title>
        <source>Genome Biol.</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>207</fpage>
        <pub-id pub-id-type="pmid">19226439</pub-id>
      </element-citation>
    </ref>
    <ref id="B6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tatusov</surname>
            <given-names>R.L.</given-names>
          </name>
          <name>
            <surname>Galperin</surname>
            <given-names>M.Y.</given-names>
          </name>
          <name>
            <surname>Natale</surname>
            <given-names>D.A.</given-names>
          </name>
          <name>
            <surname>Koonin</surname>
            <given-names>E.V.</given-names>
          </name>
        </person-group>
        <article-title>The COG database: a tool for genome-scale analysis of protein functions and evolution</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2000</year>
        <volume>28</volume>
        <fpage>33</fpage>
        <lpage>36</lpage>
        <pub-id pub-id-type="pmid">10592175</pub-id>
      </element-citation>
    </ref>
    <ref id="B7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sachidanandam</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Weissman</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Schmidt</surname>
            <given-names>S.C.</given-names>
          </name>
          <name>
            <surname>Kakol</surname>
            <given-names>J.M.</given-names>
          </name>
          <name>
            <surname>Stein</surname>
            <given-names>L.D.</given-names>
          </name>
          <name>
            <surname>Marth</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Sherry</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Mullikin</surname>
            <given-names>J.C.</given-names>
          </name>
          <name>
            <surname>Mortimore</surname>
            <given-names>B.J.</given-names>
          </name>
          <name>
            <surname>Willey</surname>
            <given-names>D.L.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A map of human genome sequence variation containing 1.42 million single nucleotide polymorphisms</article-title>
        <source>Nature</source>
        <year>2001</year>
        <volume>409</volume>
        <fpage>928</fpage>
        <lpage>933</lpage>
        <pub-id pub-id-type="pmid">11237013</pub-id>
      </element-citation>
    </ref>
    <ref id="B8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Allen</surname>
            <given-names>J.E.</given-names>
          </name>
          <name>
            <surname>Pertea</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>S.L.</given-names>
          </name>
        </person-group>
        <article-title>Computational gene prediction using multiple sources of evidence</article-title>
        <source>Genome Res.</source>
        <year>2004</year>
        <volume>14</volume>
        <fpage>142</fpage>
        <lpage>148</lpage>
        <pub-id pub-id-type="pmid">14707176</pub-id>
      </element-citation>
    </ref>
    <ref id="B9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Oehmen</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Nieplocha</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>ScalaBLAST: a scalable implementation of BLAST for high-performance data-intensive bioinformatics analysis</article-title>
        <source>IEEE Trans. Parallel Distrib. Syst.</source>
        <year>2006</year>
        <volume>17</volume>
        <fpage>740</fpage>
        <lpage>749</lpage>
      </element-citation>
    </ref>
    <ref id="B10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Oehmen</surname>
            <given-names>C.S.</given-names>
          </name>
          <name>
            <surname>Baxter</surname>
            <given-names>D.J.</given-names>
          </name>
        </person-group>
        <article-title>ScalaBLAST 2.0: rapid and robust BLAST calculations on multiprocessor systems</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <fpage>797</fpage>
        <lpage>798</lpage>
        <pub-id pub-id-type="pmid">23361326</pub-id>
      </element-citation>
    </ref>
    <ref id="B11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Herbordt</surname>
            <given-names>M.C.</given-names>
          </name>
          <name>
            <surname>Model</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Sukhwani</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Gu</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>VanCourt</surname>
            <given-names>T.</given-names>
          </name>
        </person-group>
        <article-title>Single pass streaming BLAST on FPGAs</article-title>
        <source>Parallel Comput.</source>
        <year>2007</year>
        <volume>33</volume>
        <fpage>741</fpage>
        <lpage>756</lpage>
        <pub-id pub-id-type="pmid">19081828</pub-id>
      </element-citation>
    </ref>
    <ref id="B12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sotiriades</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Dollas</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>A general reconfigurable architecture for the BLAST algorithm</article-title>
        <source>J. VLSI Signal Process.</source>
        <year>2007</year>
        <volume>48</volume>
        <fpage>189</fpage>
        <lpage>208</lpage>
      </element-citation>
    </ref>
    <ref id="B13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vouzis</surname>
            <given-names>P.D.</given-names>
          </name>
          <name>
            <surname>Sahinidis</surname>
            <given-names>N.V.</given-names>
          </name>
        </person-group>
        <article-title>GPU-BLAST: using graphics processors to accelerate protein sequence alignment</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <fpage>182</fpage>
        <lpage>188</lpage>
        <pub-id pub-id-type="pmid">21088027</pub-id>
      </element-citation>
    </ref>
    <ref id="B14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhao</surname>
            <given-names>K.</given-names>
          </name>
          <name>
            <surname>Chu</surname>
            <given-names>X.</given-names>
          </name>
        </person-group>
        <article-title>G-BLASTN: accelerating nucleotide alignment by graphics processors</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <fpage>1384</fpage>
        <lpage>1391</lpage>
        <pub-id pub-id-type="pmid">24463183</pub-id>
      </element-citation>
    </ref>
    <ref id="B15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jiang</surname>
            <given-names>X.</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>X.</given-names>
          </name>
          <name>
            <surname>Yau</surname>
            <given-names>S.S.-T.</given-names>
          </name>
        </person-group>
        <article-title>Survey on index based homology search algorithms</article-title>
        <source>J. Supercomput.</source>
        <year>2007</year>
        <volume>40</volume>
        <fpage>185</fpage>
        <lpage>212</lpage>
      </element-citation>
    </ref>
    <ref id="B16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ning</surname>
            <given-names>Z.</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>A.J.</given-names>
          </name>
          <name>
            <surname>Mullikin</surname>
            <given-names>J.C.</given-names>
          </name>
        </person-group>
        <article-title>SSAHA: a fast search method for large DNA databases</article-title>
        <source>Genome Res.</source>
        <year>2001</year>
        <volume>11</volume>
        <fpage>1725</fpage>
        <lpage>1729</lpage>
        <pub-id pub-id-type="pmid">11591649</pub-id>
      </element-citation>
    </ref>
    <ref id="B17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kim</surname>
            <given-names>Y.J.</given-names>
          </name>
          <name>
            <surname>Boyd</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Athey</surname>
            <given-names>B.D.</given-names>
          </name>
          <name>
            <surname>Patel</surname>
            <given-names>J.M.</given-names>
          </name>
        </person-group>
        <article-title>miBLAST: scalable evaluation of a batch of nucleotide sequence queries with BLAST</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2005</year>
        <volume>33</volume>
        <fpage>4335</fpage>
        <lpage>4344</lpage>
        <pub-id pub-id-type="pmid">16061938</pub-id>
      </element-citation>
    </ref>
    <ref id="B18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kent</surname>
            <given-names>W.J.</given-names>
          </name>
        </person-group>
        <article-title>BLAT-the BLAST-like alignment tool</article-title>
        <source>Genome Res.</source>
        <year>2002</year>
        <volume>12</volume>
        <fpage>656</fpage>
        <lpage>664</lpage>
        <pub-id pub-id-type="pmid">11932250</pub-id>
      </element-citation>
    </ref>
    <ref id="B19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Morgulis</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Coulouris</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Raytselis</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>T.L.</given-names>
          </name>
          <name>
            <surname>Agarwala</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Schäffer</surname>
            <given-names>A.A.</given-names>
          </name>
        </person-group>
        <article-title>Database indexing for production MegaBLAST searches</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>1757</fpage>
        <lpage>1764</lpage>
        <pub-id pub-id-type="pmid">18567917</pub-id>
      </element-citation>
    </ref>
    <ref id="B20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edgar</surname>
            <given-names>R.C.</given-names>
          </name>
        </person-group>
        <article-title>Search and clustering orders of magnitude faster than BLAST</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>2460</fpage>
        <lpage>2461</lpage>
        <pub-id pub-id-type="pmid">20709691</pub-id>
      </element-citation>
    </ref>
    <ref id="B21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Buchfink</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Huson</surname>
            <given-names>D.H.</given-names>
          </name>
        </person-group>
        <article-title>Fast and sensitive protein alignment using DIAMOND</article-title>
        <source>Nat. Methods</source>
        <year>2015</year>
        <volume>1</volume>
        <fpage>59</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="pmid">25402007</pub-id>
      </element-citation>
    </ref>
    <ref id="B22">
      <label>22.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Burrows</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Wheeler</surname>
            <given-names>D.J.</given-names>
          </name>
        </person-group>
        <source>A block-sorting lossless data compression algorithm</source>
        <year>1994</year>
        <publisher-loc>Palo Alto CA</publisher-loc>
        <publisher-name>Digital Equipment Corporation</publisher-name>
      </element-citation>
    </ref>
    <ref id="B23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>S.L.</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with Bowtie 2</article-title>
        <source>Nat. Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <fpage>357</fpage>
        <lpage>359</lpage>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="B24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R.</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate short read alignment with Burrows–Wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>1754</fpage>
        <lpage>1760</lpage>
        <pub-id pub-id-type="pmid">19451168</pub-id>
      </element-citation>
    </ref>
    <ref id="B25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Schmidt</surname>
            <given-names>B.</given-names>
          </name>
        </person-group>
        <article-title>Long read alignment based on maximal exact match seeds</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <fpage>i318</fpage>
        <lpage>i324</lpage>
        <pub-id pub-id-type="pmid">22962447</pub-id>
      </element-citation>
    </ref>
    <ref id="B26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H.</given-names>
          </name>
        </person-group>
        <article-title>Exploring single-sample SNP and INDEL calling with whole-genome de novo assembly</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <fpage>1838</fpage>
        <lpage>1844</lpage>
        <pub-id pub-id-type="pmid">22569178</pub-id>
      </element-citation>
    </ref>
    <ref id="B27">
      <label>27.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Camacho</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Coulouris</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Avagyan</surname>
            <given-names>V.</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Papadopoulos</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Bealer</surname>
            <given-names>K.</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>T.L.</given-names>
          </name>
        </person-group>
        <article-title>BLAST+: architecture and applications</article-title>
        <source>BMC Bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>421</fpage>
        <pub-id pub-id-type="pmid">20003500</pub-id>
      </element-citation>
    </ref>
    <ref id="B28">
      <label>28.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhang</surname>
            <given-names>Z.</given-names>
          </name>
          <name>
            <surname>Schwartz</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Wagner</surname>
            <given-names>L.</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W.</given-names>
          </name>
        </person-group>
        <article-title>A greedy algorithm for aligning DNA sequences</article-title>
        <source>J. Comp. Biol.</source>
        <year>2000</year>
        <volume>7</volume>
        <fpage>203</fpage>
        <lpage>214</lpage>
      </element-citation>
    </ref>
    <ref id="B29">
      <label>29.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Sirén</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>Compressed suffix arrays for massive data</article-title>
        <source>Proceedings of the 16th International Symposium on String Processing and Information Retrieval</source>
        <year>2009</year>
        <fpage>63</fpage>
        <lpage>67</lpage>
      </element-citation>
    </ref>
    <ref id="B30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ferragina</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Manzini</surname>
            <given-names>G.</given-names>
          </name>
        </person-group>
        <article-title>Opportunistic data structures with applications</article-title>
        <source>Proceedings of the 41st Annual Symposium on Foundations of Computer Science</source>
        <year>2000</year>
        <volume>2000</volume>
        <fpage>390</fpage>
        <lpage>398</lpage>
      </element-citation>
    </ref>
    <ref id="B31">
      <label>31.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Cormen</surname>
            <given-names>T.H.</given-names>
          </name>
          <name>
            <surname>Leiserson</surname>
            <given-names>C.E.</given-names>
          </name>
          <name>
            <surname>Rivest</surname>
            <given-names>R.L.</given-names>
          </name>
          <name>
            <surname>Stein</surname>
            <given-names>C.</given-names>
          </name>
        </person-group>
        <source>Introduction to Algorithms</source>
        <year>2009</year>
        <publisher-loc>Cambridge</publisher-loc>
        <publisher-name>MIT Press</publisher-name>
      </element-citation>
    </ref>
    <ref id="B32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Morgulis</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Gertz</surname>
            <given-names>E.M.</given-names>
          </name>
          <name>
            <surname>Schäffer</surname>
            <given-names>A.A.</given-names>
          </name>
          <name>
            <surname>Agarwala</surname>
            <given-names>R.</given-names>
          </name>
        </person-group>
        <article-title>WindowMasker: window-based masker for sequenced genomes</article-title>
        <source>Bioinformatics</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>134</fpage>
        <lpage>141</lpage>
        <pub-id pub-id-type="pmid">16287941</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
