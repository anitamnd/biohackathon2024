<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3560148</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-14-19</article-id>
    <article-id pub-id-type="pmid">23323543</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-14-19</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SRAdb: query and use public next-generation sequencing data from within R</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="A1">
        <name>
          <surname>Zhu</surname>
          <given-names>Yuelin</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>zhujack@mail.nih.gov</email>
      </contrib>
      <contrib contrib-type="author" id="A2">
        <name>
          <surname>Stephens</surname>
          <given-names>Robert M</given-names>
        </name>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>stephensr@mail.nih.gov</email>
      </contrib>
      <contrib contrib-type="author" id="A3">
        <name>
          <surname>Meltzer</surname>
          <given-names>Paul S</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>pmeltzer@mail.nih.gov</email>
      </contrib>
      <contrib contrib-type="author" corresp="yes" id="A4">
        <name>
          <surname>Davis</surname>
          <given-names>Sean R</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>sdavis2@mail.nih.gov</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Genetics Branch, National Cancer Institute, National Institutes of HealthBethesda, MD 20892, USA</aff>
    <aff id="I2"><label>2</label>Advanced Biomedical Computing Center, National Cancer Institute-Frederick, SAIC-Frederick Inc., Frederick, MD 21702, USA</aff>
    <pub-date pub-type="collection">
      <year>2013</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>17</day>
      <month>1</month>
      <year>2013</year>
    </pub-date>
    <volume>14</volume>
    <fpage>19</fpage>
    <lpage>19</lpage>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>9</month>
        <year>2012</year>
      </date>
      <date date-type="accepted">
        <day>11</day>
        <month>1</month>
        <year>2013</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright Â©2013 Zhu et al.; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2013</copyright-year>
      <copyright-holder>Zhu et al.; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (
<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.biomedcentral.com/1471-2105/14/19"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>The Sequence Read Archive (SRA) is the largest public repository of sequencing data from the next generation of sequencing platforms including Illumina (Genome Analyzer, HiSeq, MiSeq, .etc), Roche 454 GS System, Applied Biosystems SOLiD System, Helicos Heliscope, PacBio RS, and others.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>SRAdb is an attempt to make queries of the metadata associated with SRA submission, study, sample, experiment and run more robust and precise, and make access to sequencing data in the SRA easier. We have parsed all the SRA metadata into a SQLite database that is routinely updated and can be easily distributed. The SRAdb R/Bioconductor package then utilizes this SQLite database for querying and accessing metadata. Full text search functionality makes querying metadata very flexible and powerful. Fastq files associated with query results can be downloaded easily for local analysis. The package also includes an interface from R to a popular genome browser, the Integrated Genomics Viewer.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>SRAdb Bioconductor package provides a convenient and integrated framework to query and access SRA metadata quickly and powerfully from within R.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>High throughput next-generation sequencing (NGS) technologies are very rapidly becoming standard tools in biology. The data generated are large and extremely rich. As such, the Sequence Read Archive (SRA,
[<xref ref-type="bibr" rid="B1">1</xref>]) has been set up at NCBI in the United States, EMBL in Europe, and DDBJ in Japan to capture these data in public repositories in much the same spirit as MIAME-compliant microarray databases like NCBI Gene Expression Omnibus (GEO) and EBI ArrayExpress. As these public data resources continue to grow, the opportunities to leverage them for comparison to private data or to generate novel hypotheses will also grow.</p>
    <p>Searching for and retrieving data from the SRA database is becoming a common task for those involved in all aspects of biological research. The SRA website offers interactive search functionality that is often adequate to find datasets of interest. SRAdb is not meant to replace these workflows, but to augment them with additional search capabilities and programmatic access to SRA data and metadata. The package has been developed to provide a convenient and integrated framework to query and access SRA metadata quickly and powerfully from within R
[<xref ref-type="bibr" rid="B2">2</xref>] and Bioconductor
[<xref ref-type="bibr" rid="B3">3</xref>]. In addition, SRAdb features functionality to determine availability of sequence files and to download files of interest in bulk based on the results of queries on the metadata. The data consumer can then use R, Bioconductor, or third- party tools to proceed with analysis. Finally, because of our own need to visualize processed data in bulk, particularly in the context of experimental metadata, the package provides functions to let R interacts with a powerful and feature-rich genome browser - the Integrative Genomics Viewer (IGV,
[<xref ref-type="bibr" rid="B4">4</xref>]) for data visualization and exploration.</p>
    <p>SRA does not currently store aligned reads or any other processed data that might rely on alignment to a reference genome. However, the NCBI GEO database does often contain aligned reads for sequencing experiments and the SRAdb package can be used to facilitate access to these data as well. Since SRA is a continuously growing repository, the SRAdb SQLite file is updated regularly.</p>
  </sec>
  <sec>
    <title>Design</title>
    <p>Submission of SRA data includes experimental data (typically sequence data files) and metadata describing the experiments and biologicals. The metadata are composed of five main data objects: submission, study, sample, experiment and run. Each object is defined by an XML schema and an XML submission contains one or more metadata objects that are related to each other. After submission, an unique accession number is issued for each object. The SRAdb package maps each of the five main data objects to a set of five relational database tables. This mapping then exposes the power and expressivity of SQL for querying. Additional flexibility is added by abstracting some search operations, particularly full-text-searching, using R functions.</p>
  </sec>
  <sec>
    <title>Implementation</title>
    <p>A parser was developed in Hypertext Preprocessor (PHP,
<ext-link ext-link-type="uri" xlink:href="http://www.php.net">http://www.php.net</ext-link>) according the XML schemas of the objects to extract essential object elements and attributes from each XML submission file. All data in SRAmetadb are faithfully parsed from SRA submissions and no attempt is made to curate, semantically recode, or otherwise clean up SRA data. All field names are also taken from SRA records except for minor changes to improve usability in SQL queries. Fields containing multiple records are generally stored as delimited text within the same record; this denormalization significantly reduces complexity and improves efficiency of queries. The RSQLite package
[<xref ref-type="bibr" rid="B5">5</xref>] includes an embedded SQLite database engine with Full Text Search (fts3) enabled and can interact with any SQLite database and perform full text search. The SQLite version of SRAmetadb is maintained and distributed for local installation and can be used from R as described below in the examples or independently from other clients (python, perl, java, etc.).</p>
  </sec>
  <sec>
    <title>Results and discussion</title>
    <p>In the following sections, we will give an overview of the functionality of the SRAdb package starting with installation, then querying of SRA metadata, retrieval of SRA data based on query results, and finally an example of how to control the IGV browser from within R.</p>
    <sec>
      <title>Installation</title>
      <p>Installation of SRAdb can be performed from the R graphical user interface or, more commonly, from the R command line. <monospace>source ("
<ext-link ext-link-type="uri" xlink:href="http://bioconductor.org/biocLite.R">http://bioconductor.org/biocLite.R</ext-link>")</monospace><monospace>biocLite("SRAdb")</monospace></p>
    </sec>
    <sec>
      <title>Example usage</title>
      <p>After installing the SRAdb package into R, we load the SRAdb library. <monospace>library(SRAdb)</monospace></p>
      <p>The SRAdb R package is a set of functions meant to interact with a SQLite database, so it is necessary to download the SQLite database file before proceeding. This download process can take quite some time on a slow network connection, but the download itself needs to be done only once (or periodically to get updated SRA information). The following code downloads the most recent SRAdb database file and then connects to it from R. <monospace>sqlfile = getSRAdbFile()</monospace><monospace>sra_con = dbConnect(SQLite(), sqlfile)</monospace></p>
      <sec>
        <title>Full text search</title>
        <p>Before accessing SRA data, one must find the appropriate records. SRAdb supports both regular table and field specific SQL commands and a more simplified full-text-searching function. SQLite has a very handy full text search module, fts3, which allow users to do Google-like search with terms and operators. The function getSRA does full text search against all fields in a fts3 table with terms constructed with the Standard Query Syntax and Enhanced Query Syntax (See
<ext-link ext-link-type="uri" xlink:href="http://www.sqlite.org/fts3.html">http://www.sqlite.org/fts3.html</ext-link> for detail). As a simple example, we aim to find all run and study combined records in which any given fields have âbreastâ and âcancerâ words: <monospace>rs = getSRA(search_terms = "breast cancer", out_types = c("run", "study"), sra_con = sra_con)</monospace></p>
        <p>Find study records containing a word beginning with âCarcinoâ: <monospace>rs &lt;- getSRA(search_terms = "Carcinoâ", out_types = c("study"), sra_con = sra_con)</monospace></p>
        <p>It is also possible to be more specific to find records containing exact phrase of âbreast cancerâ, in which âbreastâ and âcancerâ much occur together. In each case, the variable rs will be an R data.frame that can be further processed or filtered in R. The columns in the data.frame are dictated by the âout_typesâ argument. Representative columns of the resulting data.frame are shown in the following code example. <monospace>rs &lt;- getSRA(search_terms = "â"breast cancerâ"", out_types = c("run", "study"),</monospace><monospace>sra_con = sra_con)</monospace><monospace>head(rs[, c(1:5, 7)])</monospace><monospace>## run_alias run run_date updated_date spots run_center</monospace><monospace>## 1 HMEC_2 DRR000109 2008-12-22 2012-06-23 19300723 KUGSPS</monospace><monospace>## 2 MDAMB231_2 DRR000103 2008-12-22 2012-06-23 6447854 KUGSPS</monospace><monospace>## 3 MCF7_3 DRR000110 2008-12-22 2012-06-23 5396205 KUGSPS</monospace><monospace>## 4 T47D_I DRR000106 2008-12-22 2012-06-23 6272361 KUGSPS</monospace><monospace>## 5 MCF7_1_paired DRR000093 2008-12-22 2012-09-06 6141309 KUGSPS</monospace><monospace>## 6 MDAMB231_1 DRR000095 2008-12-22 2012-09-06 6110876 KUGSPS</monospace></p>
      </sec>
      <sec>
        <title>Arbitrary SQL queries</title>
        <p>The getSRA function hides most of the detais of the underlying SQLite database and queries. However, one of the strengths of SRAdb is in exposing the SRA metadata via a standard query language, SQL. The column descriptions for the SRAdb SQLite database schema are given in table form in Additional file
<xref ref-type="supplementary-material" rid="S1">1</xref> and are also available via the colDescriptions function in the SRAdb package. As a simple example, we can query SRAdb for the number of runs for each available library strategy (WGS, exome sequencing, RNA-seq, etc.). <monospace>rs &lt;- dbGetQuery(sra_con, paste("SELECT library_strategy AS 'Library Strategy',",</monospace><monospace>"count( â ) AS Runs FROM âexperimentâ", "GROUP BY library_strategy order by Runs DESC",</monospace><monospace>sep = " "))</monospace><monospace>head(rs)</monospace><monospace>## Library Strategy Runs</monospace><monospace>## 1 &lt;NA&gt; 90831</monospace><monospace>## 2 WXS 42381</monospace><monospace>## 3 WGS 41033</monospace><monospace>## 4 OTHER 19021</monospace><monospace>## 5 RNA-Seq 9622</monospace><monospace>## 6 AMPLICON 9298</monospace></p>
        <p>Arbitrarily complex SQL queries can be performed with results returned as an R data.frame. Further filtering, processing, ane even visualization (plotting results) can then be performed using standard R functions.</p>
      </sec>
      <sec>
        <title>Retrieving data file information</title>
        <p>Searching SRA metadata using the SRAdb full-text-search or arbitrary SQL queries results in one or more SRA accessions. Given these accessions, the SRAdb package can determine the associated fastq files for download; in some cases, there may be dozens of fastq files for an accession. As an example, we list fastq file names including ftp addresses associated with âSRX000122â: <monospace>rs &lt;- listSRAfile("SRX000122", sra_con = sra_con, fileType = "fastq", srcType = "ftp")</monospace><monospace>nrow(rs)</monospace><monospace>## [1] 6</monospace></p>
        <p>The listSRAfile function does not check file availability, size and date of the fastq files on the server (to avoid multiple ftp roundtrips), but the function getFASTQinfo does this, which is good to know if preparing to download a large file set. <monospace>rs &lt;- getFASTQinfo(in_acc = c("SRX000122"), srcType = "ftp")</monospace></p>
        <p>The above commands get fastq file information and essential associated meta data from EBI ENA web site. The following commands will retrieve âlite.sraâ file size information from NCBI SRA ftp site: <monospace>rs &lt;- getSRAinfo(in_acc = c("SRS012041", "SRS000290"), sra_con = sra_con, sraType = "litesra")</monospace></p>
        <p>The getFASTQfile and getSRAfile functions actually download all available fastq or sra files associated with a set of SRA accessions. For example, to download all fastq files for âSRR000648â and âSRR000657â from EBI ENA site ftp site to a new folder in current directory: <monospace>getFASTQfile(in_acc = c("SRR000648", "SRR000657"), destDir = getwd(), srcType = "ftp")</monospace></p>
        <p>Currently both NCBI and EBI support the high-speed fasp protocol for downloading SRA data files and SRAdb has included the functionality for using the protocol. Advanced users are encouraged to use the fasp protocol, but it requires third-party software installation prior to use.</p>
      </sec>
    </sec>
    <sec>
      <title>Interface to IGV</title>
      <p>Once raw sequence data are processed by external programs (such as alignment algorithms) or using Bioconductor tools in R, there is often a need to visualize the results in genomic context. The IGV browser serves this purpose nicely. IGV offers an API that allows bidirectional communication between IGV and third-party software like R. The SRAdb package has R functions, summarized in Table
<xref ref-type="table" rid="T1">1</xref> that can be used to control IGV. <monospace>exampleBams = file.path(system.file ("extdata", package = "SRAdb"), dir(system.file("extdata",</monospace><monospace>package = "SRAdb"), pattern = "bam$"))</monospace><monospace>sock &lt;- IGVsocket()</monospace><monospace>IGVgenome(sock, "hg18")</monospace><monospace>IGVload(sock, exampleBams)</monospace><monospace>IGVgoto(sock, "chr1:1-1000")</monospace></p>
      <table-wrap position="float" id="T1">
        <label>Table 1</label>
        <caption>
          <p>Functions to interact with the Integrated Genome Viewer (IGV)</p>
        </caption>
        <table frame="hsides" rules="groups" border="1">
          <colgroup>
            <col align="left"/>
            <col align="center"/>
          </colgroup>
          <thead valign="top">
            <tr>
              <th align="left">
                <bold>Function</bold>
              </th>
              <th align="left">
                <bold>Description</bold>
              </th>
            </tr>
          </thead>
          <tbody valign="top">
            <tr>
              <td align="left" valign="bottom">startIGV<hr/></td>
              <td align="left" valign="bottom">Start IGV from R with different<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">Â <hr/></td>
              <td align="left" valign="bottom">amount maximum memory support<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">IGVsession<hr/></td>
              <td align="left" valign="bottom">Create an IGV session file<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">IGVgenome<hr/></td>
              <td align="left" valign="bottom">Set the IGV genome<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">IGVload<hr/></td>
              <td align="left" valign="bottom">Load data into IGV via remote port call<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">IGVclear<hr/></td>
              <td align="left" valign="bottom">Clear IGV tracks loaded<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">IGVcollapse<hr/></td>
              <td align="left" valign="bottom">Collapse tracks in the IGV<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">IGVgoto<hr/></td>
              <td align="left" valign="bottom">Go to a specified region in IGV<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">IGVsnapshot<hr/></td>
              <td align="left" valign="bottom">Make a file snapshot of the current IGV screen<hr/></td>
            </tr>
            <tr>
              <td align="left" valign="bottom">IGVsocket<hr/></td>
              <td align="left" valign="bottom">Create a Socket Connection to IGV<hr/></td>
            </tr>
            <tr>
              <td align="left">IGVsort</td>
              <td align="left">Sort an alignment track by the specified option</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>In the short IGV code example, which requires a running IGV session, the IGV genome is first set to âhg1â and example BAM files are then loaded. IGVgoto moves the browser position to chr1:1-1000. Finally, a screen shot is captured to disk for later review. Other combinations of R and IGV commands allow interactive visualization of data driven by R results.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions">
    <title>Conclusions</title>
    <p>The public SRA database is the de facto standard location for depositing public sequence data. Bioconductor and R comprise a set of tools for the comprehension of genomic data, including sequence data. Therefore, it is natural to want to be able to quickly gather sequence datasets of interest, download data, and then visualize the results of an analysis. The SRAdb package provides this functionality for the R and Bioconductor community. Furthermore, the SQLite database file can be used by any software with the ability to connect to a SQLite database making for a resource of even broader interest.</p>
  </sec>
  <sec>
    <title>Availability and requirements</title>
    <p><bold>Operating systems</bold>: Windows, Mac OS, Linux, and any other operating systems supporting R.<bold>Programming language</bold>: R<bold>License</bold>: Artistic-2.0<bold>Restrictions to use by non-academics</bold>: None<bold>Source code</bold>: The SRAdb package is available via the Bioconductor
[<xref ref-type="bibr" rid="B3">3</xref>] website at
<ext-link ext-link-type="uri" xlink:href="http://bioconductor.org">http://bioconductor.org</ext-link>. Current release version:
<ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org/packages/release/bioc/html/SRAdb.html">http://www.bioconductor.org/packages/release/bioc/html/SRAdb.html</ext-link>. The SQLite database itself is available for independent download at
<ext-link ext-link-type="uri" xlink:href="http://gbnci.abcc.ncifcrf.gov/backup/SRAmetadb.sqlite.gz">http://gbnci.abcc.ncifcrf.gov/backup/SRAmetadb.sqlite.gz</ext-link>.</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec>
    <title>Authorsâ contributions</title>
    <p>YZ and SD wrote code and documentation and drafted the manuscript. PM and RS supervised the work. All authors read and approved the final manuscript.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="S1">
      <caption>
        <title>Additional file 1</title>
        <p>SQLite column descriptions. Column descriptions from the SRAdb SQLite file can be generated with the colDescriptions function in the SRAdb package. Such a reference is quite useful when working in SQL directly.</p>
      </caption>
      <media xlink:href="1471-2105-14-19-S1.pdf" mimetype="application" mime-subtype="pdf">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="other">
        <article-title>The NCBI Sequence Read Archive</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/sra">http://www.ncbi.nlm.nih.gov/sra</ext-link>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="book">
        <collab>R Core Team</collab>
        <source>R: A Language and Environment for Statistical Computing</source>
        <year>2012</year>
        <publisher-name>R Foundation for Statistical Computing, Vienna, Austria</publisher-name>
        <comment>[
<ext-link ext-link-type="uri" xlink:href="http://www.R-project.org/">http://www.R-project.org/</ext-link>]. [ISBN 3-900051-07-0]</comment>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Gentleman</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Carey</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Bates</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Bolstad</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Dettling</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Dudoit</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Ellis</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Gautier</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Ge</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Gentry</surname>
          <given-names>J</given-names>
        </name>
        <etal/>
        <article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>
        <source>Genome Biol</source>
        <year>2004</year>
        <volume>5</volume>
        <issue>10</issue>
        <fpage>R80</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id>
        <pub-id pub-id-type="pmid">15461798</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Robinson</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>ThorvaldsdÃ³ttir</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Winckler</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Guttman</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Lander</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Getz</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Mesirov</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Integrative genomics viewer</article-title>
        <source>Nat Biotechnol</source>
        <year>2011</year>
        <volume>29</volume>
        <fpage>24</fpage>
        <lpage>26</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.1754</pub-id>
        <pub-id pub-id-type="pmid">21221095</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="other">
        <name>
          <surname>James</surname>
          <given-names>DA</given-names>
        </name>
        <name>
          <surname>Falcon</surname>
          <given-names>S</given-names>
        </name>
        <source>RSQLite: SQLite interface for R</source>
        <year>2012</year>
        <comment><ext-link ext-link-type="uri" xlink:href="http://CRAN.R-project.org/package=RSQLite">http://CRAN.R-project.org/package=RSQLite</ext-link>. [R package version 0.11.2]</comment>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
