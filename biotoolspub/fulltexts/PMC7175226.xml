<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Biomolecules</journal-id>
    <journal-id journal-id-type="iso-abbrev">Biomolecules</journal-id>
    <journal-id journal-id-type="publisher-id">biomolecules</journal-id>
    <journal-title-group>
      <journal-title>Biomolecules</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2218-273X</issn>
    <publisher>
      <publisher-name>MDPI</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7175226</article-id>
    <article-id pub-id-type="doi">10.3390/biom10030461</article-id>
    <article-id pub-id-type="publisher-id">biomolecules-10-00461</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>BioShell 3.0: Library for Processing Structural Biology Data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0003-1760-2668</contrib-id>
        <name>
          <surname>Macnar</surname>
          <given-names>Joanna M.</given-names>
        </name>
        <xref ref-type="aff" rid="af1-biomolecules-10-00461">1</xref>
        <xref ref-type="aff" rid="af2-biomolecules-10-00461">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0002-2991-3634</contrib-id>
        <name>
          <surname>Szulc</surname>
          <given-names>Natalia A.</given-names>
        </name>
        <xref ref-type="aff" rid="af1-biomolecules-10-00461">1</xref>
        <xref ref-type="aff" rid="af3-biomolecules-10-00461">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Kryś</surname>
          <given-names>Justyna D.</given-names>
        </name>
        <xref ref-type="aff" rid="af1-biomolecules-10-00461">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0003-1832-4364</contrib-id>
        <name>
          <surname>Badaczewska-Dawid</surname>
          <given-names>Aleksandra E.</given-names>
        </name>
        <xref ref-type="aff" rid="af1-biomolecules-10-00461">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="true">https://orcid.org/0000-0002-2260-2083</contrib-id>
        <name>
          <surname>Gront</surname>
          <given-names>Dominik</given-names>
        </name>
        <xref ref-type="aff" rid="af1-biomolecules-10-00461">1</xref>
        <xref rid="c1-biomolecules-10-00461" ref-type="corresp">*</xref>
      </contrib>
    </contrib-group>
    <aff id="af1-biomolecules-10-00461"><label>1</label>Faculty of Chemistry, Biological and Chemical Research Center, University of Warsaw, Pasteura 1, 02-093 Warsaw, Poland; <email>joanna.macnar@student.uw.edu.pl</email> (J.M.M.); <email>natalia.a.szulc@gmail.com</email> (N.A.S.); <email>juchxd@gmail.com</email> (J.D.K.); <email>dawid.aleksandra@gmail.com</email> (A.E.B.-D.)</aff>
    <aff id="af2-biomolecules-10-00461"><label>2</label>College of Inter-Faculty Individual Studies in Mathematics and Natural Sciences, University of Warsaw, Stefana Banacha 2C, 02-097 Warsaw, Poland</aff>
    <aff id="af3-biomolecules-10-00461"><label>3</label>Laboratory of Protein Metabolism, International Institute of Molecular and Cell Biology in Warsaw, 4 Ks. Trojdena Street, 02-109 Warsaw, Poland</aff>
    <author-notes>
      <corresp id="c1-biomolecules-10-00461"><label>*</label>Correspondence: <email>dgront@chem.uw.edu.pl</email></corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>16</day>
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <volume>10</volume>
    <issue>3</issue>
    <elocation-id>461</elocation-id>
    <history>
      <date date-type="received">
        <day>12</day>
        <month>1</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>10</day>
        <month>3</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© 2020 by the authors.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license license-type="open-access">
        <license-p>Licensee MDPI, Basel, Switzerland. This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY) license (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>).</license-p>
      </license>
    </permissions>
    <abstract>
      <p>BioShell is an open-source package for processing biological data, particularly focused on structural applications. The package provides parsers, data structures and algorithms for handling and analyzing macromolecular sequences, structures and sequence profiles. The most frequently used routines are accessible by a set of easy-to-use command line utilities for a Linux environment. The full functionality of the package assumes knowledge of C++ or Python to assemble an application using this software library. Since the last publication that announced the version 2.0, the package has been greatly expanded and rewritten in C++ standard 11 (C++11) to improve its modularity and efficiency. A new testing platform has been implemented to continuously test the correctness and integrity of the package. More than two hundred test programs have been published to provide simple examples that can be used as templates. This makes BioShell an easy to use library that greatly speeds up development of bioinformatics applications and web services without compromising computational efficiency.</p>
    </abstract>
    <kwd-group>
      <kwd>software</kwd>
      <kwd>structural bioinformatics</kwd>
      <kwd>macromolecular structure analysis</kwd>
      <kwd>python library</kwd>
    </kwd-group>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="sec1-biomolecules-10-00461">
    <title>1. Introduction</title>
    <p>Bioinformatics is a field of research inherently related to use of vast data that are produced by biomedical and biological research. The ultimate goal of bioinformatics is to create a system that can help convert a huge amount of data into knowledge. The software inadequacy is currently the major bottleneck that impedes this process. Virtually every novel methodology has been published as a stand-alone program, a web server, or an extension of an already existing package. The software inventory of the field has been extensively growing in the past few decades, but only very few packages are widely used. Numerous specialized tools have been published, as well as general utility software libraries and scripting environments [<xref rid="B1-biomolecules-10-00461" ref-type="bibr">1</xref>], most notably (in the order of the first publication): BioJava [<xref rid="B2-biomolecules-10-00461" ref-type="bibr">2</xref>,<xref rid="B3-biomolecules-10-00461" ref-type="bibr">3</xref>], Biopython [<xref rid="B4-biomolecules-10-00461" ref-type="bibr">4</xref>,<xref rid="B5-biomolecules-10-00461" ref-type="bibr">5</xref>], BioPerl [<xref rid="B6-biomolecules-10-00461" ref-type="bibr">6</xref>], BioShell [<xref rid="B7-biomolecules-10-00461" ref-type="bibr">7</xref>,<xref rid="B8-biomolecules-10-00461" ref-type="bibr">8</xref>], and BioRuby [<xref rid="B9-biomolecules-10-00461" ref-type="bibr">9</xref>].</p>
    <p>The first version of BioShell was released in 2006 as a set of command-line utilities. Later, the package was reimplemented as a library for Java programming language [<xref rid="B8-biomolecules-10-00461" ref-type="bibr">8</xref>]. Since then, the package has been extensively used by its developers in daily research tasks. The package has been also used by other research groups, primarily in tasks related to protein structure prediction and modelling. Chowdhury [<xref rid="B10-biomolecules-10-00461" ref-type="bibr">10</xref>] studied the structural ensembles of wild-type systemin plant hormone along with its 17 variants with replica-exchange molecular dynamics. BioShell was used for crmsd calculations and hierarchical clustering of hormone conformations. In two other works, Alvarez et al. explored the applicability of novel methods for protein structure prediction [<xref rid="B11-biomolecules-10-00461" ref-type="bibr">11</xref>,<xref rid="B12-biomolecules-10-00461" ref-type="bibr">12</xref>]. They implemented their methodology as BioShell scripts and concluded that “BioShell combined with the methodology presented in this paper, is crucial in order to predict protein structures while avoiding structural clashes”. In yet another work done by Abagyan [<xref rid="B13-biomolecules-10-00461" ref-type="bibr">13</xref>] group, BioShell was used to reconstruct atoms and larger parts of chemical groups missing in protein structures. In this contribution, we present the newest version, rewritten in C++11, which provides widely extended functionality. While developing BioShell, we conformed to good practices of software development, including continuous integration, unit testing, and code review. Our adherence to these practices makes BioShell suitable for inclusion in major bioinformatics pipelines, database systems, and software projects. Extensive documentation and numerous detailed examples, published on ReadTheDocs website, makes the toolkit easy to approach.</p>
  </sec>
  <sec sec-type="methods" id="sec2-biomolecules-10-00461">
    <title>2. Methods</title>
    <p>The C++11 programming language was chosen to implement the library due to the many handy features the language and its standard library provides, most notably smart pointer implementation. BioShell also relies on multithreading and regular expression support provided by the standard C++11 library. Standard containers (such as <monospace>std::vector</monospace> or <monospace>std::map</monospace>) are used where possible. The C++11 standard is by now very matured, supported by common compilers, and highly portable.</p>
    <sec id="sec2dot1-biomolecules-10-00461">
      <title>2.1. Command Line Utilities</title>
      <p>Since its first release, the BioShell suite has provided a set of command line applications for the analysis and manipulation of protein sequences and structures, such as <monospace>clust</monospace> for hierarchical clustering (previously published as HCPM—Hierarchical Clustering of Protein Models) [<xref rid="B14-biomolecules-10-00461" ref-type="bibr">14</xref>,<xref rid="B15-biomolecules-10-00461" ref-type="bibr">15</xref>] and <monospace>seqc</monospace> and <monospace>strc</monospace>, sequence and structure converters, respectively. These programs are controlled by command line options, which allow users to provide input data and specify the desired output. In the current release, the core applications are supplemented with an over a hundred small utility programs. These utilities also serve for testing purposes, as discussed below, and follow the “one task-one app” paradigm. Each of them performs a particular, very well-defined action. Altogether, the programs included in BioShell distribution were deliberately chosen to solve many daily problems, such as converting a file from one format to another or gathering statistics of structural properties measured on a set of input PDB files. A large collection of examples using these applications are provided in the BioShell cookbook, published on the ReadTheDocs website (<uri xlink:href="https://bioshell.readthedocs.io">https://bioshell.readthedocs.io</uri>). In the case of very sophisticated or more custom problems, these programs, however, may not offer a ‘from the shelf’ comprehensive solution and writing a custom program or script calling BioShell library functions may be necessary.</p>
    </sec>
    <sec id="sec2dot2-biomolecules-10-00461">
      <title>2.2. C++ Software Library</title>
      <p>BioShell source code has been divided into three top-level namespaces: <monospace>core</monospace>, <monospace>ui</monospace>, and <monospace>utils</monospace>, with the first of them being the most important for users as it provides the actual bioinformatics functionality. The submodules of core (see <xref ref-type="fig" rid="biomolecules-10-00461-f001">Figure 1</xref>) are:<list list-type="bullet"><list-item><p>algorithms—several algorithms used by BioShell such as Union Find, routines to work on trees and graphs.</p></list-item><list-item><p>alignments—classes related to storing, assessing, and computing alignments between sequences as well as protein structures.</p></list-item><list-item><p>calc—calculations on biomacromolecular structures (<monospace>core::calc::structural</monospace>), data clustering (<monospace>core::calc::clustering</monospace>) and generic numerical and statistical routines.</p></list-item><list-item><p>chemical—classes representing biochemical concepts such as atoms and amino acids</p></list-item><list-item><p>data—I/O routines core::data::io, data representation of sequences. <monospace>core::data::sequence</monospace> and structures <monospace>core::data::structural</monospace>, generic data types such as 3D vectors and specialized matrices <monospace>core::data::basic</monospace>.</p></list-item><list-item><p>protocols—classes optimised to perform specific, computationally demanding tasks such as pairwise crmsd calculations. The actual computations are performed by modules from other namespaces (primarily from <monospace>core::calc::structural</monospace>). It might be easier for a user to directly employ the latter for small-scale computations. For large scale projects, however, the protocols submodule provides mechanisms for distributing jobs between threads, filtering results and other post- and pre-processing operations.</p></list-item></list></p>
    </sec>
    <sec id="sec2dot3-biomolecules-10-00461">
      <title>2.3. Python Library</title>
      <p>This current release of BioShell package also provides bindings to the Python scripting language. We use a binder tool (<uri xlink:href="https://github.com/RosettaCommons/binder">https://github.com/RosettaCommons/binder</uri>) to automatically generate binding code. The majority of BioShell C++ classes are available as modules in Python, with a few exceptions of C++ templates. Python nested sub-modules correspond to the C++ namespaces with a pybioshell prefix, e.g., the C++ class that is responsible for loading PDB files (<monospace>core::data::io::Pdb</monospace>), is accessible from Python as <monospace>pybioshell.core.data.io.Pdb</monospace>.</p>
    </sec>
  </sec>
  <sec sec-type="results" id="sec3-biomolecules-10-00461">
    <title>3. Results</title>
    <sec id="sec3dot1-biomolecules-10-00461">
      <title>3.1. Improved Performance</title>
      <p>Substantial effort has been devoted to optimize the computational efficiency of BioShell routines. In several cases, this has an influence on the software architectural design. Here, we discuss in detail the loading of PDB files as an example. Reading and parsing biomacromolecular structures in the PDB format are fundamental tasks in structural bioinformatics. In fact, parsing these files often takes more time than subsequent calculations and may become a bottleneck when a very large number of PDB models is required for analysis.</p>
      <p>In order to store biomacromolecular data, the BioShell library implements a hierarchy of classes that is similar to what can be found in other software packages. A <monospace>Structure</monospace> object holds pointers to Chain instances, while each <monospace>Chain</monospace> aggregates Residues. Finally, each Residue is a vector of PdbAtoms. However, unlike other software packages, a Structure instance is not directly created from PDB content; instead, a PDB file reader object is responsible for loading PDB text, parsing it, and creating a Structure from a given model stored in a file. The file reader object provides flexibility that can speed up reading files. The PDB reader takes a <monospace>PdbLineFilter</monospace> object as an argument to include or exclude every text line that is loaded from a file. For simplified analysis that requires only mainchain analysis, the <monospace>core::data::io::is_ca</monospace> filter can substantially speed-up loading C<inline-formula><mml:math id="mm1"><mml:mrow><mml:mi>α</mml:mi></mml:mrow></mml:math></inline-formula>-only coordinates from an all-atom file.</p>
      <p>Another typical scenario is loading a very large PDB file that contains a large number of identical models, e.g., resulting from a molecular simulation. These models are frequently processed one-by-one; therefore, creating a Structure object for each of them is an unnecessary burden. Instead, BioShell creates only the first Structure object along with its chains, residues and atoms. Assuming that all the models are chemically identical, all the subsequent structures can be created by solely extracting Cartesian coordinates from PDB text, replacing the respective data fields in the Structure that has been already created. Consequently, all constructor calls and expensive memory allocations are done only for the first model.</p>
    </sec>
    <sec id="sec3dot2-biomolecules-10-00461">
      <title>3.2. Novel Testing Infrastructure</title>
      <p>A comprehensive test of sophisticated software is extremely important not only for scientific software. Inadequate testing was blamed for a number of widely publicized accidents [<xref rid="B16-biomolecules-10-00461" ref-type="bibr">16</xref>]. Scientific software is usually more complicated than daily life software, so a novel approach for testing a research software package such as BioShell is a critical part of its development. In the case of a C++ library, such tests are performed by small programs that execute a part of code and compare results with the reference. Although continuous software testing should be a common practice, the testing applications themselves are often hidden from an end user. This is somewhat surprising, given the fact that this code is actually the most exhaustively tested part of the entire package. Here, we propose a novel approach to bring these tests to the stage. More than a hundred test applications have been included in this release to simultaneously reach three goals: (1) to extend the set of BioShell applications, (2) to contribute to unit-testing and the integration testing facility, and (3) to provide examples for scientists who will use the BioShell library in their own applications. All the examples have been organized in three main directories: <monospace>example_data</monospace>, <monospace>cc_examples</monospace> and <monospace>py_examples</monospace> which hold example input files, example C++ applications, and example Python scripts, respectively. Examples are organized to follow C++ namespaces, e.g., tests related to <monospace>core::calc::structural</monospace>, such as the <monospace>ap_Crmsd</monospace> C++ application can be found in <monospace>cc_examples/core/calc</monospace> directory. The set of example input files has been carefully chosen to include well-studied systems important to the field. Relevant files of this set are linked to each test directory, which also contains manually curated results of that test. A list of all these tests (organized by keywords and by their functionality) as well as relevant documentation is automatically updated and hosted on ReadTheDocs website.</p>
    </sec>
    <sec id="sec3dot3-biomolecules-10-00461">
      <title>3.3. Test of Integration and Compatibility between Components</title>
      <p>The standard application development cycle uses integration tests, i.e., small programs written to test compatibility between software’s components. These tests ensure that any changes introduced do not unintentionally negatively affect other parts of the suite. While developing the BioShell package, we attempted to turn as many of these tests as possible into practically useful applications that can be instructive for end users of the package. For each application, biologically relevant input data and the expected output have been provided as part of the repository so these applications may still work as tests (see <xref ref-type="fig" rid="biomolecules-10-00461-f002">Figure 2</xref>). The name of each program of this group starts with <monospace>ap_</monospace> and is followed by the name of a tested class or module. Occasionally, a program name reflects the functionality it provides rather than the tested class. For instance, <monospace>ap_stacking_interactions</monospace> reads a PDB file and prints the relative orientation between any two aromatic rings found in amino acid side chains that are closer than a given cutoff. This small program has been devised to test the <monospace>core::data::structural::IsAromaticAA</monospace> residue filter and local reference frame calculations. In another example, the <monospace>ap_Crmsd</monospace> application that tests structural superposition can be used to easily calculate crmsd between two PDB files. The simplicity of these apps allows them to be efficiently used in research tasks, such as analysis of MD trajectories, protein structure assessment, or to derive statistical force field.</p>
    </sec>
    <sec id="sec3dot4-biomolecules-10-00461">
      <title>3.4. Unit Tests Serve as Examples for a C++ Library</title>
      <p>Unit tests are intended to test a very narrow part of a code, e.g., to invoke a single function. Therefore, in many cases, it was not possible to turn a unit test into a fully functional application. Nevertheless, these tests are also exposed for end users to exemplify the use of BioShell C++ routines; each example’s name consequently starts with <monospace>ex_</monospace>. Many programmers create their applications by copying and pasting relevant parts of examples (snippets). In BioShell, the <monospace>ex</monospace>_ tests offer a large collection of such short examples showing how to use its most important classes. The code, ready for the copy and paste approach, is regularly compiled and run by a test server, ensuring its correctness.</p>
    </sec>
    <sec id="sec3dot5-biomolecules-10-00461">
      <title>3.5. Comparison with Biopython</title>
      <p>Python bindings to the BioShell library introduced by this contribution in some applications can be used to substitute Biopython, especially where computational efficiency is required. Since the latter one is written in an interpreted language (i.e., Python), it will always be slower than a compiled program, and it is difficult to give a direct comparison between the two. Nevertheless, here we provide a few examples to give an impression of what speed up one may expect by replacing Biopython with BioShell in their projects. We choose six problems that can easily be implemented in both Biopython and PyBioShell. They cover the most common tasks in structural bioinformatics, like root mean square deviation calculation for multiple structures or writing just the C-alpha atoms from a full-atom PDB file. The role of each test script is as follows:<list list-type="bullet"><list-item><p><monospace>ca_only_multimodel</monospace>—reads multiple PDB files with a single model and writes them into one file using only the C-alpha atoms’ coordinates;</p></list-item><list-item><p><monospace>contact_map</monospace>—checks which residues are within a given distance to each other and returns a list of neighbors with the number of contacts found in a multi-model PDB file;</p></list-item><list-item><p><monospace>pdb_to_fasta</monospace>—prepares biopolymer sequences in fasta format from a PDB file;</p></list-item><list-item><p><monospace>ramachandran</monospace>—returns information about phi and psi angles and amino acid type (Glycine, Pre-Proline, Proline or General);</p></list-item><list-item><p><monospace>read_pdb</monospace>—reads a pdb file;</p></list-item><list-item><p><monospace>rmsd</monospace>—calculates root mean square deviation between C-alpha atoms of two PDB files.</p></list-item></list></p>
      <p>We repeated each test twenty times with an internal time measurement. In two cases, PyBioShell was significantly faster than Biopython (see <xref ref-type="fig" rid="biomolecules-10-00461-f003">Figure 3</xref>). The reason is the improved PDB file reading and storage mechanism implemented in BioShell 3.0.</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="sec4-biomolecules-10-00461">
    <title>4. Discussion</title>
    <p>Throughout its history, the BioShell package has been applied to numerous problems studied by several groups all over the world. In this contribution, we described the newest, greatly improved and expanded version of the software. The library extends the Python scripting language with a robust and powerful interface to investigate and manipulate protein structures, sequences and alignments. With the widespread use of Python in bioinformatics, the package will certainly find new applications, especially among users who are not programming experts. Extensive documentation, comprising a detailed description of the package, a cookbook of most popular commands, a rich library of examples, API documentation, and tutorials certainly make it easy to approach. When compared to Biopython, it offers a significant improvement in execution time. BioShell therefore can be used in high throughput computations as well as for interactive work, e.g., as a component of web servers for bioinformatics applications.</p>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgments</title>
    <p>The authors would like to thank Andrzej Kolinski, Wladek Minor, and David Cooper for extensive discussions as well as Sergey Lyskov for his help with setting up Python binding generation with binder.</p>
  </ack>
  <fn-group>
    <fn>
      <p><bold>Sample Availability:</bold> The source code is available at: <uri xlink:href="https://bitbucket.org/dgront/bioshell">https://bitbucket.org/dgront/bioshell</uri>. The website <uri xlink:href="https://bioshell.readthedocs.io">https://bioshell.readthedocs.io</uri> contains full reference documentation.</p>
    </fn>
  </fn-group>
  <notes>
    <title>Author Contributions</title>
    <p>Conceptualization, D.G.; Software, J.M.M., N.A.S., J.D.K., A.E.B.-D. and D.G.; Validation, J.M.M., N.A.S. and J.D.K.; Writing—original draft, J.M.M., N.A.S. and D.G. All authors have read and agreed to the published version of the manuscript.</p>
  </notes>
  <notes>
    <title>Funding</title>
    <p>This research was funded by the National Science Centre (Poland) Grant No. 2018/29/B/ST6/01989.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Conflicts of Interest</title>
    <p>The authors declare no conflict of interest.</p>
  </notes>
  <ref-list>
    <title>References</title>
    <ref id="B1-biomolecules-10-00461">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stajich</surname>
            <given-names>J.E.</given-names>
          </name>
          <name>
            <surname>Lapp</surname>
            <given-names>H.</given-names>
          </name>
        </person-group>
        <article-title>Open source tools and toolkits for bioinformatics: Significance, and where are we?</article-title>
        <source>Briefings Bioinform.</source>
        <year>2006</year>
        <volume>7</volume>
        <fpage>287</fpage>
        <lpage>296</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbl026</pub-id>
        <?supplied-pmid 16899494?>
        <pub-id pub-id-type="pmid">16899494</pub-id>
      </element-citation>
    </ref>
    <ref id="B2-biomolecules-10-00461">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pocock</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Down</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Hubbard</surname>
            <given-names>T.</given-names>
          </name>
        </person-group>
        <article-title>BioJava: Open source components for bioinformatics</article-title>
        <source>ACM SIGBIO Newsl.</source>
        <year>2000</year>
        <volume>20</volume>
        <fpage>10</fpage>
        <lpage>12</lpage>
        <pub-id pub-id-type="doi">10.1145/360262.360266</pub-id>
      </element-citation>
    </ref>
    <ref id="B3-biomolecules-10-00461">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Holland</surname>
            <given-names>R.C.G.</given-names>
          </name>
          <name>
            <surname>Down</surname>
            <given-names>T.A.</given-names>
          </name>
          <name>
            <surname>Pocock</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Prlić</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Huen</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>James</surname>
            <given-names>K.</given-names>
          </name>
          <name>
            <surname>Foisy</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>Dräger</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Yates</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Heuer</surname>
            <given-names>M.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>BioJava: An open-source framework for bioinformatics</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>2096</fpage>
        <lpage>2097</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btn397</pub-id>
        <?supplied-pmid 18689808?>
        <pub-id pub-id-type="pmid">18689808</pub-id>
      </element-citation>
    </ref>
    <ref id="B4-biomolecules-10-00461">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chapman</surname>
            <given-names>B.</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>Biopython: Python tools for computational biology</article-title>
        <source>SIGBIO Newsl.</source>
        <year>2000</year>
        <volume>20</volume>
        <fpage>15</fpage>
        <lpage>19</lpage>
        <pub-id pub-id-type="doi">10.1145/360262.360268</pub-id>
      </element-citation>
    </ref>
    <ref id="B5-biomolecules-10-00461">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hamelryck</surname>
            <given-names>T.</given-names>
          </name>
          <name>
            <surname>Manderick</surname>
            <given-names>B.</given-names>
          </name>
        </person-group>
        <article-title>PDB file parser and structure class implemented in Python</article-title>
        <source>Bioinformatics</source>
        <year>2003</year>
        <volume>19</volume>
        <fpage>2308</fpage>
        <lpage>2310</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg299</pub-id>
        <?supplied-pmid 14630660?>
        <pub-id pub-id-type="pmid">14630660</pub-id>
      </element-citation>
    </ref>
    <ref id="B6-biomolecules-10-00461">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stajich</surname>
            <given-names>J.E.</given-names>
          </name>
          <name>
            <surname>Block</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Boulez</surname>
            <given-names>K.</given-names>
          </name>
          <name>
            <surname>Brenner</surname>
            <given-names>S.E.</given-names>
          </name>
          <name>
            <surname>Chervitz</surname>
            <given-names>S.A.</given-names>
          </name>
          <name>
            <surname>Dagdigian</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Fuellen</surname>
            <given-names>G.</given-names>
          </name>
          <name>
            <surname>Gilbert</surname>
            <given-names>J.G.</given-names>
          </name>
          <name>
            <surname>Korf</surname>
            <given-names>I.</given-names>
          </name>
          <name>
            <surname>Lapp</surname>
            <given-names>H.</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Bioperl toolkit: Perl modules for the life sciences</article-title>
        <source>Genome Res.</source>
        <year>2002</year>
        <volume>12</volume>
        <fpage>1611</fpage>
        <lpage>1618</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.361602</pub-id>
        <pub-id pub-id-type="pmid">12368254</pub-id>
      </element-citation>
    </ref>
    <ref id="B7-biomolecules-10-00461">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gront</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Kolinski</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>BioShell—A package of tools for structural biology computations</article-title>
        <source>Bioinformatics</source>
        <year>2006</year>
        <volume>22</volume>
        <fpage>621</fpage>
        <lpage>622</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btk037</pub-id>
        <pub-id pub-id-type="pmid">16407320</pub-id>
      </element-citation>
    </ref>
    <ref id="B8-biomolecules-10-00461">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gront</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Kolinski</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>Utility library for structural bioinformatics</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>584</fpage>
        <lpage>585</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btm627</pub-id>
        <?supplied-pmid 18227118?>
        <pub-id pub-id-type="pmid">18227118</pub-id>
      </element-citation>
    </ref>
    <ref id="B9-biomolecules-10-00461">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Goto</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Prins</surname>
            <given-names>P.</given-names>
          </name>
          <name>
            <surname>Nakao</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Bonnal</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Aerts</surname>
            <given-names>J.</given-names>
          </name>
          <name>
            <surname>Katayama</surname>
            <given-names>T.</given-names>
          </name>
        </person-group>
        <article-title>BioRuby: Bioinformatics software for the Ruby programming language</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>2617</fpage>
        <lpage>2619</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq475</pub-id>
        <?supplied-pmid 20739307?>
        <pub-id pub-id-type="pmid">20739307</pub-id>
      </element-citation>
    </ref>
    <ref id="B10-biomolecules-10-00461">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chowdhury</surname>
            <given-names>S.D.</given-names>
          </name>
          <name>
            <surname>Sarkar</surname>
            <given-names>A.K.</given-names>
          </name>
          <name>
            <surname>Lahiri</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>Effect of Inactivating Mutations on Peptide Conformational Ensembles: The Plant Polypeptide Hormone Systemin</article-title>
        <source>J. Chem. Inf. Model.</source>
        <year>2016</year>
        <volume>56</volume>
        <fpage>1267</fpage>
        <lpage>1281</lpage>
        <pub-id pub-id-type="doi">10.1021/acs.jcim.5b00666</pub-id>
        <?supplied-pmid 27341535?>
        <pub-id pub-id-type="pmid">27341535</pub-id>
      </element-citation>
    </ref>
    <ref id="B11-biomolecules-10-00461">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Álvarez</surname>
            <given-names>Ó.</given-names>
          </name>
          <name>
            <surname>Fernández-Martínez</surname>
            <given-names>J.L.</given-names>
          </name>
          <name>
            <surname>Fernández-Brillet</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Cernea</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Fernández-Muñiz</surname>
            <given-names>Z.</given-names>
          </name>
          <name>
            <surname>Kloczkowski</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>Principal component analysis in protein tertiary structure prediction</article-title>
        <source>J. Bioinf. Comput. Biol.</source>
        <year>2018</year>
        <volume>16</volume>
        <fpage>1850005</fpage>
        <pub-id pub-id-type="doi">10.1142/S0219720018500051</pub-id>
        <?supplied-pmid 29566640?>
        <pub-id pub-id-type="pmid">29566640</pub-id>
      </element-citation>
    </ref>
    <ref id="B12-biomolecules-10-00461">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Álvarez</surname>
            <given-names>Ó.</given-names>
          </name>
          <name>
            <surname>Fernández-Martínez</surname>
            <given-names>J.L.</given-names>
          </name>
          <name>
            <surname>Corbeanu</surname>
            <given-names>A.C.</given-names>
          </name>
          <name>
            <surname>Fernández-Muñiz</surname>
            <given-names>Z.</given-names>
          </name>
          <name>
            <surname>Kloczkowski</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>Predicting protein tertiary structure and its uncertainty analysis via particle swarm sampling</article-title>
        <source>J. Mol. Model.</source>
        <year>2019</year>
        <volume>25</volume>
        <fpage>79</fpage>
        <pub-id pub-id-type="doi">10.1007/s00894-019-3956-0</pub-id>
        <?supplied-pmid 30810816?>
        <pub-id pub-id-type="pmid">30810816</pub-id>
      </element-citation>
    </ref>
    <ref id="B13-biomolecules-10-00461">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Geidl</surname>
            <given-names>S.</given-names>
          </name>
          <name>
            <surname>SvobodováVařeková</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Bendová</surname>
            <given-names>V.</given-names>
          </name>
          <name>
            <surname>Petrusek</surname>
            <given-names>L.</given-names>
          </name>
          <name>
            <surname>Ionescu</surname>
            <given-names>C.M.</given-names>
          </name>
          <name>
            <surname>Jurka</surname>
            <given-names>Z.</given-names>
          </name>
          <name>
            <surname>Abagyan</surname>
            <given-names>R.</given-names>
          </name>
          <name>
            <surname>Koča</surname>
            <given-names>J.</given-names>
          </name>
        </person-group>
        <article-title>How does the methodology of 3D structure preparation influence the quality of pKa prediction?</article-title>
        <source>J. Chem. Inf. Model.</source>
        <year>2015</year>
        <volume>55</volume>
        <fpage>1088</fpage>
        <lpage>1097</lpage>
        <pub-id pub-id-type="doi">10.1021/ci500758w</pub-id>
        <?supplied-pmid 26010215?>
        <pub-id pub-id-type="pmid">26010215</pub-id>
      </element-citation>
    </ref>
    <ref id="B14-biomolecules-10-00461">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gront</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Hansmann</surname>
            <given-names>U.H.E.H.</given-names>
          </name>
          <name>
            <surname>Kolinski</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>Exploring protein energy landscapes with hierarchical clustering</article-title>
        <source>Int. J. Quantum Chem.</source>
        <year>2005</year>
        <volume>105</volume>
        <fpage>826</fpage>
        <lpage>830</lpage>
        <pub-id pub-id-type="doi">10.1002/qua.20741</pub-id>
        <?supplied-pmid 16479277?>
        <pub-id pub-id-type="pmid">16479277</pub-id>
      </element-citation>
    </ref>
    <ref id="B15-biomolecules-10-00461">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gront</surname>
            <given-names>D.</given-names>
          </name>
          <name>
            <surname>Kolinski</surname>
            <given-names>A.</given-names>
          </name>
        </person-group>
        <article-title>HCPM—Program for hierarchical clustering of protein models</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <fpage>3179</fpage>
        <lpage>3180</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bti450</pub-id>
        <?supplied-pmid 15840705?>
        <pub-id pub-id-type="pmid">15840705</pub-id>
      </element-citation>
    </ref>
    <ref id="B16-biomolecules-10-00461">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Torres</surname>
            <given-names>E.</given-names>
          </name>
        </person-group>
        <article-title>Inadequate Software Testing Can Be Disastrous [Essay]</article-title>
        <source>IEEE Potentials</source>
        <year>2018</year>
        <volume>37</volume>
        <fpage>9</fpage>
        <lpage>47</lpage>
        <pub-id pub-id-type="doi">10.1109/MPOT.2015.2404341</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
<floats-group>
  <fig id="biomolecules-10-00461-f001" orientation="portrait" position="float">
    <label>Figure 1</label>
    <caption>
      <p>Organization of BioShell source tree—core namespaces.</p>
    </caption>
    <graphic xlink:href="biomolecules-10-00461-g001"/>
  </fig>
  <fig id="biomolecules-10-00461-f002" orientation="portrait" position="float">
    <label>Figure 2</label>
    <caption>
      <p>Organisation of BioShell examples.</p>
    </caption>
    <graphic xlink:href="biomolecules-10-00461-g002"/>
  </fig>
  <fig id="biomolecules-10-00461-f003" orientation="portrait" position="float">
    <label>Figure 3</label>
    <caption>
      <p>Results of PyBioShell and Biopython comparison.</p>
    </caption>
    <graphic xlink:href="biomolecules-10-00461-g003"/>
  </fig>
</floats-group>
