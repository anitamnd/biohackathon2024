<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-id journal-id-type="hwp">bioinfo</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2872006</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btq164</article-id>
    <article-id pub-id-type="publisher-id">btq164</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group>
          <subject>Genome Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>The Genomedata format for storing large-scale functional genomics data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Hoffman</surname>
          <given-names>Michael M.</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Buske</surname>
          <given-names>Orion J.</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Noble</surname>
          <given-names>William Stafford</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
        <xref ref-type="corresp" rid="COR1">*</xref>
      </contrib>
    </contrib-group>
    <aff id="AFF1"><sup>1</sup> Department of Genome Sciences, University of Washington, PO Box 355065, Seattle, WA 98195-5065 and <sup>2</sup> Department of Computer Science and Engineering, University of Washington, PO Box 352350, Seattle, WA 98195-2350, USA</aff>
    <author-notes>
      <corresp id="COR1">* To whom correspondence should be addressed.</corresp>
      <fn>
        <p>Associate Editor: John Quackenbush</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>1</day>
      <month>6</month>
      <year>2010</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>29</day>
      <month>4</month>
      <year>2010</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>29</day>
      <month>4</month>
      <year>2010</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the
							<pub-date pub-type="epub"/>. -->
    <volume>26</volume>
    <issue>11</issue>
    <fpage>1458</fpage>
    <lpage>1459</lpage>
    <history>
      <date date-type="received">
        <day>17</day>
        <month>12</month>
        <year>2009</year>
      </date>
      <date date-type="rev-recd">
        <day>25</day>
        <month>3</month>
        <year>2010</year>
      </date>
      <date date-type="accepted">
        <day>9</day>
        <month>4</month>
        <year>2010</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author 2010. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2010</copyright-year>
      <license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by-nc/2.0/uk/">
        <license-p><!--CREATIVE COMMONS-->This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/2.5">http://creativecommons.org/licenses/by-nc/2.5</ext-link>), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <abstract>
      <p><bold>Summary:</bold> We present a format for efficient storage of multiple tracks of numeric data anchored to a genome. The format allows fast random access to hundreds of gigabytes of data, while retaining a small disk space footprint. We have also developed utilities to load data into this format. We show that retrieving data from this format is more than 2900 times faster than a naive approach using wiggle files.</p>
      <p><bold>Availability and Implementation:</bold> Reference implementation in Python and C components available at <ext-link ext-link-type="uri" xlink:href="http://noble.gs.washington.edu/proj/genomedata/">http://noble.gs.washington.edu/proj/genomedata/</ext-link> under the GNU General Public License.</p>
      <p>
        <bold>Contact:</bold>
        <email>william-noble@uw.edu</email>
      </p>
    </abstract>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="SEC1">
    <title>1 INTRODUCTION</title>
    <p>The advent of functional genomics assays based on next-generation sequencing (Brunner <italic>et al.</italic>, <xref ref-type="bibr" rid="B1">2009</xref>; Hesselberth <italic>et al.</italic>, <xref ref-type="bibr" rid="B2">2009</xref>; Park, <xref ref-type="bibr" rid="B5">2009</xref>; Wold and Myers, <xref ref-type="bibr" rid="B7">2008</xref>) finally allows the high-throughput acquisition of data at 1-bp resolution across entire genomes. Processing this information, however, provides a challenge for several orders of magnitude beyond that of previous genomic analyses and demands new techniques for efficient operation. We introduce the Genomedata format for genome-scale numerical data, which uses an HDF5 (Hierarchical Data Format; <ext-link ext-link-type="uri" xlink:href="http://hdfgroup.org/HDF5/">http://hdfgroup.org/HDF5/</ext-link>) container for efficient, random access to huge genomic datasets. We also provide a Python interface to this format.</p>
    <p>Traditional data interchange formats such as the wiggle (<ext-link ext-link-type="uri" xlink:href="http://genome.ucsc.edu/goldenPath/help/wiggle.html">http://genome.ucsc.edu/goldenPath/help/wiggle.html</ext-link>) and bedGraph (<ext-link ext-link-type="uri" xlink:href="http://genome.ucsc.edu/goldenPath/help/bedgraph.html">http://genome.ucsc.edu/goldenPath/help/bedgraph.html</ext-link>) formats provide excellent means of disseminating genome-wide datasets but suffer from several disadvantages in the repeated processing of this data. Storing numerical data as ASCII text is inefficient and impedes random access to the data. This problem becomes even more apparent when processing the data in scripting languages such as Python and R, which provide high-performance methods for bulk numerical operations on arrays, but no method for reading in data in interchange formats quickly. It is also necessary to validate this data before use, checking that there is exactly one data point per position and that data are not defined outside the boundaries of the underlying sequence. Genomedata provides an intermediate format and off-loads the frustrations of parsing and validating the data from an analysis programmer. It provides the conveniences of an application programming interface for reading a binary file format, akin to the programmatic access to sequence and alignment data provided by BAM (Li <italic>et al.</italic>, <xref ref-type="bibr" rid="B3">2009</xref>) and BioHDF (Mason <italic>et al.</italic>, <xref ref-type="bibr" rid="B4">2010</xref>), while being suited for dense numeric data such as bigWig (Rhead <italic>et al.</italic>, <xref ref-type="bibr" rid="B6">2010</xref>).</p>
    <p>In many workflows, Genomedata allows the user to parse, validate and convert the data into a binary format once, eliminating the computational expense of doing this repeatedly. The data are stored as 32-bit IEEE floating point numbers to allow minimal processing when loading into memory. Not a number entries are used where data are missing or unassigned. HDF5 transparently breaks the data into chunks aligned with data columns, so that it minimizes work during loading. Genomedata compresses these chunks when stored on disk to save space, especially when values are repeated within a column, but in a way that still facilitates efficient random access. We also store some metadata in the archive such that simple summary statistics may be accessed quickly.</p>
    <p>To ease the memory requirements of subsequent analysis, Genomedata may optionally break chromosomes into ‘supercontigs,’ which avoid the allocation of empty space in the observation matrix at large assembly gaps (by default, &gt;100 000 bp). This is not necessary for efficient performance on disk, but it is convenient for programmers who wish to process the whole genome.</p>
    <p>The reference implementation includes several programs for loading data. The software requires Python 2.5.1, HDF5 1.8 and PyTables 2.1.</p>
  </sec>
  <sec id="SEC2">
    <title>2 USING GENOMEDATA</title>
    <p>Genomedata supplies command-line utilities that make it easy to create archives and load data. The <monospace>genomedata-load</monospace> command loads the genome sequence and a number of tracks in wiggle, BED or bedGraph formats, and stores metadata that allow one to rapidly calculate summary statistics such as minimum, maximum, mean or SD. The package also contains utilities to complete only parts of the loading process so that one may load tracks for different chromosomes in parallel.</p>
    <p>It is easy to access data in a Genomedata archive using the supplied Python interface. A programmer may retrieve a matrix of data by specifying individual coordinate ranges to the Genomedata interface. Alternatively, one can iterate through the entire dataset chromosome by chromosome. Programmers can accomplish tasks such as reporting the average data value in a number of tracks for specified genomic regions easily, allowing a greater focus on more interesting areas of analysis.</p>
  </sec>
  <sec id="SEC3">
    <title>3 PERFORMANCE</title>
    <p>Genomedata can quickly load large amounts of data. We measured the time to load a Genomedata archive with the complete human genome sequence (build NCBI36) and from one to 11 ChIP-seq data tracks on a 2.33-GHz Intel Xeon E5345 processor, and performed a linear regression on the timing results with the statistical computing environment R. This yielded a model with the coefficient of determination <italic>R</italic><sup>2</sup> = 0.98, where loading the sequence and other constant overhead took 5.0 ± 2.5 × 10<sup>3</sup> s, and each track took an additional 7.5 ± 0.4 × 10<sup>3</sup> s.</p>
    <p>One may retrieve functional genomics data from Genomedata archives much more quickly than the text-based formats commonly used for this data. We measured the time to retrieve data from a whole-genome 1-bp-resolution DNase-seq data track at each of a randomly generated list of genomic positions using a method that accessed the original gzip-compressed wiggle file and two different methods that access a Genomedata archive loaded from that file (<xref ref-type="fig" rid="F1">Fig. 1</xref>). The offline (sequential access) wiggle algorithm first sorts the list and then iterates through the original wiggle files until it finds the specified positions. The offline Genomedata algorithm works in a similar way, but iterates through a Genomedata archive instead. The online (random access) Genomedata algorithm retrieves the data at each position in the random order specified by the list. We repeated this process with nine different list sizes to examine the dependence of retrieval time on the number of positions.
<fig id="F1" position="float"><label>Fig. 1.</label><caption><p>Scatter plot of the time to retrieve data from a list of random genomic positions against the number of positions for different algorithms. Each point represents the average run time of the last three of four sequential trials (to eliminate caching effects) with a specific algorithm and a particular list of random positions. We used three different random lists of nine different sizes on three different algorithms, resulting in 81 plotted data points. The wiggle (circles) and offline Genomedata (crosses) algorithms ran in approximately constant time for greater than 100 positions, averaging 140 000 s (39 h) and 48 s, respectively. The online Genomedata algorithm (triangles) ran in approximately linear time for greater than 1000 random positions, averaging 1.7 ms per random access.</p></caption><graphic xlink:href="btq164f1"/></fig></p>
    <p>Because the offline algorithms read data sequentially rather than randomly, their run times are mostly independent of the number of genomic positions. After creation of the Genomedata archive, the offline Genomedata algorithm ran 2900 times faster than the comparable offline wiggle approach, suggesting a considerable advantage for the use of Genomedata when repeatedly accessing a dataset. Even when including the one-time cost of creating the archive (4 h), the Genomedata approach still ran 10 times faster, because we wrote the Genomedata track loader in C. The advantage for an online Genomedata approach is even greater when retrieving fewer than ∼10 000 positions at once. Genomedata is especially suited for whole-genome, dense datasets, so it has less of a comparative advantage in cases of sparse datasets with data at only a limited number of genomic positions. Genomedata should still perform as well, however, in an absolute sense.</p>
    <p>Not only does using Genomedata improve performance, but it also makes programming against this type of data easier, resulting in less boilerplate code for data retrieval. According to SLOCCount (<ext-link ext-link-type="uri" xlink:href="http://www.dwheeler.com/sloccount/">http://www.dwheeler.com/sloccount/</ext-link>), which counts the physical source lines of code in a program, it took 70 source lines of code to implement the wiggle method, while only 44 (37% fewer) to implement the offline Genomedata method and 16 (77% fewer) to implement the online Genomedata method.</p>
    <p><italic>Funding</italic>: <funding-source>National Institutes of Health</funding-source> (<award-id>HG004695</award-id>).</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
</body>
<back>
  <ref-list>
    <title>REFERENCES</title>
    <ref id="B1">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Brunner</surname>
            <given-names>AL</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Distinct DNA methylation patterns characterize differentiated human embryonic stem cells and developing human fetal liver</article-title>
        <source>Genome Res.</source>
        <year>2009</year>
        <volume>19</volume>
        <fpage>1044</fpage>
        <lpage>1056</lpage>
        <pub-id pub-id-type="pmid">19273619</pub-id>
      </element-citation>
    </ref>
    <ref id="B2">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hesselberth</surname>
            <given-names>JR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Global mapping of protein-DNA interactions <italic>in vivo</italic> by digital genomic footprinting</article-title>
        <source>Nat. Methods</source>
        <year>2009</year>
        <volume>6</volume>
        <fpage>283</fpage>
        <lpage>289</lpage>
        <pub-id pub-id-type="pmid">19305407</pub-id>
      </element-citation>
    </ref>
    <ref id="B3">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The sequence alignment/map format and SAMtools</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>2078</fpage>
        <lpage>2079</lpage>
        <pub-id pub-id-type="pmid">19505943</pub-id>
      </element-citation>
    </ref>
    <ref id="B4">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Mason</surname>
            <given-names>CE</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Standardizing the Next Generation of Bioinformatics Software Development With BioHDF (HDF5)</article-title>
        <source>Advances in Computational Biology.</source>
        <year>2010</year>
        <publisher-name>Springer, in press</publisher-name>
      </element-citation>
    </ref>
    <ref id="B5">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Park</surname>
            <given-names>PJ</given-names>
          </name>
        </person-group>
        <article-title>ChIP-seq: advantages and challenges of a maturing technology</article-title>
        <source>Nat. Rev. Genet.</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>669</fpage>
        <lpage>680</lpage>
        <pub-id pub-id-type="pmid">19736561</pub-id>
      </element-citation>
    </ref>
    <ref id="B6">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rhead</surname>
            <given-names>B</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The UCSC Genome Browser database: update 2010</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2010</year>
        <volume>38</volume>
        <fpage>D613</fpage>
        <lpage>D619</lpage>
        <pub-id pub-id-type="pmid">19906737</pub-id>
      </element-citation>
    </ref>
    <ref id="B7">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wold</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>RM</given-names>
          </name>
        </person-group>
        <article-title>Sequence census methods for functional genomics</article-title>
        <source>Nat. Methods</source>
        <year>2008</year>
        <volume>5</volume>
        <fpage>19</fpage>
        <lpage>21</lpage>
        <pub-id pub-id-type="pmid">18165803</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
