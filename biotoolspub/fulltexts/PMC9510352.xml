<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Archiving and Interchange DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName archivearticle.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName nlm2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Front Artif Intell</journal-id>
    <journal-id journal-id-type="iso-abbrev">Front Artif Intell</journal-id>
    <journal-id journal-id-type="publisher-id">Front. Artif. Intell.</journal-id>
    <journal-title-group>
      <journal-title>Frontiers in Artificial Intelligence</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2624-8212</issn>
    <publisher>
      <publisher-name>Frontiers Media S.A.</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9510352</article-id>
    <article-id pub-id-type="doi">10.3389/frai.2022.991733</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Artificial Intelligence</subject>
        <subj-group>
          <subject>Methods</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SNPAAMapper-Python: A highly efficient genome-wide SNP variant analysis pipeline for Next-Generation Sequencing data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Li</surname>
          <given-names>Chang</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">
          <sup>1</sup>
        </xref>
        <xref rid="fn002" ref-type="author-notes">
          <sup>†</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ma</surname>
          <given-names>Kevin</given-names>
        </name>
        <xref rid="aff2" ref-type="aff">
          <sup>2</sup>
        </xref>
        <xref rid="fn002" ref-type="author-notes">
          <sup>†</sup>
        </xref>
        <uri xlink:href="http://loop.frontiersin.org/people/1962637/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Xu</surname>
          <given-names>Nicole</given-names>
        </name>
        <xref rid="aff3" ref-type="aff">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Fu</surname>
          <given-names>Chenjian</given-names>
        </name>
        <xref rid="aff4" ref-type="aff">
          <sup>4</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>He</surname>
          <given-names>Andrew</given-names>
        </name>
        <xref rid="aff5" ref-type="aff">
          <sup>5</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Liu</surname>
          <given-names>Xiaoming</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">
          <sup>1</sup>
        </xref>
        <xref rid="c001" ref-type="corresp">
          <sup>*</sup>
        </xref>
        <xref rid="fn003" ref-type="author-notes">
          <sup>‡</sup>
        </xref>
        <uri xlink:href="http://loop.frontiersin.org/people/1235809/overview"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Bai</surname>
          <given-names>Yongsheng</given-names>
        </name>
        <xref rid="aff6" ref-type="aff">
          <sup>6</sup>
        </xref>
        <xref rid="aff7" ref-type="aff">
          <sup>7</sup>
        </xref>
        <xref rid="c002" ref-type="corresp">
          <sup>*</sup>
        </xref>
        <xref rid="fn003" ref-type="author-notes">
          <sup>‡</sup>
        </xref>
        <uri xlink:href="http://loop.frontiersin.org/people/1524127/overview"/>
      </contrib>
    </contrib-group>
    <aff id="aff1"><sup>1</sup><institution>USF Genomics and College of Public Health, University of South Florida</institution>, <addr-line>Tampa, FL</addr-line>, <country>United States</country></aff>
    <aff id="aff2"><sup>2</sup><institution>Canyon Crest Academy</institution>, <addr-line>San Diego, CA</addr-line>, <country>United States</country></aff>
    <aff id="aff3"><sup>3</sup><institution>Obra D. Tompkins High School</institution>, <addr-line>Katy, TX</addr-line>, <country>United States</country></aff>
    <aff id="aff4"><sup>4</sup><institution>College of Arts and Sciences, Kent State University</institution>, <addr-line>Kent, OH</addr-line>, <country>United States</country></aff>
    <aff id="aff5"><sup>5</sup><institution>Pittsford Mendon High School</institution>, <addr-line>Pittsford, NY</addr-line>, <country>United States</country></aff>
    <aff id="aff6"><sup>6</sup><institution>Next-Gen Intelligent Science Training</institution>, <addr-line>Ann Arbor, MI</addr-line>, <country>United States</country></aff>
    <aff id="aff7"><sup>7</sup><institution>Department of Biology Eastern Michigan University</institution>, <addr-line>Ypsilanti, MI</addr-line>, <country>United States</country></aff>
    <author-notes>
      <fn fn-type="edited-by">
        <p>Edited by: Zhaohui Steve Qin, Emory University, United States</p>
      </fn>
      <fn fn-type="edited-by">
        <p>Reviewed by: Yanting Huang, Emory University, United States; Yanqing Zhang, Georgia State University, United States</p>
      </fn>
      <corresp id="c001">*Correspondence: Xiaoming Liu <email>xiaomingliu@usf.edu</email></corresp>
      <corresp id="c002">Yongsheng Bai <email>bioinformaticsresearchtomorrow@gmail.com</email></corresp>
      <fn fn-type="other" id="fn001">
        <p>This article was submitted to Medicine and Public Health, a section of the journal Frontiers in Artificial Intelligence</p>
      </fn>
      <fn fn-type="equal" id="fn002">
        <p>†These authors have contributed equally to this work and share first authorship</p>
      </fn>
      <fn fn-type="equal" id="fn003">
        <p>‡These authors have contributed equally to this work and share senior authorship</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>12</day>
      <month>9</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <volume>5</volume>
    <elocation-id>991733</elocation-id>
    <history>
      <date date-type="received">
        <day>11</day>
        <month>7</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>17</day>
        <month>8</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2022 Li, Ma, Xu, Fu, He, Liu and Bai.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <copyright-holder>Li, Ma, Xu, Fu, He, Liu and Bai</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License (CC BY). The use, distribution or reproduction in other forums is permitted, provided the original author(s) and the copyright owner(s) are credited and that the original publication in this journal is cited, in accordance with accepted academic practice. No use, distribution or reproduction is permitted which does not comply with these terms.</license-p>
      </license>
    </permissions>
    <abstract>
      <p>Currently, there are many publicly available Next Generation Sequencing tools developed for variant annotation and classification. However, as modern sequencing technology produces more and more sequencing data, a more efficient analysis program is desired, especially for variant analysis. In this study, we updated SNPAAMapper, a variant annotation pipeline by converting perl codes to python for generating annotation output with an improved computational efficiency and updated information for broader applicability. The new pipeline written in Python can classify variants by region (Coding Sequence, Untranslated Regions, upstream, downstream, intron), predict amino acid change type (missense, nonsense, etc.), and prioritize mutation effects (e.g., synonymous &gt; non-synonymous) while being faster and more efficient. Our new pipeline works in five steps. First, exon annotation files are generated. Next, the exon annotation files are processed, and gene mapping and feature information files are produced. Afterward, the python scrips classify the variants based on genomic regions and predict the amino acid change category. Lastly, another python script prioritizes and ranks the mutation effects of variants to output the result file. The Python version of SNPAAMapper accomplished the overall speed by running most annotation steps in a substantially shorter time. The Python script can classify variants by region in 53 s compared to 166 s for the Perl script in a test sample run on a Latitude 7480 Desktop computer with 8GB RAM and an Intel Core i5-6300 CPU @ 2.4Ghz. Steps of predicting amino acid change type and prioritizing mutation effects of variants were executed within 1 s for both pipelines. SNPAAMapper-Python was developed and tested on the ClinVar database, a NCBI database of information on genomic variation and its relationship to human health. We believe our developed Python version of SNPAAMapper variant annotation pipeline will benefit the community by elucidating the variant consequence and speed up the discovery of causative genetic variants through whole genome/exome sequencing. Source codes, test data files, instructions, and further explanations are available on the web at <ext-link xlink:href="https://github.com/BaiLab/SNPAAMapper-Python" ext-link-type="uri">https://github.com/BaiLab/SNPAAMapper-Python</ext-link>.</p>
    </abstract>
    <kwd-group>
      <kwd>Next-Generation Sequencing</kwd>
      <kwd>SNP</kwd>
      <kwd>python</kwd>
      <kwd>mutation</kwd>
      <kwd>variant annotation</kwd>
      <kwd>pipeline</kwd>
    </kwd-group>
    <counts>
      <fig-count count="5"/>
      <table-count count="1"/>
      <equation-count count="0"/>
      <ref-count count="6"/>
      <page-count count="07"/>
      <word-count count="3678"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="s1">
    <title>Introduction</title>
    <p>Next-Generation Sequencing is a technique to rapidly sequence a genome and was developed because of the Human Genome Project, which successfully sequenced a human genome over a period of 23 years (<ext-link xlink:href="http://www.genome.gov/human" ext-link-type="uri">www.genome.gov/human-genome-project</ext-link>) and cost around $2.7 billion in 1991 Fiscal Year Dollars, equivalent to $5.6 Billion 2022 Fiscal Year Dollars. Today, a human genome can be accurately sequenced for as low as $600 (Preston et al., <xref rid="B6" ref-type="bibr">2022</xref>). In 2013, sequencing a whole human genome took between 1 and 2 days (Lewis, <xref rid="B4" ref-type="bibr">2013</xref>).</p>
    <p>With the decreasing cost and increasing availability of the Next-Generation-Sequencing technique (Barba et al., <xref rid="B2" ref-type="bibr">2014</xref>), our ability to discover variants in the human genome has been revolutionized. More variants have been reported and discovered. Our ability to interpret or annotate these variants becomes a major gap in effectively using genomics data in understanding diseases. To address this issue, multiple variant annotation tools that locate and assign information about variants have been developed.</p>
    <p>One such tool is SNPAAMapper, a variant analysis tool developed in 2013 in the Perl coding language. SNPAAMapper contains two general algorithms: one that generates annotation tables with coding and other information annotated for each exon, and one that reads the generated annotation tables and assigns identified variants to the genomic loci and classifies them by region (Bai and Cavalcoli, <xref rid="B1" ref-type="bibr">2013</xref>).</p>
    <p>The original SNPAAMapper used the Perl coding language to make alignment of input DNA sequences, which may have sub-optimal performance. This inefficiency and inability to handle big data in a timely manner placed a hurdle in its wide applications. In this study, we chose to update and modify SNPAAMapper to substantially increase the speed of the program to fulfill the current need of the genomics field. Additionally, we presented an improved output to facilitate downstream data processing and analysis.</p>
  </sec>
  <sec sec-type="methods" id="s2">
    <title>Methods</title>
    <sec>
      <title>Input data acquisition</title>
      <p>The reference genomes used in the paper were sourced from the UCSC genome browser (<ext-link xlink:href="https://genome.ucsc.edu/" ext-link-type="uri">https://genome.ucsc.edu/</ext-link>). The UCSC Genome Browser is a web-based tool that allows researchers to example all 23 chromosomes of the human genome all the way down to an individual nucleotide. It also contains data on the genomes of more than a 100 other organisms. The genome browser was created and maintained by Jim Kent and David Haussler at UCSC in 2000 as a resource for the distribution of results from the Human Genome Project. It was funded by the Howard Hughes Medical Institute and the National Human Genome Research Institute (NHGRI) (<ext-link xlink:href="https://genome.ucsc.edu/goldenPath/history.html" ext-link-type="uri">https://genome.ucsc.edu/goldenPath/history.html</ext-link>).</p>
      <p>When testing our tool, we used both a small test dataset (number of variants = 80) and data file from the ClinVar database (<ext-link xlink:href="https://www.ncbi.nlm.nih.gov/clinvar/" ext-link-type="uri">https://www.ncbi.nlm.nih.gov/clinvar/</ext-link>) (number of variants = 1,440,883), a publicly accessible archive of reports of relationships between human variations and phenotypes. ClinVar is crowdsourced and relies on the submission of reports by researchers and clinical labs. The default format for ClinVar database is VCF and the database file was downloaded in assembly GRCh37/hg19 for the human reference genome on May 28, 2022. VCF is the default format for ClinVar to store and report variants, including point mutations and short insertions/deletions. In the “INFO” columns, some related annotation information was also provided by ClinVar, such as the associated clinical significance, associated diseases, gene annotation etc.</p>
    </sec>
    <sec>
      <title>Algorithm description</title>
      <p>The pseudocodes for SNPAAMapper-Python algorithms are described in Algorithm 1 (see <xref rid="SM1" ref-type="supplementary-material">Supplementary materials</xref>). There are two modules of the algorithm: (1) Preprocess the gene structure to build annotation for each exon; (2) Map identified variants onto the genomic location and report the hit class. In the Python version of SNPAAMapper, the second script for processing exon annotation files and generating feature start and gene mapping files performs extremely better than the one in the original Perl version. The screenshot for SNPAAMapper on the GitHub site is shown in <xref rid="F1" ref-type="fig">Figure 1</xref>.</p>
      <fig position="float" id="F1">
        <label>Figure 1</label>
        <caption>
          <p>Screenshot of the GitHub website of SNPAAMapper-Python.</p>
        </caption>
        <graphic xlink:href="frai-05-991733-g0001" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>Usage</title>
      <p>As the input, a VCF file is required for annotation. There are two methods to use the program, an end-to-end option and a step-by-step option. For the end-to-end option, users can use the <italic>config.txt</italic> file to configure the running parameters and define input files. The running parameters are “vcfFile = clinvar_20220528.vcf, intronBoundary = 6, geneAnnotation = ChrAll_knownGene.txt, conversionFile = kgXref.txt, sequenceFile = hg19_CDSIntronWithSign.txt.out.” Then users can use command.<italic>/run_SNPAAMapper-Python.sh config.txt</italic> to generate the final output by running through each step automatically. This option is recommended for all users by default. For the step-by-step option, the users will have to run through the Python scripts step-by-step in the following orders: (1) Generate exon annotation file; (2) Process exon annotation files and generate feature start and gene mapping files (<italic>Algorithm_preprocessing_exon_annotation_RR.py</italic>); (3) Classify variants by regions (CDS, Upstream, Downstream Intron, UTRs...) (<italic>Algorithm_mapping_variants_reporting_class_intronLocation_updown.py</italic>); 4() Predict amino acid change type (<italic>Algorithm_predicting_full_AA_change_samtools_updown.py</italic>); (5) Prioritize mutation effects (<italic>Algorithm_prioritizing_mutation_headerTop_updown.py</italic>). This option is recommended for more advanced users and for users who are only interested in the intermediate outputs. The final output will be an annotated variant file, with each row representing a unique input variant and each column representing one piece of annotated information.</p>
    </sec>
  </sec>
  <sec sec-type="results" id="s3">
    <title>Results</title>
    <sec>
      <title>Annotated file</title>
      <p>For each variant in the input VCF file called by SAMTools (Li et al., <xref rid="B5" ref-type="bibr">2009</xref>), there is a corresponding row in the output annotated file. The final output will be an annotated variant file, with each row representing a unique input variant and each column representing one piece of annotated information. Specifically, there 21 columns with unique annotation information. For VCF files containing individual genotype data, the first column specifies the sample ID. The other 20 columns are as follows: “Chromosome,” “Variant Position,” “Gene Symbol,” “UCSC ID,” “Strand,” “AA Position of Mutation (for CDSHIT),” “Variant Type,” “Amino Acid Ref (Codon) -&gt; AA SNP (Codon),” “Variant Class,” “Ref AA chain,” “Alt AA chain,” “Hit Type,” “Known dbSNP,” “Ref nt,” “Alt nt,” “Quality,” “Depth,” “Allele Freq,” “Read Categories,” and “Info.” A table with column descriptions for the first 15 columns of the VCF output file can be found in <xref rid="SM1" ref-type="supplementary-material">Supplementary Table 1</xref>. The remaining five columns are variant calling information extracted from the VCF output file.</p>
    </sec>
    <sec>
      <title>ClinVar database</title>
      <p>ClinVar is a widely used database that links variants to their functional importance (pathogenicity) (Landrum et al., <xref rid="B3" ref-type="bibr">2015</xref>). ClinVar provides a full download of their database in VCF format. Aside from potential phenotype/clinical association information, ClinVar provides some basic annotation for the variants, such as HGVS-nomenclature, types of variants (single nucleotide variant, indels, etc.), and functional consequences (missense, UTR, etc.). While this information is valuable, it is common to expand these annotations for the clinicians/researchers to better understand the functional impact of the variants for the purpose of disease diagnosis, hypothesis-generating/validation.</p>
      <p>Currently, ClinVar (20220508) includes 1,440,883 unique variants that are associated with various diseases. It uses a 5-category classification system that groups these variants into pathogenic, likely pathogenic, benign, likely benign, and variant of uncertain significance.</p>
      <p>We first compared the running speed of annotating the test file using the original and updated SNPAAMapper (<xref rid="T1" ref-type="table">Table 1</xref>). We then ran the updated Python version of SNPAAMapper for entire ClinVar database file and found that our updated version was able to generate exon annotation file in 48 s; generate feature start and gene mapping files in 49 s; classify variants by regions in 256 s, It took 124,311 s for predicting amino acid change type. It took 497 s for prioritizing mutation effects. For the Perl version of SNPAAMapper, it takes more than 2 weeks to run all the pipeline steps.</p>
      <table-wrap position="float" id="T1">
        <label>Table 1</label>
        <caption>
          <p>Speed comparison between original and updated SNPAAMapper for the test dataset.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th valign="top" align="left" rowspan="1" colspan="1">
                <bold>Steps</bold>
              </th>
              <th valign="top" align="center" rowspan="1" colspan="1">
                <bold>Python execution time in seconds</bold>
              </th>
              <th valign="top" align="center" rowspan="1" colspan="1">
                <bold>Perl execution time in seconds</bold>
              </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td valign="top" align="left" rowspan="1" colspan="1">Step 1</td>
              <td valign="top" align="center" rowspan="1" colspan="1">13</td>
              <td valign="top" align="center" rowspan="1" colspan="1">2</td>
            </tr>
            <tr>
              <td valign="top" align="left" rowspan="1" colspan="1">Step 2</td>
              <td valign="top" align="center" rowspan="1" colspan="1">16</td>
              <td valign="top" align="center" rowspan="1" colspan="1">166</td>
            </tr>
            <tr>
              <td valign="top" align="left" rowspan="1" colspan="1">Step 3</td>
              <td valign="top" align="center" rowspan="1" colspan="1">2</td>
              <td valign="top" align="center" rowspan="1" colspan="1">138</td>
            </tr>
            <tr>
              <td valign="top" align="left" rowspan="1" colspan="1">Step 4</td>
              <td valign="top" align="center" rowspan="1" colspan="1">62</td>
              <td valign="top" align="center" rowspan="1" colspan="1">407</td>
            </tr>
            <tr>
              <td valign="top" align="left" rowspan="1" colspan="1">Step 5</td>
              <td valign="top" align="center" rowspan="1" colspan="1">1</td>
              <td valign="top" align="center" rowspan="1" colspan="1">1</td>
            </tr>
            <tr>
              <td valign="top" align="left" rowspan="1" colspan="1">Total</td>
              <td valign="top" align="center" rowspan="1" colspan="1">94</td>
              <td valign="top" align="center" rowspan="1" colspan="1">714</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>Next, we examined the concordance of annotation between ClinVar and SNPAAMapper-Python. We found that 91.4% of the variants have concordant annotations between ClinVar and our tool (<xref rid="F2" ref-type="fig">Figure 2</xref>). Among those variants with discordant annotations, we found that 48.55% of them are annotated as non-coding transcripts variants in ClinVar which was not specifically annotated in SNPAAMapper. Additionally, our tool provided annotation for 10% of the variants that showed no annotation in ClinVar, which highlighted the usefulness of our tool. Importantly, annotations from ClinVar were buried into the “INFO” column with other information, which makes parsing and understanding the information much more difficult, whereas, for our tool, there is a separate column for each specific annotation. Using position-based annotation from SNPAAMapper, we examined the distribution of variants by functional genomics regions (<xref rid="F3" ref-type="fig">Figure 3</xref>). We found that the majority (661,958 for pathogenic variants and 592,638 for benign variants) of reported variants in ClinVar (<italic>n</italic> = 947,008), regardless of their pathogenicity, reside in coding sequences (CDS).</p>
      <fig position="float" id="F2">
        <label>Figure 2</label>
        <caption>
          <p>Percentage of ClinVar variant region annotation that are concordant with SNPAAMapper-Python.</p>
        </caption>
        <graphic xlink:href="frai-05-991733-g0002" position="float"/>
      </fig>
      <fig position="float" id="F3">
        <label>Figure 3</label>
        <caption>
          <p>Percentage of ClinVar variants by variant type. Left, Percentage of ClinVar pathogenic variants by variant type; Right, Percentage of ClinVar benign variants by variant region.</p>
        </caption>
        <graphic xlink:href="frai-05-991733-g0003" position="float"/>
      </fig>
      <p>Comparing pathogenic variants (<italic>n</italic> = 103,909) to benign ones (<italic>n</italic> = 340,726), we found that there was a higher percentage of CDS variants and lower percentages of 3'UTR, 5'UTR, and other non-coding sequences for pathogenic variants. This observation illustrated that most of the studies focused on CDS as variants from this region usually have clearer functional consequences. Additionally, using the SNPAAMapper's output, we can easily examine the distribution of variants across different genes. For example, gene TTN has the most unique variants (<italic>n</italic> = 17,915), while 2,448 genes have only 1 unique variant. These observations highlighted our need for investigating the under-studied genes to gain a well-rounded understanding of human genes and genetic mutations. We note that this gain of knowledge is attributable to the easy-to-use format of SNPAAMapper's output.</p>
      <p>Finally, we illustrated the importance of including additional exome-specific annotations to help users interpret their data using annotated output from the previous step. First, we looked under the hood for variants residing in CDS. As illustrated in <xref rid="F4" ref-type="fig">Figure 4</xref>, it is not surprising that the vast majority of nonsense (NSN) variants are pathogenic, while most synonymous (SYN) variants are benign. Interestingly, for nonsynonymous (NSM) variants, we observed a similar percentage of the reported pathogenic and benign variants. This highlighted the importance of NSM variants in helping us interpret sequencing variants. As a result, numerous methods have been developed to target NSM variants and predict whether they are functional or not.</p>
      <fig position="float" id="F4">
        <label>Figure 4</label>
        <caption>
          <p>Count of pathogenic and benign variants by their functional annotation. NSN, nonsense; NSM, nonsynonymous; SYN, synonymous.</p>
        </caption>
        <graphic xlink:href="frai-05-991733-g0004" position="float"/>
      </fig>
      <p>Another key strength of our SNPAAMapper pipeline was to retrieve the most damaging amino acid variants from genomic variants. This can be used to investigate the property of variants and their impact on the biochemical and physical properties of the amino acid and protein. As illustrated in <xref rid="F5" ref-type="fig">Figure 5</xref>, we plotted the hydropathy of the variants in ClinVar database grouped by their clinical significance. We found that a change in hydropathy was more commonly observed in pathogenic variants. For example, hydrophobic to hydrophilic conversion was substantially enriched in pathogenic variants. On the other hand, benign variants were substantially enriched in variants without pathogenic conversion (hydrophilic to hydrophilic, etc.). This analysis briefly highlighted the importance of providing easy-to-access amino acid variants, as their properties are crucial in understanding the functional consequence of the underlying genomic variants.</p>
      <fig position="float" id="F5">
        <label>Figure 5</label>
        <caption>
          <p>Percentage of variants grouped by their hydropathy.</p>
        </caption>
        <graphic xlink:href="frai-05-991733-g0005" position="float"/>
      </fig>
    </sec>
    <sec>
      <title>Comparison of performance in run times</title>
      <p>We compared the execution time between the original SNPAAMapper and updated SNPAAMapper-Python using the same sample VCF file. The updated program runs significantly faster (8 times) than the original Perl program, with an almost 10-fold increase in speed. This time increase will be substantially more prominent when hundreds or thousands of samples were queried.</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="s4">
    <title>Discussion</title>
    <p>The biggest difference between the old tool (SNPAAMapper) and our updated tool (SNPAAMapper-Python) is the change in the programming language. The former runs on Perl, while the latter runs in Python, as the name states. To convert the original Perl pipeline codes, we downloaded and analyzed the original SNPAAMapper code reported in the paper, which was sourced from the previous study (Bai and Cavalcoli, <xref rid="B1" ref-type="bibr">2013</xref>).</p>
    <p>Our updated program maintains all the previous features of SNPAAMapper. It grants downstream variant identification and analysis at a record speed. Our tool is self-sufficient and lightweight; external alignment tools and such are not necessary since they are all included in this package. In addition, our tool preserves the original customizability of SNPAAMapper, meaning that it can be easily configured for other species and reference genomes. Another benefit of our program is its greater compatibility; the popularity and use of the Perl programming language are rapidly decreasing (<ext-link xlink:href="https://www.tiobe.com/tiobe-index/perl/" ext-link-type="uri">https://www.tiobe.com/tiobe-index/perl/</ext-link>) while the use of Python has been growing at an extreme rate for the last decade (<ext-link xlink:href="https://www.tiobe.com/tiobe-index/python/" ext-link-type="uri">https://www.tiobe.com/tiobe-index/python/</ext-link>). We believe that this upgrade is crucial for researchers due to the impractical run time of the original SNPAAMapper on a test sample (<xref rid="T1" ref-type="table">Table 1</xref>).</p>
    <p>The python version performs more efficiently than the perl version. The reason is that we use an optimized Python-built in module “csv” to read and write tabular data. In particular, the python version is not using any embedded loop as the Perl version by iterating over almost approximately a million rows in the ChrAll_knownGene.txt.exons file for “the number of chromosomes” (about 60) times. Instead, the python version iterates only one time.</p>
    <p>We used the same dataset tested in SNPAAMapper for both programs. By running both tools on a Latitude 7480 Desktop computer with 8GB RAM and an Intel Core i5-6300 CPU @ 2.4Ghz, we were able to make an accurate comparison of the execution times for each program. Using this method, we were also able to make time comparisons for each step of both programs.</p>
    <p>In addition, we also run SNPAAMapper-python on the ClinVar database file to collect the running statistics. Specifically, we ran the pipeline on an lntel_Core_i7-4770K_CPU@3.5GHz Gentoo Linux box to collect running statistics for ClinVar database file.</p>
    <p>Additionally, with the improved output representation, this update enables easy-to-use output where each column represents a single piece of information. These improvements can greatly facilitate downstream analyses and open up opportunities for users to analyze their data using tools like Excel, which is expected to accelerate the translation of information to knowledge. Lastly, our codes are open-sourced and hosted on GitHub, which enables the continuing maintenance, updates and improvements from us and all the users.</p>
    <p>We created an end-to-end pipeline with intermediate outputs. The final output is the one that's interesting to most of our users.</p>
    <p>To test the ease of use and convenience of our program, we asked a student to act as a user and attempt to operate our system. As our tester, we asked the student to document running statistics and surveyed the practicality of our tool.</p>
    <p>Our ultimate goal is to create a very efficient and multifunctional pipeline which can not only do variant annotation, but also has multiple functional annotation databases incorporated into the pipeline. This would require downloading many databases and consistently formatting them.</p>
    <p>In the future, we plan to add additional features/annotations to the pipeline. Some examples include population allele frequencies, functional prediction scores etc. This will be a priority for us. Additionally, we expect to compare the annotations made by SNPAAMapper with other established tools in the future version to give users a better understanding of the performance of our tool. Furthermore, to make SNPAAMapper more easily accessible to a wider range of users, we plan to extend our program to support R in future development.</p>
  </sec>
  <sec sec-type="data-availability" id="s5">
    <title>Data availability statement</title>
    <p>The original contributions presented in the study are included in the article/<xref rid="SM1" ref-type="supplementary-material">Supplementary material</xref>, further inquiries can be directed to the corresponding author/s.</p>
  </sec>
  <sec id="s6">
    <title>Author contributions</title>
    <p>CL, KM, and YB drafted the manuscript. NX deployed the SNPAAMapper-Python GitHub website. CF assisted to modify the pipeline codes. CL has processed the input files to generate the ClinVar results. AH conducted the student test runs. XL and YB supervised the project and provided suggestions and guidance on directions. All authors participated in the discussions and revisions. All authors contributed to the article and approved the submitted version.</p>
  </sec>
  <sec sec-type="funding-information" id="s7">
    <title>Funding</title>
    <p>Funding for article processing charge is provided by the University of South Florida to XL.</p>
  </sec>
  <sec sec-type="COI-statement" id="conf1">
    <title>Conflict of interest</title>
    <p>The authors declare that the research was conducted in the absence of any commercial or financial relationships that could be construed as a potential conflict of interest.</p>
  </sec>
  <sec sec-type="disclaimer" id="s8">
    <title>Publisher's note</title>
    <p>All claims expressed in this article are solely those of the authors and do not necessarily represent those of their affiliated organizations, or those of the publisher, the editors and the reviewers. Any product that may be evaluated in this article, or claim that may be made by its manufacturer, is not guaranteed or endorsed by the publisher.</p>
  </sec>
</body>
<back>
  <sec sec-type="supplementary-material" id="s9">
    <title>Supplementary material</title>
    <p>The Supplementary Material for this article can be found online at: <ext-link xlink:href="https://www.frontiersin.org/articles/10.3389/frai.2022.991733/full#supplementary-material" ext-link-type="uri">https://www.frontiersin.org/articles/10.3389/frai.2022.991733/full#supplementary-material</ext-link></p>
    <supplementary-material id="SM1" position="float" content-type="local-data">
      <label>Supplementary Figure 1</label>
      <caption>
        <p>Algorithm for classifying variants by genomic regions for SNPAAMapper-Python.</p>
      </caption>
      <media xlink:href="Data_Sheet_1.docx">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material id="SM2" position="float" content-type="local-data">
      <label>Supplementary Table 1</label>
      <caption>
        <p>Column description for the first 15 columns of the VCF output file.</p>
      </caption>
      <media xlink:href="Table_1.DOCX">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
  <ref-list>
    <title>References</title>
    <ref id="B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bai</surname><given-names>Y.</given-names></name><name><surname>Cavalcoli</surname><given-names>J.</given-names></name></person-group> (<year>2013</year>). <article-title>SNPAAMapper: An efficient genome-wide SNP variant analysis pipeline for next-generation sequencing data</article-title>. <source>Bioinformation</source>
<volume>9</volume>, <fpage>870</fpage>–<lpage>872</lpage>. <pub-id pub-id-type="doi">10.6026/97320630009870</pub-id><?supplied-pmid 24250114?><pub-id pub-id-type="pmid">24250114</pub-id></mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barba</surname><given-names>M.</given-names></name><name><surname>Czosnek</surname><given-names>H.</given-names></name><name><surname>Hadidi</surname><given-names>A.</given-names></name></person-group> (<year>2014</year>). <article-title>Historical perspective, development and applications of next-generation sequencing in plant virology</article-title>. <source>Viruses</source>
<volume>6</volume>, <fpage>106</fpage>–<lpage>136</lpage>. <pub-id pub-id-type="doi">10.3390/v6010106</pub-id><?supplied-pmid 24399207?><pub-id pub-id-type="pmid">24399207</pub-id></mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Landrum</surname><given-names>M.</given-names></name><name><surname>Lee</surname><given-names>J.</given-names></name><name><surname>Benson</surname><given-names>M.</given-names></name><name><surname>Brown</surname><given-names>G.</given-names></name><name><surname>Chao</surname><given-names>C.</given-names></name><name><surname>Chitipiralla</surname><given-names>S.</given-names></name><etal/></person-group>. (<year>2015</year>). <article-title>ClinVar: public archive of interpretations of clinically relevant variants</article-title>. <source>Nucl. Acids Res.</source><volume>44</volume>, <fpage>D862</fpage>–<lpage>D868</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkv1222</pub-id><?supplied-pmid 26582918?><pub-id pub-id-type="pmid">26582918</pub-id></mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Lewis</surname><given-names>T.</given-names></name></person-group> (<year>2013</year>). <source>Human Genome Project Marks 10th Anniversary</source>. <ext-link xlink:href="https://www.livescience.com/" ext-link-type="uri">livescience.com</ext-link>. Available online at: <ext-link xlink:href="https://www.livescience.com/28708-human-genome-project-anniversary.html" ext-link-type="uri">https://www.livescience.com/28708-human-genome-project-anniversary.html</ext-link> (accessed July 11, 2022).</mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H. B.</given-names></name><name><surname>Handsaker</surname><given-names>A.</given-names></name><name><surname>Wysoker</surname><given-names>T.</given-names></name><name><surname>Fennell</surname><given-names>J.</given-names></name><name><surname>Ruan</surname><given-names>N.</given-names></name><name><surname>Homer</surname><given-names>G.</given-names></name><etal/></person-group>. (<year>2009</year>). <article-title>The Sequence Alignment/Map Format and SAMtools</article-title>. <source>Bioinformatics</source><volume>25</volume>, <fpage>2078</fpage>–<lpage>2079</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btp352</pub-id><?supplied-pmid 19505943?><pub-id pub-id-type="pmid">19505943</pub-id></mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="webpage"><person-group person-group-type="author"><name><surname>Preston</surname><given-names>J.</given-names></name><name><surname>VanZeeland</surname><given-names>A.</given-names></name><name><surname>Peiffer</surname><given-names>A.</given-names></name></person-group> (<year>2022</year>). <source>Innovation at Illumina: The Road to the $600 Human Genome</source>. <ext-link xlink:href="https://www.nature.com/" ext-link-type="uri">Nature.com</ext-link>. Available online at: <ext-link xlink:href="https://www.nature.com/articles/d42473-021-00030-9" ext-link-type="uri">https://www.nature.com/articles/d42473-021-00030-9</ext-link></mixed-citation>
    </ref>
  </ref-list>
</back>
