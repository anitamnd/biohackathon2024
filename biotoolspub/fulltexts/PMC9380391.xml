<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Genome Biol</journal-id>
    <journal-id journal-id-type="iso-abbrev">Genome Biol</journal-id>
    <journal-title-group>
      <journal-title>Genome Biology</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1474-7596</issn>
    <issn pub-type="epub">1474-760X</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9380391</article-id>
    <article-id pub-id-type="publisher-id">2737</article-id>
    <article-id pub-id-type="doi">10.1186/s13059-022-02737-4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PerSVade: personalized structural variant detection in any species of interest</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-2964-9818</contrib-id>
        <name>
          <surname>Schikora-Tamarit</surname>
          <given-names>Miquel Àngel</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0019-1735</contrib-id>
        <name>
          <surname>Gabaldón</surname>
          <given-names>Toni</given-names>
        </name>
        <address>
          <email>toni.gabaldon@bsc.es</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.10097.3f</institution-id><institution-id institution-id-type="ISNI">0000 0004 0387 1602</institution-id><institution>Barcelona Supercomputing Centre (BSC-CNS), </institution></institution-wrap>Plaça Eusebi Güell, 1-3, 08034 Barcelona, Spain </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.473715.3</institution-id><institution-id institution-id-type="ISNI">0000 0004 6475 7299</institution-id><institution>Institute for Research in Biomedicine (IRB Barcelona), </institution><institution>The Barcelona Institute of Science and Technology, </institution></institution-wrap>Baldiri Reixac, 10, 08028 Barcelona, Spain </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="GRID">grid.425902.8</institution-id><institution-id institution-id-type="ISNI">0000 0000 9601 989X</institution-id><institution>Catalan Institution for Research and Advanced Studies (ICREA), </institution></institution-wrap>Barcelona, Spain </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="GRID">grid.430579.c</institution-id><institution-id institution-id-type="ISNI">0000 0004 5930 4623</institution-id><institution>Centro Investigación Biomédica En Red de Enfermedades Infecciosas, </institution></institution-wrap>Barcelona, Spain </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>16</day>
      <month>8</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>16</day>
      <month>8</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <volume>23</volume>
    <elocation-id>175</elocation-id>
    <history>
      <date date-type="received">
        <day>29</day>
        <month>11</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>7</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">Structural variants (SVs) underlie genomic variation but are often overlooked due to difficult detection from short reads. Most algorithms have been tested on humans, and it remains unclear how applicable they are in other organisms. To solve this, we develop perSVade (personalized structural variation detection), a sample-tailored pipeline that provides optimally called SVs and their inferred accuracy, as well as small and copy number variants. PerSVade increases SV calling accuracy on a benchmark of six eukaryotes. We find no universal set of optimal parameters, underscoring the need for sample-specific parameter optimization. PerSVade will facilitate SV detection and study across diverse organisms.</p>
      <sec>
        <title>Supplementary Information</title>
        <p>The online version contains supplementary material available at 10.1186/s13059-022-02737-4.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Structural variants</kwd>
      <kwd>Variant calling</kwd>
      <kwd>Short reads</kwd>
      <kwd>Parameter optimization</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100010663</institution-id>
            <institution>H2020 European Research Council</institution>
          </institution-wrap>
        </funding-source>
        <award-id>724173</award-id>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100010434</institution-id>
            <institution>“la Caixa” Foundation</institution>
          </institution-wrap>
        </funding-source>
        <award-id>LCF/BQ/DR19/11740023</award-id>
        <award-id>LCF/PR/HR21/00737</award-id>
        <principal-award-recipient>
          <name>
            <surname>Schikora-Tamarit</surname>
            <given-names>Miquel Àngel</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100004837</institution-id>
            <institution>Ministerio de Ciencia e Innovación</institution>
          </institution-wrap>
        </funding-source>
        <award-id>PGC2018-099921-B-I00</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2022</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par2">Structural variants (SVs) are large changes (typically &gt;50 bp) in the DNA between individuals that alter genome size (duplications and deletions) or generate rearrangements (inversions, translocations, and interspersed insertions) [<xref ref-type="bibr" rid="CR1">1</xref>, <xref ref-type="bibr" rid="CR2">2</xref>]. In eukaryotes, SVs can drive clinically relevant phenotypes including cancer [<xref ref-type="bibr" rid="CR3">3</xref>–<xref ref-type="bibr" rid="CR5">5</xref>], neurological diseases [<xref ref-type="bibr" rid="CR6">6</xref>, <xref ref-type="bibr" rid="CR7">7</xref>], or antifungal drug resistance [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR9">9</xref>]. In addition, SVs may generate significant intraspecific genetic variation across many taxa like humans [<xref ref-type="bibr" rid="CR10">10</xref>–<xref ref-type="bibr" rid="CR12">12</xref>], songbirds [<xref ref-type="bibr" rid="CR13">13</xref>], or rice plants [<xref ref-type="bibr" rid="CR14">14</xref>]. Despite their role on human health and natural diversity, most genomic studies overlook SVs due to technical difficulties in calling SVs from short reads [<xref ref-type="bibr" rid="CR15">15</xref>]. This means that the role of SVs remains largely unexplored across eukaryotes.</p>
    <p id="Par3">Inferring SVs from short reads is challenging because it relies mostly on indirect evidence coming from de novo assembly alignment, changes in read depth, or the presence of discordantly paired / split reads in read mapping analysis [<xref ref-type="bibr" rid="CR16">16</xref>–<xref ref-type="bibr" rid="CR21">21</xref>]. Long-read-based SV calling may avoid some of these limitations, but short read-based SV calling remains a cost-effective strategy to find SVs in large cohorts [<xref ref-type="bibr" rid="CR14">14</xref>, <xref ref-type="bibr" rid="CR15">15</xref>, <xref ref-type="bibr" rid="CR22">22</xref>]. Recent benchmarking studies compared the performance of different tools in human genomes and found that SV calling accuracy is highly dependent on the methods and filtering strategy used [<xref ref-type="bibr" rid="CR15">15</xref>, <xref ref-type="bibr" rid="CR23">23</xref>, <xref ref-type="bibr" rid="CR24">24</xref>]. Such studies are useful to define “best practices” (optimal methods and filtering strategies) for SV calling in human samples. However, few studies have investigated the accuracy of these tools on non-human genomes. It is unclear whether the human-derived “best practices” for SV calling can be reliably used in other species. We hypothesize that this may not be the case for genomes with different contents of repetitive or transposable elements, which constrain the short read-based SV calling accuracy [<xref ref-type="bibr" rid="CR24">24</xref>]. In summary, current tools for short-read-based SV calling are often unprepared for non-human genomes, which hinders the study of SVs in most organisms.</p>
    <p id="Par4">To overcome this limitation, we developed the <italic>personalized structural variation detection</italic> pipeline, or perSVade (pronounced “persuade”), which is designed to adapt a state-of-the-art SV calling pipeline to any sample/individual of any genome/species of interest. PerSVade detects breakpoints (two joined regions that exist in the sample of interest and not in the reference genome) from short paired-end reads and summarizes them into complex SVs (deletions, inversions, tandem duplications, translocations, and interspersed insertions). The pipeline provides automated benchmarking and parameter selection for these methods in any genome or sequencing run, which is useful for species without such recommended parameters. PerSVade provides an automated report of the SV calling accuracy on these simulations, which serves to estimate the confidence of the results on real samples. Beyond SV detection, perSVade can be used to find small variants (single-nucleotide polymorphisms (SNPs) and insertions/deletions (IN/DELs)) and read depth-based copy number variation (CNV), all implemented within a flexible and modular framework.</p>
    <p id="Par5">The following sections describe perSVade and its SV calling performance on various datasets of both simulated and real genomes with SVs.</p>
  </sec>
  <sec id="Sec2">
    <title>Results</title>
    <sec id="Sec3">
      <title>PerSVade: a pipeline to call and interpret structural variants in your species of interest</title>
      <p id="Par6">PerSVade identifies SVs from a paired-end WGS dataset and a reference genome as sole inputs. It identifies breakpoints from the aligned reads with <italic>gridss</italic> [<xref ref-type="bibr" rid="CR21">21</xref>] and summarizes them into actual SVs (insertions, translocations, deletions, inversion, and tandem duplications) with <italic>clove</italic> [<xref ref-type="bibr" rid="CR25">25</xref>]. We followed the recent recommendation of using a single, high-performing algorithm for breakpoint calling instead of using multiple software [<xref ref-type="bibr" rid="CR24">24</xref>]. We chose <italic>gridss</italic> because of its high accuracy in several benchmarking studies [<xref ref-type="bibr" rid="CR23">23</xref>, <xref ref-type="bibr" rid="CR24">24</xref>]. In addition, our pipeline generates a functional annotation of the variants, which is useful to evaluate the altered genomic regions and aid downstream analyses. In summary, perSVade is a pipeline to find and interpret SVs from most eukaryotic sequencing datasets (Fig. <xref rid="Fig1" ref-type="fig">1</xref>).<fig id="Fig1"><label>Fig. 1</label><caption><p>Schematic representation of the modular workflow of PerSVade. This figure shows the modules of perSVade (each represented in a different box and executable with a single command), which may be combined following the drawn arrows. The italic text describes the algorithms used at each step. The pipeline identifies either structural variants (SVs) (module “call_SVs”), coverage-derived copy number variants (CNVs) (module “call_CNVs”), small variants (module “call_small_variants”), and/or changes in the coverage per gene (module “get_cov_genes”) from aligned short paired-end reads (obtained with the module “align_reads”). The different types of SVs output by “call_SVs” are drawn at the bottom for clarity. In addition, the module “trim_treads_and_QC” can be used to trim the reads and perform quality control with <italic>FASTQC</italic> before read alignment<italic>.</italic> On another note, several modules (“call_SVs,” “find_knownSVs_regions,” “integrate_SV_CNV_calls,” “optimize_parameters,” and “call_small_variants”) use an annotation of genomic repeats that can be obtained with the module “infer_repeats” (bottom left). The most novel aspect of perSVade is the automatic parameter optimization for SV calling adapted to the input (implemented in the module “optimize_parameters”). This is achieved through simulations of SVs on the reference genome, which can be randomly placed (“random”), around regions with previously known SVs (“known”) or on regions with pairwise homology (“homologous”). The modules “find_knownSVs_regions” and “find_homologous_regions” can be used to infer these “known” and “homologous” regions, respectively. In addition, the variants found with “call_SVs” and “call_CNVs” can be combined with the module “integrate_SV_CNV_calls.” Finally, the modules “annotate_SVs” and “annotate_small_vars” can be used to obtain a functional annotation of the variants. See “<xref rid="Sec9" ref-type="sec">Methods</xref>” for more details. In addition, note that Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1 includes a more detailed representation of how “optimize_parameters” works</p></caption><graphic xlink:href="13059_2022_2737_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par7">A key feature of perSVade is the parameter optimization step (implemented in the “optimize_parameters” module and shown in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1). There are no specific recommendations for filtering the outputs of <italic>gridss</italic> and <italic>clove</italic> in most species, and it is unclear whether the parameters validated on model organisms are universal. Similarly, the performance of these algorithms on different sequencing formats (i.e., varying read lengths, coverage, or insert size) is not easy to predict. To solve this automatically, perSVade “optimize_parameters” generates simulated genomes (based on the reference genome and input dataset) with SVs and chooses the most accurate filters (with the highest harmonic mean between precision and recall (<italic>F</italic>-value)) for these simulations. To account for different mechanisms of SV formation, the simulations can be either (1) randomly placed across the genome (“random” simulations), (2) around regions with previously known SVs (“known” simulations), or (3) around regions with homologous sequences (“homologous” simulations). We consider that “known” and “homologous” simulations are more realistic than the “random” ones. See “<xref rid="Sec8" ref-type="sec">Methods</xref>” for further details. Regardless of the simulation type, the optimized filters can be used for the SV calling on real data, potentially yielding the highest possible performance. The accuracy of the optimized filters on different simulations is reported as a tabular file, which is useful to define the expected calling accuracy. We hypothesize that this accuracy may vary across species and/or sequencing formats, and perSVade can infer it on any input sample. All in all, perSVade automatically finds the best filters and reports the expected calling accuracy for each input sample.</p>
      <p id="Par8">We validated the usability of perSVade by running it on available sequences for six phylogenetically diverse eukaryotes with different genome sizes (<italic>Candida glabrata</italic> (12 Mb), <italic>Candida albicans</italic> (14 Mb), <italic>Cryptococcus neoformans</italic> (19 Mb), <italic>Arabidopsis thaliana</italic> (120 Mb), <italic>Drosophila melanogaster</italic> (144 Mb), and <italic>Homo sapiens</italic> (3163 Mb)), with three WGS runs per species (yielding datasets with 6.75×10<sup>6</sup>–1.59×10<sup>9</sup> reads, see “<xref rid="Sec8" ref-type="sec">Methods</xref>”). We ran the pipeline using parameter optimization with “random,” “known,” or “homologous” simulations. In addition, we ran perSVade with default parameters as a baseline, useful to evaluate the impact of parameter optimization (the core and most novel feature of perSVade) on calling accuracy and resource consumption. We found that the computational burden (running time and memory used) was highly variable among datasets and correlated with genome and dataset sizes. As expected, parameter optimization increased resource consumption in all cases. This burden was particularly high for the human datasets, which may hinder the usage of perSVade on such large genomes if computational resources are limited (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2). However, we consider that such choices should be left to the user based on these results, since the increased accuracy due to parameter optimization may outweigh resource costs. Taken together, our analysis indicates that perSVade can be used for SV calling in a wide range of eukaryotes and sequencing datasets.</p>
    </sec>
    <sec id="Sec4">
      <title>PerSVade’s parameter optimization improves calling accuracy in simulated datasets</title>
      <p id="Par9">In order to clarify the impact of parameter optimization on calling accuracy, we measured the performance of perSVade’s SV calling on these samples and simulations. We found that the <italic>F</italic>-value after parameter optimization on “random” and “known” simulations was high (between 0.75 and 1.0) in most samples and SV types (with one exception in <italic>Drosophila melanogaster</italic> that yielded an <italic>F</italic>-value ~ 0.5). The <italic>F</italic>-value on “homologous” simulations was often lower (depending on the species), suggesting that SVs happening on regions with pairwise homology may be more difficult to resolve. As expected, the accuracy on “random” SVs was higher than on more realistic simulations (“known” and “homologous”), suggesting that it may overestimate real data accuracy. In general, the <italic>F</italic>-value was higher than the “default” setting in most species (except in <italic>C. neoformans</italic>), and the improvement was dramatic in some SV types (i.e., the <italic>F</italic>-value went from &lt;0.1 to &gt;0.95 in <italic>C. glabrata</italic>’s deletions or insertions) (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). In addition, we found that parameter optimization increases recall rather than precision, which is &gt;0.95 in most simulations and SV types (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3). We also found that using a single set of (global) parameters optimized for all SV types in a given sample yields an accuracy that is as high as using a set of parameters specifically for each SV type (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4). This validates our approach of running SV calling once (with a single set of parameters) for each sample. Taken together, our results suggest that parameter optimization yields maximum performance by improving the recall of SVs as compared to default parameters.<fig id="Fig2"><label>Fig. 2</label><caption><p>PerSVade’s parameter optimization improves the SV calling accuracy on simulations. We ran perSVade’s SV calling on three samples / species for six eukaryotes (see “<xref rid="Sec9" ref-type="sec">Methods</xref>”) using either “random,” “known,” or “homologous” simulations. These plots show the <italic>F</italic>-value of either default (gray) or optimized (red) parameters (for each sample and simulation type) on these simulations. The <italic>x</italic> axis represents the type of SV (deletions (del), tandem duplications (tan), inversions (inv), insertions (ins), translocations (tra), and the average of all SVs (all)). Note that Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3 shows the corresponding precision and recall, from which the <italic>F</italic>-value is calculated</p></caption><graphic xlink:href="13059_2022_2737_Fig2_HTML" id="MO2"/></fig></p>
      <p id="Par10">We next explored whether different runs of perSVade (i.e., in different species or simulation types) yield similar parameters, which may clarify how necessary this optimization is. We hypothesized that each sample and simulation type combination may require specific parameters that would not necessarily work for other samples. To test this, we first compared the chosen parameters across different runs, which appeared to be sample-specific (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5A). This suggests that there is not a universal recipe (i.e., filtering parameters) for SV calling with perSVade. However, another (null) hypothesis could be that different parameter sets have similar outcomes, without changing the SV calling accuracy. This question was highly important to us. If perSVade’s optimization converges to equivalent parameter sets in different samples we would not need the optimization on every sample (i.e., we could re-define one of these parameters as default). In order to sort this out, we evaluated how different parameter sets (either “default” ones or those that are defined as “optimum” for a given sample) work on simulated genomes related to other samples. The results of this analysis are shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref> and Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S6. As hypothesized, not all the parameter sets yield accurate results on all samples, with large differences between species (Fig. <xref rid="Fig3" ref-type="fig">3</xref>A). However, we found that parameters optimized for one sample are mostly accurate on samples of the same species, regardless of the simulation type (Fig. <xref rid="Fig3" ref-type="fig">3</xref>B). Of note, the parameters yielded by “random” simulations were accurate on “homologous” and “real” simulations (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). This indicates that running perSVade on “random” simulations (the cheapest setting in terms of resources) yields accurate parameters for more realistic simulations and possibly real SVs. On another line, we found that the different parameters changed mostly the SV calling recall, and not the precision (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S6).<fig id="Fig3"><label>Fig. 3</label><caption><p>There is no universal recipe for SV calling across all species. <bold>A</bold> In order to assess whether perSVade’s parameter optimization is necessary for a given combination of sample and simulation (mentioned in Fig. <xref rid="Fig2" ref-type="fig">2</xref>), we measured the SV calling accuracy of each optimized parameter set on the other combinations. Each row indicates a different “training” parameter set optimized for each sample and simulation type in all species. In addition, the first row refers to the default parameters. Each column represents a simulation from a given sample / simulation type to be “tested.” The heatmap shows the <italic>F</italic>-value of each parameter set on each tested simulation (hereafter referred to as “testing instance”). Note that the species are ordered alike in rows and columns. In addition, note that each sample (from a given species and simulation type) yielded one set of training parameters and two simulated genomes tested here, which explains why there are two columns for each row. The colored boxes indicate testing instances where the training and testing species are equal. The asterisks refer to instances where both the sample and type of simulation are equal in the training and testing (equivalent to the “optimized” parameters from Fig. <xref rid="Fig2" ref-type="fig">2</xref>). Note that Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S6 shows the corresponding precision and recall, from which the <italic>F</italic>-value is calculated. <bold>B</bold> We summarized the data shown in <bold>A</bold> to compare how similar types of training parameters performed on each species (in the rows) and type of simulations (in the columns). Each point corresponds to a testing instance, matching one cell from the heatmap in <bold>A</bold>. The “default” and “same sample” reflect testing instances where the training parameters were either un-optimized or optimized specifically for each sample, respectively. The “different spp” group includes instances where the training parameters were from different species. The “same spp” group shows testing instances with both training parameters and tested simulations from a different sample of the same species. The “same simulation” reflects instances with the same training and testing sample, but different simulation types. For clarity, the right box shows how the training parameters are grouped for a set of “homologous” simulations based on one example <italic>C. glabrata</italic> sample (which corresponds to the first two columns in <bold>A</bold>)</p></caption><graphic xlink:href="13059_2022_2737_Fig3_HTML" id="MO3"/></fig></p>
      <p id="Par11">To understand why certain parameter choices impact SV calling accuracy, we tested how changing each parameter in isolation (keeping all others with default values) affects accuracy in these different species and simulations (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5). We first used these data to assess whether the change of single parameters drives the optimization process. We measured, for each parameter and sample, the ratio between the single-parameter-change <italic>F</italic>-value (where only one parameter has the optimal value) and the maximum <italic>F</italic>-value (obtained with the set of parameters where all parameters are optimized). We find that 78.05% of these parameter-sample instances have an <italic>F</italic>-value ratio below 0.75 (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5B), suggesting that the optimal accuracy is mostly reached by a complex interplay between different (at least 2) parameters, rather than being driven by a single-parameter change.</p>
      <p id="Par12">This analysis also serves to evaluate the impact of different parameters on SV calling accuracy. For example, we find that the set of vcf “FILTER” tags defining accepted breakpoints (<italic>wrong_FILTERtags</italic> parameter) drastically affects the accuracy in <italic>C. glabrata</italic>, in a way that requiring de novo assembly support for breakpoints (default behavior) is too conservative. A similar (but smaller) effect is observed in <italic>C. albicans</italic>, but not in the other species, which could be due to unique genomic features and/or technical properties in the <italic>Candida</italic> samples driving worse assembly performance. In addition, the coverage thresholds that define tandem duplications and deletions (<italic>min_rel_coverage_dup</italic> and <italic>max_rel_coverage_del</italic>, respectively) determine accuracy in a way that is dependent on ploidy, likely because diploid species (<italic>C. albicans</italic>, <italic>D. melanogaster</italic>, and <italic>H. sapiens</italic>) require a less conservative threshold to accept heterozygous variants. Importantly, these three parameters (<italic>wrong_FILTERtags</italic>, <italic>min_rel_coverage_dup</italic> and <italic>max_rel_coverage_del</italic>) explain why default parameters are suboptimal in most cases, as the default values can be too conservative in different species. On another line, the minimum number of supporting reads per variant (<italic>min_Nfragments</italic>) changes accuracy, with sample-specific effects (see <italic>D. melanogaster</italic> and <italic>A. thaliana</italic>), which we attribute to varying coverage, read lengths, or sequencing quality. Finally, filtering out variants that overlap any repetitive elements (<italic>filter_overlappingRepeats</italic>) generally reduces accuracy for realistic simulations (“homologous” and “known”), likely due to the fact that real variants could appear around such repeats. Conversely, there are other parameters that have minimal effects on accuracy (<italic>dif_between_insert_and_del</italic>, <italic>filter_noReadPairs</italic>, <italic>max_to_be_considered_small_event</italic>, <italic>maximum_length_inexactHomology</italic>, <italic>maximum_microhomology</italic>, <italic>maximum_strand_bias</italic>, <italic>min_QUAL</italic>, <italic>min_af</italic>, <italic>min_length_inversions</italic>, <italic>range_filt_DEL_breakpoints</italic>) (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5B). However, these parameters can have an impact in some samples and, since perSVade only considers parameter values that can change the filtering in each sample (see “<xref rid="Sec8" ref-type="sec">Methods</xref>”), we consider that they should not be removed from the “optimize_parameters” module.</p>
      <p id="Par13">Our analysis also showed that the need for parameter optimization is different for each species. An illustrative example is the dramatic difference between <italic>C. neoformans</italic> and <italic>C. glabrata</italic> (Fig. <xref rid="Fig3" ref-type="fig">3</xref>A), which provides further insights on the role of various parameters. We found that the parameter choice is irrelevant in <italic>C. neoformans</italic>, while <italic>C. glabrata</italic> samples required specific optimization (Fig. <xref rid="Fig3" ref-type="fig">3</xref>A). We consider that this is unlikely driven by intrinsic genomic differences between the two species, as both have small (&lt;20Mb) haploid genomes with low content of simple repeats (0.98% in <italic>C. glabrata</italic> and 0.80% in <italic>C. neoformans</italic>) or low-complexity regions (0.16% in <italic>C. glabrata</italic> and 0.21% in <italic>C. neoformans</italic>). We hypothesized that <italic>C. glabrata</italic> samples have an excessively high coverage (&gt;300×, while <italic>C. neoformans</italic> samples have a 30×–40× coverage (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1)) which may constrain SV calling accuracy and require optimized parameters. To test this, we measured the accuracy of different parameter sets on the <italic>C. glabrata</italic> simulations with randomly downsampled coverages. As hypothesized, we find that most parameters are accurate on the <italic>C. glabrata</italic> with 30× coverage, while simulations with lower (10×) and higher (100×–500×) coverage require specific parameters (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S7). These results suggest that 30×–40× could be the optimal coverage for perSVade, which is reasonable given that <italic>gridss</italic> was developed for human datasets with similar coverage. However, there are still differences between the <italic>C. neoformans</italic> and the downsampled (30×) <italic>C. glabrata</italic> samples. For example, there are two parameter sets optimized for the high-coverage <italic>C. glabrata</italic> samples (both requiring at least 30 supporting reads per SV) which are accurate on all <italic>C. neoformans</italic> simulations (Fig. <xref rid="Fig3" ref-type="fig">3</xref>A), but not on the <italic>C. glabrata</italic> 30× (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S7). This suggests that there are different genomic features between these species (i.e., content of simple repeats) constraining the accuracy. These findings indicate that both technical variation (i.e., changes in coverage) and different genomic features underlie the observed differences in SV calling accuracy between species. Importantly, this also illustrates that perSVade can adapt to each sample and yield optimal results.</p>
      <p id="Par14">In summary, our results suggest that parameter optimization is necessary for maximum performance in each species and dataset and that there is a complex interplay between parameters.</p>
    </sec>
    <sec id="Sec5">
      <title>PerSVade’s parameter optimization improves the calling accuracy in datasets with defined sets of real SVs</title>
      <p id="Par15">The performance of SV calling on simulations may not be equivalent on real data, as SVs often appear around repetitive or low-complexity regions which hamper their detection [<xref ref-type="bibr" rid="CR24">24</xref>, <xref ref-type="bibr" rid="CR26">26</xref>–<xref ref-type="bibr" rid="CR28">28</xref>]. It is thus possible that we overestimated the real accuracy in our simulations. We partially addressed this with our analysis based on “realistic” simulations (“known” and “homologous”), where the inferred accuracy was lower (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) and potentially closer to the real one. To further validate the usage of perSVade for real SV calling, we tested it on datasets with known SVs, which were available for the human samples tested above (i.e., Fig. <xref rid="Fig3" ref-type="fig">3</xref>). We ran perSVade (using different simulation types) on the same three datasets, which had previously defined deletions and inversions (see “<xref rid="Sec8" ref-type="sec">Methods</xref>” for details).</p>
      <p id="Par16">We used these data to assess the accuracy of perSVade on real datasets, using different sets of parameters (optimal for each simulation and sample from the six species tested above, shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>). As expected, we found a lower <italic>F</italic>-value on real datasets (Fig. <xref rid="Fig4" ref-type="fig">4</xref>) as compared to the simulated genomes (Figs. <xref rid="Fig2" ref-type="fig">2</xref> and <xref rid="Fig3" ref-type="fig">3</xref>), with high precision and lower recall (Fig. <xref rid="Fig4" ref-type="fig">4</xref>B). In addition, parameter optimization improved the <italic>F</italic>-value modulating both precision and recall (Fig. <xref rid="Fig4" ref-type="fig">4</xref>B). However, the other results described in the simulations’ analysis (related to the performance of the pipeline and the universality of the parameters) are qualitatively equivalent in these real datasets (Fig. <xref rid="Fig4" ref-type="fig">4</xref>). Taken together, our analysis indicates that perSVade improves SV calling in real datasets (similarly to simulated genomes).<fig id="Fig4"><label>Fig. 4</label><caption><p>PerSVade’s parameter optimization improves the SV calling accuracy on datasets with known real SVs. <bold>A</bold> To test perSVade’s performance on real SVs, we measured how the parameters optimized for several simulations in different species (see Fig. <xref rid="Fig3" ref-type="fig">3</xref>) work on three human samples (CHM, HG002, and NA12878) with defined sets of real SVs. Each row indicates one of these different “training” parameters optimized for each sample and simulation type. In addition, the first row refers to the default parameters. Each column represents a sample with defined real SVs to be “tested.” The heatmap shows the <italic>F</italic>-value of each parameter set on each tested real sample (hereafter referred to as “testing instance”). In addition, we divide the testing instances into different groups (“default,” “different spp,” “same spp,” and “same sample”), which are relevant to understand the <bold>B</bold> panel. The “different spp” group refers to instances where the training and testing species were different. The “~” (same spp) refers to instances where the training and testing samples were different, but from the same species. Finally, the “*” (same sample) refers to instances where the training and testing samples were the same. <bold>B</bold> We summarized the data shown in <bold>A</bold> to compare how similar types of training parameters performed on each testing sample (each represented by a different color). Each row corresponds to a different accuracy measure. Each point corresponds to a testing instance (matching one cell from the heatmap in <bold>A</bold> in the bottom “<italic>F</italic>-value” plots). The “default” and “same sample” reflect testing instances where the training parameters were either un-optimized or optimized specifically for each sample, respectively. The “different spp” group includes instances where the training parameters were from a different, non-human, species. The “same spp” group shows testing instances with both training parameters and tested simulations from different samples of the same species. In addition, each column represents testing instances where the training parameters were based on “random” or “known” simulations, respectively. Note that the different groups of “training parameters” are equivalent to those shown in <bold>A</bold></p></caption><graphic xlink:href="13059_2022_2737_Fig4_HTML" id="MO4"/></fig></p>
    </sec>
  </sec>
  <sec id="Sec6">
    <title>Discussion</title>
    <p id="Par17">Despite large variation of genomic features across taxa, SV detection approaches in non-model organisms tend to rely on tools and parameters developed for other species (generally human). We hypothesized that this “one size fits all” approach is suboptimal, and likely biased towards certain species. To test this idea and overcome the problem, we developed perSVade, a flexible pipeline that automatizes the calling and filtering of structural variants (SV) across eukaryotes. PerSVade is a modular method to automatically adapt a state-of-the-art SV calling pipeline to any sample/species of interest. PerSVade uses simulations to choose the optimal filters for each sample and report the calling accuracy, which can inform about the reliability of the results. This will allow users to be aware of the accuracy in their datasets (i.e., perSVade may be inaccurate in some datasets due to low coverage, short read lengths, or excessive repeats in the genome) and make informed choices.</p>
    <p id="Par18">We validated the broad usability of perSVade by testing it on simulations and real datasets for a wide range of eukaryotes (with genomes of 12–3000 Mb and datasets including 10<sup>7</sup>–10<sup>9</sup> reads). We found that there is a significant computational burden related to parameter optimization, which may hinder its usage on large genomes. This means that perSVade may be particularly cost-effective for small genomes (i.e., &lt;200 Mb). However, the chosen settings will likely depend on the available resources, and some users may consider that the resources spent (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S2) are worth it given that parameter optimization yields improved accuracy (see below).</p>
    <p id="Par19">This testing also revealed that, as we hypothesized, parameter optimization improves the calling accuracy on both simulations and datasets with real, previously defined SVs. We found that the optimization mostly improves the recall rather than precision (which is generally high regardless of the used parameters). However, there are some exceptions (mostly in the testing on real SVs), suggesting that optimization can be necessary for reaching both high recall and precision in some samples. In addition, perSVade’s optimization yielded unique parameter sets for each sample, which were often inaccurate on other datasets. This means that there is no universal set of parameters that work well for all samples, which justifies the need for parameter optimization and a tool like perSVade to automate such a task. Conversely, we found some trends that can be useful to skip parameter optimization in some cases. For instance, parameter sets were often accurate across datasets of the same species (which could be due to differences in coverage and/or intrinsic genomic features). In addition, parameters resulting from “random” simulations performed well in more realistic (“known” and “homologous”) simulations as well as in real SV datasets of the same species, indicating that they can be used for maximum performance. Based on these findings, we propose the following recommendations for a cost-effective usage of perSVade:</p>
    <p id="Par20">
      <list list-type="bullet">
        <list-item>
          <p id="Par21">For SV calling on many datasets of one species with similar properties (similar coverage, read length, and insert size), run perSVade using “random” simulations on one sample, and use the optimized parameters for the other samples (skipping optimization). The reported calling accuracy may be overestimated since the simulations are not realistic, but the chosen parameters are expected to be optimal. This strategy may be particularly suited to large genomes, where users would avoid the computational burden of optimizing parameters for each sample.</p>
        </list-item>
        <list-item>
          <p id="Par22">For approximating the real SV calling accuracy, run perSVade on realistic simulations (“homologous” or “known”), which may report an accuracy that is closer to the real one.</p>
        </list-item>
        <list-item>
          <p id="Par23">For SV calling on large datasets, consider the following options to speed up the process. First, rationally design the parameters (based on parameters optimized for similar samples (see first point) and/or the benchmarking shown in this work) instead of inferring them with the “optimize_parameters” module for every new sample. Second, skip marking duplicates in read alignment, which can be very costly. Third, limit the simulations to a subset of chromosomes in the “optimize_parameters” module. Fourth, randomly downsample your reads (i.e., to 30×), which may improve both performance and accuracy (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S7).</p>
        </list-item>
      </list>
    </p>
    <p id="Par24">We note that perSVade is not a fundamentally new algorithm for SV detection but rather a pipeline implementing existing algorithms. This is why we did not compare it with other such methods (like <italic>manta</italic> [<xref ref-type="bibr" rid="CR20">20</xref>] or <italic>delly</italic> [<xref ref-type="bibr" rid="CR29">29</xref>]). The novelty of our pipeline lies in the automatic parameter selection feature, which is unique (to the best of our knowledge) for short read-based SV calling. We thus centered our testing on the accuracy of different parameters on SV calling. In fact, some recent approaches specifically developed for human genomes [<xref ref-type="bibr" rid="CR22">22</xref>, <xref ref-type="bibr" rid="CR30">30</xref>] may outcompete perSVade in human samples. However, such methods rely on previously defined sets of known SVs, which are not available in most taxa. We thus consider that our pipeline will be mostly useful in species without such specific methods available. For example, perSVade was used in a recent study to find SVs associated with antifungal drug resistance in the non-model yeast <italic>Candida glabrata</italic> [<xref ref-type="bibr" rid="CR9">9</xref>], which successfully validated all (8/8) the predicted variants using PCR.</p>
    <p id="Par25">An open question is whether a similar parameter optimization strategy can be applied to SV calling pipelines based on other algorithms. Several studies have shown that the filtering strategies (considering parameters like read coverage, variant quality and vcf “FILTER” tags) largely affect the calling accuracy in various algorithms [<xref ref-type="bibr" rid="CR23">23</xref>, <xref ref-type="bibr" rid="CR24">24</xref>]. This suggests that most SV callers could be boosted with a parameter optimization strategy such as the one described here for <italic>gridss</italic> and <italic>clove</italic>. However, due to high heterogeneity in SV callers, each algorithm may require a custom pipeline to deal with caller-specific parameters, outputs, and SV types.</p>
    <p id="Par26">Finally, perSVade also includes modules for CNV identification and SNP/INDEL calling, as a way to automate the finding of other broadly used genomic variants. In addition, it includes variant annotation features to ease the functional interpretation of these variants for downstream analyses. In summary, perSVade is a Swiss-knife-like framework to identify many types of variants with a few bash commands. We consider that this tool will be useful to understand the role SVs in different phenotypes and organisms, particularly those with no specific recommendations.</p>
  </sec>
  <sec id="Sec7">
    <title>Conclusions</title>
    <p id="Par27">
      <list list-type="bullet">
        <list-item>
          <p id="Par28">perSVade can identify SVs from short reads with sample-optimized parameters using a few bash commands.</p>
        </list-item>
        <list-item>
          <p id="Par29">perSVade can predict the SV calling accuracy on simulated genomes, which informs about the reliability of the calling process in an automatic manner.</p>
        </list-item>
        <list-item>
          <p id="Par30">perSVade’s parameter optimization improves the SV calling accuracy on simulated variants for five eukaryotic organisms, and on a reference dataset of validated human variants.</p>
        </list-item>
        <list-item>
          <p id="Par31">We found no universal set of “optimal” parameters, which underscores the need for species-specific parameter optimization for SV calling.</p>
        </list-item>
      </list>
    </p>
  </sec>
  <sec id="Sec8">
    <title>Methods</title>
    <sec id="Sec9">
      <title>PerSVade pipeline</title>
      <p id="Par32">PerSVade has several modules that can be executed independently (each with a single command) and/or combined to obtain different types of variant calls and functional annotations. The following sections describe how each of these modules work, and Fig. <xref rid="Fig1" ref-type="fig">1</xref> shows how they can be combined.</p>
      <sec id="Sec10">
        <title>Module “trim_reads_and_QC”</title>
        <p id="Par33">This module runs <italic>trimmomatic</italic> [<xref ref-type="bibr" rid="CR31">31</xref>] (v0.38) with default parameters for the input reads followed by <italic>fastqc</italic> [<xref ref-type="bibr" rid="CR32">32</xref>] (v0.11.9) on the trimmed reads. These trimmed reads may be used for downstream analysis after checking that they are reliable according to the output of <italic>fastqc</italic>.</p>
      </sec>
      <sec id="Sec11">
        <title>Module “align_reads”</title>
        <p id="Par34">This module runs <italic>bwa mem</italic> [<xref ref-type="bibr" rid="CR33">33</xref>] (v0.7.17) to align the short reads, generating a sorted .bam file (using <italic>samtools</italic> [<xref ref-type="bibr" rid="CR34">34</xref>] (v1.9) with marked duplicates (through <italic>GATK MarkDuplicatesSpark</italic> [<xref ref-type="bibr" rid="CR35">35</xref>] (v4.1.2.0)), that is the core input of several downstream modules (“call_SVs,” “optimize_parameters,” “call_CNVs,” “call_small_variants,” and “get_cov_genes”). If --<italic>skip_marking_duplicates</italic> is specified, this module skips the marking of duplicate reads (default behavior), which may be useful to speed up the process in large datasets.</p>
      </sec>
      <sec id="Sec12">
        <title>Module “call_SVs”</title>
        <p id="Par35">This module uses <italic>gridss</italic> [<xref ref-type="bibr" rid="CR21">21</xref>] to infer a list of breakpoints (two regions of the genome—two breakends—that are joined in the sample of interest and not in the reference genome) from discordant read pairs, split reads, and de novo assembly signatures. The breakpoints are summarized into SVs with <italic>clove</italic> [<xref ref-type="bibr" rid="CR25">25</xref>] (v 0.7). Importantly, this module (and others) runs <italic>clove</italic> without the default coverage filter to classify deletion-like (DEL-like) and tandem duplication-like (TAN-like) breakpoints into actual deletions and tandem duplications. Instead, perSVade “call_SVs” calculates the relative coverage of the regions spanned by such breakpoints (using <italic>mosdepth</italic> [<xref ref-type="bibr" rid="CR36">36</xref>]). This information is used to define the final set of deletions (DEL-like breakpoints with a coverage below a “max_rel_coverage_to_consider_del” threshold) and tandem duplications (TAN-like breakpoints with a coverage above a “min_rel_coverage_to_consider_dup” threshold). This setting allows a separate thresholding for the classification of DEL and TAN-like breakpoints, which is a novel feature of perSVade as compared to the current implementation of <italic>clove</italic>. Note that this module requires as an input a set of parameters to filter the <italic>gridss</italic> and <italic>clove</italic> outputs. These parameters may be inferred using the module “optimize_parameters” (described below) or rationally designed based on the benchmarking shown here (which can be useful to speed up the process). In addition, the user can use a set of default parameters, described in the section “<xref rid="Sec25" ref-type="sec">Filters used by perSVade</xref>” below. Note that these default parameters are inspired by previous filtering strategies from [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR37">37</xref>, <xref ref-type="bibr" rid="CR38">38</xref>].</p>
        <p id="Par36">The final output of this module is a set of files with the called variants (one file for each variant type), which belong to these types:</p>
        <p id="Par37">
          <list list-type="bullet">
            <list-item>
              <p id="Par38">Simple SVs: deletions, inversions, and tandem duplications (duplication of a region which gets inserted next to the affected region). This module outputs one .tab file for each of these SV types.</p>
            </list-item>
            <list-item>
              <p id="Par39">Translocations: whole-arm balanced translocations between two chromosomes, which can be inverted or not. There is one .tab file for translocations.</p>
            </list-item>
            <list-item>
              <p id="Par40">Insertions: a region of the genome is copied or cut and inserted into another region. Note that these are not de novo insertions (i.e., of DNA not present in the reference), which are actually not called in this module. There is one .tab file for insertions.</p>
            </list-item>
            <list-item>
              <p id="Par41">Unclassified SVs: One .tab file reports all the variants that are called by <italic>clove</italic> and cannot be assigned to any of the above SV types. These include <italic>clove</italic>’s unclassified breakpoints (which could be part of unresolved/unknown complex variants) and complex inverted SVs (which are non-standard SVs). These types of SVs are not included in the simulations performed by “optimized parameters” (see below), so that their accuracy is unknown. This is why we group them together into a single file.</p>
            </list-item>
          </list>
        </p>
        <p id="Par42">These separate files have a tabular format, where each variant is represented in a single line. In addition, the module “integrate_SV_CNV_calls” (see below) generates a single .vcf file with all the variants together, represented in a way that is focused on how each SV affects particular regions of the genome (useful for functional annotation). PerSVade’s github wiki [<xref ref-type="bibr" rid="CR39">39</xref>] includes further information on the output formats.</p>
        <p id="Par43">On another line, note that <italic>gridss</italic> does report de novo insertions, but the usage of short reads limits the calling to small events, which may miss many real de novo insertions. This is why we decided to not consider such variants as a trustful output in this module or the “optimize_parameters.” However, “call_SVs” saves the raw <italic>gridss</italic> output, and the unfiltered small de novo insertions can be obtained (although these should be treated with caution). In addition, note that these <italic>de novo</italic> insertions are different from non-template insertions happening around the breakends of actual SVs. Non-template insertions are likely the product of DNA repair after the rearrangement, and they are considered in the “integrate_SV_CNV_calls” (see below).</p>
      </sec>
      <sec id="Sec13">
        <title>Module “optimize_parameters”</title>
        <p id="Par44">To find optimal parameters for running “call_SVs” in a given input dataset, this module generates two template (haploid) simulated genomes (the number can be customized with <italic>--nsimulations</italic>) with up to 50 SVs of each of five types (insertions, translocations, deletions, inversion, and tandem duplications) with <italic>RSVsim</italic> [<xref ref-type="bibr" rid="CR40">40</xref>] (v1.28) and custom python (v3.6) scripts (which use <italic>biopython</italic> [<xref ref-type="bibr" rid="CR41">41</xref>] (v1.73)). By default, this template genome contains all chromosomes in the reference, but this can be customized with the <italic>--simulation_chromosomes</italic> argument to only simulate a subset of chromosomes and speed up the process. For each template genome, the module simulates reads with <italic>wgsim</italic> [<xref ref-type="bibr" rid="CR42">42</xref>] (v1.0) and <italic>seqtk</italic> [<xref ref-type="bibr" rid="CR43">43</xref>] (v1.3) with a read length, insert size, and coverage matching that of the input dataset. Note that the read simulation is performed according to a user-defined zygosity and ploidy (through the mandatory argument “<italic>--simulation_ploidies</italic>”) to resemble various organisms. For example, if “<italic>--simulation_ploidies diploid_hetero</italic>” is specified, this module simulates reads with heterozygous SVs by merging reads from both the reference genome and the simulated genome with SVs in a 1:1 manner. Importantly, <italic>--simulation_ploidies</italic> can have multiple values, so that for each template simulated genome and simulation ploidy this module generates unique simulated reads with the specified ploidy and zygosity. For example, if “--<italic>nsimulations 2 --simulation_ploidies diploid_hetero</italic>,<italic>diploid_homo</italic>” is set, this module generates four simulated reads. First it generates two template genomes, and for each of them it simulates reads with either heterozygous or homozygous SVs. Note that “<italic>--simulation_ploidies</italic>” can include any combination of “haploid,” “diploid_homo,” “diploid_hetero,” and “ref:&lt;nref&gt;_var:&lt;nvar&gt;” (where &lt;nref&gt; / &lt;nvar&gt; are the number of reference / alternative chromosomal copies, respectively). For example, setting “<italic>--simulation_ploidies</italic> ref:3_var:1” simulates reads assuming a tetraploid genome, where three chromosomes are like the reference and one has the SVs. This flexibility in setting ploidies / zygosity allows adapting this module to polyploid genomes or complex samples (i.e., pools of different samples of a population).</p>
        <p id="Par45">For each set of simulated reads (from one template genome with a specific ploidy and zygosity), perSVade “optimize_parameters” then tries several combinations (&gt;278,000,000,000 by default, although this can be user-defined with the argument <italic>--range_filtering_benchmark</italic>) of parameters to run <italic>gridss</italic> and <italic>clove</italic> and filter their outputs. The detailed explanation about the used filters can be found in the section “<xref rid="Sec25" ref-type="sec">Filters used by perSVade</xref>” below<bold>.</bold> To reduce the number of parameter combinations to be optimized, the pipeline discards parameter values that do not change breakpoint filtering as compared to an unconservative set of parameters. This means that the set of parameters to be optimized are limited to those that can be relevant, and these could be different in any run. One of these possible filters includes removing SVs that overlap repetitive elements, which may be inferred with the module “infer_repeats” (see below). This module selects the combination of filters that yield the highest <italic>F</italic>-value (the harmonic mean between precision and recall) for each SV type in each template simulated genome and ploidy/zygosity (see the section “<xref rid="Sec27" ref-type="sec">Comparing sets of SVs to calculate precision and recall</xref>” below for more information on how accuracy is calculated). These filters are optimized for each simulation, and thus may not be accurate on independent sets of SVs (due to overfitting). In order to reduce this effect, perSVade “optimize_parameters” selects a final set of “best parameters” that work well for all simulations, ploidies/zygosities, and SV types. This set of best parameters may be used in the “call_SVs” module. The accuracy (<italic>F</italic>-value, precision, recall) of these parameters on each simulation and SV type is reported in a tabular file, which serves to evaluate the expected calling accuracy. Note that we default the number of template simulated genomes to two in order to have a meaningful evaluation of overfitting (which likely requires more than one template genome). In addition, note that setting several simulation ploidies can be useful to select parameters that work well for different ploidies/zygosities.</p>
        <p id="Par46">All plots are generated using <italic>python</italic> (v3.6) and the libraries <italic>seaborn</italic> [<xref ref-type="bibr" rid="CR44">44</xref>] (v0.9.0) and <italic>matplotlib</italic> [<xref ref-type="bibr" rid="CR45">45</xref>] (v3.3.0). In addition, the <italic>python</italic> packages <italic>scipy</italic> [<xref ref-type="bibr" rid="CR46">46</xref>] (v1.4.1), <italic>scikit-learn</italic> [<xref ref-type="bibr" rid="CR47">47</xref>] (v0.21.3), <italic>psutil</italic> [<xref ref-type="bibr" rid="CR48">48</xref>] (v5.7.2), and <italic>pandas</italic> [<xref ref-type="bibr" rid="CR49">49</xref>] (v0.24.2) are used for scripting and various statistical calculations. On another line, <italic>pigz</italic> [<xref ref-type="bibr" rid="CR50">50</xref>] (v2.4) and <italic>gztool</italic> [<xref ref-type="bibr" rid="CR51">51</xref>] (v0.11.5) are used for fast compression steps. Finally, perSVade “optimize_parameters” uses <italic>picard</italic> [<xref ref-type="bibr" rid="CR52">52</xref>] (v2.18.26) to construct a sequence dictionary for the provided reference genome.</p>
        <p id="Par47">By default, the simulated events are placed randomly across the genome. However, real SVs often appear around repetitive elements or regions of the genome with high similarity (e.g., transposable elements insertions) [<xref ref-type="bibr" rid="CR24">24</xref>, <xref ref-type="bibr" rid="CR26">26</xref>–<xref ref-type="bibr" rid="CR28">28</xref>]. This means that random simulations may not be realistic, potentially leading to overestimated calling accuracy and a parameter selection inaccurate for real SVs [<xref ref-type="bibr" rid="CR24">24</xref>]. To circumvent this, perSVade “optimize_parameters” can generate more realistic simulations occurring around some user-defined regions (i.e., with previously known SVs or homologous regions) provided with the --<italic>regions_SVsimulations</italic> argument. Importantly, perSVade provides an automatic way to infer such regions through the modules “find_knownSVs_regions” and “find_homologous_regions” (described below). Beyond setting custom regions, users may want to tune the number of simulated SVs (through the <italic>--nvars</italic> argument) to be realistic in the samples/species of interest. In addition, note that the variant size is proportional to genome length, which ensures that long genomes have larger sections under SV.</p>
        <p id="Par48">Finally, note that Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1 includes a detailed graphical representation which can be useful to understand how this module works.</p>
      </sec>
      <sec id="Sec14">
        <title>Module “find_knownSVs_regions”</title>
        <p id="Par49">This module finds regions with known SVs using a provided list of sequencing datasets (with the option <italic>--close_shortReads_table</italic>) from species close to the reference genome. These datasets are processed with perSVade’s modules “trim_reads_and_QC,” “align_reads,” and “call_SVs” (using default parameters) to find SVs. This module then outputs a .bedpe file with the ±100bp regions around the breakends from these SVs. This .bedpe file can be input to the module “optimize_parameters” through the <italic>--regions_SVsimulations</italic> argument in order to perform “known” realistic simulations.</p>
      </sec>
      <sec id="Sec15">
        <title>Module “find_homologous_regions”</title>
        <p id="Par50">This module infers homologous regions by defining genomic windows (from the reference genome) of 500 bp as a query for a <italic>blastn</italic> [<xref ref-type="bibr" rid="CR53">53</xref>] (v2.10.0+) against the same reference genome. Hits with an e-value &lt;10<sup>−5</sup> that cover &gt;50% of the query regions are defined as pairs of homologous regions, which are written as a .bedpe file. This .bedpe file can be input to the module “optimize_parameters” through the <italic>--regions_SVsimulations</italic> argument in order to perform “homologous” realistic simulations.</p>
      </sec>
      <sec id="Sec16">
        <title>Module “call_CNVs”</title>
        <p id="Par51">Copy number variants (CNVs) are a type of SVs in which the genomic content varies (deletions or duplications). The “call_SVs” module (see previous section) identifies some CNVs (insertions, tandem duplications, deletions, and complex inverted SVs) but it can miss others (i.e., whole-chromosome duplications or regions with unknown types of rearrangements yielding CNVs [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR54">54</xref>]). PerSVade uses this “call_CNVs” module to call CNVs from read-depth alterations. For example, regions with 0× or 2× read depth as compared to the mean of the genome can be called deletions or duplications, respectively. A straightforward implementation of this concept to find CNVs is challenging because many genomic features drive variability in read depth independently of CNV [<xref ref-type="bibr" rid="CR55">55</xref>, <xref ref-type="bibr" rid="CR56">56</xref>]. In order to solve this, perSVade “call_CNVs” calculates the relative coverage for windows of the genome (using <italic>bedtools</italic> [<xref ref-type="bibr" rid="CR57">57</xref>] (v2.29.0) and <italic>mosdepth</italic> [<xref ref-type="bibr" rid="CR36">36</xref>] (v0.2.6)) and corrects the effect of the GC content, mappability (calculated with <italic>genmap</italic> [<xref ref-type="bibr" rid="CR58">58</xref>] (v1.3.0)), and distance to the telomere (using <italic>cylowess</italic> [<xref ref-type="bibr" rid="CR59">59</xref>] for nonparametric regression as in [<xref ref-type="bibr" rid="CR56">56</xref>]). Note that <italic>cylowess</italic> uses the library <italic>cython</italic> [<xref ref-type="bibr" rid="CR60">60</xref>] (v0.29.21). This corrected coverage is used by <italic>CONY</italic> [<xref ref-type="bibr" rid="CR61">61</xref>] (v1.0), <italic>AneuFinder</italic> [<xref ref-type="bibr" rid="CR62">62</xref>] (v1.18.0), and/or <italic>HMMcopy</italic> [<xref ref-type="bibr" rid="CR63">63</xref>] (v1.32.0) to call CNVs across the genome. Note that we modified the R code of <italic>CONY</italic> to be compatible with the input corrected coverage. The corrected code (used in the pipeline) is available in “scripts/CONY_package_debugged.R” from [<xref ref-type="bibr" rid="CR39">39</xref>]. PerSVade “call_CNVs” generates consensus CNV calls from the (up to) three programs taking always the most conservative copy number for each bin of the genome. For example, if the used programs disagree on the copy number of a region the closest to 1 will be taken as the best estimate. Note that the parameters obtained in the module “optimize_parameters” cannot be used for this module, since the SV and CNV calling methods are fundamentally different.</p>
      </sec>
      <sec id="Sec17">
        <title>Module “integrate_SV_CNV_calls”</title>
        <p id="Par52">This module generates a vcf file showing how SVs (called by the modules “call_SVs” and/or “call_CNVs”) alter specific genomic regions. We designed this vcf to be compatible with the Ensembl Variant Effect Predictor [<xref ref-type="bibr" rid="CR64">64</xref>] (VEP) tool for functional annotation, which can interpret tandem duplication (TDUP) duplication (DUP), deletion (DEL), and breakend-like (BND) events. This requires the decomposition of each variant into such TDUP, DUP, DEL, and BND events (one event in each row of the vcf). For example, each inversion is decomposed into two BND events (two rows in the vcf), one for each end of the inversion. The rationale behind this is that, in terms of functional annotation for inversions, we are interested in genomic features that are around the ends of the inversion, where the rearrangement happens. Each SV can thus be split across multiple rows when it affects more than one region of the genome. All rows related to the same SV are identified by the field variantID in INFO. On top of this, each row has a unique identifier indicated by the field ID. Some SVs generate non-template inserted sequences around the breakends (likely the product of DNA repair after a rearrangement), and each of these is represented in a single row. Note that each of the rows may indicate a region under CNV (with the SVTYPE in INFO as DEL, DUP, or TDUP), a region with some breakend (with the SVTYPE in INFO as BND) or a region with a non-template insertion (with the SVTYPE in INFO as insertionBND) around the breakend. Such non-template insertions are included here because they may modulate the impact of SVs on genomic features, and thus they are relevant for functional annotation. Note that this module also removes redundant calls between the CNVs identified with “call_SVs” (tandem duplications, deletions and insertions) and those derived from “call_CNVs.” To remove redundancy, this module skips any CNV called by “call_CNVs” that overlaps reciprocally (by at least an 80% of the region) a CNV called by “call_SVs” using <italic>bedmap</italic> from the <italic>bedops</italic> tool [<xref ref-type="bibr" rid="CR65">65</xref>] (v2.4.39). See the FAQ “What is in SV_and_CNV_variant_calling.vcf?” from [<xref ref-type="bibr" rid="CR39">39</xref>] for more information about the format of this .vcf file.</p>
      </sec>
      <sec id="Sec18">
        <title>Module “annotate_SVs”</title>
        <p id="Par53">This module runs the Ensembl Variant Effect Predictor [<xref ref-type="bibr" rid="CR64">64</xref>] (v100.2) on the vcf output of the module “integrate_SV_CNV_calls” to get the functional annotation of each SV. This requires a .gff file from the user.</p>
      </sec>
      <sec id="Sec19">
        <title>Module “call_small_variants”</title>
        <p id="Par54">This module performs small variant (SNPs and small IN/DELs) calling with either <italic>freebayes</italic> [<xref ref-type="bibr" rid="CR66">66</xref>] (v1.3.1), <italic>GATK HaplotypeCaller</italic> [<xref ref-type="bibr" rid="CR67">67</xref>] (v4.1.2.0), and/or <italic>bcftools call</italic> [<xref ref-type="bibr" rid="CR68">68</xref>] (v1.9) and integrates the results into .tab and .vcf files. The section “<xref rid="Sec26" ref-type="sec">Calling of small variants</xref>” below provides further information on how this calling is performed.</p>
      </sec>
      <sec id="Sec20">
        <title>Module “annotate_small_vars”</title>
        <p id="Par55">This module runs the Ensembl Variant Effect Predictor [<xref ref-type="bibr" rid="CR64">64</xref>] (v100.2) on the vcf output of the module “call_small_variants” to obtain the functional annotation of each variant. This requires a .gff file from the user.</p>
      </sec>
      <sec id="Sec21">
        <title>Module “get_cov_genes”</title>
        <p id="Par56">This module runs <italic>mosdepth</italic> [<xref ref-type="bibr" rid="CR36">36</xref>] (v0.2.6) to obtain the coverage for each gene, which requires a .gff file from the user.</p>
      </sec>
      <sec id="Sec22">
        <title>Module “infer_repeats”</title>
        <p id="Par57">This module annotates repetitive elements in a genome, which can be used for the modules “call_SVs,” “find_knownSVs_regions,” “integrate_SV_CNV_calls,” “optimize_parameters,” and “call_small_variants.” These repeats are inferred with RepeatModeler [<xref ref-type="bibr" rid="CR69">69</xref>] (v2.0.1) and RepeatMasker [<xref ref-type="bibr" rid="CR70">70</xref>] (v4.0.9). The user can input these repeats to several modules (with --repeats_file), which will have the following effects:</p>
        <p id="Par58">
          <list list-type="bullet">
            <list-item>
              <p id="Par59">If repeats are provided, “optimize_parameters” will assess whether removing SV calls overlapping repeats increases the overall accuracy. If so, the resulting optimized parameters will include a “filter_overlappingRepeats : True.” If you use these optimized parameters in “call_SVs,” any breakpoint overlapping repeats will be removed.</p>
            </list-item>
            <list-item>
              <p id="Par60">If repeats are provided, “call_SVs” may filter out SVs that overlap repeats if the SV filtering parameters include a “filter_overlappingRepeats : True.”</p>
            </list-item>
            <list-item>
              <p id="Par61">If repeats are provided, “find_known_SVs” will pass them to the “call_SVs” module.</p>
            </list-item>
            <list-item>
              <p id="Par62">If repeats are provided, “integrate_SV_CNV_calls” will add a field in the INFO which indicates whether the SVs overlap repeats.</p>
            </list-item>
            <list-item>
              <p id="Par63">If repeats are provided, “call_small_variants” will add a field in the tabular variant calling file which indicates whether the SVs overlap repeats.</p>
            </list-item>
          </list>
        </p>
        <p id="Par64">Alternatively, the user can specify “--repeats_file skip” to avoid the consideration of repeats in all these modules.</p>
      </sec>
    </sec>
    <sec id="Sec23">
      <title>Testing SV calling with perSVade on simulated structural variants</title>
      <p id="Par65">To test perSVade’s performance on different species, we ran it on paired-end WGS datasets for six eukaryotes (<italic>Candida glabrata</italic>, <italic>Candida albicans</italic>, <italic>Cryptococcus neoformans</italic>, <italic>Arabidopsis thaliana</italic>, <italic>Drosophila melanogaster</italic>, and <italic>Homo sapiens</italic>). To obtain a high number of SVs, we gathered three samples for each species with enough genetic divergence to the reference genome. For this, we first used an automatic pipeline to find these samples running the custom script “scripts/perSVade.py” from [<xref ref-type="bibr" rid="CR39">39</xref>] with the options <italic>--close_shortReads_table auto --n_close_samples 3 --nruns_per_sample 1 --target_taxID &lt;species_taxID&gt;</italic>. This used <italic>entrez-direct</italic> [<xref ref-type="bibr" rid="CR71">71</xref>] (v13.3), <italic>SRA Tools</italic> [<xref ref-type="bibr" rid="CR72">72</xref>] (v2.10.9), and <italic>ete3</italic> [<xref ref-type="bibr" rid="CR73">73</xref>] (v3.1.2) to query the SRA database [<xref ref-type="bibr" rid="CR74">74</xref>] and find three WGS datasets of close taxIDs (to each <italic>&lt;species_taxID&gt;</italic> according to the NCBI taxonomy species tree [<xref ref-type="bibr" rid="CR75">75</xref>]) with a coverage &gt;30× and &gt;40% of mapped reads to the reference genome. We could find three such datasets for <italic>C. albicans</italic>, <italic>C. neoformans</italic>, <italic>A. thaliana</italic>, and <italic>D. melanogaster</italic>, which included samples from the same species or genera as the target species, with &gt;65% of the reads mapping to the reference genome. We randomly downsampled the <italic>A. thaliana</italic> and <italic>D. melanogaster</italic> runs to 30× coverage (using <italic>samtools</italic> [<xref ref-type="bibr" rid="CR34">34</xref>] (v1.9)) for faster computation (using the option <italic>--max_coverage_sra_reads 30</italic>). For <italic>C. glabrata</italic>, we used datasets generated in our lab from three divergent strains (BG2, CST34, and M12, from [<xref ref-type="bibr" rid="CR9">9</xref>]). All these datasets are listed in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1. Finally, we tested perSVade on three <italic>H. sapiens</italic> datasets previously used for benchmarking SV callers [<xref ref-type="bibr" rid="CR23">23</xref>, <xref ref-type="bibr" rid="CR24">24</xref>]. These included NA12878 (a Genome in a Bottle (GIAB) cell line related to the Ceph family [<xref ref-type="bibr" rid="CR76">76</xref>, <xref ref-type="bibr" rid="CR77">77</xref>]), HG002 (another GIAB project with reads available at [<xref ref-type="bibr" rid="CR78">78</xref>]), and CHM1/CHM13 (two haploid cell lines sequenced independently [<xref ref-type="bibr" rid="CR79">79</xref>], for which we merged the raw reads to generate synthetic diploid data). Note that we chose testing datasets with various read lengths and coverages (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1) to evaluate how perSVade works on realistic diverse scenarios. The reference genomes were taken from the Candida Genome Database [<xref ref-type="bibr" rid="CR80">80</xref>] (version s02-m07-r35 for <italic>C. glabrata</italic> and “haplotype A” from version A22-s07-m01-r110 for <italic>C. albicans</italic>), GenBank [<xref ref-type="bibr" rid="CR81">81</xref>] (accession GCA_000149245.3 for <italic>C. neoformans</italic>, GCA_000001735.2 for <italic>A. thaliana</italic> and GCA_000001215.4 for <italic>D. melanogaster</italic>), and UCSC [<xref ref-type="bibr" rid="CR82">82</xref>] (the latest version of genome hg38 at 06/04/2021 for <italic>H. sapiens</italic>, keeping only chromosomes 1-22, X,Y and the mitochondrial DNA). In addition, we performed quality control of the reads with fastqc [<xref ref-type="bibr" rid="CR32">32</xref>] (v0.11.9) and trimming with <italic>trimmomatic</italic> [<xref ref-type="bibr" rid="CR31">31</xref>] (v0.38).</p>
      <p id="Par66">We ran the SV calling pipeline of perSVade (using the modules “align_reads,” “call_SVs,” and “integrate_SV_CNV_calls”) on all these datasets using either “default” or optimized parameters (based on “random,” “known,” or “homologous” simulations using the modules “optimize_parameters,” “find_homologous_regions,” and “find_knownSVs_regions”). Note that the default parameters were designed as a baseline to understand the need for parameter optimization. We thus pre-defined these parameters based on standard author recommendations (from previous filtering strategies designed by the <italic>gridss</italic> authors [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR37">37</xref>, <xref ref-type="bibr" rid="CR38">38</xref>]). By comparing the results of such parameters (designed based on previous usage) and the optimized ones, we could assess the gain in SV calling accuracy associated with parameter optimization. In addition, note that we used the module “infer_repeats” to find repetitive elements in each genome. These were provided to “optimize_parameters” to assess whether filtering out repeats improved SV calling accuracy. In addition, we simulated diploid heterozygous SVs for the diploid genomes (<italic>C. albicans</italic>, <italic>A. thaliana</italic>, <italic>D. melanogaster</italic>, and <italic>H. sapiens</italic>) and haploid SVs for the haploid genomes (<italic>C. glabrata</italic>, <italic>C. neoformans</italic>). Note that we decided to only simulate heterozygous variants in the diploid genomes to create the most challenging scenario for SV calling (since homozygous variants are expected to be easier to find due to higher coverage), as previously done [<xref ref-type="bibr" rid="CR24">24</xref>]. In addition, the output of the “infer_repeats” module was used to calculate the fraction of the genome with simple repeats or low-complexity regions of <italic>C. glabrata</italic> and <italic>C. neoformans.</italic> We used computational nodes in an LSF cluster (<ext-link ext-link-type="uri" xlink:href="https://www.ibm.com/support/pages/what-lsf-cluster">https://www.ibm.com/support/pages/what-lsf-cluster</ext-link>) with 16 cores and either 32 Gb (for <italic>C. glabrata</italic>, <italic>C. albicans</italic>, <italic>C. neoformans</italic>), 64 Gb (for <italic>A. thaliana</italic> and <italic>D. melanogaster</italic>), and 96 Gb (for <italic>H. sapiens</italic>) of RAM for the testing. We first ran the read alignment step (module “align_reads”) for all samples, and then used the resulting .bam files as inputs for the other perSVade modules. We calculated the resource consumption (running time and maximum RAM used) for each of these perSVade runs, thus ignoring the resources related to read alignment. Of note, perSVade was run with different parameters for the human datasets to avoid excessive resource consumption and match our computational infrastructure. First, we skipped the marking of duplicate reads on the .bam files (default behavior) with perSVade’s <italic>--skip_marking_duplicates</italic> option on the module “align_reads.” Second, we ran the simulations on a subset of the genome (only chromosomes 2, 7, 9, X, Y and mitochondrial), by using the <italic>--simulation_chromosomes</italic> argument of the “optimize_parameters” module. Third, we skipped the “homologous” simulations in human samples because we could not finish the inference of pairs of homologous regions (see previous section) due to excessive memory consumption. By running this inference on a few chromosomes, we realized that there are millions of such regions, generating excessively large files. Note that this strategy may be used in general to speed up parameter optimization.</p>
      <p id="Par67">Finally, we tested the accuracy of all the optimized parameters (for each sample / simulation) on the other samples / simulations using the script “testing/get_accuracy_parameters_on_sorted_bam.py” from [<xref ref-type="bibr" rid="CR39">39</xref>]. In addition, to test the impact of changing each parameter in isolation, we generated sets of parameters where only one parameter is changed to a non-default value. We then used this same script (“testing/get_accuracy_parameters_on_sorted_bam.py” from [<xref ref-type="bibr" rid="CR39">39</xref>]) to measure the accuracy of each parameter set on each sample / simulation. On another line, to assess whether the high coverage of <italic>C. glabrata</italic> samples (&gt;300×, see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1) constrained SV calling, we measured the accuracy of each parameter set (optimized for each species / simulations) on the <italic>C. glabrata</italic> simulations with varying coverage. For each simulation (based on a sample and a type of simulation (homologous / known / uniform)), we subsampled randomly the reads to get a coverage of 10×, 30×, 50×, 100×, 200×, or 300× using <italic>samtools</italic> [<xref ref-type="bibr" rid="CR34">34</xref>] and <italic>mosdepth</italic> [<xref ref-type="bibr" rid="CR36">36</xref>] on the aligned simulated reads. We then used our custom script “testing/get_accuracy_parameters_on_sorted_bam.py” from [<xref ref-type="bibr" rid="CR39">39</xref>] to test the SV calling accuracy on each downsampled simulation. The section “<xref rid="Sec27" ref-type="sec">Comparing sets of SVs to calculate precision and recall</xref>” below provides further information on how accuracy is calculated.</p>
    </sec>
    <sec id="Sec24">
      <title>Testing perSVade on real SVs</title>
      <p id="Par68">To validate the usage of perSVade on real data, we focused on public datasets with available short reads and independently defined sets of known SVs. We could find such SVs in the human samples (also used in the testing mentioned above), for which SV callsets of deletions or inversions exist (as done in [<xref ref-type="bibr" rid="CR24">24</xref>]). We defined as “true SVs” the deletions of NA12878 (defined in [<xref ref-type="bibr" rid="CR77">77</xref>], available at [<xref ref-type="bibr" rid="CR83">83</xref>]), the high-confidence deletions of HG002 (available at [<xref ref-type="bibr" rid="CR84">84</xref>]) and the union of all deletions and inversions found in either CHM1 or CHM13 lines (defined by [<xref ref-type="bibr" rid="CR79">79</xref>], available at [<xref ref-type="bibr" rid="CR85">85</xref>]).</p>
      <p id="Par69">We then tested the accuracy of the “training” parameters optimized for each sample and simulation of the six eukaryotes mentioned above (in the section “<xref rid="Sec23" ref-type="sec">Testing SV calling with perSVade on simulated structural variants</xref>”) on these human samples using our custom script “testing/get_accuracy_parameters_on_sorted_bam.py” from [<xref ref-type="bibr" rid="CR39">39</xref>]. In addition, we removed SVs overlapping simple repeats or low-complexity regions (as inferred by the module “infer_repeats”) from this analysis. Note that each of these “true SV” datasets were defined on different reference genomes: the NA12878 and HG002 callsets were based on hg19 and the CHM1/CHM13 was relative to hg38. This means that we could not directly use the optimized training parameters from the human samples from the previous section, since they were all based on hg38. We thus ran perSVade’s SV calling and parameter optimization modules on NA12878 and HG002 using the hg19 reference, and used the resulting optimum parameters as “training” for these two samples. For this, we obtained the latest version of hg19 and hg38 genomes at 06/04/2021 from UCSC [<xref ref-type="bibr" rid="CR82">82</xref>], keeping only chromosomes 1-22, X,Y, and the mitochondrial DNA.</p>
    </sec>
    <sec id="Sec25">
      <title>Filters used by perSVade</title>
      <p id="Par70">These are the filters used in the module “call_SVs,” whose values may vary across parameter optimization in perSVade (note that most of the <italic>gridss</italic> filters were inspired by the filtering strategy used to generate the somatic call set from [<xref ref-type="bibr" rid="CR21">21</xref>, <xref ref-type="bibr" rid="CR37">37</xref>] and the original <italic>gridss</italic> paper [<xref ref-type="bibr" rid="CR37">37</xref>, <xref ref-type="bibr" rid="CR38">38</xref>])):</p>
      <p id="Par71">
        <list list-type="bullet">
          <list-item>
            <p id="Par72">min_Nfragments: Minimum number of reads supporting a breakend in <italic>gridss</italic> to be accepted (default is 5).</p>
          </list-item>
          <list-item>
            <p id="Par73">min_af: Minimum variant allele frequency of a breakend in <italic>gridss</italic> to be accepted (default is 0.25).</p>
          </list-item>
          <list-item>
            <p id="Par74">min_af_EitherSmallOrLargeEvent: Minimum variant allele frequency (VAF) of a breakend in <italic>gridss</italic> to be accepted, regardless of how VAF is calculated (default is 0.25). Note that VAF is calculated differently depending on if the breakend spans a region longer than the insert size or not (see <ext-link ext-link-type="uri" xlink:href="https://github.com/PapenfussLab/gridss/issues/234#issuecomment-521489484">https://github.com/PapenfussLab/gridss/issues/234#issuecomment-521489484</ext-link>). We regularly (i.e., for the min_af filter) calculate a VAF assuming that the breakend is a small event (vaf_small) or a large event (vaf_large). If the length of the breakpoint is above a certain threshold, related to the insert size (“median insert size + median absolute deviation of the insert size”), perSVade sets VAF to be “vaf_large” and vice versa. Note that our distinction between small and large breakends could be error prone in some cases, and min_af_EitherSmallOrLargeEvent allows the filtering based on VAF independently of the size of the event. If min_af_EitherSmallOrLargeEvent is above 0, breakends that have both “vaf_small” and “vaf_large” below the set min_af_EitherSmallOrLargeEvent will be discarded.</p>
          </list-item>
          <list-item>
            <p id="Par75">min_QUAL: Minimum quality (QUAL field of the vcf file) of a breakend in <italic>gridss</italic> to be accepted (default is 0).</p>
          </list-item>
          <list-item>
            <p id="Par76">max_to_be_considered_small_event: Maximum length of a breakpoint in <italic>gridss</italic> to be considered a small event (default is 1000). Events shorter than this value are considered as “small events,” which are treated particularly by other filtering steps.</p>
          </list-item>
          <list-item>
            <p id="Par77">min_length_inversions: Minimum length of inversion-like breakends in <italic>gridss</italic> to be accepted (default is 40).</p>
          </list-item>
          <list-item>
            <p id="Par78">maximum_lenght_inexactHomology: Maximum length of the inexact homology region around a breakend in <italic>gridss</italic> to be accepted (default is 50). This filter is not applied to “small events,” as defined by “max_to_be_considered_small_event.”</p>
          </list-item>
          <list-item>
            <p id="Par79">maximum_microhomology: Maximum length of the exact homology (microhomology) region around a breakend in <italic>gridss</italic> to be accepted (default is 50).</p>
          </list-item>
          <list-item>
            <p id="Par80">maximum_strand_bias: Maximum strand bias of a breakend in <italic>gridss</italic> to be accepted (default is 0.99). This filter is only applied to “small events,” as defined by “max_to_be_considered_small_event.”</p>
          </list-item>
          <list-item>
            <p id="Par81">filter_noReadPairs: Discards <italic>gridss</italic> breakends without discordant read pair support (default is false). This filter is not applied to “small events,” as defined by “max_to_be_considered_small_event.”</p>
          </list-item>
          <list-item>
            <p id="Par82">filter_noSplitReads: Discards <italic>gridss</italic> breakends without split-read evidence (default is false). This filter is only applied to “small events,” as defined by “max_to_be_considered_small_event.”</p>
          </list-item>
          <list-item>
            <p id="Par83">filter_overlappingRepeats: Discards <italic>gridss</italic> breakends overlapping repetitive elements (default is false). This will only have an effect if you provide a repeats file as inferred by the module “infer_repeats.”</p>
          </list-item>
          <list-item>
            <p id="Par84">filter_polyGC: Discards <italic>gridss</italic> breakends with long inserted G or C sequences (&gt;15bp) (default is true).</p>
          </list-item>
          <list-item>
            <p id="Par85">wrong_FILTERtags: A set of values in the FILTER field of the <italic>gridss</italic> vcf which flag discarded breakends (default is [“NO_ASSEMBLY”]).</p>
          </list-item>
          <list-item>
            <p id="Par86">range_filt_DEL_breakpoints: A range of lengths in which DEL-like breakends (as defined by <italic>gridss</italic>) are discarded if the breakend has a region with inexact homology above 5bp (default is [0, 1]). For example, if set to [500, 1000], DEL-like breakends whose length is between 500 and 1000bp with an inexact homology sequence &gt;5 bp would be discarded.</p>
          </list-item>
          <list-item>
            <p id="Par87">dif_between_insert_and_del: The margin given for comparing the length of the inserted sequence (len_seq) on a <italic>gridss</italic> DEL-like breakend and the length of the actual event (len_event) (default is 5). If len_seq &gt; (len_event - dif_between_insert_and_del), the breakend is filtered out. This filter is only applied to “small events,” as defined by “max_to_be_considered_small_event.”</p>
          </list-item>
          <list-item>
            <p id="Par88">max_rel_coverage_to_consider_del: The maximum relative coverage that a region spanning a DEL-like breakpoint (as defined by <italic>clove</italic>) can have to be classified as an actual deletion (default is 0.1). Note that the default is a conservative filter adapted to haploid genomes or homozygous variants.</p>
          </list-item>
          <list-item>
            <p id="Par89">min_rel_coverage_to_consider_dup: The minimum relative coverage that a region spanning a TAN-like breakpoint (as defined by <italic>clove</italic>) can have to be classified as an actual tandem duplication (default is 1.8). Note that the default is a conservative filter adapted to haploid genomes or homozygous variants.</p>
          </list-item>
        </list>
      </p>
      <p id="Par90">Note that all the breakpoints that have at least one breakend that does not pass the filters are discarded by perSVade.</p>
    </sec>
    <sec id="Sec26">
      <title>Calling of small variants</title>
      <p id="Par91">PerSVade’s small variant calling pipeline (module “call_small_variants”) uses three alternative methods (GATK Haplotype Caller (HC) [<xref ref-type="bibr" rid="CR67">67</xref>] (v4.1.2), freebayes (FB) [<xref ref-type="bibr" rid="CR66">66</xref>] (v1.3.1), and / or bcftools (BT) [<xref ref-type="bibr" rid="CR68">68</xref>] (v1.9)) to call and filter single-nucleotide polymorphisms (SNP) and small insertions/deletions (IN/DEL) in haploid or diploid configuration (specified with the <italic>-p</italic> option). The input is the bam file generated by the “align_reads” module. This module defines as high-confidence (PASS) variants those that are in positions with a read depth above the value provided with <italic>--min_coverage</italic>, with extra filters for HC and FB. For HC, it keeps as PASS variants those where (1) there are &lt;4 additional variants within 20 bases; (2) the mapping quality is &gt;40; (3) the confidence based on depth is &gt;2; (4) the phred-scaled <italic>p</italic>-value is &lt;60; (5) the MQRankSum is &gt;−12.5, and (6) the ReadPosRankSum is &gt;−8. For FB, perSVade “call_small_variants” keeps as PASS variants those where (1) quality is &gt; 1 or alternate allele observation count is &gt; 10, (2) strand balance probability of the alternate is &gt; 0, (3) number of observations in the reverse strand is &gt; 0, and (4) number of reads placed to the right/left of the allele are &gt; 1. Then, bcftools (v1.10) and custom python code are used to normalize and merge the variants called by each software into a consensus variant set, which includes only those variants called with high-confidence by <italic>N</italic> or more algorithms This results in one .vcf file with the high-confidence variants for each <italic>N</italic>. Note that this .vcf file only keeps variants for which the fraction of reads covering the alternative allele is above the value provided with <italic>--min_AF</italic> (which may be 0.9 for haploids or 0.25 for diploids). For diploid calls, it defines the genotype with the strongest support (the one called by most programs). In addition, the quality of each variant is calculated from the mean of the three algorithms. Beyond the filtered variant calls, this module writes a tabular file with all the raw variants with various metadata columns (i.e., the programs that called the variant), which can be used to apply a custom filtering of the variants.</p>
    </sec>
    <sec id="Sec27">
      <title>Comparing sets of SVs to calculate precision and recall</title>
      <p id="Par92">To measure accuracy in different sets of “called SVs” (in perSVade’s simulations and also the testing of the pipeline (related to Figs. <xref rid="Fig2" ref-type="fig">2</xref>, <xref rid="Fig3" ref-type="fig">3</xref>, and <xref rid="Fig4" ref-type="fig">4</xref> and Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S1, S3, S4, S5, S6, S7)), we compared them against the corresponding sets of “known SVs” and calculated the following estimates:</p>
      <p id="Par93">
        <disp-formula id="Equa">
          <alternatives>
            <tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm{Precision}=\mathrm{TP}/\left(\mathrm{TP}+\mathrm{FP}\right)$$\end{document}</tex-math>
            <mml:math id="M2" display="block">
              <mml:mrow>
                <mml:mi mathvariant="normal">Precision</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:mi mathvariant="normal">TP</mml:mi>
                <mml:mo stretchy="false">/</mml:mo>
                <mml:mfenced close=")" open="(">
                  <mml:mi mathvariant="normal">TP</mml:mi>
                  <mml:mo>+</mml:mo>
                  <mml:mi mathvariant="normal">FP</mml:mi>
                </mml:mfenced>
              </mml:mrow>
            </mml:math>
            <graphic xlink:href="13059_2022_2737_Article_Equa.gif" position="anchor"/>
          </alternatives>
        </disp-formula>
        <disp-formula id="Equb">
          <alternatives>
            <tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm{Recall}=\mathrm{TP}/\left(\mathrm{TP}+\mathrm{FN}\right)$$\end{document}</tex-math>
            <mml:math id="M4" display="block">
              <mml:mrow>
                <mml:mi mathvariant="normal">Recall</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:mi mathvariant="normal">TP</mml:mi>
                <mml:mo stretchy="false">/</mml:mo>
                <mml:mfenced close=")" open="(">
                  <mml:mi mathvariant="normal">TP</mml:mi>
                  <mml:mo>+</mml:mo>
                  <mml:mi mathvariant="normal">FN</mml:mi>
                </mml:mfenced>
              </mml:mrow>
            </mml:math>
            <graphic xlink:href="13059_2022_2737_Article_Equb.gif" position="anchor"/>
          </alternatives>
        </disp-formula>
        <disp-formula id="Equc">
          <alternatives>
            <tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$F \text{-} \mathrm{value}=\left(2\times \mathrm{precision}\times \mathrm{recall}\right)/\left(\mathrm{precision}+\mathrm{recall}\right)$$\end{document}</tex-math>
            <mml:math id="M6" display="block">
              <mml:mrow>
                <mml:mi>F</mml:mi>
                <mml:mtext>-</mml:mtext>
                <mml:mi mathvariant="normal">value</mml:mi>
                <mml:mo>=</mml:mo>
                <mml:mfenced close=")" open="(">
                  <mml:mn>2</mml:mn>
                  <mml:mo>×</mml:mo>
                  <mml:mi mathvariant="normal">precision</mml:mi>
                  <mml:mo>×</mml:mo>
                  <mml:mi mathvariant="normal">recall</mml:mi>
                </mml:mfenced>
                <mml:mo stretchy="false">/</mml:mo>
                <mml:mfenced close=")" open="(">
                  <mml:mi mathvariant="normal">precision</mml:mi>
                  <mml:mo>+</mml:mo>
                  <mml:mi mathvariant="normal">recall</mml:mi>
                </mml:mfenced>
              </mml:mrow>
            </mml:math>
            <graphic xlink:href="13059_2022_2737_Article_Equc.gif" position="anchor"/>
          </alternatives>
        </disp-formula>
      </p>
      <p id="Par94">where true positives (TP) are those in the “called SVs” that match at least one variant from the “known SVs,” false positives (FP) are those in the “called SVs” that do not match any from the “known SVs,” and false negatives (FN) are those in the “known SVs” that are not matched by any variant from the “called SVs.” We define that two SVs are “matching” using a different approach for each type of SV:</p>
      <p id="Par95">
        <list list-type="bullet">
          <list-item>
            <p id="Par96">Inversions, tandem duplications, and deletions: both SVs are in the same chromosome, their altered regions are overlapping by 75% and their breakends are &lt;50bp apart.</p>
          </list-item>
          <list-item>
            <p id="Par97">Insertions: both SVs have the same origin and destination chromosomes and are both either cut-and-paste or copy-and-paste. In addition, the regions of the origin chromosome are overlapping by 75% and the breakends are &lt;50bp apart. Finally, the starts of the destination chromosomes (insertion sites) in both SVs are &lt;50bp apart.</p>
          </list-item>
          <list-item>
            <p id="Par98">Translocations: both SVs have the same origin and destination chromosomes and are both either inverted or not. In addition, the breakpoint positions in both SVs are &lt;50bp apart.</p>
          </list-item>
        </list>
      </p>
      <p id="Par99">In addition, we calculated “integrated” precision and recall measures (related to Figs. <xref rid="Fig3" ref-type="fig">3</xref> and <xref rid="Fig4" ref-type="fig">4</xref> and Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S6) merging all the variants together into single sets of “called SVs” and “known SVs.” We used custom python (v3.6) code and <italic>bedmap</italic> from the <italic>bedops</italic> tool [<xref ref-type="bibr" rid="CR65">65</xref>] (v2.4.39) to calculate all these overlaps. See the section “<xref rid="Sec9" ref-type="sec">PerSVade pipeline</xref>” above for further information on the meaning of each type of SV.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Information</title>
    <sec id="Sec28">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13059_2022_2737_MOESM1_ESM.pdf">
            <caption>
              <p>Additional file 1: Figure S1. Detailed workflow of the ‘optimize_parameters’ module. Figure S2. PerSVade’s parameter optimization requires extra resources. Figure S3. PerSVade’s parameter optimization improves the recall of SVs. Figure S4. Global vs SV type-specific parameter optimization. Figure S5. Each sample yields a different set of optimum parameters. Figure S6. PerSVade’s parameters optimization mostly changes the recall of SVs in simulations. Figure S7. Coverage constrains SV calling accuracy in <italic>C. glabrata</italic> simulations. Table S1. Datasets used for the testing in simulations in <italic>C. glabrata</italic>, <italic>C. albicans, C. neoformans, A. thaliana</italic> and <italic>D. melanogaster</italic>.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="13059_2022_2737_MOESM2_ESM.docx">
            <caption>
              <p>Additional file 2. Review history.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors thank Cinta Pegueroles and Marina Lleal for the useful discussions key in the building of perSVade. In addition, we want to thank Hrant Hovhannisyan, Valentina del Olmo, Diego Fuentes, Anna Vlasova, Maria Artigues, Matteo Schiavinato, and Marina Marcet for beta-testing the pipeline and providing us with useful feedback.</p>
    <sec id="FPar1">
      <title>Review history</title>
      <p id="Par100">The review history is available as Additional file <xref rid="MOESM2" ref-type="media">2</xref>.</p>
    </sec>
    <sec id="FPar2">
      <title>Peer review information</title>
      <p id="Par101">Kevin Pang was the primary editor of this article and managed its editorial process and peer review in collaboration with the rest of the editorial team</p>
    </sec>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>MAST wrote the code and performed all bioinformatic analysis. MAST and TG conceived the study, interpreted the results, and wrote the manuscript. TG supervised the project and provided resources. Both authors read and approved the final manuscript.</p>
    <sec id="FPar3">
      <title>Authors’ information</title>
      <p id="Par102">Twitter handles: @MikiSchikora (Miquel Àngel Schikora-Tamarit); @Toni_Gabaldon (Toni Gabaldón)</p>
    </sec>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>TG group acknowledges support from the Spanish Ministry of Science and Innovation for grant PGC2018-099921-B-I00, cofounded by European Regional Development Fund (ERDF); from the Catalan Research Agency (AGAUR) SGR423; from the European Union’s Horizon 2020 research and innovation program (ERC-2016-724173); from the Gordon and Betty Moore Foundation (Grant GBMF9742) and from the Instituto de Salud Carlos III (INB Grant PT17/0009/0023 - ISCIII-SGEFI/ERDF). MAST received a Predoctoral Fellowship from “Caixa” Foundation (LCF/BQ/DR19/11740023).</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>PerSVade is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabaldonlab/perSVade">https://github.com/Gabaldonlab/perSVade</ext-link> [<xref ref-type="bibr" rid="CR39">39</xref>] and can be installed using either conda environments or through a docker image containing the pipeline, available at <ext-link ext-link-type="uri" xlink:href="https://hub.docker.com/r/mikischikora/persvade">https://hub.docker.com/r/mikischikora/persvade</ext-link>. The github repository is released under an open source GNU General Public License (GPL). In addition, the code can be accessed in Zenodo through the DOI 10.5281/zenodo.6866529 [<xref ref-type="bibr" rid="CR86">86</xref>]. The github repository contains detailed examples on how to install and run perSVade using conda, docker, or singularity. We have tested perSVade on several Linux and Mac architectures, and the docker image may be run in any machine in a reproducible way. All the results shown in this paper were generated using the script <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabaldonlab/perSVade/blob/master/scripts/perSVade.py">https://github.com/Gabaldonlab/perSVade/blob/master/scripts/perSVade.py</ext-link> from version 1.0, which is a wrapper to execute several modules with a single command. Since perSVade is an actively used (and maintained) pipeline, we have created a few new releases since version 1.0, which include an improved documentation, more unit tests, and the implementation of an efficient debugging of inputs. Note that these changes do not affect the functionality of the modules as implemented in version 1.0. Hence, we recommend the usage of the latest version (version 1.02.7 at the time of publication), which is the one with the best documentation and usability. In addition, note that this one-liner wrapper is not recommended for broad usage. All the data used for testing perSVade was obtained from the SRA database or public ftp servers, and is listed in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1 and “<xref rid="Sec8" ref-type="sec">Methods</xref>.” All the code necessary to reproduce the results and plots shown in this paper is in <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabaldonlab/perSVade/tree/master/testing">https://github.com/Gabaldonlab/perSVade/tree/master/testing</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar4">
      <title>Ethics approval and consent to participate</title>
      <p id="Par103">Not applicable.</p>
    </notes>
    <notes id="FPar5">
      <title>Consent for publication</title>
      <p id="Par104">Not applicable.</p>
    </notes>
    <notes id="FPar6" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par105">The authors declare that they have no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Baker</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Structural variation: the genome’s hidden architecture</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <fpage>133</fpage>
        <lpage>137</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1858</pub-id>
        <?supplied-pmid 22290183?>
        <pub-id pub-id-type="pmid">22290183</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Feuk</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Carson</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Scherer</surname>
            <given-names>SW</given-names>
          </name>
        </person-group>
        <article-title>Structural variation in the human genome</article-title>
        <source>Nat Rev Genet</source>
        <year>2006</year>
        <volume>7</volume>
        <fpage>85</fpage>
        <lpage>97</lpage>
        <pub-id pub-id-type="doi">10.1038/nrg1767</pub-id>
        <?supplied-pmid 16418744?>
        <pub-id pub-id-type="pmid">16418744</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Garsed</surname>
            <given-names>DW</given-names>
          </name>
          <name>
            <surname>Marshall</surname>
            <given-names>OJ</given-names>
          </name>
          <name>
            <surname>Corbin</surname>
            <given-names>VDA</given-names>
          </name>
          <name>
            <surname>Hsu</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Di Stefano</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Schröder</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Feng</surname>
            <given-names>Z-P</given-names>
          </name>
          <name>
            <surname>Kim</surname>
            <given-names>BW</given-names>
          </name>
          <name>
            <surname>Kowarsky</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lansdell</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Brookwell</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Myklebost</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Meza-Zepeda</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Holloway</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Pedeutour</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Choo</surname>
            <given-names>KHA</given-names>
          </name>
          <name>
            <surname>Damore</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Deans</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Papenfuss</surname>
            <given-names>AT</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>DM</given-names>
          </name>
        </person-group>
        <article-title>The architecture and evolution of cancer neochromosomes</article-title>
        <source>Cancer Cell</source>
        <year>2014</year>
        <volume>26</volume>
        <fpage>653</fpage>
        <lpage>667</lpage>
        <pub-id pub-id-type="doi">10.1016/j.ccell.2014.09.010</pub-id>
        <?supplied-pmid 25517748?>
        <pub-id pub-id-type="pmid">25517748</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Stephens PJ, Greenman CD, Fu B, Yang F, Bignell GR, Mudie LJ, et al. Massive genomic rearrangement acquired in a single catastrophic event during cancer development. Cell. 2011;144. 10.1016/j.cell.2010.11.055.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wang</surname>
            <given-names>W-J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>L-Y</given-names>
          </name>
          <name>
            <surname>Cui</surname>
            <given-names>J-W</given-names>
          </name>
        </person-group>
        <article-title>Chromosome structural variation in tumorigenesis: mechanisms of formation and carcinogenesis</article-title>
        <source>Epigenetics Chromatin</source>
        <year>2020</year>
        <volume>13</volume>
        <fpage>1</fpage>
        <lpage>17</lpage>
        <pub-id pub-id-type="doi">10.1186/s13072-019-0325-2</pub-id>
        <pub-id pub-id-type="pmid">31918747</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <mixed-citation publication-type="other">Ibáñez P, Lesage S, Janin S, Lohmann E, Durif F, Destée A, et al. Alpha-synuclein gene rearrangements in dominantly inherited parkinsonism: frequency, phenotype, and mechanisms. Arch Neurol. 2009;66. 10.1001/archneurol.2008.555.</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weiss</surname>
            <given-names>LA</given-names>
          </name>
          <name>
            <surname>Shen</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Korn</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Arking</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>DT</given-names>
          </name>
          <name>
            <surname>Fossdal</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Saemundsen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Stefansson</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ferreira</surname>
            <given-names>MAR</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Platt</surname>
            <given-names>OS</given-names>
          </name>
          <name>
            <surname>Ruderfer</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Walsh</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Altshuler</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Chakravarti</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Tanzi</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Stefansson</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Santangelo</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Gusella</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Sklar</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>B-L</given-names>
          </name>
          <name>
            <surname>Daly</surname>
            <given-names>MJ</given-names>
          </name>
        </person-group>
        <article-title>Autism Consortium, Association between microdeletion and microduplication at 16p11.2 and autism</article-title>
        <source>N Engl J Med</source>
        <year>2008</year>
        <volume>358</volume>
        <fpage>667</fpage>
        <lpage>675</lpage>
        <pub-id pub-id-type="doi">10.1056/NEJMoa075974</pub-id>
        <?supplied-pmid 18184952?>
        <pub-id pub-id-type="pmid">18184952</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Todd RT, Selmecki A. Expandable and reversible copy number amplification drives rapid adaptation to antifungal drugs. Elife. 2020;9. 10.7554/eLife.58349.</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Ksiezopolska E, Schikora-Tamarit MÀ, Beyer R, Nunez-Rodriguez JC, Schüller C, Gabaldón T. Narrow mutational signatures drive acquisition of multidrug resistance in the fungal pathogen Candida glabrata. Curr Biol. 2021. 10.1016/j.cub.2021.09.084.</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sudmant</surname>
            <given-names>PH</given-names>
          </name>
          <name>
            <surname>Rausch</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Gardner</surname>
            <given-names>EJ</given-names>
          </name>
          <name>
            <surname>Handsaker</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Abyzov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Huddleston</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Ye</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Jun</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Fritz</surname>
            <given-names>MH-Y</given-names>
          </name>
          <name>
            <surname>Konkel</surname>
            <given-names>MK</given-names>
          </name>
          <name>
            <surname>Malhotra</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Stütz</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Shi</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Casale</surname>
            <given-names>FP</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Hormozdiari</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Dayama</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Malig</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Chaisson</surname>
            <given-names>MJP</given-names>
          </name>
          <name>
            <surname>Walter</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Meiers</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kashin</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Garrison</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Auton</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lam</surname>
            <given-names>HYK</given-names>
          </name>
          <name>
            <surname>Mu</surname>
            <given-names>XJ</given-names>
          </name>
          <name>
            <surname>Alkan</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Antaki</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Bae</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Cerveira</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Chines</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Chong</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Clarke</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Dal</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ding</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Emery</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Fan</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Gujral</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kahveci</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Kidd</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Kong</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Lameijer</surname>
            <given-names>E-W</given-names>
          </name>
          <name>
            <surname>McCarthy</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Flicek</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Gibbs</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Marth</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Mason</surname>
            <given-names>CE</given-names>
          </name>
          <name>
            <surname>Menelaou</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Muzny</surname>
            <given-names>DM</given-names>
          </name>
          <name>
            <surname>Nelson</surname>
            <given-names>BJ</given-names>
          </name>
          <name>
            <surname>Noor</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Parrish</surname>
            <given-names>NF</given-names>
          </name>
          <name>
            <surname>Pendleton</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Quitadamo</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Raeder</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Schadt</surname>
            <given-names>EE</given-names>
          </name>
          <name>
            <surname>Romanovitch</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Schlattl</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sebra</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Shabalin</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Untergasser</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Walker</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Yu</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zheng-Bradley</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Zichner</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sebat</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Batzer</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>McCarroll</surname>
            <given-names>SA</given-names>
          </name>
          <collab>1000 Genomes Project Consortium</collab>
          <name>
            <surname>Mills</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Gerstein</surname>
            <given-names>MB</given-names>
          </name>
          <name>
            <surname>Bashir</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Stegle</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Devine</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Eichler</surname>
            <given-names>EE</given-names>
          </name>
          <name>
            <surname>Korbel</surname>
            <given-names>JO</given-names>
          </name>
        </person-group>
        <article-title>An integrated map of structural variation in 2,504 human genomes</article-title>
        <source>Nature</source>
        <year>2015</year>
        <volume>526</volume>
        <fpage>75</fpage>
        <lpage>81</lpage>
        <pub-id pub-id-type="doi">10.1038/nature15394</pub-id>
        <?supplied-pmid 26432246?>
        <pub-id pub-id-type="pmid">26432246</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dennis</surname>
            <given-names>MY</given-names>
          </name>
          <name>
            <surname>Eichler</surname>
            <given-names>EE</given-names>
          </name>
        </person-group>
        <article-title>Human adaptation and evolution by segmental duplication</article-title>
        <source>Curr Opin Genet Dev</source>
        <year>2016</year>
        <volume>41</volume>
        <fpage>44</fpage>
        <lpage>52</lpage>
        <pub-id pub-id-type="doi">10.1016/j.gde.2016.08.001</pub-id>
        <?supplied-pmid 27584858?>
        <pub-id pub-id-type="pmid">27584858</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Stankiewicz P, Lupski JR. Structural variation in the human genome and its role in disease. Annu Rev Med. 2010;61. 10.1146/annurev-med-100708-204735.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weissensteiner</surname>
            <given-names>MH</given-names>
          </name>
          <name>
            <surname>Bunikis</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Catalán</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Francoijs</surname>
            <given-names>K-J</given-names>
          </name>
          <name>
            <surname>Knief</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Heim</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Peona</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Pophaly</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Sedlazeck</surname>
            <given-names>FJ</given-names>
          </name>
          <name>
            <surname>Suh</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Warmuth</surname>
            <given-names>VM</given-names>
          </name>
          <name>
            <surname>Wolf</surname>
            <given-names>JBW</given-names>
          </name>
        </person-group>
        <article-title>Discovery and population genomics of structural variation in a songbird genus</article-title>
        <source>Nat Commun</source>
        <year>2020</year>
        <volume>11</volume>
        <fpage>1</fpage>
        <lpage>11</lpage>
        <pub-id pub-id-type="doi">10.1038/s41467-020-17195-4</pub-id>
        <pub-id pub-id-type="pmid">31911652</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fuentes</surname>
            <given-names>RR</given-names>
          </name>
          <name>
            <surname>Chebotarov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Duitama</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>De la Hoz</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Mohiyuddin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wing</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>McNally</surname>
            <given-names>KL</given-names>
          </name>
          <name>
            <surname>Tatarinova</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Grigoriev</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Mauleon</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Alexandrov</surname>
            <given-names>N</given-names>
          </name>
        </person-group>
        <article-title>Structural variants in 3000 rice genomes</article-title>
        <source>Genome Res</source>
        <year>2019</year>
        <volume>29</volume>
        <fpage>870</fpage>
        <lpage>880</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.241240.118</pub-id>
        <?supplied-pmid 30992303?>
        <pub-id pub-id-type="pmid">30992303</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mahmoud</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gobet</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Cruz-Dávalos</surname>
            <given-names>DI</given-names>
          </name>
          <name>
            <surname>Mounier</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Dessimoz</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Sedlazeck</surname>
            <given-names>FJ</given-names>
          </name>
        </person-group>
        <article-title>Structural variant calling: the long and the short of it</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>1</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1828-7</pub-id>
        <pub-id pub-id-type="pmid">30606230</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bartenhagen</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Dugas</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Robust and exact structural variation detection with paired-end and soft-clipped alignments: SoftSV compared with eight algorithms</article-title>
        <source>Brief Bioinform</source>
        <year>2016</year>
        <volume>17</volume>
        <fpage>51</fpage>
        <lpage>62</lpage>
        <pub-id pub-id-type="doi">10.1093/bib/bbv028</pub-id>
        <?supplied-pmid 25998133?>
        <pub-id pub-id-type="pmid">25998133</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fan</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Abbott</surname>
            <given-names>TE</given-names>
          </name>
          <name>
            <surname>Larson</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>BreakDancer: identification of genomic structural variation from paired-end read mapping</article-title>
        <source>Curr Protoc Bioinformatics</source>
        <year>2014</year>
        <volume>45</volume>
        <fpage>15.6.1</fpage>
        <lpage>15.611</lpage>
        <pub-id pub-id-type="doi">10.1002/0471250953.bi1506s45</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zeitouni</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Boeva</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Janoueix-Lerosey</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Loeillet</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Legoix-né</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Nicolas</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Delattre</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Barillot</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>SVDetect: a tool to identify genomic structural variations from paired-end and mate-pair sequencing data</article-title>
        <source>Bioinformatics.</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>1895</fpage>
        <lpage>1896</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq293</pub-id>
        <?supplied-pmid 20639544?>
        <pub-id pub-id-type="pmid">20639544</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Layer</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Chiang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>IM</given-names>
          </name>
        </person-group>
        <article-title>LUMPY: a probabilistic framework for structural variant discovery</article-title>
        <source>Genome Biol</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>R84</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2014-15-6-r84</pub-id>
        <?supplied-pmid 24970577?>
        <pub-id pub-id-type="pmid">24970577</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Schulz-Trieglaff</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Shaw</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Barnes</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Schlesinger</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Källberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Kruglyak</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Saunders</surname>
            <given-names>CT</given-names>
          </name>
        </person-group>
        <article-title>Manta: rapid detection of structural variants and indels for germline and cancer sequencing applications</article-title>
        <source>Bioinformatics.</source>
        <year>2016</year>
        <volume>32</volume>
        <fpage>1220</fpage>
        <lpage>1222</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btv710</pub-id>
        <?supplied-pmid 26647377?>
        <pub-id pub-id-type="pmid">26647377</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cameron</surname>
            <given-names>DL</given-names>
          </name>
          <name>
            <surname>Baber</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Shale</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Valle-Inclan</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Besselink</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>van Hoeck</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Janssen</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Cuppen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Priestley</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Papenfuss</surname>
            <given-names>AT</given-names>
          </name>
        </person-group>
        <article-title>GRIDSS2: comprehensive characterisation of somatic structural variation using single breakend variants and structural variant phasing</article-title>
        <source>Genome Biol</source>
        <year>2021</year>
        <volume>22</volume>
        <fpage>1</fpage>
        <lpage>25</lpage>
        <pub-id pub-id-type="doi">10.1186/s13059-021-02423-x</pub-id>
        <pub-id pub-id-type="pmid">33397451</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <mixed-citation publication-type="other">Valls-Margarit J, Galván-Femenía I, Matías-Sánchez D, Blay N, Puiggròs M, Carreras A, et al. GCAT|Panel, a comprehensive structural variant haplotype map of the Iberian population from high-coverage whole-genome sequencing. bioRxiv. 2021:2021.07.20.453041.</mixed-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kosugi</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Momozawa</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Terao</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Kubo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kamatani</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>Comprehensive evaluation of structural variation detection algorithms for whole genome sequencing</article-title>
        <source>Genome Biol</source>
        <year>2019</year>
        <volume>20</volume>
        <fpage>117</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-019-1720-5</pub-id>
        <?supplied-pmid 31159850?>
        <pub-id pub-id-type="pmid">31159850</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cameron</surname>
            <given-names>DL</given-names>
          </name>
          <name>
            <surname>Di Stefano</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Papenfuss</surname>
            <given-names>AT</given-names>
          </name>
        </person-group>
        <article-title>Comprehensive evaluation and characterisation of short read general-purpose structural variant calling software</article-title>
        <source>Nat Commun</source>
        <year>2019</year>
        <volume>10</volume>
        <fpage>1</fpage>
        <lpage>11</lpage>
        <pub-id pub-id-type="doi">10.1038/s41467-019-11146-4</pub-id>
        <pub-id pub-id-type="pmid">30602773</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Schröder J, Wirawan A, Schmidt B, Papenfuss AT. CLOVE: classification of genomic fusions into structural variation events. BMC Bioinformatics. 2017;18:346.</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mills</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Walter</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Stewart</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Handsaker</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Alkan</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Abyzov</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Yoon</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Ye</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Cheetham</surname>
            <given-names>RK</given-names>
          </name>
          <name>
            <surname>Chinwalla</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Conrad</surname>
            <given-names>DF</given-names>
          </name>
          <name>
            <surname>Fu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Grubert</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Hajirasouliha</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Hormozdiari</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Iakoucheva</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Iqbal</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Kang</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kidd</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Konkel</surname>
            <given-names>MK</given-names>
          </name>
          <name>
            <surname>Korn</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Khurana</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Kural</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Lam</surname>
            <given-names>HYK</given-names>
          </name>
          <name>
            <surname>Leng</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>C-Y</given-names>
          </name>
          <name>
            <surname>Luo</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Mu</surname>
            <given-names>XJ</given-names>
          </name>
          <name>
            <surname>Nemesh</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Peckham</surname>
            <given-names>HE</given-names>
          </name>
          <name>
            <surname>Rausch</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Scally</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Shi</surname>
            <given-names>X</given-names>
          </name>
          <name>
            <surname>Stromberg</surname>
            <given-names>MP</given-names>
          </name>
          <name>
            <surname>Stütz</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Urban</surname>
            <given-names>AE</given-names>
          </name>
          <name>
            <surname>Walker</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Wu</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>ZD</given-names>
          </name>
          <name>
            <surname>Batzer</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Ding</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Marth</surname>
            <given-names>GT</given-names>
          </name>
          <name>
            <surname>McVean</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Sebat</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Snyder</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ye</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Eichler</surname>
            <given-names>EE</given-names>
          </name>
          <name>
            <surname>Gerstein</surname>
            <given-names>MB</given-names>
          </name>
          <name>
            <surname>Hurles</surname>
            <given-names>ME</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>McCarroll</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Korbel</surname>
            <given-names>JO</given-names>
          </name>
        </person-group>
        <article-title>1000 Genomes Project, mapping copy number variation by population-scale genome sequencing</article-title>
        <source>Nature.</source>
        <year>2011</year>
        <volume>470</volume>
        <fpage>59</fpage>
        <lpage>65</lpage>
        <pub-id pub-id-type="doi">10.1038/nature09708</pub-id>
        <?supplied-pmid 21293372?>
        <pub-id pub-id-type="pmid">21293372</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Pang AW, Migita O, Macdonald JR, Feuk L, Scherer SW. Mechanisms of formation of structural variation in a fully sequenced human genome. Hum Mutat. 2013;34. 10.1002/humu.22240.</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Todd SLS, Treangen J. Repetitive DNA and next-generation sequencing: computational challenges and solutions. Nat Rev Genet. 2011;13:36-46.</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <mixed-citation publication-type="other">Rausch T, Zichner T, Schlattl A, Stütz AM, Benes V, Korbel JO. DELLY: structural variant discovery by integrated paired-end and split-read analysis. Bioinformatics. 2012;28. 10.1093/bioinformatics/bts378.</mixed-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <mixed-citation publication-type="other">Liu Y, Huang Y, Wang G, Wang Y. A deep learning approach for filtering structural variants in short read sequencing data. Brief Bioinform. 2020;22. 10.1093/bib/bbaa370.</mixed-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bolger</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Lohse</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Usadel</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Trimmomatic: a flexible trimmer for Illumina sequence data</article-title>
        <source>Bioinformatics.</source>
        <year>2014</year>
        <volume>30</volume>
        <fpage>2114</fpage>
        <lpage>2120</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu170</pub-id>
        <?supplied-pmid 24695404?>
        <pub-id pub-id-type="pmid">24695404</pub-id>
      </element-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <mixed-citation publication-type="other">Babraham Bioinformatics - FastQC A quality control tool for high throughput sequence data. <ext-link ext-link-type="uri" xlink:href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc">https://www.bioinformatics.babraham.ac.uk/projects/fastqc</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <mixed-citation publication-type="other">Manual Reference Pages for bwa. <ext-link ext-link-type="uri" xlink:href="http://bio-bwa.sourceforge.net/bwa.shtml">http://bio-bwa.sourceforge.net/bwa.shtml</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Handsaker</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Wysoker</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Fennell</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Homer</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Marth</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Abecasis</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>1000 Genome Project Data Processing Subgroup, The Sequence Alignment/Map format and SAMtools</article-title>
        <source>Bioinformatics.</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>2078</fpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp352</pub-id>
        <?supplied-pmid 19505943?>
        <pub-id pub-id-type="pmid">19505943</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <mixed-citation publication-type="other">GATK MarkDuplicatesSpark. <ext-link ext-link-type="uri" xlink:href="https://gatk.broadinstitute.org/hc/en-us/articles/360036358972-MarkDuplicatesSpark">https://gatk.broadinstitute.org/hc/en-us/articles/360036358972-MarkDuplicatesSpark</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pedersen</surname>
            <given-names>BS</given-names>
          </name>
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
        </person-group>
        <article-title>Mosdepth: quick coverage calculation for genomes and exomes</article-title>
        <source>Bioinformatics.</source>
        <year>2018</year>
        <volume>34</volume>
        <fpage>867</fpage>
        <lpage>868</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btx699</pub-id>
        <?supplied-pmid 29096012?>
        <pub-id pub-id-type="pmid">29096012</pub-id>
      </element-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <mixed-citation publication-type="other">Cameron DL, Baber J, Shale C, Papenfuss AT, Valle-Inclan JE, Besselink N, et al. GRIDSS, PURPLE, LINX: Unscrambling the tumor genome via integrated analysis of structural variation and copy number. bioRxiv. 2019:781013.</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <mixed-citation publication-type="other">Cameron DL, Schröder J, Penington JS, Do H, Molania R, Dobrovic A, Speed TP, Papenfuss AT. GRIDSS: sensitive and specific genomic rearrangement detection using positional de Bruijn graph assembly. Genome Res. 2017;27:2050-60.</mixed-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <mixed-citation publication-type="other">Schikora-Tamarit MÀ, Gabaldón T. perSVade. Github. 2022. <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabaldonlab/perSVade">https://github.com/Gabaldonlab/perSVade</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bartenhagen</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Dugas</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>RSVSim: an R/Bioconductor package for the simulation of structural variations</article-title>
        <source>Bioinformatics.</source>
        <year>2013</year>
        <volume>29</volume>
        <fpage>1679</fpage>
        <lpage>1681</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt198</pub-id>
        <?supplied-pmid 23620362?>
        <pub-id pub-id-type="pmid">23620362</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cock</surname>
            <given-names>PJA</given-names>
          </name>
          <name>
            <surname>Antao</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Chang</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Chapman</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Cox</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Dalke</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Friedberg</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Hamelryck</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kauff</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Wilczynski</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>de Hoon</surname>
            <given-names>MJL</given-names>
          </name>
        </person-group>
        <article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title>
        <source>Bioinformatics.</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>1422</fpage>
        <lpage>1423</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp163</pub-id>
        <?supplied-pmid 19304878?>
        <pub-id pub-id-type="pmid">19304878</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <mixed-citation publication-type="other">Wgsim. <ext-link ext-link-type="uri" xlink:href="https://github.com/lh3/wgsim">https://github.com/lh3/wgsim</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <mixed-citation publication-type="other">Seqtk. <ext-link ext-link-type="uri" xlink:href="https://docs.csc.fi/apps/seqtk/">https://docs.csc.fi/apps/seqtk/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <mixed-citation publication-type="other">Seaborn 0.11.2 documentation. <ext-link ext-link-type="uri" xlink:href="https://seaborn.pydata.org/">https://seaborn.pydata.org/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">Matplotlib: visualization with Python. <ext-link ext-link-type="uri" xlink:href="https://matplotlib.org/">https://matplotlib.org/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Virtanen</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Gommers</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Oliphant</surname>
            <given-names>TE</given-names>
          </name>
          <name>
            <surname>Haberland</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Reddy</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Cournapeau</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Burovski</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Peterson</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Weckesser</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Bright</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>van der Walt</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Brett</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Wilson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Millman</surname>
            <given-names>KJ</given-names>
          </name>
          <name>
            <surname>Mayorov</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Nelson</surname>
            <given-names>ARJ</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Kern</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Larson</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Carey</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Polat</surname>
            <given-names>İ</given-names>
          </name>
          <name>
            <surname>Feng</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Moore</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>VanderPlas</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Laxalde</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Perktold</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Cimrman</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Henriksen</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Quintero</surname>
            <given-names>EA</given-names>
          </name>
          <name>
            <surname>Harris</surname>
            <given-names>CR</given-names>
          </name>
          <name>
            <surname>Archibald</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Ribeiro</surname>
            <given-names>AH</given-names>
          </name>
          <name>
            <surname>Pedregosa</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>van Mulbregt</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>SciPy 1.0: fundamental algorithms for scientific computing in Python</article-title>
        <source>Nat Methods</source>
        <year>2020</year>
        <volume>17</volume>
        <fpage>261</fpage>
        <lpage>272</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
        <?supplied-pmid 32015543?>
        <pub-id pub-id-type="pmid">32015543</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">API design for machine learning software: experiences from the scikit-learn project. <ext-link ext-link-type="uri" xlink:href="https://arxiv.org/abs/1309.0238">https://arxiv.org/abs/1309.0238</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <mixed-citation publication-type="other">Psutil: Cross-platform lib for process and system monitoring in Python. <ext-link ext-link-type="uri" xlink:href="https://github.com/giampaolo/psutil">https://github.com/giampaolo/psutil</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <mixed-citation publication-type="other">Pandas. <ext-link ext-link-type="uri" xlink:href="https://pandas.pydata.org/">https://pandas.pydata.org/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <mixed-citation publication-type="other">Pigz: Parallel gzip. <ext-link ext-link-type="uri" xlink:href="https://zlib.net/pigz/">https://zlib.net/pigz/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR51">
      <label>51.</label>
      <mixed-citation publication-type="other">Gztool. <ext-link ext-link-type="uri" xlink:href="https://github.com/circulosmeos/gztool">https://github.com/circulosmeos/gztool</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR52">
      <label>52.</label>
      <mixed-citation publication-type="other">Picard. Available at <ext-link ext-link-type="uri" xlink:href="http://broadinstitute.github.io/picard/">http://broadinstitute.github.io/picard/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR53">
      <label>53.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Camacho</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Coulouris</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Avagyan</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Ma</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Papadopoulos</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Bealer</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Madden</surname>
            <given-names>TL</given-names>
          </name>
        </person-group>
        <article-title>BLAST+: architecture and applications</article-title>
        <source>BMC Bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>1</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-421</pub-id>
        <pub-id pub-id-type="pmid">19118496</pub-id>
      </element-citation>
    </ref>
    <ref id="CR54">
      <label>54.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Newman</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hermetz</surname>
            <given-names>KE</given-names>
          </name>
          <name>
            <surname>Weckselblatt</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Katharine Rudd</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Next-generation sequencing of duplication CNVs reveals that most are tandem and some create fusion genes at breakpoints</article-title>
        <source>Am J Hum Genet</source>
        <year>2015</year>
        <volume>96</volume>
        <fpage>208</fpage>
        <pub-id pub-id-type="doi">10.1016/j.ajhg.2014.12.017</pub-id>
        <?supplied-pmid 25640679?>
        <pub-id pub-id-type="pmid">25640679</pub-id>
      </element-citation>
    </ref>
    <ref id="CR55">
      <label>55.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Benjamini</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Speed</surname>
            <given-names>TP</given-names>
          </name>
        </person-group>
        <article-title>Summarizing and correcting the GC content bias in high-throughput sequencing</article-title>
        <source>Nucleic Acids Res</source>
        <year>2012</year>
        <volume>40</volume>
        <fpage>e72</fpage>
        <pub-id pub-id-type="doi">10.1093/nar/gks001</pub-id>
        <?supplied-pmid 22323520?>
        <pub-id pub-id-type="pmid">22323520</pub-id>
      </element-citation>
    </ref>
    <ref id="CR56">
      <label>56.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Abbey</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Funt</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lurie-Weinberger</surname>
            <given-names>MN</given-names>
          </name>
          <name>
            <surname>Thompson</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Regev</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Berman</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>YMAP: a pipeline for visualization of copy number variation and loss of heterozygosity in eukaryotic pathogens</article-title>
        <source>Genome Med</source>
        <year>2014</year>
        <volume>6</volume>
        <fpage>1</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1186/gm520</pub-id>
        <pub-id pub-id-type="pmid">24433494</pub-id>
      </element-citation>
    </ref>
    <ref id="CR57">
      <label>57.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>IMH</surname>
          </name>
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
        </person-group>
        <article-title>BEDTools: a flexible suite of utilities for comparing genomic features</article-title>
        <source>Bioinformatics.</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>841</fpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq033</pub-id>
        <pub-id pub-id-type="pmid">20110278</pub-id>
      </element-citation>
    </ref>
    <ref id="CR58">
      <label>58.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pockrandt</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Alzamel</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Iliopoulos</surname>
            <given-names>CS</given-names>
          </name>
          <name>
            <surname>Reinert</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>GenMap: ultra-fast computation of genome mappability</article-title>
        <source>Bioinformatics.</source>
        <year>2020</year>
        <volume>36</volume>
        <fpage>3687</fpage>
        <lpage>3692</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btaa222</pub-id>
        <?supplied-pmid 32246826?>
        <pub-id pub-id-type="pmid">32246826</pub-id>
      </element-citation>
    </ref>
    <ref id="CR59">
      <label>59.</label>
      <mixed-citation publication-type="other">Cylowess. <ext-link ext-link-type="uri" xlink:href="https://github.com/livingsocial/cylowess">https://github.com/livingsocial/cylowess</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR60">
      <label>60.</label>
      <mixed-citation publication-type="other">Cython: The Best of Both Worlds. <ext-link ext-link-type="uri" xlink:href="https://ieeexplore.ieee.org/document/5582062">https://ieeexplore.ieee.org/document/5582062</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR61">
      <label>61.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wei</surname>
            <given-names>Y-C</given-names>
          </name>
          <name>
            <surname>Huang</surname>
            <given-names>G-H</given-names>
          </name>
        </person-group>
        <article-title>CONY: A Bayesian procedure for detecting copy number variations from sequencing read depths</article-title>
        <source>Sci Rep</source>
        <year>2020</year>
        <volume>10</volume>
        <fpage>1</fpage>
        <lpage>14</lpage>
        <pub-id pub-id-type="doi">10.1038/s41598-019-56847-4</pub-id>
        <pub-id pub-id-type="pmid">31913322</pub-id>
      </element-citation>
    </ref>
    <ref id="CR62">
      <label>62.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bakker</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Taudt</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Belderbos</surname>
            <given-names>ME</given-names>
          </name>
          <name>
            <surname>Porubsky</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Spierings</surname>
            <given-names>DCJ</given-names>
          </name>
          <name>
            <surname>de Jong</surname>
            <given-names>TV</given-names>
          </name>
          <name>
            <surname>Halsema</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Kazemier</surname>
            <given-names>HG</given-names>
          </name>
          <name>
            <surname>Hoekstra-Wakker</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Bradley</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>de Bont</surname>
            <given-names>ESJM</given-names>
          </name>
          <name>
            <surname>van den Berg</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Guryev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Lansdorp</surname>
            <given-names>PM</given-names>
          </name>
          <name>
            <surname>Colomé-Tatché</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Foijer</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>Single-cell sequencing reveals karyotype heterogeneity in murine and human malignancies</article-title>
        <source>Genome Biol</source>
        <year>2016</year>
        <volume>17</volume>
        <fpage>1</fpage>
        <lpage>15</lpage>
        <pub-id pub-id-type="doi">10.1186/s13059-016-0971-7</pub-id>
        <pub-id pub-id-type="pmid">26753840</pub-id>
      </element-citation>
    </ref>
    <ref id="CR63">
      <label>63.</label>
      <mixed-citation publication-type="other">Shah SP, Xuan X, DeLeeuw RJ, Khojasteh M, Lam WL, Ng R, et al. Integrating copy number polymorphisms into array CGH analysis using a robust HMM. Bioinformatics. 2006;22. 10.1093/bioinformatics/btl238.</mixed-citation>
    </ref>
    <ref id="CR64">
      <label>64.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>McLaren</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Gil</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Hunt</surname>
            <given-names>SE</given-names>
          </name>
          <name>
            <surname>Riat</surname>
            <given-names>HS</given-names>
          </name>
          <name>
            <surname>Ritchie</surname>
            <given-names>GRS</given-names>
          </name>
          <name>
            <surname>Thormann</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Flicek</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Cunningham</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>The Ensembl Variant Effect Predictor</article-title>
        <source>Genome Biol</source>
        <year>2016</year>
        <volume>17</volume>
        <fpage>122</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-016-0974-4</pub-id>
        <?supplied-pmid 27268795?>
        <pub-id pub-id-type="pmid">27268795</pub-id>
      </element-citation>
    </ref>
    <ref id="CR65">
      <label>65.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Neph</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Kuehn</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Reynolds</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Haugen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Thurman</surname>
            <given-names>RE</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>AK</given-names>
          </name>
          <name>
            <surname>Rynes</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Maurano</surname>
            <given-names>MT</given-names>
          </name>
          <name>
            <surname>Vierstra</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Thomas</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Sandstrom</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Humbert</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Stamatoyannopoulos</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>BEDOPS: high-performance genomic feature operations</article-title>
        <source>Bioinformatics.</source>
        <year>2012</year>
        <volume>28</volume>
        <fpage>1919</fpage>
        <lpage>1920</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts277</pub-id>
        <?supplied-pmid 22576172?>
        <pub-id pub-id-type="pmid">22576172</pub-id>
      </element-citation>
    </ref>
    <ref id="CR66">
      <label>66.</label>
      <mixed-citation publication-type="other">E. Garrison, G. Marth, Haplotype-based variant detection from short-read sequencing. 2012. (Available at <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/1207.3907">http://arxiv.org/abs/1207.3907</ext-link>).</mixed-citation>
    </ref>
    <ref id="CR67">
      <label>67.</label>
      <mixed-citation publication-type="other">Poplin R, Ruano-Rubio V, DePristo MA, Fennell TJ, Carneiro MO, Van der Auwera GA, et al. Scaling accurate genetic variant discovery to tens of thousands of samples. bioRxiv. 2018:201178.</mixed-citation>
    </ref>
    <ref id="CR68">
      <label>68.</label>
      <mixed-citation publication-type="other">The official development repository for BCFtools. <ext-link ext-link-type="uri" xlink:href="https://github.com/samtools/bcftools">https://github.com/samtools/bcftools</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR69">
      <label>69.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Flynn</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Hubley</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Goubert</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Rosen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Clark</surname>
            <given-names>AG</given-names>
          </name>
          <name>
            <surname>Feschotte</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Smit</surname>
            <given-names>AF</given-names>
          </name>
        </person-group>
        <article-title>RepeatModeler2 for automated genomic discovery of transposable element families</article-title>
        <source>Proc Natl Acad Sci U S A</source>
        <year>2020</year>
        <volume>117</volume>
        <fpage>9451</fpage>
        <lpage>9457</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1921046117</pub-id>
        <?supplied-pmid 32300014?>
        <pub-id pub-id-type="pmid">32300014</pub-id>
      </element-citation>
    </ref>
    <ref id="CR70">
      <label>70.</label>
      <mixed-citation publication-type="other">Chen N. Using RepeatMasker to identify repetitive elements in genomic sequences. Curr Protoc Bioinformatics. 2004;Chapter 4. 10.1002/0471250953.bi0410s05.</mixed-citation>
    </ref>
    <ref id="CR71">
      <label>71.</label>
      <mixed-citation publication-type="other">Entrez Direct: E-utilities on the Unix Command Line. <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/books/NBK179288/">https://www.ncbi.nlm.nih.gov/books/NBK179288/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR72">
      <label>72.</label>
      <mixed-citation publication-type="other">SRA Tools. <ext-link ext-link-type="uri" xlink:href="https://github.com/ncbi/sra-tools">https://github.com/ncbi/sra-tools</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR73">
      <label>73.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huerta-Cepas</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Serra</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Bork</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>ETE 3: reconstruction, analysis, and visualization of phylogenomic data</article-title>
        <source>Mol Biol Evol</source>
        <year>2016</year>
        <volume>33</volume>
        <fpage>1635</fpage>
        <pub-id pub-id-type="doi">10.1093/molbev/msw046</pub-id>
        <?supplied-pmid 26921390?>
        <pub-id pub-id-type="pmid">26921390</pub-id>
      </element-citation>
    </ref>
    <ref id="CR74">
      <label>74.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Leinonen</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Sugawara</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Shumway</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>The Sequence Read Archive</article-title>
        <source>Nucleic Acids Res</source>
        <year>2011</year>
        <volume>39</volume>
        <fpage>D19</fpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkq1019</pub-id>
        <?supplied-pmid 21062823?>
        <pub-id pub-id-type="pmid">21062823</pub-id>
      </element-citation>
    </ref>
    <ref id="CR75">
      <label>75.</label>
      <mixed-citation publication-type="other">Schoch CL, Ciufo S, Domrachev M, Hotton CL, Kannan S, Khovanskaya R, et al. a comprehensive update on curation, resources and tools. Database. 2020;2020. 10.1093/database/baaa062.</mixed-citation>
    </ref>
    <ref id="CR76">
      <label>76.</label>
      <mixed-citation publication-type="other">Eberle MA, Fritzilas E, Krusche P, Källberg M, Moore BL, Bekritsky MA, et al. A reference data set of 5.4 million phased human variants validated by genetic inheritance from sequencing a three-generation 17-member pedigree. Genome Res. 2017;27. 10.1101/gr.210500.116.</mixed-citation>
    </ref>
    <ref id="CR77">
      <label>77.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Parikh</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Mohiyuddin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Lam</surname>
            <given-names>HYK</given-names>
          </name>
          <name>
            <surname>Iyer</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Pratt</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Bartha</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Spies</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Losert</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Zook</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Salit</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>svclassify: a method to establish benchmark structural variant calls</article-title>
        <source>BMC Genomics</source>
        <year>2016</year>
        <volume>17</volume>
        <fpage>1</fpage>
        <lpage>16</lpage>
        <pub-id pub-id-type="doi">10.1186/s12864-016-2366-2</pub-id>
        <pub-id pub-id-type="pmid">26818753</pub-id>
      </element-citation>
    </ref>
    <ref id="CR78">
      <label>78.</label>
      <mixed-citation publication-type="other">HG002 sequencing data. <ext-link ext-link-type="uri" xlink:href="https://www.ftp://ftptrace.ncbi.nlm.nih.gov/giab/ftp/data/AshkenazimTrio/HG002_NA24385_son/NIST_HiSeq_HG002_Homogeneity-10953946/NHGRI_Illumina300X_AJtrio_novoalign_bams/HG002.hs37d5.60X.1.bam">ftp://ftptrace.ncbi.nlm.nih.gov/giab/ftp/data/AshkenazimTrio/HG002_NA24385_son/NIST_HiSeq_HG002_Homogeneity-10953946/NHGRI_Illumina300X_AJtrio_novoalign_bams/HG002.hs37d5.60X.1.bam</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR79">
      <label>79.</label>
      <mixed-citation publication-type="other">Huddleston J, Chaisson MJP, Steinberg KM, Warren W, Hoekzema K, Gordon D, et al. Discovery and genotyping of structural variation from long-read haploid genome sequence data. Genome Res. 2017;27. 10.1101/gr.214007.116.</mixed-citation>
    </ref>
    <ref id="CR80">
      <label>80.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Skrzypek</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Binkley</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Binkley</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Miyasato</surname>
            <given-names>SR</given-names>
          </name>
          <name>
            <surname>Simison</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Sherlock</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>The Candida Genome Database (CGD): incorporation of Assembly 22, systematic identifiers and visualization of high throughput sequencing data</article-title>
        <source>Nucleic Acids Res</source>
        <year>2017</year>
        <volume>45</volume>
        <fpage>D592</fpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkw924</pub-id>
        <?supplied-pmid 27738138?>
        <pub-id pub-id-type="pmid">27738138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR81">
      <label>81.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sayers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Cavanaugh</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Clark</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Ostell</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Pruitt</surname>
            <given-names>KD</given-names>
          </name>
          <name>
            <surname>Karsch-Mizrachi</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>GenBank</article-title>
        <source>Nucleic Acids Res</source>
        <year>2019</year>
        <volume>48</volume>
        <fpage>D84</fpage>
        <lpage>D86</lpage>
      </element-citation>
    </ref>
    <ref id="CR82">
      <label>82.</label>
      <mixed-citation publication-type="other">Lander ES, Linton LM, Birren B, Nusbaum C, Zody MC, Baldwin J, Devon K, et al. Initial sequencing and analysis of the human genome. Nature. 2001;409:860–921.</mixed-citation>
    </ref>
    <ref id="CR83">
      <label>83.</label>
      <mixed-citation publication-type="other">NA12878 deletions. <ext-link ext-link-type="uri" xlink:href="https://www.ftp://ftptrace.ncbi.nlm.nih.gov/giab/ftp/technical/svclassify_Manuscript/Supplementary_Information/Personalis_1000_Genomes_deduplicated_deletions.bed">ftp://ftptrace.ncbi.nlm.nih.gov/giab/ftp/technical/svclassify_Manuscript/Supplementary_Information/Personalis_1000_Genomes_deduplicated_deletions.bed</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR84">
      <label>84.</label>
      <mixed-citation publication-type="other">HG002 structural variants. <ext-link ext-link-type="uri" xlink:href="https://www.ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/data/AshkenazimTrio/analysis/NIST_SVs_Integration_v0.6/HG002_SVs_Tier1_v0.6.vcf.gz">ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/data/AshkenazimTrio/analysis/NIST_SVs_Integration_v0.6/HG002_SVs_Tier1_v0.6.vcf.gz</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR85">
      <label>85.</label>
      <mixed-citation publication-type="other">CHM1 and CHM13 structural variants. <ext-link ext-link-type="uri" xlink:href="http://eichlerlab.gs.washington.edu/publications/Huddleston2016/structural_variants/">http://eichlerlab.gs.washington.edu/publications/Huddleston2016/structural_variants/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR86">
      <label>86.</label>
      <mixed-citation publication-type="other">Schikora-Tamarit MÀ, Gabaldón T. perSVade v1.02.7. Zenodo. 2022. <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/6866529">https://zenodo.org/record/6866529</ext-link>.</mixed-citation>
    </ref>
  </ref-list>
</back>
