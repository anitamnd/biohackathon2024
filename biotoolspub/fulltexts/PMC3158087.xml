<?properties open-access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20031101//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">PLoS One</journal-id>
    <journal-id journal-id-type="iso-abbrev">PLoS ONE</journal-id>
    <journal-id journal-id-type="publisher-id">plos</journal-id>
    <journal-id journal-id-type="pmc">plosone</journal-id>
    <journal-title-group>
      <journal-title>PLoS ONE</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1932-6203</issn>
    <publisher>
      <publisher-name>Public Library of Science</publisher-name>
      <publisher-loc>San Francisco, USA</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3158087</article-id>
    <article-id pub-id-type="pmid">21876754</article-id>
    <article-id pub-id-type="publisher-id">10-PONE-RA-19146</article-id>
    <article-id pub-id-type="doi">10.1371/journal.pone.0023501</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research Article</subject>
      </subj-group>
      <subj-group subj-group-type="Discipline-v2">
        <subject>Biology</subject>
        <subj-group>
          <subject>Genomics</subject>
          <subj-group>
            <subject>Genome Analysis Tools</subject>
            <subj-group>
              <subject>Sequence Assembly Tools</subject>
            </subj-group>
          </subj-group>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Meraculous: <italic>De Novo</italic> Genome Assembly with Short Paired-End Reads</article-title>
      <alt-title alt-title-type="running-head">Meraculous</alt-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Chapman</surname>
          <given-names>Jarrod A.</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="corresp" rid="cor1">
          <sup>*</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ho</surname>
          <given-names>Isaac</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sunkara</surname>
          <given-names>Sirisha</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Luo</surname>
          <given-names>Shujun</given-names>
        </name>
        <xref ref-type="aff" rid="aff2">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Schroth</surname>
          <given-names>Gary P.</given-names>
        </name>
        <xref ref-type="aff" rid="aff3">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Rokhsar</surname>
          <given-names>Daniel S.</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff3">
          <sup>3</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="aff1">
      <label>1</label>
      <addr-line>U.S. Department of Energy Joint Genome Institute, Walnut Creek, California, United States of America</addr-line>
    </aff>
    <aff id="aff2">
      <label>2</label>
      <addr-line>Illumina, Inc., Hayward, California, United States of America</addr-line>
    </aff>
    <aff id="aff3">
      <label>3</label>
      <addr-line>Department of Molecular and Cell Biology, University of California, Berkeley, California, United States of America</addr-line>
    </aff>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Salzberg</surname>
          <given-names>Steven L.</given-names>
        </name>
        <role>Editor</role>
        <xref ref-type="aff" rid="edit1"/>
      </contrib>
    </contrib-group>
    <aff id="edit1">Johns Hopkins University, United States of America</aff>
    <author-notes>
      <corresp id="cor1">* E-mail: <email>jchapman@lbl.gov</email></corresp>
      <fn fn-type="con">
        <p>Conceived and designed the experiments: JAC DSR GPS. Performed the experiments: JAC IH SL SS. Analyzed the data: JAC IH SL SS. Contributed reagents/materials/analysis tools: GPS JC. Wrote the paper: JAC DSR IH.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2011</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>18</day>
      <month>8</month>
      <year>2011</year>
    </pub-date>
    <volume>6</volume>
    <issue>8</issue>
    <elocation-id>e23501</elocation-id>
    <history>
      <date date-type="received">
        <day>20</day>
        <month>5</month>
        <year>2010</year>
      </date>
      <date date-type="accepted">
        <day>19</day>
        <month>7</month>
        <year>2011</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>This is an open-access article, free of all copyright, and may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose. The work is made available under the Creative Commons CC0 public domain dedication.</copyright-statement>
      <copyright-year>2011</copyright-year>
      <license xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Public Domain declaration, which stipulates that, once placed in the public domain, this work may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose.</license-p>
      </license>
    </permissions>
    <abstract>
      <p>We describe a new algorithm, meraculous, for whole genome assembly of deep paired-end short reads, and apply it to the assembly of a dataset of paired 75-bp Illumina reads derived from the 15.4 megabase genome of the haploid yeast <italic>Pichia stipitis</italic>. More than 95% of the genome is recovered, with no errors; half the assembled sequence is in contigs longer than 101 kilobases and in scaffolds longer than 269 kilobases. Incorporating fosmid ends recovers entire chromosomes. Meraculous relies on an efficient and conservative traversal of the subgraph of the <italic>k</italic>-mer (deBruijn) graph of oligonucleotides with unique high quality extensions in the dataset, avoiding an explicit error correction step as used in other short-read assemblers. A novel memory-efficient hashing scheme is introduced. The resulting contigs are ordered and oriented using paired reads separated by ∼280 bp or ∼3.2 kbp, and many gaps between contigs can be closed using paired-end placements. Practical issues with the dataset are described, and prospects for assembling larger genomes are discussed.</p>
    </abstract>
    <counts>
      <page-count count="13"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="s1">
    <title>Introduction</title>
    <p>Massively parallel sequencing methods introduced over the past few years provide cost-effective, highly redundant sampling of genomes (reviewed in <xref rid="pone.0023501-Metzker1" ref-type="bibr">[1]</xref>). Pyrosequencing reads are approaching conventional dideoxy capillary sequences in their read length, providing a direct substitute for Sanger sequences <xref rid="pone.0023501-Margulies1" ref-type="bibr">[2]</xref>. While sequencing by synthesis produces substantially shorter reads, it has lower cost per base and higher throughput <xref rid="pone.0023501-Bentley1" ref-type="bibr">[3]</xref>. Such data has proven useful for re-sequencing variant genomes <xref rid="pone.0023501-Wheeler1" ref-type="bibr">[4]</xref>, <xref rid="pone.0023501-Bentley2" ref-type="bibr">[5]</xref>, <xref rid="pone.0023501-Smith1" ref-type="bibr">[6]</xref>, since short reads can be readily aligned to a reference, and the error rates are low enough that variation can be detected by consistent discrepancy of the aligned short reads versus the reference. The usefulness of such short-read datasets for <italic>de novo</italic> genome assembly has been the subject of increasing excitement (reviewed in <xref rid="pone.0023501-Pop1" ref-type="bibr">[7]</xref>
<xref rid="pone.0023501-Flicek1" ref-type="bibr">[8]</xref>), including recent assemblies of mammalian genomes <xref rid="pone.0023501-Simpson1" ref-type="bibr">[9]</xref>, <xref rid="pone.0023501-Li1" ref-type="bibr">[10]</xref>, <xref rid="pone.0023501-Li2" ref-type="bibr">[11]</xref>, <xref rid="pone.0023501-Schuster1" ref-type="bibr">[12]</xref>.</p>
    <p>Critical to the assembly of short (&lt;100 bp) reads is the use of paired-end sequencing protocols, which were first introduced in the early 1990s for use with Sanger sequencing <xref rid="pone.0023501-Edwards1" ref-type="bibr">[13]</xref>, <xref rid="pone.0023501-Edwards2" ref-type="bibr">[14]</xref>, <xref rid="pone.0023501-Roach1" ref-type="bibr">[15]</xref>. The importance of using a range of paired-end linkages to organize non-repetitive contigs into scaffolds by linking over repetitive regions was presciently emphasized by Weber and Myers <xref rid="pone.0023501-Weber1" ref-type="bibr">[16]</xref> in the context of human whole genome shotgun sequencing. This approach became the dominant paradigm for genome sequencing in the last decade. Pairing also allows the assembly of localized regions that are repetitive on the scale of the entire genome, since reads that derive from a particular localized copy of a repeat can often be inferred by the placement of their mate-pair reads in flanking unique sequences. With short reads the advantages of paired-end approaches are accentuated <xref rid="pone.0023501-Chaisson1" ref-type="bibr">[17]</xref>, and this strategy figures prominently in recently developed short-read assemblers (reviewed in ref. <xref rid="pone.0023501-Pop2" ref-type="bibr">[18]</xref>) including EULER-SR <xref rid="pone.0023501-Chaisson2" ref-type="bibr">[19]</xref>, Velvet <xref rid="pone.0023501-Zerbino1" ref-type="bibr">[20]</xref>, <xref rid="pone.0023501-Zerbino2" ref-type="bibr">[21]</xref>, ALLPATHS <xref rid="pone.0023501-Butler1" ref-type="bibr">[22]</xref>, <xref rid="pone.0023501-Maccallum1" ref-type="bibr">[23]</xref>, ABySS <xref rid="pone.0023501-Simpson1" ref-type="bibr">[9]</xref> and SOAPdenovo <xref rid="pone.0023501-Li2" ref-type="bibr">[11]</xref>. These assemblers all take advantage of the deBruijn graph representation of the assembly problem <xref rid="pone.0023501-Pevzner1" ref-type="bibr">[24]</xref>, in which reads are decomposed into overlapping words of length <italic>k</italic> (“<italic>k</italic>-mers”), where <italic>k</italic> is a fraction of the read length.</p>
    <p>Here we present a new assembler, called meraculous, that relies on an efficient and conservative traversal of a subgraph of the k-mer (deBruijn) graph of oligonucleotides with unique high quality extensions in the dataset. Unlike other short-read assemblers, meraculous avoids an explicit error correction step, instead relying on base quality scores. Meraculous also incorporates a novel low-memory hash structure to access the deBruijn graph, allowing a small memory footprint compared with other short-read assemblers. To test meraculous we also report here a deep Illumina dataset for a yeast genome.</p>
    <p><italic>Pichia stipitis</italic> CBS 6054 is a predominantly haploid yeast that efficiently produces ethanol from xylose and other polysaccharides <xref rid="pone.0023501-Jeffries1" ref-type="bibr">[25]</xref>. The <italic>P. stipitis</italic> genome (N = 8; GC = 41.1%) was previously sequenced and finished using Sanger methods <xref rid="pone.0023501-Jeffries2" ref-type="bibr">[26]</xref>, and has been used to assess the abilities of different next generation sequencing methods to detect variation <xref rid="pone.0023501-Smith1" ref-type="bibr">[6]</xref>. As a test set for meraculous, we report a dataset of three lanes of 75 bp paired-end shotgun for <italic>P. stipitis</italic> produced using Illumina sequencing-by-synthesis methods, with both short-range (∼280 bp) and medium-range (∼3.2 kbp) pairing data. These data provide a nominal 425-fold redundant sampling of the 15.4 million base pair (Mbp) genome. The meraculous assembly reconstructs 95% of the <italic>Pichia</italic> genome in long contigs and scaffolds without any errors. If we use the standard “N50” measure, half the genome is in contigs longer than 101 kbp and scaffolds longer than 269 kbp. Adding a modest number of fosmid ends recovered entire chromosomes. Many stages of the meraculous algorithm are parallelized, and to document their scalability we describe an assembly of simulated data for the ∼120 Mbp <italic>Arabidopsis thaliana</italic> genome, and show that for mammalian genomes the limiting memory structure requires less than 10 Gb of RAM.</p>
    <p>The meraculous software, <italic>Pichia</italic> shotgun sequence and assembly is available for download at <ext-link ext-link-type="ftp" xlink:href="ftp://ftp.jgi-psf.org/pub/JGI_data/meraculous/">ftp://ftp.jgi-psf.org/pub/JGI_data/meraculous/</ext-link>.</p>
  </sec>
  <sec sec-type="materials|methods" id="s2">
    <title>Materials and Methods</title>
    <sec id="s2a">
      <title><italic>Pichia</italic> shotgun sequencing</title>
      <p>We constructed short insert “fragment” paired-end libraries, with an average insert size of ∼300 bp, using “Paired-End DNA Sample Prep Kit V1,” Catalog # PE-102-1001, from Illumina (San Diego, CA). We also constructed longer-range “mate pair” or “jumping” libraries, with an average insert size of ∼3 kbp, using Illumina's “Mate Pair Library Prep Kit”, Catalog #: PE-112-1002 (<xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1</bold></xref>). Both the fragment and mate pair libraries were sequenced at read lengths of 75 bases from both ends (2×75) using the Illumina Genome Analyzer II following manufacture's recommended protocols. Genomic DNA came from the same sample that was used in the earlier Sanger sequencing project <xref rid="pone.0023501-Jeffries2" ref-type="bibr">[26]</xref>. For the fragment library, two channels were sequenced, with 15.5 and 15.7 million clusters reporting sequence. For the jumping library, one channel was sequenced with 12.4 clusters reporting sequence. These reads yield a nominal 425× coverage of the <italic>P. stipitis</italic> genome.</p>
      <fig id="pone-0023501-g001" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0023501.g001</object-id>
        <label>Figure 1</label>
        <caption>
          <title>Paired ends.</title>
          <p><bold>A. Fragment pair end separation distribution.</bold> Pairs are separated by 279±7 bp. <bold>B. Mate-pairs are produced by circularizing a genomic segment</bold> (vertical line indicates junction). End-sequences from sheared fragments that contain the junction (1) represent reads that point outward at the ends of the original segment. End-sequences from sheared fragments that do not contain the junction (2) are inwardly directed and adjacent on the original segment. <bold>C. Mate-pair end separation distribution.</bold> Two-thirds of all pairs are found to be divergently oriented and separated by 3.2±0.2 kb. An artifactual population of convergently oriented pairs separated by less than 500 bp is apparent, representing fragments of type (2) shown above in panel B.</p>
        </caption>
        <graphic xlink:href="pone.0023501.g001"/>
      </fig>
    </sec>
    <sec id="s2b">
      <title>Pichia reference sequence</title>
      <p>The finished <italic>P. stipitis</italic> CBS 6054 genome sequence <xref rid="pone.0023501-Jeffries2" ref-type="bibr">[26]</xref> is NCBI project number NZ_AAVQ01000000, and consists of sequences AAVQ01000001–AAVQ01000002.</p>
    </sec>
    <sec id="s2c">
      <title><italic>E. coli</italic> shotgun sequence and reference</title>
      <p>A publicly available paired 36 bp Illumina dataset for <italic>E. coli</italic> K-12 MG1655 dataset was downloaded from the NCBI short read archive, project SRX000429. The finished reference sequence for this strain <xref rid="pone.0023501-Hayashi1" ref-type="bibr">[27]</xref> is Genbank sequence gi|48994873|gb|U00096.2.</p>
    </sec>
    <sec id="s2d">
      <title>Simulated Arabidopsis dataset</title>
      <p>A simulated 100× fragment paired-end dataset with realistic error profiles was produced using persimmonator (Bret Barnes, Illumina). Insert sizes were normally distributed with mean 300 bp and standard deviation 30 bp. Dataset is available upon request.</p>
    </sec>
    <sec id="s2e">
      <title>Assembly algorithm</title>
      <p>The algorithm is encoded in four modules encoded in Perl as described below.</p>
      <list list-type="simple">
        <list-item>
          <p><bold>Selection of k-mer set.</bold> The shotgun reads are initially processed as follows. <list list-type="order"><list-item><p>Select an odd integer <italic>k</italic> such that (1) a substantial fraction of the sequence targeted for assembly is unique as <italic>k</italic>-mers, and (2) most reads have multiple overlapping error-free <italic>k</italic>-mers. A <italic>k</italic>-mer is an oligonucleotide sequence of length <italic>k</italic>. For <italic>Pichia</italic> we use <italic>k</italic> = 41.</p></list-item><list-item><p>Count the number of occurrences (multiplicity) of each k-mer in the dataset. This can be accomplished with a single pass through the read set, and for large datasets is readily parallelized by dividing <italic>k</italic>-mers into 4<italic><sup>m</sup></italic> bins based on their initial <italic>m</italic> nucleotides, counting <italic>k</italic>-mers in each bin independently. In practice, 16-way parallelization is convenient (<italic>m</italic> = 2).</p></list-item><list-item><p>Choose a threshold multiplicity <inline-formula><inline-graphic xlink:href="pone.0023501.e001.jpg" mimetype="image"/></inline-formula> that separates <italic>k</italic>-mers that are likely to contain sequence errors (multiplicity&lt;<inline-formula><inline-graphic xlink:href="pone.0023501.e002.jpg" mimetype="image"/></inline-formula>) from those that are likely to be error free and occur in the genome (multiplicity<inline-formula><inline-graphic xlink:href="pone.0023501.e003.jpg" mimetype="image"/></inline-formula>). Practically, this threshold should be selected at (or below) the first minimum in the multiplicity curve <xref rid="pone.0023501-Chaisson3" ref-type="bibr">[28]</xref>. We describe below and in Supplemental <xref ref-type="supplementary-material" rid="pone.0023501.s002">Text S1</xref> alternate methods for setting <inline-formula><inline-graphic xlink:href="pone.0023501.e004.jpg" mimetype="image"/></inline-formula>. For <italic>Pichia</italic> we use <inline-formula><inline-graphic xlink:href="pone.0023501.e005.jpg" mimetype="image"/></inline-formula> = 10.</p></list-item><list-item><p>Keep only k-mers of multiplicity <inline-formula><inline-graphic xlink:href="pone.0023501.e006.jpg" mimetype="image"/></inline-formula> (the “<italic>k</italic>-mer set” below). That is, for the construction of U-U-contigs (see below), ignore <italic>k</italic>-mers of multiplicity less than <inline-formula><inline-graphic xlink:href="pone.0023501.e007.jpg" mimetype="image"/></inline-formula> as arising either from sequencing errors or low coverage regions. (<italic>k</italic>-mers with multiplicity below <inline-formula><inline-graphic xlink:href="pone.0023501.e008.jpg" mimetype="image"/></inline-formula> can be recovered in the assembly if they are the unique closure of a gap, see below.)</p></list-item></list>
</p>
        </list-item>
        <list-item>
          <p><bold>meraculous.pl.</bold> meraculous.pl implements the following algorithm, which produces a set of maximal linear sub-paths of the deBruijn graph. <list list-type="order"><list-item><p>For each <italic>k</italic>-mer, count all single-base extensions (forward and backward) of high quality, that is, occurrences of the k-mer in reads such that the next or previous base has quality value greater than or equal to a threshold (<inline-formula><inline-graphic xlink:href="pone.0023501.e009.jpg" mimetype="image"/></inline-formula>) that occur in the shotgun reads. Based on analysis of available data, we use <inline-formula><inline-graphic xlink:href="pone.0023501.e010.jpg" mimetype="image"/></inline-formula> = 20, where <italic>Q</italic> is the quality value assigned to a nucleotide by the Illumina base-calling software. Single base extensions to a base with <italic>Q</italic>&gt;<italic>Q</italic>
<sub>min</sub> are referred to as “high quality extensions” below.</p></list-item><list-item><p>Designate each end of a <italic>k</italic>-mer as X, U, or F depending on whether that end has 0, 1, or <inline-formula><inline-graphic xlink:href="pone.0023501.e011.jpg" mimetype="image"/></inline-formula>2 distinct high quality extensions of multiplicity at least <inline-formula><inline-graphic xlink:href="pone.0023501.e012.jpg" mimetype="image"/></inline-formula>. <italic>k</italic>-mer ends designated “X” have no high quality extensions; this condition occurs at persistently unsequenceable or low depth positions. <italic>k</italic>-mer ends marked “U” have a unique high quality extension in the dataset. <italic>k</italic>-mer ends marked “F” represent a “fork” in the deBruijn graph that correspond to exits from a repetitive sequence into multiple alternate sequence contexts. (Polymorphisms in diploid genomes also lead to forks; such cases are not considered further here.)</p></list-item><list-item><p>Store <italic>k</italic>-mers with unique high quality extensions at both ends (<italic>i.e.</italic>, those designated U-U in the previous step) in a hash where the “key” is the <italic>k</italic>-mer and the “value” is a two-letter code [acgt][acgt] that indicates the unique bases that immediately precede and follow the <italic>k</italic>-mer in the read dataset. This hash represents the “U-U graph,” which is a subgraph of the full deBruijn graph. Implementation of a novel hashing scheme is described in more detail below.</p></list-item><list-item><p>Remove all linkages that are not reciprocal. That is, if the <italic>k</italic>-mer <italic>v</italic> is the unique high quality extension of <italic>u</italic> in one direction, then <italic>u</italic> must be the unique high quality extension of <italic>v</italic> in the opposite direction. This step eliminates subpaths corresponding to residual errors (see <xref ref-type="fig" rid="pone-0023501-g002"><bold>Figure 2</bold></xref>) that evade the minimum depth condition.</p></list-item><list-item><p>Arbitrarily select <italic>k</italic>-mers to seed forward and reverse traversals of the U-U graph to produce an initial set of “contigs.” These U-U contigs have the property that each <italic>k</italic>-mer is represented only once in them. The resulting contigs are independent of the selection of seed <italic>k</italic>-mers. We retain only contigs longer than a specifiable minimum length (which is required to exceed 2<italic>k</italic>−1 bases); for the reported <italic>Pichia</italic> assembly, only contigs <inline-formula><inline-graphic xlink:href="pone.0023501.e013.jpg" mimetype="image"/></inline-formula>100 bp are considered.</p></list-item></list>
</p>
        </list-item>
        <list-item>
          <p><bold>blastMap.pl.</bold> blastMap.pl aligns reads back to the assembly to identify read-pair information that may be used to link strings of contigs together into scaffolds. <list list-type="order"><list-item><p>All reads are aligned to the contigs produced by meraculous using BLAST <xref rid="pone.0023501-Altschul1" ref-type="bibr">[29]</xref>. Aligners designed specifically for short reads could also be used; we initially opted for BLAST for simplicity. Parameters for BLASTN were -b 100 -v 100 -K 100 -e 1e-10 -U -F F -W <italic>k</italic>. Notably the word size was chosen to be <italic>k</italic>, since by construction the U-U contigs contain each U-U <italic>k</italic>-mer exactly once.</p></list-item><list-item><p>Alignments were parsed using a custom Perl script (blastView3.pl, Chapman, unpublished) that reports the highest-scoring HSP (high-scoring segment pair) for all contigs to which a given read is aligned. Alignments of a minimal length (a parameter value<inline-formula><inline-graphic xlink:href="pone.0023501.e014.jpg" mimetype="image"/></inline-formula>
<italic>k</italic>) are retained. For “jumping” libraries, alignment orientations are reversed to conform to standard paired end conventions (see <xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1B</bold></xref>), and alignments with less than 600 bp between the 5′ end of the aligning read and a contig end are rejected to prevent inclusion of artifactual pairs which can comprise a significant fraction of these libraries (see <xref ref-type="sec" rid="s3">Results</xref>).</p></list-item><list-item><p>Read vs. contig alignments are categorized as full-length, gap-projecting (alignment ends at contig boundary), incomplete (less than 5 bp unaligned; not at contig boundary), or truncated (at least 5 bp not aligned; not at contig boundary) at each end and also categorized as “pointing out” (3′ end within 1.2× insert size of a contig end), “pointing in” (5′ end within 1.2× insert size of a contig end), or “in the middle” (neither end within 1.2× insert size of a contig end) of the target (contig) sequence.</p></list-item><list-item><p>Full length alignments in which both ends of a pair are placed within a common contig (and appropriately oriented) are used to estimate the insert size of the pair library.</p></list-item><list-item><p>Alignments that project into a gap (at either 3′ or 5′ end) or are “pointing out” from a contig end are retained and categorized as anchored completely within a contig (neither end terminates at a contig boundary), pointing into a gap (3′ end terminates at contig boundary), pointing out of a gap (5′ end terminates at contig boundary), or “splinting” a gap (<italic>i.e.</italic>, having two alignments to different contigs, each of which terminates at a contig boundary). Pairs and singleton reads with these properties are reported for use by subsequent scaffolding and gap-closure steps (discussed below).</p></list-item></list>
</p>
        </list-item>
        <list-item>
          <p><bold>oNo.pl.</bold> oNo.pl uses paired reads and splinting singletons from blastMap to produce a scaffolding by “ordering and orienting” a set of contigs (or a previous scaffolding). <list list-type="order"><list-item><p>The number of links between contig-end pairs are tabulated and the estimated gap size between contig ends calculated using a correction that accounts for the fact that pairs spanning a given gap must be longer than that gap size (see <xref ref-type="sec" rid="s3">Results</xref> below).</p></list-item><list-item><p>Pairs of contig ends that are unambiguously linked by pairing information are “locked” together. In cases where two possible links are found, if the greater of the two estimated gap sizes is large enough to accomodate the smaller gap as well as its associated contig, the smaller gap is accepted. In order for contigs to be “locked” together they must be mutually unique extensions of each other based on pairing (in analogy to the U-U <italic>k</italic>-mer relationship in the contig-building step).</p></list-item><list-item><p>The graph of locked contig ends is traversed to produce scaffolds which terminate when no linking information is available or the linking information does not represent a consistent, mutually unique pairing relation. A minimum number of links (paired or splinting) is required to accept a contig end connection. This threshold, <inline-formula><inline-graphic xlink:href="pone.0023501.e015.jpg" mimetype="image"/></inline-formula>, is defined by observing the distribution of the number of links per gap and may be adjusted to produce more or less conservative scaffolding. For <italic>Pichia</italic>, <inline-formula><inline-graphic xlink:href="pone.0023501.e016.jpg" mimetype="image"/></inline-formula> = 6 was used.</p></list-item><list-item><p>Gapped contig sequence and a report of the flanking <italic>k</italic>-mers (“virtual primer pairs”) and the estimated size of each gap are generated and passed on to the next phase of the process, gap-resolution.</p></list-item></list>
</p>
        </list-item>
        <list-item>
          <p><bold>merauder.pl.</bold> merauder.pl closes gaps contained within scaffolds using reads that are projected to lie within the gap based on their mate reads. <list list-type="order"><list-item><p>For each gap in the scaffolds, reads that project into the gap by direct alignment and unaligned reads whose mates' alignments suggest that they fall into the gap are collected as potential gap-fillers.</p></list-item><list-item><p>Potential gap-filling reads are searched to identify those that contain both gap-flanking primer sequences and produce a closure within a given tolerance of the estimated gap size (the tolerance is based on the pair-end separation uncertainty). Such reads are said to “splint” across a gap. Note that some gaps from oNo scaffolds may be negative, indicating that the flanking contigs overlap but that the overlap is either too short or repetitive (<italic>i.e.</italic>, relevant <italic>k</italic>-mers are not in the U-U set). If splinting reads are found, then the gap is filled (or negative gap joined) if there is a unique gap-resolving sequence found in all reads that contain both primers. (Note that an optional more aggressive gap-resolution may be obtained by using the most common gap-resolving sequence and eliminating the uniqueness requirement.)</p></list-item><list-item><p>If “splinting” fails, merauder.pl attempts a <italic>k</italic>-mer walk starting from the forward primer using the meraculous algorithm above (“mini-meraculous”) . The gap is closed if a unique path to the reverse primer is found that is within tolerance of the estimated gap size. Should the gap fail to close due to an unresolved repeat within the gap-filling read subset, the <italic>k</italic>-mer size is iteratively increased by two until either the gap is successfully closed or the failure is due to a lack of extension data (<italic>i.e.</italic>, only reaching an “X” in the graph terminates the process).</p></list-item><list-item><p>Gap-resolved scaffolds are reported with gap closure sequences indicated by lower-case letters, as well as a report of the success/failure of each attempted gap resolution.</p></list-item></list>
</p>
        </list-item>
      </list>
      <fig id="pone-0023501-g002" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0023501.g002</object-id>
        <label>Figure 2</label>
        <caption>
          <title>Example of a 7-mer graph.</title>
          <p>The node <bold>a</bold> is X-terminated to the left. The non-reciprocal linkage between nodes <bold>b</bold> and <bold>c</bold> is removed because the terminal base (lower case “a” in the sequence) of node <bold>c</bold> is low quality. Node <bold>e</bold> is F-terminated to the right. The resultant U-U contig is the union of nodes <bold>b</bold> and <bold>d</bold>: <named-content content-type="gene">CTGCTGCT</named-content>.</p>
        </caption>
        <graphic xlink:href="pone.0023501.g002"/>
      </fig>
    </sec>
    <sec id="s2f">
      <title>Multiple insert sizes</title>
      <p>The oNo and merauder steps may be iterated if multiple insert sizes exist, using paired end sets of increasing insert size.</p>
    </sec>
    <sec id="s2g">
      <title>Lightweight Hash</title>
      <p>To reduce the memory needed to store and randomly access the deBruijn graph, we designed and implemented a lightweight hash scheme that uses a recursive collision strategy with multiple hash functions to avoid explicitly storing the keys themselves. In the typical use case, there is a fixed dictionary of keys and associated values.</p>
      <p>First, the hash must be “primed” as follows: (we assume there are hash functions h<sub>0</sub>…h<sub>n</sub> already defined).</p>
      <list list-type="order">
        <list-item>
          <p>Initialize hash depth d to 0, write all keys to file F<sub>d</sub>.</p>
        </list-item>
        <list-item>
          <p>For all keys in file F<sub>d</sub>, evaluate the hash function h<sub>d</sub> and update a “primer object” P<sub>d</sub> to keep track of which hash values occur multiple times at hash depth d (i.e. the keys collide under the hash function h<sub>d</sub>).</p>
        </list-item>
        <list-item>
          <p>Write all colliding keys to file F<sub>d+1</sub> ; increment hash depth d.</p>
        </list-item>
        <list-item>
          <p>Repeat steps 1,2 until the number of colliding keys is 0.</p>
        </list-item>
      </list>
      <p>All primers P<sub>0</sub>…P<sub>d</sub> are then sent to the lightweight hash initializer to create a lightweight hash object. Thereafter, each key-value pair is simply added to the hash object: the hash checks the primer information to determine at which level of the recursion to store the value, while the key itself is discarded. At this point, the hash is ready to be queried. Note that the client must never attempt to look up a key that was not used in the priming step, as the hash cannot verify the identity of the key associated within a given value after priming.</p>
    </sec>
    <sec id="s2h">
      <title>Using the lightweight hash in meraculous</title>
      <p>In the contig generation stage, a lightweight hash object stores all relevant <italic>k</italic>-mers and allows contigs to be formed by walking from random “seed” starting points. Preprocessing is done to ensure that both U-U mers and terminating <italic>k</italic>-mers connected to those <italic>k</italic>-mers are stored in the hash. The terminating <italic>k</italic>-mers are needed because lightweight hashes do not support queries on non-existent keys. The lightweight hash is first “primed” by exposing it to each <italic>k</italic>-mer. Next, the <italic>k</italic>-mers are loaded, along with their extension codes, as key-value pairs.</p>
    </sec>
    <sec id="s2i">
      <title>Implementation</title>
      <p>The algorithm was implemented in a combination of C and Perl and uses SWIG to wrap the lightweight hash data structure. All benchmarks were run on 32-core AMD Opterons running at 1.8 GHz with 512 GB RAM and the “Linux AMD64-K8-SMP” operating system. At times, where noted, parallelized steps were also run on commodity clusters managed by Sun Grid Engine.</p>
    </sec>
  </sec>
  <sec id="s3">
    <title>Results</title>
    <sec id="s3a">
      <title>Algorithm overview</title>
      <p>Our algorithm follows the broad outline first described in detail for the Celera assembler <xref rid="pone.0023501-Myers1" ref-type="bibr">[30]</xref> (see also the TIGR assembler <xref rid="pone.0023501-Sutton1" ref-type="bibr">[31]</xref>). First, we assemble contigs that do not span any repeat boundaries and therefore are either unique sequence or multi-copy sequences within recently diverged repeats. Next, we link these contigs into scaffolds, using paired-end links to jump over unassembled repetitive regions, leaving gaps whose size and flanking sequences are known. Finally, we fill intra-scaffold gaps (“captured” gaps, or “sequence-mapped” gaps) using reads whose mate pairs constrain them to lie within the gap.</p>
      <p>Instead of computing read-read overlaps, we use the deBruijn representation of sequencing reads in terms of (overlapping) words of length <italic>k</italic> (“<italic>k</italic>-mers”) <xref rid="pone.0023501-Pevzner1" ref-type="bibr">[24]</xref>. The word size <italic>k</italic> plays a role analogous to the minimum confidently detectable read-read overlap in alignment-based assembly <xref rid="pone.0023501-Lander1" ref-type="bibr">[32]</xref>, and is generally an empirical parameter. Larger <italic>k</italic> provides more specificity, but fewer <italic>k</italic>-mers per read, reducing the effective depth <xref rid="pone.0023501-Zerbino1" ref-type="bibr">[20]</xref>. For each <italic>k</italic>-mer in a read, we can define its “single-base extension” in the forward direction as the <italic>k</italic>-mer that results by sliding the word forward by a single base. The first <italic>k−1</italic> bp of this extension are the same as the last <italic>k−1</italic> bp of the original word.</p>
      <p>For a random sequence of length <italic>G</italic>, it is sufficient to use <inline-formula><inline-graphic xlink:href="pone.0023501.e017.jpg" mimetype="image"/></inline-formula>, but in practice the repetitive structure of a genome can require longer <italic>k</italic>-mers. While this repetitive structure is typically not known <italic>a priori</italic>, analysis of related known genomes can suggest reasonable values of <italic>k</italic>. One way to assess this is to identify runs of single-base <italic>k</italic>-mer extensions that are unambiguous in the genome. That is, for each k-mer in a run there is only a single k-mer in the genome that overlaps it by <italic>k</italic>−1 bp. Such unambiguously extendable runs of <italic>k</italic>-mers are related to contigs, as discussed below, and we seek <italic>k</italic> large enough that a substantial fraction of the genome is contained in such runs. For <italic>P. stipitis</italic> we choose <italic>k</italic> = 41 to recover ∼95% of the genome in uniquely extendable <italic>k</italic>-mer runs longer than 500 bp. For more complex genomes like <italic>Drosophila melanogaster</italic>, <italic>k</italic> = 41 recovers ∼86% of the genome in such regions, while for the rice genome, with its long-terminal-repeat retrotransposons, <italic>k</italic> = 41 recovers only 59% of the genome in such regions. These runs of overlapping unique <italic>k</italic>-mers are a useful starting point for assembly, and can be improved using paired-end constraints as described below.</p>
      <p>The meraculous algorithm first constructs an initial set of high confidence contig sequences by decomposing reads into overlapping <italic>k</italic>-mers, and identifying maximal paths in the space of all <italic>k</italic>-mers such that (1) every <italic>k</italic>-mer in a path occurs at least <inline-formula><inline-graphic xlink:href="pone.0023501.e018.jpg" mimetype="image"/></inline-formula> times in the dataset, (2) consecutive <italic>k</italic>-mers are each other's unique “high-quality” single-base extension in the read set. The <italic>k</italic>-mer <italic>b</italic> is a high quality extension of <italic>a</italic> if there are at least <inline-formula><inline-graphic xlink:href="pone.0023501.e019.jpg" mimetype="image"/></inline-formula> instances in the reads where <italic>b</italic> follows <italic>a</italic> (that is, the last <italic>k</italic>−1 bp of <italic>a</italic> are the same as the first <italic>k−1</italic> bp of <italic>b</italic>), and the newly added nucleotide at the end of <italic>b</italic> has quality at least <inline-formula><inline-graphic xlink:href="pone.0023501.e020.jpg" mimetype="image"/></inline-formula>. Extensions must be unique to be considered in these paths; <italic>k</italic>-mers that have multiple high quality extensions are candidates for the boundaries of repeats and are not included.</p>
      <p>We mark each <italic>k</italic>-mer end with U if it has a unique high quality extension, F if it has more than one (is a “fork”), and X if it has no high quality extension. We then isolate the subgraph of the deBruijn graph for which all <italic>k</italic>-mers are designated “U-U”. By omitting forked <italic>k</italic>-mers, the tangled full deBruijn graph is simplified into a set of linear chains, which are easily traversed. The two parameters <inline-formula><inline-graphic xlink:href="pone.0023501.e021.jpg" mimetype="image"/></inline-formula> and <inline-formula><inline-graphic xlink:href="pone.0023501.e022.jpg" mimetype="image"/></inline-formula> are selected empirically, as described below. Note that we make no explicit error correction; regions of reads containing errors are excluded from participating in U-U paths based on <italic>k</italic>-mer depth and sequence quality.</p>
      <p>Given a set of U-U contigs, we next map reads back to these contigs by alignment. For simplicity we use BLAST, but other algorithms better suited to short-reads can be substituted, as long as alignments of reads to multiple contig locations are reported (see below). Since a <italic>k</italic>-mer that occurs in the U-U graph occurs only once in the U-U contigs, we require at least a <italic>k</italic>-bp exact match to seed the alignment of reads back to the U-U contigs, and allow mapped reads to project off the ends of contigs. Using alignment to map reads relieves us of the need to track read placements through the initial traversal of the U-U subgraph, simplifying the implementation. Once paired-end reads are placed, uncontested pair-linkages between contigs are used to form scaffolds.</p>
      <p>Short gaps between successive contigs can then be filled in by applying the U-U procedure to the small subset of reads that are inferred to lie in a gap based on the placement of their paired end sequence. As with Sanger reads, this gap-filling process is dramatically simplified relative to the full assembly problem, since only a small region is assembled for each gap. Gap filling is readily parallelized, and can be iterated using progressively longer pairs.</p>
    </sec>
    <sec id="s3b">
      <title>A novel lightweight hash for the deBruijn graph</title>
      <p>It is common to store and access a deBruijn graph using a hash, which is a data structure that enables rapid lookup of a “value” associated with each “key.” To efficiently store and access the U-U deBruijn graph, we use a hash in which the “key” is a U-U <italic>k</italic>-mer, and the “value” is the (unique) high quality nucleotide that follows the key in the read dataset. In a conventional hash, a hash function h(key) is used to map each key into a position within a linear array of length H. The hash function is approximately uniformly distributed between 1 and H. Since multiple keys can hash to the same value, the data structure and methods must allow for such “collisions,” at additional cost in speed and memory. In a typical hash implementation, the possibility of collisions for a general and possibly changing set of keys require that keys themselves also be stored in the array.</p>
      <p>Since the number of distinct keys is comparable to the genome size G, the memory that would naively be required to store the hash is ∼2G*(k+1) bits, with most of the memory cost associated with storing the key. (The factor of two arises from allocating two bits per nucleotide.) For example, for a human genome G∼3×10<sup>9</sup>; for k = 75, storing this hash would require 450 Gb. Unlike many applications of hashes, however, most of this memory is required to store the keys; the value associated with each key is only a single nucleotide (two bits). Working with such a hash requires either large memory systems <xref rid="pone.0023501-Li2" ref-type="bibr">[11]</xref> or distributed memory parallelization schemes <xref rid="pone.0023501-Simpson1" ref-type="bibr">[9]</xref>.</p>
      <p>To dramatically reduce the memory requirement for meraculous, we developed a novel perfect static hashing scheme that can be applied whenever the complete set of keys is known initially and does not change during the use of the hash, as is the case with the U-U deBruijn graph for a given shotgun dataset. In contrast, general dynamic hashing schemes typically retain the flexibility to add new (key, value) combinations at any time. Our hashing scheme is “perfect” in the sense that the average lookup time does not depend on the genome size. For a genome of size G, our hash requires only ∼e*G bytes of memory, independent of the choice of k, where e = 2.71828… is base of natural logarithms. The U-U hash for a human genome then requires only ∼8 Gb, a ∼60-fold memory savings relative to a standard hash and well within the range of many desktop systems.</p>
      <p>Our perfect hash h(u) is constructed using a preprocessing step that iteratively identifies and progressively eliminates collisions for all U-U <italic>k</italic>-mers (<xref ref-type="sec" rid="s2">Methods</xref>). Let h<sub>i</sub>(u) be a series of independent hash functions defined on <italic>k</italic>-mers. Each hash function h<sub>i</sub>(u) returns an integer between 1 and H<sub>i</sub> that is assumed to be uniformly distributed over that range. Then a perfect hash h(u) can be defined iteratively as follows. First, compute h<sub>1</sub>(u) for all U-U <italic>k</italic>-mers, and record all collisions. Applying the Poisson distribution, H<sub>1</sub>*exp(−G<sub>1</sub>/H<sub>1</sub>) <italic>k</italic>-mers do not collide. For such k-mers, we assign a hash “level” of 1, and define the perfect hash by h(u) = h<sub>1</sub>(u). The G<sub>2</sub> = G<sub>1</sub>−H_1*exp(−G<sub>1</sub>/H<sub>1</sub>) <italic>k</italic>-mers that collide at level 1 are then hashed at the second level using an independent hash function h<sub>2</sub>(u) with a reduced range H<sub>2</sub>. Those that do not collide are assigned h(u) = H<sub>1</sub>+h<sub>2</sub>(u); those that do collide are passed to the third level. This process is iterated until there are no more collisions.</p>
      <p>The result is a “perfect” hash h(u) that, by construction, has no collisions. Since each of the input U-U k-mers is uniquely mapped by this function, we do not need to store the “key” k-mer with each entry, and need only store the “value,” which is just a single nucleotide. This results in a memory savings of order 1/k.</p>
      <p>The total memory usage is H<sub>tot</sub> = H<sub>1</sub>+H<sub>2</sub>+H<sub>3</sub>+… If for each iteration we use a hash size H<sub>i</sub> proportional to the number of elements G<sub>i</sub> to be hashed, i.e., H<sub>i</sub> = λG<sub>i</sub>, then it is straightforward to show that the optimal λ = 1, and the total memory usage is H<sub>tot</sub> = e*G<sub>1</sub>. In practice we do not allow H<sub>i</sub> to drop below some cutoff H<sub>min</sub>∼1,000, to avoid excessive iteration. Although the maximum number of iterations (levels) needed to avoid collisions is order log(G), the average number of iterations needed is <italic>e</italic> in the Poisson approximation.</p>
    </sec>
    <sec id="s3c">
      <title><italic>Pichia</italic> sequencing summary, accuracy, and coverage</title>
      <p>As a test dataset for assembling small eukaryotic genomes, we produced 87.3 million paired 75-bp reads for <italic>P. stipitis</italic> CBS 6054 using the Illumina GA II sequencer. Two libraries were sequenced, a ∼300 bp insert standard library (two lanes on a GAII Instrument) and a ∼3 kbp mate-pair (“jumping”) library (one GAII lane), as described in <xref ref-type="sec" rid="s2">Materials and Methods</xref>. The two short-insert paired-end lanes had a somewhat higher cluster density than the mate-pair library (15.5 and 15.7 million clusters reporting sequence vs. 12.4 million). These reads yielded data that totals 6.55 Gbp, or nominal 425× redundant coverage of the 15.4 Mbp <italic>P. stipitis</italic> genome.</p>
      <p>The per-base error rate relevant to <italic>k</italic>-mer assembly can be estimated by measuring the probability that a <italic>k</italic>-mer that starts at position <italic>i</italic> in a read (and ends at <italic>i</italic>+<italic>k</italic>−1) is observed in the genome. For the <italic>Pichia</italic> dataset, we find that the matching probability against the reference genome is higher for forward reads of a pair than for reverse reads. For these three lanes, the matching probability of the first 41-mer ranges from 80.9%–87.8% for forward reads, and 70.5%–77.4% for reverse reads. Similarly, the matching probability for the last 41-mer (beginning at <italic>i</italic> = 35 for our 75 bp reads) ranges from 72.7%–77.1% for forward reads and 54.2%–71.1% for reverse reads.</p>
      <p>Overall, the matching probability for all 41-mers is 74.2%, so that ∼3/4 of all 41-mers are error-free. If we crudely assume that errors are uniformly distributed across reads (and neglect the effect of contamination, which also reduces the matching probability) then this corresponds to a per-base error rate of 1−<inline-formula><inline-graphic xlink:href="pone.0023501.e023.jpg" mimetype="image"/></inline-formula> = 0.7%. In the absence of a reference genome as we have for <italic>Pichia</italic>, we find that Illumina quality scores provide a useful surrogate for the accuracy of base calls, so that the probability that a <italic>k</italic>-mer is correct is well-approximated by <inline-formula><inline-graphic xlink:href="pone.0023501.e024.jpg" mimetype="image"/></inline-formula>, where <inline-formula><inline-graphic xlink:href="pone.0023501.e025.jpg" mimetype="image"/></inline-formula> is the Phred <xref rid="pone.0023501-Ewing1" ref-type="bibr">[33]</xref> quality score at position <italic>j</italic> (data not shown).</p>
      <p>Counting both strands, the <italic>Pichia</italic> nuclear genome contains 29,746,832 distinct 41-mers (<italic>i.e.</italic>, 41-bp words). 29,746,314 (99.998%) of these occur at least once in the Illumina shotgun data set. The mitochondrial genome contains 60,344 distinct 41-mers and all occur at least once in the data set. (68 distinct <italic>k</italic>-mers occur in both the nuclear and mitochondrial genome, and all occur in the dataset).</p>
      <p>Due to sequencing errors, the <italic>Pichia</italic> shotgun data set contains 1,211,630,294 distinct 41-mers, ∼40-fold more than found in the genome. Most of the errors are single occurrences of a <italic>k</italic>-mer in the dataset, and are due to isolated base-calling errors. In particular, 1,042,166,572 (86%) of observed 41-mers occur only once in the data set, of which only 96 (9.2×10<sup>−6</sup>%) are true genomic mers. The size of the 41-mer set used in an assembly can therefore be dramatically reduced with minimal impact by discarding k-mers that occur only once in the dataset, since the vast majority of these are erroneous. The remaining ∼140 million erroneous 41-mers found in the dataset but not in the genome are recurrent sequence errors in the same sequence context (which may or may not occur in multiple locations in the genome).</p>
    </sec>
    <sec id="s3d">
      <title>Depth statistic</title>
      <p>A common statistic for a sequencing project of <italic>N</italic> reads with average read length <italic>R</italic> is the raw depth of coverage <italic>d = NR/G</italic> = total number of nucleotides sequenced divided by genome size <xref rid="pone.0023501-Lander1" ref-type="bibr">[32]</xref>. Assuming no errors, the number of times that a <italic>k</italic>-mer covers a given nucleotide in the genome is <inline-formula><inline-graphic xlink:href="pone.0023501.e026.jpg" mimetype="image"/></inline-formula>, since each read of length <italic>R</italic> only contains <italic>R−k</italic>+1 <italic>k</italic>-mers (see, <italic>e.g.</italic>, <xref rid="pone.0023501-Zerbino1" ref-type="bibr">[20]</xref>). This reduction in effective depth is equivalent to the <inline-formula><inline-graphic xlink:href="pone.0023501.e027.jpg" mimetype="image"/></inline-formula> parameter introduced by Lander and Waterman in the analysis of restriction maps <xref rid="pone.0023501-Lander1" ref-type="bibr">[32]</xref>, with <italic>k</italic>−1 corresponding to the minimum detectable overlap between reads in the deBruijn formulation of assembly. Since <italic>k</italic> is comparable to the read length <italic>R</italic> for many short-read assembly applications, this factor can be substantial. Thus while for our <italic>Pichia</italic> dataset the raw depth is <italic>d</italic> = 425×, for <italic>k</italic> = 41 the finite read length correction reduces <inline-formula><inline-graphic xlink:href="pone.0023501.e028.jpg" mimetype="image"/></inline-formula> to ∼200×. A similarly large factor arises from sequencing errors; as we have seen, ∼3/4 of observed 41-mers in <italic>Pichia</italic> are error-free. Since ∼75% of the k-mers contained in the reads map perfectly to the genome, the effective depth of true <italic>k</italic>-mers is ∼150×, consistent with the mean multiplicity of 145× (modal value 130×, see <xref ref-type="fig" rid="pone-0023501-g003"><bold>Figure 3A</bold></xref>). (The mitochondrial genome is at 2,900× in true 41-mer coverage.)</p>
      <fig id="pone-0023501-g003" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0023501.g003</object-id>
        <label>Figure 3</label>
        <caption>
          <title>k-mer frequency and extension characteristics in <italic>Pichia</italic>.</title>
          <p><bold>A. 41-mer frequency distributions</bold>. The overall 41-mer distribution (green) is decomposed into genomic (red) and non-genomic (yellow) contributions. At fewer than ∼30 occurrences non-genomic (error-induced) 41-mers dominate. The modal frequency is ∼135. <bold>B. Graph features as functions of d<sub>min</sub></bold>. The total number of nodes (blue), total number of X-terminated nodes (red), and total number of F-terminated (yellow) nodes in the 41-mer graph are calculated as functions of the assembly parameter d<sub>min</sub>. We find the optimal assembly to occur at d<sub>min</sub> = 10.</p>
        </caption>
        <graphic xlink:href="pone.0023501.g003"/>
      </fig>
    </sec>
    <sec id="s3e">
      <title>Paired-end separation, chimerism, and mate-pair artifacts</title>
      <p>To assess insert size distributions and chimerism rates independent of the assembly, we aligned reads from one lane of short insert pairs and one jumping library lane to the finished reference genome using BLAST (see <xref ref-type="sec" rid="s2">Materials and Methods</xref>). The single highest scoring HSP (high-scoring segment pair <xref rid="pone.0023501-Altschul1" ref-type="bibr">[29]</xref>) was retained for each read. (In cases where multiple equally high scoring HSPs exist a best hit was chosen at random, so the chimerism rate inferred from this result should be considered an upper bound.) For the short insert lane, 11,472,868 read pairs had both ends aligned to the genome, so that ∼73% of reported clusters provide a successful read pair. The aligned pairs from each lane therefore represent ∼200× physical (“clone”) coverage of the genome. 150,085 pairs (1.3%) had best hits on differing chromosomes and 27,045 pairs (0.2%) align to the same chromosome but on the same strand. The remaining appropriately-oriented pairs have a tight, nearly symmetrical insert size distribution with mean and standard deviation of 279±7 bp (see <xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1A</bold></xref>). 174,044 of these pairs (1.5%) have ends separated by a distance more than three standard deviations above or below this mean value. We estimate from this an upper bound of 3% chimeric pairs in this library.</p>
      <p>For the ∼3 kbp jumping library, 10,380,635 read pairs had both ends aligned to the genome, so that 84% of reported clusters provide a successful read pair. Of the aligned read pairs, 3.7% had ends hitting different chromosomes, and 0.8% hit on the same chromosome but the same strand. The remaining oppositely oriented read pairs have a bimodal distribution of separations Approximately 2/3 of all read pairs are directed away from each other and ∼3.2 kbp apart, as expected. Most of the remaining aligned, oppositely directed read pairs are directed towards each other and separated by less than 500 bp. This second group of pairs (“innies”) represents an artifact of mate pair library construction, in which the sequenced fragment is derived from a portion of the circularized DNA that does not contain the junction region (see <xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1B</bold></xref>).</p>
      <p>The orientation and separation of these artifactual pairs makes them easy to exclude in the scaffolding step (<xref ref-type="sec" rid="s2">Materials and Methods</xref>). The distribution of the innie separations is not normally distributed, and contains at least three components: a broad peak at ∼100 bp, and two somewhat narrower peaks at ∼300 bp and ∼400 bp. Excluding the “innies”, the mean and standard deviation of the end-separation for the jumping library is 3,273±196 bp, although the distribution is somewhat skewed, with mode ∼3,215 bp and half maximum range ∼3,045–3,525 bp (<xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1C</bold></xref>). Since a negligible fraction of the “innie” artifact is due to chimerism (which would be unlikely to yield paired reads within 500 bp and with a specified orientation), we can estimate the chimerism rate of mate pairs as less than ∼7%. The mate pairs provide a staggering ∼1,450× spanning coverage of the genome.</p>
    </sec>
    <sec id="s3f">
      <title>Multiplicity distribution, error rates, and local properties of the deBruijn graph</title>
      <p>The multiplicity of a <italic>k</italic>-mer is the number of times it occurs in the dataset <xref rid="pone.0023501-Pevzner1" ref-type="bibr">[24]</xref>, <xref rid="pone.0023501-Chaisson3" ref-type="bibr">[28]</xref>. The multiplicity distribution <italic>n</italic>(<italic>d</italic>) is then the number of <italic>k</italic>-mers that occur exactly <italic>d</italic> times in the dataset. If sampling is random, and in the absence of errors, then <italic>n</italic>(<italic>d</italic>) is Poisson distributed with mean <inline-formula><inline-graphic xlink:href="pone.0023501.e029.jpg" mimetype="image"/></inline-formula>. As noted previously <xref rid="pone.0023501-Chaisson3" ref-type="bibr">[28]</xref>, in practice <italic>n</italic>(<italic>d</italic>) has a sharp peak near <italic>d</italic> = 0 and another broad peak somewhat below <inline-formula><inline-graphic xlink:href="pone.0023501.e030.jpg" mimetype="image"/></inline-formula>. The peak near zero corresponds to <italic>k</italic>-mers that arise from relatively rare sequencing errors; the peak near <inline-formula><inline-graphic xlink:href="pone.0023501.e031.jpg" mimetype="image"/></inline-formula> corresponds to <italic>k</italic>-mers that occur in the genome and are present in many reads. A simple way to distinguish erroneous <italic>k</italic>-mers from true <italic>k</italic>-mers is to separate them based on a depth cutoff <italic>d</italic>
<sub>min′</sub>, retaining only <italic>k</italic>-mers with at least this multiplicity.</p>
      <p>The number of U-U contigs of the deBruijn graph depends on the choice of <italic>d</italic>
<sub>min</sub> (which in our formulation determines the nodes and edges of the graph). For high values of <italic>d</italic>
<sub>min</sub>, U-U contigs are likely to terminate at positions marked X, indicating that the terminal <italic>k</italic>-mer of the contig has no single base extensions that occur in the dataset more than <italic>d</italic>
<sub>min</sub> times. In contrast, for low values of <italic>d</italic>
<sub>min</sub>, many U-U contigs will terminate at F (forked) positions where the terminal <italic>k</italic>-mer of the contig has two (or more) possible single base extensions, each with at least <italic>d</italic>
<sub>min</sub> occurrences in the dataset. Ideally, we would choose <italic>d</italic>
<sub>min</sub> to produce the fewest U-U contigs. We show next that the number of contigs as a function of <italic>d</italic>
<sub>min</sub> can be expressed simply in terms of <italic>k</italic>-mer-local properties of the deBruijn graph. This allows us to identify an appropriate choice for <italic>d</italic>
<sub>min</sub> prior to the time/memory-intensive U-U contig formation step.</p>
      <p>The number of <italic>k</italic>-mers with at least <italic>d</italic> occurrences is given by <inline-formula><inline-graphic xlink:href="pone.0023501.e032.jpg" mimetype="image"/></inline-formula>, and similarly the number of <italic>k</italic>-mers with fewer than <italic>d</italic> occurrences in the dataset is <inline-formula><inline-graphic xlink:href="pone.0023501.e033.jpg" mimetype="image"/></inline-formula>. The total number of <italic>k</italic>-mers is simply <inline-formula><inline-graphic xlink:href="pone.0023501.e034.jpg" mimetype="image"/></inline-formula>. We note that <italic>M</italic>
<sup>+</sup>(<italic>d</italic>) is also the number of <italic>k</italic>-mers in the graph when <italic>d</italic>
<sub>min</sub> = <italic>d</italic>, and similarly <italic>M</italic>
<sup>−</sup>(<italic>d</italic>) is the number of <italic>k</italic>-mers excluded from the graph when <italic>d</italic>
<sub>min</sub> = <italic>d</italic>.</p>
      <p>Let <italic>n</italic>
<sub>1</sub>(<italic>d</italic>) and <italic>n</italic>
<sub>2</sub>(<italic>d</italic>) be the number of <italic>k</italic>-mers with precisely <italic>d</italic> high quality extensions to their most frequent next <italic>k</italic>-mer, and their second most frequent next k-mer, respectively. Then <inline-formula><inline-graphic xlink:href="pone.0023501.e035.jpg" mimetype="image"/></inline-formula> is the number of <italic>k</italic>-mers that are X-terminated when <italic>d</italic>
<sub>min</sub> = <italic>d</italic>, and <inline-formula><inline-graphic xlink:href="pone.0023501.e036.jpg" mimetype="image"/></inline-formula> is the number of <italic>k</italic>-mers <italic>in the graph</italic> that are X-terminated when <italic>d</italic>
<sub>min</sub> = <italic>d</italic>. Similarly, <inline-formula><inline-graphic xlink:href="pone.0023501.e037.jpg" mimetype="image"/></inline-formula> is the number of <italic>k</italic>-mers <italic>in the graph</italic> that are F-terminated when <italic>d</italic>
<sub>min</sub> = <italic>d</italic>. So finally, the total number of contigs when <italic>d</italic>
<sub>min</sub> = <italic>d</italic> can be written as <inline-formula><inline-graphic xlink:href="pone.0023501.e038.jpg" mimetype="image"/></inline-formula>, which is readily calculated from histograms that are produced by meraculous.</p>
      <p>Results for <italic>Pichia</italic> with <italic>k</italic> = 41 are shown in <xref ref-type="fig" rid="pone-0023501-g003"><bold>Figure 3B</bold></xref>. Evidently, the “X”s dominate the “F”s because of the large number of <italic>k</italic>-mers that arise from low frequency error. Minimizing <italic>C(d)</italic> would lead us to choose <italic>d</italic>
<sub>min</sub>∼30. In practice, <italic>d</italic>
<sub>min</sub>∼10 yields a much better assembly, which is near the “knee” in the <italic>F</italic>(<italic>d</italic>) curve. While there are more total “contigs” at this point, the great majority of them are small contigs of size ∼2<italic>k</italic>−1 with a central erroneous base. These small contigs are disconnected from the rest of the graph, and are discarded in the output of meraculous due to a minimum contig size cutoff ∼2<italic>k</italic>. Distinguishing between these small erroneous fragments and true contigs requires more than nearest-neighbor information on the graph. In practice, however, we find empirically that the best results occur for <italic>d<sub>min</sub></italic> just above the rise in <italic>F</italic>(<italic>d</italic>).</p>
    </sec>
    <sec id="s3g">
      <title>Scaffolding using paired-ends</title>
      <p>Rather than tracking the position of reads through the de Bruijn graph, reads were mapped to the U-U contig set by alignment; for simplicity, BLAST was used, but other aligners designed for short reads could be used instead. As noted above, the <italic>k</italic>-mer uniqueness of the initial U-U contigs means that read-contig alignments with exact <italic>k</italic>-mer matches are necessarily unique placements of that <italic>k</italic>-mer. Gap filling (described below) removes this property of the contigs, since the sequences between U-U contigs need not be unique. We represent gap-filled sequence by lower case letters, which both (1) indicates the derivation of the sequence as outside of the U-U subgraph, and (2) allows us to run BLAST in a mode that prohibits seeding matches in gap-filled sequence. Reads can be (1) placed entirely within a contig, (2) project into a gap, or (3) “splint” across two contigs if the read aligned consistently to the ends of two different contigs. The splinting configuration allows a gap to be closed directly.</p>
      <p>Paired-end sequences from sheared and size-selected ∼279-bp fragments were used to create an initial scaffolding. The pair-ends have a tight, nearly symmetrical insert size distribution (standard deviation 7 bp, see <xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1A</bold></xref>), and provided ∼400× spanning clone depth, with negligible chimerism. Typical contig-contig links involve several hundred pairs (mean = 310); scaffolds were produced using uncontested linkages from p<sub>min</sub> or more read pairs, where p<sub>min</sub> = 6. For the ∼3.2 kbp jumping library, the mean number of paired-end links between contigs is 809, with the weakest uncontested link is spanned by 37 pairs. (This can be substantially less than the overall depth for long gaps, since only pairs with separations from the high end of the distribution can span long gaps, see below.)</p>
    </sec>
    <sec id="s3h">
      <title>Insert size estimation accounting for bias</title>
      <p>The sizes of captured gaps can be estimated from spanning pairs given a known distribution of separations between paired end sequences. Accurate estimates, however, must correct for the bias introduced by the fact that the pairs that span a given gap of size <italic>g</italic> must be longer than <italic>g+2R</italic>, where <italic>R</italic> is the read length. Since the probability that a given read pair of separation <inline-formula><inline-graphic xlink:href="pone.0023501.e039.jpg" mimetype="image"/></inline-formula> spans a gap is proportional to the size of the spanning region (the unsequenced portion of the genome between the two end-reads, <inline-formula><inline-graphic xlink:href="pone.0023501.e040.jpg" mimetype="image"/></inline-formula>), the mean separation of pairs spanning a gap of size <italic>g</italic> can be written as<disp-formula><graphic xlink:href="pone.0023501.e041.jpg" mimetype="image" position="float"/><label>(1)</label></disp-formula>where <inline-formula><inline-graphic xlink:href="pone.0023501.e042.jpg" mimetype="image"/></inline-formula> is the distribution of end separations in the library. If we model <inline-formula><inline-graphic xlink:href="pone.0023501.e043.jpg" mimetype="image"/></inline-formula> by a normal distribution with mean <inline-formula><inline-graphic xlink:href="pone.0023501.e044.jpg" mimetype="image"/></inline-formula> and standard deviation <inline-formula><inline-graphic xlink:href="pone.0023501.e045.jpg" mimetype="image"/></inline-formula>, then analytic estimates can be made in the small and large gap limits. In the small gap limit <inline-formula><inline-graphic xlink:href="pone.0023501.e046.jpg" mimetype="image"/></inline-formula>,<disp-formula><graphic xlink:href="pone.0023501.e047.jpg" mimetype="image" position="float"/><label>(2)</label></disp-formula>while in the large gap limit <inline-formula><inline-graphic xlink:href="pone.0023501.e048.jpg" mimetype="image"/></inline-formula>
<disp-formula><graphic xlink:href="pone.0023501.e049.jpg" mimetype="image" position="float"/><label>(3)</label></disp-formula>The true gap size is then the self-consistent solution to<disp-formula><graphic xlink:href="pone.0023501.e050.jpg" mimetype="image" position="float"/><label>(4)</label></disp-formula>where <inline-formula><inline-graphic xlink:href="pone.0023501.e051.jpg" mimetype="image"/></inline-formula> is the naive gap size (assuming the mean of the spanning pairs is the overall mean <inline-formula><inline-graphic xlink:href="pone.0023501.e052.jpg" mimetype="image"/></inline-formula>). This equation can be solved iteratively. In practice, it is initially tabulated for each possible gap size.</p>
    </sec>
    <sec id="s3i">
      <title>Closure of gaps</title>
      <p>The estimated gap sizes that result from scaffolding the U-U contigs are shown in <xref ref-type="fig" rid="pone-0023501-g004"><bold>Figure 4</bold></xref>, plotted vs. the true gap size. (The true gap size is known from the <italic>Pichia</italic> genome, and is shown to demonstrate accuracy of the gap size estimates; this information is not used in the assembly.) “Negative” gaps arise when adjacent U-U contigs cannot be joined in the U-U graph, but are inferred to overlap based on paired-end constraints. This situation can arise due to short repetitive sequences (typically tandem short microsatellite repeats) whose associated <italic>k</italic>-mers are not in the U-U set, which prevents a U-U path from linking the contigs. Nevertheless, reads can sometimes be anchored by uniquely occurring <italic>k</italic>-mers in the two flanking contigs. Such “splints” are only allowed if their mate pair read is placed nearby with the appropriate orientation. 95% of estimated negative gaps (938 out of 985) were closed, as were 36% of positive gaps (183 out of 515), resulting in an approximately four-fold increase in contig N50 size after gap resolution.</p>
      <fig id="pone-0023501-g004" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0023501.g004</object-id>
        <label>Figure 4</label>
        <caption>
          <title>Estimated gap sizes vs. actual contig separation in the <italic>Pichia</italic> genome.</title>
          <p>75% of the initial inter-contig gaps are resolved during gap closing. 97% of gaps are found to be within 4 bp of their estimated size, and 58% within 1 bp.</p>
        </caption>
        <graphic xlink:href="pone.0023501.g004"/>
      </fig>
      <p>For each gap that is not spanned by splinting reads, we collect the reads that are projected to lie within the gap based on the location of their pair. Even if the gap contains a repetitive sequence, this modest collection of reads often has a simple assembly, since there is no interference from reads that lie in other similar copies of the repeat. To close such gaps, we attempt a meraculous assembly of the reads projected to the gap. Since in some cases short localized repeats are still present, if no path across the gap is found that agrees with the gap estimate, <italic>k</italic> is incremented by 2 and another attempt is made. This iterative procedure either terminates when a gap-filling path is found, or all paths connecting the flanking sequences terminate by X, indicating lack of unique continuous sequence. Using both splints and iterative meraculous assemblies, 75% of gaps between U-U contigs are closed. 97% of the gap-filling sequences are within 4 bp of the estimated gap size, and 58% are within 1 bp. Gap filling sequences are reported in lower case, since they do not have the uniqueness property of U-U contigs. Though there are no such errors in the <italic>Pichia</italic> assembly, we have observed rare errors occuring in gap-filled sequence due to the collapse of short tandem repeats.</p>
    </sec>
    <sec id="s3j">
      <title>Pairing from a jumping library</title>
      <p>A single “jumping” library was produced by shearing genomic DNA to ∼3 kbp, circularizing it, and shearing the circles again to produce short ∼250 bp fragments that were then sequenced at both ends. Nearly 70% of the paired-ends produced in this manner are oriented away from each other and separated by ∼3.2 kb on the genome, as expected. The distribution of insert sizes is slightly skewed (<xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1C</bold></xref>). The remaining ∼30% of the pairs were directed towards each other and separated by less than ∼250 bp, a configuration that results from sequencing fragments that do not include the junction of the ∼3 kbp circles (<xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1B</bold></xref>). These aberrant pairs can be excluded by requiring that only end-sequences that lie &gt;500 bp from the end of a contig are used (<xref ref-type="fig" rid="pone-0023501-g001"><bold>Figure 1C</bold></xref>). This in turn limits the order and orientation from jumping libraries to be done on contigs longer than this length scale.</p>
    </sec>
    <sec id="s3k">
      <title>Using fosmid-ends for chromosome-scale scaffolding</title>
      <p>We performed a long-range scaffolding using paired-end Sanger sequences from ∼9,200 fosmid clones generated previously <xref rid="pone.0023501-Jeffries2" ref-type="bibr">[26]</xref> (insert size ∼36±3.2 kbp; 21.5× clone coverage). When the assembly is bolstered by this modest amount of additional long-range linking information, 90% of the genome is spanned by 12 scaffolds, all longer than 344 kbp. Since the <italic>Pichia</italic> genome is comprised of 8 chromosomes ranging from 980 kbp to 3.5 Mbp, the fosmid-end-scaffolded assembly therefore recovers chromosome-scale sequences.</p>
    </sec>
    <sec id="s3l">
      <title>Accuracy of <italic>Pichia</italic> assembly</title>
      <p>The meraculous assembly reconstructs 95% of the <italic>Pichia</italic> genome in long contigs and scaffolds. The contig N50 is 101 kbp, and the scaffold N50 is 269 kbp. (The contig N50 is the length such that half of the assembly is in contigs longer than that length; scaffold N50 is similarly defined.) When compared with the finished reference sequence, we observed no local sequence errors or global misjoins. More precisely, seven single nucleotide discrepancies were noted, but all seven loci had unanimous support for the meraculous consensus among the Illumina reads, and no support for the finished reference. These seven discrepancies represent errors in the reference sequence and not genotypic differences between the original and current projects, since the genomic DNA was from the same source. The total assembled contigs spanned 14,703,442 bp, and covered 14,763,519 bp of the reference genome, with ∼124 kbp of identically duplicated sequences in the reference genome that are assembled only once. Only 4.2% of the reference sequence was unaligned to the assembly. 20% of these missing bases occurred within the first or last 2% of chromosomes, and are telomeric sequences. Half of the missing bases are in 38 long stretches of more than 5 kbp, and 13 stretches longer than 10 kb account for about a third of the missing bases. These regions represent chromosomal regions that are typically annotated as transposable elements or repetitive genes, including the rDNA locus (See Supplemental <xref ref-type="supplementary-material" rid="pone.0023501.s001">Table S1</xref>).</p>
    </sec>
    <sec id="s3m">
      <title>Assembly with a reduced dataset</title>
      <p>The <italic>Pichia</italic> dataset described here includes two lanes of short ∼280 bp pairs, and 1 lane of medium ∼3 kbp pairs, providing a total of ∼150× sequence coverage based on the distribution 41-mer multiplicities. Assembly quality decreased only marginally when we reassembled with only a single lane of short pairs (contig N50 90 kbp; scaffold N50 254 kbp; total assembled length unchanged). With half a lane of each paired-end type (∼1/3 of total starting data, or ∼50× true 41-mer coverage), the typical contig size was halved (N50 = 41 kbp) but the N50 scaffold length decreased only slightly (250 kbp); again the total assembled length was unchanged. When only 20% of a lane of each paired-end type was included (∼13% of the starting data, or ∼10× depth based on 41-mer count), however, the contig N50 and total assembled lengths decreased substantially.</p>
    </sec>
    <sec id="s3n">
      <title>Implementation</title>
      <p>Most steps of the meraculous assembly pipeline are parallelized to take advantage of commodity clusters, by partitioning reads or <italic>k</italic>-mers among processors. Additional parallelization is possible since gap filling can be done independently for each gap; in practice, this step is fast compared with other steps. The two steps that are not parallelized are (1) the construction of the U-U subgraph, which requires the entire <italic>k</italic>-mer hash to be held in memory, and (2) the scaffolding step (which is not memory intensive).</p>
    </sec>
    <sec id="s3o">
      <title>Benchmarking against other short-read assemblers</title>
      <p>To benchmark meraculous against other short-read assemblers, we assembled a publicly available <italic>E. coli</italic> K-12 MG1655 dataset of 10.4 million pairs of 36-bp reads, with insert size 215±11 bp. A finished reference sequence for this 4.64 Mbp genome is available <xref rid="pone.0023501-Hayashi1" ref-type="bibr">[27]</xref>. The short-read dataset represents a nominal ∼160× shotgun coverage (total sequence/genome size), although the distribution of 21-mer frequencies peaks at 65, due to both short read length (see <inline-formula><inline-graphic xlink:href="pone.0023501.e053.jpg" mimetype="image"/></inline-formula> above) and errors. Assemblies of this dataset are reported in refs. <xref rid="pone.0023501-Simpson1" ref-type="bibr">[9]</xref> (for ABySS <xref rid="pone.0023501-Simpson1" ref-type="bibr">[9]</xref>, EULER-SR <xref rid="pone.0023501-Chaisson2" ref-type="bibr">[19]</xref>, SSAKE <xref rid="pone.0023501-Warren1" ref-type="bibr">[34]</xref>, and Edena <xref rid="pone.0023501-Hernandez1" ref-type="bibr">[35]</xref>), <xref rid="pone.0023501-Maccallum1" ref-type="bibr">[23]</xref> (for AllPaths2 <xref rid="pone.0023501-Maccallum1" ref-type="bibr">[23]</xref>, as well as Velvet <xref rid="pone.0023501-Zerbino1" ref-type="bibr">[20]</xref> and EULER <xref rid="pone.0023501-Chaisson2" ref-type="bibr">[19]</xref>) and <xref rid="pone.0023501-Li2" ref-type="bibr">[11]</xref> (for SOAPdenovo). Assemblies vary depending on parametrization and other details. With parameters <italic>k</italic> = 21, <inline-formula><inline-graphic xlink:href="pone.0023501.e054.jpg" mimetype="image"/></inline-formula> = 9, and p<sub>min</sub> = 5, meraculous assembled 97.8% of the 4.64 Mbp genome into contigs ranging from 200 bp to 175 kbp, with half the assembly in 36 (26) contigs (scaffolds) longer than 40.7 (56.6) kbp. (Our assembly includes 26 contigs that are redundant on the genome, which represent perfect repeats spanning 51 kbp of the genome.) While the meraculous contigs and scaffolds are comparable in size to those produced by other assemblers on this data <xref rid="pone.0023501-Simpson1" ref-type="bibr">[9]</xref>, <xref rid="pone.0023501-Li2" ref-type="bibr">[11]</xref>, <xref rid="pone.0023501-Maccallum1" ref-type="bibr">[23]</xref> no assembly errors were made (see <xref ref-type="table" rid="pone-0023501-t001"><bold>Table 1</bold></xref>). The number of errors reported for other assemblers on this dataset range from 1 for AllPaths2 to 36 for SSAKE. Four apparent discrepancies between the meraculous assembly and the reference (one insertion, one deletion, and two substitutions) were identified. In all four of these cases, Illumina reads unanimously support the meraculous sequence over the Genbank reference, suggesting either an error in the reference or a slight difference in genotype between the Sanger project and the Illumina sequence (see also ref. <xref rid="pone.0023501-Maccallum1" ref-type="bibr">[23]</xref>).</p>
      <table-wrap id="pone-0023501-t001" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0023501.t001</object-id>
        <label>Table 1</label>
        <caption>
          <title>Comparison of assembles of <italic>E. coli</italic> K12 MG1655 benchmark dataset.</title>
        </caption>
        <alternatives>
          <graphic id="pone-0023501-t001-1" xlink:href="pone.0023501.t001"/>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col align="left" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <td align="left" rowspan="1" colspan="1">Assembler</td>
                <td align="left" rowspan="1" colspan="1">Assembly as reported in</td>
                <td align="left" rowspan="1" colspan="1">Contig N50 (kbp)</td>
                <td align="left" rowspan="1" colspan="1">Scaffold N50 (kbp)</td>
                <td align="left" rowspan="1" colspan="1">Coverage</td>
                <td align="left" rowspan="1" colspan="1">Errors reported</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">Allpaths2</td>
                <td align="left" rowspan="1" colspan="1">Allpaths2</td>
                <td align="left" rowspan="1" colspan="1">337</td>
                <td align="left" rowspan="1" colspan="1">2,680</td>
                <td align="left" rowspan="1" colspan="1">99.3%</td>
                <td align="left" rowspan="1" colspan="1">Base accuracy Q67; no misassemblies</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Soapdenovo</td>
                <td align="left" rowspan="1" colspan="1">Soapdenovo</td>
                <td align="left" rowspan="1" colspan="1">89</td>
                <td align="left" rowspan="1" colspan="1">105</td>
                <td align="left" rowspan="1" colspan="1">NR</td>
                <td align="left" rowspan="1" colspan="1">5 incorrect contigs</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Velvet</td>
                <td align="left" rowspan="1" colspan="1">Allpaths2</td>
                <td align="left" rowspan="1" colspan="1">62</td>
                <td align="left" rowspan="1" colspan="1">298</td>
                <td align="left" rowspan="1" colspan="1">97.7</td>
                <td align="left" rowspan="1" colspan="1">Base accuracy Q34; 6.9% of 10 kb regions missassembled</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Velvet</td>
                <td align="left" rowspan="1" colspan="1">ABySS</td>
                <td align="left" rowspan="1" colspan="1">54</td>
                <td align="left" rowspan="1" colspan="1">NR</td>
                <td align="left" rowspan="1" colspan="1">98.8</td>
                <td align="left" rowspan="1" colspan="1">9 incorrect contigs (mean size 33 kbp)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Euler-SR</td>
                <td align="left" rowspan="1" colspan="1">ABySS</td>
                <td align="left" rowspan="1" colspan="1">57</td>
                <td align="left" rowspan="1" colspan="1">NR</td>
                <td align="left" rowspan="1" colspan="1">99.8</td>
                <td align="left" rowspan="1" colspan="1">26 incorrect contigs (mean size 52 kbp)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Euler</td>
                <td align="left" rowspan="1" colspan="1">Allpaths2</td>
                <td align="left" rowspan="1" colspan="1">19</td>
                <td align="left" rowspan="1" colspan="1">19</td>
                <td align="left" rowspan="1" colspan="1">94.6</td>
                <td align="left" rowspan="1" colspan="1">Base accuracy Q30; 7.0% of 10 kb regions misassembled</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">
                  <bold>Meraculous</bold>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <bold>This report</bold>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <bold>41</bold>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <bold>57</bold>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <bold>97.8%</bold>
                </td>
                <td align="left" rowspan="1" colspan="1">
                  <bold>No errors</bold>
                  <xref ref-type="table-fn" rid="nt103">*</xref>
                </td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Edena</td>
                <td align="left" rowspan="1" colspan="1">ABySS</td>
                <td align="left" rowspan="1" colspan="1">16</td>
                <td align="left" rowspan="1" colspan="1">NR</td>
                <td align="left" rowspan="1" colspan="1">99.1%</td>
                <td align="left" rowspan="1" colspan="1">6 incorrect contigs (mean size 13 kbp)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">ABySS</td>
                <td align="left" rowspan="1" colspan="1">ABySS</td>
                <td align="left" rowspan="1" colspan="1">45</td>
                <td align="left" rowspan="1" colspan="1">NR</td>
                <td align="left" rowspan="1" colspan="1">99.4%</td>
                <td align="left" rowspan="1" colspan="1">13 incorrect contigs (mean size 33 kbp)</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">SSAKE</td>
                <td align="left" rowspan="1" colspan="1">ABySS</td>
                <td align="left" rowspan="1" colspan="1">11</td>
                <td align="left" rowspan="1" colspan="1">NR</td>
                <td align="left" rowspan="1" colspan="1">99.99%</td>
                <td align="left" rowspan="1" colspan="1">38 incorrect contigs (mean size 6 kbp)</td>
              </tr>
            </tbody>
          </table>
        </alternatives>
        <table-wrap-foot>
          <fn id="nt101">
            <label/>
            <p>In ref. <xref rid="pone.0023501-Simpson1" ref-type="bibr">[9]</xref> analysis of ABySS, Velvet, Euler-SR, SSAKE, and Edena, only contigs of at least 100 bp were considered and genome coverage was based on full length, partial, and broken alignments with at least 95% identity to reference. Contigs with broken alignments, or that aligned with less than 95% identity, were considered incorrect. In the ref. <xref rid="pone.0023501-Maccallum1" ref-type="bibr">[23]</xref> analysis of Allpaths2, Velvet, and Euler, only contigs of at least 1 kbp were considered. Genome coverage computed as the fraction of 100-mers in the reference sequence that are present in the assembly, allowing for multiple occurrences in the assembly. Base quality reported as total number of discrepancies to reference, computed over ∼10 kb assembly segments that contain fewer than 1% such discrepancies. Misassemblies were reported as the total fraction of bases in ∼10 kb segments containing at least 1% error. In the ref. <xref rid="pone.0023501-Li2" ref-type="bibr">[11]</xref> summary of Soap denovo assembly, contigs &gt;100 bp were reported.</p>
          </fn>
          <fn id="nt102">
            <label/>
            <p>NR: not reported.</p>
          </fn>
          <fn id="nt103">
            <label/>
            <p>*Four localized discrepancies were noted between our meraculous assembly and the E. coli K12 MG1655 reference sequence. As described in the text, further examination showed that all four discrepancies were in fact errors in the reference (or mutations in the lineages separating the MG1655 reference sample from the short read dataset sample). Analysis of errors reported for other assemblers have not been analysed.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <p>We also identified three locations in the finished reference sequence (∼257,905, ∼1,298,720, and 1,871,060) that were discrepant in a manner consistent with the insertion of an IS1 transposase in the meraculous assembly relative to the reference. These have not been noted previously in other Illumina assemblies of this dataset. The situation is shown schematically in <xref ref-type="fig" rid="pone-0023501-g005"><bold>Figure 5</bold></xref>. At these locations, the meraculous assembly is confirmed by all available Illumina data, which does not match the reference sequence. We suggest that these loci are either incorrectly finished regions (which seems unlikely given the special care used in <xref rid="pone.0023501-Hayashi1" ref-type="bibr">[27]</xref>, who were focusing on intraspecies variation) or, more intriguingly, recent insertions of IS1 in the lineage separating the <italic>E. coli</italic> K-12 MG1655 genotype used by <xref rid="pone.0023501-Hayashi1" ref-type="bibr">[27]</xref> from the sample used in Illumina library construction.</p>
      <fig id="pone-0023501-g005" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0023501.g005</object-id>
        <label>Figure 5</label>
        <caption>
          <title>Differences between <italic>E. coli</italic> meraculous and reference sequence identify transposon insertion.</title>
          <p>Bottom line shows portion of the Genbank reference genome for <italic>E. coli</italic> str. K-12 substr. MG1655 produced by Sanger sequencing and directed finishing strain <xref rid="pone.0023501-Hayashi1" ref-type="bibr">[27]</xref>. Top shows alignment of the <italic>de novo</italic> meraculus contigs to reference sequence. Solid lines agree perfectly. Angled dashed lines represent unaligned meraculous contig-ends that correspond to the beginning and end of a transposable element. All short-read data supports the meraculous sequence, indicating either insertion of the transposon in the Illumina-sequenced lineage, or an error in the MG1655 reference.</p>
        </caption>
        <graphic xlink:href="pone.0023501.g005"/>
      </fig>
    </sec>
    <sec id="s3p">
      <title>Comparison of meraculous <italic>Pichia</italic> assembly with other short-read assemblers</title>
      <p>We applied several previously published short-read assemblers to the <italic>Pichia</italic> dataset, with results summarized in <xref ref-type="table" rid="pone-0023501-t002"><bold>Tables 2</bold></xref>
<bold>,</bold>
<xref ref-type="table" rid="pone-0023501-t003"><bold>3</bold></xref>. Details of the assembly protocols and resource utilization of the assemblers used in this comparison are included in Supplemental <xref ref-type="supplementary-material" rid="pone.0023501.s003">Text S2</xref>. Compared with the other assemblers tested, meraculous has the fewest errors (none in the genome, vs. ∼1/10 kb for the others), and comparable completeness (∼95%), contig, and scaffold N50. (Although ABySS has substantially more total assembly than meraculous and the other assemblers that were tested, a large fraction of the additional ABySS sequence is redundantly assembled, which explains why the unique coverage is less than that of the others (last column of <xref ref-type="table" rid="pone-0023501-t003">Table 3</xref>).)</p>
      <table-wrap id="pone-0023501-t002" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0023501.t002</object-id>
        <label>Table 2</label>
        <caption>
          <title>Comparison of <italic>P. Stipitis</italic> assembly scaffold characteristics (including scaffolds of size at least 2 kbp).</title>
        </caption>
        <alternatives>
          <graphic id="pone-0023501-t002-2" xlink:href="pone.0023501.t002"/>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col align="left" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <td align="left" rowspan="1" colspan="1">Assembler</td>
                <td align="left" rowspan="1" colspan="1">No. Scaffolds</td>
                <td align="left" rowspan="1" colspan="1">Total Size (Mbp)</td>
                <td align="left" rowspan="1" colspan="1">Scaffold N50 (no. / kbp)</td>
                <td align="left" rowspan="1" colspan="1">Total gap bases (kbp; %)</td>
                <td align="left" rowspan="1" colspan="1">Scaffolding errors</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">ABySS</td>
                <td align="left" rowspan="1" colspan="1">111</td>
                <td align="left" rowspan="1" colspan="1">15.48</td>
                <td align="left" rowspan="1" colspan="1">20 / 263</td>
                <td align="left" rowspan="1" colspan="1">7.3 (0.05%)</td>
                <td align="left" rowspan="1" colspan="1">0</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Meraculous</td>
                <td align="left" rowspan="1" colspan="1">118</td>
                <td align="left" rowspan="1" colspan="1">14.79</td>
                <td align="left" rowspan="1" colspan="1">18 / 269</td>
                <td align="left" rowspan="1" colspan="1">81.7 (0.55%)</td>
                <td align="left" rowspan="1" colspan="1">0</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">SOAPdenovo</td>
                <td align="left" rowspan="1" colspan="1">88</td>
                <td align="left" rowspan="1" colspan="1">14.74</td>
                <td align="left" rowspan="1" colspan="1">14 / 348</td>
                <td align="left" rowspan="1" colspan="1">156 (1.06%)</td>
                <td align="left" rowspan="1" colspan="1">0</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Velvet</td>
                <td align="left" rowspan="1" colspan="1">157</td>
                <td align="left" rowspan="1" colspan="1">14.82</td>
                <td align="left" rowspan="1" colspan="1">24 / 202</td>
                <td align="left" rowspan="1" colspan="1">136 (0.92%)</td>
                <td align="left" rowspan="1" colspan="1">78</td>
              </tr>
            </tbody>
          </table>
        </alternatives>
        <table-wrap-foot>
          <fn id="nt104">
            <label/>
            <p>To assess accuracy of the assemblies, contigs were aligned to the reference genome using BLAST. Scaffolding errors include non-colinear arrangements of contigs within scaffolds with respect to the reference sequence.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
      <table-wrap id="pone-0023501-t003" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pone.0023501.t003</object-id>
        <label>Table 3</label>
        <caption>
          <title>Comparison of <italic>P. Stipitis</italic> assembly contig characteristics (including contigs of at least 100 bp).</title>
        </caption>
        <alternatives>
          <graphic id="pone-0023501-t003-3" xlink:href="pone.0023501.t003"/>
          <table frame="hsides" rules="groups">
            <colgroup span="1">
              <col align="left" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
              <col align="center" span="1"/>
            </colgroup>
            <thead>
              <tr>
                <td align="left" rowspan="1" colspan="1">Assembler</td>
                <td align="left" rowspan="1" colspan="1">No. Contigs</td>
                <td align="left" rowspan="1" colspan="1">Total Size (Mbp)</td>
                <td align="left" rowspan="1" colspan="1">Contig N50 (no. / kbp)</td>
                <td align="left" rowspan="1" colspan="1">Contig error rate</td>
                <td align="left" rowspan="1" colspan="1">Reference coverage</td>
                <td align="left" rowspan="1" colspan="1">Unique coverage</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" rowspan="1" colspan="1">ABySS</td>
                <td align="left" rowspan="1" colspan="1">132</td>
                <td align="left" rowspan="1" colspan="1">15.48</td>
                <td align="left" rowspan="1" colspan="1">21 / 263</td>
                <td align="left" rowspan="1" colspan="1">1/29 kbp</td>
                <td align="left" rowspan="1" colspan="1">97.8%</td>
                <td align="left" rowspan="1" colspan="1">92.2%</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Meraculous</td>
                <td align="left" rowspan="1" colspan="1">489</td>
                <td align="left" rowspan="1" colspan="1">14.70</td>
                <td align="left" rowspan="1" colspan="1">44 / 101</td>
                <td align="left" rowspan="1" colspan="1">&lt;1/15000 kbp</td>
                <td align="left" rowspan="1" colspan="1">95.8%</td>
                <td align="left" rowspan="1" colspan="1">95.8%</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">SOAPdenovo</td>
                <td align="left" rowspan="1" colspan="1">561</td>
                <td align="left" rowspan="1" colspan="1">14.58</td>
                <td align="left" rowspan="1" colspan="1">64 / 65</td>
                <td align="left" rowspan="1" colspan="1">1/6.4 kbp</td>
                <td align="left" rowspan="1" colspan="1">95.2%</td>
                <td align="left" rowspan="1" colspan="1">95.1%</td>
              </tr>
              <tr>
                <td align="left" rowspan="1" colspan="1">Velvet</td>
                <td align="left" rowspan="1" colspan="1">572</td>
                <td align="left" rowspan="1" colspan="1">14.69</td>
                <td align="left" rowspan="1" colspan="1">87 / 53</td>
                <td align="left" rowspan="1" colspan="1">1/15 kbp</td>
                <td align="left" rowspan="1" colspan="1">96.5%</td>
                <td align="left" rowspan="1" colspan="1">95.4%</td>
              </tr>
            </tbody>
          </table>
        </alternatives>
        <table-wrap-foot>
          <fn id="nt105">
            <label/>
            <p>Contig error rate is measured for only the single best-aligning BLAST HSP per contig. Reference coverage is based on the total number of bases spanned by at least one HSP; unique coverage is based on the total number of reference bases spanned by exactly one HSP.</p>
          </fn>
        </table-wrap-foot>
      </table-wrap>
    </sec>
    <sec id="s3q">
      <title>Simulated assembly and scaling for larger genomes</title>
      <p>To assess the feasibility of using meraculous to assemble larger genomes, we performed two experiments with simulated data for the ∼119 Mbp genome of <italic>A. thaliana</italic>, which is ∼8-fold larger than the <italic>P. stipitis</italic> genome. First, we assembled an idealized 41-mer dataset (all 41-mers present in the TAIR8 <italic>A. thaliana</italic> reference). 35,208 contigs longer than 200 bp were produced, totalling 105,782,921 bp (89% of the 118,960,067 bp in the finished <italic>A. thaliana</italic> reference sequence). The N50 was 13.1 kb, and no errors were made. Of the 35,208 gaps between these contigs, 15,591 (44%) are negative, corresponding to short repetitive sequences that should be closed using splinting reads. Another 5,902 gaps (17%) are between 0 and 100 bp, readily captured and closed by short-insert pairs as described here for <italic>Pichia</italic>. These results suggest that ∼50–60% of gaps could be closed with short-insert pairs, reaching a contig N50 of ∼25–30 kbp. Only 1,302 gaps are longer than 2 kbp, further suggesting that scaffolding with medium insert pairs as described for <italic>Pichia</italic> would produce typical scaffolds of ∼100 kbp.</p>
      <p>We also simulated a 100× nominal depth coverage sampling of <italic>A. thaliana</italic> with realistic error profiles (<xref ref-type="sec" rid="s2">Methods</xref>), with 79,456,596 75-bp read pairs with end-separation normally distributed with mean and standard deviation 300±30 bp. The initial contigs (prior to gap closing) closely matched expectation based on the idealized 41-mer dataset described above (total length 105.4 Mbp; 36,854 contigs ranging in size from 200 to 102,310 bp; half the assembly in 2,375 contigs of at least 11,621 bp). With gap closing, we obtained 17,609 contigs ranging in size from 200 to 180,022 bp, with half the assembly in 1,066 contigs of at least 26,949 bp, again as expected. Scaffolding with these 300 bp pairs was modest, with half the assembly in 679 scaffolds longer 42,556 bp, consistent with estimates based on the idealized data set. This assembly contains eight localized sequence errors and one non-local scaffolding error relative to the reference sequence.</p>
      <p>To demonstrate the memory scaling of our algorithm for larger genomes, we determined the U-U contigs for the human genome, based on a shred of the 2.8 Gbp reference sequence into its constituent 75-mers. The U-U contigs longer than 150 bp accounted for 98% of the reference genome, with N50 contig length of 8.7 kbp. No scaffolding or gap closing step was attempted in this demonstration. As expected, only 8.8 Gb of memory was required to represent the U-U deBruijn sub-graph using our lightweight hash scheme.</p>
    </sec>
  </sec>
  <sec id="s4">
    <title>Discussion</title>
    <p>Using meraculous, a new short-read assembler, we have shown that high quality, near-complete <italic>de novo</italic> assemblies of small fungal genomes can be produced using deep short-read paired-end datasets. Half the genome assembly is contained in contigs of at least 101 kbp (N50 contig), and in scaffolds of at least 269 kbp (N50 scaffold). Adding a modest number of fosmid-ends allows recovery of entire chromosomes. Approximately 4.2% of the genome (650 kbp out of 15.4 Mbp) is not captured in the assembly, representing repetitive sequences, notably including telomeric sequences, long retrotransposons, and high copy tandemly-arrayed elements. Comparing the assembly consensus to the previously finished and validated reference sequence, we find no errors across the entire assembly.</p>
    <p>Our algorithm incorporates elements used in other long- and short-read paired-end assemblers, in a new combination and with new parallel implementations and heuristics based on our analysis of the <italic>Pichia</italic> dataset. The deBruijn graph, first applied to shotgun sequence assembly nearly a decade ago by Pevzner <italic>et al.</italic>
<xref rid="pone.0023501-Pevzner1" ref-type="bibr">[24]</xref> (following previous introduction in sequencing by hybridization <xref rid="pone.0023501-Idury1" ref-type="bibr">[36]</xref>; see also <xref rid="pone.0023501-Myers2" ref-type="bibr">[37]</xref>, <xref rid="pone.0023501-Myers3" ref-type="bibr">[38]</xref>), is the basis for all of the current generation of short-read assemblers <xref rid="pone.0023501-Pop2" ref-type="bibr">[18]</xref>. In our approach, however, we do not construct the full de Bruijn graph defined by the reads. Instead, we limit ourselves to the “U-U” subgraph that includes only likely <italic>k</italic>-mers from the genome that possess unique, reciprocal, high quality extensions at each end. In this way we remove most error-containing <italic>k</italic>-mers and produce a graph that consists of a collection of simple unbranched paths. These paths are closely related to the “unitigs” of the Celera Assembler <xref rid="pone.0023501-Myers1" ref-type="bibr">[30]</xref> and the “unipaths” of ALLPATHS <xref rid="pone.0023501-Butler1" ref-type="bibr">[22]</xref> in that they represent genomic regions whose assembly into contigs is uncontested based on read-read alignments or their equivalent in the deBruijn formulation. A related approach is taken in SOAPdenovo <xref rid="pone.0023501-Li2" ref-type="bibr">[11]</xref>. The U-U subgraph can be readily produced with a memory footprint that scales linearly with the genome size, a characteristic of de Bruijn graph based methods.</p>
    <p>Overall, memory usage in Meraculous depends not only on the size of the U-U subgraph, but also on the parallelization parameters used in the stages that preprocess the U-U subgraph. By dividing the k-mer sample space into disparate chunks, peak RAM usage and running time can be adjusted to user requirements. For instance, on our 32-core test machine, one can optimize for speed by allowing all <italic>k</italic>-mer sample chunks to be processed simultaneously: in this case, the <italic>Pichia</italic> assembly runs in 3 hours 37 minutes with a peak RAM footprint of 153 Gb. By varying the number of simultaneously-processed chunks processed on a per-stage basis, one can optimize for RAM use: the <italic>Pichia</italic> assembly then runs in 12 hours 28 minutes but with a peak RAM footprint of 7.72 Gb. In general, given <italic>P</italic> chunks preprocessed simultaneously out of <italic>C</italic> total chunks of the <italic>k</italic>-mer space of <italic>M</italic> mers and genome size <italic>G</italic>, the peak RAM <italic>R</italic> is characterized by <italic>R = O(P * M/C)+3.7 * G</italic>. In other words, meraculous can be made to fit (at the expense of increased runtime) into an arbitrarily small RAM footprint down to the limit of the U-U subgraph hash itself which, in practice, requires ∼3.7 bytes per base in the genome to store.</p>
    <p>Our implementation avoids explicit error correction <xref rid="pone.0023501-Pevzner1" ref-type="bibr">[24]</xref>, <xref rid="pone.0023501-Chaisson3" ref-type="bibr">[28]</xref>, a feature of most other short-read deBruijn assemblers <xref rid="pone.0023501-Simpson1" ref-type="bibr">[9]</xref>, <xref rid="pone.0023501-Li2" ref-type="bibr">[11]</xref>, <xref rid="pone.0023501-Chaisson2" ref-type="bibr">[19]</xref>, <xref rid="pone.0023501-Zerbino1" ref-type="bibr">[20]</xref>, <xref rid="pone.0023501-Butler1" ref-type="bibr">[22]</xref>, in favor of a brute force approach that is made possible by the quality and quantity of current Illumina data. Error correction takes advantage of the preponderance of accurate sequence to identify outliers (<italic>e.g.</italic>, error-containing <italic>k</italic>-mers that occur only a few times in the dataset when the typical true <italic>k</italic>-mer from that genomic region occurs dozens or hundreds of times). Assuming that such <italic>k</italic>-mers contain errors, the error-correction approach seeks the minimal sequence change to convert these outlying <italic>k</italic>-mers into sequences found more often in the data <xref rid="pone.0023501-Pevzner1" ref-type="bibr">[24]</xref>. While this approach is clearly feasible in uniquely assemblable regions of strong coverage, it is also not necessary there, since the correct assembly will often be evident anyway due to overwhelming depth of accurate sequence. From this perspective, it is sufficient to simply ignore the erroneous <italic>k</italic>-mer, as we do here. Our algorithm identifies these outliers (using a combined quality and depth filter) and disregards them in a robust way that does not degrade the assembly but allows the algorithms and their implementation to be simplified and streamlined.</p>
    <p>Using mate-pair information, scaffolds of nominally single copy sequences can be constructed. Gaps captured within these scaffolds (comprising repeats) can then be back-filled using paired-ends, as first described in <xref rid="pone.0023501-Weber1" ref-type="bibr">[16]</xref> and robustly implemented for large-scale assembly in the Celera Assembler <xref rid="pone.0023501-Myers1" ref-type="bibr">[30]</xref>. This “gap-filling” step allows residual errors to be corrected through the construction of consensus sequences. Thus by combining the efficient deBruijn approach for determining an initial set of contigs, with a read-based approach using mate-pairs to link across and fill in gaps between the initial contigs, meraculous can produce accurate assemblies of short-read datasets.</p>
    <p>A limitation of the current meraculous algorithm is that it assumes data from a haploid genome. In a diploid sample, heterozygous single nucleotide variations generate forks in the deBruijn graph, and our algorithm's reliance on the linear U-U component of the graph as a starting point for making contigs must be augmented to allow for bubbles in the graph that arise from such heterozygous regions.</p>
  </sec>
  <sec sec-type="supplementary-material" id="s5">
    <title>Supporting Information</title>
    <supplementary-material content-type="local-data" id="pone.0023501.s001">
      <label>Table S1</label>
      <caption>
        <p><bold>Summary of unassembled genome sequences.</bold> This table lists the locations, sizes, and annotations of 38 regions of the <italic>Pichia</italic> genome larger than 5 kb which contain 62% of the sequence missing from the meraculous assembly.</p>
        <p>(DOC)</p>
      </caption>
      <media xlink:href="pone.0023501.s001.doc">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0023501.s002">
      <label>Text S1</label>
      <caption>
        <p><bold>Optimal Choice of </bold><inline-formula><inline-graphic xlink:href="pone.0023501.e055.jpg" mimetype="image"/></inline-formula><bold>.</bold> This note presents a formal calculation of the contig-number minimizing choice of the assembly parameter <italic>d<sub>min</sub></italic>.</p>
        <p>(DOC)</p>
      </caption>
      <media xlink:href="pone.0023501.s002.doc">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="pone.0023501.s003">
      <label>Text S2</label>
      <caption>
        <p><bold>Timing and memory comparisons with other assemblers.</bold> This note details the protocols and computational resources we used to perform assemblies of <italic>Pichia</italic> with alternative available assembler software.</p>
        <p>(DOC)</p>
      </caption>
      <media xlink:href="pone.0023501.s003.doc">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <p>We thank Len Pennacchio, Alex Sczyrba, and Jeff Froula for useful discussions.</p>
  </ack>
  <fn-group>
    <fn fn-type="COI-statement">
      <p><bold>Competing Interests: </bold>Gary P. Schroth and Shujun Luo are employees of Illumina and are also shareholders in the company. This does not alter the authors' adherence to all the PLoS ONE policies on sharing data and materials related to this study.</p>
    </fn>
    <fn fn-type="financial-disclosure">
      <p><bold>Funding: </bold>This work was performed under the auspices of the U.S. Department of Energy's Office of Science, Biological and Environmental Research Program, and by the University of California, Lawrence Berkeley National Laboratory under contract No. DE-AC02-05CH11231, and at the Center for Integrative Genomics at UC Berkeley supported by a grant from the Gordon and Betty Moore Foundation. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript. Authors G.P.S. and S.L. are employees of Illumina and are also shareholders in the company. Illumina Inc. funded data collection and their contributions to this manuscript.</p>
    </fn>
  </fn-group>
  <ref-list>
    <title>References</title>
    <ref id="pone.0023501-Metzker1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Metzker</surname>
            <given-names>ML</given-names>
          </name>
        </person-group>
        <year>2010</year>
        <article-title>Sequencing technologies - the next generation.</article-title>
        <source>Nat Rev Genet</source>
        <volume>11</volume>
        <fpage>31</fpage>
        <lpage>46</lpage>
        <pub-id pub-id-type="pmid">19997069</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Margulies1">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Margulies</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Egholm</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Altman</surname>
            <given-names>WE</given-names>
          </name>
          <name>
            <surname>Attiya</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bader</surname>
            <given-names>JS</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2005</year>
        <article-title>Genome sequencing in microfabricated high-density picolitre reactors.</article-title>
        <source>Nature</source>
        <volume>437</volume>
        <fpage>376</fpage>
        <lpage>380</lpage>
        <pub-id pub-id-type="pmid">16056220</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Bentley1">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bentley</surname>
            <given-names>DR</given-names>
          </name>
        </person-group>
        <year>2006</year>
        <article-title>Whole-genome re-sequencing.</article-title>
        <source>Curr Opin Genet Dev</source>
        <volume>16</volume>
        <fpage>545</fpage>
        <lpage>552</lpage>
        <pub-id pub-id-type="pmid">17055251</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Wheeler1">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wheeler</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Srinivasan</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Egholm</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Shen</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2008</year>
        <article-title>The complete genome of an individual by massively parallel DNA sequencing.</article-title>
        <source>Nature</source>
        <volume>452</volume>
        <fpage>872</fpage>
        <lpage>876</lpage>
        <pub-id pub-id-type="pmid">18421352</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Bentley2">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bentley</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Balasubramanian</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Swerdlow</surname>
            <given-names>HP</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>GP</given-names>
          </name>
          <name>
            <surname>Milton</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2008</year>
        <article-title>Accurate whole human genome sequencing using reversible terminator chemistry.</article-title>
        <source>Nature</source>
        <volume>456</volume>
        <fpage>53</fpage>
        <lpage>59</lpage>
        <pub-id pub-id-type="pmid">18987734</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Smith1">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Smith</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Peckham</surname>
            <given-names>HE</given-names>
          </name>
          <name>
            <surname>Makowsky</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Tao</surname>
            <given-names>W</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2008</year>
        <article-title>Rapid whole-genome mutational profiling using next-generation sequencing technologies.</article-title>
        <source>Genome Res</source>
        <volume>18</volume>
        <fpage>1638</fpage>
        <lpage>1642</lpage>
        <pub-id pub-id-type="pmid">18775913</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Pop1">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <year>2008</year>
        <article-title>Bioinformatics challenges of new sequencing technology.</article-title>
        <source>Trends Genet</source>
        <volume>24</volume>
        <fpage>142</fpage>
        <lpage>149</lpage>
        <pub-id pub-id-type="pmid">18262676</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Flicek1">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Flicek</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <year>2009</year>
        <article-title>Sense from sequence reads: methods for alignment and assembly.</article-title>
        <source>Nat Methods</source>
        <volume>6</volume>
        <fpage>S6</fpage>
        <lpage>S12</lpage>
        <pub-id pub-id-type="pmid">19844229</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Simpson1">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Simpson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Schein</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SJ</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2009</year>
        <article-title>ABySS: a parallel assembler for short read sequence data.</article-title>
        <source>Genome Res</source>
        <volume>19</volume>
        <fpage>1117</fpage>
        <lpage>1123</lpage>
        <pub-id pub-id-type="pmid">19251739</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Li1">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Fan</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Tian</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>He</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2010</year>
        <article-title>The sequence and de novo assembly of the giant panda genome.</article-title>
        <source>Nature</source>
        <volume>463</volume>
        <fpage>311</fpage>
        <lpage>317</lpage>
        <pub-id pub-id-type="pmid">20010809</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Li2">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Zhu</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Ruan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Qian</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Fang</surname>
            <given-names>X</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2010</year>
        <article-title>De novo assembly of human genomes with massively parallel short read sequencing.</article-title>
        <source>Genome Res</source>
        <volume>20</volume>
        <fpage>265</fpage>
        <lpage>272</lpage>
        <pub-id pub-id-type="pmid">20019144</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Schuster1">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schuster</surname>
            <given-names>SC</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Ratan</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Tomsho</surname>
            <given-names>LP</given-names>
          </name>
          <name>
            <surname>Giardine</surname>
            <given-names>B</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2010</year>
        <article-title>Complete Khoisan and Bantu genomes from southern Africa.</article-title>
        <source>Nature</source>
        <volume>463</volume>
        <fpage>943</fpage>
        <lpage>947</lpage>
        <pub-id pub-id-type="pmid">20164927</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Edwards1">
      <label>13</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edwards</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Voss</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Rice</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Civitello</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Stegemann</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <year>1990</year>
        <article-title>Automated DNA sequencing of the human HPRT locus.</article-title>
        <source>Genomics</source>
        <volume>6</volume>
        <fpage>593</fpage>
        <lpage>608</lpage>
        <pub-id pub-id-type="pmid">2341149</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Edwards2">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Edwards</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Caskey</surname>
            <given-names>CT</given-names>
          </name>
        </person-group>
        <year>1991</year>
        <article-title>Closure strategies for random DNA sequencing.</article-title>
        <source>Methods: A Companion to Methods in Enzymology</source>
        <volume>3</volume>
        <fpage>41</fpage>
        <lpage>47</lpage>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Roach1">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Roach</surname>
            <given-names>JC</given-names>
          </name>
          <name>
            <surname>Boysen</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Wang</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Hood</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <year>1995</year>
        <article-title>Pairwise end sequencing: a unified approach to genomic mapping and sequencing.</article-title>
        <source>Genomics</source>
        <volume>26</volume>
        <fpage>345</fpage>
        <lpage>353</lpage>
        <pub-id pub-id-type="pmid">7601461</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Weber1">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weber</surname>
            <given-names>JL</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <year>1997</year>
        <article-title>Human whole-genome shotgun sequencing.</article-title>
        <source>Genome Res</source>
        <volume>7</volume>
        <fpage>401</fpage>
        <lpage>409</lpage>
        <pub-id pub-id-type="pmid">9149936</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Chaisson1">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chaisson</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Brinza</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <year>2009</year>
        <article-title>De novo fragment assembly with short mate-paired reads: Does the read length matter?</article-title>
        <source>Genome Res</source>
        <volume>19</volume>
        <fpage>336</fpage>
        <lpage>346</lpage>
        <pub-id pub-id-type="pmid">19056694</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Pop2">
      <label>18</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <year>2009</year>
        <article-title>Genome assembly reborn: recent computational challenges.</article-title>
        <source>Brief Bioinform</source>
        <volume>10</volume>
        <fpage>354</fpage>
        <lpage>366</lpage>
        <pub-id pub-id-type="pmid">19482960</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Chaisson2">
      <label>19</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chaisson</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <year>2008</year>
        <article-title>Short read fragment assembly of bacterial genomes.</article-title>
        <source>Genome Res</source>
        <volume>18</volume>
        <fpage>324</fpage>
        <lpage>330</lpage>
        <pub-id pub-id-type="pmid">18083777</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Zerbino1">
      <label>20</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <year>2008</year>
        <article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs.</article-title>
        <source>Genome Res</source>
        <volume>18</volume>
        <fpage>821</fpage>
        <lpage>829</lpage>
        <pub-id pub-id-type="pmid">18349386</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Zerbino2">
      <label>21</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>McEwen</surname>
            <given-names>GK</given-names>
          </name>
          <name>
            <surname>Margulies</surname>
            <given-names>EH</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <year>2009</year>
        <article-title>Pebble and rock band: heuristic resolution of repeats and scaffolding in the velvet short-read de novo assembler.</article-title>
        <source>PLoS One</source>
        <volume>4</volume>
        <fpage>e8407</fpage>
        <pub-id pub-id-type="pmid">20027311</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Butler1">
      <label>22</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Butler</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>MacCallum</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Kleber</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Shlyakhter</surname>
            <given-names>IA</given-names>
          </name>
          <name>
            <surname>Belmonte</surname>
            <given-names>MK</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2008</year>
        <article-title>ALLPATHS: de novo assembly of whole-genome shotgun microreads.</article-title>
        <source>Genome Res</source>
        <volume>18</volume>
        <fpage>810</fpage>
        <lpage>820</lpage>
        <pub-id pub-id-type="pmid">18340039</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Maccallum1">
      <label>23</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Maccallum</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Przybylski</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gnerre</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Burton</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Shlyakhter</surname>
            <given-names>I</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2009</year>
        <article-title>ALLPATHS 2: small genomes assembled accurately and with high continuity from short paired reads.</article-title>
        <source>Genome Biol</source>
        <volume>10</volume>
        <fpage>R103</fpage>
        <pub-id pub-id-type="pmid">19796385</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Pevzner1">
      <label>24</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
          <name>
            <surname>Tang</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Waterman</surname>
            <given-names>MS</given-names>
          </name>
        </person-group>
        <year>2001</year>
        <article-title>An Eulerian path approach to DNA fragment assembly.</article-title>
        <source>Proc Natl Acad Sci U S A</source>
        <volume>98</volume>
        <fpage>9748</fpage>
        <lpage>9753</lpage>
        <pub-id pub-id-type="pmid">11504945</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Jeffries1">
      <label>25</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jeffries</surname>
            <given-names>TW</given-names>
          </name>
          <name>
            <surname>Jin</surname>
            <given-names>YS</given-names>
          </name>
        </person-group>
        <year>2004</year>
        <article-title>Metabolic engineering for improved fermentation of pentoses by yeasts.</article-title>
        <source>Appl Microbiol Biotechnol</source>
        <volume>63</volume>
        <fpage>495</fpage>
        <lpage>509</lpage>
        <pub-id pub-id-type="pmid">14595523</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Jeffries2">
      <label>26</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jeffries</surname>
            <given-names>TW</given-names>
          </name>
          <name>
            <surname>Grigoriev</surname>
            <given-names>IV</given-names>
          </name>
          <name>
            <surname>Grimwood</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Laplaza</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Aerts</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2007</year>
        <article-title>Genome sequence of the lignocellulose-bioconverting and xylose-fermenting yeast Pichia stipitis.</article-title>
        <source>Nat Biotechnol</source>
        <volume>25</volume>
        <fpage>319</fpage>
        <lpage>326</lpage>
        <pub-id pub-id-type="pmid">17334359</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Hayashi1">
      <label>27</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hayashi</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Morooka</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Yamamoto</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Fujita</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Isono</surname>
            <given-names>K</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2006</year>
        <article-title>Highly accurate genome sequences of Escherichia coli K-12 strains MG1655 and W3110.</article-title>
        <source>Mol Syst Biol</source>
        <volume>2</volume>
        <fpage>2006 0007</fpage>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Chaisson3">
      <label>28</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chaisson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Tang</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <year>2004</year>
        <article-title>Fragment assembly with short reads.</article-title>
        <source>Bioinformatics</source>
        <volume>20</volume>
        <fpage>2067</fpage>
        <lpage>2074</lpage>
        <pub-id pub-id-type="pmid">15059830</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Altschul1">
      <label>29</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Altschul</surname>
            <given-names>SF</given-names>
          </name>
          <name>
            <surname>Gish</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <year>1990</year>
        <article-title>Basic local alignment search tool.</article-title>
        <source>J Mol Biol</source>
        <volume>215</volume>
        <fpage>403</fpage>
        <lpage>410</lpage>
        <pub-id pub-id-type="pmid">2231712</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Myers1">
      <label>30</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
          <name>
            <surname>Sutton</surname>
            <given-names>GG</given-names>
          </name>
          <name>
            <surname>Delcher</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Dew</surname>
            <given-names>IM</given-names>
          </name>
          <name>
            <surname>Fasulo</surname>
            <given-names>DP</given-names>
          </name>
          <etal/>
        </person-group>
        <year>2000</year>
        <article-title>A whole-genome assembly of Drosophila.</article-title>
        <source>Science</source>
        <volume>287</volume>
        <fpage>2196</fpage>
        <lpage>2204</lpage>
        <pub-id pub-id-type="pmid">10731133</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Sutton1">
      <label>31</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sutton</surname>
            <given-names>GG</given-names>
          </name>
          <name>
            <surname>White</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Adams</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Kerlavage</surname>
            <given-names>AR</given-names>
          </name>
        </person-group>
        <year>1995</year>
        <article-title>TIGR Assembler: A new tool for assembling large shotgun sequencing projects.</article-title>
        <source>Genome Science and Technology</source>
        <volume>1</volume>
        <fpage>9</fpage>
        <lpage>19</lpage>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Lander1">
      <label>32</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lander</surname>
            <given-names>ES</given-names>
          </name>
          <name>
            <surname>Waterman</surname>
            <given-names>MS</given-names>
          </name>
        </person-group>
        <year>1988</year>
        <article-title>Genomic mapping by fingerprinting random clones: a mathematical analysis.</article-title>
        <source>Genomics</source>
        <volume>2</volume>
        <fpage>231</fpage>
        <lpage>239</lpage>
        <pub-id pub-id-type="pmid">3294162</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Ewing1">
      <label>33</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ewing</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <year>1998</year>
        <article-title>Base-calling of automated sequencer traces using phred. II. Error probabilities.</article-title>
        <source>Genome Res</source>
        <volume>8</volume>
        <fpage>186</fpage>
        <lpage>194</lpage>
        <pub-id pub-id-type="pmid">9521922</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Warren1">
      <label>34</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Warren</surname>
            <given-names>RL</given-names>
          </name>
          <name>
            <surname>Sutton</surname>
            <given-names>GG</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Holt</surname>
            <given-names>RA</given-names>
          </name>
        </person-group>
        <year>2007</year>
        <article-title>Assembling millions of short DNA sequences using SSAKE.</article-title>
        <source>Bioinformatics</source>
        <volume>23</volume>
        <fpage>500</fpage>
        <lpage>501</lpage>
        <pub-id pub-id-type="pmid">17158514</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Hernandez1">
      <label>35</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hernandez</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Francois</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Farinelli</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Osteras</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Schrenzel</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <year>2008</year>
        <article-title>De novo bacterial genome sequencing: millions of very short reads assembled on a desktop computer.</article-title>
        <source>Genome Res</source>
        <volume>18</volume>
        <fpage>802</fpage>
        <lpage>809</lpage>
        <pub-id pub-id-type="pmid">18332092</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Idury1">
      <label>36</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Idury</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Waterman</surname>
            <given-names>MS</given-names>
          </name>
        </person-group>
        <year>1995</year>
        <article-title>A new algorithm for DNA sequence assembly.</article-title>
        <source>J Comput Biol</source>
        <volume>2</volume>
        <fpage>291</fpage>
        <lpage>306</lpage>
        <pub-id pub-id-type="pmid">7497130</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Myers2">
      <label>37</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <year>1995</year>
        <article-title>Toward simplifying and accurately formulating fragment assembly.</article-title>
        <source>J Comput Biol</source>
        <volume>2</volume>
        <fpage>275</fpage>
        <lpage>290</lpage>
        <pub-id pub-id-type="pmid">7497129</pub-id>
      </element-citation>
    </ref>
    <ref id="pone.0023501-Myers3">
      <label>38</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <year>2005</year>
        <article-title>The fragment assembly string graph.</article-title>
        <source>Bioinformatics</source>
        <volume>21</volume>
        <issue>Suppl 2</issue>
        <fpage>ii79</fpage>
        <lpage>85</lpage>
        <pub-id pub-id-type="pmid">16204131</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
