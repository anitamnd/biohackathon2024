<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Front Neuroinform</journal-id>
    <journal-id journal-id-type="iso-abbrev">Front Neuroinform</journal-id>
    <journal-id journal-id-type="publisher-id">Front. Neuroinform.</journal-id>
    <journal-title-group>
      <journal-title>Frontiers in Neuroinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1662-5196</issn>
    <publisher>
      <publisher-name>Frontiers Media S.A.</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7393253</article-id>
    <article-id pub-id-type="doi">10.3389/fninf.2020.00030</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Neuroscience</subject>
        <subj-group>
          <subject>Original Research</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Experimental Pipeline (Expipe): A Lightweight Data Management Platform to Simplify the Steps From Experiment to Data Analysis</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Lepperød</surname>
          <given-names>Mikkel Elle</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff2">
          <sup>2</sup>
        </xref>
        <xref ref-type="corresp" rid="c001">
          <sup>*</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/530208/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Dragly</surname>
          <given-names>Svenn-Arne</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff3">
          <sup>3</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/501615/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Buccino</surname>
          <given-names>Alessio Paolo</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff4">
          <sup>4</sup>
        </xref>
        <xref ref-type="aff" rid="aff5">
          <sup>5</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/599877/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Mobarhan</surname>
          <given-names>Milad Hobbi</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff6">
          <sup>6</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/502446/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Malthe-Sørenssen</surname>
          <given-names>Anders</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff3">
          <sup>3</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/113946/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hafting</surname>
          <given-names>Torkel</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff2">
          <sup>2</sup>
        </xref>
        <uri xlink:type="simple" xlink:href="http://loop.frontiersin.org/people/530201/overview"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Fyhn</surname>
          <given-names>Marianne</given-names>
        </name>
        <xref ref-type="aff" rid="aff1">
          <sup>1</sup>
        </xref>
        <xref ref-type="aff" rid="aff6">
          <sup>6</sup>
        </xref>
      </contrib>
    </contrib-group>
    <aff id="aff1"><sup>1</sup><institution>Center for Integrative Neuroplasticity, University of Oslo</institution>, <addr-line>Oslo</addr-line>, <country>Norway</country></aff>
    <aff id="aff2"><sup>2</sup><institution>Institute of Basic Medical Sciences, University of Oslo</institution>, <addr-line>Oslo</addr-line>, <country>Norway</country></aff>
    <aff id="aff3"><sup>3</sup><institution>Department of Physics, University of Oslo</institution>, <addr-line>Oslo</addr-line>, <country>Norway</country></aff>
    <aff id="aff4"><sup>4</sup><institution>Department of Informatics, University of Oslo</institution>, <addr-line>Oslo</addr-line>, <country>Norway</country></aff>
    <aff id="aff5"><sup>5</sup><institution>Department of Biosystems Science and Engineering, ETH</institution>, <addr-line>Zurich</addr-line>, <country>Switzerland</country></aff>
    <aff id="aff6"><sup>6</sup><institution>Department of Biosciences, University of Oslo</institution>, <addr-line>Oslo</addr-line>, <country>Norway</country></aff>
    <author-notes>
      <fn fn-type="edited-by">
        <p>Edited by: David A. Gutman, Emory University, United States</p>
      </fn>
      <fn fn-type="edited-by">
        <p>Reviewed by: Pietro Pinoli, Politecnico di Milano, Italy; Andrew P. Davison, UMR9197 Institut des Neurosciences Paris Saclay (Neuro-PSI), France</p>
      </fn>
      <corresp id="c001">*Correspondence: Mikkel Elle Lepperød <email>bjornmik@uio.no</email></corresp>
    </author-notes>
    <pub-date pub-type="epub">
      <day>24</day>
      <month>7</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>14</volume>
    <elocation-id>30</elocation-id>
    <history>
      <date date-type="received">
        <day>30</day>
        <month>10</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>15</day>
        <month>6</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2020 Lepperød, Dragly, Buccino, Mobarhan, Malthe-Sørenssen, Hafting and Fyhn.</copyright-statement>
      <copyright-year>2020</copyright-year>
      <copyright-holder>Lepperød, Dragly, Buccino, Mobarhan, Malthe-Sørenssen, Hafting and Fyhn</copyright-holder>
      <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License (CC BY). The use, distribution or reproduction in other forums is permitted, provided the original author(s) and the copyright owner(s) are credited and that the original publication in this journal is cited, in accordance with accepted academic practice. No use, distribution or reproduction is permitted which does not comply with these terms.</license-p>
      </license>
    </permissions>
    <abstract>
      <p>As experimental neuroscience is moving toward more integrative approaches, with a variety of acquisition techniques covering multiple spatiotemporal scales, data management is becoming increasingly challenging for neuroscience laboratories. Often, datasets are too large to practically be stored on a laptop or a workstation. The ability to query metadata collections without retrieving complete datasets is therefore critical to efficiently perform new analyses and explore the data. At the same time, new experimental paradigms lead to constantly changing specifications for the metadata to be stored. Despite this, there is currently a serious lack of agile software tools for data management in neuroscience laboratories. To meet this need, we have developed Expipe, a lightweight data management framework that simplifies the steps from experiment to data analysis. Expipe provides the functionality to store and organize experimental data and metadata for easy retrieval in exploration and analysis throughout the experimental pipeline. It is flexible in terms of defining the metadata to store and aims to solve the storage and retrieval challenges of data/metadata due to ever changing experimental pipelines. Due to its simplicity and lightweight design, we envision Expipe as an easy-to-use data management solution for experimental laboratories, that can improve provenance, reproducibility, and sharing of scientific projects.</p>
    </abstract>
    <kwd-group>
      <kwd>data management</kwd>
      <kwd>Python (programming language)</kwd>
      <kwd>open source software (OSS)</kwd>
      <kwd>analysis</kwd>
      <kwd>data sharing</kwd>
      <kwd>data base (DB)</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source id="cn001">Norges Forskningsråd<named-content content-type="fundref-id">10.13039/501100005416</named-content></funding-source>
        <award-id rid="cn001">217920</award-id>
        <award-id rid="cn001">231248</award-id>
      </award-group>
    </funding-group>
    <counts>
      <fig-count count="2"/>
      <table-count count="0"/>
      <equation-count count="0"/>
      <ref-count count="11"/>
      <page-count count="8"/>
      <word-count count="5261"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="s1">
    <title>1. Introduction</title>
    <p>Experimental neuroscience is increasingly moving toward an integrative understanding of phenomena by simultaneously collecting data with a wide range of techniques including behavioral tasks, electrophysiology, imaging and genetics. Datasets from these types of experiments span a wide range of spatial and temporal scales. Often, the experimental setup is not finalized or rigidly predefined before data acquisition begins. Results may thus require additional branches of experimentation or re-evaluation of the setup. For example, results may initiate additional behavioral studies, or combining electrophysiology with imaging data. Also, the majority of research today is carried out by research fellows employed on temporary contracts, imposing a challenge for both continuation of projects and data sharing. Put simply, projects usually organically grow and mature through the experimental timeline. Moreover, the need for multi-modal approaches in neuroscience makes data management ever more challenging, complicating data sharing and open collaboration.</p>
    <p>In this paper we introduce a data management tool called Expipe (Experimental pipeline) which enables data management to simply evolve and mature organically together with experiments in a semi-structured fashion.</p>
    <p>To improve reproducibility in neuroscience, several (larger) initiatives point toward tools that facilitate sharing of data and code (Crook et al., <xref rid="B1" ref-type="bibr">2013</xref>; Denker and Grün, <xref rid="B2" ref-type="bibr">2016</xref>; Zehl et al., <xref rid="B11" ref-type="bibr">2016</xref>; Gleeson et al., <xref rid="B4" ref-type="bibr">2017</xref>). Part of the data management challenge comes from the wide range of formats produced by different experimental paradigms. Moreover, with increased size of datasets, researchers are often unable to carry all their data around on their laptops or store them on workstations. The possibility to query a metadata collection without retrieving entire datasets is therefore becoming more important.</p>
    <p>Data and metadata managing tools typically differ in the amount of <italic>a priori</italic> imposed structure. In a structured database, fields are typically required to be predefined and are best suited for use cases where it is possible to predict the types of data and metadata that will be stored. In unstructured databases, fields typically evolve while the database is used and updated. Being highly flexibile, these types of databases are easy to use, but can be difficult to share across users as their evolved structure might not be intuitive or well-documented. The current tools that exist for experimental databases, can typically be described by one of those two categories.</p>
    <p>DataNet (HarkȩŻlak et al., <xref rid="B6" ref-type="bibr">2014</xref>) is a data management method and architecture that defines repositories which can be accessed by any programming language through REST-based APIs. The goal of DataNet is to deliver a scalable solution that facilitates reproducibility and is capable of handling large data volumes. DataNet is designed to be run on top of a platform-as-a-service (PaaS) provider, such as CloudFoundry. While DataNet can be regarded as an advanced data management solution, its setup and usage is not specific to neuroscience and may require existing experience in data management solutions.</p>
    <p>Another effort toward a lightweight data management software is dtool (Olsson and Hartley, <xref rid="B8" ref-type="bibr">2019</xref>). Dtool was mainly designed for bioinformatics/genomics data and it provides a solution to package data and metadata together. Dtool implements a CLI and a simple Python API to create datasets, and metadata are provided by the user when a new dataset is generated. The dtool framework, however, does not enforce or suggest any organization of the dataset, leaving it to the user.</p>
    <p>Another proposed solution to organize and store complex metadata is the odML (Grewe et al., <xref rid="B5" ref-type="bibr">2011</xref>) framework. Using odMLtables (Sprenger et al., <xref rid="B9" ref-type="bibr">2019</xref>) it is possible to organize and store complex metadata in a hierarchical format and collect, manipulate, visualize, and store metadata in tabular representations. However, this platform imposes no structure on individual files that are generated during experiments, which may lead to metadata e.g., not being stored alongside data in a modularized and searchable fashion and may thus hamper shareability and usability.</p>
    <p>The above data management systems and tools either impose little structure on the stored data or metadata, leaving it up to the researcher to design a custom storage specification, or assume particular fields that need to be predefined such as in DataJoint<xref ref-type="fn" rid="fn0001"><sup>1</sup></xref>. However, research is dynamic in nature and new discoveries often change what data and metadata within datasets should be in focus. An ideal data management solution for neuroscience laboratories needs to be flexible and adaptable to various experimental paradigms (Denker and Grün, <xref rid="B2" ref-type="bibr">2016</xref>).</p>
    <p>Alyx<xref ref-type="fn" rid="fn0002"><sup>2</sup></xref> is a notable exception that for the most part has few assumptions about the metadata to be stored, and allows its users to store arbitrary metadata in JSON fields. However, like many other data management solutions, Alyx requires manual installation, configuration, and maintenance of a server to be used in a multi-user environment. Solutions that instead are based on existing hosting providers can significantly lower the threshold for adapting a data management solution in a laboratory.</p>
    <p>To address the shortcomings of existing solutions, we have created Expipe, a flexible, lightweight system for data handling. We propose a semi-structured data management platform that is lightweight in nature and requires little planning and maintenance to facilitate a broad range of experiments in neuroscience. Being modular and providing both human and machine readable metadata Expipe also support provenance tracking with GIN<xref ref-type="fn" rid="fn0003"><sup>3</sup></xref> and Git Large File Storage<xref ref-type="fn" rid="fn0004"><sup>4</sup></xref>.</p>
    <p>To organize metadata for data collected in the lab, an Expipe Project contains the following objects: Modules, Actions, Entities, and Templates (<xref ref-type="fig" rid="F1">Figure 1A</xref>). The concepts are abstract, making Expipe flexible to use in many different scenarios. Also, we made the concepts few and simple to avoid introducing an overly abstract framework that appears foreign to other researchers.</p>
    <fig id="F1" position="float">
      <label>Figure 1</label>
      <caption>
        <p>Expipe data model. <bold>(A)</bold> An Expipe Project contains Entities and Actions. Entities represent the long-lived elements in a project (e.g., experimental subjects). Actions define events that occurred at a certain time (e.g., an experiment or a surgery). Modules contain metadata about a Project, an Action, or an Entity. Templates can be used to pre-define Modules. <bold>(B)</bold> A typical working example, using Expipe to structure an experimental pipeline. In this example, there is one Entity (experimental subject: Rat #0007) and three Actions with correspondent Modules: a surgery, a recording, and an analysis.</p>
      </caption>
      <graphic xlink:href="fninf-14-00030-g0001"/>
    </fig>
    <p>As dataset sizes can grow very quickly, making it slow to explore a scientific project, the capability of querying metadata alone is essential to get an overview of the project and possibly to select subsets of the database for further processing. In Expipe, <bold>Modules</bold> sit at the core of the system and contain metadata describing Projects, Actions and Entities in detail. The Modules typically specify metadata about the equipment, environment, or subjects, such as the numerical aperture of a microscope lens, the serial number of an acquisition system, or the temperature of a room. <bold>Actions</bold> define events that occurred at a specific time, such as an experiment, an analysis, or a simulation (<xref ref-type="fig" rid="F1">Figure 1B</xref>). Actions have a few specific attributes, such as a timestamp, and store detailed metadata in Modules. <bold>Entities</bold> are long-lived things that are used in an Action, typically the ID of an experimental subject. Actions refer to Entities, but they do not link directly to them. Messages are user specific lines of text added to actions, such as notes. As Modules can be tedious to define each time an Action is created, <bold>Templates</bold> can be used to ease this process by holding predefined information typically added to Modules. We will cover Expipe objects in more detail in section 2.</p>
    <p>A common obstacle in designing a general data management solution for experimental data is to choose the right database schema in advance. For that reason, Expipe uses a NoSQL key-value database model which is flexible in terms of defining the metadata to store. Rather than forcing the user to select a database schema ahead of time, Expipe uses implicit schemas in the form of what we call module Templates. These are similar in scope to odML terminologies and to a large extent also compatible with odML. Templates can be used to create Modules, which are a <italic>snapshot</italic> of the Template at the time of creation. Templates can change over time to reflect changes in the Project without affecting existing Modules, since the Modules are copied from, rather than linked to Templates. Records in a relational database, in comparison, are tied to a schema.</p>
    <p>Expipe is portable and has few dependencies. By default, Expipe uses the file system for storing metadata, which means that no additional database installation or configuration is required. Moreover, we have written a reference implementation in Python and an extendable command line interface (CLI), making Expipe widely available to the scientific community. The Python API allows users to interact with Expipe programmatically. Additional Jupyter extensions are included with the API to provide a graphical user interface (GUI) that gives an overview of stored contents.</p>
    <p>Expipe is written with modularity in mind and can use NoSQL databases as backends, such as a Google Firebase<xref ref-type="fn" rid="fn0005"><sup>5</sup></xref>. However, the filesystem is used as a backend by default. One benefit with the filesystem backend is that it allows data to be stored close to the metadata, within the Expipe directory structure. The filesystem backend also allows Expipe to easily be combined with GIN or Git LFS to get full version control, safe synchronization between collaborators, and hosting for data sharing.</p>
    <p>Our goal has been to make Expipe a lightweight framework that can be adopted and used by researchers in laboratories with immediate data handling needs. To this end we present the Expipe data model and envisioned usage below.</p>
  </sec>
  <sec id="s2">
    <title>2. Expipe Walk-Through</title>
    <p>In this section we will present a step-by-step walk-through to the Expipe framework, by setting up an Expipe project for a sample application from neuroscience involving open-field foraging experiments on rats combining extracellular recordings of medial entorhinal cortex (MEC) and optogenetic stimulation. Expipe is available on PyPI<xref ref-type="fn" rid="fn0006"><sup>6</sup></xref> and can be installed with <monospace>pip</monospace>. For documentation, we refer to <ext-link ext-link-type="uri" xlink:href="https://expipe.readthedocs.io">https://expipe.readthedocs.io</ext-link>.</p>
    <sec>
      <title>2.1. Project</title>
      <p>First of all, we need to create an Expipe project. To create a Project using the Python API for Expipe, one simply needs to import the <monospace>expipe</monospace> package and run the <monospace>create_project</monospace> function:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0001.jpg"/>
      </p>
      <p>Expipe, by default, utilize the filesystem as a backend. This means that an organized set of folders and files are used. When our “project-x” is created, an Expipe folder named <monospace>project-x</monospace> will be created in the current working directory.</p>
      <p>An Expipe project will contain a collection of Actions, Entities, Templates, Messages and project Modules (<xref ref-type="fig" rid="F1">Figure 1A</xref>), which we will explain in the following sections. A typical working example of how to structure an experimental pipeline with Expipe is illustrated in <xref ref-type="fig" rid="F1">Figure 1B</xref>.</p>
    </sec>
    <sec>
      <title>2.2. Entities</title>
      <p>Entities represent physical or conceptual things, such as experimental equipment or subjects (like rats and mice). In our simple example, we assume we are using a single rat (ID 0007) for our experiments. We can then create the “rat” Entity using the <monospace>Project.create_entity</monospace> function:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0002.jpg"/>
      </p>
      <p>Similarly to the project creation, the above command will create a folder “0007” in the Entity folder of the project. All Entities have some common attributes, such as <monospace>tags</monospace>, <monospace>users</monospace>, <monospace>location</monospace>, <monospace>type</monospace> and <monospace>datetime</monospace>, which can be easily accessed and modified as follows:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0003.jpg"/>
      </p>
      <p>Entities are not static, but they can be updated over time following the course of a project. In our example, for instance, the Entity will undergo a modification when a surgery is performed, when a recording is made, or when the animal is euthanized. These types of modifications can further be described with Expipe Actions.</p>
    </sec>
    <sec>
      <title>2.3. Actions</title>
      <p>Actions represent things that have happened at a specific point in time, such as an experiment, an analysis, a surgery, or a simulation run. In our toy project, after we have performed an experiment, we can register it as an Action using the <monospace>Project.create_action</monospace> function:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0004.jpg"/>
      </p>
      <p>Actions can be updated over time (for instance, by adding processed data after some analysis). All Actions have some common attributes, such as <monospace>tags</monospace>, <monospace>users</monospace>, <monospace>location</monospace>, <monospace>type</monospace>, <monospace>entities</monospace> and <monospace>datetime</monospace>. In our example, we performed a 11 Hz optogenetics stimulation during the recording, hence we can add this piece of information as tags:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0005.jpg"/>
      </p>
      <p>These attributes are stored in the <monospace>attributes.yaml</monospace> text file in the Action folder.</p>
    </sec>
    <sec>
      <title>2.4. Modules</title>
      <p>So far, we have only handled common metadata for Actions and Entities, such as tags, dates, and users. However, further specific metadata can be stored using Modules. Actions, Entities and the Project as a whole can have Modules attached. A Module holds metadata in key-value form, which is similar to a map or hash table in popular programming languages. Modules are intended to hold metadata such as the equipment in an experiment, the protocol that was used, or a summary of the obtained results. For example, a Module could describe the arena for the open-field experiment that we performed as follows:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0006.jpg"/>
      </p>
      <p>Within the Action's folder there is another folder called <monospace>modules</monospace>, which contains each Module as a YAML file. The above code snippet would for instance produce a file name <monospace>tracking.yaml</monospace> with the following contents:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0007.jpg"/>
      </p>
      <p>This means that the metadata can be easily modified later, not only using the Python API, but also by manually editing the file in a text editor. Note that when using Expipe in combination with provenance tracking systems such as Git or GIN, these types of changes will be documented and thus not pose a risk for corruption of metadata integrity. The simple YAML syntax makes editing easy, without the need for a separate GUI only for editing purposes. Since many Actions could share the same metadata (e.g., several recording using the same open-field arena), the creation of Modules is facilitated by Templates.</p>
    </sec>
    <sec>
      <title>2.5. Templates</title>
      <p>Modules can be created from scratch, as above, or automatically be included based on a Template, by passing the <monospace>template</monospace> argument:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0008.jpg"/>
      </p>
      <p>This will copy the entire Template named <monospace>tracking</monospace> into a Module with the same name in the given Action. As some metadata can be Action-specific, the Module can then be edited, for instance by filling out any blank values in the Template, either manually or by using the Python API:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0009.jpg"/>
      </p>
      <p>In addition to Action Modules, Templates can also be used to instantiate Modules for Entities and the entire Project (<xref ref-type="fig" rid="F1">Figure 1A</xref>).</p>
      <p>There is minimal linking between metadata in Expipe to improve provenance. In a relational database, an Action would typically have links to the equipment used in a many-to-many relationship. However, Expipe is instead designed to copy the entire equipment Template into the Modules of the Action. This is to ensure that the exact state of the equipment is recorded in the Action, and removes the risk of inadvertently updating the state of the equipment for an existing Action.</p>
    </sec>
    <sec>
      <title>2.6. Messages</title>
      <p>When performing an experiment, it is important for the experimenter to log some messages as a future reminder for the analysis, such as noting that a recording channel is noisy or that possibly a good unit is found. In order to keep a virtual laboratory book, Messages can be added to an Action to add notes and comments:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0010.jpg"/>
      </p>
      <p>Messages are given a timestamp (the time of creation if not otherwise given), and stored within the Action.</p>
    </sec>
    <sec>
      <title>2.7. Data</title>
      <p>Actions, such as recordings, are usually performed by acquiring experimental data. Data can be easily linked to an Action in Expipe by using the <monospace>data</monospace> property of an Action, which is a map from a string ID (e.g., “tracking”) to a path relative to the <monospace>data</monospace> folder of an Action:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0011.jpg"/>
      </p>
      <p>Here, <monospace>exdir</monospace> (Dragly et al., <xref rid="B3" ref-type="bibr">2018</xref>) is used as the storage format.</p>
      <p>The absolute path of the file is retrieved as a native <monospace>pathlib</monospace> path by calling the <monospace>Action.data_path</monospace> function:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0012.jpg"/>
      </p>
      <p>By default the path is assumed to be stored relative to the action and the absolute path can be obtained with <monospace>Action.data_path</monospace>. However, it is possible to use the data field to store any string, for example, pointing to a directory on a server:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0013.jpg"/>
      </p>
      <p>We recommend storing the data directly in the “data” folder of an Action, since the data and metadata can be tracked together by version control systems such as GIN, or Git LFS.</p>
    </sec>
    <sec>
      <title>2.8. Expipe Command Line Interface</title>
      <p>The command line interface (CLI) provides minimal interaction with the Expipe environment. The CLI can be used to create and configure projects, and to list available Actions, Entities and Templates.</p>
      <p>It is easily extendable to add user specific functionalities by making an Expipe plugin. The addition of a plugin is performed in two stages. First, a Python package (named <monospace>my_package</monospace> in the following example) must be installed in the Python environment. Then, using the <monospace>click</monospace> Python package<xref ref-type="fn" rid="fn0007"><sup>7</sup></xref>, one can create a subclass of the <monospace>expipecli.utils.plugin.IPlugin</monospace> class and define the required commands within the <monospace>attach_to_cli</monospace> method:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0014.jpg"/>
      </p>
      <p>Finally, the newly created plugin must be added to the expipe Expipe framework:</p>
      <preformat>
expipe config global --add plugin my_package
</preformat>
      <p>The newly created CLI command can be now invoked through the Expipe CLI:</p>
      <preformat>
&gt;&gt;&gt; expipe my_extension

Welcome to Expipe!
</preformat>
      <p>For a comprehensive plugin used by the CINPLA laboratory to register, store, and analyze experimental recordings, we refer to the <monospace>expipe_plugin_cinpla</monospace> package (<ext-link ext-link-type="uri" xlink:href="https://github.com/CINPLA/expipe-plugin-cinpla">https://github.com/CINPLA/expipe-plugin-cinpla</ext-link>).</p>
    </sec>
    <sec>
      <title>2.9. Exploring Expipe Projects</title>
      <p>When an Expipe project has been created and populated, it can be explored through the API by simply looking in the filesystem (if this is the preferred backend) or with a Graphical User Interface (GUI).</p>
      <p>A basic GUI is available when using Expipe in a Jupyter notebook<xref ref-type="fn" rid="fn0008"><sup>8</sup></xref>. This GUI is based on IPython Widgets<xref ref-type="fn" rid="fn0009"><sup>9</sup></xref>. The widgets can be spawned by simply running the Expipe objects in a Jupyter cell, as shown in <xref ref-type="fig" rid="F2">Figure 2</xref>. In addition, an entire Expipe Project can be visualized using the available Browser:</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0015.jpg"/>
      </p>
      <p>In the Browser GUI all Actions with their attributes are indexed enabling the user to get an overview of the entire Project structure, and contents such as attributes, Messages, and Modules.</p>
      <fig id="F2" position="float">
        <label>Figure 2</label>
        <caption>
          <p>Graphical User Interface with Ipython widgets. <bold>(A)</bold> Simple overview GUI obtained when an Expipe object container (such as <monospace>project.actions</monospace>) is run in a Jupyter cell. <bold>(B)</bold> For a more comprehensive overview the Browser can also be attained, where the entire Project structure is indexed.</p>
        </caption>
        <graphic xlink:href="fninf-14-00030-g0002"/>
      </fig>
      <p>Expipe objects support queries like searching for Actions, Entities, and Modules, either through the GUI or with custom scripts by means of attributes. To perform more complex queries it can be convenient to combine object attributes such as tags etc. and metadata into a structured database, e.g., using Pandas<xref ref-type="fn" rid="fn0010"><sup>10</sup></xref>. The Expipe Browser allows to export all Actions and attributes to comma-separated values (CSV) file, which can then be e.g., loaded in Pandas. To include information from modules, custom scripts must be written, or if modules are created with odML, these can be combined with odMLtables (Sprenger et al., <xref rid="B9" ref-type="bibr">2019</xref>).</p>
      <p>Through the Python API, Expipe objects can be conveniently accessed as dictionaries in order to ease iteration, retrieval and setting. Actions, Modules and Entities can be iterated directly using <monospace>values()</monospace>, for both key and values <monospace>items()</monospace> is preferred</p>
      <p>
        <inline-graphic xlink:href="fninf-14-00030-i0016.jpg"/>
      </p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="s3">
    <title>3. Discussion</title>
    <p>In contemporary neuroscience, innovation happens also with discoveries of new types of measurement techniques and data. These may differ profoundly from existing data, when for example a new behavioral acquisition is added to electrophysiology or imaging setup. Such changes in the collected data within a project require a flexible data management system.</p>
    <p>In this paper, we present Expipe—a data management solution for neuroscience laboratories. Differently from existing solutions (HarkȩŻlak et al., <xref rid="B6" ref-type="bibr">2014</xref>; Olsson and Hartley, <xref rid="B8" ref-type="bibr">2019</xref>; Sprenger et al., <xref rid="B9" ref-type="bibr">2019</xref>)<xref ref-type="fn" rid="fn0001"><sup>1</sup></xref>, Expipe provides a semi-structured, but flexible data management solution specifically designed to encompass the life-cycle of experimental projects in neuroscience. Being lightweight and simple, relying on the familiar file-system backend to organize project components, we see Expipe as an accessible and easy-to-use tool for laboratories to start implementing a reproducible data management system in their research. This is a first and important step for (many) research groups that only use an <italic>ad-hoc</italic> solutions for organization of data and metadata.</p>
    <p>The Expipe structure based on Entities, Actions, and Modules shares similarities with the core structures of PROV-DM<xref ref-type="fn" rid="fn0011"><sup>11</sup></xref> (Entity, Activity, and Agent). The descriptions of an Entity is very similar in scope of what we envisioned as Entities. Activities are similar to Actions, although there is no required link between an Action and an Entity in Expipe. Finally, instead of an Agent, we have chosen to optionally have a user to be specified with an Action or an Entity.</p>
    <p>One of the main strengths of Expipe is its flexibility. However, flexibility can also be considered as a limitation. The definition of metadata (Modules) is left to the user, but we encourage the use of predefined Templates for data collection, ideally standardized by the scientific community, e.g., using odML terminologies (<ext-link ext-link-type="uri" xlink:href="https://terminologies.g-node.org/v1.1/terminologies.xml">https://terminologies.g-node.org/v1.1/terminologies.xml</ext-link>). Odml, however, is not designed as a database, rather as a way to structure metadata, one experiment at a time. Expipe can work together with odML to give structure and modularization, with Expipe providing structure to the Project (e.g., each experiment is an Action belonging to the project) and with odML giving structure at the metadata level, by using well-defined and community-accepted metadata fields.</p>
    <p>Another possible limitation of the Expipe framework is related to provenance. Our relaxed integrity verification in relations between objects simplifies structure and development, but also comes with some drawbacks. For instance, when adding an Entity to an Action, there is no insurance that this Entity exists or is described. Similarly, if a user is added to an Action attribute, the user name might, for instance, be incorrectly spelled. The structure in Expipe thus relies on its users to ensure provenance. Methods for user specific schemas that ensure provenance could be added through plugin functionality, e.g., by building a stricter control of object creation and annotation. For example, the <monospace>click</monospace> Python package required to create custom Expipe plugins provides a first check on argument types. Finally, an extended plugin functionality that accepts schemas at project creation could be added, this would also ease integration of Expipe into more complete data handling solutions.</p>
    <p>A typical project in neuroscience may contain many experiments, but only a subset of the experiments might be selected for further analysis. In this situation it is highly convenient to be able to efficiently search for indicators that signify inclusion in such a subset. This kind of search can be done by using Action attributes such as tags.</p>
    <p>Because of the lightweight nature of Expipe, it can easily be integrated with other data management software. For instance, workflows written in Snakemake (Köster and Rahmann, <xref rid="B7" ref-type="bibr">2012</xref>) can depend on files in an Expipe structure to define an automated analysis workflow. Data sharing platforms that are based on the file system, such as GIN, can easily track the files in an Expipe folder. Other tools, such as Git and Git LFS or Perforce<xref ref-type="fn" rid="fn0012"><sup>12</sup></xref> for version control, can also be used in combination with Expipe, with Git LFS being the preferred solution in our lab.</p>
    <p>Expipe does not impose any restriction on file formats, to improve flexibility and to enable dealing with different types of data. In our lab, we have used the Exdir format (Dragly et al., <xref rid="B3" ref-type="bibr">2018</xref>), which we developed as an alternative to HDF5, together with Expipe in several projects. Alternatively, a common standard that is being increasingly used by the neuroscience community and that we strongly recommend is Neurodata Without Boarders (NWB) (Teeters et al., <xref rid="B10" ref-type="bibr">2015</xref>). Other common file formats, such as image sequences, HDF5, and video files can be stored in the data directory of any Action. There is no limitation in Expipe to the types of files it can point to.</p>
    <p>Finally, Expipe uses the file system as backend for projects. However, this is not the only available solution. A Firebase backend is also supported, which stores the entire project as key value pairs using Google Firebase<xref ref-type="fn" rid="fn0005"><sup>5</sup></xref>. The file system backend could also support integration to cloud-based systems, such as Dropbox<xref ref-type="fn" rid="fn0013"><sup>13</sup></xref>, Google<xref ref-type="fn" rid="fn0014"><sup>14</sup></xref>, or Amazon S3<xref ref-type="fn" rid="fn0015"><sup>15</sup></xref>.</p>
  </sec>
  <sec sec-type="conclusions" id="s4">
    <title>4. Conclusion</title>
    <p>Experimental progress in neuroscience is often innovative in terms of how behavioral and data acquisition paradigms are used and combined. In such cases it can be difficult to <italic>a priori</italic> design a data and metadata structure that encompass all aspects of a project. On the other hand, having no structure at all can lead to problems with reproducibility and sharability. To solve this problem we propose a semi-structured data management platform that is lightweight in nature and requires little planning and maintenance to facilitate a broad range of experiments in neuroscience. Being modular and providing both human and machine readable metadata in text files Expipe can easily be combined with other tools such as odMLtables, Pandas, Git and Git LFS. Moreover, it is easy to search and create subsets of experiments within a large project making Expipe ideal both during data acquisition and data analysis. Expipe is a novel data management tool that solves many of the problems associated with existing data and metadata management software. Our hope is that Expipe will be adopted by the community and become a simple data management solution that can be integrated with other software for analysis workflows, provenance tracking, and data sharing.</p>
    <p>With Expipe we propose that a modularized semi-structured database model can enable an efficient and user friendly approach to handling complex experimental datasets.</p>
  </sec>
  <sec id="s5">
    <title>5. Significance Statement</title>
    <p>To facilitate data sharing, provenance and management of data and metadata we introduce Expipe, a semi-structured and lightweight data management platform designed for neuroscience research. Expipe implements a conceptually simple and familiar project structure and includes functionalities for data and metadata handling, retrieval, and exploration, which in turn can simplify the steps from experiments to analysis. Differently from existing solutions, the flexible and easy-to-use Expipe framework can provide an entry-level data management solution for both small and large experimental laboratories.</p>
  </sec>
  <sec sec-type="data-availability" id="s6">
    <title>Data Availability Statement</title>
    <p>The source code of Expipe is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/cinpla/expipe">github.com/cinpla/expipe</ext-link>.</p>
  </sec>
  <sec id="s7">
    <title>Author Contributions</title>
    <p>ML conceived the project, wrote the code, and wrote the manuscript. S-AD conceived the project, wrote the code, and wrote the manuscript. AB and MM wrote the code and wrote the manuscript. AM-S acquired funding. TH and MF acquired funding and wrote the manuscript. All authors contributed to the article and approved the submitted version.</p>
  </sec>
  <sec id="s8">
    <title>Conflict of Interest</title>
    <p>The authors declare that the research was conducted in the absence of any commercial or financial relationships that could be construed as a potential conflict of interest.</p>
  </sec>
</body>
<back>
  <fn-group>
    <fn id="fn0001">
      <p>
        <sup>1</sup>
        <ext-link ext-link-type="uri" xlink:href="https://datajoint.io/">https://datajoint.io/</ext-link>
      </p>
    </fn>
    <fn id="fn0002">
      <p>
        <sup>2</sup>
        <ext-link ext-link-type="uri" xlink:href="https://alyx.readthedocs.io">alyx.readthedocs.io</ext-link>
      </p>
    </fn>
    <fn id="fn0003">
      <p>
        <sup>3</sup>
        <ext-link ext-link-type="uri" xlink:href="https://gin.g-node.org/">https://gin.g-node.org/</ext-link>
      </p>
    </fn>
    <fn id="fn0004">
      <p>
        <sup>4</sup>
        <ext-link ext-link-type="uri" xlink:href="https://git-lfs.github.com/">git-lfs.github.com</ext-link>
      </p>
    </fn>
    <fn id="fn0005">
      <p>
        <sup>5</sup>
        <ext-link ext-link-type="uri" xlink:href="https://firebase.google.com">firebase.google.com</ext-link>
      </p>
    </fn>
    <fn id="fn0006">
      <p>
        <sup>6</sup>
        <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/expipe/">https://pypi.org/project/expipe/</ext-link>
      </p>
    </fn>
    <fn id="fn0007">
      <p>
        <sup>7</sup>
        <ext-link ext-link-type="uri" xlink:href="https://click.palletsprojects.com/">https://click.palletsprojects.com/</ext-link>
      </p>
    </fn>
    <fn id="fn0008">
      <p>
        <sup>8</sup>
        <ext-link ext-link-type="uri" xlink:href="https://jupyter.org/">https://jupyter.org/</ext-link>
      </p>
    </fn>
    <fn id="fn0009">
      <p>
        <sup>9</sup>
        <ext-link ext-link-type="uri" xlink:href="https://ipywidgets.readthedocs.io/">https://ipywidgets.readthedocs.io/</ext-link>
      </p>
    </fn>
    <fn id="fn0010">
      <p>
        <sup>10</sup>
        <ext-link ext-link-type="uri" xlink:href="https://pandas.pydata.org/">https://pandas.pydata.org/</ext-link>
      </p>
    </fn>
    <fn id="fn0011">
      <p>
        <sup>11</sup>
        <ext-link ext-link-type="uri" xlink:href="https://www.w3.org/TR/prov-dm/">https://www.w3.org/TR/prov-dm/</ext-link>
      </p>
    </fn>
    <fn id="fn0012">
      <p>
        <sup>12</sup>
        <ext-link ext-link-type="uri" xlink:href="https://perforce.com/products/helix-core">perforce.com/products/helix-core</ext-link>
      </p>
    </fn>
    <fn id="fn0013">
      <p>
        <sup>13</sup>
        <ext-link ext-link-type="uri" xlink:href="https://www.dropbox.com/">https://www.dropbox.com/</ext-link>
      </p>
    </fn>
    <fn id="fn0014">
      <p>
        <sup>14</sup>
        <ext-link ext-link-type="uri" xlink:href="http://console.cloud.google.com/">console.cloud.google.com/</ext-link>
      </p>
    </fn>
    <fn id="fn0015">
      <p>
        <sup>15</sup>
        <ext-link ext-link-type="uri" xlink:href="http://aws.amazon.com/s3">aws.amazon.com/s3</ext-link>
      </p>
    </fn>
  </fn-group>
  <fn-group>
    <fn fn-type="financial-disclosure">
      <p><bold>Funding.</bold> This work was funded by the Norwegian Research Council (Grant No. 217920 to MF and Grant No. 231248 for TH) and by the University of Oslo.</p>
    </fn>
  </fn-group>
  <ref-list>
    <title>References</title>
    <ref id="B1">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Crook</surname><given-names>S. M.</given-names></name><name><surname>Davison</surname><given-names>A. P.</given-names></name><name><surname>Plesser</surname><given-names>H. E.</given-names></name></person-group> (<year>2013</year>). <article-title>Learning from the past: approaches for reproducibility in computational neuroscience</article-title>, in <source>20 Years of Computational Neuroscience. Springer Series in Computational Neuroscience, Vol. 9</source>, ed <person-group person-group-type="editor"><name><surname>Bower</surname><given-names>J.</given-names></name></person-group> (<publisher-loc>New York, NY</publisher-loc>: <publisher-name>Springer</publisher-name>), <fpage>73</fpage>–<lpage>102</lpage>. <pub-id pub-id-type="doi">10.1007/978-1-4614-1424-7_4</pub-id></mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Denker</surname><given-names>M.</given-names></name><name><surname>Grün</surname><given-names>Ss.</given-names></name></person-group> (<year>2016</year>). <article-title>Designing workflows for the reproducible analysis of electrophysiological data</article-title>, in <source>Brain-Inspired Computing. BrainComp 2015. Lecture Notes in Computer Science, Vol. 10087</source>, eds <person-group person-group-type="editor"><name><surname>Amunts</surname><given-names>K.</given-names></name><name><surname>Grandinetti</surname><given-names>L.</given-names></name><name><surname>Lippert</surname><given-names>T.</given-names></name><name><surname>Petkov</surname><given-names>N.</given-names></name></person-group> (<publisher-loc>Cham</publisher-loc>: <publisher-name>Springer</publisher-name>), <fpage>58</fpage>–<lpage>72</lpage>. <pub-id pub-id-type="doi">10.1007/978-3-319-50862-7_5</pub-id></mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dragly</surname><given-names>S.-A.</given-names></name><name><surname>Hobbi Mobarhan</surname><given-names>M.</given-names></name><name><surname>Lepperød</surname><given-names>M. E.</given-names></name><name><surname>Tennøe</surname><given-names>S.</given-names></name><name><surname>Fyhn</surname><given-names>M.</given-names></name><name><surname>Hafting</surname><given-names>T.</given-names></name><etal/></person-group>. (<year>2018</year>). <article-title>Experimental directory structure (Exdir): an alternative to HDF5 without introducing a new file format</article-title>. <source>Front. Neuroinform</source>. <volume>12</volume>:<fpage>16</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2018.00016</pub-id><?supplied-pmid 29706879?><pub-id pub-id-type="pmid">29706879</pub-id></mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gleeson</surname><given-names>P.</given-names></name><name><surname>Davison</surname><given-names>A. P.</given-names></name><name><surname>Silver</surname><given-names>R. A.</given-names></name><name><surname>Ascoli</surname><given-names>G. A.</given-names></name></person-group> (<year>2017</year>). <article-title>A commitment to open source in neuroscience</article-title>. <source>Neuron</source>
<volume>96</volume>, <fpage>964</fpage>–<lpage>965</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2017.10.013</pub-id><?supplied-pmid 29216458?><pub-id pub-id-type="pmid">29216458</pub-id></mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Grewe</surname><given-names>J.</given-names></name><name><surname>Wachtler</surname><given-names>T.</given-names></name><name><surname>Benda</surname><given-names>J.</given-names></name></person-group> (<year>2011</year>). <article-title>A bottom-up approach to data annotation in neurophysiology</article-title>. <source>Front. Neuroinform</source>. <volume>5</volume>:<fpage>16</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2011.00016</pub-id><?supplied-pmid 21941477?><pub-id pub-id-type="pmid">21941477</pub-id></mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>HarkȩŻ lak</surname><given-names>D.</given-names></name><name><surname>Kasztelnik</surname><given-names>M.</given-names></name><name><surname>Pawlik</surname><given-names>M.</given-names></name><name><surname>Wilk</surname><given-names>B.</given-names></name><name><surname>Bubak</surname><given-names>M.</given-names></name></person-group> (<year>2014</year>). <article-title>A lightweight method of metadata and data management with DataNet</article-title>, in <source>eScience on Distributed Computing Infrastructure</source>, eds <person-group person-group-type="editor"><name><surname>Bubak</surname><given-names>M.</given-names></name><name><surname>Kitowski</surname><given-names>J.</given-names></name><name><surname>Wiatr</surname><given-names>K.</given-names></name></person-group> (<publisher-loc>Cham</publisher-loc>: <publisher-name>Springer</publisher-name>), <fpage>164</fpage>–<lpage>177</lpage>. <pub-id pub-id-type="doi">10.1007/978-3-319-10894-0_12</pub-id></mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Köster</surname><given-names>J.</given-names></name><name><surname>Rahmann</surname><given-names>S.</given-names></name></person-group> (<year>2012</year>). <article-title>Snakemake–a scalable bioinformatics workflow engine</article-title>. <source>Bioinformatics</source>
<volume>28</volume>, <fpage>2520</fpage>–<lpage>2522</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/bts480</pub-id><?supplied-pmid 22908215?><pub-id pub-id-type="pmid">22908215</pub-id></mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Olsson</surname><given-names>T. S.</given-names></name><name><surname>Hartley</surname><given-names>M.</given-names></name></person-group> (<year>2019</year>). <article-title>Lightweight data management with dtool</article-title>. <source>PeerJ</source>
<volume>7</volume>:<fpage>e6562</fpage>. <pub-id pub-id-type="doi">10.7717/peerj.6562</pub-id><?supplied-pmid 30867992?><pub-id pub-id-type="pmid">30867992</pub-id></mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sprenger</surname><given-names>J.</given-names></name><name><surname>Zehl</surname><given-names>L.</given-names></name><name><surname>Pick</surname><given-names>J.</given-names></name><name><surname>Sonntag</surname><given-names>M.</given-names></name><name><surname>Grewe</surname><given-names>J.</given-names></name><name><surname>Wachtler</surname><given-names>T.</given-names></name><etal/></person-group>. (<year>2019</year>). <article-title>odMLtables: a user-friendly approach for managing metadata of neurophysiological experiments</article-title>. <source>Front. Neuroinform</source>. <volume>13</volume>:<fpage>62</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2019.00062</pub-id><?supplied-pmid 31611781?><pub-id pub-id-type="pmid">31611781</pub-id></mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Teeters</surname><given-names>J. L.</given-names></name><name><surname>Godfrey</surname><given-names>K.</given-names></name><name><surname>Young</surname><given-names>R.</given-names></name><name><surname>Dang</surname><given-names>C.</given-names></name><name><surname>Friedsam</surname><given-names>C.</given-names></name><name><surname>Wark</surname><given-names>B.</given-names></name><etal/></person-group>. (<year>2015</year>). <article-title>Neurodata without borders: creating a common data format for neurophysiology</article-title>. <source>Neuron</source><volume>88</volume>, <fpage>629</fpage>–<lpage>634</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2015.10.025</pub-id><?supplied-pmid 26590340?><pub-id pub-id-type="pmid">26590340</pub-id></mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zehl</surname><given-names>L.</given-names></name><name><surname>Jaillet</surname><given-names>F.</given-names></name><name><surname>Stoewer</surname><given-names>A.</given-names></name><name><surname>Grewe</surname><given-names>J.</given-names></name><name><surname>Sobolev</surname><given-names>A.</given-names></name><name><surname>Wachtler</surname><given-names>T.</given-names></name><etal/></person-group>. (<year>2016</year>). <article-title>Handling metadata in a neurophysiology laboratory</article-title>. <source>Front. Neuroinform</source>. <volume>10</volume>:<fpage>26</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2016.00026</pub-id><?supplied-pmid 27486397?><pub-id pub-id-type="pmid">27486397</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
