<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Synth Biol (Oxf)</journal-id>
    <journal-id journal-id-type="iso-abbrev">Synth Biol (Oxf)</journal-id>
    <journal-id journal-id-type="publisher-id">synbio</journal-id>
    <journal-title-group>
      <journal-title>Synthetic Biology</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2397-7000</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
      <publisher-loc>UK</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8546602</article-id>
    <article-id pub-id-type="doi">10.1093/synbio/ysab022</article-id>
    <article-id pub-id-type="publisher-id">ysab022</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI00520</subject>
        <subject>AcademicSubjects/SCI00980</subject>
        <subject>AcademicSubjects/SCI01060</subject>
        <subject>AcademicSubjects/SCI02298</subject>
        <subject>AcademicSubjects/SCI02299</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>paraSBOLv: a foundation for standard-compliant genetic design visualization tools</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Clark</surname>
          <given-names>Charlie J</given-names>
        </name>
        <aff><institution content-type="department">School of Biological Sciences, University of Bristol</institution>, Bristol, <country country="GB">UK</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-5642-8346</contrib-id>
        <name>
          <surname>Scott-Brown</surname>
          <given-names>James</given-names>
        </name>
        <aff><institution content-type="department">Nuffield Department of Population Health, University of Oxford</institution>, Oxford, Oxfordshire, <country country="GB">UK</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-1702-786X</contrib-id>
        <name>
          <surname>Gorochowski</surname>
          <given-names>Thomas E</given-names>
        </name>
        <!--thomas.gorochowski@bristol.ac.uk-->
        <xref rid="COR0001" ref-type="corresp"/>
        <aff><institution content-type="department">School of Biological Sciences, University of Bristol</institution>, Bristol, <country country="GB">UK</country></aff>
        <aff><institution content-type="department">BrisSynBio, University of Bristol</institution>, Bristol, <country country="GB">UK</country></aff>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="COR0001">**Corresponding author: E-mail: <email xlink:href="thomas.gorochowski@bristol.ac.uk">thomas.gorochowski@bristol.ac.uk</email></corresp>
      <p>† contributed equally to this work.</p>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2021-08-30">
      <day>30</day>
      <month>8</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>30</day>
      <month>8</month>
      <year>2021</year>
    </pub-date>
    <volume>6</volume>
    <issue>1</issue>
    <elocation-id>ysab022</elocation-id>
    <history>
      <date date-type="received">
        <day>24</day>
        <month>6</month>
        <year>2021</year>
      </date>
      <date date-type="rev-recd">
        <day>30</day>
        <month>7</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>09</day>
        <month>8</month>
        <year>2021</year>
      </date>
      <date date-type="editorial-decision">
        <day>06</day>
        <month>8</month>
        <year>2021</year>
      </date>
      <date date-type="corrected-typeset">
        <day>30</day>
        <month>8</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="ysab022.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>Diagrams constructed from standardized glyphs are central to communicating complex design information in many engineering fields. For example, circuit diagrams are commonplace in electronics and allow for a suitable abstraction of the physical system that helps support the design process. With the development of the Synthetic Biology Open Language Visual (SBOLv), bioengineers are now positioned to better describe and share their biological designs visually. However, the development of computational tools to support the creation of these diagrams is currently hampered by an excessive burden in maintenance due to the large and expanding number of glyphs present in the standard. Here, we present a Python package called paraSBOLv that enables access to the full suite of SBOLv glyphs through the use of machine-readable parametric glyph definitions. These greatly simplify the rendering process while allowing extensive customization of the resulting diagrams. We demonstrate how the adoption of paraSBOLv can accelerate the development of highly specialized biodesign visualization tools or even form the basis for more complex software by removing the burden of maintaining glyph-specific rendering code. Looking forward, we suggest that incorporation of machine-readable parametric glyph definitions into the SBOLv standard could further simplify the development of tools to produce standard-compliant diagrams and the integration of visual standards across fields.</p>
    </abstract>
    <kwd-group>
      <kwd>SBOL visual</kwd>
      <kwd>genetic design visualization</kwd>
      <kwd>synthetic biology</kwd>
      <kwd>Python</kwd>
    </kwd-group>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Biotechnology and Biological Sciences Research Council</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000268</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>BB/L01386X/1</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Royal Society</institution>
            <institution-id institution-id-type="DOI">10.13039/501100000288</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>UF160357</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="07"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="s1">
    <label>1.</label>
    <title>Introduction</title>
    <p>The Synthetic Biology Open Language Visual (SBOLv) standard defines a set of glyphs and conventions for visually displaying the design information of engineered biological systems (<xref rid="R1" ref-type="bibr">1</xref>). The use of SBOLv simplifies the communication of designs and aids both collaboration and reproducibility by removing much of the ambiguity in how core biological parts and their interactions are displayed (<xref rid="R2" ref-type="bibr">2</xref>, <xref rid="R3" ref-type="bibr">3</xref>). SBOLv fits into a larger standards ecosystem across bioengineering (<xref rid="R4" ref-type="bibr">4</xref>). For example, the SBOL data standard (<xref rid="R5" ref-type="bibr">5–7</xref>) is used to capture detailed information about both the structure and function of a design to facilitate data exchange and enable complex design-build-test-learn workflows (<xref rid="R8" ref-type="bibr">8</xref>), and modeling standards like the Systems Biology Markup Language (SBML) (<xref rid="R9" ref-type="bibr">9</xref>) are used to simulate and test the function of possible designs before they are built.</p>
    <p>To support the creation of SBOLv-compliant diagrams, numerous computational tools have emerged. These include programming libraries like DNAplotlib (<xref rid="R10" ref-type="bibr">10</xref>, <xref rid="R11" ref-type="bibr">11</xref>) and VisBOL (<xref rid="R12" ref-type="bibr">12</xref>, <xref rid="R13" ref-type="bibr">13</xref>), as well as graphical end-user environments like SBOLDesigner (<xref rid="R14" ref-type="bibr">14</xref>) and SBOLCanvas (<xref rid="R15" ref-type="bibr">15</xref>). These tools all rely on a set of SBOL glyphs that evolve over time and so a key challenge is managing how glyphs are drawn and kept up to date. The complexity of this challenge is further increased by the SBOL standard’s permission of the customization of glyphs in many ways (<xref rid="F1" ref-type="fig">Figure 1A</xref>). For example, the length of a particularly long coding sequence (CDS) might be represented by stretching the body of the CDS arrow, but not its head, as well as unique fill colors being used to visually distinguish between many different CDSs displayed in the same diagram. This required variability in geometry and basic aesthetics of each glyph makes it common for tools to use separate dedicated functions for the rendering of each glyph (<xref rid="R10" ref-type="bibr">10–12</xref>, <xref rid="R14" ref-type="bibr">14</xref>). This simplifies the structure of the code but also leads to a significant maintenance burden as the library of glyphs changes over time and slows the propagation of updates from the standard to end-user tools. An alternative approach, which we advocate here, is to encode the glyph library in a machine-readable format that is flexible enough to capture all the information needed to tailor the rendering process through the introduction of glyph specific parameters. Parameters capture customizable features like color and line width, as well as allowable variations in glyph shape like width and height (<xref rid="F1" ref-type="fig">Figure 1B</xref>). Using this approach, the rendering code of a tool can remain constant even when new glyphs are created or existing glyphs are updated.</p>
    <fig position="float" id="F1" fig-type="figure">
      <label>Figure 1.</label>
      <caption>
        <p>Customizable SBOLv glyphs and their representation using the parametric SVG (pSVG) format. (A) Examples of allowable aesthetic and geometric customizations of SBOLv glyphs. (B) Comparison of a standard CDS glyph and a possible parametric definition to capture the customization of glyph geometry. As changes to the width are made (e.g. compression or stretching along the x-axis), the standard glyph shape is deformed. In contrast, the parametric version can maintain key ratios (i.e. height to arrowhead_width) to ensure a similar shape is seen throughout. Parameters are shown in red and stretched versions are zoomed out. (C) Example SVG file for a promoter glyph. Styling options omitted for improved clarity. Resulting glyph shown to right and paths and their corresponding parts of the glyph shown in the color-coded version of the glyph above the arrow. The bounding box (gray dashed line) and baseline (solid horizonal line spanning the bounding box) are included to enable tools to understand how the glyph should be composed and the space it occupies. In the ‘d’ (data) attributes of the path elements in the SVG file, the ‘M’ and ‘L’ commands correspond to specifying the start point of a line path and the next point in the line path, respectively. Each of these commands are followed by two space-separated numbers corresponding to a 2D position on the canvas. (D) Example pSVG file for a promoter glyph. Elements of the file specifically used by paraSBOLv are shown in red; these supplement standard SVG elements to allow tools to interpret the file in a basic SVG format if necessary. To the right, it is shown how changes in parameters can customize the rendered glyph shape.</p>
      </caption>
      <graphic xlink:href="ysab022f1" position="float"/>
    </fig>
    <p>There are many possible formats that could be used as a starting point to make this transition possible. For example, the Scalable Vector Graphics (SVG) format (<xref rid="F1" ref-type="fig">Figure 1C</xref>) is one of the most pervasive for storing vector-based images and can be read by virtually all web browsers, word-processors and graphics design software, as well as a wide variety of programming libraries. However, most formats (including SVG) are designed for capturing a fixed static image and do not provide any capabilities to describe ways in which the elements within the image are allowed to be altered by a user. A rare exception is the parametric SVG (pSVG) format, which extends the capabilities of the SVG format to allow for parametric descriptions of the paths (i.e. lines and shapes) making up the image (<xref rid="F1" ref-type="fig">Figure 1D</xref>). By defining paths parametrically, parameters can be provided when the image is rendered to affect the output in specific ways—precisely what is required for describing standardized glyphs where some, but not all, variations in shape forms are allowed. Furthermore, pSVG files are fully backward compatible with any software that can work with the SVG format (although without the ability for images to be customized), ensuring existing tools and libraries can make use of the same files.</p>
    <p>In this work, we present paraSBOLv, a lightweight Python package that is designed to simplify the rendering of SBOLv diagrams by adopting pSVG files as an underlying data source for glyphs and their allowable customizations. We provide an overview of the library, the format of glyph pSVG files, the rendering pipeline and some examples of how paraSBOLv can use used to accelerate the development of SBOLv compatible visualization tools. We see paraSBOLv acting as a foundation for the growing ecosystem of SBOL compliant tools developed in Python that helps to reduce the maintenance burden on developers as SBOLv continues to evolve.</p>
  </sec>
  <sec id="s2">
    <label>2.</label>
    <title>Results</title>
    <sec id="s2-s1">
      <label>2.1</label>
      <title>Using the pSVG format for SBOL visual glyphs</title>
      <p>As mentioned earlier, the pSVG file format is an extension of the SVG format, allowing for the inclusion of parametric information that can affect how paths within an image are drawn. In the context of SBOLv glyphs, parametric descriptions of geometric features are useful when glyphs can be resized in specific ways or to allow for the emphasis of certain features that correspond to part performance or function (<xref rid="F1" ref-type="fig">Figure 1C</xref>). A typical SVG file is an XML file that contains elements defining the shapes or paths that should be drawn. These elements include data defining key points in these shapes/paths (e.g. the center of a circle or the points making up the start and end of line segments that create an arbitrary shape) plus styling information about how the paths and their fill should be handled. For a pSVG file, the same core SVG elements exist, but additional ‘parametric’ attributes can be included within them to allow for the points defining each shape/path to be defined in terms of user-defined parameters and basic arithmetic or trigonometric functions. This allows for changes in parameter values to affect the geometry of the shape produced. In addition, default parameters are provided so that a basic shape can always be produced if no user-defined parameters are provided.</p>
      <p>The benefit of this approach is that pSVG files can incorporate additional information about how the shape of a glyph can be altered. The SBOLv standard already includes such guidelines for each glyph in their definitions, but this is currently encoded as free text that cannot be easily interpreted by a computer. By encoding this information directly within the files defining the set of available SBOLv glyphs, developers would be able to create tools that can immediately understand and use these allowable customizations.</p>
      <p>With this as a goal, we developed a set of pSVG files that encompass the entire SBOLv glyph library (Data availability) (<xref rid="R1" ref-type="bibr">1</xref>). During this process, it became clear that glyphs often grouped into subsets with shared parameters. For example, many of the glyphs have a stem and head shape (e.g. see DNA/RNA/protein positions), while others include arrows of different forms. To ensure that parameters were consistent across the entire library, each subset of glyphs was given similar parameter names and similar terminology was adopted for parameters throughout (<xref rid="F2" ref-type="fig">Figure 2</xref>). In addition, default parameters for all glyphs were chosen such that their basic (noncustomized) shapes were highly distinguishable when composed together. All pSVG glyph files are available from the paraSBOLv development repository (see Data availability).</p>
      <fig position="float" id="F2" fig-type="figure">
        <label>Figure 2.</label>
        <caption>
          <p>Groups of glyphs and their parameters. Sequence features and molecular species are separated, and all glyphs shown using default parameters.</p>
        </caption>
        <graphic xlink:href="ysab022f2" position="float"/>
      </fig>
    </sec>
    <sec id="s2-s2">
      <label>2.2</label>
      <title>The paraSBOLv Python package</title>
      <p>Having developed a complete set of pSVG SBOLv glyphs, we next needed a way to utilize their unique capabilities. The paraSBOLv Python package was developed to provide a set of lightweight functions to load, customize and render SBOLv glyphs stored in a pSVG format. It has been designed to use matplotlib as a canvas on which to draw diagrams allowing for precise vector-based graphics that can be easily incorporated into existing visualizations and analysis scripts (e.g. by including SBOLv constructs in figures and plots) and the ability to export these diagrams to a wide range of vector and rasterized image file formats (e.g. PDF, PNG and JPEG). Internally, paraSBOLv also makes use of the svgpath2mpl package to generate matplotlib-compatible paths from an SVG definition.</p>
      <p>Structurally, the paraSBOLv package consists of two classes and additional helper functions (<xref rid="F3" ref-type="fig">Figure 3</xref>). The core rendering functionality is encapsulated in the GlyphRenderer class that can load an entire library of SBOLv pSVG glyph files and then draw them using provided customization parameters. Normally, a single GlyphRenderer object is created by an application, and this object is used multiple times to draw all the glyphs present in a diagram. To simplify this process, after drawing a glyph at a specified location (where the location is the start point of the glyph’s baseline), the GlyphRenderer object will return the bounds of the drawn glyph and the end point of the baseline, ensuring that the location of the next glyph in a design is known. While the GlyphRenderer class focuses on drawing individual glyphs, to simplify the drawing of entire genetic constructs, the Construct class is provided. This takes a GlyphRenderer object used to perform all drawing functions, a list of parts, interactions and other parameters and can render an entire construct with a single function call. Much of the rendering pipeline can be tailored based on dictionaries of attribute-value pairs provided on a per part basis that customize the way the glyph is drawn, including parameters affecting glyph shape. Specifically, when drawing each glyph, two dictionaries can be sent to alter the rendering process. The first dictionary termed ‘user_parameters’ has key-value pairs corresponding to a pSVG parameter name and its values. These parameters affect the geometry of the glyph (e.g. its width and height). The second dictionary termed ‘user_style’ has key-value pairs corresponding to each path name in the glyph with the value being a dictionary specifying the standard matplotlib styling options for that path (e.g. edgecolor and linewidth).</p>
      <fig position="float" id="F3" fig-type="figure">
        <label>Figure 3.</label>
        <caption>
          <p>Overview of the paraSBOLv Python package. Dashed boxes represent packages. Solid boxes represent classes. The folder symbol represent directories. Arrows represent the flow of function calls between classes and packages, and lines ending in a filled circle show usage. Only key functions and class members/variables shown. Full documentation is available from the development repository (see Data availability).</p>
        </caption>
        <graphic xlink:href="ysab022f3" position="float"/>
      </fig>
      <p>A core consideration throughout the development of paraSBOLv has been to keep the package small and well documented. By adopting the pSVG format for glyphs, we were able to provide a full range of rendering capabilities (including customization) in the GlyphRenderer class in less than 500 lines of code, with ∼40% of those being comments for documentation. In addition, we have also made use of continuous integration tools to simplify maintenance and ensure code quality as the package is developed (<xref rid="R16" ref-type="bibr">16</xref>). Specifically, we have integrated GitHub actions into the development repository to regenerate all documentation using pdoc and perform automated testing after every code commit. This approach ensures that we quickly flag introduced errors and ensure that core functionality is maintained throughout development.</p>
    </sec>
    <sec id="s2-s3">
      <label>2.3</label>
      <title>Rapid implementation of specialized tools using paraSBOLv</title>
      <p>When developing computational tools, two different approaches are often pursued. In one, a comprehensive, all-encompassing approach is taken where every form of functionality a user might require is ‘baked in’ by default. Common examples are tools with complex graphical user interfaces like SBOLDesigner (<xref rid="R14" ref-type="bibr">14</xref>), SBOLCanvas (<xref rid="R15" ref-type="bibr">15</xref>), Benchling and SnapGene. Such software is immediately accessible to a user but can take significant time and resources to develop to a fully functional state and are generally rigid in the way they work; it can be difficult to customize or change specific aspects to a user’s liking as workflows have a prescribed set of steps that must be followed. Alternatively, tools can be designed to only provide a small set of highly interoperable building blocks that must be pieced together by the user themself to create a specialized tool each time a new functionality is required. This approach is sometimes referred to as the ‘UNIX philosophy’ and while placing an emphasis on the user learning how to program the system, it offers the ability to rapidly create a working tool tailored to a task at hand and offers significantly greater flexibility in the final product produced.</p>
      <p>ParaSBOLv falls into this second category. This does not preclude paraSBOLv acting as a foundation for building larger and more comprehensive genetic design visualization tools, but it is most powerful when used directly to rapidly create highly specialized visualization software. To demonstrate this capability, we developed several example tools that allow for a broad range of visualization tasks to be achieved with little effort (<xref rid="F4" ref-type="fig">Figure 4</xref>). All tools are available at the public paraSBOLv development repository (see Data availability).</p>
      <fig position="float" id="F4" fig-type="figure">
        <label>Figure 4.</label>
        <caption>
          <p>Examples of specialized visualization tools rapidly built using paraSBOLv. (A) sbolv-cli—an SBOLv Command Line Interface that converts a genetic design string into an SBOLv diagram (similar to the tool pigeon (<xref rid="R17" ref-type="bibr">17</xref>)). The command line arguments (--string and --interaction) used to produce the visualization are shown. Within these, ‘p’ = promoter, ‘r’ = RBS, ‘c’ = CDS, ‘t’ = terminator, ‘x’ = recombination site and a prefix of ‘&lt;’ reverses the direction of the part. Colors are given as names with the ‘l_’ prefix denoting a lighter colored version. Interactions are given as a ‘//’ separated list where the start and end index of the part the interaction spans are first given, then the type (‘in’ = inhibition, ‘co’ = control) and finally the color. (B) genbank2sbolv—a visualization tool that generates an SBOLv visualization from a GenBank file. Long genetic designs (e.g. genomes) are split across lines to simplify viewing, and coding regions are shown in correct relative sizes with color corresponding to annotated function. Visualization shown for part of the <italic toggle="yes">Escherichia coli</italic> MG1655 genome (GenBank: <ext-link xlink:href="U00096.3" ext-link-type="gen">U00096.3</ext-link>). (C) sbolv-kaleidoscope—a generative art tool where all elements of an image are customized SBOLv symbols. Code for all examples is available from the development repository (see Data availability).</p>
        </caption>
        <graphic xlink:href="ysab022f4" position="float"/>
      </fig>
      <p>Our first tool, called sbolv-cli, demonstrates the drawing of genetic designs specified by a shorthand notation using a command line interface, similar to the tool pigeon (<xref rid="R17" ref-type="bibr">17</xref>) (<xref rid="F4" ref-type="fig">Figure 4A</xref>). The user provides a string encoding the parts that should be present, customization information regarding each of these (e.g. color and orientation) and the interactions present between the parts using their indexes in the design (full usage details are available from the development repository). This information is parsed by sbolv-cli and a design generated that can then be rendered to file by paraSBOLv. This tool is particularly useful for users needing to generate short genetic design ‘snippets’ that can be included in larger diagrams or as part of presentations or documents.</p>
      <p>Our second tool, called genbank2sbolv, shows how basic data processing and visualization can be combined. Taking a file in the commonly used GenBank format as input, it parses the content and produces a graphical representation (<xref rid="F4" ref-type="fig">Figure 4B</xref>). This helps improve the viewers’ understanding of the overall organization of a DNA sequence in relation to the genetic parts encoded. A key feature of this tool is its ability to split the visualization across lines to improve the readability of very long and complex designs. It is also able to use specific attributes associated with each coding region to tailor the rendering process (e.g. allowing for the color to be modified in relation to the annotated function).</p>
      <p>Our final example, called sbolv-kaleidoscope, is a dynamic generative art tool that can create unique moving artworks consisting solely of customized parametric SBOLv glyphs (<xref rid="F4" ref-type="fig">Figure 4C</xref>). The user can specify parameters that tune the generative process and even provide constraints on the colors and geometric features of the glyphs that should be varied. While this tool has limited scientific value, it does demonstrate the diversity of ways paraSBOLv can be used beyond typical bioengineering use cases and exemplifies the variation that is possible in SBOLv glyphs while still being clearly recognizable as biological parts with a defined functionality.</p>
      <p>All the tools presented above are available from the gallery of examples on the public online paraSBOLv development repository (see Data availability). Details of their specific use and available options are provided in tool-specific README files.</p>
    </sec>
  </sec>
  <sec id="s3">
    <label>3.</label>
    <title>Conclusion</title>
    <p>We have provided an overview of the paraSBOLv Python package and shown how its use of the pSVG format allows for a richer machine-readable description of glyphs, removing the need to write specialized rendering functions for each. This allows the core paraSBOLv package to remain lean, significantly reduces maintenance and allows for the package to make immediate use of new glyphs as they become available. Although the focus here has been on using this approach to produce SBOLv compliant visualizations, the concept of a glyph format that can capture both core geometry and allowable customizations could be easily applied to other graphical standards, such as the Systems Biology Graphical Notation (SBGN) (<xref rid="R18" ref-type="bibr">18</xref>), and support an opportunity for greater exchange of symbols and code between related standards.</p>
    <p>Looking forward, we are in the process of submitting an SBOL Enhancement Proposal (<xref rid="R1" ref-type="bibr">1</xref>) to advocate for the use of pSVG as the core representation of each glyph within the SBOLv standard. This will ensure new glyphs capture customization information in a machine-readable format and allow tools like paraSBOLv to immediately access updates to glyphs without any change to their codebase. The use of pSVG glyphs by the SBOLv standard development process would also have further benefits; for example, allowing existing online SBOLv ontology tools to serve up pSVG files as they are needed (<xref rid="R19" ref-type="bibr">19</xref>) to ensure visualizations always use the most up-to-date versions of glyphs, as well as the ability to broadly automate many tasks currently performed manually by the SBOLv community (e.g. the generation of glyph tables for the website and individual sets of stencils for use in graphic design software where acceptable customization needs to also be shown). We are also in the process of transitioning our more advanced genetic design visualization tool called DNAplotlib (<xref rid="R10" ref-type="bibr">10</xref>, <xref rid="R11" ref-type="bibr">11</xref>) to use paraSBOLv for all rendering tasks. This will remove the need to maintain low-level rendering tasks and allow for the tool to focus on higher-level functionalities (e.g. the generation of appropriate visual layouts for large and complex multimodule designs or even genomes).</p>
    <p>Another interesting future direction for this approach is the incorporation of visualization parameters directly into SBOL data files containing the raw underlying structural and functional information about a biological design. This could be achieved by having conventions for how glyph parameters should be stored as custom annotations within the SBOL file (<xref rid="R6" ref-type="bibr">6</xref>). These would be then directly linked to their associated element and could be used to affect the rendering of a design. There are some additional complications with this approach due to the SBOL standard offering far greater freedom over how a biological design is structured, some of which are difficult to automatically map to a visualization; however, efforts toward this type of goal in regard to the storing of user-defined layout information has already begun with SBOLCanvas (<xref rid="R15" ref-type="bibr">15</xref>) leading the way.</p>
    <p>Here, our focus has been on the development of a Python library to support the use of pSVG glyphs when rendering SBOLv diagrams. Python was chosen due to its widespread use across the sciences and growing position as a key language for computational data analysis. However, it should be noted that our use of the open pSVG format also makes it possible to use our glyph files in other programming languages. First, because each pSVG file is stored using XML, standard language-specific XML parsers can be used to extract the relevant tags (e.g. glyph paths) and their associated attributes and values. For parametric attributes the parameterized strings must first be evaluated using user-provided values or default values also stored within the pSVG file (under a ‘parametric:defaults’ attribute of the main ‘svg’ tag). Once evaluated, these strings are valid SVG paths that can then be rendered using any compatible graphics library. For example, the Cairo graphics library can render SVG strings to screen or file and is available for virtually all mainstream programming languages.</p>
    <p>As the SBOLv standard grows to support new areas of synthetic biology and bioengineering (<xref rid="R20" ref-type="bibr">20–32</xref>), rethinking how we collect, manage, visualize and distribute data for supporting computational tools will become crucial (<xref rid="R8" ref-type="bibr">8</xref>). The paraSBOLv package and its use of the pSVG format offers a way to address some of these challenges, taking a burden off tool developers and opening new avenues for interactions between graphical standards.</p>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgments</title>
    <p>We would like to thank the Synthetic Biology Open Language (SBOL) community for their support during the development of this library, in particular James McLaughlin, Chris Myers and Jake Beal.</p>
  </ack>
  <sec sec-type="data-availability" id="s4">
    <title>Data availability</title>
    <p>All the example code (stored within the ‘gallery’ directory of the development repository) and the paraSBOLv Python package are open source, released under an MIT license and publicly available at: <ext-link xlink:href="https://github.com/BiocomputeLab/paraSBOLv" ext-link-type="uri">https://github.com/BiocomputeLab/paraSBOLv</ext-link>.</p>
  </sec>
  <sec id="s5">
    <title>Funding</title>
    <p>BrisSynBio, BBSRC/EPSRC Synthetic Biology Research Centre [BB/L01386X/1 to T.E.G.]; Royal Society University Research Fellowship [UF160357 to T.E.G.].</p>
  </sec>
  <sec id="s6">
    <title>Author contributions</title>
    <p>T.E.G. and J.S.-B. conceived the project. T.E.G. and C.J.C. developed the paraSBOLv software package. J.S.-B. developed the pSVG utils and setup all continuous integration elements of the project. T.E.G. and J.S.-B. created the pSVG files of the SBOL Visual glyphs. All authors developed the example tools and contributed to the writing and editing of the manuscript.</p>
  </sec>
  <sec id="s7">
    <title>Conflict of interest statement.</title>
    <p>None declared.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="R1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Baig</surname><given-names>H.</given-names></string-name>, <string-name><surname>Fontanarrosa</surname><given-names>P.</given-names></string-name>, <string-name><surname>Kulkarni</surname><given-names>V.</given-names></string-name>, <string-name><surname>McLaughlin</surname><given-names>J.</given-names></string-name>, <string-name><surname>Vaidyanathan</surname><given-names>P.</given-names></string-name>, <string-name><surname>Bartley</surname><given-names>B.</given-names></string-name>, <string-name><surname>Bhatia</surname><given-names>S.</given-names></string-name>, <string-name><surname>Bhakta</surname><given-names>S.</given-names></string-name>, <string-name><surname>Bissell</surname><given-names>M.</given-names></string-name>, <string-name><surname>Clancy</surname><given-names>K.</given-names></string-name></person-group><etal>et al.</etal> (<year>2020</year>) <article-title>Synthetic biology open language visual (SBOL visual) version 2.2</article-title>. <source><italic toggle="yes">J. Integr. Bioinforma.</italic></source>, <volume>17</volume>, <page-range>20200014</page-range>.</mixed-citation>
    </ref>
    <ref id="R2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Beal</surname><given-names>J.</given-names></string-name>, <string-name><surname>Nguyen</surname><given-names>T.</given-names></string-name>, <string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name>, <string-name><surname>Goñi-Moreno</surname><given-names>A.</given-names></string-name>, <string-name><surname>Scott-Brown</surname><given-names>J.</given-names></string-name>, <string-name><surname>McLaughlin</surname><given-names>J.A.</given-names></string-name>, <string-name><surname>Madsen</surname><given-names>C.</given-names></string-name>, <string-name><surname>Aleritsch</surname><given-names>B.</given-names></string-name>, <string-name><surname>Bartley</surname><given-names>B.</given-names></string-name>, <string-name><surname>Bhakta</surname><given-names>S.</given-names></string-name></person-group><etal>et al.</etal> (<year>2019</year>) <article-title>Communicating structure and function in synthetic biology diagrams</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>8</volume>, <fpage>1818</fpage>–<lpage>1825</lpage>.<pub-id pub-id-type="pmid">31348656</pub-id></mixed-citation>
    </ref>
    <ref id="R3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Madsen</surname><given-names>C.</given-names></string-name>, <string-name><surname>McLaughlin</surname><given-names>J.A.</given-names></string-name>, <string-name><surname>Mısırlı</surname><given-names>G.</given-names></string-name>, <string-name><surname>Pocock</surname><given-names>M.</given-names></string-name>, <string-name><surname>Flanagan</surname><given-names>K.</given-names></string-name>, <string-name><surname>Hallinan</surname><given-names>J.</given-names></string-name> and <string-name><surname>Wipat</surname><given-names>A.</given-names></string-name></person-group> (<year>2016</year>) <article-title>The SBOL stack: a platform for storing, publishing, and sharing synthetic biology designs</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>5</volume>, <fpage>487</fpage>–<lpage>497</lpage>.<pub-id pub-id-type="pmid">27268205</pub-id></mixed-citation>
    </ref>
    <ref id="R4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Schreiber</surname><given-names>F.</given-names></string-name>, <string-name><surname>Sommer</surname><given-names>B.</given-names></string-name>, <string-name><surname>Czauderna</surname><given-names>T.</given-names></string-name>, <string-name><surname>Golebiewski</surname><given-names>M.</given-names></string-name>, <string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name>, <string-name><surname>Hucka</surname><given-names>M.</given-names></string-name>, <string-name><surname>Keating</surname><given-names>S.M.</given-names></string-name>, <string-name><surname>König</surname><given-names>M.</given-names></string-name>, <string-name><surname>Myers</surname><given-names>C.</given-names></string-name>, <string-name><surname>Nickerson</surname><given-names>D.</given-names></string-name></person-group><etal>et al.</etal> (<year>2020</year>) <article-title>Specifications of standards in systems and synthetic biology: status and developments in 2020</article-title>. <source><italic toggle="yes">J. Integr. Bioinforma.</italic></source>, <volume>17</volume>, 20200022.</mixed-citation>
    </ref>
    <ref id="R5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>McLaughlin</surname><given-names>J.A.</given-names></string-name>, <string-name><surname>Beal</surname><given-names>J.</given-names></string-name>, <string-name><surname>Mısırlı</surname><given-names>G.</given-names></string-name>, <string-name><surname>Grünberg</surname><given-names>R.</given-names></string-name>, <string-name><surname>Bartley</surname><given-names>B.A.</given-names></string-name>, <string-name><surname>Scott-Brown</surname><given-names>J.</given-names></string-name>, <string-name><surname>Vaidyanathan</surname><given-names>P.</given-names></string-name>, <string-name><surname>Fontanarrosa</surname><given-names>P.</given-names></string-name>, <string-name><surname>Oberortner</surname><given-names>E.</given-names></string-name>, <string-name><surname>Wipat</surname><given-names>A.</given-names></string-name></person-group><etal>et al.</etal> (<year>2020</year>) <article-title>The synthetic biology open language (SBOL) version 3: simplified data exchange for bioengineering</article-title>. <source><italic toggle="yes">Front. Bioeng. Biotechnol.</italic></source>, <volume>8</volume>, <page-range>1009</page-range>.</mixed-citation>
    </ref>
    <ref id="R6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Baig</surname><given-names>H.</given-names></string-name></person-group>, Fontanarrosa,P., Kulkarni,V., McLaughlin,J.A., Vaidyanathan,P., Bartley,B., Beal,J., Crowther,M., Gorochowski,T.E., Grünberg,R. <etal>et al.</etal> (<year>2020</year>) <article-title>Synthetic biology open language (SBOL) version 3.0.0</article-title>. <source><italic toggle="yes">J. Integr. Bioinforma.</italic></source>, <volume>17</volume>, 20200017.</mixed-citation>
    </ref>
    <ref id="R7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Madsen</surname><given-names>C.</given-names></string-name></person-group>, Goñi Moreno,A., Umesh,P., Palchick,Z., Roehner,N., Atallah,C., Bartley,B., Choi,K., Cox,R.S., Gorochowski,T.E. <etal>et al.</etal> (<year>2019</year>) <article-title>Synthetic biology open language (SBOL) version 2.3</article-title>. <source><italic toggle="yes">J. Integr. Bioinforma.</italic></source>, <volume>16</volume>, 20190025.</mixed-citation>
    </ref>
    <ref id="R8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Myers</surname><given-names>C.J.</given-names></string-name>, <string-name><surname>Beal</surname><given-names>J.</given-names></string-name>, <string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name>, <string-name><surname>Kuwahara</surname><given-names>H.</given-names></string-name>, <string-name><surname>Madsen</surname><given-names>C.</given-names></string-name>, <string-name><surname>McLaughlin</surname><given-names>J.A.</given-names></string-name>, <string-name><surname>Mısırlı</surname><given-names>G.</given-names></string-name>, <string-name><surname>Nguyen</surname><given-names>T.</given-names></string-name>, <string-name><surname>Oberortner</surname><given-names>E.</given-names></string-name>, <string-name><surname>Samineni</surname><given-names>M.</given-names></string-name></person-group><etal>et al.</etal> (<year>2017</year>) <article-title>A standard-enabled workflow for synthetic biology</article-title>. <source><italic toggle="yes">Biochem. Soc. Trans.</italic></source>, <volume>45</volume>, <fpage>793</fpage>–<lpage>803</lpage>.<pub-id pub-id-type="pmid">28620041</pub-id></mixed-citation>
    </ref>
    <ref id="R9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Keating</surname><given-names>S.M.</given-names></string-name></person-group>, Waltemath,D., König,M., Zhang,F., Dräger,A., Chaouiya,C., Bergmann,F.T., Finney,A., Gillespie,C.S., Helikar,T. <etal>et al.</etal> (<year>2020</year>) <article-title>SBML level 3: an extensible format for the exchange and reuse of biological models</article-title>. <source><italic toggle="yes">Mol. Syst. Biol.</italic></source>, <volume>16</volume>, <page-range>e9110</page-range>.</mixed-citation>
    </ref>
    <ref id="R10">
      <label>10.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Bartoli</surname><given-names>V.</given-names></string-name><string-name><surname>Dixon</surname><given-names>D.O.R.</given-names></string-name><string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name></person-group> (<year>2018</year>) <part-title>Automated visualization of genetic designs using DNAplotlib</part-title>. In: <person-group person-group-type="editor"><string-name><surname>Braman</surname><given-names>JC</given-names></string-name></person-group> (ed). <source><italic toggle="yes">Synthetic Biology: Methods and Protocols</italic></source>. <publisher-name>Springer</publisher-name>, <publisher-loc>New York, NY</publisher-loc>, pp. <fpage>399</fpage>–<lpage>409</lpage>.</mixed-citation>
    </ref>
    <ref id="R11">
      <label>11.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Der</surname><given-names>B.S.</given-names></string-name></person-group>, Glassey,E., Bartley,B.A., Enghuus,C., Goodman,D.B., Gordon,D.B., Voigt,C.A. and Gorochowski,T.E. (<year>2017</year>) <article-title>DNAplotlib: programmable visualization of genetic designs and associated data</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>6</volume>, <fpage>1115</fpage>–<lpage>1119</lpage>.<pub-id pub-id-type="pmid">27744689</pub-id></mixed-citation>
    </ref>
    <ref id="R12">
      <label>12.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>McLaughlin</surname><given-names>J.A.</given-names></string-name>, <string-name><surname>Pocock</surname><given-names>M.</given-names></string-name>, <string-name><surname>Mısırlı</surname><given-names>G.</given-names></string-name>, <string-name><surname>Madsen</surname><given-names>C.</given-names></string-name> and <string-name><surname>Wipat</surname><given-names>A.</given-names></string-name></person-group> (<year>2016</year>) <article-title>VisBOL: web-based tools for synthetic biology design visualization</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>5</volume>, <fpage>874</fpage>–<lpage>876</lpage>.<pub-id pub-id-type="pmid">26808703</pub-id></mixed-citation>
    </ref>
    <ref id="R13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hatch</surname><given-names>B.</given-names></string-name></person-group>, Meng,L., Mante,J., McLaughlin,J.A., Scott-Brown,J. and Myers,C.J. (<year>2021</year>) <article-title>VisBOL2 - improving web-based visualization for synthetic biology designs</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source><ext-link xlink:href="http://10.1021/acssynbio.1c00147" ext-link-type="uri">10.1021/acssynbio.1c00147</ext-link>.</mixed-citation>
    </ref>
    <ref id="R14">
      <label>14.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhang</surname><given-names>M.</given-names></string-name>, <string-name><surname>McLaughlin</surname><given-names>J.A.</given-names></string-name>, <string-name><surname>Wipat</surname><given-names>A.</given-names></string-name> and <string-name><surname>Myers</surname><given-names>C.J.</given-names></string-name></person-group> (<year>2017</year>) <article-title>SBOLDesigner 2: an intuitive tool for structural genetic design</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>6</volume>, <fpage>1150</fpage>–<lpage>1160</lpage>.<pub-id pub-id-type="pmid">28441476</pub-id></mixed-citation>
    </ref>
    <ref id="R15">
      <label>15.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Terry</surname><given-names>L.</given-names></string-name>, <string-name><surname>Earl</surname><given-names>J.</given-names></string-name>, <string-name><surname>Thayer</surname><given-names>S.</given-names></string-name>, <string-name><surname>Bridge</surname><given-names>S.</given-names></string-name> and <string-name><surname>Myers</surname><given-names>C.J.</given-names></string-name></person-group> (<year>2021</year>) <article-title>SBOLCanvas: a visual editor for genetic designs</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>10</volume>, <fpage>1792</fpage>–<lpage>1796</lpage>.<pub-id pub-id-type="pmid">34152132</pub-id></mixed-citation>
    </ref>
    <ref id="R16">
      <label>16.</label>
      <mixed-citation publication-type="confproc"><person-group person-group-type="author"><string-name><surname>Hilton</surname><given-names>M.</given-names></string-name>, <string-name><surname>Tunnell</surname><given-names>T.</given-names></string-name>, <string-name><surname>Huang</surname><given-names>K.</given-names></string-name>, <string-name><surname>Marinov</surname><given-names>D.</given-names></string-name> and <string-name><surname>Dig</surname><given-names>D.</given-names></string-name></person-group> (<year>2016</year>) <article-title>Usage, costs, and benefits of continuous integration in open-source projects</article-title>. In: <conf-name>Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering</conf-name>. <publisher-name>Association for Computing Machinery</publisher-name>, Singapore, pp. <fpage>426</fpage>–<lpage>437</lpage>.</mixed-citation>
    </ref>
    <ref id="R17">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bhatia</surname><given-names>S.</given-names></string-name> and <string-name><surname>Densmore</surname><given-names>D.</given-names></string-name></person-group> (<year>2013</year>) <article-title>Pigeon: a design visualizer for synthetic biology</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>2</volume>, <fpage>348</fpage>–<lpage>350</lpage>.<pub-id pub-id-type="pmid">23654259</pub-id></mixed-citation>
    </ref>
    <ref id="R18">
      <label>18.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Le Novère</surname><given-names>N.</given-names></string-name></person-group>, Hucka,M., Mi,H., Moodie,S., Schreiber,F., Sorokin,A., Demir,E., Wegner,K., Aladjem,M.I., Wimalaratne,S.M. <etal>et al.</etal> (<year>2009</year>) <article-title>The systems biology graphical notation</article-title>. <source><italic toggle="yes">Nat. Biotechnol.</italic></source>, <volume>27</volume>, <fpage>735</fpage>–<lpage>741</lpage>.<pub-id pub-id-type="pmid">19668183</pub-id></mixed-citation>
    </ref>
    <ref id="R19">
      <label>19.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mısırlı</surname><given-names>G.</given-names></string-name></person-group>, Beal,J., Gorochowski,T.E., Stan,G.-B., Wipat,A. and Myers,C.J. (<year>2020</year>) <article-title>SBOL visual 2 ontology</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>9</volume>, <fpage>972</fpage>–<lpage>977</lpage>.<pub-id pub-id-type="pmid">32227986</pub-id></mixed-citation>
    </ref>
    <ref id="R20">
      <label>20.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Greco</surname><given-names>F.V.</given-names></string-name>, <string-name><surname>Tarnowski</surname><given-names>M.J.</given-names></string-name> and <string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name></person-group> (<year>2019</year>) <article-title>Living computers powered by biochemistry</article-title>. <source><italic toggle="yes">Biochemist</italic></source>, <volume>41</volume>, <fpage>14</fpage>–<lpage>18</lpage>.</mixed-citation>
    </ref>
    <ref id="R21">
      <label>21.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nielsen</surname><given-names>A.A.K.</given-names></string-name></person-group>, Der,B.S., Shin,J., Vaidyanathan,P., Paralanov,V., Strychalski,E.A., Ross,D., Densmore,D. and Voigt,C.A. (<year>2016</year>) <article-title>Genetic circuit design automation</article-title>. <source><italic toggle="yes">Science</italic></source>, <volume>352</volume>, <page-range>aac7341</page-range>.</mixed-citation>
    </ref>
    <ref id="R22">
      <label>22.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name></person-group>, Borujeni,A.E., Park,Y., Nielsen,A.A.K., Zhang,J., Der,B.S., Gordon,D.B. and Voigt,C.A. (<year>2017</year>) <article-title>Genetic circuit characterization and debugging using RNA-seq</article-title>. <source><italic toggle="yes">Mol. Syst. Biol.</italic></source>, <volume>13</volume>, <page-range>952</page-range>.</mixed-citation>
    </ref>
    <ref id="R23">
      <label>23.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Laohakunakorn</surname><given-names>N.</given-names></string-name></person-group>, Grasemann,L., Lavickova,B., Michielin,G., Shahein,A., Swank,Z. and Maerkl,S.J. (<year>2020</year>) <article-title>Bottom-up construction of complex biomolecular systems with cell-free synthetic biology</article-title>. <source><italic toggle="yes">Front. Bioeng. Biotechnol.</italic></source>, <volume>8</volume>, <page-range>213</page-range>.</mixed-citation>
    </ref>
    <ref id="R24">
      <label>24.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Karkaria</surname><given-names>B.D.</given-names></string-name>, <string-name><surname>Treloar</surname><given-names>N.J.</given-names></string-name>, <string-name><surname>Barnes</surname><given-names>C.P.</given-names></string-name> and <string-name><surname>Fedorec</surname><given-names>A.J.H.</given-names></string-name></person-group> (<year>2020</year>) <article-title>From microbial communities to distributed computing systems</article-title>. <source><italic toggle="yes">Front. Bioeng. Biotechnol.</italic></source>, <volume>8</volume>, <page-range>834</page-range>.</mixed-citation>
    </ref>
    <ref id="R25">
      <label>25.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Castle</surname><given-names>S.</given-names></string-name>, <string-name><surname>Grierson</surname><given-names>C.S.</given-names></string-name> and <string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name></person-group> (<year>2021</year>) <article-title>Towards an engineering theory of evolution</article-title>. <source><italic toggle="yes">Nat. Commun.</italic></source>, <volume>12</volume>, <page-range>3226</page-range>.</mixed-citation>
    </ref>
    <ref id="R26">
      <label>26.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Marucci</surname><given-names>L.</given-names></string-name></person-group>, Barberis,M., Karr,J., Ray,O., Race,P.R., de Souza Andrade,M., Grierson,C.S., Hoffmann,S.A., Landon,S., Rech,E. <etal>et al.</etal> (<year>2020</year>) <article-title>Computer-aided whole-cell design: taking a holistic approach by integrating synthetic with systems biology</article-title>. <source><italic toggle="yes">Front. Bioeng. Biotechnol.</italic></source>, <volume>8</volume>, <page-range>942</page-range>.</mixed-citation>
    </ref>
    <ref id="R27">
      <label>27.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name></person-group>, Chelysheva,I., Eriksen,M., Nair,P., Pedersen,S. and Ignatova,Z. <etal>et al.</etal> (<year>2019</year>) <article-title>Absolute quantification of translational regulation and burden using combined sequencing approaches</article-title>. <source><italic toggle="yes">Mol. Syst. Biol.</italic></source>, <volume>15</volume>, <page-range>e8719</page-range>.</mixed-citation>
    </ref>
    <ref id="R28">
      <label>28.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Green</surname><given-names>A.A.</given-names></string-name></person-group>, Kim,J., Ma,D., Silver,P.A., Collins,J.J. and Yin,P. (<year>2017</year>) <article-title>Complex cellular logic computation using ribocomputing devices</article-title>. <source><italic toggle="yes">Nature</italic></source>, <volume>548</volume>, <fpage>117</fpage>–<lpage>121</lpage>.<pub-id pub-id-type="pmid">28746304</pub-id></mixed-citation>
    </ref>
    <ref id="R29">
      <label>29.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Scott-Brown</surname><given-names>J.</given-names></string-name> and <string-name><surname>Papachristodoulou</surname><given-names>A.</given-names></string-name></person-group> (<year>2017</year>) <article-title>sbml-diff: a tool for visually comparing SBML models in synthetic biology</article-title>. <source><italic toggle="yes">ACS Synth. Biol.</italic></source>, <volume>6</volume>, <fpage>1225</fpage>–<lpage>1229</lpage>.<pub-id pub-id-type="pmid">28035814</pub-id></mixed-citation>
    </ref>
    <ref id="R30">
      <label>30.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Grozinger</surname><given-names>L.</given-names></string-name></person-group>, Amos,M., Gorochowski,T.E., Carbonell,P., Oyarzún,D.A., Stoof,R., Fellermann,H., Zuliani,P., Tas,H. and Goñi-Moreno,A. (<year>2019</year>) <article-title>Pathways to cellular supremacy in biocomputing</article-title>. <source><italic toggle="yes">Nat. Commun.</italic></source>, <volume>10</volume>, <page-range>5250</page-range>.</mixed-citation>
    </ref>
    <ref id="R31">
      <label>31.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name></person-group> (<year>2016</year>) <article-title>Agent-based modelling in synthetic biology</article-title>. <source><italic toggle="yes">Essays Biochem.</italic></source>, <volume>60</volume>, <fpage>325</fpage>–<lpage>336</lpage>.<pub-id pub-id-type="pmid">27903820</pub-id></mixed-citation>
    </ref>
    <ref id="R32">
      <label>32.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gorochowski</surname><given-names>T.E.</given-names></string-name></person-group>, Hauert,S., Kreft,J.-U., Marucci,L., Stillman,N.R., Tang,T.-Y.D., Bandiera,L., Bartoli,V., Dixon,D.O.R., Fedorec,A.J.H. <etal>et al.</etal> (<year>2020</year>) <article-title>Toward engineering biosystems with emergent collective functions</article-title>. <source><italic toggle="yes">Front. Bioeng. Biotechnol.</italic></source>, <volume>8</volume>, <page-range>705</page-range>.</mixed-citation>
    </ref>
  </ref-list>
</back>
