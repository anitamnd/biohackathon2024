<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">NAR Genom Bioinform</journal-id>
    <journal-id journal-id-type="iso-abbrev">NAR Genom Bioinform</journal-id>
    <journal-id journal-id-type="publisher-id">nargab</journal-id>
    <journal-title-group>
      <journal-title>NAR Genomics and Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2631-9268</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8092372</article-id>
    <article-id pub-id-type="pmid">33987534</article-id>
    <article-id pub-id-type="doi">10.1093/nargab/lqab034</article-id>
    <article-id pub-id-type="publisher-id">lqab034</article-id>
    <article-categories>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI00030</subject>
        <subject>AcademicSubjects/SCI00980</subject>
        <subject>AcademicSubjects/SCI01060</subject>
        <subject>AcademicSubjects/SCI01140</subject>
        <subject>AcademicSubjects/SCI01180</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Methods Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Hapo-G, haplotype-aware polishing of genome assemblies with accurate reads</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-1718-3010</contrib-id>
        <name>
          <surname>Aury</surname>
          <given-names>Jean-Marc</given-names>
        </name>
        <!--jmaury@genoscope.cns.fr-->
        <xref rid="COR1" ref-type="corresp"/>
        <aff><institution>Génomique Métabolique, Genoscope, Institut François Jacob, CEA, CNRS, Univ Evry, Université Paris-Saclay</institution>, 91057 Evry, <country country="FR">France</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Istace</surname>
          <given-names>Benjamin</given-names>
        </name>
        <aff><institution>Génomique Métabolique, Genoscope, Institut François Jacob, CEA, CNRS, Univ Evry, Université Paris-Saclay</institution>, 91057 Evry, <country country="FR">France</country></aff>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="COR1">To whom correspondence should be addressed. Tel: +33 1 60 87 36 03; Email: <email>jmaury@genoscope.cns.fr</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>6</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2021-05-03">
      <day>03</day>
      <month>5</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>03</day>
      <month>5</month>
      <year>2021</year>
    </pub-date>
    <volume>3</volume>
    <issue>2</issue>
    <elocation-id>lqab034</elocation-id>
    <history>
      <date date-type="received">
        <day>21</day>
        <month>12</month>
        <year>2020</year>
      </date>
      <date date-type="rev-recd">
        <day>18</day>
        <month>3</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>13</day>
        <month>4</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021. Published by Oxford University Press on behalf of NAR Genomics and Bioinformatics.</copyright-statement>
      <copyright-year>2021</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbynclicense">https://creativecommons.org/licenses/by-nc/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution-NonCommercial License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact <email>journals.permissions@oup.com</email></license-p>
      </license>
    </permissions>
    <self-uri xlink:href="lqab034.pdf"/>
    <abstract>
      <title>Abstract</title>
      <p>Single-molecule sequencing technologies have recently been commercialized by Pacific Biosciences and Oxford Nanopore with the promise of sequencing long DNA fragments (kilobases to megabases order) and then, using efficient algorithms, provide high quality assemblies in terms of contiguity and completeness of repetitive regions. However, the error rate of long-read technologies is higher than that of short-read technologies. This has a direct consequence on the base quality of genome assemblies, particularly in coding regions where sequencing errors can disrupt the coding frame of genes. In the case of diploid genomes, the consensus of a given gene can be a mixture between the two haplotypes and can lead to premature stop codons. Several methods have been developed to polish genome assemblies using short reads and generally, they inspect the nucleotide one by one, and provide a correction for each nucleotide of the input assembly. As a result, these algorithms are not able to properly process diploid genomes and they typically switch from one haplotype to another. Herein we proposed Hapo-G (Haplotype-Aware Polishing Of Genomes), a new algorithm capable of incorporating phasing information from high-quality reads (short or long-reads) to polish genome assemblies and in particular assemblies of diploid and heterozygous genomes.</p>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Agence Nationale de la Recherche</institution>
            <institution-id institution-id-type="DOI">10.13039/501100001665</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>ANR-10-INBS-09–08</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="9"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="SEC1">
    <title>INTRODUCTION</title>
    <p>Long-read technologies commercialized by Pacific Biosciences (PACBIO) and Oxford Nanopore Technologies (ONT) are able to sequence long DNA molecules but at the cost of a higher error rate at least for standard protocols. Their throughputs are sufficient to generate complex genomes (<xref rid="B1" ref-type="bibr">1–5</xref>) and their costs are almost compatible with their use in large-scale resequencing projects (<xref rid="B6" ref-type="bibr">6–8</xref>). Standard genome assemblies currently rely on a combination of several technologies, making it possible to generate complete assemblies in terms of both repetitive and coding regions. The quality of the consensus relies heavily on the use of high-quality reads, mainly short reads, and the choice of a polishing algorithm.</p>
    <p>One of the most popular polishing algorithms, Pilon (<xref rid="B9" ref-type="bibr">9</xref>), was developed several years ago, before the advent of the long-read era and was originally designed to detect variants and improve microbial genome assemblies. With the increasing popularity of long-read technologies, public databases now contain a large collection of very contiguous assemblies, but even if the overall reported quality seems sufficient, local errors can critically affect protein prediction (<xref rid="B10" ref-type="bibr">10</xref>). Aware of this issue, the bioinformatic community has developed several tools over the past 2 years (<xref rid="B11" ref-type="bibr">11–16</xref>). Most of the tools (Pilon, Racon, NextPolish, HyPo, Apollo and POLCA) are based on short-read alignment, ntEdit is the only method that uses a kmer approach and NextPolish combines both strategies (Table <xref rid="tbl1" ref-type="table">1</xref>). After aligning the short reads, the algorithms detect errors by examining the pileup of bases from the reads (Pilon, NextPolish), by generating a consensus using Partial Order Alignment (Racon, HyPo) or by detecting variants (POLCA). While these tools are capable of correcting most of the errors in a draft assembly generated using long reads, we have observed frequent issues when correcting heterozygous regions. Indeed, the case of diploid genomes is particularly problematic since in this case the long-read assembly is composed of collapsed homozygous regions and duplicated allelic regions which will complicate the correct alignment of short reads. As the existing tools work locally and not at the scale of a 150 bp read and its mate, they frequently generate a mixture of haplotypes. Switching between haplotypes is problematic for the alignment of short reads and variant calling, but it can also affect the coding sequence of genes. As an example, when we were dealing with a long-read genome assembly, we observed that the Pilon correction was not able to restore a deletion in a heterozygous coding region (Figure <xref rid="F1" ref-type="fig">1</xref>). This simple observation motivated our need to develop a new polishing algorithm.</p>
    <table-wrap position="float" id="tbl1">
      <label>Table 1.</label>
      <caption>
        <p>General characteristics of existing polishing algorithms. These seven tools were evaluated in our benchmark with the specified parameters</p>
      </caption>
      <table frame="hsides" rules="groups">
        <thead>
          <tr>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1">Reference</th>
            <th rowspan="1" colspan="1">Publication date</th>
            <th rowspan="1" colspan="1">Version</th>
            <th rowspan="1" colspan="1">Read alignment</th>
            <th rowspan="1" colspan="1">Integrated aligner</th>
            <th rowspan="1" colspan="1">Parameters used in the benchmark</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Hapo-G</td>
            <td rowspan="1" colspan="1">This study</td>
            <td rowspan="1" colspan="1">-</td>
            <td rowspan="1" colspan="1">0.1</td>
            <td rowspan="1" colspan="1">yes</td>
            <td rowspan="1" colspan="1">BWA</td>
            <td rowspan="1" colspan="1">-t 36</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Apollo</td>
            <td rowspan="1" colspan="1">Firtina C. <italic toggle="yes">et al.</italic> (<xref rid="B12" ref-type="bibr">12</xref>)</td>
            <td rowspan="1" colspan="1">2020</td>
            <td rowspan="1" colspan="1">2.0</td>
            <td rowspan="1" colspan="1">yes</td>
            <td rowspan="1" colspan="1">no</td>
            <td rowspan="1" colspan="1">-t 36</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">POLCA</td>
            <td rowspan="1" colspan="1">Ziminn AV. <italic toggle="yes">et al.</italic> (<xref rid="B14" ref-type="bibr">14</xref>)</td>
            <td rowspan="1" colspan="1">2020</td>
            <td rowspan="1" colspan="1">3.4.2</td>
            <td rowspan="1" colspan="1">yes</td>
            <td rowspan="1" colspan="1">BWA</td>
            <td rowspan="1" colspan="1">-t 36</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">HyPo</td>
            <td rowspan="1" colspan="1">Kundu R. <italic toggle="yes">et al.</italic> (<xref rid="B13" ref-type="bibr">13</xref>)</td>
            <td rowspan="1" colspan="1">2019</td>
            <td rowspan="1" colspan="1">1.0.3</td>
            <td rowspan="1" colspan="1">yes</td>
            <td rowspan="1" colspan="1">no</td>
            <td rowspan="1" colspan="1">-s size* -c 180 -t 36</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">NextPolish</td>
            <td rowspan="1" colspan="1">Hu J. <italic toggle="yes">et al.</italic> (<xref rid="B12" ref-type="bibr">12</xref>)</td>
            <td rowspan="1" colspan="1">2019</td>
            <td rowspan="1" colspan="1">1.3.2</td>
            <td rowspan="1" colspan="1">yes</td>
            <td rowspan="1" colspan="1">BWA</td>
            <td rowspan="1" colspan="1">task = best parallel_jobs = 6 multithread_jobs = 6 genome_size = auto</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">ntEdit</td>
            <td rowspan="1" colspan="1">Warren RL. <italic toggle="yes">et al.</italic> (<xref rid="B11" ref-type="bibr">11</xref>)</td>
            <td rowspan="1" colspan="1">2019</td>
            <td rowspan="1" colspan="1">1.3.2</td>
            <td rowspan="1" colspan="1">no</td>
            <td rowspan="1" colspan="1">NA</td>
            <td rowspan="1" colspan="1">-k 40 -t 36 –outbloom –solid ntEdit: -m 1 -t 36</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Racon</td>
            <td rowspan="1" colspan="1">Vaser R. <italic toggle="yes">et al.</italic> (<xref rid="B15" ref-type="bibr">15</xref>)</td>
            <td rowspan="1" colspan="1">2017</td>
            <td rowspan="1" colspan="1">1.4.3</td>
            <td rowspan="1" colspan="1">yes</td>
            <td rowspan="1" colspan="1">no</td>
            <td rowspan="1" colspan="1">-t 36</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Pilon</td>
            <td rowspan="1" colspan="1">Walker BJ. <italic toggle="yes">et al.</italic> (<xref rid="B9" ref-type="bibr">9</xref>)</td>
            <td rowspan="1" colspan="1">2014</td>
            <td rowspan="1" colspan="1">1.23</td>
            <td rowspan="1" colspan="1">yes</td>
            <td rowspan="1" colspan="1">no</td>
            <td rowspan="1" colspan="1">–threads 36</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="T1TFN1">
          <p>*size = 120Mb (<italic toggle="yes">Arabidopsis thaliana</italic>), 120Mb (<italic toggle="yes">Solanum tuberosum</italic>), 100 K (synthetic sequence).</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <fig position="float" id="F1">
      <label>Figure 1.</label>
      <caption>
        <p>Example of a deletion in a coding frame. The two haplotypes have consistent coding frames (codons are alternatively colored in red and blue) and the draft assembly contains a deletion in a stretch of T’s (green box). Pilon was not able to restore the coding frame and add a second frameshift. In comparison Hapo-G was able to restore haplotype A.</p>
      </caption>
      <graphic xlink:href="lqab034fig1" position="float"/>
    </fig>
    <p>Here we present Hapo-G (pronounced as apogee), a new method dedicated to the polishing of genome assemblies. This algorithm tends to phase the assembly while correcting the sequencing errors. We compare Hapo-G with existing polishers (HyPo, Apollo, NextPolish, Pilon, POLCA and Racon) and show that Hapo-G is not only comparable to existing methods for polishing draft assemblies, but also faster and tends to decrease jumps between haplotypes. Hapo-G is written in C, uses the hts library (<xref rid="B17" ref-type="bibr">17</xref>) and is freely available at <ext-link xlink:href="http://www.genoscope.cns.fr/hapog" ext-link-type="uri">http://www.genoscope.cns.fr/hapog</ext-link>.</p>
  </sec>
  <sec sec-type="materials|methods" id="SEC2">
    <title>MATERIALS AND METHODS</title>
    <sec id="SEC2-1">
      <title>Hapo-G algorithm</title>
      <p>Hapo-G, like most existing tools, requires a sorted bam file containing the high-quality read alignments on the draft genome. These alignments could have been generated using bwa mem (<xref rid="B18" ref-type="bibr">18</xref>), minimap2 (<xref rid="B19" ref-type="bibr">19</xref>) or any other alignment tool capable of producing a bam file. Hapo-G maintains two stacks of alignments, the first (all-ali) contains all the alignments that overlap the currently inspected base, and the second (hap-ali) contains only the read alignments that agree with the last selected haplotype. Hapo-G selects a reference alignment and tries to use it as long as possible to polish the region where it aligns, which will minimize mixing between haplotypes (Figure <xref rid="F2" ref-type="fig">2</xref>).</p>
      <fig position="float" id="F2">
        <label>Figure 2.</label>
        <caption>
          <p>Description of the Hapo-G algorithm. Two stacks of alignments are stored, all-ali which contains all the alignment of a specific region (not shown) and hap-ali which contains reads from the same haplotype. The bam file is processed iteratively, and for each input alignment, Hapo-G will polish the region (draft genome is in black) between the start of the last alignment and the start of the current alignment. The reference alignment is the one used as the backbone for error-correction. Once the frequency of the reference base (in red) is computed, the position is classified as homozygous (case 1, left panel), heterozygous (case 2, lower panel) or sequencing error (case 3, right panel).</p>
        </caption>
        <graphic xlink:href="lqab034fig2" position="float"/>
      </fig>
      <p>Hapo-G performs the polishing sequentially and scans the input bam file of alignments sorted by position. For each input alignment (called current alignment), Hapo-G polishes each nucleotide in the region between the last recorded position and the start position of the current alignment (called current position), after which the current alignment will be added to both stacks (Figure <xref rid="F2" ref-type="fig">2</xref>).</p>
    </sec>
    <sec id="SEC2-2">
      <title>Polishing of a given nucleotide in the draft assembly</title>
      <p>First, the two stacks (all-ali and hap-ali), if they are not empty, are cleaned to remove any alignment that does not overlap with the current position. In case the reference alignment has been deleted, a new alignment is selected from the hap-ali stack (the read alignment that ends closest to the current position). If the coverage at the current position is below a threshold, set at three reads, the current base in the draft sequence remains unchanged. Otherwise, the nucleotide of the reference alignment (called the reference base) is extracted and the frequency of this reference base is calculated in the all-ali and hap-ali stacks. Based on its frequency, the current position is tagged as a homozygous site, a heterozygous site or a sequencing error (Figure <xref rid="F2" ref-type="fig">2</xref>).</p>
      <p>The position is classified as homozygous if the frequency of the reference base is &gt;0.8 and at least 3 reads from the hap-ali stack are in accordance. If the reference base and the nucleotide of the draft assembly (the current base) are different, the current base is replaced by the reference base.</p>
      <p>The position is classified as heterozygous if the frequency of the reference base is between 0.2 and 0.8 and the hap-ali stack contains at least six reads. If the reference base and the current base are different, the current base is replaced by the reference base. In addition, any read alignments that do not have the same base as the reference base at the current position will be removed from the hap-ali stack. Indeed, they may represent a second haplotype. Importantly, when a read is removed from the stack, its name and its mate name are added to a hash table. The corresponding read alignments will be ignored when encountered later while polishing the current sequence. The hash table is empty when the end of the current sequence is reached.</p>
    </sec>
    <sec id="SEC2-3">
      <title>Usage and parallelization of Hapo-G</title>
      <p>The polishing step of Hapo-G is wrapped in a python script which manages the pre and post processing steps. First, the wrapper indexes the genome and maps the reads on the draft assembly using bwa-mem for short reads and minimap2 for long-reads. The polishing step, written in C using the htslib, is not multithreaded but can be easily parallelized by splitting the input fasta file as well as the alignment file. This divide and conquer strategy makes it possible to speed up the polishing step and allows to take advantage of a wide range of computing architectures.</p>
    </sec>
    <sec id="SEC2-4">
      <title>Generation of benchmarking datasets</title>
      <sec id="SEC2-4-1">
        <title>Homozygous genome assemblies</title>
        <p>We downloaded the Nanopore data of an <italic toggle="yes">Arabidopsis thaliana</italic> sample produced by Michigan State University (Table <xref rid="tbl2" ref-type="table">2</xref>) and assembled these data using the Flye assembler (<xref rid="B20" ref-type="bibr">20</xref>) (v2.8.1) with the parameter ‘-g 120m’ to indicate a genome size of 120 Mb. We obtained an assembly of 118 Mb, comprising 16 large contigs and a contig N50 of 14.8 Mb (Table <xref rid="tbl2" ref-type="table">2</xref>). This assembly was used as input of the Medaka polisher (v1.2.0, <ext-link xlink:href="https://github.com/nanoporetech/medaka" ext-link-type="uri">https://github.com/nanoporetech/medaka</ext-link>), in conjunction with the Nanopore reads and the ‘-m r941_min_high_g303’ parameter was applied, in order to choose a suitable model for this type of data. This assembly was used to compare polishing tools.</p>
        <table-wrap position="float" id="tbl2">
          <label>Table 2.</label>
          <caption>
            <p>Datasets and long-read assemblies generated for the benchmark. Coverages were computed using a genome size of 120 Mb, 3 Gb, 1.6 Gb and 56 Mb for <italic toggle="yes">Arabidopsis thaliana, Homo sapiens, Solanum tuberosum</italic> and the metagenome sample (sum of genome sizes), respectively</p>
          </caption>
          <table frame="hsides" rules="groups">
            <thead>
              <tr>
                <th rowspan="1" colspan="1"/>
                <th rowspan="1" colspan="1"/>
                <th rowspan="1" colspan="1"><italic toggle="yes">Arabidopsis thaliana</italic> Col-0</th>
                <th rowspan="1" colspan="1">
                  <italic toggle="yes">Homo sapiens</italic>
                </th>
                <th rowspan="1" colspan="1">Synthetic sequence</th>
                <th rowspan="1" colspan="1"><italic toggle="yes">Solanum tuberosum</italic> L. RH89–039-16</th>
                <th rowspan="1" colspan="1">Metagenomic sample</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td rowspan="1" colspan="1">Illumina</td>
                <td rowspan="1" colspan="1">Accession number</td>
                <td rowspan="1" colspan="1">SRR12136403</td>
                <td rowspan="1" colspan="1">ERR194147</td>
                <td rowspan="1" colspan="1">NA</td>
                <td rowspan="1" colspan="1">PRJNA573826</td>
                <td rowspan="1" colspan="1">SRX4901583</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td rowspan="1" colspan="1">Read length (bp)</td>
                <td rowspan="1" colspan="1">2 × 150</td>
                <td rowspan="1" colspan="1">2 × 101</td>
                <td rowspan="1" colspan="1">2 × 150</td>
                <td rowspan="1" colspan="1">2 × 250</td>
                <td rowspan="1" colspan="1">2 × 151</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td rowspan="1" colspan="1">Coverage</td>
                <td rowspan="1" colspan="1">176 X</td>
                <td rowspan="1" colspan="1">30 X</td>
                <td rowspan="1" colspan="1">50 X</td>
                <td rowspan="1" colspan="1">47 X</td>
                <td rowspan="1" colspan="1">1150 X</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Nanopore</td>
                <td rowspan="1" colspan="1">Accession number</td>
                <td rowspan="1" colspan="1">SRR12136402</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">PRJNA573826</td>
                <td rowspan="1" colspan="1">SRX5161985 SRX4901586</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td rowspan="1" colspan="1">Reads N50 (bp)</td>
                <td rowspan="1" colspan="1">18 827</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">25 280</td>
                <td rowspan="1" colspan="1">22 660</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td rowspan="1" colspan="1">Coverage</td>
                <td rowspan="1" colspan="1">95 X</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">75 X</td>
                <td rowspan="1" colspan="1">83 X</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td rowspan="1" colspan="1">Accession number</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">SRX7922852</td>
                <td rowspan="1" colspan="1">-</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">PACBIO HiFi</td>
                <td rowspan="1" colspan="1">Reads N50 (bp)</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">10 000</td>
                <td rowspan="1" colspan="1">-</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td rowspan="1" colspan="1">Coverage</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">-</td>
                <td rowspan="1" colspan="1">14 X</td>
                <td rowspan="1" colspan="1">-</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1">Assembly</td>
                <td rowspan="1" colspan="1">Number of contigs</td>
                <td rowspan="1" colspan="1">238</td>
                <td rowspan="1" colspan="1">1,172</td>
                <td rowspan="1" colspan="1">1</td>
                <td rowspan="1" colspan="1">11,070</td>
                <td rowspan="1" colspan="1">107</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td rowspan="1" colspan="1">Cumulative size</td>
                <td rowspan="1" colspan="1">119 992 853</td>
                <td rowspan="1" colspan="1">2 818 937 673</td>
                <td rowspan="1" colspan="1">102 000</td>
                <td rowspan="1" colspan="1">1 332 417 447</td>
                <td rowspan="1" colspan="1">49 379 539</td>
              </tr>
              <tr>
                <td rowspan="1" colspan="1"/>
                <td rowspan="1" colspan="1">Contig N50 (bp)</td>
                <td rowspan="1" colspan="1">14 841 396</td>
                <td rowspan="1" colspan="1">11 821 944</td>
                <td rowspan="1" colspan="1">102 000</td>
                <td rowspan="1" colspan="1">440 422</td>
                <td rowspan="1" colspan="1">3 584 230</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
        <p>In addition, we downloaded a human genome assembly based on Nanopore reads that was published by Jain <italic toggle="yes">et al.</italic> (<xref rid="B2" ref-type="bibr">2</xref>) as well as Illumina reads from the same individual (ERR194147). This dataset was used to benchmark all polishers, in terms of quality of the result but also of restitution time and memory requirements.</p>
      </sec>
      <sec id="SEC2-4-2">
        <title>Heterozygous genome assemblies</title>
        <p>We generated a 100 kb sequence using an Homo sapiens model (<ext-link xlink:href="http://rsat.sb-roscoff.fr/RSAT_home.cgi" ext-link-type="uri">http://rsat.sb-roscoff.fr/RSAT_home.cgi</ext-link>) and created two haplotypes by incorporating, each time, 100 random mutations into the initial 100 kb sequence (<ext-link xlink:href="http://www.bioinformatics.org/sms2/mutate_dna.html" ext-link-type="uri">http://www.bioinformatics.org/sms2/mutate_dna.html</ext-link>). We added two random 1 kb sequences to both ends of the two haplotypes to avoid mapping issues on first and last nucleotides. Illumina short-reads were generated from both haplotypes using ART (<xref rid="B21" ref-type="bibr">21</xref>) software (version 2.5.1) and the following parameters: -ss HSXt -p -l 150 -f 25 -m 200 -s 10. From the two haplotype sequences, we generated an haploid sequence by alternatively retaining 60 nucleotides of each sequence and adding 2000 random mutations (<ext-link xlink:href="http://www.bioinformatics.org/sms2/mutate_dna.html" ext-link-type="uri">http://www.bioinformatics.org/sms2/mutate_dna.html</ext-link>) to simulate sequencing errors. The resulting haploid sequence is a mixture of the two haplotypes and is used to test the ability of each polisher to correct errors and phase the draft sequence.</p>
        <p>Additionally, we downloaded the Nanopore data produced by the authors of a recent article by Zhou <italic toggle="yes">et al.</italic> (<xref rid="B22" ref-type="bibr">22</xref>) describing the diploid assembly of <italic toggle="yes">Solanum tuberosum</italic> (Table <xref rid="tbl2" ref-type="table">2</xref>). The long-read dataset was assembled using the Flye assembler (<xref rid="B20" ref-type="bibr">20</xref>) (v2.8.1) with the parameter ‘-g 1600m’ to indicate a genome size of 1600 Mb (representing the length of the diploid genome). The resulting assembly had a size of 1.33 Gb and a contig N50 of 440 kb (Table <xref rid="tbl2" ref-type="table">2</xref>). Using this assembly, we performed two benchmarks: a first on the whole genome and a second on a specific genomic region which has been thoroughly analyzed in the Zhou <italic toggle="yes">et al.</italic> publication.</p>
      </sec>
      <sec id="SEC2-4-3">
        <title>Metagenome assembly</title>
        <p>We downloaded two MinION runs from a synthetic mock microbial community (<xref rid="B23" ref-type="bibr">23</xref>) composed of 12 bacterial strains (SRX4901586 and SRX5161985) as well as the corresponding Illumina sequencing reads (SRR8073716). We assembled the Nanopore data using Metaflye (<xref rid="B24" ref-type="bibr">24</xref>) and obtained a genome assembly of 43.1 Mb in size, composed of 104 contigs of &gt;2 kb. Contigs were then polished two times with Racon (Medaka could not be launched on this too old dataset) and used as input assembly for all polishing methods.</p>
      </sec>
    </sec>
    <sec id="SEC2-5">
      <title>Benchmarking of polishing methods</title>
      <p>Each polisher was launched (on a 36 cores server with 380GB of memory) iteratively six times on the input assembly to evaluate accuracy and impact of multiple rounds of correction. If needed, Illumina reads were aligned with BWA mem (v0.7.17 with the default parameters except -t 36), and the resulting bam file was sorted and indexed using Samtools (<xref rid="B17" ref-type="bibr">17</xref>) (v1.10 with the default parameters except -@ 36 and -m 10G). Surprisingly, HyPo never succeeded when using a genome size of 1300 Mb for the correction of the <italic toggle="yes">Solanum T</italic>. genome assembly, but was able to polish the sequence when using 120 Mb. Importantly, as Apollo does not take into account paired-reads, short-reads alignment was performed in single-end mode. In our hands, Apollo needed 60 hours to perform a single iteration over the Arabidopsis genome, 60 times longer than most other methods. We therefore decided not to use it for further testing. The parameters used for each polisher are described in Table <xref rid="tbl1" ref-type="table">1</xref>.</p>
    </sec>
    <sec id="SEC2-6">
      <title>Polishing of homozygous genome assemblies</title>
      <p>The QUAST suite (<xref rid="B25" ref-type="bibr">25</xref>) was used to generate statistics on the quality of the alignment between the polished assemblies and the reference genome (Col-0 downloaded from the TAIR website). In addition, Illumina reads were aligned on each polished assembly and only perfect alignments were kept. The accuracy and completeness of the gene content were assessed using TAIR10.1 annotation and BUSCO (<xref rid="B26" ref-type="bibr">26</xref>) (version 5 with brassicales_odb10 dataset). Exons from the reference <italic toggle="yes">Arabidopsis</italic> annotation (using the getfasta command from bedtools (<xref rid="B27" ref-type="bibr">27</xref>)) were extracted and aligned onto each assembly using the Blat aligner (<xref rid="B28" ref-type="bibr">28</xref>). Exons that were aligned with 100% identity along their entire length were kept and unique exon names were counted to avoid multi-mapping bias.</p>
      <p>On the human genome dataset, all polishers were launched only one time, as this large assembly was mainly used to evaluate their restitution time and memory requirements. As with <italic toggle="yes">Arabidopsis thaliana</italic>, the quality was assessed by aligning the Illumina reads on each polished assembly and only perfect alignments were retained. The accuracy and completeness of the gene content was assessed with the reference annotation using pblat (<xref rid="B29" ref-type="bibr">29</xref>) and as previously described.</p>
    </sec>
    <sec id="SEC2-7">
      <title>Polishing of heterozygous genome assemblies</title>
      <p>The polished assemblies of the original 100 kb genomic region were aligned with the two haplotype sequences using muscle (<xref rid="B30" ref-type="bibr">30</xref>) (version 3.8), and each position was labeled haplotype 1 or haplotype 2 (if the base was similar to the corresponding haplotype), error (if the base was different from the two haplotypes) or equal (if the three bases were identical). For each polisher, the number of swaps between the two haplotypes and the number of errors were reported.</p>
      <p>The diploid and heterozygous genome of <italic toggle="yes">Solanum tuberosum</italic> was used to assess the ability of each polisher to locally preserve the haplotype phasing. Two benchmarks were performed: a first on the whole genome and a second on a specific genomic region. Polishing algorithms were compared on their ability to phase genomic regions during the error-correction step. For that purpose, heterozygous variants were detected from the Illumina short reads, without prior assembly, using discoSNP (<xref rid="B31" ref-type="bibr">31</xref>) and default parameters. The sequence context (30 bp on the right and left side) of each variant was extracted from the discoSNP output and only 61 bp-sequence with a single variant were kept. In the discoSNP output, the detected variants were phased based on the Illumina reads (-A parameter of discoSNP), and only chains of at least three variants validated by at least 5 short reads were selected. For each heterozygous SNP, the two variants were mapped on each polished assembly and only perfect matches were kept. All reliable chains of variants were searched in the alignment results and a given chain was validated only if all its variants were found in a perfect match and on the same genomic sequence.</p>
      <p>In addition, we focused on a 300 kb genomic region of chromosome 8, which has been described in the Figure 2B of the Zhou <italic toggle="yes">et al.</italic> publication. The authors illustrate a syntenic block on the two haplotypes. The coding exons of the two haplotypes were extracted and only the exons that contain at least one difference were selected and used as candidate exons. This region was assembled into four different contigs in our nanopore-based assembly, with two collapsed (contig_3372 and contig_15103) and two duplicated contigs (contig_15126 and contig_15127). The candidate exons were searched in the polished versions of these four contigs and only the perfect alignments were kept. The gene content completeness was evaluated using BUSCO (<xref rid="B26" ref-type="bibr">26</xref>) (version 5 with solanales_odb10 dataset).</p>
    </sec>
    <sec id="SEC2-8">
      <title>Polishing of a metagenomic assembly</title>
      <p>A synthetic mock community composed of 12 bacterial strains was used to compare each polisher and assess their ability to recover specific regions of each genome. For that purpose, we collected all 31-mers in the metagenome sample that are specific to a given species, using UniqueKMER (<xref rid="B32" ref-type="bibr">32</xref>) (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). We then searched for these specific 31-mers in each polished assembly and hypothesized that a higher number of specific 31-mers reflected a more realistic composition of the metagenome.</p>
    </sec>
  </sec>
  <sec sec-type="results" id="SEC3">
    <title>RESULTS</title>
    <sec id="SEC3-1">
      <title>Impact of the sequencing coverage</title>
      <p>Even if the sequencing coverage is no longer a problem, the <italic toggle="yes">Arabidopsis thaliana</italic> and <italic toggle="yes">Solanum tuberosum</italic> genome assemblies were polished independently with various depths of coverage. On the homozygous genome, the consensus quality is already high with as low as 25× of coverage, even if the overall quality can be improved with a higher coverage (between 50× and 100×, <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S1</xref>). Interestingly, some metrics (identity and number of perfect mapped reads) seem to decrease when the coverage is too high (180×, <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S1</xref>). In heterozygous regions, coverage has a direct impact on the ability to phase variants, and it intuitively requires twice as much coverage as in homozygous regions. With a coverage of 25×, Hapo-G missed 4% of phased variants, compared to polishing with 50×. However, the number of phased variants with 25× remains similar or higher than that of other polishers, even with 50× of coverage (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S2</xref>).</p>
    </sec>
    <sec id="SEC3-2">
      <title>Polishing of homozygous genome assemblies</title>
      <p>Overall, all of the polishing tools achieved very similar results in terms of quality metrics. They produced a polished assembly with &lt;60 errors per 100 kb (Figure <xref rid="F3" ref-type="fig">3A</xref>), with the exception of ntEdit (75 errors per 100 kb), Apollo (96 errors per 100 kb) and Racon (128 errors per 100 kb). These results are confirmed by the number of perfectly mapped Illumina read pairs (Figure <xref rid="F3" ref-type="fig">3B</xref>), with the lowest scores obtained by Racon and ntEdit (34.1 and 41.8 M respectively), while the highest number was achieved by HyPo and NextPolish (43.0 M after the first round of correction). Regarding the alignment of the reference annotation, again, differences were small (&lt;450 exons between Hapo-G, HyPo, NextPolish, Pilon and POLCA out of the 203 233 input exons), with ntEdit and Racon assemblies containing the lowest number of exons retrieved perfectly (Figure <xref rid="F3" ref-type="fig">3C</xref>). For Hapo-G, HyPo, ntEdit, NextPolish, Pilon and POLCA, increasing the number of polishing rounds didn’t seem to have any significant impact, although two rounds for most tools seems to be optimal. Oddly, increasing the number of polishing rounds with Racon increased the number of errors per 100 kb from 128 for the first round to 161 for the sixth round. Racon’s inferior performance can be explained by the fact that it was originally designed to perform polishing using long reads. Moreover, the gene content was very similar for all methods, and more complete than the uncorrected assembly, except for Racon and Apollo which obtained a lower value than the input assembly (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>). The fastest average running time was achieved by ntEdit with approximately 25 min for each round, while the slowest was Apollo (3647 min for a single iteration) and Racon, with an average running time of 163 min. From the alignment-based methods, Hapo-G was the fastest with an average running time of 40 min (Figure <xref rid="F3" ref-type="fig">3D</xref>). Memory requirement is variable, ntEdit requires the least amount of memory, while alignment-based methods are generally limited by the use of samtools sort which is the part that requires the most amount of memory (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S3</xref>). However, depending on the implementation, some methods require twice as much memory (Pilon, POLCA and Racon).</p>
      <fig position="float" id="F3">
        <label>Figure 3.</label>
        <caption>
          <p>Comparison of polishing algorithms on the <italic toggle="yes">Arabidopsis thaliana</italic> genome assembly. Lower panels of A, B and C show the full distribution and the upper panels are a zoom on the higher values. (<bold>A</bold>) Number of errors per 100 kb after each round of polishing, when compared to the <italic toggle="yes">Arabidopsis thaliana</italic> reference genome. (<bold>B</bold>) Number of Illumina pairs mapped perfectly on each assembly. (<bold>C</bold>) Number of <italic toggle="yes">Arabidopsis thaliana</italic> exons aligned with 100% identity after each round of polishing. (<bold>D</bold>) Run times of polishing tools, for each polishing round.</p>
        </caption>
        <graphic xlink:href="lqab034fig3" position="float"/>
      </fig>
      <p>The human genome was successfully polished using Hapo-G, NextPolish, ntEdit and Pilon. Other methods were not able to produce results: HyPo crashed due to a lack of memory, Racon generated an empty fasta file with no error messages and POLCA crashed while processing the VCF (Variant Call Format) file. As already observed on the homozygous plant genome, the quality metrics were similar for all methods, and ntEdit had the lowest results but was the fastest. Hapo-G was the second fastest method, only 5 h compared to 30 h with NextPolish, and therefore seems to be a good compromise between speed and quality of the result (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S4</xref>)</p>
    </sec>
    <sec id="SEC3-3">
      <title>Polishing of heterozygous genome assemblies</title>
      <p>Initially, the 100 kb sequence contained 861 haplotype switches and 1877 sequencing errors. In this benchmark, we only performed one round of correction for each tool. Pilon was the only polisher to generate more haplotype switches than there were initially in the reference (881 switches). The POLCA and ntEdit polished sequences contained &gt;800 switches, while about 500 switches were still present in the HyPo, Racon and NextPolish corrected sequences. Hapo-G, the only tool dedicated to heterozygous genomes, obtained the best result with only 65 switches (Figure <xref rid="F4" ref-type="fig">4</xref> and <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S3</xref>). In terms of remaining sequencing errors, only three corrected sequences still contained some errors, the one obtained with: HyPo (5 errors), Racon (198 errors) and ntEdit (938 errors).</p>
      <fig position="float" id="F4">
        <label>Figure 4.</label>
        <caption>
          <p>Comparison of polishing algorithms on a synthetic diploid sequence. The 100 kb sequence is represented on the <italic toggle="yes">x</italic> axis and each polishing tool has a dedicated track, where remaining errors are represented with red bars and switches between the two haplotypes are represented by blue bars.</p>
        </caption>
        <graphic xlink:href="lqab034fig4" position="float"/>
      </fig>
      <p>In the case of a more complex and heterozygous genome, the situation is different. Three methods seemed to perform better than the others: Hapo-G, HyPo and NextPolish. As for simple and homozygous genomes, ntEdit and Racon obtained the worst results (Figure <xref rid="F5" ref-type="fig">5A</xref>). However, the number of phased variants that could be recovered was higher in the assembly corrected with Hapo-G and this from the first round (472 534 phased variants compared to 469 441 after six rounds of NextPolish, Figure <xref rid="F5" ref-type="fig">5B</xref>). The situation is the same when looking at chains of at least three variants. Hapo-G was the only one to retrieve &gt;100 000 chains whereas the second best result was obtained by NextPolish with 92 291 chains (Figure <xref rid="F5" ref-type="fig">5C</xref>). Additionally, Hapo-G was twice as fast as HyPo and seven times faster than NextPolish, the other two methods that performed well on heterozygous genomes. Furthermore, Hapo-G was the second fastest method and as previously observed, ntEdit was the fastest (Figure <xref rid="F5" ref-type="fig">5D</xref>). The six rounds of polishing using Hapo-G were faster than a single round performed with NextPolish. Interestingly, we have observed three types of tools: those that take advantage of multiple rounds of correction, those for which one round seems sufficient, and those that produce inferior results by performing multiple rounds of correction. Hapo-G, HyPo, Pilon and POLCA are in the first category, ntEdit and NextPolish in the second and Racon is the only one which seems to degrade the quality of the assembly as rounds are performed (Figure <xref rid="F5" ref-type="fig">5A</xref>–<xref rid="F5" ref-type="fig">C</xref>).</p>
      <fig position="float" id="F5">
        <label>Figure 5.</label>
        <caption>
          <p>Comparison of polishing algorithms on the <italic toggle="yes">Solanum tuberosum</italic> genome assembly for each polishing round. Lower panels of A, B and C show the full distribution and the upper panels are a zoom on the higher values. (<bold>A</bold>) Number of Illumina pairs mapped perfectly on each assembly. (<bold>B</bold>) Number of phased variants retrieved in each assembly. (<bold>C</bold>) Number of chains composed of &gt;3 variants (and confirmed by at least 5 reads) perfectly retrieved in each assembly. (<bold>D</bold>) Run time of each polishing tool.</p>
        </caption>
        <graphic xlink:href="lqab034fig5" position="float"/>
      </fig>
      <p>In addition, we focused on the two allelic regions described in the study by Zhou <italic toggle="yes">et al.</italic> and counted the number of candidate exons in each assembly. In the Hapo-G corrected sequence, we recovered 86 candidate exons which represented the highest number of exons found in all assemblies, compared to 39 in the unpolished assembly. For comparison, 84 candidate exons were found in the NextPolish assembly which is the second best result (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S4</xref>).</p>
      <p>Furthermore, the completeness of the gene content was evaluated on the whole genome assembly using BUSCO and 5950 genes conserved across solanales. Even if all the methods had a higher gene content completeness than the unpolished assembly (81.5%), only three methods (Hapo-G, HyPo and NextPolish) obtained a BUSCO score equal or higher than 98.2% (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S5</xref>).</p>
    </sec>
    <sec id="SEC3-4">
      <title>Polishing of a metagenomic assembly</title>
      <p>On the metagenomic sample, Hapo-G and HyPo were the two methods that allowed us to retrieve the highest number of specific 31-mers (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S5B</xref>) and to perfectly align the higher number of paired-end reads (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S5A</xref>). Hapo-G retrieved the highest number of specific 31-mers, and HyPo the highest number of paired-ends reads. This could be explained by the fact that the coverage was heterogeneous, so the number of specific 31-mers was not directly linked to the number of correctly mapped paired-ends reads. Interestingly, in this context, NextPolish is the fastest method (even faster than the kmer approach of ntEdit), only 30 mn of running time for the first iteration, compared to the ∼2 h needed for other mapping-based methods (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S5C</xref>).</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="SEC4">
    <title>DISCUSSION</title>
    <p>In this study, we report a new software, Hapo-G, which is able to polish draft assemblies with a quality equivalent to that of existing tools on simple and homozygous genomes, while being faster, but which also improves the polishing of heterozygous genomic regions as well as metagenomic assemblies.</p>
    <p>Nowadays, the number of polishing tools is high and although almost all are based on the same principle (mapping of short reads), their performances are different, likewise none are specialized in processing heterozygous genomes. In this study, we compared eight existing algorithms: Hapo-G, HyPo, Apollo, NextPolish, ntEdit, Pilon, POLCA and Racon. We obtained very similar results on a small plant genome (<italic toggle="yes">Arabidopsis thaliana</italic>) with the exception of ntEdit which is the only tool not based on short-read alignment. In addition, we observe that the oldest and most widely used polishing tool, Pilon, is not among the tools with the best results. In general, Hapo-G, HyPo and NextPolish stand out and often give good results.</p>
    <p>We observed on a synthetic diploid sequence and on a true heterozygous genome (<italic toggle="yes">Solanum tuberosum</italic>) that the phasing of variants is of better quality when the assembly is polished with Hapo-G, leading after six rounds of correction to the higher number of paired-end reads perfectly mapped back to the assembly (47 957 836 out of 151 018 344). Only two tools, ntEdit and Hapo-G, succeeded in polishing the 1.3 Gb of the <italic toggle="yes">Solanum tuberosum</italic> genome assembly in &lt;3 h on average. On this large genome, the six rounds of Hapo-G ended before the first round of NextPolish, which is the second best tool according to our benchmark and already incorporates several rounds of mapping/correction internally. Importantly, on much larger genomes like that of the Human, HyPo, Apollo and Racon failed to polish the consensus in &lt;3 days on a 36-core server with 380 Gb of memory.</p>
    <p>Increasing the number of correction rounds is generally beneficial, except for ntEdit and NextPolish where the results are very similar from round one through sixth, and Racon where the quality of the consensus seems to deteriorate when adding new correction cycles.</p>
    <p>In homozygous regions, although many polishers have achieved similar results, NextPolish appears to be the best performer, therefore, if possible, we suggest using NextPolish in combination with Hapo-G to achieve high quality in homozygous and heterozygous regions. It is important to note that Hapo-G should be used last to best preserve variant phasing. In fact, homozygosity is generally not complete and heterozygous regions may remain. Interestingly, by combining NextPolish and Hapo-G, the number of perfectly mapped paired-end reads was higher than after six rounds of Hapo-G or NextPolish separately. However, a combination of Hapo-G with any other polisher did not lead to better results in our tests (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S6</xref>).</p>
    <p>Hapo-G algorithm requires high-quality reads, which excludes error-prone long reads. However, PACBIO HiFi long-reads are suitable to polish a genome assembly using Hapo-G. Even if it was not initially dedicated to long reads, we polished the <italic toggle="yes">Solanum tuberosum</italic> using both short and long reads. The input coverage was low (14×), but combining both technologies allowed Hapo-G to increase the number of phased variants (491 093 compared to 482 404 after six rounds of Hapo-G with short reads, <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S7</xref>).</p>
    <p>Hapo-G is often the fastest alignment-based method, achieves good results (particularly in metagenomic samples and heterozygous regions) and is flexible (it can take long or short reads as input as long as they are of high quality). Based on these observations, we recommend using Hapo-G to polish genome and metagenome assemblies and eventually by performing multiple rounds of correction if possible. In addition, depending on the size of the genome and if possible, we recommend combining Hapo-G with another polisher like HyPo or NextPolish which generally give good results.</p>
  </sec>
  <sec sec-type="data-availability" id="SEC5">
    <title>DATA AVAILABILITY</title>
    <p>Hapo-G is an open source software, source code, binaries as well as results of the benchmark are freely available from <ext-link xlink:href="http://www.genoscope.cns.fr/hapog" ext-link-type="uri">http://www.genoscope.cns.fr/hapog</ext-link>. In addition, Hapo-G has been added in the Anaconda repository for ease of installation and use: <ext-link xlink:href="https://anaconda.org/lbgb_cea/hapog" ext-link-type="uri">https://anaconda.org/lbgb_cea/hapog</ext-link>. All data, short and long reads, used in the article are available on public repositories.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>lqab034_Supplemental_Files</label>
      <media xlink:href="lqab034_supplemental_files.zip"/>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ACK1">
    <title>ACKNOWLEDGEMENTS</title>
    <p>The authors thank Pierre Peterlongo for his support and advice with discoSNP and his proofreading of the manuscript.</p>
  </ack>
  <sec id="SEC6">
    <title>SUPPLEMENTARY DATA</title>
    <p><ext-link xlink:href="https://academic.oup.com/nargab/article-lookup/doi/10.1093/nargab/lqab034#supplementary-data" ext-link-type="uri">Supplementary Data</ext-link> are available at NARGAB Online.</p>
  </sec>
  <sec id="SEC7">
    <title>FUNDING</title>
    <p>Agence Nationale de la Recherche [ANR-10-INBS-09–08].</p>
    <p><italic toggle="yes">Conflict of interest statement</italic>. None declared.</p>
  </sec>
  <ref-list id="REF1">
    <title>REFERENCES</title>
    <ref id="B1">
      <label>1.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Belser</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Istace</surname>  <given-names>B.</given-names></string-name>, <string-name><surname>Denis</surname>  <given-names>E.</given-names></string-name>, <string-name><surname>Dubarry</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Baurens</surname>  <given-names>F.-C.</given-names></string-name>, <string-name><surname>Falentin</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Genete</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Berrabah</surname>  <given-names>W.</given-names></string-name>, <string-name><surname>Chèvre</surname>  <given-names>A.-M.</given-names></string-name>, <string-name><surname>Delourme</surname>  <given-names>R.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Chromosome-scale assemblies of plant genomes using nanopore long reads and optical maps</article-title>. <source>Nat. Plant.</source>  <year>2018</year>; <volume>4</volume>:<fpage>879</fpage>–<lpage>887</lpage>.</mixed-citation>
    </ref>
    <ref id="B2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jain</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Koren</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>Miga</surname>  <given-names>K.H.</given-names></string-name>, <string-name><surname>Quick</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Rand</surname>  <given-names>A.C.</given-names></string-name>, <string-name><surname>Sasani</surname>  <given-names>T.A.</given-names></string-name>, <string-name><surname>Tyson</surname>  <given-names>J.R.</given-names></string-name>, <string-name><surname>Beggs</surname>  <given-names>A.D.</given-names></string-name>, <string-name><surname>Dilthey</surname>  <given-names>A.T.</given-names></string-name>, <string-name><surname>Fiddes</surname>  <given-names>I.T.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Nanopore sequencing and assembly of a human genome with ultra-long reads</article-title>. <source>Nat. Biotechnol.</source>  <year>2018</year>; <volume>36</volume>:<fpage>338</fpage>–<lpage>345</lpage>.<pub-id pub-id-type="pmid">29431738</pub-id>
</mixed-citation>
    </ref>
    <ref id="B3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Schmidt</surname>  <given-names>M.H.-W.</given-names></string-name>, <string-name><surname>Vogel</surname>  <given-names>A.</given-names></string-name>, <string-name><surname>Denton</surname>  <given-names>A.K.</given-names></string-name>, <string-name><surname>Istace</surname>  <given-names>B.</given-names></string-name>, <string-name><surname>Wormit</surname>  <given-names>A.</given-names></string-name>, <string-name><surname>van de Geest</surname>  <given-names>H.</given-names></string-name>, <string-name><surname>Bolger</surname>  <given-names>M.E.</given-names></string-name>, <string-name><surname>Alseekh</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>Maß</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Pfaff</surname>  <given-names>C.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>De Novo Assembly of a New &lt;em&gt;Solanum pennellii&lt;/em&gt;Accession Using Nanopore Sequencing</article-title>. <source>Plant Cell</source>. <year>2017</year>; <volume>29</volume>:<fpage>2336</fpage>.<pub-id pub-id-type="pmid">29025960</pub-id>
</mixed-citation>
    </ref>
    <ref id="B4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Liu</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Seetharam</surname>  <given-names>A.S.</given-names></string-name>, <string-name><surname>Chougule</surname>  <given-names>K.</given-names></string-name>, <string-name><surname>Ou</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>Swentowsky</surname>  <given-names>K.W.</given-names></string-name>, <string-name><surname>Gent</surname>  <given-names>J.I.</given-names></string-name>, <string-name><surname>Llaca</surname>  <given-names>V.</given-names></string-name>, <string-name><surname>Woodhouse</surname>  <given-names>M.R.</given-names></string-name>, <string-name><surname>Manchanda</surname>  <given-names>N.</given-names></string-name>, <string-name><surname>Presting</surname>  <given-names>G.G.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Gapless assembly of maize chromosomes using long-read technologies</article-title>. <source>Genome Biol.</source>  <year>2020</year>; <volume>21</volume>:<fpage>121</fpage>.<pub-id pub-id-type="pmid">32434565</pub-id>
</mixed-citation>
    </ref>
    <ref id="B5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rousseau-Gueutin</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Belser</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Da Silva</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Richard</surname>  <given-names>G.</given-names></string-name>, <string-name><surname>Istace</surname>  <given-names>B.</given-names></string-name>, <string-name><surname>Cruaud</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Falentin</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Boideau</surname>  <given-names>F.</given-names></string-name>, <string-name><surname>Boutte</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Delourme</surname>  <given-names>R.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Long-read assembly of the Brassica napus reference genome Darmor-bzh</article-title>. <source>GigaScience</source>. <year>2020</year>; <volume>9</volume>:<fpage>giaa137</fpage>.<pub-id pub-id-type="pmid">33319912</pub-id>
</mixed-citation>
    </ref>
    <ref id="B6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Alonge</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Wang</surname>  <given-names>X.</given-names></string-name>, <string-name><surname>Benoit</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Soyk</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>Pereira</surname>  <given-names>L.</given-names></string-name>, <string-name><surname>Zhang</surname>  <given-names>L.</given-names></string-name>, <string-name><surname>Suresh</surname>  <given-names>H.</given-names></string-name>, <string-name><surname>Ramakrishnan</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>Maumus</surname>  <given-names>F.</given-names></string-name>, <string-name><surname>Ciren</surname>  <given-names>D.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Major Impacts of Widespread Structural Variation on Gene Expression and Crop Improvement in Tomato</article-title>. <source>Cell</source>. <year>2020</year>; <volume>182</volume>:<fpage>145</fpage>–<lpage>161</lpage>.<pub-id pub-id-type="pmid">32553272</pub-id>
</mixed-citation>
    </ref>
    <ref id="B7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Jiao</surname>  <given-names>W.-B.</given-names></string-name>, <string-name><surname>Schneeberger</surname>  <given-names>K.</given-names></string-name></person-group>  <article-title>Chromosome-level assemblies of multiple Arabidopsis genomes reveal hotspots of rearrangements with altered evolutionary dynamics</article-title>. <source>Nat. Commun.</source>  <year>2020</year>; <volume>11</volume>:<fpage>989</fpage>.<pub-id pub-id-type="pmid">32080174</pub-id>
</mixed-citation>
    </ref>
    <ref id="B8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Song</surname>  <given-names>J.-M.</given-names></string-name>, <string-name><surname>Guan</surname>  <given-names>Z.</given-names></string-name>, <string-name><surname>Hu</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Guo</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Yang</surname>  <given-names>Z.</given-names></string-name>, <string-name><surname>Wang</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>Liu</surname>  <given-names>D.</given-names></string-name>, <string-name><surname>Wang</surname>  <given-names>B.</given-names></string-name>, <string-name><surname>Lu</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>Zhou</surname>  <given-names>R.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Eight high-quality genomes reveal pan-genome architecture and ecotype differentiation of Brassica napus</article-title>. <source>Nat. Plants</source>. <year>2020</year>; <volume>6</volume>:<fpage>34</fpage>–<lpage>45</lpage>.<pub-id pub-id-type="pmid">31932676</pub-id>
</mixed-citation>
    </ref>
    <ref id="B9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Walker</surname>  <given-names>B.J.</given-names></string-name>, <string-name><surname>Abeel</surname>  <given-names>T.</given-names></string-name>, <string-name><surname>Shea</surname>  <given-names>T.</given-names></string-name>, <string-name><surname>Priest</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Abouelliel</surname>  <given-names>A.</given-names></string-name>, <string-name><surname>Sakthikumar</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>Cuomo</surname>  <given-names>C.A.</given-names></string-name>, <string-name><surname>Zeng</surname>  <given-names>Q.</given-names></string-name>, <string-name><surname>Wortman</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Young</surname>  <given-names>S.K.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Pilon: An integrated tool for comprehensive microbial variant detection and genome assembly improvement</article-title>. <source>PLoS One</source>. <year>2014</year>; <volume>9</volume>:<fpage>e112963</fpage>.<pub-id pub-id-type="pmid">25409509</pub-id>
</mixed-citation>
    </ref>
    <ref id="B10">
      <label>10.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Watson</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Warr</surname>  <given-names>A.</given-names></string-name></person-group>  <article-title>Errors in long-read assemblies can critically affect protein prediction</article-title>. <source>Nat. Biotechnol.</source>  <year>2019</year>; <volume>37</volume>:<fpage>124</fpage>–<lpage>126</lpage>.<pub-id pub-id-type="pmid">30670796</pub-id>
</mixed-citation>
    </ref>
    <ref id="B11">
      <label>11.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Vaser</surname>  <given-names>R.</given-names></string-name>, <string-name><surname>Sović</surname>  <given-names>I.</given-names></string-name>, <string-name><surname>Nagarajan</surname>  <given-names>N.</given-names></string-name>, <string-name><surname>Šikić</surname>  <given-names>M.</given-names></string-name></person-group>  <article-title>Fast and accurate de novo genome assembly from long uncorrected reads</article-title>. <source>Genome Res.</source>  <year>2017</year>; <volume>27</volume>:<fpage>737</fpage>–<lpage>746</lpage>.<pub-id pub-id-type="pmid">28100585</pub-id>
</mixed-citation>
    </ref>
    <ref id="B12">
      <label>12.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Firtina</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Kim</surname>  <given-names>J.S.</given-names></string-name>, <string-name><surname>Alser</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Senol Cali</surname>  <given-names>D.</given-names></string-name>, <string-name><surname>Cicek</surname>  <given-names>A.E.</given-names></string-name>, <string-name><surname>Alkan</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Mutlu</surname>  <given-names>O.</given-names></string-name></person-group>  <article-title>Apollo: a sequencing-technology-independent, scalable and accurate assembly polishing algorithm</article-title>. <source>Bioinformatics</source>. <year>2020</year>; <volume>36</volume>:<fpage>3669</fpage>–<lpage>3679</lpage>.<pub-id pub-id-type="pmid">32167530</pub-id>
</mixed-citation>
    </ref>
    <ref id="B13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Warren</surname>  <given-names>R.L.</given-names></string-name>, <string-name><surname>Coombe</surname>  <given-names>L.</given-names></string-name>, <string-name><surname>Mohamadi</surname>  <given-names>H.</given-names></string-name>, <string-name><surname>Zhang</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Jaquish</surname>  <given-names>B.</given-names></string-name>, <string-name><surname>Isabel</surname>  <given-names>N.</given-names></string-name>, <string-name><surname>Jones</surname>  <given-names>S.J.M.</given-names></string-name>, <string-name><surname>Bousquet</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Bohlmann</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Birol</surname>  <given-names>I.</given-names></string-name></person-group>  <article-title>ntEdit: scalable genome sequence polishing</article-title>. <source>Bioinformatics</source>. <year>2019</year>; <volume>35</volume>:<fpage>4430</fpage>–<lpage>4432</lpage>.<pub-id pub-id-type="pmid">31095290</pub-id>
</mixed-citation>
    </ref>
    <ref id="B14">
      <label>14.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hu</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Fan</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Sun</surname>  <given-names>Z.</given-names></string-name>, <string-name><surname>Liu</surname>  <given-names>S.</given-names></string-name></person-group>  <article-title>NextPolish: a fast and efficient genome polishing tool for long-read assembly</article-title>. <source>Bioinformatics</source>. <year>2020</year>; <volume>36</volume>:<fpage>2253</fpage>–<lpage>2255</lpage>.<pub-id pub-id-type="pmid">31778144</pub-id>
</mixed-citation>
    </ref>
    <ref id="B15">
      <label>15.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Kundu</surname>  <given-names>R.</given-names></string-name>, <string-name><surname>Casey</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Sung</surname>  <given-names>W.-K.</given-names></string-name></person-group>  <article-title>HyPo: super fast &amp; accurate polisher for long read genome assemblies</article-title>. <year>2019</year>; <comment>bioRxiv doi:</comment><comment>20 December 2019, preprint: not peer reviewed</comment><pub-id pub-id-type="doi">10.1101/2019.12.19.882506</pub-id>.</mixed-citation>
    </ref>
    <ref id="B16">
      <label>16.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zimin</surname>  <given-names>A.V.</given-names></string-name>, <string-name><surname>Salzberg</surname>  <given-names>S.L.</given-names></string-name></person-group>  <article-title>The genome polishing tool POLCA makes fast and accurate corrections in genome assemblies</article-title>. <source>PLOS Comput. Biol.</source>  <year>2020</year>; <volume>16</volume>:<fpage>e1007981</fpage>.<pub-id pub-id-type="pmid">32589667</pub-id>
</mixed-citation>
    </ref>
    <ref id="B17">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname>  <given-names>H.</given-names></string-name>, <string-name><surname>Handsaker</surname>  <given-names>B.</given-names></string-name>, <string-name><surname>Wysoker</surname>  <given-names>A.</given-names></string-name>, <string-name><surname>Fennell</surname>  <given-names>T.</given-names></string-name>, <string-name><surname>Ruan</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Homer</surname>  <given-names>N.</given-names></string-name>, <string-name><surname>Marth</surname>  <given-names>G.</given-names></string-name>, <string-name><surname>Abecasis</surname>  <given-names>G.</given-names></string-name>, <string-name><surname>Durbin</surname>  <given-names>R.</given-names></string-name><collab>1000 Genome Project Data Processing Subgroup</collab></person-group>  <article-title>The sequence alignment/map format and SAMtools</article-title>. <source>Bioinformatics</source>. <year>2009</year>; <volume>25</volume>:<fpage>2078</fpage>–<lpage>2079</lpage>.<pub-id pub-id-type="pmid">19505943</pub-id>
</mixed-citation>
    </ref>
    <ref id="B18">
      <label>18.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname>  <given-names>H.</given-names></string-name>, <string-name><surname>Durbin</surname>  <given-names>R.</given-names></string-name></person-group>  <article-title>Fast and accurate short read alignment with Burrows–Wheeler transform</article-title>. <source>Bioinformatics</source>. <year>2009</year>; <volume>25</volume>:<fpage>1754</fpage>–<lpage>1760</lpage>.<pub-id pub-id-type="pmid">19451168</pub-id>
</mixed-citation>
    </ref>
    <ref id="B19">
      <label>19.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname>  <given-names>H.</given-names></string-name></person-group>  <article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>. <source>Bioinformatics</source>. <year>2018</year>; <volume>34</volume>:<fpage>3094</fpage>–<lpage>3100</lpage>.<pub-id pub-id-type="pmid">29750242</pub-id>
</mixed-citation>
    </ref>
    <ref id="B20">
      <label>20.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kolmogorov</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Yuan</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Lin</surname>  <given-names>Y.</given-names></string-name>, <string-name><surname>Pevzner</surname>  <given-names>P.A.</given-names></string-name></person-group>  <article-title>Assembly of long, error-prone reads using repeat graphs</article-title>. <source>Nat. Biotechnol.</source>  <year>2019</year>; <volume>37</volume>:<fpage>540</fpage>–<lpage>546</lpage>.<pub-id pub-id-type="pmid">30936562</pub-id>
</mixed-citation>
    </ref>
    <ref id="B21">
      <label>21.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Huang</surname>  <given-names>W.</given-names></string-name>, <string-name><surname>Li</surname>  <given-names>L.</given-names></string-name>, <string-name><surname>Myers</surname>  <given-names>J.R.</given-names></string-name>, <string-name><surname>Marth</surname>  <given-names>G.T.</given-names></string-name></person-group>  <article-title>ART: a next-generation sequencing read simulator</article-title>. <source>Bioinformatics</source>. <year>2012</year>; <volume>28</volume>:<fpage>593</fpage>–<lpage>594</lpage>.<pub-id pub-id-type="pmid">22199392</pub-id>
</mixed-citation>
    </ref>
    <ref id="B22">
      <label>22.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zhou</surname>  <given-names>Q.</given-names></string-name>, <string-name><surname>Tang</surname>  <given-names>D.</given-names></string-name>, <string-name><surname>Huang</surname>  <given-names>W.</given-names></string-name>, <string-name><surname>Yang</surname>  <given-names>Z.</given-names></string-name>, <string-name><surname>Zhang</surname>  <given-names>Y.</given-names></string-name>, <string-name><surname>Hamilton</surname>  <given-names>J.P.</given-names></string-name>, <string-name><surname>Visser</surname>  <given-names>R.G.F.</given-names></string-name>, <string-name><surname>Bachem</surname>  <given-names>C.W.B.</given-names></string-name>, <string-name><surname>Robin Buell</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Zhang</surname>  <given-names>Z.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Haplotype-resolved genome analyses of a heterozygous diploid potato</article-title>. <source>Nat. Genet.</source>  <year>2020</year>; <volume>52</volume>:<fpage>1018</fpage>–<lpage>1023</lpage>.<pub-id pub-id-type="pmid">32989320</pub-id>
</mixed-citation>
    </ref>
    <ref id="B23">
      <label>23.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Sevim</surname>  <given-names>V.</given-names></string-name>, <string-name><surname>Lee</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Egan</surname>  <given-names>R.</given-names></string-name>, <string-name><surname>Clum</surname>  <given-names>A.</given-names></string-name>, <string-name><surname>Hundley</surname>  <given-names>H.</given-names></string-name>, <string-name><surname>Lee</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Everroad</surname>  <given-names>R.C.</given-names></string-name>, <string-name><surname>Detweiler</surname>  <given-names>A.M.</given-names></string-name>, <string-name><surname>Bebout</surname>  <given-names>B.M.</given-names></string-name>, <string-name><surname>Pett-Ridge</surname>  <given-names>J.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>Shotgun metagenome data of a defined mock community using Oxford Nanopore, PacBio and Illumina technologies</article-title>. <source>Sci. Data</source>. <year>2019</year>; <volume>6</volume>:<fpage>285</fpage>.<pub-id pub-id-type="pmid">31772173</pub-id>
</mixed-citation>
    </ref>
    <ref id="B24">
      <label>24.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kolmogorov</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Bickhart</surname>  <given-names>D.M.</given-names></string-name>, <string-name><surname>Behsaz</surname>  <given-names>B.</given-names></string-name>, <string-name><surname>Gurevich</surname>  <given-names>A.</given-names></string-name>, <string-name><surname>Rayko</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Shin</surname>  <given-names>S.B.</given-names></string-name>, <string-name><surname>Kuhn</surname>  <given-names>K.</given-names></string-name>, <string-name><surname>Yuan</surname>  <given-names>J.</given-names></string-name>, <string-name><surname>Polevikov</surname>  <given-names>E.</given-names></string-name>, <string-name><surname>Smith</surname>  <given-names>T.P.L.</given-names></string-name>  <etal>et al</etal>.</person-group>  <article-title>metaFlye: scalable long-read metagenome assembly using repeat graphs</article-title>. <source>Nat. Methods</source>. <year>2020</year>; <volume>17</volume>:<fpage>1103</fpage>–<lpage>1110</lpage>.<pub-id pub-id-type="pmid">33020656</pub-id>
</mixed-citation>
    </ref>
    <ref id="B25">
      <label>25.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gurevich</surname>  <given-names>A.</given-names></string-name>, <string-name><surname>Saveliev</surname>  <given-names>V.</given-names></string-name>, <string-name><surname>Vyahhi</surname>  <given-names>N.</given-names></string-name>, <string-name><surname>Tesler</surname>  <given-names>G.</given-names></string-name></person-group>  <article-title>QUAST: quality assessment tool for genome assemblies</article-title>. <source>Bioinformatics</source>. <year>2013</year>; <volume>29</volume>:<fpage>1072</fpage>–<lpage>1075</lpage>.<pub-id pub-id-type="pmid">23422339</pub-id>
</mixed-citation>
    </ref>
    <ref id="B26">
      <label>26.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Waterhouse</surname>  <given-names>R.M.</given-names></string-name>, <string-name><surname>Seppey</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Simão</surname>  <given-names>F.A.</given-names></string-name>, <string-name><surname>Manni</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Ioannidis</surname>  <given-names>P.</given-names></string-name>, <string-name><surname>Klioutchnikov</surname>  <given-names>G.</given-names></string-name>, <string-name><surname>Kriventseva</surname>  <given-names>E.V.</given-names></string-name>, <string-name><surname>Zdobnov</surname>  <given-names>E.M.</given-names></string-name></person-group>  <article-title>BUSCO applications from quality assessments to gene prediction and phylogenomics</article-title>. <source>Mol. Biol. Evol.</source>  <year>2018</year>; <volume>35</volume>:<fpage>543</fpage>–<lpage>548</lpage>.<pub-id pub-id-type="pmid">29220515</pub-id>
</mixed-citation>
    </ref>
    <ref id="B27">
      <label>27.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Quinlan</surname>  <given-names>A.R.</given-names></string-name>, <string-name><surname>Hall</surname>  <given-names>I.M.</given-names></string-name></person-group>  <article-title>BEDTools: a flexible suite of utilities for comparing genomic features</article-title>. <source>Bioinformatics</source>. <year>2010</year>; <volume>26</volume>:<fpage>841</fpage>–<lpage>842</lpage>.<pub-id pub-id-type="pmid">20110278</pub-id>
</mixed-citation>
    </ref>
    <ref id="B28">
      <label>28.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kent</surname>  <given-names>W.J.</given-names></string-name></person-group>  <article-title>BLAT—The BLAST-Like Alignment Tool</article-title>. <source>Genome Res.</source>  <year>2002</year>; <volume>12</volume>:<fpage>656</fpage>–<lpage>664</lpage>.<pub-id pub-id-type="pmid">11932250</pub-id>
</mixed-citation>
    </ref>
    <ref id="B29">
      <label>29.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wang</surname>  <given-names>M.</given-names></string-name>, <string-name><surname>Kong</surname>  <given-names>L.</given-names></string-name></person-group>  <article-title>pblat: a multithread blat algorithm speeding up aligning sequences to genomes</article-title>. <source>BMC Bioinformatics</source>. <year>2019</year>; <volume>20</volume>:<fpage>28</fpage>.<pub-id pub-id-type="pmid">30646844</pub-id>
</mixed-citation>
    </ref>
    <ref id="B30">
      <label>30.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Edgar</surname>  <given-names>R.C.</given-names></string-name></person-group>  <article-title>MUSCLE: multiple sequence alignment with high accuracy and high throughput</article-title>. <source>Nucleic Acids Res.</source>  <year>2004</year>; <volume>32</volume>:<fpage>1792</fpage>–<lpage>1797</lpage>.<pub-id pub-id-type="pmid">15034147</pub-id>
</mixed-citation>
    </ref>
    <ref id="B31">
      <label>31.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Peterlongo</surname>  <given-names>P.</given-names></string-name>, <string-name><surname>Riou</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Drezen</surname>  <given-names>E.</given-names></string-name>, <string-name><surname>Lemaitre</surname>  <given-names>C.</given-names></string-name></person-group>  <article-title>DiscoSnp++: de novo detection of small variants from raw unassembled read set(s)</article-title>. <year>2017</year>; <comment>bioRxiv doi:</comment><comment>27 October 2017, preprint: not peer reviewed</comment><pub-id pub-id-type="doi">10.1101/209965</pub-id>.</mixed-citation>
    </ref>
    <ref id="B32">
      <label>32.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Chen</surname>  <given-names>S.</given-names></string-name>, <string-name><surname>He</surname>  <given-names>C.</given-names></string-name>, <string-name><surname>Li</surname>  <given-names>Y.</given-names></string-name>, <string-name><surname>Li</surname>  <given-names>Z.</given-names></string-name>, <string-name><surname>Melançon</surname>  <given-names>C.E.</given-names>  <suffix>III</suffix></string-name></person-group>  <article-title>A computational toolset for rapid identification of SARS-CoV-2, other viruses and microorganisms from sequencing data</article-title>. <source>Brief. Bioinform.</source>  <year>2021</year>; <volume>22</volume>:<fpage>924</fpage>–<lpage>935</lpage>.<pub-id pub-id-type="pmid">33003197</pub-id>
</mixed-citation>
    </ref>
  </ref-list>
</back>
