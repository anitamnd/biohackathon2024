<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nat Commun</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nat Commun</journal-id>
    <journal-title-group>
      <journal-title>Nature Communications</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2041-1723</issn>
    <publisher>
      <publisher-name>Nature Publishing Group UK</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8041854</article-id>
    <article-id pub-id-type="publisher-id">22381</article-id>
    <article-id pub-id-type="doi">10.1038/s41467-021-22381-z</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Go Get Data (GGD) is a framework that facilitates reproducible access to genomic data</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2667-9264</contrib-id>
        <name>
          <surname>Cormier</surname>
          <given-names>Michael J.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-5470-8299</contrib-id>
        <name>
          <surname>Belyeu</surname>
          <given-names>Jonathan R.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Pedersen</surname>
          <given-names>Brent S.</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Brown</surname>
          <given-names>Joseph</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-9818-9320</contrib-id>
        <name>
          <surname>Köster</surname>
          <given-names>Johannes</given-names>
        </name>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1756-0859</contrib-id>
        <name>
          <surname>Quinlan</surname>
          <given-names>Aaron R.</given-names>
        </name>
        <address>
          <email>aquinlan@genetics.utah.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.223827.e</institution-id><institution-id institution-id-type="ISNI">0000 0001 2193 0096</institution-id><institution>Department of Human Genetics, </institution><institution>University of Utah, </institution></institution-wrap>Salt Lake City, UT USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.223827.e</institution-id><institution-id institution-id-type="ISNI">0000 0001 2193 0096</institution-id><institution>Utah Center for Genetic Discovery, </institution><institution>University of Utah, </institution></institution-wrap>Salt Lake City, UT USA </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="GRID">grid.5718.b</institution-id><institution-id institution-id-type="ISNI">0000 0001 2187 5445</institution-id><institution>Institute of Human Genetics, </institution><institution>University of Duisburg-Essen, </institution></institution-wrap>Essen, NRW Germany </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="GRID">grid.223827.e</institution-id><institution-id institution-id-type="ISNI">0000 0001 2193 0096</institution-id><institution>Department of Biomedical Informatics, </institution><institution>University of Utah, </institution></institution-wrap>Salt Lake City, UT USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>12</day>
      <month>4</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>12</day>
      <month>4</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2021</year>
    </pub-date>
    <volume>12</volume>
    <elocation-id>2151</elocation-id>
    <history>
      <date date-type="received">
        <day>14</day>
        <month>10</month>
        <year>2020</year>
      </date>
      <date date-type="accepted">
        <day>9</day>
        <month>3</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2021</copyright-statement>
      <license>
        <ali:license_ref specific-use="pmc" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this license, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">The rapid increase in the amount of genomic data provides researchers with an opportunity to integrate diverse datasets and annotations when addressing a wide range of biological questions. However, genomic datasets are deposited on different platforms and are stored in numerous formats from multiple genome builds, which complicates the task of collecting, annotating, transforming, and integrating data as needed. Here, we developed Go Get Data (GGD) as a fast, reproducible approach to installing standardized data recipes. GGD is available on Github (<ext-link ext-link-type="uri" xlink:href="https://gogetdata.github.io/">https://gogetdata.github.io/</ext-link>), is extendable to other data types, and can streamline the complexities typically associated with data integration, saving researchers time and improving research reproducibility.</p>
    </abstract>
    <abstract id="Abs2" abstract-type="web-summary">
      <p id="Par2">Modern biological research is complicated by the difficulty of collecting, transforming, annotating, and integrating datasets. Here, the authors present Go Get Data, a fast, reproducible approach to installing standardized data recipes, with an application to genomics data.</p>
    </abstract>
    <kwd-group kwd-group-type="npg-subject">
      <title>Subject terms</title>
      <kwd>Data acquisition</kwd>
      <kwd>Data integration</kwd>
      <kwd>Data publication and archiving</kwd>
      <kwd>Genomics</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2021</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Introduction</title>
    <p id="Par3">There is a need to standardize and simplify access to genomic data to enable reproducibility, remove common barriers to research, and foster studies that integrate diverse datasets. We developed Go Get Data (GGD)<sup><xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR5">5</xref></sup> to address these challenges. Our approach is inspired by software package managers (e.g., pip (<ext-link ext-link-type="uri" xlink:href="https://pip.pypa.io/en/stable/">https://pip.pypa.io/en/stable/</ext-link>), Conda (<ext-link ext-link-type="uri" xlink:href="https://conda.io">https://conda.io</ext-link>), and HomeBrew), which are popular because they use recipes to simplify and automate software installation via standard naming, version tracking, and dependency handling. We realized that the concept of a recipe could also be used to automatically locate, transform, standardize, and install datasets. GGD builds upon the software package framework in Conda, while modifications within GGD allow the Conda infrastructure to support datasets in addition to software. We chose to use Conda because of its wide acceptance and popularity within the life sciences with the support of Bioconda<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>, its version tracking and dependency handling, and its ability to normalize the installation of software packages across operating systems. Furthermore, Conda removes the dependence of administrative software management by installing all the desired packages within an isolated environment on a user’s system.</p>
    <p id="Par4">Multiple tools and databases have been developed in an attempt to mitigate common problems in accessing genomic data. For example, databases and tools like Galaxy<sup><xref ref-type="bibr" rid="CR7">7</xref>,<xref ref-type="bibr" rid="CR8">8</xref></sup>, the NCBI Assembly Database<sup><xref ref-type="bibr" rid="CR9">9</xref></sup>, and Ensembl’s set of software resources and APIs<sup><xref ref-type="bibr" rid="CR10">10</xref>–<xref ref-type="bibr" rid="CR12">12</xref></sup> provide simple access to stable sources of genomic sequence and annotation files. Tools such as the SRA toolkit<sup><xref ref-type="bibr" rid="CR13">13</xref></sup> and Refgenie<sup><xref ref-type="bibr" rid="CR14">14</xref></sup> provide programmatic access to genomic sequencing data. Language-specific tools like AnnotationHub<sup><xref ref-type="bibr" rid="CR15">15</xref></sup> provide access to various genomic data files from resources like UCSC and Ensembl within the R programming language. Additionally, other tools such as Intake (<ext-link ext-link-type="uri" xlink:href="https://intake.readthedocs.io/">https://intake.readthedocs.io/</ext-link>) provide a means to load multiple data types into data objects for analysis. However, each of these tools or databases are limited in the type and scope of accessible data. Some of these limitations include the quantity and variety of accessible data, the lack of local and/or global data management, the breadth and depth of data availability, and the ability to create and add data recipes to the database. Additionally, some tools are not language-agnostic or do not allow data curation beyond the simple sequence or annotation files. These limitations make existing tools and databases insufficient to provide a reliable resource for genomic data access, reproducibility, and management. GGD attempts to address these limitations by providing a more versatile approach for standardized, reproducible access to genomic data with applications in a wide range of data analyses.</p>
  </sec>
  <sec id="Sec2" sec-type="results">
    <title>Results</title>
    <sec id="Sec3">
      <title>GGD data recipe content, creation, and validation</title>
      <p id="Par5">Conda provides a mature framework on which to build; however, managing genomic data comes with a unique set of challenges not seen with software management. GGD’s data recipes require additional knowledge regarding the version and provenance of the datasets, along with details about what makes the recipe unique. For example, genomic data is plagued by many inconsistencies such as genome build, chromosome labeling, sorting, indexing, and more, all of which require consistency and standardization in order to be properly managed. The resulting file format (e.g., BAM<sup><xref ref-type="bibr" rid="CR16">16</xref></sup>, VCF<sup><xref ref-type="bibr" rid="CR17">17</xref></sup>, BED<sup><xref ref-type="bibr" rid="CR18">18</xref></sup>) must be correct, verified, and standardized for interoperability with common software and other datasets and annotations. Data processing is commonly required in order to use a dataset for an analysis. Processing genomic data also typically requires additional bioinformatics software tools, supplementary genomic datasets, and multiple curation steps. Storing the data recipes, associated metadata, genomic data files, and more all require a framework for access and management. In order to facilitate the use of data after installation, data files must be consistently organized and have a unique environment variable that points to the specific data package. These difficulties complicate genomic data management and are accounted for within the GGD framework.</p>
      <p id="Par6">Each GGD data recipe is a modified Conda recipe. Conda’s recipe format entails a powerful and sometimes complex set of possible statements, only a subset of which is relevant for data recipes. Therefore, in order to simplify the process, GGD partially automates the creation of a data recipe. Rather than requiring researchers to create all of the pieces required for the recipe, GGD only requires one to supply a Bash script (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>). The Bash script must contain the necessary steps for obtaining and transforming the raw data into a standardized data recipe. Once a Bash script is provided, GGD command-line tools create (via ‘ggd make-recipe‘) and validate (via ‘ggd check-recipe‘) the recipe for use within the GGD and Conda frameworks.<fig id="Fig1"><label>Fig. 1</label><caption><title>Overview of the creation and use of GGD data recipes.</title><p><bold>a</bold> GGD creates a data recipe from a Bash script, which defines the steps taken to access, process, and curate the desired data files. (1) The “ggd make-recipe” command incorporates the Bash script and additional auto-generated files into a complete data recipe. (2) The “ggd check-recipe” command executes required tests and validates the created data recipe. (3) Once a data recipe has been tested and validated, it can be added to the GGD data recipe repository on GitHub. (4) Each data recipe is further tested via an automatic continuous integration system. If validated, the recipe is transitioned into a data package, which is added to the Anaconda Cloud and the resulting data files are cached on AWS storage. <bold>b</bold> Validated data packages can be found via the GGD command-line interface. For example, to find all data packages associated with “grch38” or “hg38” and the keyword “cpg” one would use “ggd search” with “grch38”, “hg38”, and “cpg” as search terms. GGD will identify and return all data packages within the GGD library that are associated with the search terms provided. <bold>c</bold> The desired data package is installed via the “ggd install” command. If the data files are cached, they are downloaded directly. If the data package must be built from the recipe, GGD follows the instructions within the recipe while accounting for both software and data dependencies. Installation ends with tracking the version of the installed data package and the creation of local environment variables that facilitate the use of installed data packages. GGD commands are in orange, GGD data packages are in blue.</p></caption><graphic xlink:href="41467_2021_22381_Fig1_HTML" id="d32e400"/></fig></p>
      <p id="Par7">A GGD recipe contains the information required to find and install the dataset, and to manage the resulting data recipe on a user’s system. Each GGD recipe contains a metadata file, a system processing script, a data curation script, and a checksum file (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>). The metadata file describes data package information such as software and data dependencies. It also tracks essential attributes such as the species, genome build, data provider, data version, and genomic file type. The system processing script provides recipe, metadata, and local file handling within the Conda environment, initiates data curation, and adds local environment variables for easy data file access. The data curation script provides the necessary steps to access, download, process, and install the data recipe. Finally, the checksum file is used to verify that the data files along with their content are installed as expected. Collectively, these files represent the instruction manual that enables GGD to automatically find, transform, install, and manage genomic data within a local Conda environment on a user’s system.</p>
      <p id="Par8">Once a GGD recipe has been created and tested, the recipe is added to the GGD data recipe repository on GitHub. A continuous integration system is used to automatically test and package recipes (<xref rid="MOESM1" ref-type="media">Supplemental Note</xref>). Once packaged, the continuous integration system caches the resulting data files on cloud storage (currently AWS S3) for rapid user installation, uploads the packaged data recipe as a data package to the Anaconda cloud, and creates the metadata files necessary for use with GGD. This continuous integration system ensures the validity of each recipe and provides an automated approach that simplifies manual review of each data recipe added to GGD.</p>
    </sec>
    <sec id="Sec4">
      <title>GGD data package installation, use, and management</title>
      <p id="Par9">To install a data package, a researcher using GGD searches for a dataset or annotation by name and/or keyword (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>). Once the relevant data package is identified, the researcher uses GGD to install it and integrate it into their research (Fig. <xref rid="Fig1" ref-type="fig">1c</xref>). One widely known disadvantage of Conda is the time required to identify all of the dependencies that a software package needs prior to installation (which has, however, been significantly improved in recent releases). Therefore, GGD has optimized the process of installing pre-computed data recipes by bypassing Conda’s environment solving step. Instead, GGD directly installs pre-validated data recipes that have been cached on cloud storage, allowing fast data recipe installation (typically in 10 s or less).</p>
      <p id="Par10">Rapid, standardized installation of datasets and annotations removes many common frustrations that researchers face for common analyses. In turn, this increased simplicity allows one to quickly leverage multiple data packages and combine them with analysis software to address research questions. For example, Fig. <xref rid="Fig2" ref-type="fig">2</xref> provides a simple use-case in which a researcher can quickly download and integrate necessary GGD data packages into their analyses. In this case, the user installs a GTF file containing coding exons defined by Ensembl<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>, as well as a FASTA<sup><xref ref-type="bibr" rid="CR20">20</xref></sup> file for build 38 of the human reference genome. Bedtools<sup><xref ref-type="bibr" rid="CR21">21</xref>,<xref ref-type="bibr" rid="CR22">22</xref></sup> is then used to identifying the DNA sequences from non-coding loci, which can then be used for downstream analyses. Furthermore, GGD can easily be integrated into reproducible processing and analysis workflow systems such as Nextflow<sup><xref ref-type="bibr" rid="CR23">23</xref></sup> and Snakemake<sup><xref ref-type="bibr" rid="CR24">24</xref></sup>.<fig id="Fig2"><label>Fig. 2</label><caption><title>Using GGD data packages.</title><p><bold>a</bold> Data recipe environment variables allow one to use the installed data files without needing to know where the files are stored or how to get them. For example, if one installed the grch38-coding-exons-ensembl-v1 and grch38-reference-genome-ensembl-v1 data packages, one could identify the complement between coding exons and a reference genome using each data file’s unique environment variable with the “bedtools complement” command. These environment variables allow one to perform any number of analyses with different bioinformatic tools or scripts. <bold>b</bold> Using the “get-files” command, one can perform the same analysis on coding exons as seen in panel a. With data package environment variables, one needs to be in the environment where the packages were installed in order to use them. Alternatively, the “get-files” command provides access to data files installed by GGD and stored in either the currently active conda environment or a different non-active conda environment. Accessing data files in different environments is supported by the “--prefix” argument. This allows a user to install and store all data packages in a single conda environment while being able to access them from any other environment where GGD is installed. GGD commands are in orange, environment variables that refer to GGD data package files are in blue.</p></caption><graphic xlink:href="41467_2021_22381_Fig2_HTML" id="d32e466"/></fig></p>
      <p id="Par11">Information about where the data originated, the version of the data being used, how it was processed, and distinguishing metadata (e.g., genome build for genomic recipes) are key components for every data recipe. This information acts as a unique identifier for the data recipe, and ensures data provenance and reproducibility. GGD maintains this information for each data recipe and provides multiple ways to obtain it through the documentation page for the recipe, the recipe stored in the ggd-recipes repo, or the (‘ggd pkg-info‘) command (Table <xref rid="Tab1" ref-type="table">1</xref>).<table-wrap id="Tab1"><label>Table 1</label><caption><p>A catalog of GGD tools available via the command-line interface.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>GGD CLI tool</th><th>Description of functionality</th></tr></thead><tbody><tr><td>ggd search</td><td>Search for available data packages based on a search term(s) with genomic specific filters.</td></tr><tr><td>ggd predict-path</td><td>Predict the installed file path for a file in a data package that has not been installed. (Useful for workflows like Snakemake).</td></tr><tr><td>ggd install</td><td>Install one or more data package(s) to a specific Conda environment on a user’s system.</td></tr><tr><td>ggd uninstall</td><td>Uninstall a data package from a Conda environment from a user’s system.</td></tr><tr><td>ggd list</td><td>Report the installed data packages within a specific Conda environment (similar to conda list).</td></tr><tr><td>ggd get-files</td><td>List the file(s) associated with an installed package on a user’s system.</td></tr><tr><td>ggd pkg-info</td><td>Retrieve the data package information of an installed data package on a user’s system.</td></tr><tr><td>ggd show-env</td><td>Display the GGD specific environment variables for the installed packages in a specific Conda environment on a user’s system.</td></tr><tr><td>ggd make-recipe</td><td>Make a GGD data recipe that can be added to the GGD  recipe ecosystem. The tool will transform a simple Bash script into a ggd data recipe.</td></tr><tr><td>ggd make-meta-recipe</td><td>Make a GGD data meta-recipe that can be added to the GGD recipe ecosystem. The tool will transform a single or group of scripts into a GGD data meta-recipe, which can be used to install ID specific data packages.</td></tr><tr><td>ggd check-recipe</td><td>Transform a GGD recipe that has been created from running ‘make-recipe’ into a GGD data package and test the validity of the data package.</td></tr></tbody></table></table-wrap></p>
      <p id="Par12">Large-scale data integration is essential in all areas of genome research, since new annotations, datasets, and file formats are constantly being released. Through a suite of command-line tools (Table <xref rid="Tab1" ref-type="table">1</xref>), GGD provides a standardized system for quickly finding, installing, managing, and creating data recipes.</p>
    </sec>
  </sec>
  <sec id="Sec5" sec-type="discussion">
    <title>Discussion</title>
    <p id="Par13">GGD is a natural solution for enabling programmatic access to data in both ad hoc analyses and in more involved, frequently-used workflows. Developed to overcome common problems in genomic data access and processing, GGD provides reproducible and simple access to datasets. Using Conda’s version tracking and dependency handling, along with Conda’s environment infrastructure, GGD can provide a full range of data management on a user’s system. Whether within a container or on a local system, GGD can be used to install data packages before, during, or after the workflow process starts. Environment variables specific to the installed GGD data packages or use of the GGD command-line interface can be used to access the data files for the desired process, including within a workflow. Whether used within a workflow or on their own, GGD data packages provide a simple, reproducible solution to genomic data access, curation, and use.</p>
    <p id="Par14">GGD is actively maintained in order to provide improved functionality and increased access to genomic data. Additionally, the maintenance of Conda by their core development team will provide additional support for GGD. We plan to expand the library of available data recipes within and across species in the short term. This expansion will include recipes for expression data, proteomic data, and many other data types commonly used in genomics. Data recipe development will also be influenced by user feedback and requests.</p>
    <p id="Par15">While currently focused on genomic datasets, the GGD framework has the capacity to support data management across many scientific disciplines. Future development of GGD will include the expansion of GGD data recipes into other non-genomic scientific disciplines. We expect that GGD will help to establish a standard, community-driven ecosystem for reproducible access to genomic and other scientific data. We encourage contributions from researchers to provide a comprehensive collection of reproducible data recipes to the scientific community. Further information about GGD can be found in the GGD documentation available at <ext-link ext-link-type="uri" xlink:href="https://gogetdata.github.io/">https://gogetdata.github.io/</ext-link>.</p>
  </sec>
  <sec id="Sec6">
    <title>Methods</title>
    <sec id="Sec7">
      <title>GGD data recipes</title>
      <p id="Par16">Data recipes contain the relevant information needed to install and manage data on a user’s system. Data recipes are built on the framework of Conda recipes. Conda recipes usually contain a metadata file with information about the software being installed and a script with commands to install that software. The metadata file describes the software, the authors, the programing language, the version, the software dependencies required for building and installing the software, etc. The installation script directs where and how to install the software. Conda uses both of these files to prepare and install the software on a user’s system. Conda also has strict regulations on how these files are formatted and what content is provided within these files.</p>
      <p id="Par17">We adapted the Conda recipes framework for use with datasets instead of software. To do this, we worked with Conda and Bioconda to change the formatting requirements so that Conda recipes would work with the additional information requirements needed for data management. This update allowed us to incorporate information such as the data provider, data version, data type, genomic coordinate system, applicable species and genome build. Additionally, it allowed us to incorporate both data and software dependencies within the information file, allowing Conda to provide data and software dependency handling for GGD data recipes. This was particularly important because data recipes commonly go through many data curation steps that require different software packages available through Conda, as well as other data packages available through GGD to be used during that process. Thus, GGD could rely on the mature framework of Conda to provide the correct data and software for data curation without having to set up a dependency handling framework. When creating a GGD data recipe, the user will give data-specific information using the available input parameters in the ‘ggd make-recipe’ command, which will fill out the data-specific information within this information file.</p>
      <p id="Par18">In addition to the updated data-specific information file, GGD data recipes contain three other essential files. Similar to Conda’s software installation script, GGD uses a data curation and installation script. This Bash script is created by the user and contains the required instructions describing where to access and install the data, as well as data curation and data clean-up steps. GGD creates an additional file that is used for data installation and management within a specific Conda environment. Specifically, this script controls the installation path within the user-defined Conda environment, controls required system-level GGD environment variables, initiates data curation from the Conda installed GGD data package, creates specific environment variables for the final data files, and performs other required tasks for data management. The final file contains md5sum hash values used to validate installed data files’ content to ensure proper installation.</p>
      <p id="Par19">These four files represent the modified Conda recipes used for data installation and management by GGD. To reduce the amount of work for researchers creating data recipes, GGD requires a user to provide only a Bash script with the necessary data access and curation steps. Using the Bash script and input parameters to ‘ggd make-recipe’, GGD will create the three additional files that comprise a complete GGD data recipe.</p>
    </sec>
    <sec id="Sec8">
      <title>Using the Conda framework</title>
      <p id="Par20">Conda (<ext-link ext-link-type="uri" xlink:href="https://conda.io">https://conda.io</ext-link>) is a popular software management system that provides version tracking, dependency handling, and environment control on a user’s system for many software packages with a wide range of software languages. Conda also removes administrative control over available software, allowing users to access and control needed software on their system. The user-level control of software is defined within a Conda environment, which is maintained and controlled by Conda. These Conda environments provide security and stability for software access and reduce the possibly nefarious results of installing software on a system outside of a controlled environment. Additionally, Conda has been widely adopted within the life sciences community through Bioconda. Because of the popularity of Conda within the life sciences community and Conda’s mature management framework, we adapted Conda to provide management for data recipes.</p>
      <p id="Par21">In addition to using modified Conda recipes for GGD data recipes, we use the Conda environment infrastructure to install and maintain data recipes within specific Conda environments, facilitated through Conda’s software framework. GGD utilizes most of Conda’s internal ‘core’ functionalities to access and manage data packages. We convert GGD data recipes to data packages using Conda’s internal ‘build’ functionality. This process ensures that the recipe is appropriately formatted for use by Conda, and creates a Conda-usable data package. GGD data packages created in this manner are uploaded and stored in the Anaconda cloud using Conda’s ‘anaconda’ functionality. These packages are then installed into a specific Conda environment through Conda’s internal ‘install’ functionality. The Conda environment is based on Conda’s internal ‘context’, ‘envs_manager’, and ‘prefix’ functionalities. Managing installed data packages within a conda environment is supported by Conda’s internal ‘context’, ‘list’, and ‘prefix’ functionalities. Metadata for data recipes are supported by Conda as ‘repodata’ and Conda core ‘index’ functionality and are available on the Anaconda cloud under specific GGD Conda channels. Utilizing the Conda framework within GGD allows us to harness the tested and mature infrastructure of Conda without needing to develop a separate one. It also allows for continued maintenance by the Conda core development team, reducing the amount of work required to maintain and improve GGD from the GoGetData development team.</p>
    </sec>
    <sec id="Sec9">
      <title>GGD data management</title>
      <p id="Par22">The GGD command-line interface (CLI) allows for the access and management of GGD data packages. Table <xref rid="Tab1" ref-type="table">1</xref> gives a brief overview of the available commands. The GGD CLI uses the Conda software framework, mentioned above, for data management. However, Conda’s core functionality does not entirely support data management. Therefore, the GGD software framework integrates elements of the existing Conda framework with additional functionality novel to GGD to provide efficient data management within a Conda environment.</p>
      <p id="Par23">For more information about GGD, see the GGD documentation page at <ext-link ext-link-type="uri" xlink:href="https://gogetdata.github.io/">https://gogetdata.github.io/</ext-link></p>
    </sec>
    <sec id="Sec10">
      <title>Reporting summary</title>
      <p id="Par24">Further information on research design is available in the <xref rid="MOESM3" ref-type="media">Nature Research Reporting Summary</xref> linked to this article.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec11">
      <supplementary-material content-type="local-data" id="MOESM1">
        <media xlink:href="41467_2021_22381_MOESM1_ESM.pdf">
          <caption>
            <p>Supplementary Information</p>
          </caption>
        </media>
      </supplementary-material>
      <supplementary-material content-type="local-data" id="MOESM2">
        <media xlink:href="41467_2021_22381_MOESM2_ESM.pdf">
          <caption>
            <p>Peer Review File</p>
          </caption>
        </media>
      </supplementary-material>
      <supplementary-material content-type="local-data" id="MOESM3">
        <media xlink:href="41467_2021_22381_MOESM3_ESM.pdf">
          <caption>
            <p>Reporting Summary</p>
          </caption>
        </media>
      </supplementary-material>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p><bold>Peer review information</bold><italic>Nature Communications</italic> thanks the anonymous reviewers for their contribution to the peer review of this work. Peer reviewer reports are available.</p>
    </fn>
    <fn>
      <p><bold>Publisher’s note</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p>The online version contains supplementary material available at 10.1038/s41467-021-22381-z.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>Research reported in this publication was supported by funding to M.J.C. from the National Center for Advancing Translational Sciences of the National Institutes of Health under Award Number UL1TR002538 and TL1TR002540. Research was also supported by the National Institutes of Health (NIH) grants: HG006693 and GM124355 to A.R.Q, as well as Essential Open Source Software funding from the Chan Zuckerberg Institute. The content is solely the responsibility of the authors and does not necessarily represent the official views of the National Institutes of Health.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>A.R.Q. conceived the idea for GGD. M.J.C. developed and maintains GGD, the GGD ecosystem, the GGD infrastructure, the GGD recipes, GGD unit and functional tests, Cloud Services used by GGD, and other GGD assets. M.J.C. developed and maintains the docs for GGD, examples, and other material. M.J.C. also wrote the manuscript. J.R.B., B.S.P., and J.B. helped in the development and testing of GGD and GGD recipes, as well as helped in reviewing the docs. J.K. provided insight into management systems and helpful feedback on GGD. A.R.Q. supervised the work on GGD, helped with recipe development, and reviewed GGD assets and docs. J.R.B., B.S.P., J.B., J.K., and A.R.Q. helped in reviews and suggestions for the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Data availability</title>
    <p>GGD is a data management system developed to help provide sustainable, accurate, reproducible data. No data was used in this manuscript, but data hosted by GGD is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/gogetdata/ggd-recipes">https://github.com/gogetdata/ggd-recipes</ext-link><sup><xref ref-type="bibr" rid="CR2">2</xref></sup>, and through the GGD command-line interface <ext-link ext-link-type="uri" xlink:href="https://github.com/gogetdata/ggd-cli">https://github.com/gogetdata/ggd-cli</ext-link><sup><xref ref-type="bibr" rid="CR1">1</xref></sup>. Additional information can be found on the documentation page at <ext-link ext-link-type="uri" xlink:href="https://gogetdata.github.io/">https://gogetdata.github.io/</ext-link>.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Code availability</title>
    <p>All code for GGD is publicly available on the GoGetData GitHub repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/gogetdata">https://github.com/gogetdata</ext-link><sup><xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR5">5</xref></sup>.</p>
  </notes>
  <notes id="FPar1" notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par25">The authors declare no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Cormier, M. J. et al. Go Get Data (GGD) is a framework that facilitates reproducible access to genomic data, gogetdata/ggd-cli 10.5281/zenodo.4557940 (2021).</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Cormier, M. J. et al. Go Get Data (GGD) is a framework that facilitates reproducible access to genomic data, gogetdata/ggd-recipes 10.5281/zenodo.4557936 (2021).</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <mixed-citation publication-type="other">Cormier, M. J. et al. Go Get Data (GGD) is a framework that facilitates reproducible access to genomic data, gogetdata/gogetdata.github.io 10.5281/zenodo.4557934 (2021).</mixed-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Cormier, M. J. et al. Go Get Data (GGD) is a framework that facilitates reproducible access to genomic data, gogetdata/ggd-metadata 10.5281/zenodo.4557932 (2021).</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">Cormier, M. J. et al. Go Get Data (GGD) is a framework that facilitates reproducible access to genomic data, gogetdata/ggd-utils 10.5281/zenodo.4557930 (2021).</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Grüning</surname>
            <given-names>B</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Bioconda: sustainable and comprehensive software distribution for the life sciences</article-title>
        <source>Nat. Methods</source>
        <year>2018</year>
        <volume>15</volume>
        <fpage>475</fpage>
        <lpage>476</lpage>
        <pub-id pub-id-type="doi">10.1038/s41592-018-0046-7</pub-id>
        <pub-id pub-id-type="pmid">29967506</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Blankenberg</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>JE</given-names>
          </name>
          <collab>Galaxy Team</collab>
          <name>
            <surname>Taylor</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Nekrutenko</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Wrangling Galaxy’s reference data</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <fpage>1917</fpage>
        <lpage>1919</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu119</pub-id>
        <pub-id pub-id-type="pmid">24585771</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Blankenberg</surname>
            <given-names>D</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Dissemination of scientific software with Galaxy ToolShed</article-title>
        <source>Genome Biol.</source>
        <year>2014</year>
        <volume>15</volume>
        <fpage>403</fpage>
        <pub-id pub-id-type="doi">10.1186/gb4161</pub-id>
        <pub-id pub-id-type="pmid">25001293</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kitts</surname>
            <given-names>PA</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assembly: a resource for assembled genomes at NCBI</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2016</year>
        <volume>44</volume>
        <fpage>D73</fpage>
        <lpage>D80</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkv1226</pub-id>
        <pub-id pub-id-type="pmid">26578580</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Wilder</surname>
            <given-names>SP</given-names>
          </name>
          <name>
            <surname>Johnson</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Juettemann</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Flicek</surname>
            <given-names>PR</given-names>
          </name>
        </person-group>
        <article-title>The ensembl regulatory build</article-title>
        <source>Genome Biol.</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>56</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-015-0621-5</pub-id>
        <pub-id pub-id-type="pmid">25887522</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yates</surname>
            <given-names>A</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The Ensembl REST API: ensembl data for any language</article-title>
        <source>Bioinformatics</source>
        <year>2015</year>
        <volume>31</volume>
        <fpage>143</fpage>
        <lpage>145</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu613</pub-id>
        <pub-id pub-id-type="pmid">25236461</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">Ruffier, M. et al. Ensembl core software resources: storage and programmatic access for DNA sequence and genome annotation. <italic>Database</italic><bold>2017</bold>, bax020 (2017).</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kodama</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Shumway</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Leinonen</surname>
            <given-names>R</given-names>
          </name>
          <collab>International Nucleotide Sequence Database Collaboration.</collab>
        </person-group>
        <article-title>The Sequence Read Archive: explosive growth of sequencing data</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2012</year>
        <volume>40</volume>
        <fpage>D54</fpage>
        <lpage>D56</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkr854</pub-id>
        <pub-id pub-id-type="pmid">22009675</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Stolarczyk, M., Reuter, V. P., Smith, J. P., Magee, N. E. &amp; Sheffield, N. C. Refgenie: a reference genome resource manager. <italic>Gigascience</italic><bold>9</bold>, giz149 (2020).</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Morgan, M., Carlson, M., Tenenbaum, D. &amp; Arora, S. AnnotationHub: Client to access AnnotationHub resources. <italic>R package version</italic> 2 (2017).</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The sequence alignment/map format and SAMtools</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <fpage>2078</fpage>
        <lpage>2079</lpage>
        <?supplied-pmid 2723002?>
        <pub-id pub-id-type="pmid">19505943</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Danecek</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The variant call format and VCFtools</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>27</volume>
        <fpage>2156</fpage>
        <lpage>2158</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr330</pub-id>
        <pub-id pub-id-type="pmid">21653522</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kent</surname>
            <given-names>WJ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The human genome browser at UCSC</article-title>
        <source>Genome Res.</source>
        <year>2002</year>
        <volume>12</volume>
        <fpage>996</fpage>
        <lpage>1006</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.229102</pub-id>
        <pub-id pub-id-type="pmid">12045153</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunt</surname>
            <given-names>SE</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Ensembl variation resources</article-title>
        <source>Database</source>
        <year>2018</year>
        <volume>2018</volume>
        <fpage>bay119</fpage>
        <pub-id pub-id-type="doi">10.1093/database/bay119</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pearson</surname>
            <given-names>WR</given-names>
          </name>
          <name>
            <surname>Lipman</surname>
            <given-names>DJ</given-names>
          </name>
        </person-group>
        <article-title>Improved tools for biological sequence comparison</article-title>
        <source>Proc. Natl Acad. Sci. USA</source>
        <year>1988</year>
        <volume>85</volume>
        <fpage>2444</fpage>
        <lpage>2448</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.85.8.2444</pub-id>
        <pub-id pub-id-type="pmid">3162770</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>BEDTools: a flexible suite of utilities for comparing genomic features</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>26</volume>
        <fpage>841</fpage>
        <lpage>842</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq033</pub-id>
        <pub-id pub-id-type="pmid">20110278</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
        </person-group>
        <article-title>BEDTools: the swiss-army tool for genomic feature analysis</article-title>
        <source>Curr. Protoc. Bioinform.</source>
        <year>2014</year>
        <volume>47</volume>
        <fpage>11.12.1</fpage>
        <lpage>11.12.34</lpage>
        <pub-id pub-id-type="doi">10.1002/0471250953.bi1112s47</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Di Tommaso</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Nextflow enables reproducible computational workflows</article-title>
        <source>Nat. Biotechnol.</source>
        <year>2017</year>
        <volume>35</volume>
        <fpage>316</fpage>
        <lpage>319</lpage>
        <pub-id pub-id-type="doi">10.1038/nbt.3820</pub-id>
        <pub-id pub-id-type="pmid">28398311</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Köster</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rahmann</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Snakemake–a scalable bioinformatics workflow engine</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <fpage>2520</fpage>
        <lpage>2522</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts480</pub-id>
        <pub-id pub-id-type="pmid">22908215</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
