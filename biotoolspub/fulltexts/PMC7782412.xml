<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Neuroinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Neuroinformatics</journal-id>
    <journal-title-group>
      <journal-title>Neuroinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1539-2791</issn>
    <issn pub-type="epub">1559-0089</issn>
    <publisher>
      <publisher-name>Springer US</publisher-name>
      <publisher-loc>New York</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7782412</article-id>
    <article-id pub-id-type="pmid">32648042</article-id>
    <article-id pub-id-type="publisher-id">9467</article-id>
    <article-id pub-id-type="doi">10.1007/s12021-020-09467-7</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software Original Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>MEArec: A Fast and Customizable Testbench Simulator for Ground-truth Extracellular Spiking Activity</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-3661-527X</contrib-id>
        <name>
          <surname>Buccino</surname>
          <given-names>Alessio Paolo</given-names>
        </name>
        <address>
          <email>alessiob@ifi.uio.no</email>
          <email>alessio.buccino@bsse.ethz.ch</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-5425-5012</contrib-id>
        <name>
          <surname>Einevoll</surname>
          <given-names>Gaute Tomas</given-names>
        </name>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.5510.1</institution-id><institution-id institution-id-type="ISNI">0000 0004 1936 8921</institution-id><institution>Centre for Integrative Neuroplasticity (CINPLA), </institution><institution>University of Oslo, </institution></institution-wrap>Oslo, Norway </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.5801.c</institution-id><institution-id institution-id-type="ISNI">0000 0001 2156 2780</institution-id><institution>Present Address: Bio Engineering Laboratory, Department of Biosystems Science and Engineering, </institution><institution>ETH Zürich, </institution></institution-wrap>Zürich, Switzerland </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="GRID">grid.19477.3c</institution-id><institution-id institution-id-type="ISNI">0000 0004 0607 975X</institution-id><institution>Faculty of Science and Technology, </institution><institution>Norwegian University of Life Sciences, </institution></institution-wrap>Ås, Norway </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>9</day>
      <month>7</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>9</day>
      <month>7</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="ppub">
      <year>2021</year>
    </pub-date>
    <volume>19</volume>
    <issue>1</issue>
    <fpage>185</fpage>
    <lpage>204</lpage>
    <permissions>
      <copyright-statement>© The Author(s) 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <p id="Par1">When recording neural activity from extracellular electrodes, both <italic>in vivo</italic> and <italic>in vitro</italic>, spike sorting is a required and very important processing step that allows for identification of single neurons’ activity. Spike sorting is a complex algorithmic procedure, and in recent years many groups have attempted to tackle this problem, resulting in numerous methods and software packages. However, validation of spike sorting techniques is complicated. It is an inherently unsupervised problem and it is hard to find universal metrics to evaluate performance. Simultaneous recordings that combine extracellular and patch-clamp or juxtacellular techniques can provide ground-truth data to evaluate spike sorting methods. However, their utility is limited by the fact that only a few cells can be measured at the same time. Simulated ground-truth recordings can provide a powerful alternative mean to rank the performance of spike sorters. We present here MEArec, a Python-based software which permits flexible and fast simulation of extracellular recordings. MEArec allows users to generate extracellular signals on various customizable electrode designs and can replicate various problematic aspects for spike sorting, such as bursting, spatio-temporal overlapping events, and drifts. We expect MEArec will provide a common testbench for spike sorting development and evaluation, in which spike sorting developers can rapidly generate and evaluate the performance of their algorithms.</p>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (10.1007/s12021-020-09467-7) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Spike sorting testbench</kwd>
      <kwd>Benchmark data</kwd>
      <kwd>Extracellular recordings simulator</kwd>
      <kwd>Open-source software</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© Springer Science+Business Media, LLC, part of Springer Nature 2021</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Introduction</title>
    <p id="Par2">Extracellular neural electrophysiology is one of the most used and important techniques to study brain function. It consists of measuring the electrical activity of neurons from electrodes in the extracellular space, that pick up the electrical activity of surrounding neurons. To communicate with each other, neurons generate action potentials, which can be identified in the recorded signals as fast potential transients called <italic>spikes</italic>.</p>
    <p id="Par3">Since electrodes can record the extracellular activity of several surrounding neurons, a processing step called spike sorting is needed. Historically this has required manual curation of the data, which in addition to being time consuming also introduces human bias to data interpretations. In recent years, several automated spike sorters have been developed to alleviate this problems. Spike sorting algorithms (Rey et al. <xref ref-type="bibr" rid="CR40">2015</xref>; Lefebvre et al. <xref ref-type="bibr" rid="CR27">2016</xref>) attempt to separate spike trains of different neurons (units) from the extracellular mixture of signals using a variety of different approaches. After a pre-processing step that usually involves high-pass filtering and re-referencing of the signals to reduce noise, some algorithms first detect putative spikes above a detection threshold and then cluster the extracted and aligned waveforms in a lower-dimensional space (Quiroga et al. <xref ref-type="bibr" rid="CR38">2004</xref>; Rossant et al. <xref ref-type="bibr" rid="CR41">2016</xref>; Chung et al. <xref ref-type="bibr" rid="CR9">2017</xref>; Hilgen et al. <xref ref-type="bibr" rid="CR22">2017</xref>; Jun et al. <xref ref-type="bibr" rid="CR24">2017</xref>). Another approach consists of finding spike templates, using clustering methods, and then matching the templates recursively to the recordings to find when a certain spike has occurred. The general term for these approaches is template-matching (Pachitariu et al. <xref ref-type="bibr" rid="CR37">2016</xref>; Yger et al. <xref ref-type="bibr" rid="CR44">2018</xref>; Diggelmann et al. <xref ref-type="bibr" rid="CR11">2018</xref>). Other approaches have been explored, including the use of independent component analysis (Jäckel et al. <xref ref-type="bibr" rid="CR23">2012</xref>; Buccino et al. <xref ref-type="bibr" rid="CR3">2018</xref>) and semi-supervised approaches (Lee et al. <xref ref-type="bibr" rid="CR26">2017</xref>).</p>
    <p id="Par4">The recent development of high-density silicon probes both for <italic>in vitro</italic> (Berdondini et al. <xref ref-type="bibr" rid="CR2">2009</xref>; Frey et al. <xref ref-type="bibr" rid="CR14">2009</xref>) and <italic>in vivo</italic> applications (Neto et al. <xref ref-type="bibr" rid="CR35">2016</xref>; Jun et al. <xref ref-type="bibr" rid="CR25">2017</xref>) poses new challenges for spike sorting (Steinmetz et al. <xref ref-type="bibr" rid="CR42">2018</xref>). The high electrode count calls for fully automatic spike sorting algorithms, as the process of manually curating hundreds or thousands of channels becomes more time consuming and less manageable. Therefore, spike sorting algorithms need to be be capable of dealing with a large number of units and dense probes. To address these requirements, the latest developments in spike sorting software have attempted to make algorithms scalable and hardware-accelerated (Pachitariu et al. <xref ref-type="bibr" rid="CR37">2016</xref>; Jun et al. <xref ref-type="bibr" rid="CR24">2017</xref>; Yger et al. <xref ref-type="bibr" rid="CR44">2018</xref>; Pachitariu et al. <xref ref-type="bibr" rid="CR36">2019</xref>).</p>
    <p id="Par5">The evaluation of spike sorting performance is also not trivial. Spike sorting is unsupervised by definition, as the recorded signals are only measured extracellularly with no knowledge of the underlying spiking activity. A few attempts to provide ground-truth datasets, for example by combining extracellular and patch-clamp or juxtacellular recordings (Henze et al. <xref ref-type="bibr" rid="CR21">2000</xref>; Harris et al. <xref ref-type="bibr" rid="CR19">2000</xref>; Neto et al. <xref ref-type="bibr" rid="CR35">2016</xref>; Yger et al. <xref ref-type="bibr" rid="CR44">2018</xref>; Marques-Smith et al. <xref ref-type="bibr" rid="CR31">2018</xref>; Allen et al. <xref ref-type="bibr" rid="CR1">2018</xref>) exist, but the main limitation of this approach is that only one or a few cells can be patched at the same time, providing very limited ground-truth information with respect to the number of neurons that can be recorded simultaneously from extracellular probes. An alternative method consists of adding artificial or previously-sorted and well-isolated spikes in the recordings (hybrid method) (Rossant et al. <xref ref-type="bibr" rid="CR41">2016</xref>; Wouters et al. <xref ref-type="bibr" rid="CR43">2019</xref>). The hybrid approach is convenient as all the characteristics of the underlying recording are kept. However, only a few hybrid units can be added at a time, and this limits the validation capability of this method.</p>
    <p id="Par6">Biophysically detailed simulated data provide a powerful alternative and complementary approach to spike sorting validation (Einevoll et al. <xref ref-type="bibr" rid="CR12">2012</xref>). In simulations, recordings can be built from known ground-truth data for all neurons, which allows one to precisely evaluate the performance of spike sorters. Simulators of extracellular activity should be able to replicate important aspects of spiking activity that can be challenging for spike sorting algorithms, including bursting modulation, spatio-temporal overlap of spikes, unit drifts over time, as well as realistic noise models. Moreover, they should allow users to have full control over these features and they should be efficient and fast. While simulated recordings provide ground-truth information of many units at once, it is an open question how realistically they can reproduce real recordings.</p>
    <p id="Par7">In the last years, there have been a few projects aiming to develop neural simulators for benchmarking spike sorting methods (Camuñas-Mesa and Quiroga <xref ref-type="bibr" rid="CR7">2013</xref>; Hagen et al. <xref ref-type="bibr" rid="CR18">2015</xref>; Mondragón-González and Burguière <xref ref-type="bibr" rid="CR33">2017</xref>): Camunas et al. developed NeuroCube (Camuñas-Mesa and Quiroga <xref ref-type="bibr" rid="CR7">2013</xref>), a MATLAB-based simulator which combines biophysically detailed cell models and synthetic spike trains to simulate the activity of neurons close to a recording probe, while noise is simulated by the activity of distant neurons. NeuroCube is very easy to use with a simple and intuitive graphical user interface (GUI). The user has direct control of parameters to control the rate of active neurons, their firing rate properties, and the duration of the recordings. The cell models are shipped with the software and recordings can be simulated on a single electrodes or a tetrode. It is relatively fast, but the cell model simulations (using NEURON (Carnevale and Hines <xref ref-type="bibr" rid="CR8">2006</xref>)) are re-simulated for every recording.</p>
    <p id="Par8">Hagen et al. developed ViSAPy (Hagen et al. <xref ref-type="bibr" rid="CR18">2015</xref>), a Python-based simulator that uses multi-compartment simulation of single neurons to generate spikes, network modeling of point-neurons in NEST (Diesmann and Gewaltig <xref ref-type="bibr" rid="CR10">2001</xref>) to generate synaptic inputs onto the spiking neurons, and experimentally fitted noise. ViSAPy runs a full network simulation in NEURON (Carnevale and Hines <xref ref-type="bibr" rid="CR8">2006</xref>) and computes the extracellular potentials using LFPy (Lindén et al. <xref ref-type="bibr" rid="CR28">2014</xref>; Hagen et al. <xref ref-type="bibr" rid="CR17">2018</xref>). ViSAPy implements a Python application programming interface (API) which allows the user to set multiple parameters for the network simulation providing the synaptic input, the probe design, and the noise model generator. Cell models can be freely chosen and loaded using the LFPy package. Further, 1-dimensional drift can be incorporated in the simulations by shifting the electrodes over time (Franke et al. <xref ref-type="bibr" rid="CR13">2010</xref>). Learning to use the software and, in particular, tailoring the specific properties of the resulting spike trains, for example burstiness, requires some effort by the user. As the running of NEURON simulations with biophysically detailed neurons can be computationally expensive, the use of ViSAPy to generate long-duration spike-sorting benchmarking data is boosted by access to powerful computers.</p>
    <p id="Par9">Mondragon et al. developed a Neural Benchmark Simulator (NBS) (Mondragón-González and Burguière <xref ref-type="bibr" rid="CR33">2017</xref>) extending the NeuroCube software. NBS extends the capability of NeuroCube for using user-specific probes, and it combines the spiking activity signals (from NeuroCube), with low-frequency activity signals, and artifacts libraries shipped with the code. The user can set different weight parameters to assemble the spiking, low-frequency, and artifact signals, but these three signal types are not modifiable.</p>
    <p id="Par10">Despite the existence of such tools for generating benchmarking data, their use in spike sorting literature has until now been limited, making the benchmarking and validation of spike sorting algorithms non-standardized and unsystematic. A natural question to ask is thus how to best stimulate the use of such benchmarking tools in the spike sorting community.</p>
    <p id="Par11">From a spike sorting developer perspective, we argue that an ideal extracellular simulator should be <italic>i)</italic> fast, <italic>ii)</italic> controllable, <italic>iii)</italic> biophysically detailed, and <italic>iv)</italic> easy to use. A fast simulator would enable spike sorter developers to generate a large and varied set of recordings to test their algorithms against and to improve their spike sorting methods. Controllability refers to the possibility to have direct control of features of the simulated recordings. The ideal extracellular spike simulator should include the possibility to use different cell models and types, to decide the firing properties of the neurons, to control the rate of spatio-temporal spike collisions, to generate recordings on different probe models, and to have full reproducibility of the simulated recordings. A biophysically detailed simulator should be capable of reproducing key physiological aspects of the recordings, including, but not limited to, bursting spikes, drifts between the electrodes and the neurons, and realistic noise profiles. Finally, to maximize the ease of use, the ideal extracellular simulator should be designed as an accessible and easy to learn software package. Preferably, the tool should be implemented with a graphical user interface (GUI), a command line interface (CLI), or with a simple application programming interface (API).</p>
    <p id="Par12">With these principles in mind, we present here MEArec, an open-source Python-based simulator. MEArec provides a fast, highly controllable, biophysically detailed, and easy to use framework to generate simulated extracellular recordings. In addition to producing benchmark datasets, we developed MEArec as a powerful tool that can serve as a testbench for optimizing existing and novel spike sorting methods. To facilitate this goal, MEArec allows users to explore how several aspects of recordings affect spike sorting, with full control of challenging features such as bursting activity, drifting, spatio-temporal synchrony, and noise effects, so that spike sorter developers can use it to help their algorithm design.</p>
    <p id="Par13">The source code for MEArec is on Github (<ext-link ext-link-type="uri" xlink:href="https://github.com/alejoe91/MEArec">https://github.com/alejoe91/MEArec</ext-link>) and the Python package is on PyPi (<ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/MEArec/">https://pypi.org/project/MEArec/</ext-link>). An extensive documentation is available (<ext-link ext-link-type="uri" xlink:href="https://mearec.readthedocs.io/">https://mearec.readthedocs.io/</ext-link>), and the code is tested with a continuous integration platform (<ext-link ext-link-type="uri" xlink:href="https://travis-ci.org/">https://travis-ci.org/</ext-link>). Moreover, all the datsets generated for this article and used to make figures are available on Zenodo (10.5281/zenodo.3696926).</p>
    <p id="Par14">The article is organized as follows: in Section “<xref rid="Sec2" ref-type="sec">Getting started with MEArec</xref>” we introduce the principles of MEArec and we show how to run simulations with the CLI and Python API. In Section “<xref rid="Sec3" ref-type="sec">MEArec features</xref>” we explain the different features available in MEArec, including the capability of simulating recordings for MEAs, reproducing bursting behavior, controlling spatio-temporal overlaps, reproducing drifts, and replicating biological noise characteristics. In Section “<xref rid="Sec9" ref-type="sec">Testbench for spike sorting development and evaluation</xref>” we present the use of MEArec as a testbench for spike sorting development, and its integration with the SpikeInterface framework (Buccino et al. <xref ref-type="bibr" rid="CR4">2019</xref>). In Section “<xref rid="Sec12" ref-type="sec">Simulation output</xref>” we document the simulation outputs and how to save and load them with the MEArec API. Finally, in Section <xref rid="Sec13" ref-type="sec">Discussion</xref> we discuss the presented software and contextualize it with respect to the state-of-the-art.</p>
  </sec>
  <sec id="Sec2">
    <title>Getting started with MEArec</title>
    <p id="Par15">We start by describing the principle of the MEArec simulator and showing examples on how to get started with the simulations.
</p>
    <p id="Par16">The simulation is split in two phases: <italic>templates generation</italic> (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>) and <italic>recordings generation</italic> (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>). Templates (or extracellular action potentials - EAPs) are generated using biophysically realistic cell models which are positioned in the surroundings of a probe model. The templates generation phase is further divided into an <italic>intracellular</italic> and an <italic>extracellular</italic> simulation. During the intracellular simulation, each cell model is stimulated with a constant current and transmembrane currents of action potentials are computed (using NEURON (Carnevale and Hines <xref ref-type="bibr" rid="CR8">2006</xref>)) and stored to disk (the <italic>intracellular</italic> simulation is the most time consuming part and storing its output to disk enables one to run it only once). The extracellular simulation uses the LFPy package (Lindén et al. <xref ref-type="bibr" rid="CR28">2014</xref>; Hagen et al. <xref ref-type="bibr" rid="CR17">2018</xref>) to compute extracellular potentials generated at the electrodes’ locations using the well-established line-source approximation (see Supplementary Methods – <italic>Templates generation</italic> – for details). In particular, the cell morphology is loaded and shifted to a random position around the probe. Additionally, the user can add different rotations to the models. When the cell model is shifted and rotated, the previously computed and stored transmembrane currents are loaded and the EAP is computed. This step is repeated several times for each cell model, for different positions and rotations. The templates generation phase outputs a library of a large variety of extracellular templates, which can then be used to build the recordings. The templates generation phase is the most time consuming, but the same template library can be used to generate multiple recordings. It is therefore recommended to simulate many more templates than needed by a single recording, so that the same template library can be used to simulate a virtually infinite number of recordings.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Overview of the MEArec software. The simulation is divided in two phases: <italic>templates generation</italic> and <italic>recordings generation</italic>. <bold>a</bold> The <italic>templates generation</italic> phase is split in an intracellular and extracellular simulation. The intracellular simulation computes, for each available cell model, the transmembrane currents generated by several action potentials. In the extracellular simulation, each cell model is randomly moved and rotated several times and the stored currents are loaded to the model to compute the extracellular action potential, building a <italic>template library</italic>. <bold>b</bold> The <italic>recordings generation</italic> phase combines templates selected from the <italic>template library</italic> and randomly generated spike trains. Selected templates are pre-processed before a customized convolution with the spike trains. Additive noise is added to the output of the convolution, and the recordings can be optionally filtered</p></caption><graphic xlink:href="12021_2020_9467_Fig1_HTML" id="MO1"/></fig></p>
    <p id="Par17">MEArec, at installation, comes with 13 layer 5 cortical cell models from the Neocortical Microcircuit Portal (Ramaswamy et al. <xref ref-type="bibr" rid="CR39">2015</xref>). This enables the user to dive into simulations without the need to download and compile cell models. On the other hand, the initial set of cell models can be easily extended as outlined in the Supplementary Methods – <italic>Templates generation</italic>.</p>
    <p id="Par18">To generate 30 extracellular spikes (also referred as templates) per cell model recorded on a shank tetrode probe, the user can simply run this command:
<graphic position="anchor" xlink:href="12021_2020_9467_Figa_HTML" id="MO2"/></p>
    <p id="Par19">The -prb option allows for choosing the probe model, -n controls the number of templates per cell model to generate, and the --seed option is used to ensure reproducibility and if it is not provided, a random seed is chosen. In both cases, the seed is saved in the HDF5 file, so that the same templates can be replicated.</p>
    <p id="Par20">Recordings are then generated by combining templates selected with user-defined rules (based on minimum distance between neurons, amplitudes, spatial overlaps, and cell-types) and by simulating spike trains (Supplementary Methods – <italic>Recordings generation</italic> – for details on spike trains generation and template selection). Selected templates and spike trains are assembled using a customized (or modulated) convolution, which can replicate interesting features of spiking activity such as bursting and drift. After convolution, additive noise is generated and added to the recordings. Finally, the output recordings can be optionally filtered with a band-pass or a high-pass filter. Note that filtering the recordings will affect the shape and amplitude of the spike waveforms, but this is a common procedure in spike sorting to remove lower frequency components.
</p>
    <p id="Par21">Recordings can be generated with the CLI as follows:
<graphic position="anchor" xlink:href="12021_2020_9467_Figb_HTML" id="MO3"/></p>
    <p id="Par22">The gen-recordings command combines the selected templates from 4 excitatory cells (-ne 4) and 2 inhibitory cells (-ni 2), that usually have a more narrow spike waveform and a higher firing rate, with randomly generated spike trains. The duration of the output recordings is 30 seconds (-d 30). In this case, four random seeds control the spike train random generation (--st-seed 0), the template selection (--temp-seed 1), the noise generation (--noise-seed 2), and the convolution process (--conv-seed 3). Figure <xref rid="Fig2" ref-type="fig">2</xref> shows one second of the generated recordings (A), the extracted waveforms and the mean waveforms for each unit on the electrode with the largest peak (B), and the principal component analysis (PCA) projections of the waveforms on the tetrode channels.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Example of simulated tetrode recording. <bold>a</bold> One second of the recording timeseries on the four tetrode channels. The templates for the different units are overlapped to the recording traces in different colors. <bold>b</bold> Extracted waveforms on the channel with the largest amplitude for the six units in the recordings. <bold>c</bold> PCA projections on the first two PC components of the four tetrode channels. Each color corresponds to a neuron. The diagonal plots display the histograms of the PC projection on the corresponding channel</p></caption><graphic xlink:href="12021_2020_9467_Fig2_HTML" id="MO4"/></fig></p>
    <p id="Par23">MEArec also implements a convenient Python API, which is run internally by the CLI commands. For example, the following snippet of code implements the same commands shown above for generating templates and recordings:
<graphic position="anchor" xlink:href="12021_2020_9467_Figc_HTML" id="MO5"/></p>
    <p id="Par24">Moreover, the Python API implements plotting functions to visually inspect the simulated templates and recordings. For example, Fig. <xref rid="Fig2" ref-type="fig">2</xref> panels were generated using the plot_recordings() (A), plot_waveforms() (B), and plot_pca_map() (C) functions.</p>
    <p id="Par25">MEArec is designed to allow for full customization, transparency, and reproducibility of the simulated recordings. Parameters for the templates and recordings generation are accessible by the user and documented, so that different aspects of the simulated signals can be finely tuned (see Supplementary Methods for a list of parameters and their explanation). Moreover, the implemented command line interface (CLI) and simple Python API, enable the user to easily modify parameters, customize, and run simulations.</p>
    <p id="Par26">Finally, MEArec permits to manually set several random seeds used by the simulator to make recordings fully reproducible. This feature also enables one to study how separate characteristics of the recordings affect the spike sorting performance. As an example, we will show in the next sections how to simulate a recording sharing all parameters, hence with exactly the same spiking activity, but with different noise levels or drifting velocities.</p>
  </sec>
  <sec id="Sec3">
    <title>MEArec features</title>
    <sec id="Sec4">
      <title>Generation of realistic Multi-Electrode Array recordings</title>
      <p id="Par27">The recent development of Multi-Electrode Arrays (MEAs) enables researchers to record extracellular activity at very high spatio-temporal density both for <italic>in vitro</italic> (Berdondini et al. <xref ref-type="bibr" rid="CR2">2009</xref>; Frey et al. <xref ref-type="bibr" rid="CR14">2009</xref>) and <italic>in vivo</italic> applications (Neto et al. <xref ref-type="bibr" rid="CR35">2016</xref>; Jun et al. <xref ref-type="bibr" rid="CR25">2017</xref>). The large number of electrodes and their high density can result in challenges for spike sorting algorithms. It is therefore important to be able to simulate recordings from these kind of neural probes.</p>
      <p id="Par28">To deal with different probe designs, MEArec uses another Python package (MEAutility - <ext-link ext-link-type="uri" xlink:href="https://meautility.readthedocs.io/">https://meautility.readthedocs.io/</ext-link>), that allows users to easily import several available probe models and to define custom probe designs. Among others, MEAutility include Neuropixels probes (Jun et al. <xref ref-type="bibr" rid="CR25">2017</xref>), Neuronexus commercial probes (<ext-link ext-link-type="uri" xlink:href="http://neuronexus.com/products/neural-probes/">http://neuronexus.com/products/neural-probes/</ext-link>), and a wide variety of square MEA designs with different contact densities (the list of available probes can be found using the mearec available-probes command).</p>
      <p id="Par29">Similarly to the tetrode example, we first have to generate templates for the probes. These are the commands to generate templates and recordings for a Neuropixels design with 128 electrodes (Neuropixels-128). The recordings contain 60 neurons, 48 excitatory and 12 inhibitory. With similar commands, we generated templates and recordings for a Neuronexus probe with 32 channels (A1x32-Poly3-5mm-25s-177-CM32 - Neuronexus-32) with 20 cells (16 excitatory and 4 inhibitory), and a square 10x10 MEA with 15 <italic>μ</italic><italic>m</italic> inter-electrode-distance (SqMEA-10-15) and 50 cells (40 excitatory and 10 inhibitory).
<graphic position="anchor" xlink:href="12021_2020_9467_Figd_HTML" id="MO6"/></p>
      <p id="Par30">Figure <xref rid="Fig3" ref-type="fig">3</xref> shows the three above-mentioned probes (A), a sample template for each probe design (B), and one-second snippets of the three recordings (C-D-E), with zoomed in windows to highlight spiking activity.
<fig id="Fig3"><label>Fig. 3</label><caption><p>Generation of high-density multi-electrode array recordings. <bold>a</bold> Example of three available probes: a commercial Neuronexus probe (left), the Neuropixels probe (middle), and a high-density square MEA. <bold>b</bold> Sample templates for each probe design. (C-D-E) One-second snippets of recordings from the Neuronexus probe <bold>c</bold>, the Neuropixels probe <bold>d</bold>, and the square MEA probe <bold>e</bold>. The highlighted windows display the activity over three adjacent channels and show how the same spikes are seen on multiple sites</p></caption><graphic xlink:href="12021_2020_9467_Fig3_HTML" id="MO7"/></fig></p>
      <p id="Par31">While all the recordings shown so far have been simulated with default parameters, several aspects of the spiking activity are critical for spike sorting. In the next sections, we will show how these features, including bursting, spatio-temporal overlapping spikes, drift, and noise assumptions can be explored with MEArec simulations.
</p>
    </sec>
    <sec id="Sec5">
      <title>Bursting modulation of spike amplitude and shape</title>
      <p id="Par32">Bursting activity is one of the most complicated features of spiking activity that can compromise the performance of spike sorting algorithms. When a neuron bursts, i.e., fires a rapid train of action potentials with very short inter-spike intervals, the dynamics underlying the generation of the spikes changes over the bursting period (Hay et al. <xref ref-type="bibr" rid="CR20">2011</xref>). While the bursting mechanism has been largely studied with patch-clamp experiments, combined extracellular-juxtacellular recordings (Allen et al. <xref ref-type="bibr" rid="CR1">2018</xref>) and computational studies (Hagen et al. <xref ref-type="bibr" rid="CR18">2015</xref>) suggest that during bursting, extracellular spikes become lower in amplitude and wider in shape.</p>
      <p id="Par33">In order to simulate this property of the extracellular waveforms in a fast and efficient manner, templates can be modulated both in amplitude and shape during the convolution operation, depending on the spiking history.</p>
      <p id="Par34">To demonstrate how bursting is mimicked, we built a toy example with a constant spike train with 10 <italic>ms</italic> inter-spike-interval (Fig. <xref rid="Fig4" ref-type="fig">4a</xref>). A <italic>modulation value</italic> is computed for each spike and it is used to modulate the waveform for that event by scaling its amplitude, and optionally stretching its shape. The blue dots show the default modulation (bursting disabled), in which the modulation values are drawn from a Gaussian distribution with unitary mean to add some physiological variation to the spike waveforms. When bursting is enabled (by setting the bursting parameter to true), the modulation values are computed based on the spike history, and it depends on the number of consecutive spikes in a bursting event and their average inter-spike-intervals (see Supplementary Methods – <italic>Recordings generation - Modulated convolution</italic> – for details on the modulation values calculation).
<fig id="Fig4"><label>Fig. 4</label><caption><p>Bursting behavior. <bold>a</bold> Modulation values computation for a sample spike train of 300 <italic>ms</italic> with constant inter-spike-intervals of 10 <italic>ms</italic>. The blue dots show the modulation values for each spike when bursting is not activated: each value is drawn from a <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\mathcal {N}(1, 0.05^{2})$\end{document}</tex-math><mml:math id="M2"><mml:mi mathvariant="script">N</mml:mi><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>0.0</mml:mn><mml:msup><mml:mrow><mml:mn>5</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup><mml:mo>)</mml:mo></mml:math><inline-graphic xlink:href="12021_2020_9467_Article_IEq1.gif"/></alternatives></inline-formula> distribution. When bursting is activated, a bursting event can be limited by the maximum number of spikes (orange - 5 spikes, green - 10 spikes), or by the maximum bursting event duration (red - 75 <italic>ms</italic>). <bold>b</bold> Modulated templates. The blue lines show templates modulated in amplitude only. The orange and green lines display the same templates with added shape modulation. <bold>c</bold> Modulation in tetrode recordings. The top panel shows spikes in a one-second period. The middle panel displays the modulation values for those spikes. The bottom panel shows the modulated template on the electrode with the largest peak after convolution. (D-E) PCA projections on the first principal component for the tetrode recordings without bursting (the same as Section <xref rid="Sec2" ref-type="sec">Getting started with MEArec</xref>) <bold>d</bold> and re-simulated with bursting <bold>e</bold> and shape modulation enabled. Note that the PCA projections were computed in both cases from the waveforms without bursting. The clusters, with bursting, become more spread and harder to separate than without bursting</p></caption><graphic xlink:href="12021_2020_9467_Fig4_HTML" id="MO8"/></fig></p>
      <p id="Par35">Bursting events can be either controlled by the maximum number of spikes making a burst (orange dots - 5 spikes per burst; green dots - 10 spikes per burst) or by setting a maximum bursting duration (red dots - maximum 75 <italic>ms</italic>). Note that in Fig. <xref rid="Fig4" ref-type="fig">4a</xref> the spike train is constant just to illustrate the computation of the modulation values. In actual simulations, instead, the modulation values will depend on the firing rate and the timing between spikes.</p>
      <p id="Par36">By default, spikes are only modulated in amplitude. The user can also enable shape modulation by setting the shape_mod parameter to true. The modulation value, computed for each spike, controls both the amplitude scaling and shape modulation of the spike event. For amplitude modulation, the amplitude of the spike is simply multiplied by the modulation value. Additionally, when shape modulation is enabled, the waveform of each spike is also stretched. The shape_stretch parameter controls the overall amount of stretch, but the actual stretch of single waveforms depends on the modulation value computed for each spike. In Fig. <xref rid="Fig4" ref-type="fig">4b</xref>, examples of bursting templates are shown. The blue traces display templates only modulated in amplitude, i.e., the amplitude is scaled by the modulation value. The orange and green traces, instead, also present shape modulation, with different values of the shape_stretch parameter (the higher the shape_stretch, the more stretched waveforms will be). We refer to the Supplementary Methods – <italic>Recordings generation - Modulated convolution</italic> – for further details on amplitude and shape modulation.</p>
      <p id="Par37">Figure <xref rid="Fig4" ref-type="fig">4c</xref> shows a one-second snippet of the tetrode recording shown previously after bursting modulation is activated. The top panel shows the spike events, the middle one displays the modulation values computed for each spike, and the bottom panel shows the output of the modulated convolution between one of the templates (on the electrode with the largest amplitude) and the spike train.</p>
      <p id="Par38">Figures <xref rid="Fig4" ref-type="fig">4d</xref> and e show the waveform projections on the first principal component of each channel for the tetrode recording shown in Section <xref rid="Sec2" ref-type="sec">Getting started with MEArec</xref> with and without bursting enabled, respectively. In this case all neurons are bursting units and this causes a stretch in the PCA space, which is a clear complication for spike sorting algorithms. Note that shape modulation does not affect all neurons by the same amount, since it depends on the spike history and therefore on the firing rate.</p>
    </sec>
    <sec id="Sec6">
      <title>Controlling spatio-temporal overlaps</title>
      <p id="Par39">Another complicated aspect of extracellular spiking activity that can influence spike sorting performance is the occurrence of overlapping spikes. While temporal overlapping of events on spatially separated locations can be solved with feature masking (Rossant et al. <xref ref-type="bibr" rid="CR41">2016</xref>), spatio-temporal overlapping can cause a distortion of the detected waveform, due to the superposition of separate spikes. Some spike sorting approaches, based on template-matching, are designed to tackle this problem (Pachitariu et al. <xref ref-type="bibr" rid="CR37">2016</xref>; Yger et al. <xref ref-type="bibr" rid="CR44">2018</xref>; Diggelmann et al. <xref ref-type="bibr" rid="CR11">2018</xref>).</p>
      <p id="Par40">In order to evaluate to what extent spatio-temporal overlap affects spike sorting, MEArec allows the user to set the number of spatially overlapping templates and to modify the synchrony rate of their spike trains. In Fig. <xref rid="Fig5" ref-type="fig">5</xref> we show an example of this on a Neuronexus-32 probe (see Fig. <xref rid="Fig3" ref-type="fig">3</xref>A). The recording was constructed with two excitatory and spatially overlapping neurons, whose templates are shown in Fig. <xref rid="Fig5" ref-type="fig">5a</xref> (see Supplementary Methods – <italic>Recordings generation - Overlapping spikes and spatio-temporal synchrony</italic> – for details on the spatial overlap definition). The spike synchrony rate can be controlled with the sync_rate parameter. If this parameter is not set (Fig. <xref rid="Fig5" ref-type="fig">5b</xref> - left), some spatio-temporal overlapping spikes are present (red events). If the synchrony rate is set to 0, those spikes are removed from the spike trains (Fig. <xref rid="Fig5" ref-type="fig">5b</xref> - middle). If set to 0.05, i.e., 5% of the spikes will be spatio-temporal collisions, events are added to the spike trains to reach the specified synchrony rate value of spatio-temporal overlap. As shown in Fig. <xref rid="Fig5" ref-type="fig">5c</xref>, the occurrence of spatio-temporal overlapping events affects the recorded extracellular waveform: the waveforms of the neurons, in fact, get summed and might be mistaken for a separate unit by spike sorting algorithms when the spikes are overlapping.
<fig id="Fig5"><label>Fig. 5</label><caption><p>Controlling spatio-temporal overlapping spikes. <bold>a</bold> Example of two spatially overlapping templates. The two templates are spatially overlapping because on the electrode with the largest signal (depicted as an black asterisk) for the blue template, the orange template has an amplitude greater than the 90% of its largest amplitude. <bold>b</bold> Without setting the synchrony rate, the random spike trains (left) present a few spatio-temporal collisions (red events). When setting the synchrony rate to 0 (middle), the spatio-temporal overlaps are removed. When the synchony rate is set to 0.05 (right), spatio-temporal overlapping spikes are added to the spike trains. <bold>c</bold> One-second snippet of the recording with 0.05 synchrony. In the magnified window, a spatio-temporal overlapping event is shown: the collision results in a distortion of the waveform</p></caption><graphic xlink:href="12021_2020_9467_Fig5_HTML" id="MO9"/></fig></p>
      <p id="Par41">The possibility of reproducing and controlling this feature of extracellular recordings within MEArec could aid in the development of spike sorters which are robust to spatio-temporal collisions.</p>
    </sec>
    <sec id="Sec7">
      <title>Generating drifting recordings</title>
      <p id="Par42">When extracellular probes are inserted in the brain, especially for acute experiments, the neural tissue might move with respect to the electrodes. This phenomenon is known as drift. Drift can be due to a slow relaxation of the tissue (slow drift) or to fast re-adjustments of the tissue, for example due to an abrupt motion of the tissue (fast drift). These two types of drifts can also be observed in tandem (Pachitariu et al. <xref ref-type="bibr" rid="CR36">2019</xref>).</p>
      <p id="Par43">Drifting units are particularly critical for spike sorting, as the waveform shapes change over time due to the relative movement between the neurons and the probe. New spike sorting algorithms have been developed to specifically tackle the drifting problem (e.g. Kilosort2 (Pachitariu et al. <xref ref-type="bibr" rid="CR36">2019</xref>), IronClust (Jun et al. <xref ref-type="bibr" rid="CR24">2017</xref>)).</p>
      <p id="Par44">In order to simulate drift in the recordings, we first need to generate drifting templates:
<graphic position="anchor" xlink:href="12021_2020_9467_Fige_HTML" id="MO10"/></p>
      <p id="Par45">Drifting templates are generated by choosing an initial and final soma position with user-defined rules (see Supplementary Methods – <italic>Template generation - Drifing templates</italic> – for details) and by moving the cell along the line connecting the two positions for a defined number of constant drifting steps that span the segment connecting the initial and final positions (30 steps by default). An example of a drifting template is depicted in Fig. <xref rid="Fig6" ref-type="fig">6a</xref>, alongside with the drifting neuron’s soma locations for the different drifting steps.
<fig id="Fig6"><label>Fig. 6</label><caption><p>Drifting. <bold>a</bold> Example of a drifting template. The colored asterisks on the left show the trajectory from the initial (blue large asterisk) to the final (red large asterisk) neuron positions. The positions are in the x-y coordinates of the probe plane, and the electrode locations are depicted as black dots. The corresponding templates are displayed at the electrode locations with the same colormap, showing that the template peak is shifted upwards following the soma position. <bold>b</bold> Slow drift. (top) 60-second slow drifting recording with four neurons moving at a velocity of 20 <italic>μ</italic> m/<italic>m</italic><italic>i</italic><italic>n</italic>. Templates on the largest electrode are superimposed in different colors on the recordings. Note that the maximum channel changes over time. (bottom) Amplitude of the waveforms over time on the electrode with the largest initial peak. <bold>c</bold> Fast drift. (top) 60-second fast drifting recording with four neurons undergoing a fast drift event every 15 s. Templates on the largest electrode are superimposed in different colors on the recordings. Also for fast drifts, the maximum channel changes over time. (bottom) Amplitude of the waveforms over time on the electrode with the largest initial peak</p></caption><graphic xlink:href="12021_2020_9467_Fig6_HTML" id="MO11"/></fig></p>
      <p id="Par46">Once a library of drifting templates is generated, drifting recordings can be simulated. MEArec allows users to simulate recordings with three types of drift modes: <italic>slow</italic>, <italic>fast</italic>, and <italic>slow+fast</italic>. When slow drift is selected, the drifting template is selected over time depending on the initial position and the drifting velocity (5 <italic>μ</italic>/<italic>m</italic><italic>i</italic><italic>n</italic> by default). If the final drifting position is reached, the drift direction is reversed. For fast drifts, the position of a drifting neuron is shifted abruptly with a user-defined period (every 20 s by default). The new position is chosen so that the difference in waveform amplitude of the drifting neuron on its current maximum channel remains within user-defined limits (5-20<italic>μ</italic><italic>V</italic> by default), in order to prevent from moving the neuron too far from its previous position. The slow+fast mode combines the slow and fast mechanisms.</p>
      <p id="Par47">In Fig. <xref rid="Fig6" ref-type="fig">6b</xref> and c we show examples of slow drift and fast drift, respectively. In the top panel the recordings are displayed, with superimposed drifting templates on the electrode with the largest peak. Note that the maximum channel can change over time due to drift. In the bottom panels, instead, the amplitude of the waveforms on the channels with the initial largest peak for each neuron are shown over time. Slow drift causes the amplitude to slowly vary, while for fast drifts we observe more abrupt changes when a fast drift event occurs. In the <italic>slow+fast</italic> drift mode, these two effects are combined.</p>
    </sec>
    <sec id="Sec8">
      <title>Modeling experimental noise</title>
      <p id="Par48">Spike sorting performance can be greatly affected by noise in the recordings. Many algorithms first use a spike detection step to identify putative spikes. The threshold for spike detection is usually set depending on the noise standard deviation or median absolute deviation (Quiroga et al. <xref ref-type="bibr" rid="CR38">2004</xref>). Clearly, recordings with larger noise levels will result in higher spike detection thresholds, hence making it harder to robustly detect lower amplitude spiking activity. In addition to the noise amplitude, other noise features can affect spike sorting performance: some clustering algorithms, for example, assume that clusters have Gaussian shape, due to the assumption of an additive normal noise to the recordings. Moreover, the noise generated by biological sources can produce spatial correlations in the noise profiles among different channels and it can be modulated in frequency (Camuñas-Mesa and Quiroga <xref ref-type="bibr" rid="CR7">2013</xref>; Rey et al. <xref ref-type="bibr" rid="CR40">2015</xref>).
</p>
      <p id="Par49">To investigate how the above-mentioned assumptions on noise can affect spike sorting performance, MEArec can generate recordings with several noise models. Figure <xref rid="Fig7" ref-type="fig">7</xref> shows 5-second spiking-free recordings of a tetrode probe for five different noise profiles that can be generated (A - recordings, B - spectrum, C - channel covariance, D - amplitude distribution).
<fig id="Fig7"><label>Fig. 7</label><caption><p>Noise models. The 5 columns refer to different noise models: 1) Uncorrelated Gaussian noise, 2) Distance-correlated Gaussian noise, 3) Colored uncorrelated Gaussian noise, 4) Colored distance-correlated Gaussian noise, and 5) Noise generated by distant neurons. <bold>a</bold> One-second spiking-free recording. <bold>b</bold> Spectrum of the first recording channel between 10 and 5000 Hz. <bold>c</bold> Covariance matrix of the recordings. <bold>d</bold> Distribution of noise amplitudes for the first recording channel. The different noise models vary in the spectrum, channel correlations, and amplitude distributions</p></caption><graphic xlink:href="12021_2020_9467_Fig7_HTML" id="MO12"/></fig></p>
      <p id="Par50">The first column shows uncorrelated Gaussian noise, which presents a flat spectrum, a diagonal covariance matrix, and a symmetrical noise amplitude distribution. In the recording in the second column, spatially correlated noise was generated as a multivariate Gaussian noise with a covariance matrix depending on the channel distance. Also in this case, the spectrum (B) presents a flat profile and the amplitude distribution is symmetrical (D), but the covariance matrix shows a correlation depending on the inter-electrode distance. As previous studies showed (Camuñas-Mesa and Quiroga <xref ref-type="bibr" rid="CR7">2013</xref>; Rey et al. <xref ref-type="bibr" rid="CR40">2015</xref>), the frequency content of extracellular noise is not flat, but its spectrum is affected by the spiking activity of distant neurons, which appear in the recordings as below-threshold <italic>biological</italic> noise. To reproduce the spectrum profile that is observed in experimental data, MEArec allows coloring the noise spectrum of Gaussian noise with a second order infinite impulse response (IIR) filter (see Supplementary Methods – <italic>Recordings generation - Noise models and post-processing</italic> – for details). Colored noise represents an efficient way of obtaining the desired spectrum, as shown in the third and fourth columns of Fig. <xref rid="Fig7" ref-type="fig">7</xref>, panel B. Distance correlation is maintained (panel C - fourth column), and the distribution of the noise amplitudes is symmetrical. Finally, a last noise model enables one to generate activity of distant neurons. In this case, noise is built as the convolution between many neurons (300 by default) whose template amplitudes are below an amplitude threshold (10<italic>μ</italic><italic>V</italic> by default). A Gaussian noise floor is then added to the resulting noise, which is scaled to match the user-defined noise level. The <italic>far-neurons</italic> noise profile is shown in the last column of Fig. <xref rid="Fig7" ref-type="fig">7</xref>. While the spectrum and spatial correlation of this noise profile are similar to the ones generated with a colored, distance-correlated noise (4th column), the shape of the noise distribution is skewed towards negative values (panel D), mainly due to the negative contribution of the action potentials.</p>
      <p id="Par51">The capability of MEArec to simulate several noise models enables spike sorter developers to assess how different noise profiles affect their algorithms and to modify their methods to be insensitive to specific noise assumptions.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Testbench for spike sorting development and evaluation</title>
    <p id="Par52">In the previous sections, we have shown several examples on how MEArec is capable of reproducing several aspects of extracellular recordings which are critical for spike sorting performance, in a fully reproducible way. The proposed design and its integration with a spike sorting evaluation framework called SpikeInterface (Buccino et al. <xref ref-type="bibr" rid="CR4">2019</xref>) enables developers to actively include customized simulations in the spike sorting development phase.</p>
    <p id="Par53">Due to its speed and controllability, we see MEArec as a <italic>testbench</italic>, rather than a <italic>benchmark</italic> tool. We provide here a couple of examples. In Fig. <xref rid="Fig8" ref-type="fig">8a</xref>, we show a one-second section of recordings simulated on a Neuronexus-32 probe with fixed parameters and random seeds regarding template selection and spike train generation, but with four different levels of additive Gaussian noise, with standard deviations of 5, 10, 20, and 30 <italic>μ</italic><italic>V</italic>. The traces show the same underlying spiking activity, so the only variability in spike sorting performance will be due to the varying noise levels. Similarly, in Fig. <xref rid="Fig8" ref-type="fig">8b</xref>, 1-minute drifting recordings were simulated with three different drifting velocities. The recordings show that for low drifting speeds the waveform changes are almost not visible (green traces), while for faster drifts (orange and blue traces), the waveform changes over time become more important.
<fig id="Fig8"><label>Fig. 8</label><caption><p>MEArec as testbench platform for spike sorting. <bold>a</bold> Four one-second snippet of recordings generated with a different noise level parameter (5 - red, 10 - green, 20 - orange, and 30<italic>μ</italic><italic>V</italic> - blue). The underlying spiking activity is exactly the same for all recordings, and the only difference lies in the standard deviation of the underlying uncorrelated Gaussian noise. <bold>b</bold> Three slow drifting recordings generated with a different drifting velocity parameter (10 - green, 30 - orange, and 60 <italic>μ</italic> m/<italic>m</italic><italic>i</italic><italic>n</italic> - blue). Also in this case, the underlying spiking activity is the same, but it can be observed how the different speeds result in a modification of waveforms over time</p></caption><graphic xlink:href="12021_2020_9467_Fig8_HTML" id="MO13"/></fig></p>
    <p id="Par54">The capability of MEArec of reproducing such behaviors in a highly controlled manner could aid in the design of specific tests for measuring and quantifying the ability of a spike sorting software to deal with specific complexities in extracellular recordings. Other examples include simulating a recording with increasing levels of bursting in order to measure to what extent bursting units are correctly clustered, or changing the synchrony rate of spatially overlapping units to assess how much spatio-temporal collisions affect performance.</p>
    <sec id="Sec10">
      <title>Integration with SpikeInterface</title>
      <p id="Par55">We have recently developed SpikeInterface (Buccino et al. <xref ref-type="bibr" rid="CR4">2019</xref>), a Python-based framework for running several spike sorting algorithms, comparing, and validating their results. MEArec can be easily interfaced to SpikeInterface so that simulated recordings can be loaded, spike sorted, and benchmarked with a few lines of code. In the following example, a MEArec recording is loaded, spike sorted with Mountainsort4 (Chung et al. <xref ref-type="bibr" rid="CR9">2017</xref>) and Kilosort2 (Pachitariu et al. <xref ref-type="bibr" rid="CR36">2019</xref>), and benchmarked with respect to the ground-truth spike times available from the MEArec simulation:
<graphic position="anchor" xlink:href="12021_2020_9467_Figf_HTML" id="MO14"/></p>
      <p id="Par56">The get_performance() function returns the accuracy, precision, and recall for all the ground-truth units in the MEArec recording. For further details on these metrics and a more extensive characterization of the comparison we refer to the SpikeInterface documentation and article (Buccino et al. <xref ref-type="bibr" rid="CR4">2019</xref>).</p>
      <p id="Par57">The combination of MEArec and SpikeInterface represents a powerful tool for systematically testing and comparing spike sorter performances with respect to several complications of extracellular recordings. MEArec simulations, in combination with SpikeInterface, are already being used to benchmark and compare spike sorting algorithms within the SpikeForest project (Magland et al. <xref ref-type="bibr" rid="CR29">2020</xref>).</p>
    </sec>
    <sec id="Sec11">
      <title>Performance considerations</title>
      <p id="Par58">As a testbench tool, the speed requirement has been one of the main design principle of MEArec. In order to achieve high speed, most parts of the simulation process are fully parallelized. As shown in Fig. <xref rid="Fig1" ref-type="fig">1</xref>, the simulations are split in templates and recordings generation. The templates generation phase is the most time consuming, but the same template library can be used to generate several recordings. This phase is further split in two sub-phases: the intracellular and extracellular simulations. The former only needs to be run once, as it generates a set of cell model-specific spikes that are stored and then used for extracellular simulations, which is instead probe specific.</p>
      <p id="Par59">We present here run times for the different phases of the templates generation and for the recordings generation. All simulations were run on an Ubuntu 18.04 Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz, with 16 GB of RAM.</p>
      <p id="Par60">The intracellular simulation run time for the 13 cell models shipped with the software was <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\sim 130$\end{document}</tex-math><mml:math id="M4"><mml:mo>∼</mml:mo><mml:mn>130</mml:mn></mml:math><inline-graphic xlink:href="12021_2020_9467_Article_IEq2.gif"/></alternatives></inline-formula> seconds (<inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$\sim 10$\end{document}</tex-math><mml:math id="M6"><mml:mo>∼</mml:mo><mml:mn>10</mml:mn></mml:math><inline-graphic xlink:href="12021_2020_9467_Article_IEq3.gif"/></alternatives></inline-formula> seconds per cell model).</p>
      <p id="Par61">Run times for extracellular simulations for several probe types, number of templates in the library, and drifting templates are shown in the <italic>Templates generation</italic> section of Table <xref rid="Tab1" ref-type="table">1</xref>. The run times for this phase mainly depend on the number of templates to be generated (N templates column), on the minimum amplitude of accepted templates (Min. amplitude column, see Supplementary Methods – <italic>Templates generation - Extracellular simulation</italic> – for further details), and especially on drift (Drifting column). When simulating drifting templates, in fact, the number of actual extracellular spikes for each cell model is N templates times N drift steps. Note that in order to generate the <italic>far-neurons</italic> noise model, the minimum amplitude should be set to 0, so that low-amplitude templates are not discarded. The number of templates available in the template library will be the specified number of templates (N templates) times the number of cell models (13 by default).
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Templates and recordings generation run times depending on several simulation parameters. The templates simulations were run with 13 concurrent jobs (same as the number of models). The recordings simulations were run with four concurrent jobs, and a chunk duration of 20 s.</p></caption><table frame="hsides" rules="groups"><tbody><tr><td align="left">Templates generation</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/></tr><tr><td align="left">Probe</td><td align="left">N templates</td><td align="left">N channels</td><td align="left">Min. amplitude</td><td align="left">Drifting</td><td align="left">N drift steps</td><td align="left">Run time (s)</td></tr><tr><td align="left">tetrode-mea-l</td><td align="left">30</td><td align="left">4</td><td align="left">30</td><td align="left">No</td><td align="left">-</td><td align="left">169</td></tr><tr><td align="left">tetrode-mea-l</td><td align="left">100</td><td align="left">4</td><td align="left">30</td><td align="left">No</td><td align="left">-</td><td align="left">588</td></tr><tr><td align="left">tetrode-mea-l</td><td align="left">100</td><td align="left">4</td><td align="left">0</td><td align="left">No</td><td align="left">-</td><td align="left">236</td></tr><tr><td align="left">Neuronexus-32</td><td align="left">100</td><td align="left">32</td><td align="left">30</td><td align="left">No</td><td align="left">-</td><td align="left">567</td></tr><tr><td align="left">Neuropixels-128</td><td align="left">100</td><td align="left">128</td><td align="left">30</td><td align="left">No</td><td align="left">-</td><td align="left">809</td></tr><tr><td align="left">SqMEA-10-15</td><td align="left">30</td><td align="left">100</td><td align="left">30</td><td align="left">No</td><td align="left">-</td><td align="left">1027</td></tr><tr><td align="left">Neuronexus-32</td><td align="left">30</td><td align="left">32</td><td align="left">30</td><td align="left">Yes</td><td align="left">50</td><td align="left">2000</td></tr><tr><td align="left">Recordings generation</td><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/><td align="left"/></tr><tr><td align="left">Probe</td><td align="left">N cells</td><td align="left">N channels</td><td align="left">Duration</td><td align="left">Bursting</td><td align="left">Drifting</td><td align="left">Run time (s)</td></tr><tr><td align="left">tetrode-mea-l</td><td align="left">6</td><td align="left">4</td><td align="left">10</td><td align="left">No</td><td align="left">No</td><td align="left">0.5</td></tr><tr><td align="left">tetrode-mea-l</td><td align="left">6</td><td align="left">4</td><td align="left">600</td><td align="left">No</td><td align="left">No</td><td align="left">7</td></tr><tr><td align="left">Neuronexus-32</td><td align="left">20</td><td align="left">32</td><td align="left">30</td><td align="left">No</td><td align="left">No</td><td align="left">8</td></tr><tr><td align="left">Neuronexus-32</td><td align="left">20</td><td align="left">32</td><td align="left">30</td><td align="left">Yes</td><td align="left">No</td><td align="left">52</td></tr><tr><td align="left">Neuropixels-128</td><td align="left">60</td><td align="left">128</td><td align="left">30</td><td align="left">No</td><td align="left">No</td><td align="left">46</td></tr><tr><td align="left">SqMEA-10-15</td><td align="left">50</td><td align="left">100</td><td align="left">30</td><td align="left">No</td><td align="left">No</td><td align="left">33</td></tr><tr><td align="left">Neuronexus-32</td><td align="left">4</td><td align="left">32</td><td align="left">60</td><td align="left">No</td><td align="left">Yes</td><td align="left">15</td></tr><tr><td align="left">Neuronexus-32</td><td align="left">20</td><td align="left">32</td><td align="left">60</td><td align="left">No</td><td align="left">Yes</td><td align="left">37</td></tr></tbody></table></table-wrap></p>
      <p id="Par62">Recordings are then generated using the simulated template libraries. In Table <xref rid="Tab1" ref-type="table">1</xref>, the <italic>Recordings generation</italic> section shows run times for several recordings with different probes, durations, number of cells, bursting, and drifting options. The main parameter that affects simulation times is the number of cells, as it increases the number of modulated convolutions. Bursting and drifting behavior also increase the run time of the simulations, because of the extra processing required in the convolution step. The simulation run times, however, range from a few seconds to a few minutes. Therefore, the speed of MEArec enables users to generate numerous recordings with different parameters for testing spike sorter performances. Moreover, the software internally uses memory maps to reduce the RAM usage and the simulations can be <italic>chunked</italic> in time. These features enable users to simulate long recordings on probes with several hundreds of electrodes (e.g. Neuropixels probes) without the need of large-memory nodes or high-performance computing platforms.</p>
    </sec>
  </sec>
  <sec id="Sec12">
    <title>Simulation output</title>
    <p id="Par63">The templates generation outputs a Template Generator object, containing the following fields:</p>
    <p id="Par64">
      <def-list>
        <def-item>
          <term>templates</term>
          <def>
            <p id="Par65">contains the generated templates – array with shape (n_templates, n_electrodes, n_points) for non-drifting templates or (n_templates, n_drift_steps, n_electrodes, n_points) for drifting ones</p>
          </def>
        </def-item>
        <def-item>
          <term>locations</term>
          <def>
            <p id="Par66">contains the 3D soma locations of the templates – array with shape (n_templates, 3) for non-drifting templates or (n_templates, n_drift_steps, 3) for drifting templates.</p>
          </def>
        </def-item>
        <def-item>
          <term>rotations</term>
          <def>
            <p id="Par67">contains the 3D rotations applied to the cell model before computing the template – array with shape (n_templates, 3) (for drifting templates rotation is fixed)</p>
          </def>
        </def-item>
        <def-item>
          <term>celltypes</term>
          <def>
            <p id="Par68">contains the cell types of the generated templates – array of strings with length (n_templates)</p>
          </def>
        </def-item>
        <def-item>
          <term>info</term>
          <def>
            <p id="Par69">contains a dictionary with parameters used for the simulation (params key) and information about the probe (electrodes key)</p>
          </def>
        </def-item>
      </def-list>
    </p>
    <p id="Par70">The recordings generation outputs a Recording Generator object, containing the following fields:</p>
    <p id="Par71">
      <def-list>
        <def-item>
          <term>recordings</term>
          <def>
            <p id="Par72">contains the generated recordings – array with shape (n_electrodes, n_samples)</p>
          </def>
        </def-item>
        <def-item>
          <term>spiketrains</term>
          <def>
            <p id="Par73">contains the spike trains – list of (n_neurons) neo.Spiketrain objects (Garcia et al. <xref ref-type="bibr" rid="CR15">2014</xref>)</p>
          </def>
        </def-item>
        <def-item>
          <term>templates</term>
          <def>
            <p id="Par74">contains the selected templates – array with shape (n_neurons, n_jitters, n_electrodes, n_templates samples) templates for non-drifting recordings - or (n_neurons, n_drift_steps, n_jitters, n_electrodes, n_neurons) for drifting ones</p>
          </def>
        </def-item>
        <def-item>
          <term>templates_celltypes</term>
          <def>
            <p id="Par75">contains the cell type of the selected templates – array of strings with length (n_neurons)</p>
          </def>
        </def-item>
        <def-item>
          <term>templates_locations</term>
          <def>
            <p id="Par76">contains the 3D soma locations of the selected templates – array with shape (n_neurons, 3) for non-drifting recordings or (n_neurons, n_drift_steps, 3) for drifting ones</p>
          </def>
        </def-item>
        <def-item>
          <term>templates_rotations</term>
          <def>
            <p id="Par77">contains the 3D rotations applied to the selected templates – array with shape (n_neurons, 3)</p>
          </def>
        </def-item>
        <def-item>
          <term>channel_positions</term>
          <def>
            <p id="Par78">contains the 3D positions of the probe electrodes – array with shape (n_electrodes, 3)</p>
          </def>
        </def-item>
        <def-item>
          <term>timestamps</term>
          <def>
            <p id="Par79">contains the timestamps in seconds – array with length (n_samples)</p>
          </def>
        </def-item>
        <def-item>
          <term>voltage_peaks</term>
          <def>
            <p id="Par80">contains the average voltage peaks of the templates on each electrode – array with shape (n_neurons, n_electrodes)</p>
          </def>
        </def-item>
        <def-item>
          <term>spike_traces</term>
          <def>
            <p id="Par81">contains a clean spike trace for each neuron (generated by a clean convolution between the spike train and the template on the electrode with the largest peak) – array with shape (n_neurons, n_samples)</p>
          </def>
        </def-item>
        <def-item>
          <term>info</term>
          <def>
            <p id="Par82">contains a dictionary with parameters used for the simulation</p>
          </def>
        </def-item>
      </def-list>
    </p>
    <p id="Par83">When simulating with the Python API, the returned TemplateGenerator and RecordingGenerator can be saved as .h5 files with:
<graphic position="anchor" xlink:href="12021_2020_9467_Figg_HTML" id="MO15"/></p>
    <p id="Par84">The generation using the CLI saves templates and recordings directly. The saved templates and recordings can be loaded in Python as TemplateGenerator and RecordingGenerator objects with:
<graphic position="anchor" xlink:href="12021_2020_9467_Figh_HTML" id="MO16"/></p>
  </sec>
  <sec id="Sec13">
    <title>Discussion</title>
    <p id="Par85">In this paper we have presented MEArec, a Python package for simulating extracellular recordings for spike sorting development and validation. We first introduced an overview of the software function, consisting in separating the templates and the recordings generation to improve efficiency and simulation speed. We then showed the ease of use of the software, whose command line interface and simple Python API enable users to simulate extracellular recordings with a couple of commands or a few lines of code. We explored the capability of reproducing and controlling several aspects of extracellular recordings which can be critical for spike sorting algorithms, including spikes in a burst with varying spike shapes, spatio-temporal overlaps, drifting units, and noise assumptions. We illustrated two examples of using MEArec, in combination with SpikeInterface (Buccino et al. <xref ref-type="bibr" rid="CR4">2019</xref>), as a testbench platform for developing spike sorting algorithms. Finally, we benchmarked the speed performance of MEArec (Table <xref rid="Tab1" ref-type="table">1</xref>).</p>
    <p id="Par86">Investigating the validation section of several recently developed spike sorting algorithms (Rossant et al. <xref ref-type="bibr" rid="CR41">2016</xref>; Pachitariu et al. <xref ref-type="bibr" rid="CR37">2016</xref>; Jun et al. <xref ref-type="bibr" rid="CR25">2017</xref>; Hilgen et al. <xref ref-type="bibr" rid="CR22">2017</xref>; Jun et al. <xref ref-type="bibr" rid="CR24">2017</xref>; Lee et al. <xref ref-type="bibr" rid="CR26">2017</xref>; Yger et al. <xref ref-type="bibr" rid="CR44">2018</xref>), it is clear that the neuroscientific community needs a standardized validation framework for spike sorting performance. Some spike sorters are validated using a so called hybrid approach, in which well-identified units from previous experimental recordings are artificially injected in the recordings and used to compute performance metrics (Rossant et al. <xref ref-type="bibr" rid="CR41">2016</xref>; Pachitariu et al. <xref ref-type="bibr" rid="CR37">2016</xref>; Wouters et al. <xref ref-type="bibr" rid="CR43">2019</xref>). The use of templates extracted from previously sorted datasets poses some questions regarding the accuracy of the initial sorting, as well as the complexity of the well-identified units. Alternatively, other spike sorters are validated on experimental paired ground-truth recordings (Chung et al. <xref ref-type="bibr" rid="CR9">2017</xref>; Yger et al. <xref ref-type="bibr" rid="CR44">2018</xref>). While these valuable datasets (Harris et al. <xref ref-type="bibr" rid="CR19">2000</xref>; Henze et al. <xref ref-type="bibr" rid="CR21">2000</xref>; Neto et al. <xref ref-type="bibr" rid="CR35">2016</xref>; Marques-Smith et al. <xref ref-type="bibr" rid="CR31">2018</xref>) can certainly provide useful information, the low count of ground-truth units makes the validation incomplete and could result in biases (for example algorithm-specific parameters could be tuned to reach a higher performance for the recorded ground-truth units). A third validation method consist of using simulated ground-truth recordings (Einevoll et al. <xref ref-type="bibr" rid="CR12">2012</xref>). While this approach is promising, in combination with experimental paired recordings, the current available simulators (Camuñas-Mesa and Quiroga <xref ref-type="bibr" rid="CR7">2013</xref>; Hagen et al. <xref ref-type="bibr" rid="CR18">2015</xref>; Mondragón-González and Burguière <xref ref-type="bibr" rid="CR33">2017</xref>) present some limitations in terms of biological realism, controllability, speed, and/or ease of use (see Introduction). We therefore introduced MEArec, a software package which is computationally efficient, easy to use, highly controllable, and capable of reproducing critical characteristics of extracellular recordings relevant to spike sorting, including bursting modulation, spatio-temporal overlaps, drift of units over time, and various noise profiles.</p>
    <p id="Par87">The capability of MEArec to replicate complexities in extracellular recordings which are usually either ignored or not controlled in other simulators, permits the user to include tailored simulations in the spike sorting implementation process, using the simulator as a testbench platform for algorithm development. MEArec simulations could not only be used to test the final product, but specific simulations could be used to help implementing algorithms that are able to cope with drifts, bursting, and spatio-temporal overlap, which are regarded as the most complex aspects for spike sorting performance (Rey et al. <xref ref-type="bibr" rid="CR40">2015</xref>; Yger et al. <xref ref-type="bibr" rid="CR44">2018</xref>).</p>
    <p id="Par88">In MEArec, in order to generate extracellular templates, we used a well-established modeling framework for solving the single neuron dynamics (Carnevale and Hines <xref ref-type="bibr" rid="CR8">2006</xref>), and for calculating extracellular fields generated by transmembrane currents (Lindén et al. <xref ref-type="bibr" rid="CR28">2014</xref>; Hagen et al. <xref ref-type="bibr" rid="CR18">2015</xref>). These models have some assumptions that, if warranted, could be addressed with more sophisticated methods, such as finite element methods (FEM). In a recent work (Buccino et al. <xref ref-type="bibr" rid="CR6">2019</xref>), we used FEM simulations and showed that the extracellular probes, especially MEAs, affect the amplitude of the recorded signals. While this finding is definitely interesting for accurately modeling and understanding how the extracellular potential is generated and recorded, it is unclear how it would affect the spike sorting performance. Moreover, when modeling signals on MEAs, we used the method of images (Ness et al. <xref ref-type="bibr" rid="CR34">2015</xref>; Buccino et al. <xref ref-type="bibr" rid="CR6">2019</xref>), which models the probe as a infinite insulating plane and better describes the recorded potentials for large MEA probes (Buccino et al. <xref ref-type="bibr" rid="CR6">2019</xref>).</p>
    <p id="Par89">Secondly, during templates generation, the neuron models were randomly moved around and rotated with physiologically acceptable values (Buccino et al. <xref ref-type="bibr" rid="CR5">2018</xref>). In this phase, some dendritic trees might unnaturally cross the probes. We decided to not modify the cell models and allow for this behavior for sake of efficiency of the simulator. The modification of the dendritic trees for each extracellular spike generation would in fact be too computationally intense. However, since the templates generation phase is only run once for each probes, in the future we plan to both to include the probe effect in the simulations and to carefully modify the dendritic positions so that they do not cross the probes’ plane.</p>
    <p id="Par90">Another limitation of the proposed modeling approach is in the replication of bursting behavior. We implemented a simplified bursting modulation that attempts to capture the features recorded from extracellular electrodes by modifying the template amplitude and shape depending on the spiking history. However, more advanced aspects of waveform modulation caused by bursting, including morphology-dependent variation of spike shapes, cannot be modeled with the proposed approach, and their replication requires a full multi-compartment simulation (Hagen et al. <xref ref-type="bibr" rid="CR18">2015</xref>). Nevertheless, the suggested simplified model of bursting could be a valuable tool for testing the capability of spike sorters to deal with this phenomenon.</p>
    <p id="Par91">Finally, the current version of MEArec only supports cell models from the Neocortical Microcircuit Portal (Markram et al. <xref ref-type="bibr" rid="CR30">2015</xref>; Ramaswamy et al. <xref ref-type="bibr" rid="CR39">2015</xref>), which includes models from juvenile rat somatosensory cortex. The same cell model format is also being used to build a full hippocampus model (Migliore et al. <xref ref-type="bibr" rid="CR32">2018</xref>) and other brain regions, and therefore the integration of new models should be straightforward. However, we also provide a mechanism to use custom cell models. For example, cell models from the Allen Brain Institute database (Gouwens et al. <xref ref-type="bibr" rid="CR16">2018</xref>)<xref ref-type="fn" rid="Fn1">1</xref>, which contains models from mice and humans, can be easily used to simu late templates and recordings, as documented in this notebook: <ext-link ext-link-type="uri" xlink:href="https://github.com/alejoe91/MEArec/blob/master/notebooks/generate_recordings_with_allen_models.ipynb">https://github.com/alejoe91/MEArec/blob/master/notebooks/generate_recordings_with_allen_models.ipynb</ext-link>. Other cell models can be used with the same approach.</p>
    <p id="Par93">The use of fully-simulated recordings can raise questions on how well the simulations replicate real extracellular recordings. For example, recordings on freely moving animals present several motion artifacts that are complicated to model and incorporate into simulators. For these reasons, we believe that spike sorting validation cannot be solely limited to simulated recordings. In a recent effort for spike sorting validation, named SpikeForest (Magland et al. <xref ref-type="bibr" rid="CR29">2020</xref>), the authors have gathered more than 650 ground-truth recordings belonging to different categories: paired recordings, simulated synthetic recordings (including MEArec-generated datasets), hybrid recordings, and manually sorted data. We think that a systematic benchmark of spike sorting tools will benefit from this larger collection of diverse ground-truth recordings, and in this light, MEArec can provide high-quality simulated datasets to aid this purpose.</p>
    <p id="Par94">In conclusion, we introduced MEArec, which is a Python-based simulation framework for extracellular recordings. Thanks to its speed and controllability, we see MEArec to aid both the development and validation spike sorting algorithms and to help understanding the limitation of current methods, to improve their performance, and to generate new software tools for the hard and still partially unsolved spike sorting problem.</p>
  </sec>
  <sec id="Sec14">
    <title>Information Sharing Statement</title>
    <p id="Par95">The presented software package is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/alejoe91/MEArec">https://github.com/alejoe91/MEArec</ext-link> and <ext-link ext-link-type="uri" xlink:href="https://github.com/alejoe91/MEAutility">https://github.com/alejoe91/MEAutility</ext-link>(used for probe handling). The packages are also available on pypi: <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/MEArec/">https://pypi.org/project/MEArec/</ext-link> - <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/MEAutility/">https://pypi.org/project/MEAutility/</ext-link>. All the datsets generated for the paper and used to make figures are available on Zenodo at 10.5281/zenodo.3696926, where instruction to generate figures are also provided.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <sec id="Sec16">
      <title>Electronic supplementary material</title>
      <p>Below is the link to the electronic supplementary material.
<supplementary-material content-type="local-data" id="MOESM1"><media xlink:href="12021_2020_9467_MOESM1_ESM.pdf"><caption><p>(PDF 377 KB)</p></caption></media></supplementary-material></p>
    </sec>
  </sec>
</body>
<back>
  <app-group>
    <app id="App1">
      <sec id="Sec15">
        <title>Appendix: A - Command line interface (CLI)</title>
        <p id="Par96">MEArec implements a command line interface (CLI) to make templates and recordings generation easy to use and to allow for scripting. In order to discover the available commands, the user can use the --help option:
<graphic position="anchor" xlink:href="12021_2020_9467_Figi_HTML" id="MO17"/></p>
        <p id="Par97">Each available command can be inspected using the --help option:
<graphic position="anchor" xlink:href="12021_2020_9467_Figj_HTML" id="MO18"/></p>
        <p id="Par98">At installation, MEArec creates a configuration folder (.config/mearec) in which global settings are stored. The default paths to cell models folder, templates and recordings output folders and parameters can be set using the set- commands. By default, these files and folders are located in the configuration folder.
<graphic position="anchor" xlink:href="12021_2020_9467_Figk_HTML" id="MO19"/></p>
        <p id="Par99">A list of available probes can be found by running the available-probes command.</p>
      </sec>
    </app>
  </app-group>
  <fn-group>
    <fn id="Fn1">
      <label>1</label>
      <p id="Par92">
        <ext-link ext-link-type="uri" xlink:href="https://celltypes.brain-map.org/">https://celltypes.brain-map.org/</ext-link>
      </p>
    </fn>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <ack>
    <p>A.P.B. and G.T.E. are part of the Simula-UCSD-University of Oslo Research and PhD training (SUURPh) program, an international collaboration in computational biology and medicine funded by the Norwegian Ministry of Education and Research. We would also like to thank Samuel Garcia for the help in improving the performance of the simulator. Finally, we would like to thank Kristian Lensjø, Jennifer Hazen, and Mikkel Lepperød for their valuable feedback on the article.</p>
  </ack>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>Open access funding provided by University of Oslo (incl Oslo University Hospital).</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <mixed-citation publication-type="other">Allen, B. D., Moore-Kochlacs, C., Bernstein, J. G., Kinney, J., Scholvin, J., Seoane, L., Chronopoulos, C., Lamantia, C., Kodandaramaiah, S. B., Tegmark, M., &amp; et al. (2018). Automated in vivo patch clamp evaluation of extracellular multielectrode array spike recording capability Journal of neurophysiology.</mixed-citation>
    </ref>
    <ref id="CR2">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Berdondini</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Imfeld</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Maccione</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Tedesco</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Neukom</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Koudelka-Hep</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Martinoia</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Active pixel sensor array for high spatio-temporal resolution electrophysiological recordings from single cell to large scale neuronal networks</article-title>
        <source>Lab on a Chip</source>
        <year>2009</year>
        <volume>9</volume>
        <issue>18</issue>
        <fpage>2644</fpage>
        <lpage>2651</lpage>
        <?supplied-pmid 19704979?>
        <pub-id pub-id-type="pmid">19704979</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <mixed-citation publication-type="other">Buccino, A. P., Hagen, E., Einevoll, G. T., Häfliger, P. D., &amp; Cauwenbergh, G. (2018). Independent component analysis for fully automated multi-electrode array spike sorting.. In <italic>2018 40th Annual International Conference of the IEEE Engineering in Medicine and Biology Society (EMBC), pages 2627–2630. IEEE,</italic>.</mixed-citation>
    </ref>
    <ref id="CR4">
      <mixed-citation publication-type="other">Buccino, A. P., Hurwitz, C. L., Magland, J., Garcia, S., Siegle, J. H., Hurwitz, R., &amp; Spikeinterface, M. H. H. (2019). A unified framework for spike sorting. Biorxiv page 796599.</mixed-citation>
    </ref>
    <ref id="CR5">
      <mixed-citation publication-type="other">Buccino, A. P., Kordovan, M., Ness, T. V., Merkt, B., Häfliger, P. D., Fyhn, M., Cauwenberghs, G., Rotter, S., &amp; Einevoll, G. T. (2018). Combining biophysical modeling and deep learning for multi-electrode array neuron localization and classification. Journal of neurophysiology.</mixed-citation>
    </ref>
    <ref id="CR6">
      <mixed-citation publication-type="other">Buccino, A. P., Kuchta, M., Jæger, K. H., Ness, T. V., Berthet, P., Mardal, K. A., Cauwenberghs, G., &amp; Tveito, A. (2019). How does the presence of neural probes affect extracellular potentials? Journal of neural engineering.</mixed-citation>
    </ref>
    <ref id="CR7">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Camuñas-Mesa</surname>
            <given-names>LA</given-names>
          </name>
          <name>
            <surname>Quiroga</surname>
            <given-names>RQ</given-names>
          </name>
        </person-group>
        <article-title>A detailed and fast model of extracellular recordings</article-title>
        <source>Neural Computation</source>
        <year>2013</year>
        <volume>25</volume>
        <issue>5</issue>
        <fpage>1191</fpage>
        <lpage>1212</lpage>
        <?supplied-pmid 23470125?>
        <pub-id pub-id-type="pmid">23470125</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <mixed-citation publication-type="other">Carnevale, N. T., &amp; Hines, M. L. (2006). The NEURON book Cambridge University Press.</mixed-citation>
    </ref>
    <ref id="CR9">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chung</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Magland</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Barnett</surname>
            <given-names>AH</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A fully automated approach to spike sorting</article-title>
        <source>Neuron</source>
        <year>2017</year>
        <volume>95</volume>
        <issue>6</issue>
        <fpage>1381</fpage>
        <lpage>1394</lpage>
        <?supplied-pmid 28910621?>
        <pub-id pub-id-type="pmid">28910621</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Diesmann</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Gewaltig</surname>
            <given-names>M-O</given-names>
          </name>
        </person-group>
        <article-title>Nest: An environment for neural systems simulations. Forschung und wisschenschaftliches Rechnen</article-title>
        <source>Beitrage Zum Heinz-Billing-Preis̈,</source>
        <year>2001</year>
        <volume>58</volume>
        <fpage>43</fpage>
        <lpage>70</lpage>
      </element-citation>
    </ref>
    <ref id="CR11">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Diggelmann</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Fiscella</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Hierlemann</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Franke</surname>
            <given-names>F</given-names>
          </name>
        </person-group>
        <article-title>Automatic spike sorting for high-density microelectrode arrays</article-title>
        <source>Journal of Neurophysiology</source>
        <year>2018</year>
        <volume>120</volume>
        <issue>6</issue>
        <fpage>3155</fpage>
        <lpage>3171</lpage>
        <?supplied-pmid 30207864?>
        <pub-id pub-id-type="pmid">30207864</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Einevoll</surname>
            <given-names>GT</given-names>
          </name>
          <name>
            <surname>Franke</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Hagen</surname>
            <given-names>E</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Towards reliable spike-train recordings from thousands of neurons with multielectrodes</article-title>
        <source>Current Opinion in Neurobiology</source>
        <year>2012</year>
        <volume>22</volume>
        <issue>1</issue>
        <fpage>11</fpage>
        <lpage>17</lpage>
        <?supplied-pmid 22023727?>
        <pub-id pub-id-type="pmid">22023727</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <mixed-citation publication-type="other">Franke, F., Natora, M., Meier, P., Hagen, E., Pettersen, K. H., Linden, H., Einevoll, G. T., &amp; Obermayer, K. (2010). An automated online positioning system and simulation environment for multi-electrodes in extracellular recordings.. In <italic>An automated online positioning Annual International Conference of the IEEE Engineering in Medicine and Biology, pages 593–597. IEEE</italic>.</mixed-citation>
    </ref>
    <ref id="CR14">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Frey</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Egert</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Heer</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Hafizovic</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hierlemann</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>Microelectronic system for high-resolution mapping of extracellular electric fields applied to brain slices.</article-title>
        <source>Biosensors and Bioelectronics</source>
        <year>2009</year>
        <volume>24</volume>
        <issue>7</issue>
        <fpage>2191</fpage>
        <lpage>2198</lpage>
        <?supplied-pmid 19157842?>
        <pub-id pub-id-type="pmid">19157842</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Garcia</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Guarino</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Jaillet</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Jennings</surname>
            <given-names>TR</given-names>
          </name>
          <name>
            <surname>Pröpper</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rautenberg</surname>
            <given-names>PL</given-names>
          </name>
          <name>
            <surname>Rodgers</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Sobolev</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Wachtler</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Yger</surname>
            <given-names>P</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Neo: an object model for handling electrophysiology data in multiple formats</article-title>
        <source>Frontiers in Neuroinformatics</source>
        <year>2014</year>
        <volume>8</volume>
        <fpage>10</fpage>
        <?supplied-pmid 24600386?>
        <pub-id pub-id-type="pmid">24600386</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gouwens</surname>
            <given-names>NW</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Systematic generation of biophysically detailed models for diverse cortical neuron types</article-title>
        <source>Nature Communications</source>
        <year>2018</year>
        <volume>9</volume>
        <issue>1</issue>
        <fpage>710</fpage>
        <?supplied-pmid 29459718?>
        <pub-id pub-id-type="pmid">29459718</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <mixed-citation publication-type="other">Hagen, E., Næss, S., Ness, T. V., &amp; Einevoll, G. T. (2018). Multimodal modeling of neural network activity: Computing lfp, ecog, eeg, and meg signals with lfpy 2.0, (Vol. 92.</mixed-citation>
    </ref>
    <ref id="CR18">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hagen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ness</surname>
            <given-names>TV</given-names>
          </name>
          <name>
            <surname>Khosrowshahi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sørensen</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Fyhn</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Hafting</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Franke</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Einevoll</surname>
            <given-names>GT</given-names>
          </name>
        </person-group>
        <article-title>Visapy: a python tool for biophysics-based generation of virtual spiking activity for evaluation of spike-sorting algorithms</article-title>
        <source>Journal of Neuroscience Methods</source>
        <year>2015</year>
        <volume>245</volume>
        <fpage>182</fpage>
        <lpage>204</lpage>
        <?supplied-pmid 25662445?>
        <pub-id pub-id-type="pmid">25662445</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Harris</surname>
            <given-names>KD</given-names>
          </name>
          <name>
            <surname>Henze</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Csicsvari</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Hirase</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Buzsaki</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Accuracy of tetrode spike separation as determined by simultaneous intracellular and extracellular measurements.</article-title>
        <source>Journal of Neurophysiology</source>
        <year>2000</year>
        <volume>84</volume>
        <issue>1</issue>
        <fpage>401</fpage>
        <lpage>414</lpage>
        <?supplied-pmid 10899214?>
        <pub-id pub-id-type="pmid">10899214</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hay</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Hill</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Schürmann</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Markram</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Segev</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Models of neocortical layer 5b pyramidal cells capturing a wide range of dendritic and perisomatic active properties.</article-title>
        <source>PLos Computational Biology</source>
        <year>2011</year>
        <volume>7</volume>
        <issue>7</issue>
        <fpage>e1002107</fpage>
        <?supplied-pmid 21829333?>
        <pub-id pub-id-type="pmid">21829333</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Henze</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Borhegyi</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Csicsvari</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Mamiya</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Harris</surname>
            <given-names>KD</given-names>
          </name>
          <name>
            <surname>Buzsaki</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Intracellular features predicted by extracellular recordings in the hippocampus in vivo.</article-title>
        <source>Journal of Neurophysiology</source>
        <year>2000</year>
        <volume>84</volume>
        <issue>1</issue>
        <fpage>390</fpage>
        <lpage>400</lpage>
        <?supplied-pmid 10899213?>
        <pub-id pub-id-type="pmid">10899213</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hilgen</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Sorbaro</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Pirmoradian</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Muthmann</surname>
            <given-names>J-O</given-names>
          </name>
          <name>
            <surname>Kepiro</surname>
            <given-names>IE</given-names>
          </name>
          <name>
            <surname>Ullo</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ramirez</surname>
            <given-names>CJ</given-names>
          </name>
          <name>
            <surname>Encinas</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Maccione</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Berdondini</surname>
            <given-names>L</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Unsupervised spike sorting for large-scale, high-density multielectrode arrays</article-title>
        <source>Cell Reports</source>
        <year>2017</year>
        <volume>18</volume>
        <issue>10</issue>
        <fpage>2521</fpage>
        <lpage>2532</lpage>
        <?supplied-pmid 28273464?>
        <pub-id pub-id-type="pmid">28273464</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jäckel</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Frey</surname>
            <given-names>U</given-names>
          </name>
          <name>
            <surname>Fiscella</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Applicability of independent component analysis on high-density microelectrode array recordings</article-title>
        <source>Journal of Neurophysiology</source>
        <year>2012</year>
        <volume>108</volume>
        <issue>1</issue>
        <fpage>334</fpage>
        <lpage>348</lpage>
        <?supplied-pmid 22490552?>
        <pub-id pub-id-type="pmid">22490552</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <mixed-citation publication-type="other">Jun, J. J., Mitelut, C., Lai, C., Gratiy, S., Anastassiou, C., &amp; Harris, T. D. (2017). Real-time spike sorting platform for high-density extracellular probes with ground-truth validation and drift correction. bioRxiv page 101030.</mixed-citation>
    </ref>
    <ref id="CR25">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Jun</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Steinmetz</surname>
            <given-names>NA</given-names>
          </name>
          <name>
            <surname>Siegle</surname>
            <given-names>JH</given-names>
          </name>
          <name>
            <surname>Denman</surname>
            <given-names>DJ</given-names>
          </name>
          <name>
            <surname>Bauza</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Barbarits</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>AK</given-names>
          </name>
          <name>
            <surname>Anastassiou</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Andrei</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Aydın</surname>
            <given-names>Ċ</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Fully integrated silicon probes for high-density recording of neural activity</article-title>
        <source>Nature</source>
        <year>2017</year>
        <volume>551</volume>
        <issue>7679</issue>
        <fpage>232</fpage>
        <?supplied-pmid 29120427?>
        <pub-id pub-id-type="pmid">29120427</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <mixed-citation publication-type="other">Lee, J. H., Carlson, D. E., Razaghi, H. S., Yao, W., Goetz, G. A., Hagen, E., Batty, E., Chichilnisky, E., Einevoll, G. T., &amp; Paninski, L. (2017). Yass: yet another spike sorter. In <italic>Advances in Neural Information Processing Systems, pp 4002–4012</italic>.</mixed-citation>
    </ref>
    <ref id="CR27">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lefebvre</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Yger</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Marre</surname>
            <given-names>O</given-names>
          </name>
        </person-group>
        <article-title>Recent progress in multi-electrode spike sorting methods</article-title>
        <source>Journal of Physiology-Paris</source>
        <year>2016</year>
        <volume>110</volume>
        <issue>4</issue>
        <fpage>327</fpage>
        <lpage>335</lpage>
      </element-citation>
    </ref>
    <ref id="CR28">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lindén</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Hagen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Leski</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>LFPY: a tool for biophysical simulation of extracellular potentials generated by detailed model neurons</article-title>
        <source>Frontiers in Neuroinformatics</source>
        <year>2014</year>
        <volume>7</volume>
        <fpage>41</fpage>
        <?supplied-pmid 24474916?>
        <pub-id pub-id-type="pmid">24474916</pub-id>
      </element-citation>
    </ref>
    <ref id="CR29">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Magland</surname>
            <given-names>JF</given-names>
          </name>
          <name>
            <surname>Jun</surname>
            <given-names>JJ</given-names>
          </name>
          <name>
            <surname>Lovero</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Morley</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Hurwitz</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Buccino</surname>
            <given-names>AP</given-names>
          </name>
          <name>
            <surname>Garcia</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Barnett</surname>
            <given-names>AH</given-names>
          </name>
        </person-group>
        <article-title>Spikeforest: reproducible web-facing ground-truth validation of automated neural spike sorters</article-title>
        <source>eLife</source>
        <year>2020</year>
        <volume>9</volume>
        <fpage>e55167</fpage>
        <?supplied-pmid 32427564?>
        <pub-id pub-id-type="pmid">32427564</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Markram</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Muller</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Ramaswamy</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Reconstruction and simulation of neocortical microcircuitry</article-title>
        <source>Cell</source>
        <year>2015</year>
        <volume>163</volume>
        <issue>2</issue>
        <fpage>456</fpage>
        <lpage>492</lpage>
        <?supplied-pmid 26451489?>
        <pub-id pub-id-type="pmid">26451489</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <mixed-citation publication-type="other">Marques-Smith, A., Neto, J. P., Lopes, G., Nogueira, J., Calcaterra, L., Frazão, J., Kim, D., Phillips, M. G., Dimitriadis, G., &amp; Kampff, A. (2018). Recording from the same neuron with high-density cmos probes and patch-clamp: a ground-truth dataset and an experiment in collaboration. bioRxiv page 370080.</mixed-citation>
    </ref>
    <ref id="CR32">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Migliore</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Lupascu</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Bologna</surname>
            <given-names>LL</given-names>
          </name>
          <name>
            <surname>Romani</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Courcol</surname>
            <given-names>J-D</given-names>
          </name>
          <name>
            <surname>Antonel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Van Geit</surname>
            <given-names>WA</given-names>
          </name>
          <name>
            <surname>Thomson</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Mercer</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lange</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The physiological variability of channel density in hippocampal ca1 pyramidal cells and interneurons explored using a unified data-driven modeling workflow.</article-title>
        <source>PLos Computational Biology</source>
        <year>2018</year>
        <volume>14</volume>
        <issue>9</issue>
        <fpage>e1006423</fpage>
        <?supplied-pmid 30222740?>
        <pub-id pub-id-type="pmid">30222740</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Mondragón-González</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Burguière</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Bio-inspired benchmark generator for extracellular multi-unit recordings</article-title>
        <source>Scientific Reports</source>
        <year>2017</year>
        <volume>7</volume>
        <fpage>43253</fpage>
        <?supplied-pmid 28233819?>
        <pub-id pub-id-type="pmid">28233819</pub-id>
      </element-citation>
    </ref>
    <ref id="CR34">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ness</surname>
            <given-names>TV</given-names>
          </name>
          <name>
            <surname>Chintaluri</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Potworowski</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Łȩski</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gła̧bska</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Wójcik</surname>
            <given-names>DK</given-names>
          </name>
          <name>
            <surname>Einevoll</surname>
            <given-names>GT</given-names>
          </name>
        </person-group>
        <article-title>Modelling and analysis of electrical potentials recorded in microelectrode arrays (meas)</article-title>
        <source>Neuroinformatics</source>
        <year>2015</year>
        <volume>13</volume>
        <issue>4</issue>
        <fpage>403</fpage>
        <lpage>426</lpage>
        <?supplied-pmid 25822810?>
        <pub-id pub-id-type="pmid">25822810</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Neto</surname>
            <given-names>JP</given-names>
          </name>
          <name>
            <surname>Lopes</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Frazão</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Validating silicon polytrodes with paired juxtacellular recordings: method and dataset</article-title>
        <source>Journal of Neurophysiology</source>
        <year>2016</year>
        <volume>116</volume>
        <issue>2</issue>
        <fpage>892</fpage>
        <lpage>903</lpage>
        <?supplied-pmid 27306671?>
        <pub-id pub-id-type="pmid">27306671</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <mixed-citation publication-type="other">Pachitariu, M., Steinmetz, N. A., &amp; Colonell, J. (2019). Kilosort2, <ext-link ext-link-type="uri" xlink:href="https://github.com/MouseLand/Kilosort2">https://github.com/MouseLand/Kilosort2</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR37">
      <mixed-citation publication-type="other">Pachitariu, M., Steinmetz, N. A., Kadir, S. N., &amp; et al. (2016). Fast and accurate spike sorting of high-channel count probes with kilosort. In <italic>Advances in Neural Information Processing Systems, pp 4448–4456</italic>.</mixed-citation>
    </ref>
    <ref id="CR38">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quiroga</surname>
            <given-names>RQ</given-names>
          </name>
          <name>
            <surname>Nadasdy</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Ben-Shaul</surname>
            <given-names>Y</given-names>
          </name>
        </person-group>
        <article-title>Unsupervised spike detection and sorting with wavelets and superparamagnetic clustering</article-title>
        <source>Neural Computation</source>
        <year>2004</year>
        <volume>16</volume>
        <issue>8</issue>
        <fpage>1661</fpage>
        <lpage>1687</lpage>
        <?supplied-pmid 15228749?>
        <pub-id pub-id-type="pmid">15228749</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ramaswamy</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Courcol</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Abdellah</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>The neocortical microcircuit collaboration portal: a resource for rat somatosensory cortex</article-title>
        <source>Front Neural Circuits</source>
        <year>2015</year>
        <volume>44</volume>
        <fpage>9</fpage>
      </element-citation>
    </ref>
    <ref id="CR40">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rey</surname>
            <given-names>HG</given-names>
          </name>
          <name>
            <surname>Pedreira</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Quiroga</surname>
            <given-names>RQ</given-names>
          </name>
        </person-group>
        <article-title>Past, present and future of spike sorting techniques</article-title>
        <source>Brain Research Bulletin</source>
        <year>2015</year>
        <volume>119</volume>
        <fpage>106</fpage>
        <lpage>117</lpage>
        <?supplied-pmid 25931392?>
        <pub-id pub-id-type="pmid">25931392</pub-id>
      </element-citation>
    </ref>
    <ref id="CR41">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rossant</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Kadir</surname>
            <given-names>SN</given-names>
          </name>
          <name>
            <surname>Goodman</surname>
            <given-names>DF</given-names>
          </name>
          <name>
            <surname>Schulman</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Hunter</surname>
            <given-names>ML</given-names>
          </name>
          <name>
            <surname>Saleem</surname>
            <given-names>AB</given-names>
          </name>
          <name>
            <surname>Grosmark</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Belluscio</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Denfield</surname>
            <given-names>GH</given-names>
          </name>
          <name>
            <surname>Ecker</surname>
            <given-names>AS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Spike sorting for large, dense electrode arrays</article-title>
        <source>Nature Neuroscience</source>
        <year>2016</year>
        <volume>19</volume>
        <issue>4</issue>
        <fpage>634</fpage>
        <?supplied-pmid 26974951?>
        <pub-id pub-id-type="pmid">26974951</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Steinmetz</surname>
            <given-names>NA</given-names>
          </name>
          <name>
            <surname>Koch</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Harris</surname>
            <given-names>KD</given-names>
          </name>
          <name>
            <surname>Carandini</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Challenges and opportunities for large-scale electrophysiology with neuropixels probes</article-title>
        <source>Current Opinion in Neurobiology</source>
        <year>2018</year>
        <volume>50</volume>
        <fpage>92</fpage>
        <lpage>100</lpage>
        <?supplied-pmid 29444488?>
        <pub-id pub-id-type="pmid">29444488</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <mixed-citation publication-type="other">Wouters, J., Kloosterman, F., &amp; Bertrand, A. (2019). Shybrid: A graphical tool for generating hybrid ground-truth spiking data for evaluating spike sorting performance. bioRxiv page 734061.</mixed-citation>
    </ref>
    <ref id="CR44">
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yger</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Spampinato</surname>
            <given-names>GL</given-names>
          </name>
          <name>
            <surname>Esposito</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Lefebvre</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Deny</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gardella</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Stimberg</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Jetter</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Zeck</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Picaud</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A spike sorting toolbox for up to thousands of electrodes validated with ground truth recordings in vitro and in vivo</article-title>
        <source>Elife</source>
        <year>2018</year>
        <volume>7</volume>
        <fpage>e34518</fpage>
        <?supplied-pmid 29557782?>
        <pub-id pub-id-type="pmid">29557782</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
