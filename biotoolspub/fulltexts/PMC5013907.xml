<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d1 20130915//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 39.96?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-id journal-id-type="hwp">bioinfo</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5013907</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btw298</article-id>
    <article-id pub-id-type="publisher-id">btw298</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Notes</subject>
        <subj-group subj-group-type="heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>SA-SSR: a suffix array-based algorithm for exhaustive and efficient SSR discovery in large genetic sequences</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Pickett</surname>
          <given-names>B. D.</given-names>
        </name>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Karlinsey</surname>
          <given-names>S. M.</given-names>
        </name>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Penrod</surname>
          <given-names>C. E.</given-names>
        </name>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Cormier</surname>
          <given-names>M. J.</given-names>
        </name>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ebbert</surname>
          <given-names>M. T. W.</given-names>
        </name>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Shiozawa</surname>
          <given-names>D. K.</given-names>
        </name>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Whipple</surname>
          <given-names>C. J.</given-names>
        </name>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ridge</surname>
          <given-names>P. G.</given-names>
        </name>
        <xref ref-type="corresp" rid="btw298-cor1">*</xref>
      </contrib>
      <aff id="btw298-aff1">Department of Biology, Brigham Young University, Provo, UT 84602, USA</aff>
    </contrib-group>
    <author-notes>
      <corresp id="btw298-cor1">*To whom correspondence should be addressed.</corresp>
      <fn id="btw298-FM1">
        <p>Associate Editor: John Hancock</p>
      </fn>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>9</month>
      <year>2016</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>11</day>
      <month>5</month>
      <year>2016</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>11</day>
      <month>5</month>
      <year>2016</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>32</volume>
    <issue>17</issue>
    <fpage>2707</fpage>
    <lpage>2709</lpage>
    <history>
      <date date-type="received">
        <day>10</day>
        <month>2</month>
        <year>2016</year>
      </date>
      <date date-type="rev-recd">
        <day>21</day>
        <month>4</month>
        <year>2016</year>
      </date>
      <date date-type="accepted">
        <day>04</day>
        <month>5</month>
        <year>2016</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author 2016. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2016</copyright-year>
      <license xlink:href="http://creativecommons.org/licenses/by-nc/4.0/" license-type="creative-commons">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <abstract>
      <p><bold>Summary:</bold> Simple Sequence Repeats (SSRs) are used to address a variety of research questions in a variety of fields (e.g. population genetics, phylogenetics, forensics, etc.), due to their high mutability within and between species. Here, we present an innovative algorithm, SA-SSR, based on suffix and longest common prefix arrays for efficiently detecting SSRs in large sets of sequences. Existing SSR detection applications are hampered by one or more limitations (i.e. speed, accuracy, ease-of-use, etc.). Our algorithm addresses these challenges while being the most comprehensive and correct SSR detection software available. SA-SSR is 100% accurate and detected &gt;1000 more SSRs than the second best algorithm, while offering greater control to the user than any existing software.</p>
      <p><bold>Availability and implementation:</bold> SA-SSR is freely available at <ext-link ext-link-type="uri" xlink:href="http://github.com/ridgelab/SA-SSR">http://github.com/ridgelab/SA-SSR</ext-link></p>
      <p>
        <bold>Contact:</bold>
        <email>perry.ridge@byu.edu</email>
      </p>
      <p><bold>Supplementary information:</bold><ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary data</ext-link> are available at <italic>Bioinformatics</italic> online.</p>
    </abstract>
    <counts>
      <page-count count="3"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Simple Sequence Repeats (SSRs), microsatellites, or short tandem repeats (STRs), are tandem repeats of short (often 2–5 bp) nucleotide strings (<xref rid="btw298-B4" ref-type="bibr">Madesis <italic>et al.</italic>, 2013</xref>). There are generally 10–100 such repeats at each SSR locus resulting in a DNA segment that is amenable to rapid molecular characterization. Given their repetitive nature, the lengths of SSR loci tend to increase or decrease due to polymerase slippage during DNA replication (<xref rid="btw298-B7" ref-type="bibr">Schlotterer and Tautz, 1992</xref>). As a consequence, SSR loci have high mutation rates and frequently generate multiple polymorphic alleles. SSR loci are common in both nuclear and organellar genomes, and when flanked by unique sequence, PCR primers can be readily designed to amplify simple sequence length polymorphisms. SSRs have proven highly useful for a variety of molecular genetic, population genetic and phylogenetic applications because it is simple to genotype them using PCR, and because they are highly polymorphic.</p>
    <p>While SSRs have been extensively characterized in many model species, the expense and effort traditionally required to develop SSRs has limited their use in non-model species. Fortunately, next-generation sequencing has enabled researchers to quickly produce large quantities of genomic and/or transcriptomic data for nearly any species. While a high quality genome is still difficult to assemble, there is usually adequate sequence information to identify thousands of unique SSR loci with minimal sequencing. Thus, researchers working in non-model systems need user friendly and customizable bioinformatics algorithms to identify SSR loci.</p>
    <p>A complete, accurate, characterization of SSRs in non-model systems increases the likelihood researchers are able to identify SSRs where flanking genotyping primers can be designed. SSR differences can be used to differentiate between related species or provide insights into specific phenotypes/adaptations. Finally, since the majority of researchers do not have formal computational training, a straightforward, intuitive application is likely to enable traditional bench/field scientists to use SSRs in their research.</p>
    <p>Many tools exist to find SSRs with varying degrees of utility, but few tools have both a useful command line interface for scripting and meaningful, parseable output. Identifying SSRs in a sequence is challenging because the search is prohibitive in time and memory requirements. Most existing tools use either an exhaustive, combinatorial search approach or a heuristic approach (<xref rid="btw298-B3" ref-type="bibr">Lim <italic>et al.</italic>, 2013</xref>). Exhaustive searches have time complexity that grows exponentially, while heuristic approaches trade comprehensiveness for run time. We developed an algorithm that is both efficient and complete.</p>
    <p>Conceptually, finding SSRs in a nucleotide sequence is relatively straightforward, but the size of current datasets makes it a substantial challenge. SSR detection in sequence data is a substring operation—a large class of problems common in computer science. Many algorithms and data structures have been developed to reduce the time and space requirements for string operations. The suffix tree boasts linear time and space requirements for generating its representation of the string and can be used to perform many important substring operations in O(<italic>n</italic> log <italic>n</italic>) time. After Weiner discovered suffix trees (<xref rid="btw298-B9" ref-type="bibr">Weiner, 1973</xref>), McCreight (<xref rid="btw298-B6" ref-type="bibr">McCreight, 1976</xref>) and Ukkonen (<xref rid="btw298-B8" ref-type="bibr">Ukkonen, 1995</xref>) each simplified it, paving the way for the development of the suffix array (<xref rid="btw298-B1" ref-type="bibr">Abouelhoda <italic>et al.</italic>, 2004</xref>; <xref rid="btw298-B2" ref-type="bibr">Kurtz, 1999</xref>; <xref rid="btw298-B5" ref-type="bibr">Manber and Myers, 1993</xref>). Suffix arrays have the same properties as suffix trees, but are as many as five times more memory efficient (<xref rid="btw298-B2" ref-type="bibr">Kurtz, 1999</xref>; <xref rid="btw298-B5" ref-type="bibr">Manber and Myers, 1993</xref>).</p>
  </sec>
  <sec>
    <title>2 Algorithm</title>
    <p>A suffix array is an array of character positions representing a list of all possible suffixes of a string, ordered lexicographically, and longest common prefix arrays are arrays of the lengths of the longest common prefix of each adjacent suffix in the suffix array. Using suffix and longest common prefix arrays, we designed and implemented a novel algorithm for finding SSRs in a nucleotide sequence in linear (O(<italic>n</italic>)) time and space. The algorithm makes no distinction between microsatellites or minisatellites—it can find tandem repeats of any length or period size.</p>
    <p>SSRs are identified by calculating three different parameters, <italic>k</italic>, <italic>r</italic> and <italic>p</italic> from the suffix and longest common prefix arrays, where <italic>k</italic> equals the length of an SSR repeating unit or period size, <italic>r</italic> equals the number of times it repeats after the original occurrence, and <italic>p</italic> equals the position of the first nucleotide of the first period of the SSR (see <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Texts 1 and 2</ext-link>, and <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Figure S1</ext-link> for a more detailed explanation). SSRs are identified by calculating <italic>k</italic>, <italic>p</italic> and <italic>r</italic> from the suffix and longest common prefix arrays (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Fig. S1</ext-link>C). Let <italic>i</italic> equal the index of any entry in the suffix array (except the first position), where SA and LCPA are the suffix and longest common prefix arrays, respectively:
<disp-formula id="E1"><label>(1)</label><mml:math id="EQ1"><mml:mrow><mml:msub><mml:mi>k</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">|</mml:mo><mml:mrow><mml:mi>S</mml:mi><mml:msub><mml:mi>A</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:mi>S</mml:mi><mml:msub><mml:mi>A</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo stretchy="true">|</mml:mo></mml:mrow></mml:mrow></mml:math></disp-formula>
<disp-formula id="E2"><label>(2)</label><mml:math id="EQ2"><mml:mrow><mml:msub><mml:mi>r</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="true">⌊</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mi>L</mml:mi><mml:mi>C</mml:mi><mml:mi>P</mml:mi><mml:msub><mml:mi>A</mml:mi><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mi>k</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:mrow><mml:mo stretchy="true">⌋</mml:mo></mml:mrow></mml:mrow></mml:math></disp-formula>
<disp-formula id="E3"><label>(3)</label><mml:math id="EQ3"><mml:mrow><mml:msub><mml:mi>p</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>M</mml:mi><mml:mi>I</mml:mi><mml:mi>N</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>S</mml:mi><mml:msub><mml:mi>A</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mi>S</mml:mi><mml:msub><mml:mi>A</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></disp-formula>
</p>
    <p>If <italic>r</italic> &gt; 0, an SSR of length <italic>k</italic> * (<italic>r</italic> + 1) exists at position <italic>p</italic> in the original sequence, otherwise if <italic>r</italic> = 0 there is no SSR at position <italic>p</italic>. The base unit (e.g. AG in the SSR AGAGAG) of the SSR starts at position <italic>p</italic> and ends at position <italic>p</italic> + (<italic>k</italic> − 1). Thus, by comparing each adjacent element in the suffix array we can find SSRs in a sequence.</p>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>Our algorithm requires at most 9<italic>n</italic> bytes of memory, where <italic>n</italic> is the length of the entire query sequence. For each nucleotide in the sequence, we generously assume one byte in the original sequence (using 8-bit characters), four bytes in the suffix array (using 32-bit integers) and four bytes in the longest common prefix array (using 32-bit integers). The time complexity for building a suffix array and its longest common prefix array is O(<italic>n</italic>). Our algorithm then requires 3 * (<italic>n</italic> − 1) constant time computations to find SSRs, thus keeping the total time and space complexities at O(<italic>n</italic>).</p>
    <p>We evaluated the performance of our algorithm compared to seven existing applications (see <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Table S1</ext-link> for a list of algorithms) on the <italic>Arabidopsis thaliana (chromosome 4), Caenorhabditis elegans, Drosophila melanogaster, Escherichia coli</italic>
<italic>and Zaire ebolavirus</italic> genomes (GenBank Accessions: NC_003075.7, GCA_001483305.1, GCA_001014345.1, GCA_001432175.2 and NC_002549.1, respectively), comprised of 13 121 sequences totaling 248 846 830 nucleotides. Sequences ranged in length from 516 to 18 590 000 nucleotides with a median size of 4 662 (<ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Figures S2–S6</ext-link> show a distribution of sequence lengths). Dozens of applications exist for SSR detection. We selected algorithms for comparison that: (i) were capable of processing the <italic>Arabidopsis</italic>
<italic>thaliana</italic> chromosome (the longest of the sequences), (ii) had a non-interactive, Linux, command-line interface, (iii) were freely available for immediate download and (iv) had 10 or more citations per year or were published in the last three years. Several additional algorithms met our requirements, but used antiquated shared libraries, or had compile/run-time errors. All comparisons were run on a 6-core Intel Haswell Westmere (2.67 GHz) processor with 24 GB of memory (1066 MHz DDR3).</p>
    <p>SA-SSR, like other algorithms, calls any detected sequence repeat an SSR. Reported numbers and accuracy reflect the assumption that all sequence repeats are SSRs. SA-SSR maximized the number of SSRs identified, while maintaining low memory requirements and runtime, and providing higher flexibility to the user to control desired output (results summarized in <xref ref-type="table" rid="btw298-T1">Table 1</xref> with more detailed results in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Table S2</ext-link>). We counted the total number of SSRs identified by SA-SSR and each of the algorithms with period sizes one to seven and minimum total length of 16 nucleotides (period sizes and lengths likely to be of most interest in common applications). Next, we determined the accuracy of each of the tested algorithms, including SA-SSR, by writing a script to scan the entire sequence to verify whether or not a reported SSR was present. Most of the tested algorithms, including SA-SSR, were 100% accurate. However, compared to other algorithms, SA-SSR, found the highest number of correct (38 088 SSRs) and unique SSRs (on average &gt;18 000 SSRs more than the other algorithms). MREPS, SSR-Pipeline and TRF only missed 1340, 3047 and 7423 correct SSRs detected by SA-SSR, respectively. However, TRF was only 23% accurate. Results of algorithm comparisons and software features are summarized in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Tables S2–S31</ext-link>.
<table-wrap id="btw298-T1" orientation="portrait" position="float"><label>Table 1.</label><caption><p>Summary of results from comparisons of SA-SSR with other SSR detection algorithms</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1"/><th align="center" colspan="3" rowspan="1">Comparison with SA-SSR<hr/></th></tr><tr><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1">CPU time<xref ref-type="table-fn" rid="btw298-TF2"><sup>a</sup></xref> (mm:ss)</th><th rowspan="1" colspan="1">Real time<xref ref-type="table-fn" rid="btw298-TF2"><sup>a</sup></xref> (mm:ss)</th><th rowspan="1" colspan="1">SSRs reported</th><th rowspan="1" colspan="1">SSRs In range<xref ref-type="table-fn" rid="btw298-TF3"><sup>b</sup></xref></th><th rowspan="1" colspan="1">Number correct<xref ref-type="table-fn" rid="btw298-TF4"><sup>c</sup></xref></th><th rowspan="1" colspan="1">Percent correct</th><th rowspan="1" colspan="1">SSRs unique to software<xref ref-type="table-fn" rid="btw298-TF5"><sup>d</sup></xref></th><th rowspan="1" colspan="1">SSRs unique to SA-SSR</th><th rowspan="1" colspan="1">Shared SSRs</th></tr></thead><tbody><tr><td rowspan="1" colspan="1">GMATo</td><td rowspan="1" colspan="1">329:18</td><td rowspan="1" colspan="1">329:18</td><td rowspan="1" colspan="1">72 713 858</td><td rowspan="1" colspan="1">15 284</td><td rowspan="1" colspan="1">6617</td><td rowspan="1" colspan="1">43.29</td><td rowspan="1" colspan="1">20</td><td rowspan="1" colspan="1">34 237</td><td rowspan="1" colspan="1">3851</td></tr><tr><td rowspan="1" colspan="1">MREPS</td><td rowspan="1" colspan="1">393:02</td><td rowspan="1" colspan="1">393:02</td><td rowspan="1" colspan="1">75 552</td><td rowspan="1" colspan="1">37 076</td><td rowspan="1" colspan="1">37 076</td><td rowspan="1" colspan="1">100</td><td rowspan="1" colspan="1">71</td><td rowspan="1" colspan="1">1340</td><td rowspan="1" colspan="1">36 748</td></tr><tr><td rowspan="1" colspan="1">PRoGeRF</td><td rowspan="1" colspan="1">3194:18</td><td rowspan="1" colspan="1">3194:18</td><td rowspan="1" colspan="1">5 457 129</td><td rowspan="1" colspan="1">2278</td><td rowspan="1" colspan="1">2268</td><td rowspan="1" colspan="1">99.56</td><td rowspan="1" colspan="1">2</td><td rowspan="1" colspan="1">35 864</td><td rowspan="1" colspan="1">2224</td></tr><tr><td rowspan="1" colspan="1">QDD</td><td rowspan="1" colspan="1">24:17</td><td rowspan="1" colspan="1">24:17</td><td rowspan="1" colspan="1">53 248</td><td rowspan="1" colspan="1">17 418</td><td rowspan="1" colspan="1">17 418</td><td rowspan="1" colspan="1">100</td><td rowspan="1" colspan="1">10</td><td rowspan="1" colspan="1">20 759</td><td rowspan="1" colspan="1">17 329</td></tr><tr><td rowspan="1" colspan="1">SA-SSR</td><td rowspan="1" colspan="1">28 820:12</td><td rowspan="1" colspan="1">2416:32</td><td rowspan="1" colspan="1">38 088</td><td rowspan="1" colspan="1">38 088</td><td rowspan="1" colspan="1">38 088</td><td rowspan="1" colspan="1">100</td><td rowspan="1" colspan="1">NA</td><td rowspan="1" colspan="1">NA</td><td rowspan="1" colspan="1">NA</td></tr><tr><td rowspan="1" colspan="1">SSR-Pipeline</td><td rowspan="1" colspan="1">1411:21</td><td rowspan="1" colspan="1">1411:21</td><td rowspan="1" colspan="1">60 344 067</td><td rowspan="1" colspan="1">36 398</td><td rowspan="1" colspan="1">36 398</td><td rowspan="1" colspan="1">100</td><td rowspan="1" colspan="1">68</td><td rowspan="1" colspan="1">3047</td><td rowspan="1" colspan="1">35 041</td></tr><tr><td rowspan="1" colspan="1">SSRIT</td><td rowspan="1" colspan="1">2:12</td><td rowspan="1" colspan="1">2:12</td><td rowspan="1" colspan="1">13 217</td><td rowspan="1" colspan="1">13 217</td><td rowspan="1" colspan="1">13 217</td><td rowspan="1" colspan="1">100</td><td rowspan="1" colspan="1">5</td><td rowspan="1" colspan="1">24 951</td><td rowspan="1" colspan="1">13 137</td></tr><tr><td rowspan="1" colspan="1">TRF</td><td rowspan="1" colspan="1">12:14</td><td rowspan="1" colspan="1">12:14</td><td rowspan="1" colspan="1">2 035 715</td><td rowspan="1" colspan="1">1 47 284</td><td rowspan="1" colspan="1">33 876</td><td rowspan="1" colspan="1">23.00</td><td rowspan="1" colspan="1">12</td><td rowspan="1" colspan="1">7423</td><td rowspan="1" colspan="1">30 665</td></tr></tbody></table><table-wrap-foot><fn id="btw298-TF1"><p>This is a combination of results across each of the genomes included in the comparison. For more detailed results see <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Tables S2, S4–S31</ext-link>.</p></fn><fn id="btw298-TF2"><p><sup>a</sup>MREPS timing includes the pre- and post-processing time for each genome necessary to adjust positions to account for removing ‘incorrect symbols’ and Ns. The additional times are an average of multiple approaches.</p></fn><fn id="btw298-TF3"><p><sup>b</sup>We only considered SSRs with period sizes 1–7 (inclusive) and lengths of at least 16 nucleotides (nt). The difference between the number of SSRs in range and reported is due exclusively to SSR length (less than 16 nt) and period size (greater than 7).</p></fn><fn id="btw298-TF4"><p><sup>c</sup>Whenever possible, we salvaged correct SSRs that were inside incorrect SSRs reported by other software packages. For example, in <italic>Drosophila melanogaster</italic>, we recovered three for PRoGeRF and 8408 for TRF. To illustrate, in sequence JXOZ01000043.1, TRF reports a CT repeated 36 times at position 2171. While TRF does correctly identify a low-complexity region with many CT repeats, there are not 36 perfect repeats in a row. In this case, we salvaged two perfect CT regions, each repeating 8 times.</p></fn><fn id="btw298-TF5"><p><sup>d</sup>Detailed pairwise comparisons can be found in <ext-link ext-link-type="uri" xlink:href="http://bioinformatics.oxfordjournals.org/lookup/suppl/doi:10.1093/bioinformatics/btw298/-/DC1">Supplementary Tables S4–S31</ext-link>.</p></fn></table-wrap-foot></table-wrap></p>
    <p>Finally, we designed SA-SSR with intuitive features and formatting requirements. Like other SSR detection applications, SA-SSR takes FASTA files as input. However, some of the other applications, including some of those with high performance, are difficult to use. For example, MREPS displays an error message if any characters are not A, C, G, T or N, or if too many N's are present. Even if a user has the skills to remove all the characters that are not A, C, G or T, this makes the output positions of SSRs incorrect because those characters are not accounted for. Additionally, MREPS output is in a relatively un-structured text document that is not trivial to parse. As another example, SSR-Pipeline can only look for one period size at a time, requiring the user to manually re-run the software repeatedly for each period size of interest. Finally, SA-SSR provides greater flexibility to the user. For example, the user can choose whether to perform an exhaustive or faster (still nearly complete) search, change output filters to report (or not) overlapping SSRs, or report only user-specified SSRs.</p>
    <p>SA-SSR is freely available at: <ext-link ext-link-type="uri" xlink:href="http://github.com/ridgelab/SA-SSR">http://github.com/ridgelab/SA-SSR</ext-link>.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="PMC_1" content-type="local-data">
      <caption>
        <title>Supplementary Data</title>
      </caption>
      <media mimetype="text" mime-subtype="html" xlink:href="supp_32_17_2707__index.html"/>
      <media xlink:role="associated-file" mimetype="application" mime-subtype="pdf" xlink:href="supp_btw298_Supplement.pdf"/>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank the Fulton Supercomputing Laboratory (<ext-link ext-link-type="uri" xlink:href="https://marylou.byu.edu">https://marylou.byu.edu</ext-link>) at Brigham Young University for their consistent efforts to support our research.</p>
  </ack>
  <sec>
    <title>Funding</title>
    <p> This work was supported by start-up funds from Brigham Young University to PGR and a mentoring environment grant from Brigham Young University to CJW.</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
  <ref-list>
    <title>References</title>
    <ref id="btw298-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Abouelhoda</surname><given-names>M.I.</given-names></name></person-group><etal/> (<year>2004</year>) <article-title>Replacing suffix trees with enhanced suffix arrays</article-title>. <source>J. Discrete Algorithms</source>, <volume>2</volume>, <fpage>53</fpage>–<lpage>86</lpage>.</mixed-citation>
    </ref>
    <ref id="btw298-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kurtz</surname><given-names>S.</given-names></name></person-group> (<year>1999</year>) <article-title>Reducing the space requirement of suffix trees</article-title>. <source>Softw. Pract. Exp</source>., <volume>29</volume>, <fpage>1149</fpage>–<lpage>1171</lpage>.</mixed-citation>
    </ref>
    <ref id="btw298-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lim</surname><given-names>K.G</given-names></name></person-group><etal/> (<year>2013</year>) <article-title>Review of tandem repeat search tools: a systematic approach to evaluating algorithmic performance</article-title>. <source>Brief. Bioinf</source>., <volume>14</volume>, <fpage>67</fpage>–<lpage>81</lpage>.</mixed-citation>
    </ref>
    <ref id="btw298-B4">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Madesis</surname><given-names>P.</given-names></name></person-group><etal/> (<year>2013</year>) <chapter-title>Microsatellites: Evolution and contribution</chapter-title> In: <source><italic>Microsatellites</italic></source>. <publisher-name>Springer</publisher-name>, pp. <fpage>1</fpage>–<lpage>13</lpage>.</mixed-citation>
    </ref>
    <ref id="btw298-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Manber</surname><given-names>U.</given-names></name><name><surname>Myers</surname><given-names>G.</given-names></name></person-group> (<year>1993</year>) <article-title>Suffix arrays: a new method for on-line string searches</article-title>. <source>SIAM J. Comput</source>., <volume>22</volume>, <fpage>935</fpage>–<lpage>948</lpage>.</mixed-citation>
    </ref>
    <ref id="btw298-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McCreight</surname><given-names>E.M.</given-names></name></person-group> (<year>1976</year>) <article-title>A space-economical suffix tree construction algorithm</article-title>. <source>J. ACM (JACM)</source>, <volume>23</volume>, <fpage>262</fpage>–<lpage>272</lpage>.</mixed-citation>
    </ref>
    <ref id="btw298-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schlotterer</surname><given-names>C.</given-names></name><name><surname>Tautz</surname><given-names>D.</given-names></name></person-group> (<year>1992</year>) <article-title>Slippage synthesis of simple sequence DNA</article-title>. <source>Nucleic Acids Res</source>., <volume>20</volume>, <fpage>211</fpage>–<lpage>215</lpage>.<pub-id pub-id-type="pmid">1741246</pub-id></mixed-citation>
    </ref>
    <ref id="btw298-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ukkonen</surname><given-names>E.</given-names></name></person-group> (<year>1995</year>) <article-title>On-line construction of suffix trees</article-title>. <source>Algorithmica</source>, <volume>14</volume>, <fpage>249</fpage>–<lpage>260</lpage>.</mixed-citation>
    </ref>
    <ref id="btw298-B9">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name><surname>Weiner</surname><given-names>P.</given-names></name></person-group> (<year>1973</year>) Linear pattern matching algorithms. Switching and Automata Theory, 1973. SWAT'08. In: IEEE Conference Record of 14th Annual Symposium on IEEE, pp. <fpage>1</fpage>–<lpage>11</lpage>.</mixed-citation>
    </ref>
  </ref-list>
</back>
