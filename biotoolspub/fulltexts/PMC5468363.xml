<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">J Cheminform</journal-id>
    <journal-id journal-id-type="iso-abbrev">J Cheminform</journal-id>
    <journal-title-group>
      <journal-title>Journal of Cheminformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1758-2946</issn>
    <publisher>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5468363</article-id>
    <article-id pub-id-type="publisher-id">228</article-id>
    <article-id pub-id-type="doi">10.1186/s13321-017-0228-9</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>chemalot and chemalot_knime: Command line programs as workflow tools for drug discovery</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-1107-7818</contrib-id>
        <name>
          <surname>Lee</surname>
          <given-names>Man-Ling</given-names>
        </name>
        <address>
          <email>lee.man-ling@gene.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Aliagas</surname>
          <given-names>Ignacio</given-names>
        </name>
        <address>
          <email>aligas.ignacio@gene.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Feng</surname>
          <given-names>Jianwen A.</given-names>
        </name>
        <address>
          <email>feng@dnli.com</email>
        </address>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Gabriel</surname>
          <given-names>Thomas</given-names>
        </name>
        <address>
          <email>thomas.gabriel@knime.com</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>O’Donnell</surname>
          <given-names>T. J.</given-names>
        </name>
        <address>
          <email>tjo@acm.org</email>
        </address>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sellers</surname>
          <given-names>Benjamin D.</given-names>
        </name>
        <address>
          <email>sellers.benjamin@gene.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Wiswedel</surname>
          <given-names>Bernd</given-names>
        </name>
        <address>
          <email>bernd.wiswedel@knime.com</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Gobbi</surname>
          <given-names>Alberto</given-names>
        </name>
        <address>
          <email>gobbi.alberto@gene.com</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 0534 4718</institution-id><institution-id institution-id-type="GRID">grid.418158.1</institution-id><institution>Discovery Chemistry, </institution><institution>Genentech Inc., </institution></institution-wrap>1 DNA Way, South San Francisco, CA 94080 USA </aff>
      <aff id="Aff2"><label>2</label>Denali Therapeutics, 151 Oyster Point Blvd, South San Francisco, CA 94080 USA </aff>
      <aff id="Aff3"><label>3</label>KNIME.com AG, Technoparkstrasse 1, 8005 Zurich, Switzerland </aff>
      <aff id="Aff4"><label>4</label>gNova Scientific Software, San Diego, CA 92103 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>12</day>
      <month>6</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>12</day>
      <month>6</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2017</year>
    </pub-date>
    <volume>9</volume>
    <elocation-id>38</elocation-id>
    <history>
      <date date-type="received">
        <day>14</day>
        <month>1</month>
        <year>2017</year>
      </date>
      <date date-type="accepted">
        <day>1</day>
        <month>6</month>
        <year>2017</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2017</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>Analyzing files containing chemical information is at the core of cheminformatics. Each analysis may require a unique workflow. This paper describes the chemalot and chemalot_knime open source packages. Chemalot is a set of command line programs with a wide range of functionalities for cheminformatics. The chemalot_knime package allows command line programs that read and write SD files from stdin and to stdout to be wrapped into KNIME nodes. The combination of chemalot and chemalot_knime not only facilitates the compilation and maintenance of sequences of command line programs but also allows KNIME workflows to take advantage of the compute power of a LINUX cluster.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>Use of the command line programs is demonstrated in three different workflow examples: (1) A workflow to create a data file with project-relevant data for structure–activity or property analysis and other type of investigations, (2) The creation of a quantitative structure–property-relationship model using the command line programs via KNIME nodes, and (3) The analysis of strain energy in small molecule ligand conformations from the Protein Data Bank database.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>The chemalot and chemalot_knime packages provide lightweight and powerful tools for many tasks in cheminformatics. They are easily integrated with other open source and commercial command line tools and can be combined to build new and even more powerful tools. The chemalot_knime package facilitates the generation and maintenance of user-defined command line workflows, taking advantage of the graphical design capabilities in KNIME.<fig position="anchor" id="Figa"><label>Graphical abstract</label><caption><p>Example KNIME workflow with chemalot nodes and the corresponding command line pipe</p></caption><graphic position="anchor" xlink:href="13321_2017_228_Figa_HTML" id="MO100"/></fig>
</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s13321-017-0228-9) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Command line program</kwd>
      <kwd>Substructure identification</kwd>
      <kwd>Property calculation</kwd>
      <kwd>SAR</kwd>
      <kwd>QSPR model</kwd>
      <kwd>Conformation analysis</kwd>
      <kwd>Strain energy analysis</kwd>
      <kwd>Dynamic KNIME node generation</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2017</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>In the fields of computational chemistry and cheminformatics, data management and analysis require the sequential application of multiple methods and algorithms. For example, in a hierarchical docking workflow, two-dimensional molecular structures may first be converted into a set of three-dimensional models using a conformer generation tool. The conformers may then be pre-screened with a fast pharmacophore matching tool to remove conformers that will not be able to make the required interactions. The reduced set of conformers may subsequently be docked to a protein structure and scored with more resource-intensive, but more accurate methods. To keep up with project teams’ demand, a flexible development environment that allows the quick assembly of cheminformatics and structure-based design modules has become indispensable for prototyping, developing, and deploying computational workflows. Example workflow platforms include UNIX shell scripting with pipes [<xref ref-type="bibr" rid="CR1">1</xref>], open source visual workflow tools such as KNIME [<xref ref-type="bibr" rid="CR2">2</xref>] and ORANGE [<xref ref-type="bibr" rid="CR3">3</xref>], as well as commercial applications such as Pipeline Pilot [<xref ref-type="bibr" rid="CR4">4</xref>]. The power of each tool depends on the strength and robustness of the available modules and the flexibility and ease with which the modules can be combined and extended.</p>
    <p>This paper introduces chemalot, a set of command line programs for cheminformatics and structure-based design developed at Genentech that can be used for a wide variety of tasks. These command line programs extend a set of previously released command line programs from the Autocorrelator package [<xref ref-type="bibr" rid="CR5">5</xref>] and include published programs for database access and diversity analysis [<xref ref-type="bibr" rid="CR6">6</xref>, <xref ref-type="bibr" rid="CR7">7</xref>]. The full list of command line programs is given in Fig. <xref rid="Fig1" ref-type="fig">1</xref>. They provide diverse functionalities such as data manipulation and filtering, database access, property calculation, model building and 3D structure analysis. The programs take advantage of integration with other software such as R [<xref ref-type="bibr" rid="CR8">8</xref>], Gaussian [<xref ref-type="bibr" rid="CR9">9</xref>], and OpenEye toolkits [<xref ref-type="bibr" rid="CR10">10</xref>]. The tasks performed by the command line programs can be as simple as renaming data fields in the input file or as complex as performing a 3D conformational analysis. Most of chemalot command line programs read and write Structure Data (SD) files [<xref ref-type="bibr" rid="CR11">11</xref>]. These programs can be combined with each other and with command line programs from open source or commercial cheminformatics packages [<xref ref-type="bibr" rid="CR10">10</xref>–<xref ref-type="bibr" rid="CR14">14</xref>] to create complex UNIX pipelines. In addition, a small number of the chemalot command line programs read and write tab-delimited files to better handle spreadsheet data.<fig id="Fig1"><label>Fig. 1</label><caption><p>List of command line programs available in the chemalot package. For a short description of each command line tool the reader is referred to the GitHub website</p></caption><graphic xlink:href="13321_2017_228_Fig1_HTML" id="MO1"/></fig>
</p>
    <p>Implementing workflows using UNIX scripts and pipes of command line programs is very lightweight while still powerful. The UNIX infrastructure supports scheduled execution with cron [<xref ref-type="bibr" rid="CR15">15</xref>] as well as distributed execution on high performance computing clusters with tools like LSF [<xref ref-type="bibr" rid="CR16">16</xref>] and PBS [<xref ref-type="bibr" rid="CR17">17</xref>]. The sdfMultiplexer program allows for the parallel execution of workflows over multiple cores or compute nodes by seamlessly splitting the input stream and combining the output streams. Parallelization with sdfMultiplexer is only possible for workflows in which a computation is independently applied to each record. These features make the UNIX platform and command line programs ideal building blocks for simple and complex cheminformatics workflows.</p>
    <p>On the other hand, UNIX scripts and pipes are hard to debug compared to workflows developed in graphical workflow tools such as KNIME, ORANGE, and Pipeline Pilot. For this reason, KNIME and Pipeline Pilot have become very popular as they provide a powerful set of modules as well as a graphical user interface for developing workflows. A useful feature of these visual programming environments is that workflows can be executed one module at a time. This enables inspection of the output of each module and thus debugging is greatly simplified. However, there are some downsides to using visual workflow environments. The execution of a workflow may incur a significant start-up cost because the execution environment needs to be initialized. When executing on multiple nodes in a cluster the initialization needs to happen on each node. While the environment can be pre-started on each node, when no workflows are executing, the resources may be reserved and unavailable for other computations.</p>
    <p>To leverage the benefits of the lightweight execution of command line programs in UNIX pipes and the debugging power of graphical workflow software, we have implemented a framework within the open source KNIME Analytics Platform that exposes command line programs as KNIME nodes. By using the DynamicNodeFactory class in the KNIME API, the framework can generate KNIME nodes from a simple XML configuration. Thus, given a command line program that reads and writes SD files, the creation of a new chemalot_knime node in KNIME takes only 5 lines in the XML file. Since the standard KNIME nodes only handle data in KNIME table format, two data format conversion nodes were implemented. They allow the integration of command line tools with other nodes available in KNIME, thus providing access to high performance computing clusters from within KNIME workflows. This also allows the integration with cheminformatics nodes from other open source packages such as the RDKit [<xref ref-type="bibr" rid="CR18">18</xref>], CDK [<xref ref-type="bibr" rid="CR19">19</xref>] and Vernalis [<xref ref-type="bibr" rid="CR20">20</xref>] KNIME nodes. The chemalot_knime nodes not only output the processed data; they also compile an executable UNIX command corresponding to the given node sequence. Since the chemalot_knime nodes use UNIX pipes and do not rely on the workflow environment, the command can be copied and pasted into a UNIX shell script and executed in any UNIX computing environment, thus avoiding the startup costs mentioned previously.</p>
    <p>We first provide a conceptional overview of the implementation of the chemalot command line programs by describing three representative programs and the KNIME framework for the dynamic node generation. Then, we will showcase three example workflows and their use at Genentech: (1) the creation of “project reports” visualized with Vortex [<xref ref-type="bibr" rid="CR21">21</xref>], (2) the creation of statistical prediction models using the Random Forest machine learning method [<xref ref-type="bibr" rid="CR22">22</xref>, <xref ref-type="bibr" rid="CR23">23</xref>], and (3) the implementation of a method to estimate the strain of 3D conformations of small molecules.</p>
    <p>The command line programs are available in the chemalot package on GitHub [<xref ref-type="bibr" rid="CR24">24</xref>] under the Apache Open Source license. The chemalot_knime node framework is available in the chemalot_knime package on GitHub [<xref ref-type="bibr" rid="CR25">25</xref>] under the GNU General Public License version 3. Most of the command line tools require a license for the commercial OEChem library and additional commercial software is required for specific commands.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p>The goal of this section is to give the reader an understanding of the program design concept. Besides descriptions of the implementation details, this section also describes the context in which the command line programs presented in this section can be used.</p>
    <sec id="Sec3">
      <title>Command line programs</title>
      <p>Most of the command line programs read and write molecular structures and associated data, e.g. names, properties, and activity data, in SD format. This format was chosen because its widespread use enables the integration with other open source and commercial command line programs. A few chemalot programs read and write other formats such as tab-separated and Gaussian formats to enable integration with other software packages.</p>
      <p>The command line programs can be divided into two groups, Java programs and scripts. Molecule structure related and database dependent algorithms are mostly implemented as Java programs. The Java version of the commercial OpenEye OEChem toolkit [<xref ref-type="bibr" rid="CR10">10</xref>] is used to perform cheminformatics algorithms such as substructure matching and to navigate the molecular structural graph as well as to parse SD files. Scripts frequently combine other command line programs in order to perform a common sequence of computations or to implement novel methods. A detailed description of how to use each program can be accessed by executing each program with the “-h” option. To showcase the distinction of Java programs and scripts, we will discuss three command line programs in more detail below: sdfStructureTagger, sdfMMConfAnalysis, and sdfCalcProps.</p>
      <sec id="Sec4">
        <title>sdfStructureTagger: a Java program example</title>
        <p>Drug discovery teams classify compounds into chemical series defined by a common core or scaffold. In reporting applications, the given series names are displayed along with the chemical structure to facilitate communication with non-chemists or to analyze structure activity relationship (SAR) trends within a series. Scaffolds can be specific substructures or more generic definitions, e.g. multiple scaffolds with similar attachment vectors.</p>
        <p>The program sdfStructureTagger is used to “tag” compounds based on chemical scaffolds which the user defines using the SMARTS language [<xref ref-type="bibr" rid="CR26">26</xref>]. By “tagging”, we mean to add a data field to the SD output stream that classifies a compound as a member of a given series. Examples could be “Azaindole” or “PhenylAmide Series”. A tab-delimited file with SMARTS, tag name, and tag set name is required as input. The tag set name allows a user to create sets of SMARTS, e.g. groups of main and sub series scaffold definitions in a single file. Each sdfStructureTagger execution can only use one set and the SMARTS are applied to an input molecule in the given order. If a molecule matches a SMARTS scaffold definition, the associated tag name is added to the molecule’s metadata in the SD file. Depending on the specification, the tag of the first matching SMARTS, all matching SMARTS, or both are added to the SD file. The order dependent application of the SMARTS and the output of the first match enable the user to assign input molecules into desired compound series without having to compile complex SMARTS. Having multiple SMARTS with the same tag name or placing the SMARTS in appropriate order are effective alternatives.</p>
        <p>The sdfStructureTagger command line program is implemented in Java and uses the OEChem API for SD file parsing and substructure matching. The Apache Commons CLI library [<xref ref-type="bibr" rid="CR27">27</xref>] is used to parse the command line options. The Java program is wrapped in a small C-shell script that sets the correct environment settings before the program execution. The Java code is separated into two classes, SDFStructureTagger.java and StructureTagger.java. SDFStructureTagger.java contains code to parse the command line parameter values as well as the content of the SMARTS and SD file. Its task is to pass each input molecule object to a StructureTagger instance. StructureTagger.java encapsulates the structure matching code. Most of the Java-based command line programs in the package [<xref ref-type="bibr" rid="CR28">28</xref>] adopt a similar separation of the command line parsing and the algorithmic code. This facilitates the reuse of the code for other applications e.g. web services.</p>
      </sec>
      <sec id="Sec5">
        <title>sdfMMConfAnalysis: a workflow script example</title>
        <p>The internal potential (strain) energy of a drug molecule is a key component of the binding affinity for a drug to a protein. It constitutes the unfavorable increase in energy of small molecule in solution when adopting the conformation in the binding site. No interactions with the protein are taken into account. The sdfMMConfAnalysis program follows a procedure similar to that first described by Boström et al. [<xref ref-type="bibr" rid="CR29">29</xref>]. Given a crystallographic binding conformation or a three dimensional computational binding hypothesis, the program identifies the global minimum conformation, the local minimum closest to the input conformation as well as four intermediate conformations between the input and the local minimum. The relative energies of these conformations and their distance from the input conformation allow an estimation of the strain of the input conformation. All energies are computed with the MMFF94S [<xref ref-type="bibr" rid="CR30">30</xref>] force field as implemented in SZYBKI [<xref ref-type="bibr" rid="CR31">31</xref>] using the Sheffield solvation model [<xref ref-type="bibr" rid="CR32">32</xref>]. The four conformations intermediate between the input and the local minimum are obtained by minimizing the input employing an additional flat bottom potential with flat bottom radius of 0.2, 0.6, 1.0 or 1.4 Å to constrain their deviation from the input conformation. These intermediate constrained minima together with the local minimum provide information about the height and slope of the potential energy surface around the input conformation (Fig. <xref rid="Fig2" ref-type="fig">2</xref>). A global minimum search is performed by enumerating the accessible conformations with OMEGA, sampling additional OH and NH rotors with sdfTorsionScanner, minimizing them with SZYBKI, and selecting the lowest energy conformation as the global minimum. If the minimized OMEGA conformational ensemble includes conformations that are Pareto optimal [<xref ref-type="bibr" rid="CR33">33</xref>] with regards to low energy and small RMSD to the constrained minimized and global minimum conformations, they are also retained. The output file contains the input conformation, conformations from the four constrained minimizations, the local minimum, and the global minimum as well as any additional Pareto optimal local minima. All output structures are aligned to the input structure using sdfAlign that aligns structures by minimizing the RMSD. The energy profile and some of the conformations identified, starting from the crystallographic conformation of the sulfonamide ligand in the 4WPF structure [<xref ref-type="bibr" rid="CR34">34</xref>], are shown in Fig. <xref rid="Fig2" ref-type="fig">2</xref>.<fig id="Fig2"><label>Fig. 2</label><caption><p>Conformational analysis of the sulfonamide ligand in the 4WPF PDB crystal structure performed with sdfMMConfAnalysis. <bold>a</bold> Profile of conformations returned. RMSD values on the x axis are relative to the input conformation. Energies on the y axis are relative to the global minimum. <bold>b</bold> Three conformations from the conformation analysis. The input conformation is in <italic>black</italic>, the constraint minimum at 0.3 Å from the input is in <italic>blue</italic> and the Pareto minimum at 0.8 Å from the input is shown in <italic>pink</italic>
</p></caption><graphic xlink:href="13321_2017_228_Fig2_HTML" id="MO2"/></fig>
</p>
        <p>SdfMMConfAnalysis is implemented as a Perl script which wraps a set of command line tools and commercial applications. A diagram of the workflow is given in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. Perl scripting is only used to parse the command line options and execute the sequence of piped programs, shown as rectangular boxes. To speed up the calculation, the minimization of the conformational ensemble generated by OMEGA can be parallelized. This is accomplished by executing the piped set of command line programs, highlighted by the dotted box in Fig. <xref rid="Fig3" ref-type="fig">3</xref>, using sdfMultiplexer. Even though up to 500 minimizations are performed for a full conformational analysis, on average the workflow takes about 20 s when executed on an 8 core computer.<fig id="Fig3"><label>Fig. 3</label><caption><p>Conformational analysis workflow as implemented in sdfMMConfAnalysis. Depending on the command <italic>line</italic> options, the programs in the <italic>dotted box</italic> are executed in parallel using sdfMultiplexer</p></caption><graphic xlink:href="13321_2017_228_Fig3_HTML" id="MO3"/></fig>
</p>
      </sec>
      <sec id="Sec6">
        <title>sdfCalcProps: a workflow assembler program</title>
        <p>The previous section shows that command line programs can be combined to create a new program that executes a predefined workflow. In this section, we describe the sdfCalcProps program that dynamically creates a workflow depending on the properties requested by the user. This task can be complicated as the calculation of one property might depend on other properties. For example, the familiar Rule of Five (RO5) model evaluates drug likeness of a molecule based on its number of hydrogen bond donors (NH + OH), acceptors (N + O), molecular weight (MW), and cLogP [<xref ref-type="bibr" rid="CR35">35</xref>]. The dependencies result in a hierarchy of properties that requires calculators to be executed in a specific order. In this example, NH + OH, N + O, MW, and cLogP have to be computed before RO5 can be calculated. As the number of properties increases, tracking the dependencies hardcoded in a script would become unmanageable. For this reason, we devised a simple format to encode the dependencies in an XML file.</p>
        <p>Figure <xref rid="Fig4" ref-type="fig">4</xref> shows an XML snippet describing the MW and RO5 properties. Each property element describes how a program should be executed to create appropriate output(s). For a higher level property such as RO5, its dependencies are specified in the “requiredCalculators” field. Outputs from the “requiredCalculators” may be retained in the resulting output file by specifying “keepRequiredCalculators”. Many properties like MW, N + O and NH + OH are calculated using the same calculator (i.e. “OEProps”), but with different arguments. To ensure that the calculator is only called once, these properties are assigned the same “progAggregateID”.<fig id="Fig4"><label>Fig. 4</label><caption><p>Property elements describing the MW and RO5 calculators in the sdfCalcProps XML configuration file</p></caption><graphic xlink:href="13321_2017_228_Fig4_HTML" id="MO4"/></fig>
</p>
        <p>When executing the sdfCalcProps program with a list of requested properties, sdfCalcProps determines the dependencies and creates a set of Calculator-Java objects for each property and its dependent properties. Calculator objects for properties having the same “progAggregateID” are merged, i.e. they are replaced with a single Calculator object. A recursive sorting places calculators with no dependencies at the beginning of the execution in order to avoid duplicate calculations. The pseudo code in Fig. <xref rid="Fig5" ref-type="fig">5</xref> describes the recursive sorting algorithm. The sorted list of calculators is used to create a shell script that executes the calculators in the correct order.<fig id="Fig5"><label>Fig. 5</label><caption><p>Pseudo code describing how dependencies are resolved by sdfCalcProps</p></caption><graphic xlink:href="13321_2017_228_Fig5_HTML" id="MO5"/></fig>
</p>
        <p>Abstracting “property calculators” from the actual command line programs as well as separating the property calculator descriptions in an XML file from the compilation of command line text provides flexibility and facilitates the addition of new property calculators. The XML file describes the dependencies for all models used at Genentech, therefore sdfCalcProps can be considered as a “warehouse” of prediction models.</p>
      </sec>
    </sec>
    <sec id="Sec7">
      <title>chemalot_knime nodes</title>
      <p>The chemalot_knime nodes allow the execution of any command line program that reads and writes SD files from within the KNIME Analytics Platform. The nodes are connected with each other via a custom KNIME port type, i.e. SDFCmdPortObject. Each chemalot_knime node can be executed on its own. In this case the associated command line program is started remotely via secure shell (ssh) and the contents of the input is sent as SD file to the standard input of the command line program. The node then captures the standard output of the program via ssh and makes it available on the output port of the node. The SDFCmdPortObject not only transfers data in SD file format, but also transfers the user configured command line options of all preceding nodes. This allows for a second execution mode with better performance in which a single “piped” UNIX command line is assembled from all nodes, but only executed at the end of the chemalot_knime node sequence. The corresponding command line text can be retrieved via the KNIME port view or via a KNIME flow variable and can be used in a shell script.</p>
      <p>Most chemalot_knime nodes are created using KNIME’s dynamic node creation framework [<xref ref-type="bibr" rid="CR36">36</xref>]. The framework is used to generate chemalot_knime nodes from an XML file. Figure <xref rid="Fig6" ref-type="fig">6</xref>a shows the definition for the sdfStructureTagger node. The specification contains information (1) for organizing the node in the KNIME Node Repository (<italic>label</italic> and <italic>Subfolder</italic> attributes), (2) for help text generation (<italic>help</italic> element), (3) for indication of input and output port existence (<italic>ports</italic> element), and (4) for command text generation (<italic>IO</italic> and <italic>default</italic> elements). Figure <xref rid="Fig6" ref-type="fig">6</xref>b shows the corresponding configuration dialog. All program options except for the IO options are entered into the text box. Having a single text box greatly reduces the time needed to transfer program options from shell scripts. The “?” icon provides access to the help text of the given command line program.<fig id="Fig6"><label>Fig. 6</label><caption><p>Example chemalot_knime node configuration. <bold>a</bold> XML snippet showing the definition of the sdfStructureTagger node and <bold>b</bold> the corresponding Command Configuration dialog generated by the dynamic node creation framework</p></caption><graphic xlink:href="13321_2017_228_Fig6_HTML" id="MO6"/></fig>
</p>
      <p>The sdfStructureTagger node has input and output SDFCmdPortObject ports and is therefore classified as a Processor node. The other two node types are Generator and Consumer nodes which have only output or only input SDFCmdPortObject ports, respectively. Generator nodes always constitute the start of a pipe and have an additional tab for specifying the ssh settings in their configuration dialog (Fig. <xref rid="Fig7" ref-type="fig">7</xref>). The “Remote Directory” input allows the user to specify an execution directory for all nodes in the sequence. File names specified as command line arguments are relative to the “Remote Directory”. The “Execute in each node” checkbox allows the user to defer the execution of the command line programs to the terminal Consumer node. If it is unchecked, the commands in the sequence are executed in parallel and, the data is transferred only at the beginning and end of the sequence. This provides the highest performance. If “Execute in each node” is checked, debugging the commands is simplified by enabling the inspection of the output and standard error of each node independently.<fig id="Fig7"><label>Fig. 7</label><caption><p>SSH settings tab in the configuration dialog of the chemalot_knime node</p></caption><graphic xlink:href="13321_2017_228_Fig7_HTML" id="MO7"/></fig>
</p>
      <p>Additionally the chemalot_knime package provides two converter nodes that convert data in SD file format to the KNIME table format and vice versa. This enables integration between chemalot_knime nodes and standard KNIME nodes (cf. Fig. <xref rid="Fig8" ref-type="fig">8</xref>). We have also implemented the “SDF Concatenate” node to allow concatenation of multiple inputs.<fig id="Fig8"><label>Fig. 8</label><caption><p>Example KNIME workflow showing the conversion and concatenation nodes</p></caption><graphic xlink:href="13321_2017_228_Fig8_HTML" id="MO8"/></fig>
</p>
    </sec>
  </sec>
  <sec id="Sec8">
    <title>Results and discussion</title>
    <p>The applications presented in this section demonstrate how the command line programs have been successfully used to support therapeutic project teams in various aspects of drug discovery at Genentech. The selected applications are essential tools for the day-to-day work of project team members. The “<xref rid="Sec8" ref-type="sec">Results and discussion</xref>” section concludes with a summary of how command line programs enabled project teams at Denali Therapeutics to access data before the deployment of the research informatics infrastructure.</p>
    <sec id="Sec9">
      <title>Project Vortex sessions</title>
      <p>Therapeutic project teams must be able to easily retrieve all relevant project data from a database and then be able to analyze and mine the data to make informed decisions. Instead of implementing a full-featured database application that includes both the data export and data mining user interface, we adopted a component-based approach: a set of chemalot command line programs serves as the backend for data export and processing while Vortex [<xref ref-type="bibr" rid="CR21">21</xref>], a powerful, chemistry-aware commercial spreadsheet and plotting tool, serves as the frontend for data analysis. The interface between the backend and frontend is an SD file that can also be shared with research partners, whether they use Vortex or other visualization software (e.g. Spotfire [<xref ref-type="bibr" rid="CR37">37</xref>] or DataWarrior [<xref ref-type="bibr" rid="CR38">38</xref>]). Use of the SD file data format also provides the agility to integrate with other data analysis applications.</p>
      <p>Figure <xref rid="Fig9" ref-type="fig">9</xref> shows an example command line pipe for generating such an SD file. Data are exported from the database using the AEREAExporter program. This command line program has a companion open source web application, AEREA [<xref ref-type="bibr" rid="CR39">39</xref>], which provides graphical user interfaces for creating search queries and report templates. Search queries and report templates saved in AEREA can be executed from the AEREAExporter program and serve as instructions to retrieve the compounds of interest and data fields specified in the report templates. Thus, AEREAExporter and AEREA enable computational chemists with no knowledge of SQL or the data model to retrieve data from a database for automated processing. The subsequent programs of the example command line pipe perform the following actions:<fig id="Fig9"><label>Fig. 9</label><caption><p>An example command line pipe for compiling an SD file</p></caption><graphic xlink:href="13321_2017_228_Fig9_HTML" id="MO9"/></fig>
<list list-type="order"><list-item><p>sdfStructureTagger assigns series names to compounds</p></list-item><list-item><p>sdfRGroupExtractor generates R-Groups of interest</p></list-item><list-item><p>sdfCalcProps calculates physiochemical properties</p></list-item><list-item><p>sdfGroovy calculates ligand efficiencies with a custom Groovy script [<xref ref-type="bibr" rid="CR40">40</xref>]</p></list-item><list-item><p>sdfSelectivityCalculator computes off-target selectivity</p></list-item><list-item><p>sdfTabMerger adds data from an externally generated tab-delimited file into the SD file.</p></list-item></list>
</p>
      <p>Piping these command lines provides a certain degree of parallelization because the programs are started simultaneously and process data whenever data are available. The processing time could be further reduced by executing a pipe fragment within sdfMultiplexer that can span multiple threads to parallelize the execution. However, sdfMultiplexer can only be used to parallelize command sequences in which each record is processed independently of the others and for which the input and output order is irrelevant.</p>
      <p>The number of project Vortex sessions and their content depends on the need of the given project team. At Genentech, it is the computational chemist’s responsibility to create and maintain the customized Vortex spreadsheets for the project in close interaction with other project team members. The diversity of the command line programs enables the computational chemists to customize the data processing workflows, and thus to provide Vortex spreadsheets that enable analysis from different perspectives. A default Vortex spreadsheet contains compound registration and availability information, aggregated assay results, computed values, such as target selectivity and cell shifts, calculated properties, and possibly includes links to metabolite identification reports, certificates of testing and crystal structures.</p>
      <p>Other Vortex spreadsheets combine data exported from DEGAS [<xref ref-type="bibr" rid="CR41">41</xref>], a “compound idea and synthesis tracking” application with a report of registered compounds. This combined view of “virtual” and existing compounds allows project teams to quickly assess compound ideas based on the experimental results of the registered compounds in the same spreadsheet. Depending on the project team needs, Vortex spreadsheets are generated on a daily or even on an hourly basis using a UNIX computing cluster. The latest exports are easily downloaded from a shared network location via a custom Genentech menu in Vortex.</p>
      <p>The Vortex spreadsheets enable the project team to conduct hypothesis-driven drug discovery. Hypotheses evolve in the course of a project’s life and for this reason, the sequence of chemalot command line programs for a project is routinely being adjusted; new assays are added and existing models are changed. Testing and debugging piped command line programs in UNIX can be tedious, especially if the sequence is complex. With the chemalot_knime framework, this can be facilitated by converting the piped programs to a KNIME workflow (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1) and by using the KNIME Analytics Platform as an editor.</p>
    </sec>
    <sec id="Sec10">
      <title>Quantitative structure–property-relationship (QSPR) model creation</title>
      <p>The command line programs and KNIME framework are used at Genentech to create, validate and apply QSPR models for properties important to lead optimization such as metabolic stability [<xref ref-type="bibr" rid="CR42">42</xref>], permeability [<xref ref-type="bibr" rid="CR43">43</xref>] and solubility. Here, we present an example KNIME workflow to show how command line programs are used to construct a QSPR model to predict solubility (Fig. <xref rid="Fig10" ref-type="fig">10</xref>). The workflow is greatly simplified for clarity and therefore the model should not be used without stringent validation. A dataset with 1763 measured thermodynamic solubility measurements was downloaded from CHEMBL [<xref ref-type="bibr" rid="CR44">44</xref>, <xref ref-type="bibr" rid="CR45">45</xref>]. The workflow first calculates the log10 of the experimental solubility and separates the input file into training and testing sets. In the second step, the descriptors are calculated with sdfCalcProps and the model is built with sdfRRandomForestCreator. The predicted solubility values are converted into a KNIME table and then passed to a KNIME plotting tool to display the experimental versus predicted values. The third sequence uses sdfRModelPredictor to apply the model created previously to the test set. Internally, sdfRRandomForestCreator and sdfRModelPredictor convert the input SD file to tab format and then create models and make predictions using the randomforest package in R [<xref ref-type="bibr" rid="CR8">8</xref>, <xref ref-type="bibr" rid="CR22">22</xref>, <xref ref-type="bibr" rid="CR23">23</xref>]. To facilitate the reproduction of this example, the data and the KNIME workflow are available in Additional files <xref rid="MOESM2" ref-type="media">2</xref> and <xref rid="MOESM3" ref-type="media">3</xref>, respectively.<fig id="Fig10"><label>Fig. 10</label><caption><p>Example QSPR model creation and validation. The KNIME workflow demonstrates the use of the chemalot_knime nodes. It splits the content of the input file into training and test sets, creates a simplified solubility model, and tests the model using the test set. The <italic>scatter plots</italic> on the <italic>right</italic> show predicted (cDemoSol) versus experimental log Solubility (logSol) for the training and test sets</p></caption><graphic xlink:href="13321_2017_228_Fig10_HTML" id="MO10"/></fig>
</p>
      <p>At Genentech, predicted drug metabolism and pharmacokinetics (DMPK) properties, e.g. liver microsome clearance, are automatically computed and stored in the database for both registered compounds and compound ideas. To allow users to check the model’s prospective performance, especially for new chemical series, we have implemented web applications using KNIME that apply the models to compounds synthesized after the model creation. The integration of the command line programs in KNIME enables us to leverage the KNIME WebPortal user interface while running the model predictions on our high-performance computing cluster via the chemalot_knime nodes.</p>
    </sec>
    <sec id="Sec11">
      <title>Strain energy analysis</title>
      <p>In our final example we demonstrate the use of the sdfMMConfAnalysis program to compute the strain energy of a large number of small molecule protein ligands from the Protein Data Bank (PDB) [<xref ref-type="bibr" rid="CR46">46</xref>]. Figure <xref rid="Fig11" ref-type="fig">11</xref> shows the distribution of the strain energy for 416 different small molecule conformations retrieved from the PDB database (PDB identifiers are given in the Additional file <xref rid="MOESM4" ref-type="media">4</xref>). All small molecule structures with less than 2 Å resolution were exported from the in-house copy of the PDB database stored in PROASIS [<xref ref-type="bibr" rid="CR47">47</xref>] using sdfExport. The structures were filtered by molecular weight (&lt;500) and number of rotatable bonds (&lt;7) and by removing structures that did not pass our compound screening filters [<xref ref-type="bibr" rid="CR48">48</xref>]. Finally known metal counter-ions were removed with sdwash [<xref ref-type="bibr" rid="CR49">49</xref>]. sdfMMConfAnalysis was used to analyze the strain energy for each conformation resulting in multiple conformations with energies for each input as described under “implementation”. For the nine thresholds on the x axis in Fig. <xref rid="Fig11" ref-type="fig">11</xref> (0.2–1), the lowest energy conformation with at most that RMSD distance was retained for each input conformation. For example, if minimized conformers are allowed to deviate by at most 0.4 Å from the input conformation, the median energy relative to the global minimum is 1.42 kcal/mol. 75% of the structures from the PDB have a strain energy of less than 4.25 kcal/mol when they are allowed to relax at most 0.4 Å.<fig id="Fig11"><label>Fig. 11</label><caption><p>Distribution of strain energies for 416 structures from the PDB. The ∆E is computed relative to the global minimum conformation as described in the sdfMMConfAnalysis section above. Each <italic>box</italic> and <italic>whisker</italic> in the plot represents the same 416 small molecule conformations that were allowed to relax at most the MaxRMSD [Å] amount from the input. The <italic>central horizontal line</italic> shows the median of the values in each <italic>box</italic>. The ends of the <italic>box</italic> show the first quartile and third quartile of the values. The <italic>whiskers</italic> correspond to the highest or lowest point that is not an outlier. Outliers are defined as those points that are outside the median ± 1.5 times the interquartile range</p></caption><graphic xlink:href="13321_2017_228_Fig11_HTML" id="MO11"/></fig>
</p>
      <p>In estimating the strain energy, a certain amount of relaxation from the crystallographic conformation must be allowed for two reasons: The crystallographic conformation is a model optimized to the electron density. The atom positions have associated uncertainties that depend on the resolution of the crystal structure and on the local electron density around the ligand. Secondly, the MMFF94S force field with Sheffield solvation model was used to compute all energies and the force field contains errors. In reviewing the conformations computed for the 416 conformations from the PDB, we decided to use a 0.4 Å RMSD relaxation as a default threshold to estimate the strain energy. 0.4 Å relaxation allows for only a relatively small movement of the atoms as can be seen in Fig. <xref rid="Fig2" ref-type="fig">2</xref>. Given this threshold, docking conformations can be filtered or flagged if they exceed a threshold of 4 kcal/mol with a maximum relaxation of 0.4 Å as they are unlikely to have high binding affinity.</p>
      <p>The strain energy analysis computed with sdfMMConfAnalysis is regularly used by both computational and medicinal chemists for evaluating strain in new crystal structures and in evaluating new compound designs or docking poses. To facilitate its use, the command line workflow is wrapped as a web service and integrated into the MOE modeling application that is used by all medicinal chemists at Genentech [<xref ref-type="bibr" rid="CR50">50</xref>].</p>
      <p>The three applications presented above and many other command line applications have been in use at Genentech for many years with high impact on small molecule drug discovery projects. The chemalot package was deployed at Denali in mid-2015 and has enabled their computational chemists to support project teams before the deployment of a cloud-based informatics solution. Data files from various contract research organizations (CROs) were easily consolidated for SAR analysis in Vortex. The process of file consolidation, data binning, scaffold matching, molecule clustering, and property calculation was extremely efficient. Command line programs were also used to assess the properties and diversity of the small molecule high-throughput screening (HTS) library from CROs as part of the CRO selection process. Clustering and comparing multiple libraries whose size ranges from 250,000 to 850,000 molecules can be time consuming. With the natural parallel processing of command line pipes plus the divide and conquer feature of sdfMultiplexer.pl, it took a few hours of computing time to process multiple libraries. The results of comparing HTS collections from multiple CROs enabled the project team to make data driven decisions. The chemalot programs are now part of the Denali computational chemistry platform on the Amazon cloud.</p>
    </sec>
  </sec>
  <sec id="Sec12">
    <title>Conclusions</title>
    <p>Command line programs can be used for small daily tasks as well as for large distributed computation on a cluster. The chemalot package provides a set of command line programs to many important tasks in chemical informatics. The programs can be easily combined using UNIX pipes to build more complex methods such as the strain energy workflow. The chemalot package extends the autocorrelator and Aestel packages and integrates well with other open source and commercial command line programs.</p>
    <p>These packages have been used at Genentech and Denali, a large company and a small startup company, to perform basic and complex cheminformatics tasks that range from merging of structural and numerical data, selecting diverse sets of compounds from a library and, creating machine learning models to performing 3D analyses such as the computation of ligand strain and quantum mechanical torsion scans [<xref ref-type="bibr" rid="CR51">51</xref>]. At Denali, the command line programs were particularly useful at the start-up stage of the company in 2015 before the deployment of a cloud-based informatics solution. They remain the tools of choice for compute-intensive tasks, such as evaluation of HTS libraries. At Genentech, command line tools are ubiquitous as they are used by computational chemists to generate Vortex spreadsheets for project teams and pharmacokinetic QSPR models for chemical idea evaluations.</p>
    <p>The development of complex workflows using piped UNIX command-line programs can be cumbersome. Through the use of automatically generated chemalot_knime nodes, the development of command line pipelines can be significantly simplified. Only five lines of XML configuration are needed to create a chemalot_knime node that encapsulates any UNIX command line program that reads and writes SD files on stdin and stdout. The command line programs can be executed sequentially. The output SD file can be inspected visually in the KNIME user interface and the standard error output can be inspected for each node. Once the workflow has been developed, the chemalot_knime nodes can be executed as single workflow on UNIX, outside of the KNIME environment to optimize performance. Furthermore, conversion nodes enable the integration with other KNIME nodes to leverage the best of these two worlds.</p>
    <p>This paper introduces the chemalot and chemalot_knime open source packages and demonstrates their use in two drug discovery organizations. It is our hope that other scientists find these tools useful.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Additional files</title>
    <sec id="Sec13">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="13321_2017_228_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1.</bold> Contains a screenshot of the KNIME workflow corresponding to the example command line pipe shown in Fig. <xref rid="Fig9" ref-type="fig">9</xref> and a list with brief description of each command line program.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM2">
          <media xlink:href="13321_2017_228_MOESM2_ESM.sdf">
            <caption>
              <p><bold>Additional file 2.</bold> Contains the structures and data used to create and validate the solubility QSPR model in Fig. <xref rid="Fig10" ref-type="fig">10</xref>.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM3">
          <media xlink:href="13321_2017_228_MOESM3_ESM.txt">
            <caption>
              <p><bold>Additional file 3.</bold> Contains the KNIME workflow shown in Fig. <xref rid="Fig10" ref-type="fig">10</xref>.</p>
            </caption>
          </media>
        </supplementary-material>
        <supplementary-material content-type="local-data" id="MOESM4">
          <media xlink:href="13321_2017_228_MOESM4_ESM.knwf">
            <caption>
              <p><bold>Additional file 4.</bold> Contains the PDB identifiers used to create Fig. <xref rid="Fig11" ref-type="fig">11</xref>.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>CRO</term>
        <def>
          <p>contract research organization</p>
        </def>
      </def-item>
      <def-item>
        <term>DMPK</term>
        <def>
          <p>drug metabolism and pharmacokinetics</p>
        </def>
      </def-item>
      <def-item>
        <term>HTS</term>
        <def>
          <p>high-throughput screening</p>
        </def>
      </def-item>
      <def-item>
        <term>MM</term>
        <def>
          <p>molecular mechanics</p>
        </def>
      </def-item>
      <def-item>
        <term>MW</term>
        <def>
          <p>molecular weight</p>
        </def>
      </def-item>
      <def-item>
        <term>PDB</term>
        <def>
          <p>Protein Data Bank</p>
        </def>
      </def-item>
      <def-item>
        <term>QSPR</term>
        <def>
          <p>quantitative structure–property-relationship</p>
        </def>
      </def-item>
      <def-item>
        <term>RMSD</term>
        <def>
          <p>root mean square deviation</p>
        </def>
      </def-item>
      <def-item>
        <term>RO5</term>
        <def>
          <p>rule of five</p>
        </def>
      </def-item>
      <def-item>
        <term>SD</term>
        <def>
          <p>structure data</p>
        </def>
      </def-item>
      <def-item>
        <term>SAR</term>
        <def>
          <p>structure–activity-relationship</p>
        </def>
      </def-item>
      <def-item>
        <term>ssh</term>
        <def>
          <p>secure shell</p>
        </def>
      </def-item>
      <def-item>
        <term>XML</term>
        <def>
          <p>extensible markup language</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Electronic supplementary material</bold>
      </p>
      <p>The online version of this article (doi:10.1186/s13321-017-0228-9) contains supplementary material, which is available to authorized users.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Authors’ contributions</title>
    <p>AG, BS, JF and ML developed most of the command line programs. ML, AG, TG and BW implemented the chemalot_knime package. TO implemented sdfCFP. AG, BS, JF and ML wrote the initial manuscript. All authors read and approved the final manuscript.</p>
    <sec id="FPar1">
      <title>Acknowledgements</title>
      <p>The authors thank the anonymous internal reviewers at the Genentech for valuable feedback and suggestions on the manuscript and program code. We also thank Tamara Kale for reviewing the legal aspects of the open source release. We thank Michael Berthold, Jeff Blaney, Daniel Ortwine, and Nick Skelton for support and feedback, as well as Matthew Lardy for the release of the autocorrelator package. Additionally, we thank Clyde Jones, Elena Kochetkova, Jim Fitzgerald, Nevin Cheung, and Slaton Lipscomb for setup and maintenance of the UNIX and KNIME server environment.</p>
    </sec>
    <sec id="FPar2">
      <title>Competing interests</title>
      <p>Thomas Gabriel and Bernd Wiswedel work at KNIME.com, the company that develops the open source KNIME Analytics Platform and markets commercial extensions. TJ O’Donnell is the owner of gNova Scientific software developing cheminformatics software and consulting as cheminformatics specialist.</p>
    </sec>
    <sec id="FPar3">
      <title>Availability and requirements</title>
      <p>Project name: chemalot and chemalot_knime.</p>
      <p>Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/chemalot/chemalot/">https://github.com/chemalot/chemalot/</ext-link>. <ext-link ext-link-type="uri" xlink:href="https://github.com/chemalot/chemalot_knime/">https://github.com/chemalot/chemalot_knime/</ext-link>.</p>
      <p>Operating system(s): Platform independent (tested on Linux and Mac), chemalot_knime runs within the KNIME Analytics Platform.</p>
      <p>Programming language: Java, (csh, perl and python wrappers around the java programs).</p>
      <p>Other requirements: Java 1.8 or higher; Command line programs from the autocorrelator open source project; OEChem Toolkit 2015 (commercial license required). A few command line programs require additional license (see online documentation).</p>
      <p>License: chemalot: Apache License. chemalot_knime: GNU General Public License version 3.</p>
      <p>Any restrictions to use: see “Other requirements” and online documentation.</p>
    </sec>
    <sec id="d29e1027">
      <title>Publisher’s Note</title>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </sec>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Douglas McIlroy M (1964) Internal Bell Labs memorandum. [<ext-link ext-link-type="uri" xlink:href="http://doc.cat-v.org/unix/pipes/">http://doc.cat-v.org/unix/pipes/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Berthold MR, Cebron N, Dill F, Gabriel TR, Kötter T, Meinl T, Ohl P, Sieb C, Thiel K, Wiswedel B (2008) KNIME: the Konstanz information miner. In: Proceedings of the 31st annual conference of the Gesellschaft für Klassifikation e data analysis, machine learning and applications. V.: 7–9 March 2007. Springer, Berlin; Preisach C, Burkhardt H, Schmidt-Thieme L, Decker R, pp 319–326</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Demsar</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Curk</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Erjavec</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gorup</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hocevar</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Milutinovic</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Mozina</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Polajnar</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Toplak</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Staric</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Stajdohar</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Umek</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Zagar</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Zbontar</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Zitnik</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Zupan</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Orange: data mining toolbox in Python</article-title>
        <source>J Mach Learn Res</source>
        <year>2013</year>
        <volume>14</volume>
        <fpage>2349</fpage>
        <lpage>2353</lpage>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Pipeline Pilot. [<ext-link ext-link-type="uri" xlink:href="http://accelrys.com/products/collaborative-science/biovia-pipeline-pilot/">http://accelrys.com/products/collaborative-science/biovia-pipeline-pilot/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <mixed-citation publication-type="other">Autocorrelator. [<ext-link ext-link-type="uri" xlink:href="https://code.google.com/p/autocorrelator/">https://code.google.com/p/autocorrelator/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <mixed-citation publication-type="other">Aestel. [<ext-link ext-link-type="uri" xlink:href="http://sourceforge.net/projects/aestel/">http://sourceforge.net/projects/aestel/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gobbi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Giannetti</surname>
            <given-names>AM</given-names>
          </name>
          <name>
            <surname>Chen</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Atom–atom-path similarity and sphere exclusion clustering: tools for prioritizing fragment hits</article-title>
        <source>J Cheminform</source>
        <year>2015</year>
        <volume>7</volume>
        <fpage>11</fpage>
        <pub-id pub-id-type="doi">10.1186/s13321-015-0056-8</pub-id>
        <pub-id pub-id-type="pmid">25866564</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">R Core Team R a language and environment for statistical computing. [<ext-link ext-link-type="uri" xlink:href="https://www.R-project.org">https://www.R-project.org</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Gaussian 09, Revision E.01, Frisch MJ, Trucks GW, Schlegel HB, Scuseria GE, Robb MA, Cheeseman JR et al (2009) Gaussian, Inc., Wallingford CT</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">OpenEye Toolkits (2014) OpenEye Scientific Software, Santa Fe. [<ext-link ext-link-type="uri" xlink:href="http://www.eyesopen.com">http://www.eyesopen.com</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dalby</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nourse</surname>
            <given-names>JG</given-names>
          </name>
          <name>
            <surname>Hounshell</surname>
            <given-names>WD</given-names>
          </name>
          <name>
            <surname>Gushurst</surname>
            <given-names>AKI</given-names>
          </name>
          <name>
            <surname>Grier</surname>
            <given-names>DL</given-names>
          </name>
          <name>
            <surname>Leland</surname>
            <given-names>BA</given-names>
          </name>
          <name>
            <surname>Laufer</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Description of several chemical structure file formats used by computer programs developed at Molecular Design Limited</article-title>
        <source>J Chem Inf Comput Sci</source>
        <year>1992</year>
        <volume>32</volume>
        <issue>3</issue>
        <fpage>244</fpage>
        <lpage>255</lpage>
        <pub-id pub-id-type="doi">10.1021/ci00007a012</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>O’Boyle</surname>
            <given-names>NM</given-names>
          </name>
          <name>
            <surname>Banck</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>James</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Morley</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Vandermeersch</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Hutchison</surname>
            <given-names>GR</given-names>
          </name>
        </person-group>
        <article-title>Open babel: an open chemical toolbox</article-title>
        <source>J Cheminform</source>
        <year>2011</year>
        <volume>3</volume>
        <issue>1</issue>
        <fpage>33</fpage>
        <pub-id pub-id-type="doi">10.1186/1758-2946-3-33</pub-id>
        <pub-id pub-id-type="pmid">21982300</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">Landrum G RDKit: Open-source cheminformatics. [<ext-link ext-link-type="uri" xlink:href="http://www.rdkit.org">http://www.rdkit.org</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Chemical Computing Group. [<ext-link ext-link-type="uri" xlink:href="https://www.chemcomp.com/journal/sdtools.htm">https://www.chemcomp.com/journal/sdtools.htm</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">Cron. [<ext-link ext-link-type="uri" xlink:href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html">http://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">LSF. [<ext-link ext-link-type="uri" xlink:href="http://www-03.ibm.com/systems/platformcomputing/products/lsf/">http://www-03.ibm.com/systems/platformcomputing/products/lsf/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">PBS. [<ext-link ext-link-type="uri" xlink:href="http://www.pbsworks.com/">http://www.pbsworks.com/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">RDKit Nodes for KNIME. [<ext-link ext-link-type="uri" xlink:href="https://tech.knime.org/community/rdkit">https://tech.knime.org/community/rdkit</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <mixed-citation publication-type="other">CDK Nodes for KNIME. [<ext-link ext-link-type="uri" xlink:href="https://tech.knime.org/community/cdk">https://tech.knime.org/community/cdk</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <mixed-citation publication-type="other">Vernalis Nodes for KNIME. [<ext-link ext-link-type="uri" xlink:href="https://tech.knime.org/book/vernalis-nodes-for-knime-trusted-extension">https://tech.knime.org/book/vernalis-nodes-for-knime-trusted-extension</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">Vortex. [<ext-link ext-link-type="uri" xlink:href="http://www.dotmatics.com/products/vortex/">http://www.dotmatics.com/products/vortex/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Liaw</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Wiener</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Classification and regression by randomForest</article-title>
        <source>R News</source>
        <year>2002</year>
        <volume>2</volume>
        <fpage>18</fpage>
        <lpage>22</lpage>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <mixed-citation publication-type="other">randomForest. [<ext-link ext-link-type="uri" xlink:href="https://cran.r-project.org/web/packages/randomForest/index.html">https://cran.r-project.org/web/packages/randomForest/index.html</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <mixed-citation publication-type="other">Lee M, Feng JA, Sellers BD, Gobbi A chemalot. [<ext-link ext-link-type="uri" xlink:href="https://github.com/chemalot/chemalot/">https://github.com/chemalot/chemalot/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <mixed-citation publication-type="other">Lee M, Gabriel T, Wiswedel B, Gobbi A chemalot_knime. [<ext-link ext-link-type="uri" xlink:href="https://github.com/chemalot/chemalot_knime/">https://github.com/chemalot/chemalot_knime/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <mixed-citation publication-type="other">SMARTS Theory Manual Daylight chemical information systems. Santa Fe. [<ext-link ext-link-type="uri" xlink:href="http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html">http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Apache Commons CLI library. [<ext-link ext-link-type="uri" xlink:href="https://commons.apache.org/proper/commons-cli/">https://commons.apache.org/proper/commons-cli/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR28">
      <label>28.</label>
      <mixed-citation publication-type="other">Other Java programs in the package are, for example, SDFGiniCoefficientCalculator, SDFMultiplexer, SDFALogP, SDFConformerSampler, SDFEStateCalculator, SDFMolSeparator, SDFRingSystemExtractor, SdfRMSDNNFinder, SdfRMSDSphereExclusion SDFTopologicalIndexer, SDFTorsionScanner. These programs requires specific manipulation of the input molecules using OEChem API</mixed-citation>
    </ref>
    <ref id="CR29">
      <label>29.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Boström</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Norrby</surname>
            <given-names>PO</given-names>
          </name>
          <name>
            <surname>Liljefors</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Conformational energy penalties of protein-bound ligands</article-title>
        <source>J Comput Aided Mol Des</source>
        <year>1998</year>
        <volume>12</volume>
        <issue>4</issue>
        <fpage>383</fpage>
        <lpage>396</lpage>
        <pub-id pub-id-type="doi">10.1023/A:1008007507641</pub-id>
        <pub-id pub-id-type="pmid">9777496</pub-id>
      </element-citation>
    </ref>
    <ref id="CR30">
      <label>30.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Halgren</surname>
            <given-names>TA</given-names>
          </name>
        </person-group>
        <article-title>MMFF VI MMFF94 s option for energy minimization studies</article-title>
        <source>J Comput Chem</source>
        <year>1999</year>
        <volume>20</volume>
        <fpage>720</fpage>
        <lpage>729</lpage>
        <pub-id pub-id-type="doi">10.1002/(SICI)1096-987X(199905)20:7&lt;720::AID-JCC7&gt;3.0.CO;2-X</pub-id>
      </element-citation>
    </ref>
    <ref id="CR31">
      <label>31.</label>
      <mixed-citation publication-type="other">SZYBKI. [<ext-link ext-link-type="uri" xlink:href="http://www.eyesopen.com/Szybki">http://www.eyesopen.com/Szybki</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR32">
      <label>32.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Grant</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Pickup</surname>
            <given-names>BT</given-names>
          </name>
          <name>
            <surname>Sykes</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Kitchen</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Nicholls</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>A simple formula for dielectric polarisation energies: the Sheffield Solvation Model</article-title>
        <source>Chem Phys Lett</source>
        <year>2007</year>
        <volume>441</volume>
        <issue>1–3</issue>
        <fpage>163</fpage>
        <lpage>166</lpage>
        <pub-id pub-id-type="doi">10.1016/j.cplett.2007.05.008</pub-id>
      </element-citation>
    </ref>
    <ref id="CR33">
      <label>33.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Fonseca</surname>
            <given-names>CM</given-names>
          </name>
          <name>
            <surname>Fleming</surname>
            <given-names>PJ</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Forrest</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Genetic algorithm for multiobjective optimization: formulation, discussion and generalization</article-title>
        <source>Proceedings of the 5th international conference on genetic algorithms</source>
        <year>1993</year>
        <publisher-loc>San Mateo</publisher-loc>
        <publisher-name>Morgan Kaufmann Publishers</publisher-name>
        <fpage>416</fpage>
        <lpage>423</lpage>
      </element-citation>
    </ref>
    <ref id="CR34">
      <label>34.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>René</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Fauber</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>de Boenig</surname>
            <given-names>GL</given-names>
          </name>
          <name>
            <surname>Burton</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Eidenschenk</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Everett</surname>
            <given-names>C</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Minor structural change to tertiary sulfonamide RORc ligands led to opposite mechanisms of action</article-title>
        <source>ACS Med Chem Lett</source>
        <year>2015</year>
        <volume>6</volume>
        <issue>3</issue>
        <fpage>276</fpage>
        <lpage>281</lpage>
        <pub-id pub-id-type="doi">10.1021/ml500420y</pub-id>
        <pub-id pub-id-type="pmid">25815138</pub-id>
      </element-citation>
    </ref>
    <ref id="CR35">
      <label>35.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lipinski</surname>
            <given-names>CA</given-names>
          </name>
          <name>
            <surname>Lombardo</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Dominy</surname>
            <given-names>BW</given-names>
          </name>
          <name>
            <surname>Feeney</surname>
            <given-names>PJ</given-names>
          </name>
        </person-group>
        <article-title>Experimental and computational approaches to estimate solubility and permeability in drug discovery and development settings</article-title>
        <source>Adv Drug Deliv Rev</source>
        <year>2001</year>
        <volume>46</volume>
        <issue>1–3</issue>
        <fpage>3</fpage>
        <lpage>26</lpage>
        <pub-id pub-id-type="doi">10.1016/S0169-409X(00)00129-0</pub-id>
        <pub-id pub-id-type="pmid">11259830</pub-id>
      </element-citation>
    </ref>
    <ref id="CR36">
      <label>36.</label>
      <mixed-citation publication-type="other">DynamicNodeFactory. [<ext-link ext-link-type="uri" xlink:href="https://tech.knime.org/docs/api/org/knime/core/node/DynamicNodeFactory.html">https://tech.knime.org/docs/api/org/knime/core/node/DynamicNodeFactory.html</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR37">
      <label>37.</label>
      <mixed-citation publication-type="other">TIBCO Spotfire. [<ext-link ext-link-type="uri" xlink:href="http://spotfire.tibco.com/">http://spotfire.tibco.com/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR38">
      <label>38.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sander</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Freyss</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>von Korff</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rufener</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>DataWarrior: an open-source program for chemistry aware data visualization and analysis</article-title>
        <source>J Chem Inf Model</source>
        <year>2015</year>
        <volume>55</volume>
        <issue>2</issue>
        <fpage>460</fpage>
        <lpage>473</lpage>
        <pub-id pub-id-type="doi">10.1021/ci500588j</pub-id>
        <pub-id pub-id-type="pmid">25558886</pub-id>
      </element-citation>
    </ref>
    <ref id="CR39">
      <label>39.</label>
      <mixed-citation publication-type="other">AEREA. [<ext-link ext-link-type="uri" xlink:href="https://sourceforge.net/projects/aestel/">https://sourceforge.net/projects/aestel/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR40">
      <label>40.</label>
      <mixed-citation publication-type="other">Apache Groovy. [<ext-link ext-link-type="uri" xlink:href="http://www.groovy-lang.org/">http://www.groovy-lang.org/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR41">
      <label>41.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lee</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Aliagas</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Dotson</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Feng</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Gobbi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Heffron</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>DEGAS: sharing and tracking target compound ideas with external collaborators</article-title>
        <source>J Chem Inf Model</source>
        <year>2011</year>
        <volume>52</volume>
        <issue>2</issue>
        <fpage>278</fpage>
        <lpage>284</lpage>
        <pub-id pub-id-type="doi">10.1021/ci2003297</pub-id>
        <pub-id pub-id-type="pmid">22080614</pub-id>
      </element-citation>
    </ref>
    <ref id="CR42">
      <label>42.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Aliagas</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Gobbi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Heffron</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Ortwine</surname>
            <given-names>DF</given-names>
          </name>
          <name>
            <surname>Zak</surname>
            <given-names>M</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>A probabilistic method to report predictions from a human liver microsomes stability QSAR model: a practical tool for drug discovery</article-title>
        <source>J Comput Aided Mol Des</source>
        <year>2015</year>
        <volume>29</volume>
        <issue>4</issue>
        <fpage>327</fpage>
        <lpage>338</lpage>
        <pub-id pub-id-type="doi">10.1007/s10822-015-9838-3</pub-id>
        <pub-id pub-id-type="pmid">25708388</pub-id>
      </element-citation>
    </ref>
    <ref id="CR43">
      <label>43.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Broccatelli</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Salphati</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Plise</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Cheong</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Gobbi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lee</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Aliagas</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>Predicting passive permeability of drug-like molecules from chemical structure: where are we?</article-title>
        <source>Mol Pharm</source>
        <year>2016</year>
        <volume>13</volume>
        <issue>12</issue>
        <fpage>4199</fpage>
        <lpage>4208</lpage>
        <pub-id pub-id-type="doi">10.1021/acs.molpharmaceut.6b00836</pub-id>
        <pub-id pub-id-type="pmid">27806577</pub-id>
      </element-citation>
    </ref>
    <ref id="CR44">
      <label>44.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wenlock</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Austin</surname>
            <given-names>RP</given-names>
          </name>
          <name>
            <surname>Potter</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Barton</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>A highly automated assay for determining the aqueous equilibrium solubility of drug discovery compounds</article-title>
        <source>J Lab Autom</source>
        <year>2011</year>
        <volume>16</volume>
        <fpage>276</fpage>
        <lpage>284</lpage>
        <pub-id pub-id-type="doi">10.1016/j.jala.2010.10.002</pub-id>
        <pub-id pub-id-type="pmid">21764023</pub-id>
      </element-citation>
    </ref>
    <ref id="CR45">
      <label>45.</label>
      <mixed-citation publication-type="other">
        <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/chembl/assay/inspect/CHEMBL3301364">https://www.ebi.ac.uk/chembl/assay/inspect/CHEMBL3301364</ext-link>
      </mixed-citation>
    </ref>
    <ref id="CR46">
      <label>46.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Berman</surname>
            <given-names>HM</given-names>
          </name>
          <name>
            <surname>Westbrook</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Feng</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Gilliland</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Bhat</surname>
            <given-names>TN</given-names>
          </name>
          <name>
            <surname>Weissig</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Shindyalov</surname>
            <given-names>IN</given-names>
          </name>
          <name>
            <surname>Bourne</surname>
            <given-names>PE</given-names>
          </name>
        </person-group>
        <article-title>The protein data bank</article-title>
        <source>Nucl Acids Res</source>
        <year>2000</year>
        <volume>28</volume>
        <fpage>235</fpage>
        <lpage>242</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/28.1.235</pub-id>
        <pub-id pub-id-type="pmid">10592235</pub-id>
      </element-citation>
    </ref>
    <ref id="CR47">
      <label>47.</label>
      <mixed-citation publication-type="other">Taylor N Proasis. [<ext-link ext-link-type="uri" xlink:href="http://www.desertsci.com/products/proasis3/">http://www.desertsci.com/products/proasis3/</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR48">
      <label>48.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Beresini</surname>
            <given-names>MH</given-names>
          </name>
          <name>
            <surname>Liu</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Dawes</surname>
            <given-names>TD</given-names>
          </name>
          <name>
            <surname>Clark</surname>
            <given-names>KR</given-names>
          </name>
          <name>
            <surname>Orren</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Schmidt</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Small-molecule library subset screening as an aid for accelerating lead identification</article-title>
        <source>J Biomol Screen</source>
        <year>2014</year>
        <volume>19</volume>
        <issue>5</issue>
        <fpage>758</fpage>
        <lpage>770</lpage>
        <pub-id pub-id-type="doi">10.1177/1087057114522515</pub-id>
        <pub-id pub-id-type="pmid">24518067</pub-id>
      </element-citation>
    </ref>
    <ref id="CR49">
      <label>49.</label>
      <mixed-citation publication-type="other">sdwash. [<ext-link ext-link-type="uri" xlink:href="https://www.chemcomp.com/journal/sdtools.htm">https://www.chemcomp.com/journal/sdtools.htm</ext-link>]</mixed-citation>
    </ref>
    <ref id="CR50">
      <label>50.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Feng</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Aliagas</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Bergeron</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Blaney</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Bradley</surname>
            <given-names>EK</given-names>
          </name>
          <name>
            <surname>Koehler</surname>
            <given-names>MFT</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>An integrated suite of modeling tools that empower scientists in structure- and property-based drug design</article-title>
        <source>J Comput Aided Mol Des</source>
        <year>2015</year>
        <volume>29</volume>
        <issue>6</issue>
        <fpage>511</fpage>
        <lpage>523</lpage>
        <pub-id pub-id-type="doi">10.1007/s10822-015-9845-4</pub-id>
        <pub-id pub-id-type="pmid">25921252</pub-id>
      </element-citation>
    </ref>
    <ref id="CR51">
      <label>51.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sellers</surname>
            <given-names>BD</given-names>
          </name>
          <name>
            <surname>Gobbi</surname>
            <given-names>A</given-names>
          </name>
        </person-group>
        <article-title>A comparison of quantum and molecular mechanical methods to estimate strain energy in drug-like fragments</article-title>
        <source>J Chem Inf Model.</source>
        <year>2017</year>
      </element-citation>
    </ref>
  </ref-list>
</back>
