<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">eNeuro</journal-id>
    <journal-id journal-id-type="iso-abbrev">eNeuro</journal-id>
    <journal-id journal-id-type="hwp">eneuro</journal-id>
    <journal-id journal-id-type="publisher-id">eNeuro</journal-id>
    <journal-title-group>
      <journal-title>eNeuro</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2373-2822</issn>
    <publisher>
      <publisher-name>Society for Neuroscience</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">8638679</article-id>
    <article-id pub-id-type="pmid">34764188</article-id>
    <article-id pub-id-type="doi">10.1523/ENEURO.0274-21.2021</article-id>
    <article-id pub-id-type="publisher-id">eN-MNT-0274-21</article-id>
    <article-categories>
      <subj-group subj-group-type="hwp-journal-coll">
        <subject>4</subject>
      </subj-group>
      <subj-group subj-group-type="heading">
        <subject>Research Article: Methods/New Tools</subject>
        <subj-group>
          <subject>History, Teaching, and Public Awareness</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>NEST Desktop, an Educational Application for Neuroscience</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-7720-9211</contrib-id>
        <name>
          <surname>Spreizer</surname>
          <given-names>Sebastian</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">
          <sup>1</sup>
        </xref>
        <xref rid="aff2" ref-type="aff">
          <sup>2</sup>
        </xref>
        <xref rid="aff3" ref-type="aff">
          <sup>3</sup>
        </xref>
        <xref rid="aff4" ref-type="aff">
          <sup>4</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-6304-062X</contrib-id>
        <name>
          <surname>Senk</surname>
          <given-names>Johanna</given-names>
        </name>
        <xref rid="aff3" ref-type="aff">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-3534-6530</contrib-id>
        <name>
          <surname>Rotter</surname>
          <given-names>Stefan</given-names>
        </name>
        <xref rid="aff1" ref-type="aff">
          <sup>1</sup>
        </xref>
        <xref rid="aff2" ref-type="aff">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-2308-5727</contrib-id>
        <name>
          <surname>Diesmann</surname>
          <given-names>Markus</given-names>
        </name>
        <xref rid="aff3" ref-type="aff">
          <sup>3</sup>
        </xref>
        <xref rid="aff5" ref-type="aff">
          <sup>5</sup>
        </xref>
        <xref rid="aff6" ref-type="aff">
          <sup>6</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-4785-708X</contrib-id>
        <name>
          <surname>Weyers</surname>
          <given-names>Benjamin</given-names>
        </name>
        <xref rid="aff4" ref-type="aff">
          <sup>4</sup>
        </xref>
      </contrib>
      <aff id="aff1"><label>1</label>Faculty of Biology, <institution>University of Freiburg</institution>, 79104 Freiburg, <country>Germany</country></aff>
      <aff id="aff2"><label>2</label>Bernstein Center Freiburg, <institution>University of Freiburg</institution>, 79104 Freiburg, <country>Germany</country></aff>
      <aff id="aff3"><label>3</label>Institute of Neuroscience and Medicine (INM-6) and Institute for Advanced Simulation (IAS-6) and Jülich Aachen Research Alliance (JARA)-Institute Brain Structure-Function Relationships (INM-10), <institution>Jülich Research Centre</institution>, 52428 Jülich, <country>Germany</country></aff>
      <aff id="aff4"><label>4</label>Department of Computer Science, <institution>University of Trier</institution>, 54296 Trier, <country>Germany</country></aff>
      <aff id="aff5"><label>5</label>Department of Psychiatry, Psychotherapy and Psychosomatics, School of Medicine, <institution>Rheinisch-Westfälische Technische Hochschule Aachen University</institution>, 52074 Aachen, <country>Germany</country></aff>
      <aff id="aff6"><label>6</label>Department of Physics, Faculty 1, <institution>Rheinisch-Westfälische Technische Hochschule Aachen University</institution>, 52074 Aachen, <country>Germany</country></aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="other">
        <p>The authors declare no competing financial interests.</p>
      </fn>
      <fn fn-type="con">
        <p>Author contributions: S.S. designed research; S.S. performed research; S.S. unpublished reagents/analytic tools; S.S. analyzed data; S.S., J.S., S.R., M.D., and B.W. wrote the paper.</p>
      </fn>
      <fn fn-type="supported-by">
        <p>This work was supported by the European Union’s Horizon 2020 Framework Programme for Research and Innovation under Specific Grant Agreement No. 785907 (Human Brain Project SGA2) and No. 945539 (Human Brain Project SGA3), the Helmholtz Association Initiative and Networking Fund Project Number SO-092 (Advanced Computing Architectures), and the Deutsche Forschungsgemeinschaft (DFG) Excellence Cluster BrainLinks-BrainTools Grant EXC 1086. The High-Performance Computing (HPC) facilities are funded by the state of Baden-Württemberg through bwHPC and DFG Grant INST 39/963-1 FUGG.</p>
      </fn>
      <corresp id="cor1">Correspondence should be addressed to Sebastian Spreizer at <email>spreizer@uni-trier.de</email>.</corresp>
    </author-notes>
    <pub-date pub-type="epreprint">
      <day>11</day>
      <month>11</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>24</day>
      <month>11</month>
      <year>2021</year>
    </pub-date>
    <pub-date pub-type="collection">
      <season>Nov-Dec</season>
      <year>2021</year>
    </pub-date>
    <volume>8</volume>
    <issue>6</issue>
    <elocation-id>ENEURO.0274-21.2021</elocation-id>
    <history>
      <date date-type="received">
        <day>21</day>
        <month>5</month>
        <year>2021</year>
      </date>
      <date date-type="rev-recd">
        <day>20</day>
        <month>8</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>19</day>
        <month>9</month>
        <year>2021</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2021 Spreizer et al.</copyright-statement>
      <copyright-year>2021</copyright-year>
      <copyright-holder>Spreizer et al.</copyright-holder>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open-access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International license</ext-link>, which permits unrestricted use, distribution and reproduction in any medium provided that the original work is properly attributed.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="ENEURO.0274-21.2021.pdf"/>
    <self-uri xlink:role="icon" xlink:href="ENEURO.0274-21.2021g1.jpg"/>
    <abstract>
      <title>Abstract</title>
      <p>Simulation software for spiking neuronal network models matured in the past decades regarding performance and flexibility. But the entry barrier remains high for students and early career scientists in computational neuroscience since these simulators typically require programming skills and a complex installation. Here, we describe an installation-free Graphical User Interface (GUI) running in the web browser, which is distinct from the simulation engine running anywhere, on the student’s laptop or on a supercomputer. This architecture provides robustness against technological changes in the software stack and simplifies deployment for self-education and for teachers. Our new open-source tool, NEST Desktop, comprises graphical elements for creating and configuring network models, running simulations, and visualizing and analyzing the results. NEST Desktop allows students to explore important concepts in computational neuroscience without the need to learn a simulator control language before. Our experiences so far highlight that NEST Desktop helps advancing both quality and intensity of teaching in computational neuroscience in regular university courses. We view the availability of the tool on public resources like the European ICT infrastructure for neuroscience EBRAINS as a contribution to equal opportunities.</p>
    </abstract>
    <kwd-group>
      <kwd>code generation</kwd>
      <kwd>graphical user interface</kwd>
      <kwd>NEST simulator</kwd>
      <kwd>neuronal dynamics</kwd>
      <kwd>teaching</kwd>
      <kwd>web-based application</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>European Union (EU)</funding-source>
        <award-id>785907</award-id>
        <award-id>945539</award-id>
      </award-group>
      <award-group>
        <funding-source>Helmholtz Association Initiative and Networking Fund</funding-source>
        <award-id>SO-092</award-id>
      </award-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution>Deutsche Forschungsgemeinschaft (DFG)</institution>
            <institution-id institution-id-type="doi">10.13039/501100001659</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>EXC 1086</award-id>
      </award-group>
    </funding-group>
    <counts>
      <fig-count count="8"/>
      <table-count count="2"/>
      <equation-count count="0"/>
      <ref-count count="40"/>
      <page-count count="13"/>
      <word-count count="00"/>
    </counts>
    <custom-meta-group>
      <custom-meta>
        <meta-name>cover-date</meta-name>
        <meta-value>November/December 2021</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec sec-type="intro" id="s1">
    <title>Significance Statement</title>
    <p>The Graphical User Interface (GUI) NEST Desktop makes neuronal network simulations accessible to non-programmers. It facilitates the interactive exploration of neuronal network models by integrating the whole workflow of wiring up the network, simulating the neuronal dynamics, and analyzing the recorded activity data into a single tool. NEST Desktop effectively supports teaching the concepts and methods of computational neuroscience. Because of its installation-free web-based implementation, it is particularly suitable for online courses.</p>
  </sec>
  <sec sec-type="intro" id="s2">
    <title>Introduction</title>
    <p>Complementary to experiment and theory, simulations of computational models represent an essential research tool in neuroscience. Neuronal network models integrate available knowledge of the brain’s individual constituents and their complex interactions with the aim to simulate neuronal activity matching data observed experimentally (<xref rid="B38" ref-type="bibr">Tikidji-Hamburyan et al., 2017</xref>). Dedicated open-source software tools, partially with decades of ongoing development and maintenance (<xref rid="B3" ref-type="bibr">Brette et al., 2007</xref>), promote the reproducibility of simulations, reuse and extension of code, and efficient usage of hardware. Many of these tools rely on textual, general-purpose programming languages (<xref rid="B14" ref-type="bibr">Einevoll et al., 2019</xref>) primarily designed for routine use by specialized researchers. Computational neuroscience, however, is an interdisciplinary field, and scientists without strong background in programming often struggle to get started with the concepts and usage of simulators. Often enough, they shipwreck because of the complex installation of the software. To lower the entry barrier for these tools, and to provide access for non-programmers, a number of simulation engines has been equipped with Graphical User Interfaces (GUIs) to easily control simulations or explore network activity (for an overview, see <xref rid="T1" ref-type="table">Table 1</xref>).</p>
    <table-wrap position="float" id="T1">
      <label>Table 1</label>
      <caption>
        <p>History of GUI development in computational neuroscience</p>
      </caption>
      <table frame="hsides" rules="none">
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <thead>
          <tr>
            <th align="left" rowspan="1" colspan="1">Development</th>
            <th align="left" rowspan="1" colspan="1">GUI</th>
            <th align="left" rowspan="1" colspan="1">Simulator</th>
            <th align="left" rowspan="1" colspan="1">Environment</th>
            <th align="left" rowspan="1" colspan="1">Reference</th>
          </tr>
        </thead>
        <tbody valign="top">
          <tr>
            <td rowspan="1" colspan="1">1992</td>
            <td align="left" rowspan="1" colspan="1">GENESIS GUI</td>
            <td align="left" rowspan="1" colspan="1">GENESIS</td>
            <td align="char" char="." rowspan="1" colspan="1">x11</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B2" ref-type="bibr">Bower and Beeman (2012)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">1993</td>
            <td align="left" rowspan="1" colspan="1">NEURON GUI</td>
            <td align="left" rowspan="1" colspan="1">NEURON</td>
            <td align="char" char="." rowspan="1" colspan="1">x11</td>
            <td align="left" rowspan="1" colspan="1"><xref rid="B22" ref-type="bibr">Hines (1993)</xref>, <xref rid="B23" ref-type="bibr">Hines and Carnevale (1997)</xref></td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">1995</td>
            <td align="left" rowspan="1" colspan="1">SLIDE</td>
            <td align="left" rowspan="1" colspan="1">NEST</td>
            <td align="char" char="." rowspan="1" colspan="1">x11</td>
            <td align="left" rowspan="1" colspan="1"><xref rid="B26" ref-type="bibr">Matyak (1996)</xref>, <xref rid="B18" ref-type="bibr">Gewaltig et al. (1996)</xref></td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2007</td>
            <td align="left" rowspan="1" colspan="1">neuroConstruct</td>
            <td align="left" rowspan="1" colspan="1">multiple</td>
            <td align="char" char="." rowspan="1" colspan="1">x11</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B19" ref-type="bibr">Gleeson et al. (2007)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2008</td>
            <td align="left" rowspan="1" colspan="1">SNN3DViewer</td>
            <td align="left" rowspan="1" colspan="1">none</td>
            <td align="char" char="." rowspan="1" colspan="1">x11</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B24" ref-type="bibr">Kasiński et al. (2009)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2009</td>
            <td align="left" rowspan="1" colspan="1">Neuronvisio</td>
            <td align="left" rowspan="1" colspan="1">NEURON</td>
            <td align="left" rowspan="1" colspan="1">x11 (qt4)</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B25" ref-type="bibr">Mattioni et al. (2012)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2011</td>
            <td align="left" rowspan="1" colspan="1">nuSPIC</td>
            <td align="left" rowspan="1" colspan="1">NEST</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B39" ref-type="bibr">Vlachos et al. (2013)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2012</td>
            <td align="left" rowspan="1" colspan="1">The Virtual Brain (TVB)</td>
            <td align="left" rowspan="1" colspan="1">TVB</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B31" ref-type="bibr">Sanz Leon et al. (2013)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2013</td>
            <td align="left" rowspan="1" colspan="1">N2A (Neurons to Algorithms)</td>
            <td align="left" rowspan="1" colspan="1">multiple</td>
            <td align="left" rowspan="1" colspan="1">x11 (qt5)</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B30" ref-type="bibr">Rothganger et al. (2014)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2013</td>
            <td align="left" rowspan="1" colspan="1">SpineCreator</td>
            <td align="left" rowspan="1" colspan="1">PyNN</td>
            <td align="left" rowspan="1" colspan="1">x11 (qt5)</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B9" ref-type="bibr">Cope et al. (2017)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2013</td>
            <td align="left" rowspan="1" colspan="1">VisNEST</td>
            <td align="left" rowspan="1" colspan="1">none (NEST)</td>
            <td align="left" rowspan="1" colspan="1">VR</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B27" ref-type="bibr">Nowke et al. (2013)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2014</td>
            <td align="left" rowspan="1" colspan="1">Neuronify</td>
            <td align="left" rowspan="1" colspan="1">Neuronify</td>
            <td align="left" rowspan="1" colspan="1">x11 (qt5)</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B12" ref-type="bibr">Dragly et al. (2017)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2014</td>
            <td align="left" rowspan="1" colspan="1">Open Source Brain (OSB)</td>
            <td align="left" rowspan="1" colspan="1">PyNN</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B20" ref-type="bibr">Gleeson et al. (2019)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2015</td>
            <td align="left" rowspan="1" colspan="1">Nengo GUI</td>
            <td align="left" rowspan="1" colspan="1">Nengo</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <ext-link xlink:href="https://github.com/nengo/nengo-gui" ext-link-type="uri">https://github.com/nengo/nengo-gui</ext-link>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2015</td>
            <td align="left" rowspan="1" colspan="1">ViSimpl</td>
            <td align="left" rowspan="1" colspan="1">none</td>
            <td align="left" rowspan="1" colspan="1">x11 (qt5)</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B16" ref-type="bibr">Galindo et al. (2016)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2016</td>
            <td align="left" rowspan="1" colspan="1">
              <bold>NEST Desktop</bold>
            </td>
            <td align="left" rowspan="1" colspan="1">NEST</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <ext-link xlink:href="https://github.com/nest-desktop/nest-desktop" ext-link-type="uri">https://github.com/nest-desktop/nest-desktop</ext-link>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2016</td>
            <td align="left" rowspan="1" colspan="1">VIOLA</td>
            <td align="left" rowspan="1" colspan="1">none</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B32" ref-type="bibr">Senk et al. (2018)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2016</td>
            <td align="left" rowspan="1" colspan="1">Visbrain</td>
            <td align="left" rowspan="1" colspan="1">none</td>
            <td align="left" rowspan="1" colspan="1">x11 (qt5)</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B8" ref-type="bibr">Combrisson et al. (2019)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2017</td>
            <td align="left" rowspan="1" colspan="1">NESTInstrumentationApp</td>
            <td align="left" rowspan="1" colspan="1">NEST</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <ext-link xlink:href="https://github.com/compneuronmbu" ext-link-type="uri">https://github.com/compneuronmbu</ext-link>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2017</td>
            <td align="left" rowspan="1" colspan="1">NetPyNE UI</td>
            <td align="left" rowspan="1" colspan="1">NetPyNE</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B13" ref-type="bibr">Dura-Bernal et al. (2019)</xref>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2017</td>
            <td align="left" rowspan="1" colspan="1">NEURON UI</td>
            <td align="left" rowspan="1" colspan="1">NEURON</td>
            <td align="left" rowspan="1" colspan="1">HTML</td>
            <td align="left" rowspan="1" colspan="1">
              <ext-link xlink:href="https://github.com/MetaCell/NEURON-UI" ext-link-type="uri">https://github.com/MetaCell/NEURON-UI</ext-link>
            </td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">2018</td>
            <td align="left" rowspan="1" colspan="1">CellExplorer</td>
            <td align="left" rowspan="1" colspan="1">none</td>
            <td align="left" rowspan="1" colspan="1">x11 (qt5)</td>
            <td align="left" rowspan="1" colspan="1">
              <xref rid="B28" ref-type="bibr">Petersen et al. (2021)</xref>
            </td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="TF1">
          <p>GUIs are ordered chronologically according to the estimated beginning of their development phase (mentioned in a paper or first commit in a public repository). Most GUIs are coupled with a simulation engine in a specific front end environment. If a GUI is independent of specific simulators, the respective entry is “none”. “none (NEST)” in the case of VisNEST means that the application has full operational function without the simulator NEST but it can be connected to it. For more information, the last column lists the corresponding publications or refers to the source code.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>With our present work, we focus on college and university students as a specific user group where significant programming skills cannot be assumed. We present a web-based software tool, which has been specifically developed to support education and training of basic computational neuroscience for individual learners and classroom teaching. In addition, it is suited for online courses. The main educational objective is to develop solid understanding of how numerical simulations can be employed as a meaningful research tool in neuroscience. The methodological question is how the anatomy, physiology, and biophysics of neuronal systems should be translated into specific algorithmic components of a numerical simulation. Our didactic strategy is to enable exciting hands-on experience and rewarding results without delay and without big effort. The concept appeals to common sense and scientific intuition. It makes students enjoy the lessons, and invites independent creative research. For a successful implementation, we seek a framework that fulfills the following requirements. First, the tool needs to offer functionality that enables students to create a neuronal network model visually and interactively. Thus, there is no need for programming at this stage and the focus lies more on the neuroscientific questions. Second, there is the need to inspect the simulation results, in the sense of a constructive approach in learning (<xref rid="B7" ref-type="bibr">Clark and Mayer, 2011</xref>; <xref rid="B10" ref-type="bibr">de Jong et al., 2013</xref>). For this purpose, a simulator needs to be loaded with the model and executed, and it should then offer an easy-to-understand presentation of the results. This can then be the basis of a new iteration with an adapted model. Third, the tool should offer the use of standard models, storing and loading previous models as well as the creation of reports. Finally, the tool needs a high level of usability, should be easy to install, and scale up to a classroom size number of users.</p>
    <p>The tool presented in this work is called NEST Desktop and aims to convey the structural and dynamical behavior of biological neuronal networks by addressing the requirements listed above. Building on what students with a general background in neuroscience are already familiar with, virtual experiments are conducted in similar steps, and described with similar terminology as known from biological experiments. Designed around the concept of constructivistic experimenting and fast prototyping, NEST Desktop allows users to explore key aspects of neuronal network modeling via a GUI: network construction and parameterization, running simulations, data analysis, and documentation can all be performed by means of interactive visualization (<xref rid="F1" ref-type="fig">Fig. 1</xref>). In the background, NEST Desktop uses the NEural Simulation Tool (NEST; <xref rid="B17" ref-type="bibr">Gewaltig and Diesmann, 2007</xref>) as a reference simulation engine. NEST focuses on small to large networks of spiking neurons and comprises a collection of simple and more biophysically detailed neuron models. NEST Desktop is installation-free and requires only a modern web browser.</p>
    <fig position="float" id="F1" fig-type="figure">
      <label>Figure 1.</label>
      <caption>
        <p>NEST Desktop workflow enables fast prototyping of neuronal network simulations. The GUI allows the user to control network construction, simulation, data analysis, and archiving via graphical elements. All these steps can be executed consecutively and repeatedly to explore model properties and resulting network dynamics. Constructing a network involves the selection and connection of nodes as well as their parameterization (“construct”, left). After the simulation of a constructed network (“simulate”, top), recorded analog signals and spiking activity can be assessed in various charts (“analyze”, right). The user is also able to export and archive networks and results for documentation and later use (“archive”, bottom).</p>
      </caption>
      <graphic xlink:href="ENEURO.0274-21.2021_f001" position="float"/>
    </fig>
    <p>In Materials and Methods, we elucidate technical details of NEST Desktop. In Results, we describe the main components and functionality of NEST Desktop and exemplify its usage with a use case about teaching in a classroom and supporting research. We have previously employed NEST Desktop in university courses and were able to make the experience that NEST Desktop successfully supports students to complete the course also in times of online courses because of the COVID-19 pandemic. The Discussion embeds the work in the state of research and reflects on general achievements, current limitations, and potential future developments. Preliminary results have been published in abstract form (<xref rid="B35" ref-type="bibr">Spreizer, 2018</xref>; <xref rid="B36" ref-type="bibr">Spreizer et al., 2019</xref>, <xref rid="B37" ref-type="bibr">2020</xref>).</p>
  </sec>
  <sec sec-type="materials|methods" id="s3">
    <title>Materials and Methods</title>
    <sec id="s3A">
      <title>Client-server architecture</title>
      <p>NEST Desktop uses a client-server architecture (<xref rid="F2" ref-type="fig">Fig. 2<italic toggle="yes">A</italic>,<italic toggle="yes">B</italic></xref>): the client provides the GUI as front end and handles network construction, simulation-code generation, and analysis of activity data (<xref rid="F2" ref-type="fig">Fig. 2<italic toggle="yes">B</italic></xref>, purple row); the server runs the simulation engine NEST (<xref rid="B17" ref-type="bibr">Gewaltig and Diesmann, 2007</xref>) as back end and executes the simulation code (<xref rid="F2" ref-type="fig">Fig. 2<italic toggle="yes">B</italic></xref>, yellow row). This separation enables a lightweight and platform-independent implementation of NEST Desktop as a web application. The deployment of a NEST installation and an execution environment with sufficient computational resources is provided by the running infrastructure and is therefore outside of the user’s responsibility. However, this architecture requires the back end to remain stateless, which means that the data of the simulation (network model and simulation results) are stored only on the client side.</p>
      <fig position="float" id="F2" fig-type="figure">
        <label>Figure 2.</label>
        <caption>
          <p>Workflow in client-server architecture and technical challenges. <bold><italic toggle="yes">A</italic></bold>, Simplified relationship of the client (front end) and the server (back end). <bold><italic toggle="yes">B</italic></bold>, The front end handles network construction and data analysis, whereas the back end executes simulations with NEST (<xref rid="B17" ref-type="bibr">Gewaltig and Diesmann, 2007</xref>). <bold><italic toggle="yes">C</italic></bold>, Problem formulations regarding the software architecture (left column) together with the technical solutions implemented in NEST Desktop (center column) and associated examples (right column).</p>
        </caption>
        <graphic xlink:href="ENEURO.0274-21.2021_f002" position="float"/>
      </fig>
      <p>Standard data formats are used for communication to ensure compatibility of these front end and back end systems. NEST 3 (<xref rid="B21" ref-type="bibr">Hahne et al., 2021</xref>) offers “API server” as a server-side wrapper of NEST Simulator in Python, which enables the communication of NEST Desktop as GUI on the client side (i.e., in the browser) and “NEST Simulator” (or just “NEST”) as simulation engine on the server side. NEST Desktop and NEST Simulator use JSON for the server-to-browser (stateless) communication over standard HTTP as communication protocol. JSON is a language-independent data format which can be applied in JavaScript, enabling interactive web pages, and is interpretable by most programming languages including Python.</p>
    </sec>
    <sec id="s3B">
      <title>Front end implementation</title>
      <p>The GUI as a front end (<xref rid="F2" ref-type="fig">Fig. 2</xref>, purple rows) makes use of modern web technologies (e.g., responsive design) and external open-source libraries based on HTML5 and JavaScript. NEST Desktop 3 is based on the open-source web application framework Vue.js (<ext-link xlink:href="https://vuejs.org" ext-link-type="uri">https://vuejs.org</ext-link>), which provides a collection of standard GUI widgets and components. The GUI styles offered by Vuetify (<ext-link xlink:href="https://vuetifyjs.com" ext-link-type="uri">https://vuetifyjs.com</ext-link>) are already used in many other applications and, thus, offer a certain level of consistency in the GUI design for NEST Desktop. The application NEST Desktop runs solely in the web browser of the user. Data of projects, models, and app settings are stored on the local system running the browser.</p>
      <p>The visual components of NEST Desktop rely on various JavaScript libraries (<xref rid="F2" ref-type="fig">Fig. 2<italic toggle="yes">C</italic></xref>). Graphical representations of neuronal networks use D3.js (<ext-link xlink:href="https://d3js.org" ext-link-type="uri">https://d3js.org</ext-link>). Interactive charts to display simulated activity are realized with Plotly.js (<ext-link xlink:href="https://plot.ly/javascript" ext-link-type="uri">https://plot.ly/javascript</ext-link>). 3D animated renderings of activity data resulting from simulations of spatially structured networks use Three.js (<ext-link xlink:href="https://threejs.org" ext-link-type="uri">https://threejs.org</ext-link>).</p>
      <p>For data handling, NEST Desktop uses PouchDB to store data in IndexDB which is by default built into the web browser. PouchDB is a JavaScript-based library for CouchDB and manages databases with a version-control system.</p>
    </sec>
    <sec id="s3C">
      <title>Back end implementation</title>
      <p>The back end (<xref rid="F2" ref-type="fig">Fig. 2</xref>, yellow rows) hosts first and foremost the simulation engine NEST and it is programmed in Python 3 in conjunction with generic C++. The interface is set up such that the user can directly communicate with NEST via NEST Desktop. NEST Simulator predefines models for neurons, devices, and synapses that are directly selectable in the GUI. Detailed model descriptions can be requested from the NEST Simulator via a RESTful API.</p>
    </sec>
    <sec id="s3D">
      <title>Development, installation, and documentation</title>
      <p>The development of NEST Desktop (<xref rid="F3" ref-type="fig">Fig. 3</xref>) follows a community approach. The source code is open-source and available on the GitHub platform (<xref rid="F3" ref-type="fig">Fig. 3</xref>, middle left, <ext-link xlink:href="https://github.com/nest-desktop/nest-desktop" ext-link-type="uri">https://github.com/nest-desktop/nest-desktop</ext-link>) under the MIT License. The software development follows the GIT workflow and ESLint enforces that style, formatting, and coding standards of the code base are adhered to.</p>
      <fig position="float" id="F3" fig-type="figure">
        <label>Figure 3.</label>
        <caption>
          <p>Software development and documentation of NEST Desktop. The code is open source and available on GitHub. The development of NEST Desktop makes use of PyPI and Docker Hub. An associated docker image containing NEST Desktop together with the simulator NEST can be pulled on any local machine or server infrastructure. The ReadTheDocs platform provides detailed information about NEST Desktop for users, lecturers, deployers, and developers.</p>
        </caption>
        <graphic xlink:href="ENEURO.0274-21.2021_f003" position="float"/>
      </fig>
      <p>Running NEST Desktop requires the installation of both the front end NEST Desktop itself and the NEST Simulator as the back end. Both components need to work together. The main reference for installation instructions is the online documentation on the ReadTheDocs platform (<xref rid="F3" ref-type="fig">Fig. 3</xref>, bottom left, <ext-link xlink:href="https://nest-desktop.readthedocs.io" ext-link-type="uri">https://nest-</ext-link><ext-link xlink:href="https://nest-desktop.readthedocs.io" ext-link-type="uri">desktop.readthedocs.io</ext-link>). Here, we limit ourselves to an overview and highlight some alternative approaches for setting up NEST Desktop.</p>
      <p>For the easiest local installation, we provide virtual Docker containers (<xref rid="F3" ref-type="fig">Fig. 3</xref>, top right) for NEST Desktop and NEST Simulator which can be installed together using Docker Compose with the configuration file docker-compose.yml and a single command: <monospace>docker-compose up</monospace>. Since Docker is available for different operating systems (Linux, Windows, and Mac), this approach allows to provide and use the Linux-based ecosystem of NEST Desktop not only on a local laptop but also on a wide range of other infrastructures (<xref rid="F3" ref-type="fig">Fig. 3</xref>, middle right). NEST Desktop has already been deployed on EBRAINS (<ext-link xlink:href="https://ebrains.eu/service/nest-desktop" ext-link-type="uri">https://ebrains.eu/service/nest-desktop</ext-link>), the European research infrastructure developed by the Human Brain Project (<ext-link xlink:href="https://humanbrainproject.eu" ext-link-type="uri">https://humanbrainproject.eu</ext-link>). Everyone with an EBRAINS account can use NEST Desktop there online without any installation. Furthermore, NEST Desktop was temporarily deployed on bwCloud (<ext-link xlink:href="https://www.bw-cloud.org" ext-link-type="uri">https://www.bw-cloud.org</ext-link>), a university-internal cloud computing resource for teaching purposes. NEST Desktop is installation-free in the sense that a computer center can provide NEST Desktop as a service such that the user only requires a web browser.</p>
      <p>As an alternative, NEST Desktop and NEST Simulator can be obtained separately. On Docker Hub, there is a dedicated image for NEST Desktop (<ext-link xlink:href="https://hub.docker.com/r/nestdesktop/app" ext-link-type="uri">https://hub.docker.com/r/nestdesktop/app</ext-link>). NEST Simulator can also be obtained from Docker Hub via the official NEST repository (<ext-link xlink:href="https://hub.docker.com/r/nestsim/nest" ext-link-type="uri">https://hub.docker.com/r/nestsim/nest</ext-link>). For advanced users, the front end NEST Desktop is in addition available as a Python Package (<ext-link xlink:href="https://pypi.org/project/nest-desktop" ext-link-type="uri">https://pypi.org/project/nest-desktop</ext-link>) published on Python Package Index (PyPI), a third-party software repository for Python, and can be installed with the pip package manager (<xref rid="F3" ref-type="fig">Fig. 3</xref>, top left): <monospace>pip3 install nest-desktop</monospace>. Since NEST 3, a full installation of NEST Simulator on the host system will also provide the API server for RESTful requests. If NEST Desktop and NEST Simulator are installed separately, they can be started with <monospace>nest-desktop start</monospace> and <monospace>nest-server start</monospace>, respectively, after which the GUI opens in the web browser and is connected to the simulation engine.</p>
      <p>Beyond installation instructions, the documentation of NEST Desktop on ReadTheDocs explains the usage of NEST Desktop by step-by-step examples using text, animations, and video tutorials. The documentation is organized in separate sections for users, lecturers, deployers, and developers. The user documentation guides users to build networks, parameterize nodes and connections, and perform simulations. Lecturers learn how to deliver course material using NEST Desktop. Deployers find instructions to set up NEST Desktop on a machine via the Python Package or using Docker or Singularity installations instead. Developers get first insights into the code base of NEST Desktop and are welcome to contribute. To facilitate getting started with NEST Desktop, a few example projects with simple network models are also integrated into the tool and can directly be inspected and modified by a new user.</p>
    </sec>
  </sec>
  <sec sec-type="results" id="s4">
    <title>Results</title>
    <p>NEST Desktop implements the whole conceptual workflow of neuronal network simulations (<xref rid="F1" ref-type="fig">Fig. 1</xref>) in a common GUI running in the web browser (<xref rid="F4" ref-type="fig">Fig. 4</xref>). Users can seamlessly switch between three views with different functionality: the “network editor” (<xref rid="F4" ref-type="fig">Fig. 4<italic toggle="yes">A</italic></xref>) for graphical network construction and parameterization, the “activity explorer” (<xref rid="F4" ref-type="fig">Fig. 4<italic toggle="yes">B</italic></xref>) for analyzing activity data after a simulation run, and the “lab book” (<xref rid="F4" ref-type="fig">Fig. 4<italic toggle="yes">C</italic></xref>) for the project overview. The following provides details on these views and their related functionality, then illustrates a fictive use case about the tool’s employment in the classroom and beyond.</p>
    <fig position="float" id="F4" fig-type="figure">
      <label>Figure 4.</label>
      <caption>
        <p>Network editor, activity explorer, and lab book share a common user interface. The steps of NEST Desktop’s conceptual approach for rapid prototyping (right; adapted from <xref rid="F1" ref-type="fig">Fig. 1</xref>) correspond to the distinct views of the tool. <bold><italic toggle="yes">A</italic></bold>, The network editor provides interactive construction and modification of the neuronal network. <bold><italic toggle="yes">B</italic></bold>, The activity explorer visualizes network activity. <bold><italic toggle="yes">C</italic></bold>, The lab book gives users a complete picture of a constructed network. The project manager is shown on the left.</p>
      </caption>
      <graphic xlink:href="ENEURO.0274-21.2021_f004" position="float"/>
    </fig>
    <sec id="s4A">
      <title>Graphical construction of neuronal networks in the network editor</title>
      <p>The network editor allows the visual construction of a network graph by selecting and assembling node and connection elements (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">A</italic></xref>). The appearance of those elements is inspired by the graphical notation proposed by <xref rid="B33" ref-type="bibr">Senk et al. (2021)</xref>.</p>
      <fig position="float" id="F5" fig-type="figure">
        <label>Figure 5.</label>
        <caption>
          <p>Visual network construction. <bold><italic toggle="yes">A</italic></bold>, The network editor is the main work space to graphically construct a network graph (left) and adjust network properties with the controller panel (right). Stacks of node and connection parameters associated with the chosen models are displayed in colored panels. <bold><italic toggle="yes">B</italic></bold>, A right click with the mouse in the blank space of the editor opens a creation panel (left) to add a node to the network. Node types are stimulator (S), neuron (N), and recorder (R). Connections between nodes are drawn with the mouse cursor (top right). A minimal network may consist of a stimulator, a neuron, and a recorder (bottom right). <bold><italic toggle="yes">C</italic></bold>, The network controller to the right of the network graph allows users to select and parameterize models. Clicking once on the model name (top left) opens a popup for selecting parameters via checkboxes (middle); clicking there twice allows the user to select a different model from a drop-down menu (bottom left). When a subset of model parameters is selected, the corresponding values can be modified (right) by moving sliders, incrementally increasing and decreasing the value, or by directly entering the value. A restart of NEST Desktop is also possible.</p>
        </caption>
        <graphic xlink:href="ENEURO.0274-21.2021_f005" position="float"/>
      </fig>
      <p>Clicking the right mouse button in the network graph area triggers the creation of a new node (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">B</italic></xref>, left). A pie menu shows the available node types to choose from. Node types are distinguishable by unique shapes. Stimulator (S) nodes have a hexagon shape; they act as input devices that produce signals to be transmitted toward target nodes. Recorder (R) nodes have a parallelogram shape; they represent devices that record signals emitted by other nodes. Neuron (N) nodes integrate the input they receive from other nodes and transform them to recordable outputs. Per default, neuron nodes are of a general type and depicted as squares. The neuron node type can be refined further when nodes are connected. Nodes get distinct colors, which help to associate them with their respective parameter settings and simulated activity throughout the tool.</p>
      <p>A directed connection between two nodes is established by clicking first on the connector of a source node and then on a target node (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">B</italic></xref>, right). Selecting the same node both as source and target is also allowed. The arrow representing the connection has the same color as the source node. If all connections from a particular source neuron node to other neuron nodes are parameterized with positive weights, the type of the source neuron node gets refined to be excitatory; if all outgoing weights are negative, the node is inhibitory. Excitatory neuron nodes have triangular shapes resembling pyramidal neurons, and inhibitory ones have a circular shape.</p>
      <p>Nodes and connections are configured via the controller panel to the right of the network graph area (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">A</italic></xref>, right). The user can specify properties of the graph elements by choosing predefined models, selecting a parameter subset for these models, and modifying their values (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">C</italic></xref>). One mouse click on the header with the current model name enables the parameter selection for that model, and a second click opens a menu for changing the model. The available models depend on the node type (stimulator, neuron, or recorder), and each of them has its own set of parameters. The models are all part of NEST, and the user can query the available model descriptions from the NEST source code. A neuron node, for instance, may represent a whole population of individual neurons sharing the same model. The parameters can then either be the same for all neurons of the population or sampled from an array or from a random distribution (in “expert mode”). Optionally, users can also assign spatial positions to neurons or stimulating devices in the network.</p>
      <p>The user can specify properties of the graph elements by, first, choosing predefined models via a drop-down menu and, second, adjusting its parameter values with sliders or by directly typing the numbers (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">C</italic></xref>). A neuron node, for instance, may represent a whole population of individual neurons sharing the same model. Each of the available models is part of NEST and has its own set of parameters and the user can query the available model descriptions. Optionally, users can assign spatial positions to neurons or stimulating devices in the network.</p>
      <p>During editing, each change of the network is logged such that the user can go back in history and undo and redo changes.</p>
    </sec>
    <sec id="s4B">
      <title>Code generation from the network graph</title>
      <p>The network graph is automatically rendered into executable PyNEST (<xref rid="B15" ref-type="bibr">Eppler et al., 2009</xref>) code with a direct correspondence between graphical elements and textual code snippets (<xref rid="F6" ref-type="fig">Fig. 6</xref>). PyNEST is the Python interface to the simulation engine NEST (<xref rid="B17" ref-type="bibr">Gewaltig and Diesmann, 2007</xref>). The script is structured in blocks that are produced in the same order as they are executed in the back end when a simulation run is inquired. First, the technical setup of the simulator is added to the script: modules are imported and further parameters can be defined to be passed to the simulation kernel. The following code lines in <xref rid="F6" ref-type="fig">Figure 6</xref> account for creating and connecting the nodes as defined by the user in the network editor. Afterwards, the command for initiating the state-propagation phase is defined, which is the actual simulation. The last block contains the code for collecting the recorded network activity data for subsequent visualization and analysis in the activity explorer. Clicking the “Simulate” button triggers the execution of this code with NEST.</p>
      <fig position="float" id="F6" fig-type="figure">
        <label>Figure 6.</label>
        <caption>
          <p>Code generation through visual network construction. The graphically composed network (<xref rid="F5" ref-type="fig">Fig. 5</xref>) is automatically translated into textual source code. Visual elements in the network graph (shapes for nodes and arrows for connections) are associated with generated code lines. The resulting script is a complete definition of a simulation experiment in PyNEST with code blocks to be executed in succession: Create nodes, Connect nodes, Start simulation, and Get activity. The sketched network of only three connected nodes (stimulator to neuron to recorder) is a minimal example for illustration; further details such as parameter values set via the GUI are also turned into code.</p>
        </caption>
        <graphic xlink:href="ENEURO.0274-21.2021_f006" position="float"/>
      </fig>
    </sec>
    <sec id="s4C">
      <title>Interactive data analysis with the activity explorer</title>
      <p>Dependent on properties and parameterization of recording devices in the constructed network, different types of activity data are returned from NEST for inspection in the activity explorer. The data comprises unique IDs of sending neurons and so-called events, which are either spikes (discrete time stamps) or quasi-analog signals, e.g., membrane potentials (sampled in given time intervals). The charts in <xref rid="F7" ref-type="fig">Figure 7</xref>, bottom left panel, show vertically arranged traces of membrane potentials as line graphs, a spike raster as scatter plot, and computed spike counts across time as histogram. If the data additionally contains neuron positions in 2D or 3D space, the activity can also be animated in a 3D graph (<xref rid="F7" ref-type="fig">Fig. 7</xref>, bottom right). Beside the visual analysis, NEST Desktop also has the possibility to display basic spike-train statistics in table format. <xref rid="F7" ref-type="fig">Figure 7</xref>, top right panel, demonstrates such a table with statistics calculated from the raw data.</p>
      <fig position="float" id="F7" fig-type="figure">
        <label>Figure 7.</label>
        <caption>
          <p>Data analysis and visualization. The NEST simulator executes the network simulation and returns recorded activity data to be analyzed and visualized (top left). Quasi-analog signals like membrane potentials and discrete spike times can be displayed across time (bottom left). Such visualization is accompanied by basic analysis like the computation of spike counts. If the neurons in the simulated network are arranged in space, a 2D or 3D animation offers a view of the ongoing activity at the respective neuronal positions (bottom right). Calculated quantities are presented in table format (top right).</p>
        </caption>
        <graphic xlink:href="ENEURO.0274-21.2021_f007" position="float"/>
      </fig>
    </sec>
    <sec id="s4D">
      <title>Project management and image export</title>
      <p>NEST Desktop sessions are treated as projects and handled by the project manager (<xref rid="F8" ref-type="fig">Fig. 8<italic toggle="yes">A</italic></xref>, top): one can either start a new project and construct a network from scratch or load a previously saved project to extend an existing network structure. Existing projects, set up and saved at another time or on another machine, can be duplicated, updated, or deleted. Projects are synchronized with a built-in database in the browser on the client-side, but they can also be exported to and loaded from file (<xref rid="F8" ref-type="fig">Fig. 8<italic toggle="yes">A</italic></xref>, bottom).</p>
      <fig position="float" id="F8" fig-type="figure">
        <label>Figure 8.</label>
        <caption>
          <p>Project archiving and image export. <bold><italic toggle="yes">A</italic></bold>, Previously constructed networks (<xref rid="F5" ref-type="fig">Fig. 5</xref>) can be stored in a database within NEST Desktop or exported to a file for later reloading. An example list of saved, loadable projects is shown. <bold><italic toggle="yes">B</italic></bold>, The network graph and its description can be captured as screenshot. <bold><italic toggle="yes">C</italic></bold>, Charts visualizing activity data (<xref rid="F7" ref-type="fig">Fig. 7</xref>) allow for export to either a rendered image (.png) or a vector graphic (.svg).</p>
        </caption>
        <graphic xlink:href="ENEURO.0274-21.2021_f008" position="float"/>
      </fig>
      <p>Apart from saving the status of a project, NEST Desktop also encourages the export of figures showing network definitions or activity charts to protocol observations. Particularly suitable for this purpose is a view that resembles a lab book (<xref rid="F8" ref-type="fig">Fig. 8<italic toggle="yes">B</italic></xref>): the graphical representation of the network is here displayed above a two-column table specifying nodes and connections to provide a compact overview. For capturing the graph and its parameters, we recommend using an external screenshot tool or printing to file from the browser (<xref rid="F8" ref-type="fig">Fig. 8<italic toggle="yes">B</italic></xref>). For saving activity charts, however, NEST Desktop provides internal functionality: those figures can be exported directly as high-quality vector-graphics or as pixelated images (<xref rid="F8" ref-type="fig">Fig. 8<italic toggle="yes">C</italic></xref>).</p>
    </sec>
    <sec id="s4E">
      <title>Use case: NEST Desktop in the classroom</title>
      <p>Here, we illustrate how NEST Desktop may be employed as a learning and teaching tool in a hands-on session of an introductory course of computational neuroscience. The students are expected to have only limited prior knowledge in the field and the lessons are supposed to teach them the principles of spiking neuronal networks. Computer simulations are intended to help them develop an intuitive understanding of the network dynamics. The lesson discussed here aims to construct a network of two interconnected populations of leaky integrate-and-fire (LIF) neurons driven by an external input. The activities of the excitatory and inhibitory neuron populations should be balanced. This scenario describes a classical example of an emergent property in a rather simple network configuration (<xref rid="B40" ref-type="bibr">Vreeswijk and Sompolinsky, 1996</xref>; <xref rid="B4" ref-type="bibr">Brunel, 2000</xref>). Our fictional student Noel is highly motivated to learn about this topic and the method of neuronal network simulations, but he is inexperienced in programming. We will explain how NEST Desktop helps Noel to achieve the goal nevertheless.</p>
      <p>The course takes place in the university’s computer lab and has been prepared by the tutor Juno. She consulted the documentation of how to deploy NEST Desktop in a virtual machine on computer resources provided for students (<xref rid="F3" ref-type="fig">Fig. 3</xref>, ReadTheDocs) and found a prebuilt container with the tool (<xref rid="F3" ref-type="fig">Fig. 3</xref>, whale, Docker). After following a few steps, NEST Desktop is ready to be used by the students without the need of manual installation or configuration (<xref rid="F3" ref-type="fig">Fig. 3</xref>, laptop/cloud).</p>
      <p>Noel opens the network editor (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">A</italic></xref>) and begins to set up the network. In the two-dimensional scratch panel, he creates one neuron node and one recording device per population to track the neuronal activity (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">B</italic></xref>, left). He adds a single stimulus device to provide external input to both populations. The next step is to connect the neuron and device nodes (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">B</italic></xref>, right). The connectivity between network nodes can be defined with different deterministic and probabilistic rules selectable from a drop-down menu. Each neuron node is connected to the other one and to itself; the neurons are connected randomly (pairwise Bernoulli) with a given connection probability. Noel notes that the nodes are differently labeled and colored which helps matching nodes and connections with the information shown in the other panels (<xref rid="F5" ref-type="fig">Fig. 5</xref>).</p>
      <p>Subsequently, Noel opens the network controller and specifies the models represented by the nodes. He finds the neuron model he is looking for: “IAF PSC alpha”, a current-based LIF neuron with alpha-shaped postsynaptic currents (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">C</italic></xref>, left bottom). As an alternative to this LIF neuron model, a Hodgkin–Huxley neuron model is also available, which has more biophysical details. Noel chooses model parameters which are relevant for the exercise (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">C</italic></xref>, middle). These selected parameters can then be modified from their preset default values by either using sliders, or by typing the intended values into the input field (<xref rid="F5" ref-type="fig">Fig. 5<italic toggle="yes">C</italic></xref>, right).</p>
      <p>An important parameter is the number of elements in a node, which is also referred to as population size. In this example, the excitatory population is larger than the inhibitory one, but inhibitory connections are stronger for compensation. Noel sets the population sizes of both neuron nodes accordingly and also modifies other parameter values where necessary.</p>
      <p>In the code editor, Noel finds the scripting code that is automatically generated from the graphically constructed network (<xref rid="F6" ref-type="fig">Fig. 6</xref>). Every visual element has its respective counterpart in the script and Noel recognizes the model names and the parameters he has set earlier via the GUI. Noel finds out that he can modify the code in the editor directly. Just for testing this option, he changes the value of one parameter. Noel learns that the programming language of this script is called PyNEST. As the network is now completely defined, Noel clicks the “Simulate” button, which triggers the transmission and the execution of the PyNEST script in the background.</p>
      <p>After the simulation, which only took a few seconds, Noel starts exploring the recorded network dynamics in the activity explorer. During network construction before the simulation, he has chosen spike recording devices and focuses now on analyzing the spiking activity. A raster plot shows the spike times of both neuronal populations (<xref rid="F7" ref-type="fig">Fig. 7</xref>, bottom left). In this plot, Noel registers noise-like activity of both neuronal populations. He pans the plot window to the episode of interest, zooms in on some individual neurons in the network and observes that they emit spikes at non-synchronous, seemingly random time points. The subjacent histogram displays the spike count in time bins, accounting for all neurons in each population. Noel interactively changes the bin width and observes how the spike count adjusts. Although individual neurons only occasionally contribute a spike, the population spike counts are stationary over time reflecting the balance between excitation and inhibition. Via the side navigation, Noel opens a table showing statistical measures of the spike data of individual neurons (<xref rid="F7" ref-type="fig">Fig. 7</xref>, top right). The coefficient of variation of the inter-spike interval (CV<sub>ISI</sub>) is just below one for most neurons, indicating that the spiking activity in the network is almost as irregular as a Poisson process (<xref rid="B34" ref-type="bibr">Softky and Koch, 1993</xref>). Noel concludes that both neuronal populations operate in the asynchronous-irregular (AI) dynamical regime (<xref rid="B4" ref-type="bibr">Brunel, 2000</xref>).</p>
      <p>Next, Noel returns to the network editor, adds a stimulus device to apply negative currents to the inhibitory population during a defined period of time. He also adds multi-purpose measurement devices (“multimeter”) to record the neurons’ membrane potentials as quasi-analog signals. He re-simulates and observes changes in the network activity: during the stimulation phase, both populations exhibit highly synchronous and oscillatory behavior, visible in the membrane potential traces, the spike raster, and the population spike count histogram (<xref rid="F7" ref-type="fig">Fig. 7</xref>, bottom left). As a last test, he randomly assigns positions to the neurons and observes the animated activity resolved in space (<xref rid="F7" ref-type="fig">Fig. 7</xref>, bottom right).</p>
      <p>Noel finishes the exploration and analysis of network dynamics and saves the project with a descriptive name (<xref rid="F8" ref-type="fig">Fig. 8<italic toggle="yes">A</italic></xref>). The project management panel allows him to reload the project later to resume the exploration at the point where it was stopped. He also exports the project to a file to load it on his home computer later, or to share it with another student. Noel’s final task is to document his exploration of the balanced network model and he writes a report about the simulation setup and the analysis of the simulated network activity. To enhance the protocol with graphics, Noel first uses the built-in screenshot option to capture the lab book as an overview of the network (<xref rid="F8" ref-type="fig">Fig. 8<italic toggle="yes">B</italic></xref>). A display of the simulated data should have high quality to resolve important details of the spiking activity. Noel finds that he can export the charts as Scalable Vector Graphics (.svg), which meets that requirement (<xref rid="F8" ref-type="fig">Fig. 8<italic toggle="yes">C</italic></xref>). Ultimately, Noel includes the figures into his protocol and moves on to the next lesson.</p>
    </sec>
    <sec id="s4F">
      <title>NEST Desktop beyond teaching</title>
      <p>Here, we provide a short outlook on the potential usage of NEST Desktop beyond its major teaching purpose. Juno is a researcher and, apart from teaching courses, she studies spiking network models for her own scientific work. NEST Desktop has proven useful more than once in quickly investigating certain features of the simulator NEST, or testing the dynamics of a toy network before integrating the insights into larger models expressed in scripted code. If she is not familiar with the correct NEST syntax, she has even found herself constructing the respective network parts graphically in NEST Desktop and obtaining the executable PyNEST code from the built-in code-generation functionality. But NEST Desktop does not only help Juno to acquire a better intuition for her models, she also uses the tool for explaining her work to others. She finds that the audience can better grasp network structures and mechanisms behind activity dynamics if presented interactively. After her talks, she shares network configuration files with interested members of the audience who can then continue exploring the shown networks with NEST Desktop on their own machines. Thus, NEST Desktop can also support the daily routine of researchers in various aspects.</p>
    </sec>
  </sec>
  <sec sec-type="discussion" id="s5">
    <title>Discussion</title>
    <p>NEST Desktop is an interactive, web-based GUI to the neuronal network simulation code NEST, primarily developed for teaching the fundamentals of computational neuroscience. Students can choose from a number of available neuron, device and synapse models, combine them into network structures, and set custom parameters. The graphically constructed network is automatically converted into scripted code which the simulation engine NEST executes in the background. Simulation results are returned to the GUI, where the students can explore neuronal activity with a selection of analysis tools. Hence, our approach demonstrates a conceptual marriage of a powerful simulation engine and an intuitive, user-friendly GUI.</p>
    <p>The use case “NEST Desktop in the classroom”, which is described in Results, is based on the actual use of NEST Desktop for teaching computational neuroscience as part of the university education of bachelor and master students and in independent tutorials. Particular challenges of these courses are the very heterogeneous levels of programming skills and background knowledge in neuroscience among the participants. NEST Desktop has already proven to support teaching successfully both in the classical classroom setting with physical attendance and in online formats. Online formats have been boosted because of the COVID-19 pandemic and NEST Desktop has shown itself to be a valuable tool in this situation. In online courses, the students have the chance to contact the tutors and lecturers using video conference tools or via a messenger channel to get answers to their questions and discuss problems regarding the course content or NEST Desktop usage. All these teaching events put NEST Desktop to the test. Gathering feedback from students helps to identify shortcomings and drives the development of the tool. We have observed that the students generally show a reasonably fast learning success making a one-week course feasible. They are typically able to operate NEST Desktop independently already on the first day. The experience they gain from exploring networks using the tool helps them to answer questions from computational neuroscience posed to them in the course script. In an informal round of feedback, students attested NEST Desktop a good level of usability and they gave various positive comments on their user experience. However, there is still room for improvement because of the limited feature set of NEST Desktop as exposed by the students’ feedback.</p>
    <p>Here, we contrast NEST Desktop to the standalone application NEST Simulator. NEST Desktop builds on the PyNEST interface of NEST Simulator and can therefore provide access to most of its functionality. The translation of Python commands into elements of the GUI includes manual steps for the developers of NEST Desktop. For reasons of clarity and comprehensibility, not the whole multitude of neuron and synapse models and lower level commands available in NEST Simulator have a GUI counterpart, but only a representative subset that can be extended if needed. Multi-compartment neuron models and synaptic plasticity, for example, are currently not accessible. The set of models in NEST Simulator itself can be extended with NESTML (<xref rid="B29" ref-type="bibr">Plotnikov et al., 2016</xref>).</p>
    <p>Furthermore, each simulation experiment defined in NEST Desktop is self-contained and comprises all steps (network construction, simulation phase, and retrieval of activity data) of a digitized scientific workflow. Plain NEST is in that sense more flexible, as a running simulation can be interrupted to change parameters and resumed if desired. The PyNEST code can also be combined with generic Python code in case that a required functionality is not yet available in NEST but can be achieved by combining low-level commands of the PyNEST API.</p>
    <p>Besides, the size and complexity of networks which can be simulated with NEST Desktop are limited by the hardware resources accessible to the NEST Simulator back end; typically, these resources are laptop-equivalent or correspond to one compute node. While NEST Simulator lends itself to simulations of large networks with millions of neurons using high-performance compute clusters and parallelization with MPI and OpenMP, NEST Desktop currently only supports pure multi-threading for NEST Simulator. The attempt to simulate too large networks leads to inconveniently long simulation times and eventually even exhausts main memory. On that account, the GUI provides reasonable default ranges for population sizes. Although generally valid numbers cannot be given, we can conservatively state that networks on the order of a few thousand neurons can routinely be simulated with NEST Desktop. The visualization performance of the network activities is also limited by data size.</p>
    <p>Although theoretically not forbidden in NEST Desktop, it may become impractical to construct complex networks in the GUI that consist of a large number of distinct and differently parameterized neuron populations. To address these problems and alleviate the procedures, NEST Desktop provides the possibility to clone nodes during network construction and to customize which nodes and connections are shown for setting parameters.</p>
    <p>Regarding data analysis, both NEST Desktop and NEST Simulator provide only basic plotting routines to check simulation results. Given its interactivity and simple statistical analysis, the GUI provides more features than plain NEST. For reasons of modularity, detailed analyses are outsourced to separate, specific tools. NEST Desktop has been designed for learning the fundamentals of simulation and for small proof-of-concept simulation studies. In this spirit, NEST Desktop facilitates the daily routine of a researcher. However, for advanced simulations of large networks, full access to all features of the simulation engine and more flexibility may be required; here the script-based approach of NEST Simulator is recommended.</p>
    <p>Based on the useful feedback from given courses and beyond, we identify the following concrete directions in which the development of NEST Desktop may continue: while NEST Desktop already strictly separates the GUI from the simulation engine, one could even expand on the modularity. A possible next step would be to separate GUI and data analysis, as well as storage. The front end engine obviously has limited capability for advanced mathematical operations, like computing spike train correlations or the power spectrum using the fast Fourier transform (FFT). An interface to the Python-based data analysis community toolbox Elephant (<xref rid="B11" ref-type="bibr">Denker et al., 2018</xref>), which offers such functionality, therefore seems to be a more appropriate and general solution.</p>
    <p>In computational neuroscience, several GUIs have already been developed over the last two decades, mostly linked to a specific simulation engine (see <xref rid="T1" ref-type="table">Table 1</xref>). Most modern GUIs run in a web-browser (HTML) and are therefore platform-independent and installation-free. <xref rid="T2" ref-type="table">Table 2</xref> identifies which features of NEST Desktop are available to some extent also in the other tools existing. The design focus, i.e., whether they target rather the visualization of the network graph or the activity, is different between these tools, although many show some functionality of both. The earlier graphical interface SLIDE (<xref rid="B18" ref-type="bibr">Gewaltig et al., 1996</xref>; <xref rid="B26" ref-type="bibr">Matyak, 1996</xref>) for NEST has not been developed further but next to network structure and activity introduced a third aspect: the protocol of a virtual experiment. These ideas were inspired by visual programming at the time. To our knowledge they have not been picked-up again in the context of neuronal network simulation, but movie editing software like Blender (<xref rid="B5" ref-type="bibr">Bruns, 2020</xref>; the similarity was pointed out by Marc-Oliver Gewaltig in private communication) has aspects of this. Because of the problems in stabilizing and maintaining GUIs in the middle of the 1990s (<xref rid="B32" ref-type="bibr">Senk et al., 2018</xref>; contains some review) NEST development has primarily focused on the independent simulation engine. Open Source Brain (<xref rid="B20" ref-type="bibr">Gleeson et al., 2019</xref>), Neuron UI, and NetPyNE UI (<xref rid="B13" ref-type="bibr">Dura-Bernal et al., 2019</xref>) are extensions of Geppetto (<xref rid="B6" ref-type="bibr">Cantarelli et al., 2018</xref>) framework, but Neuron UI appears to be no longer in development. From the user perspective, the tools Open Source Brain, NetPyNE UI, and Nengo GUI (<xref rid="B1" ref-type="bibr">Bekolay et al., 2014</xref>) follow a similar approach as NEST Desktop. NEST Desktop, however, is unique in the separation of the client and server systems: The front end NEST Desktop runs on a web infrastructure and is controlled in the user’s web browser, while NEST Simulator can be served as a back end independently on any compute infrastructure, for example on an high-performance computing system. This software architecture makes NEST Desktop well suited for a classroom setting. Furthermore, the GUI enables the user to directly access the script showing a one-to-one correspondence between graphical elements and textual code snippets. This not only enables additional modification to the generated code before sending to the back end (as described in the use case) but also gives the learner the opportunity to gather first-hand experience with the actual code. This facilitates the later step to programming PyNEST scripts without the need of NEST Desktop and, thus, enables the creation and simulation of highly complex models with NEST as is the case in most scientific use cases of NEST. Finally, in contrast to the other outlined projects, the primary motivation of our work is to create a self-contained educational tool using the language and symbols of the problem domain.</p>
    <table-wrap position="float" id="T2">
      <label>Table 2</label>
      <caption>
        <p>Characterization of GUIs</p>
      </caption>
      <table frame="hsides" rules="none">
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <col align="left" valign="top" span="1"/>
        <thead>
          <tr>
            <th align="left" rowspan="1" colspan="1"/>
            <th align="left" colspan="2" rowspan="1">Network</th>
            <th align="left" colspan="2" rowspan="1">Simulation</th>
            <th align="left" rowspan="1" colspan="1">Activity</th>
          </tr>
          <tr>
            <th align="left" rowspan="1" colspan="1"/>
            <th align="left" rowspan="1" colspan="1">Visualize</th>
            <th align="left" rowspan="1" colspan="1">Edit</th>
            <th align="left" rowspan="1" colspan="1">Code</th>
            <th align="left" rowspan="1" colspan="1">Run</th>
            <th align="left" rowspan="1" colspan="1">Visualize</th>
          </tr>
        </thead>
        <tbody valign="top">
          <tr>
            <td align="left" rowspan="1" colspan="1">
              <bold>NEST Desktop</bold>
            </td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">CellExplorer</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">GENESIS GUI</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">N2A</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">Nengo GUI</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">(x)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">NESTInstrumentationApp</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">NetPyNE UI</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">(x)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">neuroConstruct</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">Neuron GUI (x11)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">(x)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">Neuron UI (HTML)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">(x)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">Neuronify</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">Neuronvisio</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">nuSPIC</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">Open Source Brain (OSB)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">(x)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">SLIDE</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">(x)</td>
            <td align="left" rowspan="1" colspan="1"/>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">SNN3DViewer</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">SpineCreator</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">The Virtual Brain (TVB)</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">VIOLA</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">Visbrain</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">ViSimpl</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
          <tr>
            <td align="left" rowspan="1" colspan="1">VisNEST</td>
            <td align="left" rowspan="1" colspan="1">x</td>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1"/>
            <td align="left" rowspan="1" colspan="1">x</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="TF2">
          <p>The GUIs from <xref rid="T1" ref-type="table">Table 1</xref> (here sorted alphabetically after NEST Desktop) are compared based on which steps of network construction, simulation, and activity analysis they cover. The network aspect is split up into visualizing networks and the possibility to edit them by means of the GUI. For the simulation step, the table distinguishes between a feature to generate and display simulation code and the option to actually run a simulation. The marker (x) in the simulation column means that (executable) code is provided but rather debug code or console instead of the actual simulation code.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>NEST Desktop supports teaching of computational neuroscience by making computer simulations intuitively accessible. The use of NEST Desktop actually reverses the sequence of skills to be learned. Courses can now directly start with scientific content, without students having to learn scientific programming first. Once the students have developed their intuition for neuronal network models, it is much easier for them to get started with the actual scripting of simulations and conduct more sophisticated research projects in the field on their own.</p>
  </sec>
</body>
<back>
  <ack>
    <p>Acknowledgements: We thank Jens Buchertseifer for the collaboration in code development and review of NEST Desktop; Jochen Martin Eppler for discussion and development of NEST Server; and Sara Konradi, Jessica Mitchell, Dennis Terhorst, Steffen Graber, and the community of NEST developers for discussion, review of the user documentation, and the web page on EBRAINS. At Freiburg, we thank tutors and students of the Bernstein Center for beta-testing NEST Desktop, enduring the early days, and valuable feedback. We also thank the service of the HBP Support Team for deployment on EBRAINS as well as the operators at the Rechenzentrum of University of Freiburg for the deployment on statewide bwCloud infrastructure, Thomas Matyak and his aunt for uncovering the thesis on SLIDE, and the research assistant (HiWi) Peter Bouss for finding Thomas.</p>
  </ack>
  <ref-list content-type="nameDate">
    <title>References</title>
    <ref id="B1">
      <mixed-citation publication-type="journal"><string-name><surname>Bekolay</surname><given-names>T</given-names></string-name>, <string-name><surname>Bergstra</surname><given-names>J</given-names></string-name>, <string-name><surname>Hunsberger</surname><given-names>E</given-names></string-name>, <string-name><surname>DeWolf</surname><given-names>T</given-names></string-name>, <string-name><surname>Stewart</surname><given-names>TC</given-names></string-name>, <string-name><surname>Rasmussen</surname><given-names>D</given-names></string-name>, <string-name><surname>Choo</surname><given-names>X</given-names></string-name>, <string-name><surname>Voelker</surname><given-names>AR</given-names></string-name>, <string-name><surname>Eliasmith</surname><given-names>C</given-names></string-name> (<year>2014</year>) <article-title>Nengo: a Python tool for building large-scale functional brain models</article-title>. <source>Front Neuroinform</source>
<volume>7</volume>:<fpage>48</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2013.00048</pub-id>
<?supplied-pmid 24431999?><pub-id pub-id-type="pmid">24431999</pub-id></mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="book"><string-name><surname>Bower</surname><given-names>JM</given-names></string-name>, <string-name><surname>Beeman</surname><given-names>D</given-names></string-name> (<year>2012</year>) <source>The book of GENESIS: exploring realistic neural models with the GEneral NEural SImulation System</source>. <publisher-loc>New York</publisher-loc>: <publisher-name>Springer</publisher-name>.</mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal"><string-name><surname>Brette</surname><given-names>R</given-names></string-name>, <string-name><surname>Rudolph</surname><given-names>M</given-names></string-name>, <string-name><surname>Carnevale</surname><given-names>T</given-names></string-name>, <string-name><surname>Hines</surname><given-names>M</given-names></string-name>, <string-name><surname>Beeman</surname><given-names>D</given-names></string-name>, <string-name><surname>Bower</surname><given-names>JM</given-names></string-name>, <string-name><surname>Diesmann</surname><given-names>M</given-names></string-name>, <string-name><surname>Morrison</surname><given-names>A</given-names></string-name>, <string-name><surname>Goodman</surname><given-names>PH</given-names></string-name>, <string-name><surname>Harris</surname><given-names>FC</given-names></string-name>, <string-name><surname>Zirpe</surname><given-names>M</given-names></string-name>, <string-name><surname>Natschläger</surname><given-names>T</given-names></string-name>, <string-name><surname>Pecevski</surname><given-names>D</given-names></string-name>, <string-name><surname>Ermentrout</surname><given-names>B</given-names></string-name>, <string-name><surname>Djurfeldt</surname><given-names>M</given-names></string-name>, <string-name><surname>Lansner</surname><given-names>A</given-names></string-name>, <string-name><surname>Rochel</surname><given-names>O</given-names></string-name>, <string-name><surname>Vieville</surname><given-names>T</given-names></string-name>, <string-name><surname>Muller</surname><given-names>E</given-names></string-name>, <string-name><surname>Davison</surname><given-names>AP</given-names></string-name>, <etal>et al.</etal> (<year>2007</year>) <article-title>Simulation of networks of spiking neurons: a review of tools and strategies</article-title>. <source>J Comput Neurosci</source>
<volume>23</volume>:<fpage>349</fpage>–<lpage>398</lpage>. <pub-id pub-id-type="doi">10.1007/s10827-007-0038-6</pub-id>
<?supplied-pmid 17629781?><pub-id pub-id-type="pmid">17629781</pub-id></mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal"><string-name><surname>Brunel</surname><given-names>N</given-names></string-name> (<year>2000</year>) <article-title>Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons</article-title>. <source>J Comput Neurosci</source>
<volume>8</volume>:<fpage>183</fpage>–<lpage>208</lpage>. <?supplied-pmid 10809012?><pub-id pub-id-type="pmid">10809012</pub-id></mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal"><string-name><surname>Bruns</surname><given-names>N</given-names></string-name> (<year>2020</year>) <article-title>Blender: universal 3D processing and animation software</article-title>. <source>Unfallchirurg</source>
<volume>123</volume>:<fpage>747</fpage>–<lpage>750</lpage>. <pub-id pub-id-type="doi">10.1007/s00113-020-00836-0</pub-id>
<?supplied-pmid 32556879?><pub-id pub-id-type="pmid">32556879</pub-id></mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal"><string-name><surname>Cantarelli</surname><given-names>M</given-names></string-name>, <string-name><surname>Marin</surname><given-names>B</given-names></string-name>, <string-name><surname>Quintana</surname><given-names>A</given-names></string-name>, <string-name><surname>Earnshaw</surname><given-names>M</given-names></string-name>, <string-name><surname>Court</surname><given-names>R</given-names></string-name>, <string-name><surname>Gleeson</surname><given-names>P</given-names></string-name>, <string-name><surname>Dura-Bernal</surname><given-names>S</given-names></string-name>, <string-name><surname>Silver</surname><given-names>RA</given-names></string-name>, <string-name><surname>Idili</surname><given-names>G</given-names></string-name> (<year>2018</year>) <article-title>Geppetto: a reusable modular open platform for exploring neuroscience data and models</article-title>. <source>Philos Trans R Soc Lond B Biol Sci</source>
<volume>373</volume>:<fpage>20170380</fpage>. <pub-id pub-id-type="doi">10.1098/rstb.2017.0380</pub-id><pub-id pub-id-type="pmid">30201843</pub-id></mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="book"><string-name><surname>Clark</surname><given-names>RC</given-names></string-name>, <string-name><surname>Mayer</surname><given-names>RE</given-names></string-name> (<year>2011</year>) <source>e-Learning and the science of instruction</source>. <publisher-loc>San Francisco</publisher-loc>: <publisher-name>Pfeiffer</publisher-name>.</mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal"><string-name><surname>Combrisson</surname><given-names>E</given-names></string-name>, <string-name><surname>Vallat</surname><given-names>R</given-names></string-name>, <string-name><surname>O’Reilly</surname><given-names>C</given-names></string-name>, <string-name><surname>Jas</surname><given-names>M</given-names></string-name>, <string-name><surname>Pascarella</surname><given-names>A</given-names></string-name>, <string-name><surname>Saive</surname><given-names>AL</given-names></string-name>, <string-name><surname>Thiery</surname><given-names>T</given-names></string-name>, <string-name><surname>Meunier</surname><given-names>D</given-names></string-name>, <string-name><surname>Altukhov</surname><given-names>D</given-names></string-name>, <string-name><surname>Lajnef</surname><given-names>T</given-names></string-name>, <string-name><surname>Ruby</surname><given-names>P</given-names></string-name>, <string-name><surname>Guillot</surname><given-names>A</given-names></string-name>, <string-name><surname>Jerbi</surname><given-names>K</given-names></string-name> (<year>2019</year>) <article-title>Visbrain: a multi-purpose GPU-accelerated open-source suite for multimodal brain data visualization</article-title>. <source>Front Neuroinform</source>
<volume>13</volume>:<fpage>14</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2019.00014</pub-id>
<?supplied-pmid 30967769?><pub-id pub-id-type="pmid">30967769</pub-id></mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal"><string-name><surname>Cope</surname><given-names>AJ</given-names></string-name>, <string-name><surname>Richmond</surname><given-names>P</given-names></string-name>, <string-name><surname>James</surname><given-names>SS</given-names></string-name>, <string-name><surname>Gurney</surname><given-names>K</given-names></string-name>, <string-name><surname>Allerton</surname><given-names>DJ</given-names></string-name> (<year>2017</year>) <article-title>SpineCreator: a graphical user interface for the creation of layered neural models</article-title>. <source>Neuroinformatics</source>
<volume>15</volume>:<fpage>25</fpage>–<lpage>40</lpage>. <pub-id pub-id-type="doi">10.1007/s12021-016-9311-z</pub-id>
<?supplied-pmid 27628934?><pub-id pub-id-type="pmid">27628934</pub-id></mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal"><string-name><surname>de Jong</surname><given-names>T</given-names></string-name>, <string-name><surname>Linn</surname><given-names>MC</given-names></string-name>, <string-name><surname>Zacharia</surname><given-names>ZC</given-names></string-name> (<year>2013</year>) <article-title>Physical and virtual laboratories in science and engineering education</article-title>. <source>Science</source>
<volume>340</volume>:<fpage>305</fpage>–<lpage>308</lpage>. <pub-id pub-id-type="doi">10.1126/science.1230579</pub-id>
<?supplied-pmid 23599479?><pub-id pub-id-type="pmid">23599479</pub-id></mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal"><string-name><surname>Denker</surname><given-names>M</given-names></string-name>, <string-name><surname>Yegenoglu</surname><given-names>A</given-names></string-name>, <string-name><surname>Grün</surname><given-names>S</given-names></string-name> (<year>2018</year>) <article-title>Collaborative HPC-enabled workflows on the HBP Collaboratory using the Elephant framework</article-title>. <source>Neuroinformatics</source>
<volume>2018</volume>:<fpage>P19</fpage>.</mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal"><string-name><surname>Dragly</surname><given-names>SA</given-names></string-name>, <string-name><surname>Mobarhan</surname><given-names>MH</given-names></string-name>, <string-name><surname>Vavang Solbra</surname><given-names>A</given-names></string-name>, <string-name><surname>Tennøe</surname><given-names>S</given-names></string-name>, <string-name><surname>Hafreager</surname><given-names>A</given-names></string-name>, <string-name><surname>Malthe-Sørenssen</surname><given-names>A</given-names></string-name>, <string-name><surname>Fyhn</surname><given-names>M</given-names></string-name>, <string-name><surname>Hafting</surname><given-names>T</given-names></string-name>, <string-name><surname>Einevoll</surname><given-names>GT</given-names></string-name>, <string-name><surname>Våvang Solbrå</surname><given-names>A</given-names></string-name>, <string-name><surname>Tennøe</surname><given-names>S</given-names></string-name>, <string-name><surname>Hafreager</surname><given-names>A</given-names></string-name>, <string-name><surname>Malthe-Sørenssen</surname><given-names>A</given-names></string-name>, <string-name><surname>Fyhn</surname><given-names>M</given-names></string-name>, <string-name><surname>Hafting</surname><given-names>T</given-names></string-name>, <string-name><surname>Einevoll</surname><given-names>GT</given-names></string-name> (<year>2017</year>) <article-title>Neuronify: an educational simulator for neural circuits</article-title>. <source>eNeuro</source>
<volume>4</volume>:<fpage>ENEURO.0022-17.2017</fpage>–<lpage>13</lpage>. <pub-id pub-id-type="doi">10.1523/ENEURO.0022-17.2017</pub-id></mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal"><string-name><surname>Dura-Bernal</surname><given-names>S</given-names></string-name>, <string-name><surname>Suter</surname><given-names>BA</given-names></string-name>, <string-name><surname>Gleeson</surname><given-names>P</given-names></string-name>, <string-name><surname>Cantarelli</surname><given-names>M</given-names></string-name>, <string-name><surname>Quintana</surname><given-names>A</given-names></string-name>, <string-name><surname>Rodriguez</surname><given-names>F</given-names></string-name>, <string-name><surname>Kedziora</surname><given-names>DJ</given-names></string-name>, <string-name><surname>Chadderdon</surname><given-names>GL</given-names></string-name>, <string-name><surname>Kerr</surname><given-names>CC</given-names></string-name>, <string-name><surname>Neymotin</surname><given-names>SA</given-names></string-name>, <string-name><surname>McDougal</surname><given-names>RA</given-names></string-name>, <string-name><surname>Hines</surname><given-names>M</given-names></string-name>, <string-name><surname>Shepherd</surname><given-names>GMG</given-names></string-name>, <string-name><surname>Lytton</surname><given-names>WW</given-names></string-name> (<year>2019</year>) <article-title>NetPyNE, a tool for data-driven multiscale modeling of brain circuits</article-title>. <source>Elife</source>
<volume>8</volume>:<fpage>e44494</fpage>. <pub-id pub-id-type="doi">10.7554/eLife.44494</pub-id><pub-id pub-id-type="pmid">31025934</pub-id></mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal"><string-name><surname>Einevoll</surname><given-names>GT</given-names></string-name>, <string-name><surname>Destexhe</surname><given-names>A</given-names></string-name>, <string-name><surname>Diesmann</surname><given-names>M</given-names></string-name>, <string-name><surname>Grün</surname><given-names>S</given-names></string-name>, <string-name><surname>Jirsa</surname><given-names>V</given-names></string-name>, <string-name><surname>de Kamps</surname><given-names>M</given-names></string-name>, <string-name><surname>Migliore</surname><given-names>M</given-names></string-name>, <string-name><surname>Ness</surname><given-names>TV</given-names></string-name>, <string-name><surname>Plesser</surname><given-names>HE</given-names></string-name>, <string-name><surname>Schürmann</surname><given-names>F</given-names></string-name> (<year>2019</year>) <article-title>The scientific case for brain simulations</article-title>. <source>Neuron</source>
<volume>102</volume>:<fpage>735</fpage>–<lpage>744</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2019.03.027</pub-id>
<?supplied-pmid 31121126?><pub-id pub-id-type="pmid">31121126</pub-id></mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="journal"><string-name><surname>Eppler</surname><given-names>JM</given-names></string-name>, <string-name><surname>Moritz</surname><given-names>H</given-names></string-name>, <string-name><surname>Eilif</surname><given-names>M</given-names></string-name>, <string-name><surname>Markus</surname><given-names>D</given-names></string-name>, <string-name><surname>Marc</surname><given-names>OG</given-names></string-name> (<year>2009</year>) <article-title>PyNEST: a convenient interface to the NEST simulator</article-title>. <source>Front Neuroinform</source>
<volume>2</volume>:<fpage>12</fpage>. <pub-id pub-id-type="doi">10.3389/neuro.11.012.2008</pub-id>
<?supplied-pmid 19198667?><pub-id pub-id-type="pmid">19198667</pub-id></mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal"><string-name><surname>Galindo</surname><given-names>SE</given-names></string-name>, <string-name><surname>Toharia</surname><given-names>P</given-names></string-name>, <string-name><surname>Robles</surname><given-names>OD</given-names></string-name>, <string-name><surname>Pastor</surname><given-names>L</given-names></string-name> (<year>2016</year>) <article-title>ViSimpl: multi-view visual analysis of brain simulation data</article-title>. <source>Front Neuroinform</source>
<volume>10</volume>:<fpage>44</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2016.00044</pub-id>
<?supplied-pmid 27774062?><pub-id pub-id-type="pmid">27774062</pub-id></mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="journal"><string-name><surname>Gewaltig</surname><given-names>MO</given-names></string-name>, <string-name><surname>Diesmann</surname><given-names>M</given-names></string-name> (<year>2007</year>) <article-title>NEST (NEural Simulation Tool)</article-title>. <source>Scholarpedia</source>
<volume>2</volume>:<fpage>1430</fpage>. <pub-id pub-id-type="doi">10.4249/scholarpedia.1430</pub-id></mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="book"><string-name><surname>Gewaltig</surname><given-names>MO</given-names></string-name>, <string-name><surname>Matyak</surname><given-names>T</given-names></string-name>, <string-name><surname>Diesmann</surname><given-names>M</given-names></string-name>, <string-name><surname>Aertsen</surname><given-names>A</given-names></string-name> (<year>1996</year>) <part-title>SLIDE: a graphical environment for neural simulations</part-title>. In: <source>Brain and evolution. Proc 24th Göttingen Neurobiol Conference</source> (<person-group person-group-type="editor"><string-name><surname>Schnitzler</surname><given-names>HU</given-names></string-name> and <string-name><surname>Elsner</surname></string-name></person-group><person-group person-group-type="editor"><string-name><given-names>N</given-names></string-name></person-group>, eds), p <volume>2</volume><fpage>475</fpage>. <publisher-loc>Stuttgart; New York</publisher-loc>: <publisher-name>Thieme</publisher-name>.</mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="journal"><string-name><surname>Gleeson</surname><given-names>P</given-names></string-name>, <string-name><surname>Steuber</surname><given-names>V</given-names></string-name>, <string-name><surname>Silver</surname><given-names>RA</given-names></string-name> (<year>2007</year>) <article-title>neuroConstruct: a tool for modeling networks of neurons in 3D space</article-title>. <source>Neuron</source>
<volume>54</volume>:<fpage>219</fpage>–<lpage>235</lpage>. s<?supplied-pmid 17442244?><pub-id pub-id-type="pmid">17442244</pub-id></mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal"><string-name><surname>Gleeson</surname><given-names>P</given-names></string-name>, <string-name><surname>Cantarelli</surname><given-names>M</given-names></string-name>, <string-name><surname>Marin</surname><given-names>B</given-names></string-name>, <string-name><surname>Quintana</surname><given-names>A</given-names></string-name>, <string-name><surname>Earnshaw</surname><given-names>M</given-names></string-name>, <string-name><surname>Sadeh</surname><given-names>S</given-names></string-name>, <string-name><surname>Piasini</surname><given-names>E</given-names></string-name>, <string-name><surname>Birgiolas</surname><given-names>J</given-names></string-name>, <string-name><surname>Cannon</surname><given-names>RC</given-names></string-name>, <string-name><surname>Alex Cayco-Gajic</surname><given-names>N</given-names></string-name>, <string-name><surname>Crook</surname><given-names>S</given-names></string-name>, <string-name><surname>Davison</surname><given-names>AP</given-names></string-name>, <string-name><surname>Dura-Bernal</surname><given-names>S</given-names></string-name>, <string-name><surname>Ecker</surname><given-names>A</given-names></string-name>, <string-name><surname>Hines</surname><given-names>ML</given-names></string-name>, <string-name><surname>Idili</surname><given-names>G</given-names></string-name>, <string-name><surname>Lanore</surname><given-names>F</given-names></string-name>, <string-name><surname>Larson</surname><given-names>SD</given-names></string-name>, <string-name><surname>Lytton</surname><given-names>WW</given-names></string-name>, <string-name><surname>Majumdar</surname><given-names>A</given-names></string-name>, <etal>et al.</etal> (<year>2019</year>) <article-title>Open source brain: a collaborative resource for visualizing, analyzing, simulating, and developing standardized models of neurons and circuits.</article-title>
<source>Neuron</source>
<volume>103</volume>:<fpage>395</fpage>–<lpage>411.e5</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuron.2019.05.019</pub-id>
<?supplied-pmid 31201122?><pub-id pub-id-type="pmid">31201122</pub-id></mixed-citation>
    </ref>
    <ref id="B21">
      <mixed-citation publication-type="other"><string-name><surname>Hahne</surname><given-names>J</given-names></string-name>, <string-name><surname>Diaz</surname><given-names>S</given-names></string-name>, <string-name><surname>Patronis</surname><given-names>A</given-names></string-name>, <string-name><surname>Schenck</surname><given-names>W</given-names></string-name>, <string-name><surname>Peyser</surname><given-names>A</given-names></string-name>, <string-name><surname>Graber</surname><given-names>S</given-names></string-name>, <string-name><surname>Spreizer</surname><given-names>S</given-names></string-name>, <string-name><surname>Brekke Vennemo</surname><given-names>S</given-names></string-name>, <string-name><surname>Ippen</surname><given-names>T</given-names></string-name>, <string-name><surname>Mørk</surname><given-names>H</given-names></string-name>, <string-name><surname>Jordan</surname><given-names>J</given-names></string-name>, <string-name><surname>Senk</surname><given-names>J</given-names></string-name>, <string-name><surname>Konradi</surname><given-names>S</given-names></string-name>, <string-name><surname>Weidel</surname><given-names>P</given-names></string-name>, <string-name><surname>Fardet</surname><given-names>T</given-names></string-name>, <string-name><surname>Dahmen</surname><given-names>D</given-names></string-name>, <string-name><surname>Terhorst</surname><given-names>D</given-names></string-name>, <string-name><surname>Stapmanns</surname><given-names>J</given-names></string-name>, <string-name><surname>Trensch</surname><given-names>G</given-names></string-name>, <string-name><surname>van Meegen</surname><given-names>A</given-names></string-name>, <etal>et al.</etal> (<year>2021</year>) <article-title>Nest 3.0</article-title>.</mixed-citation>
    </ref>
    <ref id="B22">
      <mixed-citation publication-type="book"><string-name><surname>Hines</surname><given-names>M</given-names></string-name> (<year>1993</year>) <part-title>The NEURON simulation program</part-title>. In: <source>Neural network simulation environments</source>, pp <fpage>147</fpage>–<lpage>163</lpage>. <publisher-loc>New York</publisher-loc>: <publisher-name>Springer</publisher-name>.</mixed-citation>
    </ref>
    <ref id="B23">
      <mixed-citation publication-type="journal"><string-name><surname>Hines</surname><given-names>ML</given-names></string-name>, <string-name><surname>Carnevale</surname><given-names>NT</given-names></string-name> (<year>1997</year>) <article-title>The NEURON simulation environment</article-title>. <source>Neural Comput</source>
<volume>9</volume>:<fpage>1179</fpage>–<lpage>1209</lpage>. <pub-id pub-id-type="doi">10.1162/neco.1997.9.6.1179</pub-id>
<?supplied-pmid 9248061?><pub-id pub-id-type="pmid">9248061</pub-id></mixed-citation>
    </ref>
    <ref id="B24">
      <mixed-citation publication-type="book"><string-name><surname>Kasiński</surname><given-names>A</given-names></string-name>, <string-name><surname>Pawłowski</surname><given-names>J</given-names></string-name>, <string-name><surname>Ponulak</surname><given-names>F</given-names></string-name> (<year>2009</year>) <part-title>‘SNN3DViewer’ - 3D visualization tool for spiking neural network analysis</part-title>. In: <source>Computer vision and graphics</source> (<person-group person-group-type="editor"><string-name><given-names>Bolc</given-names></string-name></person-group><person-group person-group-type="editor"><string-name><surname>L</surname></string-name>, <string-name><given-names>Kulikowski</given-names></string-name></person-group><person-group person-group-type="editor"><string-name><surname>JL</surname></string-name>, and <string-name><given-names>Wojciechowski</given-names></string-name></person-group><person-group person-group-type="editor"><string-name><surname>K</surname></string-name></person-group>, eds), pp <fpage>469</fpage>–<lpage>476</lpage>. <publisher-loc>Berlin; Heidelberg</publisher-loc>: <publisher-name>Springer</publisher-name>.</mixed-citation>
    </ref>
    <ref id="B25">
      <mixed-citation publication-type="journal"><string-name><surname>Mattioni</surname><given-names>M</given-names></string-name>, <string-name><surname>Cohen</surname><given-names>U</given-names></string-name>, <string-name><surname>Le Novère</surname><given-names>N</given-names></string-name> (<year>2012</year>) <article-title>Neuronvisio: a graphical user interface with 3D capabilities for NEURON</article-title>. <source>Front Neuroinform</source>
<volume>6</volume>:<fpage>20</fpage>–<lpage>28</lpage>. <pub-id pub-id-type="doi">10.3389/fninf.2012.00020</pub-id>
<?supplied-pmid 22685429?><pub-id pub-id-type="pmid">22685429</pub-id></mixed-citation>
    </ref>
    <ref id="B26">
      <mixed-citation publication-type="book"><string-name><surname>Matyak</surname><given-names>T</given-names></string-name> (<year>1996</year>) <article-title>SLIDE: Konzeption und Realisierung einer graphischen Benutzeroberfläche für SLI</article-title>. Diplomarbeit, <publisher-loc>Bochum</publisher-loc>, <publisher-name>Institut für Neuroinformatik, Ruhr-Universität Bochum</publisher-name>.</mixed-citation>
    </ref>
    <ref id="B27">
      <mixed-citation publication-type="journal"><string-name><surname>Nowke</surname><given-names>C</given-names></string-name>, <string-name><surname>Schmidt</surname><given-names>M</given-names></string-name>, <string-name><surname>Van Albada</surname><given-names>SJ</given-names></string-name>, <string-name><surname>Eppler</surname><given-names>JM</given-names></string-name>, <string-name><surname>Bakker</surname><given-names>R</given-names></string-name>, <string-name><surname>Diesrnann</surname><given-names>M</given-names></string-name>, <string-name><surname>Hentschel</surname><given-names>B</given-names></string-name>, <string-name><surname>Kuhlen</surname><given-names>T</given-names></string-name> (<year>2013</year>) <article-title>VisNEST - interactive analysis of neural activity data</article-title>. <source>2013 IEEE Symposium on Biological Data Visualization (BioVis)</source>, 2013, pp <fpage>65</fpage>–<lpage>72</lpage>. 13–14 October, 2013, Atlanta, GA, USA. <pub-id pub-id-type="doi">10.1109/BioVis.2013.6664348</pub-id>
</mixed-citation>
    </ref>
    <ref id="B28">
      <mixed-citation publication-type="journal"><string-name><surname>Petersen</surname><given-names>PC</given-names></string-name>, <string-name><surname>Siegle</surname><given-names>JH</given-names></string-name>, <string-name><surname>Steinmetz</surname><given-names>NA</given-names></string-name>, <string-name><surname>Mahallati</surname><given-names>S</given-names></string-name>, <string-name><surname>Buzsáki</surname><given-names>G</given-names></string-name> (<year>2021</year>) <article-title>CellExplorer: a graphical user interface and a standardized pipeline for visualizing and characterizing single neurons</article-title>. Neuron. Advance online publication. Retrieved 29 September, 2021. doi:10.1016/j.neuron.2021.09.002.</mixed-citation>
    </ref>
    <ref id="B29">
      <mixed-citation publication-type="journal"><string-name><surname>Plotnikov</surname><given-names>D</given-names></string-name>, <string-name><surname>Rumpe</surname><given-names>B</given-names></string-name>, <string-name><surname>Blundell</surname><given-names>I</given-names></string-name>, <string-name><surname>Ippen</surname><given-names>T</given-names></string-name>, <string-name><surname>Martin Eppler</surname><given-names>J</given-names></string-name>, <string-name><surname>Morrison</surname><given-names>A</given-names></string-name> (<year>2016</year>) <article-title>NESTML: a modeling language for spiking neurons</article-title>. <source>arXiv</source>
<comment>1606.02882</comment></mixed-citation>
    </ref>
    <ref id="B30">
      <mixed-citation publication-type="journal"><string-name><surname>Rothganger</surname><given-names>F</given-names></string-name>, <string-name><surname>Warrender</surname><given-names>CE</given-names></string-name>, <string-name><surname>Trumbo</surname><given-names>D</given-names></string-name>, <string-name><surname>Aimone</surname><given-names>JB</given-names></string-name> (<year>2014</year>) <article-title>N2A: a computational tool for modeling from neurons to algorithms</article-title>. <source>Front Neural Circuits</source>
<volume>8</volume>:<fpage>1</fpage>–<lpage>12</lpage>. <pub-id pub-id-type="doi">10.3389/fncir.2014.00001</pub-id>
<?supplied-pmid 24478635?><pub-id pub-id-type="pmid">24478635</pub-id></mixed-citation>
    </ref>
    <ref id="B31">
      <mixed-citation publication-type="journal"><string-name><surname>Sanz Leon</surname><given-names>P</given-names></string-name>, <string-name><surname>Knock</surname><given-names>SA</given-names></string-name>, <string-name><surname>Woodman</surname><given-names>MM</given-names></string-name>, <string-name><surname>Domide</surname><given-names>L</given-names></string-name>, <string-name><surname>Mersmann</surname><given-names>J</given-names></string-name>, <string-name><surname>McIntosh</surname><given-names>AR</given-names></string-name>, <string-name><surname>Jirsa</surname><given-names>V</given-names></string-name> (<year>2013</year>) <article-title>The virtual brain: a simulator of primate brain network dynamics</article-title>. <source>Front Neuroinform</source>
<volume>7</volume>:<fpage>10</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2013.00010</pub-id>
<?supplied-pmid 23781198?><pub-id pub-id-type="pmid">23781198</pub-id></mixed-citation>
    </ref>
    <ref id="B32">
      <mixed-citation publication-type="journal"><string-name><surname>Senk</surname><given-names>J</given-names></string-name>, <string-name><surname>Carde</surname><given-names>C</given-names></string-name>, <string-name><surname>Hagen</surname><given-names>E</given-names></string-name>, <string-name><surname>Kuhlen</surname><given-names>TW</given-names></string-name>, <string-name><surname>Diesmann</surname><given-names>M</given-names></string-name>, <string-name><surname>Weyers</surname><given-names>B</given-names></string-name> (<year>2018</year>) <article-title>VIOLA—a multi-purpose and web-based visualization tool for neuronal-network simulation output</article-title>. <source>Front Neuroinform</source>
<volume>12</volume>:<fpage>75</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2018.00075</pub-id><pub-id pub-id-type="pmid">30467469</pub-id></mixed-citation>
    </ref>
    <ref id="B33">
      <mixed-citation publication-type="journal"><string-name><surname>Senk</surname><given-names>J</given-names></string-name>, <string-name><surname>Kriener</surname><given-names>B</given-names></string-name>, <string-name><surname>Djurfeldt</surname><given-names>M</given-names></string-name>, <string-name><surname>Voges</surname><given-names>N</given-names></string-name>, <string-name><surname>Jiang</surname><given-names>H-L</given-names></string-name>, <string-name><surname>Schüttler</surname><given-names>L</given-names></string-name>, <string-name><surname>Gramelsberger</surname><given-names>G</given-names></string-name>, <string-name><surname>Diesmann</surname><given-names>M</given-names></string-name>, <string-name><surname>Plesser</surname><given-names>HE</given-names></string-name>, <string-name><surname>van Albada</surname><given-names>SJ</given-names></string-name> (<year>2021</year>) <article-title>Connectivity concepts in neuronal network modeling</article-title>. <source>arXiv:2110.02883</source>.</mixed-citation>
    </ref>
    <ref id="B34">
      <mixed-citation publication-type="journal"><string-name><surname>Softky</surname><given-names>WR</given-names></string-name>, <string-name><surname>Koch</surname><given-names>C</given-names></string-name> (<year>1993</year>) <article-title>The highly irregular firing of cortical cells is inconsistent with temporal integration of random EPSPs</article-title>. <source>J Neurosci</source>
<volume>13</volume>:<fpage>334</fpage>–<lpage>350</lpage>. <pub-id pub-id-type="doi">10.1523/JNEUROSCI.13-01-00334.1993</pub-id><pub-id pub-id-type="pmid">8423479</pub-id></mixed-citation>
    </ref>
    <ref id="B35">
      <mixed-citation publication-type="journal"><string-name><surname>Spreizer</surname><given-names>S</given-names></string-name> (<year>2018</year>) <article-title>NEST Desktop: an educational GUI application</article-title>. <source>Bernstein Conference 2018</source>. 25–28 September 2018. Berlin, Germany.</mixed-citation>
    </ref>
    <ref id="B36">
      <mixed-citation publication-type="journal"><string-name><surname>Spreizer</surname><given-names>S</given-names></string-name>, <string-name><surname>Senk</surname><given-names>J</given-names></string-name>, <string-name><surname>Rotter</surname><given-names>S</given-names></string-name>, <string-name><surname>Diesmann</surname><given-names>M</given-names></string-name>, <string-name><surname>Weyers</surname><given-names>B</given-names></string-name> (<year>2019</year>) <article-title>NEST Desktop: a web-based GUI for the NEST simulator</article-title>. <source>Bernstein Conference 2019</source>. 17–20 September, 2019. Berlin, Germany.</mixed-citation>
    </ref>
    <ref id="B37">
      <mixed-citation publication-type="journal"><string-name><surname>Spreizer</surname><given-names>S</given-names></string-name>, <string-name><surname>Senk</surname><given-names>J</given-names></string-name>, <string-name><surname>Rotter</surname><given-names>S</given-names></string-name>, <string-name><surname>Diesmann</surname><given-names>M</given-names></string-name>, <string-name><surname>Weyers</surname><given-names>B</given-names></string-name> (<year>2020</year>) <article-title>NEST Desktop: a web-based GUI for the NEST simulator</article-title>. <source>Bernstein Conference 2020</source>.er, 29 - October, 1, 2020. Berlin, Germany.</mixed-citation>
    </ref>
    <ref id="B38">
      <mixed-citation publication-type="journal"><string-name><surname>Tikidji-Hamburyan</surname><given-names>RA</given-names></string-name>, <string-name><surname>Narayana</surname><given-names>V</given-names></string-name>, <string-name><surname>Bozkus</surname><given-names>Z</given-names></string-name>, <string-name><surname>El-Ghazawi</surname><given-names>TA</given-names></string-name> (<year>2017</year>) <article-title>Software for brain network simulations: a comparative study</article-title>. <source>Front Neuroinform</source>
<volume>11</volume>:<fpage>46</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2017.00046</pub-id>
<?supplied-pmid 28775687?><pub-id pub-id-type="pmid">28775687</pub-id></mixed-citation>
    </ref>
    <ref id="B39">
      <mixed-citation publication-type="journal"><string-name><surname>Vlachos</surname><given-names>I</given-names></string-name>, <string-name><surname>Zaytsev</surname><given-names>YV</given-names></string-name>, <string-name><surname>Spreizer</surname><given-names>S</given-names></string-name>, <string-name><surname>Aertsen</surname><given-names>A</given-names></string-name>, <string-name><surname>Kumar</surname><given-names>A</given-names></string-name> (<year>2013</year>) <article-title>Neural system prediction and identification challenge</article-title>. <source>Front Neuroinform</source>
<volume>7</volume>:<fpage>43</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2013.00043</pub-id>
<?supplied-pmid 24399966?><pub-id pub-id-type="pmid">24399966</pub-id></mixed-citation>
    </ref>
    <ref id="B40">
      <mixed-citation publication-type="journal"><string-name><surname>Vreeswijk</surname><given-names>CV</given-names></string-name>, <string-name><surname>Sompolinsky</surname><given-names>H</given-names></string-name> (<year>1996</year>) <article-title>Chaos in neuronal networks with balanced excitatory and inhibitory activity</article-title>. <source>Science</source>
<volume>274</volume>:<fpage>1724</fpage>–<lpage>1726</lpage>. <pub-id pub-id-type="doi">10.1126/science.274.5293.1724</pub-id>
<?supplied-pmid 8939866?><pub-id pub-id-type="pmid">8939866</pub-id></mixed-citation>
    </ref>
  </ref-list>
  <sec sec-type="synthesis-author-response" id="s6">
    <title>Synthesis</title>
    <boxed-text position="float">
      <p>Reviewing Editor: Gustavo Deco, Universitat Pompeu Fabra</p>
      <p>Decisions are customarily a result of the Reviewing Editor and the peer reviewers coming together and discussing their recommendations until a consensus is reached. When revisions are invited, a fact-based synthesis statement explaining their decision and outlining what is needed to prepare a revision will be listed below. The following reviewer(s) agreed to reveal their identity: Salvador Dura-Bernal, Upinder S. Bhalla.</p>
    </boxed-text>
    <p>Reviewer 1:</p>
    <p>This manuscript describes a graphical user interface (GUI) for NEST, a widely used neural simulation tool. The GUI is designed to be used in education, and will make the powerful NEST simulator accessible to a wider range of the community, including students and researchers, which will help develop and advance the computational neuroscience field.</p>
    <p>The GUI has many great features: web-based so easy to install, modular, follows many open source best practices (documentation, GitHub version control, pip, Docker, etc), uses modern web technologies (HTML5, javascript packages, etc), drag and drop intuitive interface, built in analysis and plots, enables saving and loading, and others. The manuscript is very clearly written and is easy to follow. The figures are very clean, well designed and illustrative. Additionally, the authors researched all existing related GUIs and provided a very useful table comparing their features, which will be useful to the community. The GUI has already been used on several courses and the authors include a nice usage example based on their teaching experiences. Their experience demonstrates the GUI is useful for the purpose it was designed, namely, to enable students without much coding experience to learn computational neuroscience and get excited about it. Therefore, I believe this tool has the potential to significantly benefit the wider neuroscience community.</p>
    <p>Below I provide some comments/suggestions that I hope will help further strengthen the manuscript before publication:</p>
    <p>Major:</p>
    <p>- The manuscript mentions the GUI could also be used for research, but in line 325 it also mentions some limitations. These limitations are indirectly addressed, but I think the readers would benefit from clearly outlining what these are compared to the full NEST package, and particularly in the context of using the tool for research. For example, it appears the number of plots and analysis available is relatively limited. What is the size and complexity of networks that can be built using the GUI? Can complex connectivity features be implemented? Can existing cell models be imported? are multicompartment neurons available? what kind of biophysics can be implemented (multiple ionic channels, etc)? Please elaborate in detail so it is clear to user/reader what they can and can’t do.</p>
    <p>Minor:</p>
    <p>- There are several tools for automated testing of GUI workflows (eg Puppeteer), but this was not mentioned. Is this implemented or are there any plans for this?</p>
    <p>- In my experience, saving and loading locally when using a docker application can be complicated and involve eg creating shared folders. Please clarify if file saving/loading is straight forward or requires some additional set up.</p>
    <p>- Although the manuscript mentions extensive documentation, it is not clear if there are examples models available, and whether these are described step by step so new users can follow them. Please clarify.</p>
    <p>- Line 228: please clarify “computer pool” for readers who may not be familiar with this concept.</p>
    <p>- Line 256: “chose” -&gt; “chooses"</p>
    <p>- Line 334: It is not clear to me that the same front end could be easily used with other back ends; it seems that right now it is highly specific and tailored to NEST concepts, and it would need to be made much more general to work with other back end simulators eg NEURON. Please justify or relax the claim.</p>
    <p>- Line 353: I am not sure those 2 features make NEST Desktop unique, as for example the NetPyNE GUI also uses a standard simulation engine as back end (NEURON), and can import and export the corresponding python scripts. However, I believe NEST Desktop is novel and unique in many other aspects, for example providing a modern, web-based, easy-to-use and intuitive drag-and-drop interface for NEST, and enabling the user to directly access the script showing direct correspondence between graphical elements and textual code snippets.</p>
    <p>Reviewer 2:</p>
    <p>This study presents the NEST Desktop and positions it as an educational</p>
    <p>application. The interface has the benefits of running entirely in the</p>
    <p>browser, but does need an installation of server to do the computations.</p>
    <p>Thus it is particularly easy to deploy for classroom use where support</p>
    <p>teams would install the server.</p>
    <p>The presentation of the paper is clear</p>
    <p>Installation and usage</p>
    <p>1. It would help if the Methods section had the installation commands. This is</p>
    <p>available on the website documentation, which is good, but should be in the</p>
    <p>paper.</p>
    <p>2. Pip install seemed to go well</p>
    <p>3. Again, it would help if the paper would indicate the commands needed to get</p>
    <p>the desktop to run and to come up on the web page. Once done as per web</p>
    <p>documentation it worked and I was able to build the example model.</p>
    <p>4. I was completely unable to run anything. The NEST server started and did</p>
    <p>not emit any error messages, but the system was not able to connect to it</p>
    <p>despite multiple restarts.</p>
    <p>5. It was not clear how to create different stimulus types other than direct</p>
    <p>current. Similarly for neurons and readouts. The steps indicated in</p>
    <p>ReadTheDocs to pick different model types, did not work.</p>
    <p>Overall, installation and operations went reasonably well but there were</p>
    <p>several roadblocks that would need user support. I was not able to run any</p>
    <p>of the models or build anything except with the defaults.</p>
    <p>Other comments.</p>
    <p>6. There is a small section on NEST desktop beyond teaching, but I would be</p>
    <p>interested to know if there is a capability to scale. Typically larger</p>
    <p>simulations are inconvenient to run from the GUI, but the GUI may still be</p>
    <p>valuable to help visualize model structure.</p>
    <p>How well does this scale? For example,</p>
    <p>6.1 could the authors consider a number of production/published NEST</p>
    <p>simulations and sketch out how crowded/manageable their representations</p>
    <p>would be in the GUI?</p>
    <p>6.2 Is the GUI able to specify stimuli and the models in general,</p>
    <p>with the same flexibility as Python? What features, if any, are</p>
    <p>inaccessible through the GUI?</p>
    <p>6.3 Are synapse properties editable in the GUI? For example, could one construct</p>
    <p>a synapse with a unique kind of STDP rule and then use it in the</p>
    <p>network?</p>
    <p>6.4 The authors also suggest around line 292 that the GUI may be useful to</p>
    <p>generate model structure. Does the GUI provide _all_ the capabilities needed</p>
    <p>to do this? For example, if one has a spatial dependence of connection</p>
    <p>probabilities or weights, can this be configured in the GUI?</p>
    <p>6.5 Does the GUI support definition of the spatial layout of the model? For</p>
    <p>example, curved cell layers?</p>
    <p>7. The project management tools likewise, could be valuable for bigger</p>
    <p>projects than those which would run in the GUI. However, it isn’t clear if the</p>
    <p>capability only exists for those defined in the GUI.</p>
    <p>8. One can reload Desktop projects, but can the system load and display an</p>
    <p>existing nest simulation defined in Python?</p>
    <p>9. Is there the possibility to link to other simulators, for example PyNN or</p>
    <p>Brian?</p>
    <p>ln summary, this seems to be a promising tool, but the deployment may need</p>
    <p>some additional work. The major point to address is to clearly state what</p>
    <p>are the limitations, if any, in the desktop when it comes accessing the</p>
    <p>full range of features of NEST. It would also be nice to get an idea of how</p>
    <p>the interface might scale.</p>
    <p>Software Comments:</p>
    <p>1. It would help if the Methods section had the installation commands. This is</p>
    <p>available on the website documentation, which is good, but should be in the</p>
    <p>paper.</p>
    <p>2. Pip install seemed to go well</p>
    <p>3. Again, it would help if the paper would indicate the commands needed to get</p>
    <p>the desktop to run and to come up on the web page. Once done as per web</p>
    <p>documentation it worked and I was able to build the example model.</p>
    <p>4. I was completly unable to run anything. The NEST server started and did</p>
    <p>not emit any error messages, but the system was not able to connect to it</p>
    <p>despite multiple restarts.</p>
    <p>5. It was not clear how to create different stimulus types other than direct</p>
    <p>current. Similarly for neurons and readouts. The steps indicated in</p>
    <p>ReadTheDocs to pick different model types, did not work.</p>
    <p>Overall, installation and operations went reasonably well but there were</p>
    <p>several roadblocks that would need user support. I was not able to run any</p>
    <p>of the models or build anything except with the defaults.</p>
  </sec>
  <sec sec-type="synthesis-author-response" id="s7">
    <title>Author Response</title>
    <p>Dear Prof. Deco,</p>
    <p>Thank you very much for the opportunity to revise our manuscript `NEST Desktop - An educational application for neuroscience’ as suggested in your email from July 7. Please find enclosed our detailed responses to the points raised by the reviewers together with the revised manuscript. Changes compared to the previous submission are shown in red.</p>
    <p>Our responses include</p>
    <p>- a detailed comparison between the use of NEST Desktop and NEST Simulator as a standalone application, emphasizing the current limitations of the GUI, and</p>
    <p>- a more elaborate description of the installation and deployment of NEST Desktop.</p>
    <p>We are very grateful to the two reviewers who have invested much work in their reviews, which helped us to considerably improve the manuscript. We are certain that the revised manuscript meets the high standards requested by eNeuro.</p>
    <p>With kind regards,</p>
    <p>Sebastian Spreizer, on behalf of the authors.</p>
    <p>Reviewer 1</p>
    <p>This manuscript describes a graphical user interface (GUI) for NEST, a widely used neural simulation tool. The GUI is designed to be used in education, and will make the powerful NEST simulator accessible to a wider range of the community, including students and researchers, which will help develop and advance the computational neuroscience field.</p>
    <p>The GUI has many great features: web-based so easy to install, modular, follows many open source best practices (documentation, GitHub version control, pip, Docker, etc), uses modern web technologies (HTML5, JavaScript packages, etc), drag and drop intuitive interface, built in analysis and plots, enables saving and loading, and others. The manuscript is very clearly written and is easy to follow. The figures are very clean, well designed and illustrative. Additionally, the authors researched all existing related GUIs and provided a very useful table comparing their features, which will be useful to the community. The GUI has already been used on several courses and the authors include a nice usage example based on their teaching experiences. Their experience demonstrates the GUI is useful for the purpose it was designed, namely, to enable students without much coding experience to learn computational neuroscience and get excited about it. Therefore, I believe this tool has</p>
    <p>the potential to significantly benefit the wider neuroscience community.</p>
    <p>Below I provide some comments/suggestions that I hope will help further strengthen the manuscript before publication:</p>
    <p>-- We thank the reviewer for the positive remarks about the GUI and the manuscript.</p>
    <p>We also appreciate the detailed and constructive feedback which we have implemented as laid out in the following.</p>
    <p>----------</p>
    <p>Major</p>
    <p>Reviewer: The manuscript mentions the GUI could also be used for research, but in line 325 it also mentions some limitations. These limitations are indirectly addressed, but I think the readers would benefit from clearly outlining what these are compared to the full NEST package, and particularly in the context of using the tool for research. For example, it appears the number of plots and analysis available is relatively limited.</p>
    <p>-- We agree with the reviewer that the previous version of the manuscript does not provide a sufficient discussion of the GUI’s limitations with respect to a standalone application of NEST Simulator.</p>
    <p>The new paragraph reads:</p>
    <p>"Here, we contrast NEST Desktop to the standalone application NEST Simulator. NEST Desktop builds on the PyNEST interface of NEST Simulator and can therefore provide access to most of its functionality. The translation of Python commands into elements of the GUI includes manual steps for the developers of NEST Desktop. For reasons of clarity and comprehensibility, not the whole multitude of neuron and synapse models and lower level commands available in NEST Simulator have a GUI counterpart, but only a representative subset that can be extended if needed. Multi-compartment neuron models and synaptic plasticity, for example, are currently not accessible. The set of models in NEST Simulator itself can be extended with NESTML (Plotnikov et al., 2016).</p>
    <p>Furthermore, each simulation experiment defined in NEST Desktop is self-contained and comprises all steps (network construction, simulation phase, and retrieval of activity data) of a digitized scientific workflow. Plain NEST is in that sense more flexible, as a running simulation can be interrupted to change parameters and resumed if desired. The PyNEST code can also be combined with generic Python code in case that a required functionality is not yet available in NEST but can be achieved by combining low-level commands of the PyNEST API.</p>
    <p>Besides, the size and complexity of networks which can be simulated with NEST Desktop are limited by the hardware resources accessible to the NEST Simulator back end; typically these resources are laptop-equivalent or correspond to one compute node. While NEST Simulator lends itself to simulations of large networks with millions of neurons using high-performance compute clusters and parallelization with MPI and OpenMP, NEST Desktop currently only supports pure multi-threading for NEST Simulator. The attempt to simulate too large networks leads to inconveniently long simulation times and eventually even exhausts main memory. On that account, the GUI provides reasonable default ranges for population sizes. Although generally valid numbers cannot be given, we can conservatively state that networks on the order of a few thousand neurons can routinely be simulated with NEST Desktop. The visualization performance of the network activities is also limited by data size. Although theoretically not forbidden in NEST Desktop, it may become impractical to construct complex networks in the GUI that consist of a large number of distinct and differently parameterized neuron populations. To address these problems and alleviate the procedures, NEST Desktop provides the possibility to clone nodes during network construction and to customize which nodes and connections are shown for setting parameters.</p>
    <p>Regarding data analysis, both NEST Desktop and NEST Simulator provide only basic plotting routines to check simulation results. Given its interactivity and simple statistical analysis, the GUI provides more features than plain NEST. For reasons of modularity, detailed analyses are outsourced to separate, specific tools. NEST Desktop has been designed for learning the fundamentals of simulation and for small proof-of-concept simulation studies. In this spirit, NEST Desktop facilitates the daily routine of a researcher. However, for advanced simulations of large networks, full access to all features of the simulation engine and more flexibility may be required; here the script-based approach of NEST Simulator is recommended.”</p>
    <p>----------</p>
    <p>Reviewer: What is the size and complexity of networks that can be built using the GUI?</p>
    <p>-- The new manuscript text given above includes a response to this important question. The network size is mainly determined by the hardware running NEST Simulator in the back end. A similar network complexity can be achieved as with NEST Simulator as a standalone application, although not all features of NEST are available in the GUI.</p>
    <p>----------</p>
    <p>Reviewer: Can complex connectivity features be implemented?</p>
    <p>-- Yes, NEST Desktop provides several connectivity rules to choose from. Currently, these are: `all-to-all’, `one-to-one’, `fixed in-degree’, `fixed out-degree’, `fixed total number’, `pairwise Bernoulli’, and `symmetric pairwise Bernoulli’. We have added a sentence about that to the use case:</p>
    <p>"The connectivity between network nodes can be defined with different deterministic and probabilistic rules selectable from a drop-down menu.”</p>
    <p>Furthermore, users can define custom connectivity in the code editor but the textual code can not be saved in the GUI. Similar to NEST Simulator, NEST Desktop focuses at present on networks with flat structure. It would be interesting to consider hierarchical connectivity in the future for even more complex networks.</p>
    <p>----------</p>
    <p>Reviewer: Can existing cell models be imported?</p>
    <p>-- NEST Desktop uses neuron and synapse models available in NEST Simulator for which the developers of NEST Desktop have implemented the corresponding graphical elements (e.g., sliders for setting parameters). Manual imports by the user are not required. See also the revised text in response to the reviewer’s first remark. Beyond that, advanced users can extend NEST Desktop by adding more models from NEST Simulator or even define completely new models, for instance, using NESTML.</p>
    <p>----------</p>
    <p>Reviewer: Are multi-compartment neurons available?</p>
    <p>-- NEST Simulator provides multi-compartment models but these are currently not accessible in NEST Desktop. We have added new text in the Discussion elaborating on the differences between NEST Desktop and NEST Simulator (see our response to the first major point of the first reviewer): not all models and features of NEST Simulator are currently available in the GUI but, if needed, more models can be added in future work.</p>
    <p>----------</p>
    <p>Reviewer: What kind of biophysics can be implemented (multiple ionic channels, etc)?</p>
    <p>-- Biophysical mechanisms are implemented in neuron and synapse models provided by NEST Simulator; new models can be added with NESTML. At the moment, NEST Desktop gives access to a leaky integrate-and-fire neuron model and a Hodgkin-Huxley model with more biophysical details. We have added a sentence about that in the use case:</p>
    <p>"As an alternative to this LIF neuron model, a Hodgkin-Huxley neuron model is also available, which has more biophysical details.”</p>
    <p>Extra work is required to make a neuron model available in the simulation engine accessible in NEST Desktop as different models have different parameters with their own ranges and units. With the advent of NESTML it may be possible to decorate the specification of a model such that it automatically integrates into NEST Desktop.</p>
    <p>----------</p>
    <p>Reviewer: Please elaborate in detail so it is clear to user/reader what they can and can’t do.</p>
    <p>-- We are grateful to the reviewer for asking us to clarify the features and limitations of NEST Desktop and hope that the revised text sheds light on these points.</p>
    <p>----------</p>
    <p>Minor</p>
    <p>Reviewer: There are several tools for automated testing of GUI workflows (e.g. Puppeteer), but this was not mentioned. Is this implemented or are there any plans for this?</p>
    <p>-- The development process of NEST Desktop uses `VUE CLI’ which starts a development server and `ESLint’ for typescript to enforce a set of style, formatting, and coding standards for the code base. However, there is no automated testing for web pages like `Mocha’ or `Jest’. We have added a new sentence to the Methods section:</p>
    <p>"The application NEST Desktop runs solely in the web browser of the user. Data of projects, models, and app settings are stored on the local system running the browser.”</p>
    <p>----------</p>
    <p>Reviewer: In my experience, saving and loading locally when using a docker application can be complicated and involve e.g. creating shared folders. Please clarify if file saving/loading is straight forward or requires some additional set up.</p>
    <p>-- We thank the reviewer for this comment which points us to a confusing description in the original version of our manuscript. NEST Desktop runs in the web browser of the user. Therefore any file selector box or other file access trivially points to the local file system of the user. For carrying out simulations NEST Desktop makes contact to an instance of NEST. The simulation engine typically runs as a service provided by a computer center but can also be installed on the local system of the user employing a virtualization technique like docker. In the revised version of the manuscript we have improved the description of the different methods of attaching the NEST simulation engine to the NEST Desktop front end. In addition we have improved the corresponding section of the user-level documentation of NEST Desktop</p>
    <p>----------</p>
    <p>Reviewer: Although the manuscript mentions extensive documentation, it is not clear if there are examples models available, and whether these are described step by step so new users can follow them. Please clarify.</p>
    <p>-- We thank the reviewer for this important remark and we have added the following sentences to the Methods section:</p>
    <p>"Beyond installation instructions, the documentation of NEST Desktop on ReadTheDocs (Fig. 3, bottom left) explains the usage of NEST Desktop by step-by-step examples using text, animations, and video tutorials.”</p>
    <p>"To facilitate getting started with NEST Desktop, a few example projects with simple network models are also integrated into the tool and can directly be inspected and modified by a new user.”</p>
    <p>----------</p>
    <p>Reviewer: Line 228: please clarify `computer pool’ for readers who may not be familiar with this concept.</p>
    <p>-- With `computer pool’ the original version of the manuscript refers to computer resources at the university which are provided for students. To clarify, the corresponding statement now reads:</p>
    <p>"She consulted the documentation of how to deploy NEST Desktop in a virtual machine on computer resources provided for students"</p>
    <p>----------</p>
    <p>Reviewer: Line 256: “chose” -&gt; `chooses’</p>
    <p>-- Here, we actually intend to refer to the step before the simulation in which Noel has set up the network. We have made this clearer now:</p>
    <p>"During network construction prior to the simulation, he has chosen"</p>
    <p>----------</p>
    <p>Reviewer: Line 334: It is not clear to me that the same front end could be easily used with other back ends; it seems that right now it is highly specific and tailored to NEST concepts, and it would need to be made much more general to work with other back end simulators e.g. NEURON. Please justify or relax the claim.</p>
    <p>-- We agree with the reviewer that NEST Desktop is currently highly specific to NEST Simulator. Although similar concepts are also available in other simulators and in the simulator-independent language PyNN, adding a different simulator back end would require major changes to the whole code base of NEST Desktop. Therefore, we follow the recommendation of the reviewer to relax the claim and have removed the sentence.</p>
    <p>----------</p>
    <p>Reviewer: Line 353: I am not sure those 2 features make NEST Desktop unique, as for example the NetPyNE GUI also uses a standard simulation engine as back end (NEURON), and can import and export the corresponding python scripts. However, I believe NEST Desktop is novel and unique in many other aspects, for example providing a modern, web-based, easy-to-use and intuitive drag-and-drop interface for NEST, and enabling the user to directly access the script showing direct correspondence between graphical elements and textual code snippets.</p>
    <p>-- We are thankful to the reviewer for highlighting the points in which NEST Desktop stands out over other GUIs:</p>
    <p>"NEST Desktop, however, is unique in that from the perspective of the user it is installation-free if deployed on a server infrastructure. The user only requires a browser and has access to advanced compute resources independent of local capabilities. This software architecture makes NEST Desktop well suited for a classroom setting. Furthermore, the GUI enables the user to directly access the script showing a one-to-one correspondence between graphical elements and textual code snippets.”</p>
    <p>--------------------</p>
    <p>Reviewer 2</p>
    <p>Reviewer: This study presents the NEST Desktop and positions it as an educational application. The interface has the benefits of running entirely in the browser, but does need an installation of server to do the computations. Thus it is particularly easy to deploy for classroom use where support teams would install the server. The presentation of the paper is clear.</p>
    <p>-- We thank the reviewer for the useful feedback which has helped us to improve both the manuscript and the online documentation of NEST Desktop. We appreciate a lot that the reviewer not only commented on the submitted manuscript but also tested out the new tool. Such a practical test goes beyond the usual duty of a reviewer and we are aware that this extra work cannot be taken for granted. For this very reason, we deeply apologize for the inconveniences that the reviewer experienced. We take this feedback seriously. One potential reason for the problems the reviewer ran into is that we unfortunately published the latest release of NEST Desktop, version 3.0, which is described in the manuscript only a few days after the manuscript was submitted. Obviously this is entirely our fault. In any case, trying to follow the exact steps that the reviewer performed, we have identified some spots where the documentation released with version 3.0 is not sufficiently clear. Based on this rechecking and the reviewers’ comments, the most recent version (3.0.3) and the documentation contain a number of bug fixes and improvements. This time we make sure that the revised manuscript clearly states the software release it refers to and that this software release is actually available.</p>
    <p>After carrying out these improvements to the documentation, we asked two students and an experienced scientist who were not yet exposed to NEST Desktop to try out the revised instructions starting from the manuscript and they managed to run the tool properly. Therefore, we would kindly ask the reviewer to test the installation and usage of NEST Desktop again. We hope that now all steps can be performed without problems. Below, we respond to the concrete points which the reviewer has brought up.</p>
    <p>----------</p>
    <p>Reviewer: 1. It would help if the Methods section had the installation commands. This is available on the website documentation, which is good, but should be in the paper.</p>
    <p>-- We agree with the reviewer on the virtue of having the installation commands in the manuscript. Listing these commands demonstrates how straightforward the installation is. In addition, such a section may serve as a quick reference. However, we consider the ReadTheDocs website as the main reference for detailed and specific documentation since the website can be updated and improved regularly, while commands in the manuscript might be outdated at some point. In the revised version of the manuscript we attempt to find the right balance between these seemingly opposing strategies. The revised paragraphs contain a couple of explicit commands and read:</p>
    <p>"The development of NEST Desktop (Fig. 3) follows a community approach. The source code is open-source and available on the GitHub platform (ttps://github.com/nest-desktop/nest-desktop) under the MIT License (Fig. 3, middle left). The software development follows the GIT workflow and `ESLint’ enforces that style, formatting, and coding standards of the code base are adhered to.</p>
    <p>Running NEST Desktop requires the installation of both the front end NEST Desktop itself and the NEST Simulator as the back end.</p>
    <p>Both components need to work together. The main reference for installation instructions is the online documentation on the ReadTheDocs platform (https://nest-desktop.readthedocs.io). Here, we limit ourselves to an overview and highlight some alternative approaches for setting up NEST Desktop.</p>
    <p>For the easiest local installation, we provide virtual Docker containers (Fig. 3, top right) for NEST Desktop and NEST Simulator which can be installed together using `Docker Compose’ with the configuration file `docker-compose.yml’ and a single command: `docker-compose up’. Since Docker is available for different operating systems (Linux, Windows, and Mac), this approach allows to provide and use the Linux-based ecosystem of NEST Desktop not only on a local laptop but also on a wide range of other infrastructures (Fig. 3, middle right). Alternatively, NEST Desktop has already been deployed on EBRAINS (https://ebrains.eu/service/nest-desktop), the European research infrastructure developed by the Human Brain Project (https://humanbrainproject.eu). Everyone with an EBRAINS account can use NEST Desktop there online without any installation. Furthermore, NEST Desktop was temporarily deployed on bwCloud (https://www.bw-cloud.org), a university-internal cloud computing resource for teaching purposes. NEST Desktop is installation-free in the sense that a computer center can provide NEST Desktop as a service such that the user only requires a web browser.</p>
    <p>As an alternative, NEST Desktop and NEST Simulator can be obtained separately. On Docker Hub, there is a dedicated image for NEST Desktop (https://hub.docker.com/r/nestdesktop/app). NEST Simulator can also be obtained from Docker Hub via the official NEST repository (https://hub.docker.com/r/nestsim/nest). For advanced users, the front end NEST Desktop is in addition available as a Python Package (https://pypi.org/project/nest-desktop) published on Python Package Index (PyPI), a third-party software repository for Python, and can be installed with the `pip’ package manager (Fig. 3, top left): `pip3 install nest-desktop’. Since NEST 3, a full installation of NEST Simulator on the host system will also provide the API server for RESTful requests. If NEST Desktop and NEST Simulator are installed separately, they can be started with `nest-desktop start’} and `nest-server start’, respectively, after which the GUI opens in the web browser and is connected to the simulation engine.”</p>
    <p>----------</p>
    <p>Reviewer: 2. Pip install seemed to go well</p>
    <p>-- We thank the reviewer for testing the installation with `pip’ and are glad to hear that it worked well.</p>
    <p>----------</p>
    <p>Reviewer: 3. Again, it would help if the paper would indicate the commands needed to get the desktop to run and to come up on the web page. Once done as per web documentation it worked and I was able to build the example model.</p>
    <p>-- We acknowledge that the original version of the manuscript does not sufficiently describe how to start NEST Desktop in the web browser. NEST Desktop requires NEST Simulator as a back end which is a different application. We provide several options for running NEST Desktop and NEST Simulator, depending on the user’s operating system. In our view, the best choice to run both applications locally is to install via `docker compose’. Without any installation required, NEST Desktop can be directly tested out online on the EBRAINS platform. For new text in the manuscript, we refer to our response to the reviewer’s first point.</p>
    <p>----------</p>
    <p>Reviewer: 4. I was completely unable to run anything. The NEST server started and did not emit any error messages, but the system was not able to connect to it despite multiple restarts.</p>
    <p>-- We are really sorry to hear and disappointed that things did not work as intended. We hypothesize that NEST Simulator (with API server) as a back end was not properly installed or started.</p>
    <p>----------</p>
    <p>Reviewer: 5. It was not clear how to create different stimulus types other than direct current. Similarly for neurons and readouts. The steps indicated in ReadTheDocs to pick different model types, did not work.</p>
    <p>-- We are very sorry that the documentation on changing stimulus types was deficient in the original version of the manuscript.</p>
    <p>Stimulus types can be changed in NEST Desktop in the same way as neuron models. Upon creation of a network node, the user decides whether the node should represent a stimulating or recording device or a population of neurons. Clicking in the network controller on the colored panel header of a node opens a popup which shows the node’s parameters. Clicking again on the panel header allows the user to change the model in case of a neuron node or to change the stimulus type in case of a stimulator node, respectively. To improve this explanation in the revised manuscript, we have modified panel C of Figure 5. The figure caption is updated to:</p>
    <p>"(C) The network controller to the right of the network graph allows users to select and parameterize models. Clicking once on the model name (top left) opens a popup for selecting parameters via checkboxes (middle); clicking there twice allows the user to select a different model from a drop-down menu (bottom left). When a subset of model parameters is selected, the corresponding values can be modified (right) by moving sliders, incrementally increasing and decreasing the value, or by directly entering the value. A restart of NEST Desktop is also possible.”</p>
    <p>And the adjusted main text is:</p>
    <p>"The user can specify properties of the graph elements by choosing predefined models, selecting a parameter subset for these models, and modifying their values (Fig. 5C).</p>
    <p>One mouse click on the header with the current model name enables the parameter selection for that model, and a second click opens a menu for changing the model. The available models depend on the node type (stimulator, neuron, or recorder), and each of them has its own set of parameters. The models are all part of NEST, and the user can query the available model descriptions from the NEST source code. A neuron node, for instance, may represent a whole population of individual neurons sharing the same model. The parameters can then either be the same for all neurons of the population or sampled from an array or from a random distribution (in `expert mode’). Optionally, users can also assign spatial positions to neurons or stimulating devices in the network.”</p>
    <p>The corresponding cross-references in the use case are adapted accordingly.</p>
    <p>---------</p>
    <p>Reviewer: Overall, installation and operations went reasonably well but there were several roadblocks that would need user support. I was not able to run any of the models or build anything except with the defaults.</p>
    <p>-- We apologize for the inconvenience that the reviewer could not experience NEST Desktop in full action at this point. We hope with this reply the reviewer is motivated to start over again to install and use NEST Desktop.</p>
    <p>----------</p>
    <p>Other comments</p>
    <p>Reviewer: 6. There is a small section on NEST desktop beyond teaching, but I would be interested to know if there is a capability to scale. Typically larger simulations are inconvenient to run from the GUI, but the GUI may still be valuable to help visualize model structure. How well does this scale?</p>
    <p>-- Here, the reviewer brings up an important point which we address in the revised Discussion by comparing NEST Desktop with NEST Simulator as a standalone application (see our response to the first major point of the first reviewer). For NEST Desktop it is irrelevant whether a neuronal population contains a hundred or a million neurons. Therefore, scaling of a simulation is independent of the local computer of the user and only depends on the resources available at the site running the simulation engine. The local computer limits the amount of neuronal activity data which can simultaneously be visualized. The revised manuscript discusses how future work can overcome this limitation by server side analysis of data using a community tool like Elephant.</p>
    <p>----------</p>
    <p>Reviewer: 6.1 could the authors consider a number of production/published NEST simulations and sketch out how crowded/manageable their representations would be in the GUI?</p>
    <p>-- Not all published network models implemented in NEST can be reproduced in the GUI because currently not all features of plain NEST are available in NEST Desktop. For example, as indicated in the new text in the Discussion, the number of available neuron models and devices in the GUI is limited, and synaptic plasticity is also not accessible at the moment. As stated in the manuscript at present NEST Desktop focuses on teaching and training and not research. Therefore production here refers to simple network models as they appear in course material for computational neuroscience which is partly available in the online documentation on ReadTheDocs in the section for lecturers. The revised Discussion outlines how NEST Desktop may evolve into a research tool.</p>
    <p>----------</p>
    <p>Reviewer: 6.2 Is the GUI able to specify stimuli and the models in general, with the same flexibility as Python? What features, if any, are inaccessible through the GUI?</p>
    <p>-- Indeed, the code editor allows user to change textual codes which are executable in Python. However, the textual code cannot be saved in NEST Desktop because converting arbitrary textual code into network objects represented in the network graph is a major challenge. As an example from the literature the reviewer may compare the difference in the language specification for EPS and the format accepted by Adobe Illustrator software called AI. In the workflow diagram (Figure 2) we show that the code can be generated from project data, but this workflow is one-way. Other features that are inaccessible through the GUI are elaborated on in the new text of the Discussion.</p>
    <p>----------</p>
    <p>Reviewer: 6.3 Are synapse properties editable in the GUI? For example, could one construct a synapse with a unique kind of STDP rule and then use it in the network?</p>
    <p>-- The present version of NEST Desktop makes only static synapses accessible to the user with editable parameters weight and delay as the primary focus of this work is demonstrate the conceptual separation between a GUI frontend and the simulation engine and to explore a human-computer interface and software architecture suitable for classroom use. An initial limitation in the number of features helped to streamline the project. Indeed, the NEST Simulator provides more synaptic models, such as several variants of STDP which can now be made available in NEST Desktop following the principles laid out in the present work. However, in the community work on NESTML a domain specific language for defining neuron and synapse models is rapidly progressing (Plotnikov et al., 2016). From this language code for NEST Simulator can automatically be generated. Future work can explore whether the decoration of the NESTML specification of a synapse with corresponding hint can enable an automatic NEST Desktop integration. With such a tool chain tool chain a user of NEST Desktop could enrich the set of available neuron and synapse models on the fly. Considerable research is required to turn such initial ideas into a robust and maintainable software architecture.</p>
    <p>----------</p>
    <p>Reviewer: 6.4 The authors also suggest around line 292 that the GUI may be useful to generate model structure. Does the GUI provide _all_ the capabilities needed to do this? For example, if one has a spatial dependence of connection probabilities or weights, can this be configured in the GUI?</p>
    <p>-- Yes, NEST Desktop exposes the capability of NEST 3.0 to specify parameters of individual nodes and connection instances as static values randomly sampled from a distribution or exhibiting a distance dependence. For instance, a uniform distribution of initial membrane potentials across 100 neurons can be expressed as: `nest.Create(’iaf_psc_alpha’, 100, params={’V_m’: nest.random.uniform(-70, -55)})’. An example for a linear distance dependence of synaptic weights is: `nest.Connect(a, b, syn_spec={’weight’: -10 * nest.spatial.distance + 10})’}). Such advanced features can also be configured in the GUI when the `expert mode’ of the parameter component is selected. The GUI only shows controls for distance-dependent parameters if source and target nodes have spatial coordinates.</p>
    <p>----------</p>
    <p>Reviewer: 6.5 Does the GUI support definition of the spatial layout of the model? For example, curved cell layers?</p>
    <p>-- Unfortunately, NEST Desktop does not have generic support spatial layouts. However, there is support for some simple spatial arrangements like grids and random spatial placement.</p>
    <p>----------</p>
    <p>Reviewer: 7. The project management tools likewise, could be valuable for bigger projects than those which would run in the GUI. However, it isn’t clear if the capability only exists for those defined in the GUI.</p>
    <p>-- At present, the project management tools are designed only for the networks set up with NEST Desktop, but we appreciate that the reviewer sees potential for a use beyond that. Right now these tools allow students to save and load projects, for example, to repeat the simulation of a constructed network or to compare the neuronal activity of different assignments in a course. As the complexity of models the GUI can handle growth, researchers will learn how a corresponding management tool needs to be designed.</p>
    <p>----------</p>
    <p>Reviewer: 8. One can reload Desktop projects, but can the system load and display an existing nest simulation defined in Python?</p>
    <p>-- Unfortunately no, a Python script cannot be imported in NEST Desktop. `Projects’ in NEST Desktop, defining networks and simulation configurations, are declarative and saved in JSON format. Python scripts are generative. In Figure 2 we show a one-way workflow from project data to simulation code.</p>
    <p>----------</p>
    <p>Reviewer: 9. Is there the possibility to link to other simulators, for example PyNN or Brian?</p>
    <p>-- Currently no, NEST Desktop can only interact with NEST Simulator. Adding another back end for PyNN, Brian, or another simulators would require major changes to the code base of NEST Desktop (network editor, code generation, and activity explorer). Nevertheless we clearly see how the availability of the simulator independent language PyNN has advanced reliability and performance of simulation codes by facilitating quantitative comparisons. Furthermore this facilitates the idea of building more complete models from simpler ones. The present work describes the conceptual separation of a GUI from the particular simulation engine NEST. As a graphical notation for models in computational neuroscience matures and effective ways of graphically manipulating simulation experiments in computational neuroscience are found the usefulness of a backend for PyNN is without question. Please also refer to our response to a related question of the first reviewer on page.</p>
    <p>----------</p>
    <p>Reviewer: In summary, this seems to be a promising tool, but the deployment may need some additional work. The major point to address is to clearly state what are the limitations, if any, in the desktop when it comes accessing the full range of features of NEST. It would also be nice to get an idea of how the interface might scale.</p>
    <p>-- We thank the reviewer for the detailed feedback and the positive final evaluation. The comments and questions helped us greatly to improve the manuscript as well as the documentation.</p>
  </sec>
</back>
