<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3851838</article-id>
    <article-id pub-id-type="publisher-id">1471-2105-14-S15-S16</article-id>
    <article-id pub-id-type="doi">10.1186/1471-2105-14-S15-S16</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Proceedings</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Finishing bacterial genome assemblies with Mix</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="A1">
        <name>
          <surname>Soueidan</surname>
          <given-names>Hayssam</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>h.soueidan@nki.nl</email>
      </contrib>
      <contrib contrib-type="author" id="A2">
        <name>
          <surname>Maurier</surname>
          <given-names>Florence</given-names>
        </name>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>florence.maurier@u-bordeaux2.fr</email>
      </contrib>
      <contrib contrib-type="author" id="A3">
        <name>
          <surname>Groppi</surname>
          <given-names>Alexis</given-names>
        </name>
        <xref ref-type="aff" rid="I2">2</xref>
        <email>alexis.groppi@u-bordeaux2.fr</email>
      </contrib>
      <contrib contrib-type="author" id="A4">
        <name>
          <surname>Sirand-Pugnet</surname>
          <given-names>Pascal</given-names>
        </name>
        <xref ref-type="aff" rid="I3">3</xref>
        <xref ref-type="aff" rid="I4">4</xref>
        <email>sirand@bordeaux.inra.fr</email>
      </contrib>
      <contrib contrib-type="author" id="A5">
        <name>
          <surname>Tardy</surname>
          <given-names>Florence</given-names>
        </name>
        <xref ref-type="aff" rid="I5">5</xref>
        <email>Florence.Tardy@anses.fr</email>
      </contrib>
      <contrib contrib-type="author" id="A6">
        <name>
          <surname>Citti</surname>
          <given-names>Christine</given-names>
        </name>
        <xref ref-type="aff" rid="I6">6</xref>
        <xref ref-type="aff" rid="I7">7</xref>
        <email>c.citti@envt.fr</email>
      </contrib>
      <contrib contrib-type="author" id="A7">
        <name>
          <surname>Dupuy</surname>
          <given-names>Virginie</given-names>
        </name>
        <xref ref-type="aff" rid="I8">8</xref>
        <email>virginie.dupuy@cirad.fr</email>
      </contrib>
      <contrib contrib-type="author" corresp="yes" id="A8">
        <name>
          <surname>Nikolski</surname>
          <given-names>Macha</given-names>
        </name>
        <xref ref-type="aff" rid="I2">2</xref>
        <xref ref-type="aff" rid="I9">9</xref>
        <email>macha.nikolski@labri.fr</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Molecular Carcinogenesis, The Netherlands Cancer Institute, 1066CX Amsterdam, The Netherlands</aff>
    <aff id="I2"><label>2</label>Univ. Bordeaux, CBiB, F-33000 Bordeaux, France</aff>
    <aff id="I3"><label>3</label>Univ. Bordeaux, UMR 1332 Biologie du Fruit et Pathologie, F-33140 Villenave d'Ornon, France</aff>
    <aff id="I4"><label>4</label>INRA, UMR 1332 Biologie du Fruit et Pathologie, F-33140 Villenave d'Ornon, France</aff>
    <aff id="I5"><label>5</label>Anses, Laboratoire de Lyon, UMR Mycoplasmoses des Ruminants, F-69364 Lyon, France</aff>
    <aff id="I6"><label>6</label>INRA, UMR1225, F-31076 Toulouse, France</aff>
    <aff id="I7"><label>7</label>Univ. Toulouse, INP-ENVT, UMR1225, F-31076 Toulouse, France</aff>
    <aff id="I8"><label>8</label>CIRAD, UMR CMAEE, Campus de Baillarguet, F-34398 Montpellier, France</aff>
    <aff id="I9"><label>9</label>Univ. Bordeaux, CNRS / LaBRI, F33405 Talence, France</aff>
    <pub-date pub-type="collection">
      <year>2013</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>15</day>
      <month>10</month>
      <year>2013</year>
    </pub-date>
    <volume>14</volume>
    <issue>Suppl 15</issue>
    <supplement>
      <named-content content-type="supplement-title">Proceedings of the Eleventh Annual Research in Computational Molecular Biology (RECOMB) Satellite Workshop on Comparative Genomics</named-content>
      <named-content content-type="supplement-editor">Macha Nikolski and Yves Van de Peer</named-content>
      <named-content content-type="supplement-sponsor">Publication of this supplement has not been supported by sponsorship. Information about the source of funding for publication charges can be found in the individual articles. Articles have undergone the journal's standard peer revire process for supplements. The Supplement Editors declare that they have no competing interests.</named-content>
    </supplement>
    <fpage>S16</fpage>
    <lpage>S16</lpage>
    <permissions>
      <copyright-statement>Copyright Â© 2013 Soueidan et al.; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2013</copyright-year>
      <copyright-holder>Soueidan et al.; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an open access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.biomedcentral.com/1471-2105/14/S15/S16"/>
    <abstract>
      <sec>
        <title>Motivation</title>
        <p>Among challenges that hamper reaping the benefits of genome assembly are both unfinished assemblies and the ensuing experimental costs. First, numerous software solutions for genome <italic>de novo </italic>assembly are available, each having its advantages and drawbacks, without clear guidelines as to how to choose among them. Second, these solutions produce draft assemblies that often require a resource intensive finishing phase.</p>
      </sec>
      <sec>
        <title>Methods</title>
        <p>In this paper we address these two aspects by developing <italic>Mix </italic>, a tool that mixes two or more draft assemblies, without relying on a reference genome and having the goal to reduce contig fragmentation and thus speed-up genome finishing. The proposed algorithm builds an <italic>extension graph </italic>where vertices represent extremities of contigs and edges represent existing alignments between these extremities. These alignment edges are used for contig extension. The resulting output assembly corresponds to a set of paths in the extension graph that maximizes the cumulative contig length.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>We evaluate the performance of Mix on bacterial NGS data from the GAGE-B study and apply it to newly sequenced <italic>Mycoplasma </italic>genomes. Resulting final assemblies demonstrate a significant improvement in the overall assembly quality. In particular, Mix is consistent by providing better overall quality results even when the choice is guided solely by standard assembly statistics, as is the case for <italic>de novo </italic>projects.</p>
      </sec>
      <sec>
        <title>Availability</title>
        <p><italic>Mix </italic>is implemented in Python and is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/cbib/MIX">https://github.com/cbib/MIX</ext-link>, novel data for our <italic>Mycoplasma </italic>study is available at <ext-link ext-link-type="uri" xlink:href="http://services.cbib.u-bordeaux2.fr/mix/">http://services.cbib.u-bordeaux2.fr/mix/</ext-link>.</p>
      </sec>
    </abstract>
    <conference>
      <conf-date>17-19 October 2013</conf-date>
      <conf-name>Eleventh Annual Research in Computational Molecular Biology (RECOMB) Satellite Workshop on Comparative Genomics</conf-name>
      <conf-loc>Lyon, France</conf-loc>
    </conference>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>Moving a genome from the draft assembly stage to a complete finished genome is a labor-intensive task requiring time and further experimental work. This <italic>finishing </italic>step aims to improve previously assembled draft sequences that are often fragmented into hundreds of contigs. Finishing frequently requires targeted sequencing to resolve remaining issues such as misassembled regions and sequence gaps, and tries to improve coverage and accuracy in poorly covered regions of the genome. Consequently, the task of producing a complete genome requires extensive experimental work and is often out of reach for small labs. While <italic>in silico </italic>finishing can not resolve all of these issues, it represents a considerable speed-up of the finishing process.</p>
    <p>Genome assembly is a lively field that has produced in the recent years numerous algorithms and tools, such as MIRA [<xref ref-type="bibr" rid="B1">1</xref>], CLC (<ext-link ext-link-type="uri" xlink:href="http://www.clcbio.com/genomics">http://www.clcbio.com/genomics</ext-link>), ABySS [<xref ref-type="bibr" rid="B2">2</xref>], etc. Assemblers differ in their algorithmic foundations and present different advantages and pitfalls. In addition to the sheer number of algorithmic solutions, any given assembler can be run using a number of variations of its parameter values (such as different <italic>k</italic>-mer sizes) and produce different results. Bring into that the fact that re-assembling an already assembled genome based on a new sequencing technology (e.g., Illumina vs Sanger) can reveal sequences that are missing in the reference assembly [<xref ref-type="bibr" rid="B3">3</xref>], and we end up with a very large space of easily obtainable <italic>de novo </italic>draft assemblies.</p>
    <p>Armed with this observation, a number of projects aim to take advantage of either different sources of sequencing data or different assembly tools. Indeed, cross-platform data merging is advantageous because sequencing platforms have different biases [<xref ref-type="bibr" rid="B4">4</xref>] and thus assemblies generated from different platforms' data can complement each other [<xref ref-type="bibr" rid="B5">5</xref>]; [<xref ref-type="bibr" rid="B6">6</xref>]. Several software packages were developed in order to capitalize on different advantages of existing assemblers. Among these tools are GAM [<xref ref-type="bibr" rid="B7">7</xref>], minimus2 [<xref ref-type="bibr" rid="B8">8</xref>], MAIA [<xref ref-type="bibr" rid="B9">9</xref>], Reconciliator [<xref ref-type="bibr" rid="B10">10</xref>], Zorro [<xref ref-type="bibr" rid="B11">11</xref>] and GAM-NGS [<xref ref-type="bibr" rid="B12">12</xref>].</p>
    <p>MAIA relies on a finished reference in order to guide the contig integration process; it is available as a MATLAB package. Zorro proceeds by masking the repeated regions known to cause problems during assembly. The minimus2 pipeline uses nucmer [<xref ref-type="bibr" rid="B13">13</xref>] to compute overlaps between contigs. GAM-NGS, Reconciliator and Zorro rely on reads in addition to assemblies for the merging process.</p>
    <p>Even when there is no clearly defined reference assembly, some tools still treat the two input assemblies differently; when referring to such setup we will use the term of <italic>asymmetry</italic>. Graph Accordance Assembly tool GAA [<xref ref-type="bibr" rid="B14">14</xref>] was developed in order to improve global assembly quality starting from two assemblies, one being the target and the other being the query. It is based on the construction of an accordance graph that encodes the alignment information between the target and query assemblies. The user has to evaluate and to choose the most reliable assembly that will be the target - for which no clear-cut solution currently exists.</p>
    <p>The specific problem that we aimed to address in current work is the high fragmentation of existing assemblies and the related to it reduced contig length. Such a problem is particularly salient for the "old" and very short (35nt to 45nt) NGS reads as for example those generated by the very first NGS chemistry of Illumina (formerly Solexa) technologies. The resulting draft assemblies are highly fragmented. The challenge in the case of <italic>Mycoplasma </italic>assembly project was to assemble these genomes and to develop an <italic>in silico </italic>finishing method in order to reduce the cost of returning back to the wet laboratory.</p>
    <p><italic>Mycoplasma </italic>are a genus of mollicutes that are a class of wall-less bacteria. Consequently, the most pertinent evaluation of assembly tools' performance is against bacterial benchmarks. A recent thorough evaluation of both assemblers and assembly merging tools has been done by Magoc and co-authors and provides a benchmark of 12 bacterial datasets called GAGE-B [<xref ref-type="bibr" rid="B15">15</xref>]. Most interestingly, at the end of their manuscript the authors mention that "over a large number of computational experiments, most combinations of assemblers, k-mer values, and merging algorithms did not produce improvements, and often produced inferior assemblies to the best individual assembly", with one exception where GAA produced superior results. Thus, GAA was chosen to be tested along with assembly tools in present work.</p>
    <p>A very recent application GAM-NGS [<xref ref-type="bibr" rid="B12">12</xref>] attempts to merge two different assemblies by avoiding a mutual alignment step and mapping the raw reads on the two assemblies instead. The merging is based on the construction of a graph where the number of reads mapped on different regions is used to weight the edges and determine the correctness of merging two regions. An asymmetry is introduced between the two assemblies, one called the master and the other the slave, master assembly driving the merging process. Even if no clear assembly improvement is reported in the paper, since GAM-NGS was not included in the GAGE-B study, we have included it in our own benchmarking.</p>
    <p>In the current manuscript we describe <italic>Mix </italic> a <italic>finishing algorithm </italic>that generates an assembly starting from different genome assemblies with the main objective of reducing contig fragmentation and maximizing the cumulative contig length. We address this question for the case where no reference genome is available and no asymmetry is introduced in dealing with assemblies, case not previously considered in literature. Moreover, we do not restrict ourselves to using only two assemblies. To address the excessive fragmentation, we propose a solution based on the maximal path problem in order to extend the contig length. To do this, we build a <italic>extension graph </italic>that connects contigs by their mutual alignments and is used to mix contigs when appropriate. We evaluate our <italic>Mix </italic>algorithm on GAGE-B benchmark and apply it to novel NGS data for 10 genomes from bacteria belonging to the genus <italic>Mycoplasma</italic>. We show that contrary to other tools that merge different assemblies, <italic>Mix </italic>clearly provides an advantage in terms of genome fragmentation while preserving the original assemblies characteristics in terms of missing bases and misassemblies. We argue that it is thus a good choice for <italic>de novo </italic>projects.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <p><italic>Mix </italic>algorithm takes two (or more) assemblies and generates another one that <italic>mixes </italic>them in order to extend the length of resulting contigs. It builds an <italic>extension graph </italic>in which for each alignment involving extremities of two contigs we create vertices representing terminal aligned fragments. Edges of this extension graph encode how contigs are connected by an alignment. The resulting output assembly corresponds to a set of longest paths in this extension graph.</p>
    <sec>
      <title>Preliminaries</title>
      <p>A contig <italic>C </italic>is composed of its identifier <italic>id </italic>and its sequence <italic>s</italic>, that is <italic>C </italic>= â©<italic>id, s</italic>âª, its length is denoted by <italic>|C| </italic>and is equal to <italic>|s|</italic>. An assembly is a set of contigs <inline-formula><mml:math id="M1" name="1471-2105-14-S15-S16-i1" overflow="scroll"><mml:mrow><mml:mtext mathvariant="double-struck">A</mml:mtext><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">{</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>C</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo class="MathClass-close">}</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>. Input assemblies are combined together <inline-formula><mml:math id="M2" name="1471-2105-14-S15-S16-i2" overflow="scroll"><mml:mrow><mml:mtext mathvariant="double-struck">A</mml:mtext><mml:mo class="MathClass-rel">=</mml:mo><mml:mo class="MathClass-bin">âª</mml:mo><mml:msub><mml:mrow><mml:mtext mathvariant="double-struck">A</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, where <inline-formula><mml:math id="M3" name="1471-2105-14-S15-S16-i3" overflow="scroll"><mml:msub><mml:mrow><mml:mtext mathvariant="double-struck">A</mml:mtext></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula> are different assemblies, ideally produced by assemblers relying on different algorithmic principles.</p>
      <p><bold>Definition 1 </bold><italic>An </italic>alignment <italic>between two contigs C<sub>i </sub>and C<sub>j </sub>is a tuple a </italic>= â©<italic>C<sub>i</sub>, C<sub>j</sub>, b<sub>i</sub>, e<sub>i</sub>, b<sub>j</sub>, e<sub>j</sub>, l</italic>âª<italic>, where b<sub>i </sub>and e<sub>i </sub>(b<sub>j </sub>and e<sub>j</sub>, respectively) are the beginning and end coordinates of the part of C<sub>i </sub>aligned on C<sub>j </sub>(of C<sub>j </sub>on C<sub>i</sub>, respectively) and l is the alignment length. A </italic>terminal alignment <italic>is an alignment involving extremities of C<sub>i </sub>and C<sub>j</sub>, that is at least one of the following is true</italic>.</p>
      <p>
        <disp-formula>
          <mml:math id="M4" name="1471-2105-14-S15-S16-i4" overflow="scroll">
            <mml:mrow>
              <mml:mtable class="gathered">
                <mml:mtr>
                  <mml:mtd>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>b</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>i</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-rel">â</mml:mo>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">{</mml:mo>
                      <mml:mrow>
                        <mml:mn>0</mml:mn>
                        <mml:mo class="MathClass-punc">,</mml:mo>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                        <mml:msub>
                          <mml:mrow>
                            <mml:mi>C</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>i</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mrow>
                    <mml:mo class="MathClass-bin">â§</mml:mo>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>b</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>j</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-rel">â</mml:mo>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">{</mml:mo>
                      <mml:mrow>
                        <mml:mn>0</mml:mn>
                        <mml:mo class="MathClass-punc">,</mml:mo>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                        <mml:msub>
                          <mml:mrow>
                            <mml:mi>C</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mrow>
                    <mml:mspace class="quad" width="1em"/>
                    <mml:mspace class="quad" width="1em"/>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>b</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>i</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-rel">â</mml:mo>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">{</mml:mo>
                      <mml:mrow>
                        <mml:mn>0</mml:mn>
                        <mml:mo class="MathClass-punc">,</mml:mo>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                        <mml:msub>
                          <mml:mrow>
                            <mml:mi>C</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>i</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mrow>
                    <mml:mo class="MathClass-bin">â§</mml:mo>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>e</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>j</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-rel">â</mml:mo>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">{</mml:mo>
                      <mml:mrow>
                        <mml:mn>0</mml:mn>
                        <mml:mo class="MathClass-punc">,</mml:mo>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                        <mml:msub>
                          <mml:mrow>
                            <mml:mi>C</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mrow>
                  </mml:mtd>
                </mml:mtr>
                <mml:mtr>
                  <mml:mtd>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>e</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>i</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-rel">â</mml:mo>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">{</mml:mo>
                      <mml:mrow>
                        <mml:mn>0</mml:mn>
                        <mml:mo class="MathClass-punc">,</mml:mo>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                        <mml:msub>
                          <mml:mrow>
                            <mml:mi>C</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>i</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mrow>
                    <mml:mo class="MathClass-bin">â§</mml:mo>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>e</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>j</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-rel">â</mml:mo>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">{</mml:mo>
                      <mml:mrow>
                        <mml:mn>0</mml:mn>
                        <mml:mo class="MathClass-punc">,</mml:mo>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                        <mml:msub>
                          <mml:mrow>
                            <mml:mi>C</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mrow>
                    <mml:mspace class="quad" width="1em"/>
                    <mml:mspace class="quad" width="1em"/>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>e</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>i</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-rel">â</mml:mo>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">{</mml:mo>
                      <mml:mrow>
                        <mml:mn>0</mml:mn>
                        <mml:mo class="MathClass-punc">,</mml:mo>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                        <mml:msub>
                          <mml:mrow>
                            <mml:mi>C</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>i</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mrow>
                    <mml:mo class="MathClass-bin">â§</mml:mo>
                    <mml:msub>
                      <mml:mrow>
                        <mml:mi>b</mml:mi>
                      </mml:mrow>
                      <mml:mrow>
                        <mml:mi>j</mml:mi>
                      </mml:mrow>
                    </mml:msub>
                    <mml:mo class="MathClass-rel">â</mml:mo>
                    <mml:mrow>
                      <mml:mo class="MathClass-open">{</mml:mo>
                      <mml:mrow>
                        <mml:mn>0</mml:mn>
                        <mml:mo class="MathClass-punc">,</mml:mo>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                        <mml:msub>
                          <mml:mrow>
                            <mml:mi>C</mml:mi>
                          </mml:mrow>
                          <mml:mrow>
                            <mml:mi>j</mml:mi>
                          </mml:mrow>
                        </mml:msub>
                        <mml:mo class="MathClass-rel">|</mml:mo>
                      </mml:mrow>
                      <mml:mo class="MathClass-close">}</mml:mo>
                    </mml:mrow>
                  </mml:mtd>
                </mml:mtr>
                <mml:mtr>
                  <mml:mtd/>
                </mml:mtr>
              </mml:mtable>
            </mml:mrow>
          </mml:math>
        </disp-formula>
      </p>
      <p>Possible terminal alignments of two contigs <italic>C<sub>i </sub></italic>and <italic>C<sub>j </sub></italic>are depicted in Figure <xref ref-type="fig" rid="F1">1</xref>.</p>
      <fig id="F1" position="float">
        <label>Figure 1</label>
        <caption>
          <p><bold>Possible extension alignments between <italic>C<sub>i </sub></italic>and <italic>C<sub>j</sub></italic></bold>. Arrows stand for contigs' orientation, <italic>b </italic>and <italic>e </italic>stand for beginning and end coordinates of the alignment on each contig. Reverse cases are not depicted (i.e. where <italic>b </italic>and <italic>e </italic>positions are inverted).</p>
        </caption>
        <graphic xlink:href="1471-2105-14-S15-S16-1"/>
      </fig>
      <p>An alignment set is denoted by <inline-formula><mml:math id="M5" name="1471-2105-14-S15-S16-i5" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">A</mml:mi><mml:mo class="MathClass-rel">=</mml:mo><mml:mrow><mml:mo class="MathClass-open">{</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>a</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo class="MathClass-close">}</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>. The set <inline-formula><mml:math id="M6" name="1471-2105-14-S15-S16-i7" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">A</mml:mi></mml:math></inline-formula> is built by aligning each assembly within <inline-formula><mml:math id="M7" name="1471-2105-14-S15-S16-i7" overflow="scroll"><mml:mtext>Â A</mml:mtext></mml:math></inline-formula> against the others. When the context does not require otherwise, we denote an alignment <italic>a </italic>by â©<italic>C<sub>i</sub>, C<sub>j</sub></italic>âª.</p>
      <p>An <italic>extension graph </italic>is an overlap graph built over terminal alignments in <inline-formula><mml:math id="M8" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">A</mml:mi></mml:math></inline-formula>. They are considered to have the potential to "glue" contigs, lower their number and maximize the cumulative contig length. Notice that to do this, we only consider terminal alignments, i.e. those that involve contigs' extremities. Indeed, in current work we do not question the internal logic of assembly tools that produce input contig sets.</p>
      <p>Each terminal alignment <italic>a </italic>= â©<italic>C<sub>i</sub>, C<sub>j</sub>, b<sub>i</sub>, e<sub>i</sub>, b<sub>j</sub>, e<sub>j</sub>, l</italic>âª is encoded by eight vertices that correspond to the extremities of <italic>a </italic>on <italic>C<sub>i </sub></italic>and <italic>C<sub>j</sub></italic>. We distinguish boundary <italic>b </italic>and internal <italic>i </italic>locations as well as how a contig is being read (forward or reverse). Edges represent a way to "glue" <italic>C<sub>i </sub></italic>and <italic>C<sub>j </sub></italic>together and are weighted. Edges that connect boundary or internal nodes of different contigs carry weight equal to <italic>l</italic>, those that represent the remaining chunks of <italic>C<sub>i </sub></italic>and <italic>C<sub>j </sub></italic>carry weights equal to <italic>|C<sub>i</sub>| â l </italic>and <italic>|C<sub>j</sub>| â l</italic>, respectively. See Figure <xref ref-type="fig" rid="F2">2</xref> for illustration. When a contig is involved in more than one alignment, its internal nodes are connected by edges, thus allowing for "gluing" more than two contigs. Weights for these edges are deduced according to the intervals defined by alignments on contigs.</p>
      <fig id="F2" position="float">
        <label>Figure 2</label>
        <caption>
          <p><bold>Extension graph for two terminal alignments</bold>. Terminal alignments <italic>Î± </italic>between contigs <italic>A, B </italic>and <italic>Î³ </italic>between <italic>B, C </italic>are each represented by eight nodes. Nodes encode the extremities of the alignment on each contig (border <italic>b </italic>and internal <italic>i </italic>extremities) and the direction in which it is read (forward <italic>â </italic>or reverse <italic>â</italic>). Edges encode the possible "glue" between contigs. Light gray edges represent a given alignment on the contig and carry no weight. Turquoise edges connect two contigs within an alignment and are labeled by its length ( <italic>l<sub>Î± </sub></italic>and <italic>l<sub>Î³ </sub></italic>). Black edges connect to the In and Out nodes, allowing for reading each contig in both directions as well as complex paths and are labeled by the remaining contig length (<italic>l<sub>A</sub>, l<sub>B </sub></italic>and <italic>l<sub>C</sub></italic>). Notice that values of <italic>l<sub>B </sub></italic>on the left-hand side of the figure and on the right-hand side are not the same as they depend on the alignment length; they are <italic>|B| â l<sub>Î± </sub></italic>and <italic>|B| â l<sub>Î³</sub></italic>, respectively. Orange edges connect the extremities of different alignments in which one contig can participate: here <italic>Î± </italic>and <italic>Î³ </italic>for <italic>B</italic>. Their weights are deduced from the corresponding intervals (here <italic>|B| â l<sub>Î± </sub>â l<sub>Î³ </sub></italic>for both).</p>
        </caption>
        <graphic xlink:href="1471-2105-14-S15-S16-2"/>
      </fig>
      <p>To finalize the graph construction, two artificial nodes are added: In and Out. These nodes are connected to both extremities of each contig, allowing it to be read in forward and reverse direction. In this extension graph we look for paths that maximize the cumulative contig length.</p>
    </sec>
    <sec>
      <title>Mix algorithm</title>
      <p><bold>Preprocessing </bold>Input alignment set <inline-formula><mml:math id="M9" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â A</mml:mtext></mml:math></inline-formula> is generated by aligning each assembly in <inline-formula><mml:math id="M10" name="1471-2105-14-S15-S16-i7" overflow="scroll"><mml:mtext>Â A</mml:mtext></mml:math></inline-formula> against all of the others. Before attempting to extend contigs, <italic>Mix </italic>first proceeds to clean up the alignment set <inline-formula><mml:math id="M11" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â A</mml:mtext></mml:math></inline-formula> in the following fashion.</p>
      <p>1. If any self alignments â©<italic>C<sub>i</sub>, C<sub>i</sub></italic>âª are present, they are eliminated.</p>
      <p>2. If two alignments â©<italic>C<sub>i</sub>, C<sub>j</sub></italic>âª and â©<italic>C<sub>j</sub>, C<sub>i</sub></italic>âª covering the same region, are present in <inline-formula><mml:math id="M12" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">A</mml:mi></mml:math></inline-formula>, only one is kept.</p>
      <p>3. Only alignments whose length <italic>l </italic>is greater than a certain threshold <italic>t<sub>a </sub></italic>are kept in <inline-formula><mml:math id="M13" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">A</mml:mi></mml:math></inline-formula>.</p>
      <p>4. Alignments for which <italic>l/|s<sub>i</sub>| &gt;</italic>99% or <italic>l/|s<sub>j</sub>| &gt;</italic>99% are eliminated from <inline-formula><mml:math id="M14" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">A</mml:mi></mml:math></inline-formula>.</p>
      <p>5. Alignments involving spurious contigs are eliminated; spurious contigs are those that have been aligned an abnormally high number of times. They are detected by looking for outliers in the distribution of the number of alignments per contig.</p>
      <p>Starting with <inline-formula><mml:math id="M15" name="1471-2105-14-S15-S16-i7" overflow="scroll"><mml:mtext>Â A</mml:mtext></mml:math></inline-formula> filtered by criteria 1-5 and <inline-formula><mml:math id="M16" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">A</mml:mi></mml:math></inline-formula>, <italic>Mix </italic>proceeds to build the corresponding extension graph <italic>G</italic>.</p>
      <p><bold>Algorithm </bold>Once the extension graph is built we are looking for ways to traverse this graph while maximizing the path length. More formally, we identify in the extension graph the <italic>Maximal Independent Longest Path Set </italic>problem (MILPS) that we define as follows. Let <italic>G </italic>= â©<italic>V, E, w</italic>, In, Outâª be a directed weighted graph <italic>G </italic>with positive weights denoted by <italic>w</italic>(<italic>e</italic>) for any edge <italic>e </italic>â <italic>E</italic>; and let In â <italic>V </italic>and Out â <italic>V </italic>be two pre-defined sets of nodes corresponding to the entry and exit points of <italic>G</italic>. In general, one can add two vertices: one of in-degree 0 to serve as entry point and one of out-degree 0 to serve as exit point. A path <italic>P </italic>in <italic>G </italic>is a sequence of <italic>|P| </italic>vertices and we denote by <italic>P</italic><sub>(<italic>i</italic>) </sub>the vertex at position <italic>i </italic>in <italic>P</italic>. A path is said to be simple if none of its vertices appears twice.</p>
      <p><bold>Definition 2 </bold><italic>An </italic>Independent Longest Path Set (ILPS) <italic>of G is a set of simple paths <inline-formula><mml:math id="M17" name="1471-2105-14-S15-S16-i8" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">P</mml:mi></mml:math></inline-formula> such that</italic></p>
      <p><italic>1. </italic><inline-formula><mml:math id="M18" name="1471-2105-14-S15-S16-i9" overflow="scroll"><mml:mrow><mml:mo class="MathClass-op">â</mml:mo><mml:mi>P</mml:mi><mml:mo class="MathClass-rel">â</mml:mo><mml:mi mathvariant="script">P</mml:mi></mml:mrow></mml:math></inline-formula>, <italic>P starts in </italic>In <italic>and ends in </italic>Out<italic>, i.e. P</italic><sub>(0) </sub>â In <italic>and P<sub>|P| </sub></italic>â Out,</p>
      <p><italic>2</italic>. â <italic>P<sub>i</sub></italic>, <inline-formula><mml:math id="M19" name="1471-2105-14-S15-S16-i10" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-rel">â</mml:mo><mml:mi mathvariant="script">P</mml:mi></mml:mrow></mml:math></inline-formula>; <italic>i </italic>â  <italic>j implies P<sub>i </sub>â© P<sub>j </sub></italic>â In âª Out,</p>
      <p><italic>3</italic>. â <italic>P </italic>of <italic>G </italic>from In to Out and <inline-formula><mml:math id="M20" name="1471-2105-14-S15-S16-i11" overflow="scroll"><mml:mrow><mml:mo class="MathClass-op">â</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">P</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-rel">â</mml:mo><mml:mi mathvariant="script">P</mml:mi></mml:mrow></mml:math></inline-formula>, either <italic>P </italic>and <inline-formula><mml:math id="M21" name="1471-2105-14-S15-S16-i12" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">P</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula> are independant, i.e. <inline-formula><mml:math id="M22" name="1471-2105-14-S15-S16-i13" overflow="scroll"><mml:mrow><mml:mi>P</mml:mi><mml:mo class="MathClass-bin">â©</mml:mo><mml:msub><mml:mrow><mml:mi mathvariant="script">P</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo class="MathClass-rel">â</mml:mo><mml:mstyle class="text"><mml:mtext class="textsf">In</mml:mtext></mml:mstyle><mml:mo class="MathClass-bin">âª</mml:mo><mml:mstyle class="text"><mml:mtext class="textsf">Out</mml:mtext></mml:mstyle></mml:mrow></mml:math></inline-formula>; or <italic>P </italic>is subsumed by <inline-formula><mml:math id="M23" name="1471-2105-14-S15-S16-i12" overflow="scroll"><mml:msub><mml:mrow><mml:mi mathvariant="script">P</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub></mml:math></inline-formula>, i.e. <inline-formula><mml:math id="M24" name="1471-2105-14-S15-S16-i14" overflow="scroll"><mml:mrow><mml:msub><mml:mrow><mml:mo>â</mml:mo></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mi>w</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-rel">â¤</mml:mo><mml:msub><mml:mrow><mml:mo>â</mml:mo></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub><mml:mi>w</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>P</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>k</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>; or <italic>P </italic>is not simple.</p>
      <p><bold>Definition 3 </bold><italic>A </italic>Maximal Independent Longest Path Set (MILPS) <italic>is an </italic>ILPS <inline-formula><mml:math id="M25" name="1471-2105-14-S15-S16-i8" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">P</mml:mi></mml:math></inline-formula><italic>such that </italic><inline-formula><mml:math id="M26" name="1471-2105-14-S15-S16-i15" overflow="scroll"><mml:mo class="MathClass-rel">|</mml:mo><mml:mo class="MathClass-bin">âª</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo class="MathClass-rel">|</mml:mo></mml:math></inline-formula><italic>is maximal over all possible ILPS, that is it covers a maximum number of vertices</italic>.</p>
      <p>Note that for any graph <italic>G</italic>, the MILPS is uniquely defined up to a relabeling of vertices. It follows immediately that if a vertex <italic>o </italic>â Out is reachable from a vertex <italic>i </italic>â In, then <inline-formula><mml:math id="M27" name="1471-2105-14-S15-S16-i16" overflow="scroll"><mml:mrow><mml:mo class="MathClass-op">â</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo class="MathClass-rel">â </mml:mo><mml:mi>â</mml:mi></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="M28" name="1471-2105-14-S15-S16-i8" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">P</mml:mi></mml:math></inline-formula> contains the longest simple path between <italic>i </italic>and <italic>o</italic>. Similarly, if an non empty MILPS exists for a graph <italic>G</italic>, it necessarily contains the longest path between In and Out.</p>
      <p>In general, the longest path problem (LPP) is NP-hard (by reduction from a Hamiltonian path problem) and is hard to approximate. Even if a graph admits an Hamiltonian path of length <italic>n</italic>, it is impossible to find paths of length <italic>n </italic>- <italic>n<sup>Îµ </sup></italic>for any <italic>Îµ &gt;</italic>0 unless P = NP [<xref ref-type="bibr" rid="B16">16</xref>]. However, trees and directed acyclic graphs are examples of non-trivial graph classes for which the longest path problem can be solved in linear time. In the same paper the authors show that LPP can be solved in polynomial time for (vertex/edge) weighted tree-like graphs. Authors of [<xref ref-type="bibr" rid="B17">17</xref>] proposed another practical solution for the LPP for the case of combinational circuits that contain cycles. We propose here a solution exploiting the relative tree-like structure of our extension graphs.</p>
      <p>As we impose no restrictions on <inline-formula><mml:math id="M29" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">A</mml:mi></mml:math></inline-formula>, we have no guarantee that the resulting extension graphs are acyclic, and thus solving MILPS is at least NP-hard. However, we empirically determined that we obtain extension graphs that are most of the time sparse and often even acyclic. Given that sparse graphs are "locally tree-like" (meaning that a typical node is not part of a short cycle) [<xref ref-type="bibr" rid="B18">18</xref>], a simple algorithm based on local cycle decomposition is computationally tractable. The main idea behind our algorithm is to iteratively identify longest paths in <italic>G</italic>, where at each iteration we work on the restriction of <italic>G </italic>where no elements of the previous longest path can be traversed. To compute the longest path, <italic>G </italic>is decomposed into acyclic and cyclic parts. The cyclic parts of <italic>G </italic>correspond to its strongly connected components (SCCs). For each SCC, we determine the subset of vertices that are entry and exit points; and enumerate all simple paths between them. This set of enumerated paths is then inserted in <italic>G </italic>in lieu of the SCC. This operation yields an acyclic graph. In such a graph, longest paths between In and Out are determined by a greedy approach based on topological ordering. The complete solution is described in Algorithm 1.</p>
      <p><bold>Algorithm 1 </bold>Maximal Independant Longest Path Set</p>
      <p><bold>Require: </bold>Directed weighted graph <italic>G </italic>= â©<italic>V, E, w</italic>, In, Outâª</p>
      <p><bold>Ensure: </bold>Maximal Independant Longest Path Set <inline-formula><mml:math id="M30" name="1471-2105-14-S15-S16-i8" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">P</mml:mi></mml:math></inline-formula></p>
      <p>1: Let <italic>C </italic>be the set of non singleton strongly connected components of <italic>G</italic></p>
      <p>2: Let <italic>R </italic>be a mapping <italic>V </italic>â <italic>V </italic>used to store the initial label <italic>R</italic>(<italic>v</italic>) of a vertex <italic>v</italic>; <italic>R</italic>(<italic>V</italic>) â <italic>V</italic></p>
      <p>3: <bold>if </bold><italic>C </italic>â  â <bold>then</bold></p>
      <p>4:Â Â  <bold>for </bold>each strongly connected component <italic>c </italic>â <italic>C </italic><bold>do</bold></p>
      <p>5:Â Â Â Â Â Â Mark entry {<italic>v<sup>in</sup></italic>} (resp. exit {<italic>v<sup>out</sup></italic>}) vertices of <italic>c</italic>, s.t. (<italic>v, v<sup>in</sup></italic>) â <italic>E, v; </italic><inline-formula><mml:math id="M31" name="1471-2105-14-S15-S16-i23" overflow="scroll"><mml:mrow><mml:mtext>Â </mml:mtext><mml:mo class="MathClass-rel">â</mml:mo></mml:mrow></mml:math></inline-formula><italic>c </italic>(resp. (<italic>v<sup>out</sup>, v</italic>) â <italic>E, Ï </italic><inline-formula><mml:math id="M32" name="1471-2105-14-S15-S16-i23" overflow="scroll"><mml:mrow><mml:mtext>Â </mml:mtext><mml:mo class="MathClass-rel">â</mml:mo></mml:mrow></mml:math></inline-formula><italic>c</italic>)</p>
      <p>6:Â Â Â Â Â Â Let <italic>P </italic>be the set of all simple paths from {<italic>v<sup>in</sup></italic>} to {<italic>v<sup>out</sup></italic>} in <italic>c</italic>, by performing <italic>|c| </italic>iterations of a breadth-first traversal rooted at the entry vertices</p>
      <p>7:Â Â Â Â Â Â <bold>for </bold>each path <italic>p </italic>â <italic>P </italic><bold>do</bold></p>
      <p>8:Â Â Â Â Â Â Â Â Insert a novel path <italic>p</italic>' in <italic>G</italic>, with <inline-formula><mml:math id="M33" name="1471-2105-14-S15-S16-i17" overflow="scroll"><mml:mi>w</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msubsup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mi>â²</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-rel">â</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:math></inline-formula> and with <inline-formula><mml:math id="M34" name="1471-2105-14-S15-S16-i18" overflow="scroll"><mml:mi>R</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:msubsup><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mi>â²</mml:mi></mml:mrow></mml:msubsup></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow><mml:mo class="MathClass-rel">â</mml:mo><mml:msub><mml:mrow><mml:mi>p</mml:mi></mml:mrow><mml:mrow><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi>i</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:msub></mml:math></inline-formula></p>
      <p>9:Â Â Â Â Â Â <bold>end for</bold></p>
      <p>10:Â Â Â <bold>end for</bold></p>
      <p>11: <bold>end if</bold></p>
      <p><bold>Ensure: </bold><italic>G </italic>is acyclic</p>
      <p>12: Let <italic>W </italic>be a mapping <inline-formula><mml:math id="M35" name="1471-2105-14-S15-S16-i19" overflow="scroll"><mml:mrow><mml:mi>V</mml:mi><mml:mo class="MathClass-rel">â</mml:mo><mml:mi>â</mml:mi></mml:mrow></mml:math></inline-formula> indicating the accumulated length <italic>W</italic>(<italic>v</italic>) down to node <italic>v</italic>; <italic>W</italic>(In) â 0</p>
      <p>13: Let Pred be a mapping <italic>V </italic>â <italic>V </italic>indicating the predecessor Pred(<italic>v</italic>) of <italic>v </italic>in the current longest path; <italic>Pred</italic>(In) â â</p>
      <p>14: <inline-formula><mml:math id="M36" name="1471-2105-14-S15-S16-i20" overflow="scroll"><mml:mi mathvariant="script">P</mml:mi><mml:mo class="MathClass-rel">â</mml:mo><mml:mi>â</mml:mi></mml:math></inline-formula></p>
      <p>15: <bold>repeat</bold></p>
      <p>16:Â Â Â Â <bold>for </bold><italic>v </italic>in the topological ordering of G starting at In and ending at Out <bold>do</bold></p>
      <p>17:Â Â Â Â Â Â Let <inline-formula><mml:math id="M37" name="1471-2105-14-S15-S16-i24" overflow="scroll"><mml:mrow><mml:msup><mml:mi>V</mml:mi><mml:mo>â²</mml:mo></mml:msup><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:msup><mml:mi>Ï</mml:mi><mml:mo>â²</mml:mo></mml:msup><mml:mo>â</mml:mo><mml:mi>V</mml:mi><mml:mo>|</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mi>Ï</mml:mi><mml:mo>â²</mml:mo></mml:msup><mml:mo>,</mml:mo><mml:mi>Ï</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>â</mml:mo><mml:mi>E</mml:mi><mml:mo>,</mml:mo><mml:mtext>â</mml:mtext><mml:menclose notation="updiagonalstrike"><mml:mo>â</mml:mo></mml:menclose><mml:mtext>â</mml:mtext><mml:mi>p</mml:mi><mml:mo>â</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo>,</mml:mo><mml:msup><mml:mi>Ï</mml:mi><mml:mo>â²</mml:mo></mml:msup><mml:mo>â</mml:mo><mml:mi>p</mml:mi><mml:mo>â¨</mml:mo><mml:msup><mml:mi>Ï</mml:mi><mml:mo>â²</mml:mo></mml:msup><mml:mo>â</mml:mo><mml:mi>R</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>}</mml:mo></mml:mrow></mml:math></inline-formula></p>
      <p>18:Â Â Â Â Â Â Pred(<italic>v</italic>) <italic>â </italic>arg max<italic><sub>v'</sub></italic><sub>â<italic>V' </italic></sub>(<italic>W</italic>(<italic>Ï</italic>') + <italic>w</italic>(<italic>v</italic>', <italic>v</italic>))</p>
      <p>19:Â Â Â Â Â Â <italic>W</italic>(<italic>Ï</italic>) <italic>â </italic>max<italic><sub>Ï'</sub></italic><sub>â<italic>V' </italic></sub>(<italic>W</italic>(<italic>Ï</italic>') + <italic>w</italic>(<italic>Ï</italic>', <italic>Ï</italic>))</p>
      <p>20:Â Â <bold>end for</bold></p>
      <p>21:Â Â Walk up the graph to construct the path <italic>p </italic>by letting <italic>p â </italic>Pred<sup>â</sup>(<italic>Out</italic>)</p>
      <p>22:Â Â <inline-formula><mml:math id="M38" name="1471-2105-14-S15-S16-i21" overflow="scroll"><mml:mrow><mml:mi mathvariant="script">P</mml:mi><mml:mo class="MathClass-rel">â</mml:mo><mml:mi mathvariant="script">P</mml:mi><mml:mo class="MathClass-bin">âª</mml:mo><mml:mfenced close="}" open="{"><mml:mrow><mml:mi>p</mml:mi></mml:mrow></mml:mfenced></mml:mrow></mml:math></inline-formula></p>
      <p>23: <bold>until </bold><italic>p </italic>= â</p>
      <p>24: <bold>return </bold><inline-formula><mml:math id="M39" name="1471-2105-14-S15-S16-i22" overflow="scroll"><mml:mrow><mml:mi>R</mml:mi><mml:mrow><mml:mo class="MathClass-open">(</mml:mo><mml:mrow><mml:mi mathvariant="script">P</mml:mi></mml:mrow><mml:mo class="MathClass-close">)</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>, the MILPS with re-labeled vertices</p>
      <p>In the case where <italic>G </italic>is acyclic, this algorithm is linear in the number of vertices. However, if <italic>G </italic>contains a cycle, the number of vertices that are added during the decomposition of a strongly connected component is exponential in the size of the strongly connected component. In our experiments (see Results section), we applied Mix over 300 different combinations of assemblies of bacterial genomes, and only two of them yielded assembly graphs with cycles, that were of tractable size.</p>
      <p>Once the MILPS in the extension graph are built, we use the information stored in the graph to glue and stitch contigs corresponding to each extension path.</p>
      <p><bold>Pruning </bold>A pruning step is performed over the set of remaining contigs and extension paths. This step ensures that duplication is lowered. Indeed, one of the main drawbacks of merging two assemblies of the same genome is that most of the information is duplicated. In order to reduce this effect, we compute a coverage graph which is a directed graph with an edge between <italic>v </italic>and <italic>v</italic>' if portions of the nucleotide sequence of <italic>v </italic>is found in <italic>v</italic>'. Based on this graph, we can determine which contigs are entirely or to a large extent contained into other contigs or paths. These covered contigs are then removed from the final assembly. To build the coverage graph, we start by generating a coverage matrix that indicates how much an element of the current assembly graph (either a contig or an extension path) is covered by another element. To compute the coverage, we reuse the initial set of alignments <inline-formula><mml:math id="M40" name="1471-2105-14-S15-S16-i6" overflow="scroll"><mml:mtext>Â </mml:mtext><mml:mi mathvariant="script">A</mml:mi></mml:math></inline-formula> to determine how many nucleotides of a source element are found in the target element. This coverage is computed for each possible pair. The coverage matrix is then thresholded to only keep pairs of elements with high coverage (90 % in our experiments). We then consider this thresholded matrix to be the adjacency matrix of a directed graph. This requires to decide the direction of inclusion for each pair where the coverage is above the threshold. This direction is determined by selecting as source the element with the highest ratio of covered nucleotides. In the case of ties, the shortest element is elected as source. This edge-orientation strategy can nonetheless produce cycles in the coverage graph as several contigs from different assemblies can be highly similar. In such cases, cycles are broken by selecting the element with the longest nucleotide sequence from each strongly connected component. We then perform a topological sort on the coverage graph and systematically remove contigs that are not covering any contig but that are covered by other contigs or paths.</p>
    </sec>
  </sec>
  <sec sec-type="results">
    <title>Results</title>
    <sec>
      <title>Performance evaluation</title>
      <p>We evaluated the performance of <italic>Mix </italic>on the GAGE-B data set [<xref ref-type="bibr" rid="B15">15</xref>] against both raw assemblies and two tools that allow combining assemblies, GAA (best in GAGE-B study) and GAM-NGS (not previously evaluated). The benchmark provided by GAGE-B concerns 8 bacterial genomes. Starting point data consists of HiSeq and MiSeq Illumina reads (sometimes both, sometimes just HiSeq). Tools tested in the GAGE-B study include 8 assemblers and 2 merging algorithms, minimus2 and GAA. These latter have been chosen since they are (almost) reference free, contrary to the others. As already stated in the Background section, mixing assembly tools mostly provided inferior results, however for some cases GAA managed to improve the N50 size with an increase of <italic>&gt;</italic>80%.</p>
      <p>We applied GAA and GAM-NGS for all pairwise combinations of 8 assemblers twice (accounting for the asymmetry). We evaluated <italic>Mix </italic>results against those for the 8 assemblers, as well as merged assemblies produced by GAA and GAM-NGS. All evaluations were performed using QUAST [<xref ref-type="bibr" rid="B19">19</xref>] under the same parameters as GAGE-B. Three different types of metrics are used by QUAST. First, classical assembly statistics based on the distribution of the length of each contig of an assembly. These statistics do not require any reference genome and are used to measure the fragmentation of an assembly. A second set of statistics is derived from an alignment of the assembly against a reference genome. Contigs that are aligned over distant locations in the reference genome or that contain misassemblies are split, and fragmentation is measured over the split contigs. Using these alignments, additional measures report the ratio of duplication as well as the fraction of the reference genome that is covered by an assembly. A third, more robust, statistics is derived from the conservation of gene products. These last two statistics can be measured only if a fully assembled and annotated reference genomes is provided.</p>
      <p>In total 1171 different assemblies were produced by crossing each species, master and slave assembler datasets (for GAM and GAA) and all possible pairs of assemblers for <italic>Mix </italic>. All original assemblies were downloaded from the GAGE-B website, they consist of contigs assemblies and correspond to HiSeq libraries, with the exception of <italic>B. cereus </italic>for which we used assemblies based on MiSeq libraries in order to match the GAGE-B setup. Only 13 species/merger/assemblers combination are missing from the full factorial setup. Figure <xref ref-type="fig" rid="F3">3</xref> reports the NA50 distributions per species and assembly merger contrasted with single (unmerged) assemblies. Two species are missing from this figure, <italic>X. axonopodis </italic>and <italic>A. hydrophila</italic>, since the strain sequenced during the GAGE-B project is too distant from the reference genome to compute a NA50 value (this holds for all assemblies for these two species). In setups where a close-enough reference genome is not available, the sole statistics available to "score" assemblies are based on fragmentation measures, notably the N50. To simulate such reference-less setup, we selected for each species and each assembly merger the top 5 assemblies when ranked by N50. By analyzing how these "blindly" selected top N50 assemblies are scored with regards to statistics based on a reference genome, we can analyze the soundness of this selection heuristic.</p>
      <fig id="F3" position="float">
        <label>Figure 3</label>
        <caption>
          <p><bold>Comparison of (A) NA50 and (B) duplication ratio measures for GAGE-B benchmark</bold>. (A) For six bacterial genome (six panels), eight assemblies were provided by GAGE-B, and were merged either with GAA (64 combinations), GAM-NGS (64 combinations) or Mix (28 combinations only since no asymmetry between input assemblies is introduced) or not further processed (Single Assembly). The resulting assemblies were accessed against the reference genome by QUAST and the length of the shortest aligned contig from all that cover 50% of all assembly (AKA NA50 or "corrected N50") for each possible combinations of species, mergers and assembers are reported as points (Top panel). The higher the better. Box-plots indicate the quartiles of the distribution of NA50. For each species and mergers, the top 5 combinations of assemblies according to N50 were selected, and their NA50 are depicted using large triangles. Panel (B)) report the duplication ratio of the same assemblies, the horizontal dashed line indicate a perfect ratio of 1.</p>
        </caption>
        <graphic xlink:href="1471-2105-14-S15-S16-3"/>
      </fig>
      <p>In Figure <xref ref-type="fig" rid="F3">3</xref>, we observe that for all but <italic>S. aureus </italic>either GAM-NGS or <italic>Mix </italic>improve the single assembly substantially. Notably for <italic>B. cereus</italic>, for which the authors of GAGE-B already reported some improvement over single assemblies when using GAA, we manage with GAM or <italic>Mix </italic>to improve even more. The best <italic>Mix </italic>assembly for <italic>B. cereus </italic>stitches 90 contigs from MaSuRCA and 105 from SOAP into 47 contigs (including 4 extension paths), improving the NA50 score by 97%(NA50 of 487kb). For five out of six species, one of the top 5 assemblies generated by <italic>Mix </italic>is better than the best GAA, GAM and single assemblies. In particular, <italic>Mix </italic>significantly improves statistics measuring fragmentation of assemblies (for complete results, see results and figures available at <ext-link ext-link-type="uri" xlink:href="https://github.com/cbib/MIX">https://github.com/cbib/MIX</ext-link>), as well as alignments of contigs. Similar plots and tabular data for other QUAST statistics are available on the accompanying MIX website. These also show the asymmetry in the results when one or another of assemblies is treated as target (resp., master) by GAA (resp., GAM-NGS).</p>
      <p>Of particular concern when merging multiple assemblies is the potential increase in duplication. Indeed, the bottom panel of Figure <xref ref-type="fig" rid="F3">3</xref> shows that overall, the mean duplication ratio for <italic>Mix </italic>is higher than for other assemblers, the worst case happening for <italic>V. cholera </italic>where one of <italic>Mix </italic>top 5 assemblies has a duplication that is out of range of the others. It is worth noting however that generally the duplication ratio of <italic>Mix </italic>assemblies stays within the same range as that produced by other assemblers (on the order of 1-2%). Finally and most importantly, we also observe that selecting assemblies solely based on the N50 value often selects the best assemblies, as validated by additional reference-genome based statistics.</p>
    </sec>
    <sec>
      <title>Application to Mycoplasma genomes</title>
      <p>We have assembled the 10 newly sequenced genomes of bacteria belonging to the genus <italic>Mycoplasma. Mycoplasmas </italic>are small bacteria often portrayed as the best representative of the minimal cell. Indeed, their genomes are extremely reduced (<italic>i.e</italic>., 0.58 to 1.4 Mbp) with a low GC-content, most of them ranging from 24 to 30%. For the <italic>Mycoplasma </italic>genomes the available NGS data consisted in 454 and Illumina (mate paired) reads, produced in the frame of the ANR <italic>EVOLMYCO </italic>project (see Table <xref ref-type="table" rid="T1">1</xref>).</p>
      <table-wrap id="T1" position="float">
        <label>Table 1</label>
        <caption>
          <p>Summary of NGS reads volume used for genome assembly of 10 Mycoplasma genomes</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left">Genomes</th>
              <th align="center">Abbreviations</th>
              <th align="center" colspan="2">454 mate pair</th>
              <th align="center" colspan="2">Illumina</th>
            </tr>
            <tr>
              <th/>
              <th/>
              <th colspan="4">
                <hr/>
              </th>
            </tr>
            <tr>
              <th/>
              <th/>
              <th align="center">#reads</th>
              <th align="center">med. size</th>
              <th align="center">#reads</th>
              <th align="center">size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>auris 15026</td>
              <td align="center">MAUR</td>
              <td align="center">107423</td>
              <td align="center">152.32</td>
              <td align="center">4386186</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>bovigenitalium 51080</td>
              <td align="center">MBVG</td>
              <td align="center">132462</td>
              <td align="center">156.01</td>
              <td align="center">28752688</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>ovipneumoniae 14811</td>
              <td align="center">MOVI</td>
              <td align="center">97641</td>
              <td align="center">160.49</td>
              <td align="center">6889585</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>bovis 1067</td>
              <td align="center">MBOVb</td>
              <td align="center">203245</td>
              <td align="center">166.97</td>
              <td align="center">35808407</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>mycoides subsp. capri PG3</td>
              <td align="center">MMC</td>
              <td align="center">265968</td>
              <td align="center">145.12</td>
              <td align="center">4817991</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>capricolum subsp. capripneumoniae 99108</td>
              <td align="center">MCCP</td>
              <td align="center">150110</td>
              <td align="center">134.31</td>
              <td align="center">32510614</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>mycoides subsp. mycoides B345/93</td>
              <td align="center">MSCb</td>
              <td align="center">247991</td>
              <td align="center">142.42</td>
              <td align="center">5342924</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>mycoides subsp. mycoides C425/93</td>
              <td align="center">MSCc</td>
              <td align="center">186553</td>
              <td align="center">162.18</td>
              <td align="center">3585785</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>mycoides subsp. mycoides Gemu Goffa</td>
              <td align="center">MSCe</td>
              <td align="center">132717</td>
              <td align="center">168.14</td>
              <td align="center">28776419</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left"><italic>Mycoplasma </italic>mycoides subsp. mycoides KH3J</td>
              <td align="center">MSCd</td>
              <td align="center">163636</td>
              <td align="center">169.86</td>
              <td align="center">31781063</td>
              <td align="center">36</td>
            </tr>
            <tr>
              <td colspan="6">
                <hr/>
              </td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>Raw data has been first processed for quality.</p>
        </table-wrap-foot>
      </table-wrap>
      <p>To build input assemblies we have chosen three assemblers: ABySS, MIRA and CLC. Two of them were chosen based on the GAGE-B study by considering the following points.</p>
      <p>1. SPAdes [<xref ref-type="bibr" rid="B20">20</xref>] was the winner in terms of N50. However it produced a large number of small, unaligned contigs and was consequently excluded from our study.</p>
      <p>2. ABySS consistently produced assemblies with the fewest errors and had the second best N50.</p>
      <p>3. MIRA produced a large corrected N50 with errors occurring mostly in smaller contigs.</p>
      <p>Moreover, MIRA and ABySS rely on different algorithmic methods (overlap/layout/consensus and deBruijn graph construction, respectively). Two other considerations were taken into the account for the <italic>Mycoplasma </italic>case-study. First, ABySS was specifically developed for very short reads, which is the case for our application (see Table <xref ref-type="table" rid="T1">1</xref>). Second, MIRA aims at combining reads from different sequencing technologies, which is the case for the <italic>Mycoplasma </italic>data (Illumina and 454). We have added the CLC Assembly Cell (based on the deBruijn graph), a commercial solution that was not part of the GAGE-B evaluation, but shows high N50 statistics.</p>
      <p>ABySS was run over a large span of k-mer values (25 to 36) for each genome and the best solution in terms assembly statistics was retained each time for further assembly combination.</p>
      <p>Input assemblies for each of the 10 <italic>Mycoplasma </italic>genomes were combined using GAA, GAM-NGS and <italic>Mix </italic>. GAA and GAM-NGS were applied twice to each pair of input assemblies, owing for the asymmetry in their solutions. <italic>Mix </italic>was applied once to each pair of input assemblies as well as to all three input assemblies taken together. Results of these computations as well as NGS reads are available at <ext-link ext-link-type="uri" xlink:href="http://services.cbib.u-bordeaux2.fr/mix/">http://services.cbib.u-bordeaux2.fr/mix/</ext-link>. In Figure <xref ref-type="fig" rid="F4">4</xref> we compare these assemblies using the standard genome assembly statistics applicable when no reference genome or annotations are available. We observe that we are able to significantly reduce the fragmentation with <italic>Mix</italic>, as exemplified by the substantial decrease in the number of contigs as well as the size of the largest contigs. This improvement is not counterbalanced by an increased duplication or by a loss of putative functional genomic content.</p>
      <fig id="F4" position="float">
        <label>Figure 4</label>
        <caption>
          <p><bold>Comparison of single and merged assemblies for <italic>Mycoplasma</italic></bold>. For ten bacterial <italic>My- coplasma </italic>genomes (ten columns), we generated three assemblies using CLC, MIRA and ABySS, that were subsequently merged either with GAA, GAM-NGS or <italic>Mix </italic>(28 combinations); or not further processed (Single Assembly). The resulting assemblies were assessed using standard statistics for genome assemblies (four rows): Number of contigs, size of the largest contig, N50, number of genes of more than 300bp identified by the GeneMark gene finder. For the number of contigs, the lower the better. For the other three statistics, the higher the better.</p>
        </caption>
        <graphic xlink:href="1471-2105-14-S15-S16-4"/>
      </fig>
      <p><bold>Core genome conservation </bold>GAGE-B study was based on genomes having a complete reference sequence with known proteome. This was particularly useful in order to evaluate the biological pertinence of assembly results. Our <italic>Mycoplasma </italic>study is though truly <italic>de novo </italic>and we do not have reference genomes. However, <italic>Mycoplasmas </italic>are a well studied genus where a large number of genomes are fully sequenced and annotated.</p>
      <p>This provided us the opportunity to evaluate how the core genome is preserved by assemblers and their combinations. Indeed, <italic>core genome </italic>is defined as the set of genes present in all strains. We have computed the core genome based on the 31 <italic>Mycoplasma </italic>complete genomes (Table <xref ref-type="table" rid="T2">2</xref>) according to two criteria. First, predicted proteins from each of the genomes included in the set have to be present in each cluster. Second, one single homolog per genome has to exist to avoid paralog ambiguity. The 10 draft genomes used for our study were naturally excluded from the genome set. The computed <italic>Mycoplasma </italic>core genome contains 170 clusters of direct orthologs, most of which are related to basic cell machinery. The sequences of the core genome depend on the genomes already available (thanks notably to the <italic>EVOLMYCO </italic>project).</p>
      <table-wrap id="T2" position="float">
        <label>Table 2</label>
        <caption>
          <p>Genomes used for the core genome computation</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th align="left">M. gallisepticum R High</th>
              <th align="left">M. gallisepticum R Low</th>
              <th align="left">M. gallisepticum F</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">M. genitalium G37</td>
              <td align="left">M. pneumoniae M129</td>
              <td align="left">M. penetrans HF-2</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">U. parvum 21815</td>
              <td align="left">U. urealyticum 33699</td>
              <td align="left">U. parvum 700970</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">M. agalactiae 5632</td>
              <td align="left">M. agalactiae PG2</td>
              <td align="left">M. bovis PG45</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">M. bovis Hubei</td>
              <td align="left">M. fermentans JER</td>
              <td align="left">M. synoviae 53</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">M. pulmonis UABCTIP</td>
              <td align="left">M. hyopneumoniae 232</td>
              <td align="left">M. hyopneumoniae J</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">M. hyopneumoniae 7448</td>
              <td align="left">M. hyorhinis HUB-1</td>
              <td align="left">M. mobile 163K</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">M. mycoides subsp. capri GM12</td>
              <td align="left">M. arthitidis 158L3-1</td>
              <td align="left">Mesoplasma florum L1</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">M. mycoides subsp. capri 95010</td>
              <td align="left">M. hominis PG21</td>
              <td align="left">M. leachii 99</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">M. mycoides subsp. mycoides PG1</td>
              <td align="left">M. mycoides subsp. mycoides Gladysdale</td>
              <td align="left">M. leachii PG50</td>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">M. capricolum subsp. capricolum 27343</td>
              <td/>
              <td/>
            </tr>
            <tr>
              <td colspan="3">
                <hr/>
              </td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>The <italic>core genome </italic>is defined as the set of orthologous genes present in all strains.</p>
        </table-wrap-foot>
      </table-wrap>
      <p>Since these clusters represent highly conserved sequences corresponding to essential genes, ideally, each cluster should be found in the assembled genomes. Moreover, sequence conservation should be preserved over entire length of the protein. To measure this, we first align each protein sequence of each cluster against each assembly. For each cluster, the alignment with the highest e-value is retained. Since our aim is to find entire protein/gene sequences, the alignment length is very important. Indeed, if the sequence is not entirely conserved, this can signify that it has been fragmented during assembly: either one part is located at an extremity of one contig and another part at the extremity of an another contig, or in the worse case, it can be the marker of a misassembly.</p>
      <p>Hence, for each assembly and for each cluster, given the length <italic>l<sub>A </sub></italic>of the best scoring alignment, and the length <italic>l<sub>P </sub></italic>of the protein representing the cluster, we use the percentage of the expected length that is effectively aligned against the assembly, <italic>l<sub>A</sub>/l<sub>P</sub></italic>. For a given threshold 0 <italic>â¤ t â¤ </italic>100, we count clusters that have at least one protein that aligns with <italic>l<sub>A</sub>/l<sub>P </sub>&gt; t</italic>. In Figure <xref ref-type="fig" rid="F5">5</xref>, we present the results for all the studied genomes, and for three values of <italic>t</italic>: 50%, 85% and 99.99%.</p>
      <fig id="F5" position="float">
        <label>Figure 5</label>
        <caption>
          <p><bold>Core genome conservation</bold>. For ten bacterial <italic>Mycoplasma </italic>genomes, assembled using using CLC, MIRA and ABySS and then either left as is (single-assemblies) or combined using GAA, GAM-NGS or MIX or; we determined how much a core genome defined over the whole genus of <italic>Mycoplasma </italic>is preserved for these ten genomes. The core genome is a set of 170 clusters of orthologous genes present in all strains. For each combination of species, single assemblies and merger, this figure report the distribution of the number of clusters of the core genome for which we can find at least a single gene present with 99% identity in the assembly.</p>
        </caption>
        <graphic xlink:href="1471-2105-14-S15-S16-5"/>
      </fig>
      <p>Notable negative cases for our approach are MCCP and MBVG, where <italic>Mix </italic>produced lower quality results. However, on the other cases it shows better conservation of core genome. Importantly, in the case of <italic>Mix </italic>this conservation is consistent between different combinations of input assemblies, as exemplified by a shorter inter-quartile range than that of other tools.</p>
    </sec>
  </sec>
  <sec sec-type="discussion">
    <title>Discussion</title>
    <p>Despite the progress of sequencing technologies and of bioinformatics methods, <italic>de novo </italic>assembly of genomes remains a challenge with a lot of hurdles. The cost of sequencing falling down and the computing capacity increasing, <italic>de novo </italic>assemblies of genomes are released at an increasingly fast pace.</p>
    <p>The goal of our work was to combine the strengths and to balance the weaknesses of different assembly programs in order to lower contig fragmentation. A similar goal has been previously explored by a number of papers, and in particular by the authors of GAA [<xref ref-type="bibr" rid="B14">14</xref>] and GAM-NGS [<xref ref-type="bibr" rid="B12">12</xref>]. A recent GAGE-B evaluation for bacterial genomes of assemblers and assembly mergers concluded that the latter did not provide any advantage and even sometimes worsened the results. GAM-NGS was not included in that study.</p>
    <p>In current work we have described <italic>Mix </italic>, the first truly reference-free assembly merger. Our solution is based on solving the <italic>Maximal Independent Longest Path Set </italic>problem, known to be NP-hard, but tractable for this particular application and problem sizes. Evaluating <italic>Mix </italic>on the GAGE-B bacterial dataset, we show that our approach consistently lowers genome fragmentation without compromising biological relevance (ex., as measured by the alignment against the reference). Moreover, in the case of <italic>Mix </italic>choosing the final result based on N50 statistics maintains high assembly quality. Comparatively to <italic>Mix</italic>, both single assemblers as well as GAA and GAM-NGS provide poorer results in these terms. Nevertheless, a certain drawback of our approach lies in the duplication ratio. This should however be modulated by the fact that it generally stays within 1 to 2% range.</p>
    <p>We conclude that <italic>Mix </italic>provides a sound approach for genome finishing in the context of <italic>de novo </italic>projects, where the final choice can be done based on the N50 statistics. Best resulting assemblies for <italic>Mycoplasma </italic>genomes are currently being annotated and will be shortly submitted to the EMBL.</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>HS and FM have written the code and performed the evaluation on GAGE-B and <italic>Mycoplasma </italic>datasets. HS and MN have designed the data structure, proposed the algorithmic solution and drafted the manuscript. PSP, FT, CC and VD have constructed the core genome and validated the <italic>Mycoplasma</italic>'s assemblies. MN and AG have supervised the project. All of the authors have proof-read the manuscript.</p>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>This work was supported by <italic>EVOLMYCO </italic>French Ministry of Research ANR-07-GMGE-001 grant. HS is supported by an ERASysBio+ EU ERA-NET Plus scheme in FP7 (project LymphoSys). Genome sequencing was done by the Genoscope (Centre National de SÃ©quenÃ§age, Evry, France). Computer resources for assembly were provided by the computing facilities MCIA (MÃ©socentre de Calcul Intensif Aquitain) of the UniversitÃ© de Bordeaux and of the UniversitÃ© de Pau et des Pays de l'Adour.</p>
    <p>This article has been published as part of BMC Bioinformatics Volume 14 Supplement 15, 2013: Proceedings from the Eleventh Annual Research in Computational Molecular Biology (RECOMB) Satellite Workshop on Comparative Genomics. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/bmcbioinformatics/supplements/14/S15">http://www.biomedcentral.com/bmcbioinformatics/supplements/14/S15</ext-link>.</p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Chevreux</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Pfisterer</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Drescher</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Driesel</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Muller</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Wetter</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Suhai</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Using the MiraEST assembler for reliable and automated mRNA transcript assembly and SNP detection in sequenced ESTs</article-title>
        <source>Genome Res</source>
        <year>2004</year>
        <volume>14</volume>
        <issue>6</issue>
        <fpage>1147</fpage>
        <lpage>59</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.1917404</pub-id>
        <?supplied-pmid 15140833?>
        <pub-id pub-id-type="pmid">15140833</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Simpson</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Wong</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Jackman</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Schein</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Jones</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Birol</surname>
          <given-names>I</given-names>
        </name>
        <article-title>ABySS: a parallel assembler for short read sequence data</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>14</volume>
        <issue>6</issue>
        <fpage>1117</fpage>
        <lpage>23</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.089532.108</pub-id>
        <?supplied-pmid 19251739?>
        <pub-id pub-id-type="pmid">19251739</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Ye</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Hillier</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Minx</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Thane</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Locke</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Martin</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Chen</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Mitreva</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Miller</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Haub</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Dooling</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Mardis</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Wilson</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Weinstock</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Warren</surname>
          <given-names>W</given-names>
        </name>
        <article-title>A vertebrate case study of the quality of assemblies derived from next-generation sequences</article-title>
        <source>Genome Biol</source>
        <year>2011</year>
        <volume>14</volume>
        <issue>3</issue>
        <fpage>R31</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2011-12-3-r31</pub-id>
        <?supplied-pmid 21453517?>
        <pub-id pub-id-type="pmid">21453517</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Harismendy</surname>
          <given-names>O</given-names>
        </name>
        <name>
          <surname>Ng</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Strausberg</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Wang</surname>
          <given-names>X</given-names>
        </name>
        <name>
          <surname>Stockwell</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Beeson</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Schork</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Murray</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Topol</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Levy</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Frazer</surname>
          <given-names>K</given-names>
        </name>
        <article-title>Evaluation of next generation sequencing platforms for population targeted sequencing studies</article-title>
        <source>Genome Biol</source>
        <year>2009</year>
        <volume>14</volume>
        <fpage>R32</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2009-10-3-r32</pub-id>
        <?supplied-pmid 19327155?>
        <pub-id pub-id-type="pmid">19327155</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Diguistini</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Liao</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Platt</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Robertson</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Seidel</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Chan</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Docking</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Birol</surname>
          <given-names>I</given-names>
        </name>
        <name>
          <surname>Holt</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Hirst</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Mardis</surname>
          <given-names>E</given-names>
        </name>
        <name>
          <surname>Marra</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Hamelin</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Bohlmann</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Breuil</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Jones</surname>
          <given-names>S</given-names>
        </name>
        <article-title>De novo genome sequence assembly of a filamentous fungus using Sanger, 454 and Illumina sequence data</article-title>
        <source>Genome Biol</source>
        <year>2009</year>
        <volume>14</volume>
        <fpage>R94</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2009-10-9-r94</pub-id>
        <?supplied-pmid 19747388?>
        <pub-id pub-id-type="pmid">19747388</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Nagarajan</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Butler</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Klimes</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Qiu</surname>
          <given-names>Y</given-names>
        </name>
        <name>
          <surname>Zengler</surname>
          <given-names>K</given-names>
        </name>
        <name>
          <surname>Ward</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Young</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Meth</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Palsson</surname>
          <given-names>B</given-names>
        </name>
        <name>
          <surname>Lovley</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Barrett</surname>
          <given-names>C</given-names>
        </name>
        <article-title>De Novo assembly of the complete genome of an enhanced electricity-producing variant of Geobacter sulfurreducens using only short reads</article-title>
        <source>PLoS One</source>
        <year>2010</year>
        <volume>14</volume>
        <issue>6</issue>
        <fpage>e10922</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0010922</pub-id>
        <?supplied-pmid 20544019?>
        <pub-id pub-id-type="pmid">20544019</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B7">
      <mixed-citation publication-type="other">
        <name>
          <surname>Casagrande</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Del</surname>
          <given-names>FC</given-names>
        </name>
        <name>
          <surname>Scalabrin</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Policriti</surname>
          <given-names>A</given-names>
        </name>
        <article-title>GAM: Genomic Assemblies Merger: A Graph Based Method to Integrate Different Assemblies</article-title>
        <source>Bioinformatics and Biomedicine</source>
        <year>2009</year>
        <comment>10.1109/BIBM.2009.28</comment>
      </mixed-citation>
    </ref>
    <ref id="B8">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Sommer</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Delcher</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Pop</surname>
          <given-names>M</given-names>
        </name>
        <article-title>Minimus: a fast, lightweight genome assembler</article-title>
        <source>BMC Bioinformatics</source>
        <year>2007</year>
        <volume>14</volume>
        <fpage>64</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-8-64</pub-id>
        <?supplied-pmid 17324286?>
        <pub-id pub-id-type="pmid">17324286</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B9">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Nijkamp</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Winterbach</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>van</surname>
          <given-names>dBM</given-names>
        </name>
        <name>
          <surname>Daran</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Reinders</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>de Ridder</surname>
          <given-names>R</given-names>
        </name>
        <article-title>Integrating genome assemblies with MAIA</article-title>
        <source>Bioinformatics</source>
        <year>2010</year>
        <volume>14</volume>
        <issue>18</issue>
        <fpage>i433</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq366</pub-id>
        <?supplied-pmid 20823304?>
        <pub-id pub-id-type="pmid">20823304</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B10">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Zimin</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Smith</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Sutton</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Yorke</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Assembly reconciliation</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>14</volume>
        <fpage>42</fpage>
        <lpage>5</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btm542</pub-id>
        <?supplied-pmid 18057021?>
        <pub-id pub-id-type="pmid">18057021</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B11">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Argueso</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Carazzolle</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Mieczkowski</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Duarte</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Netto</surname>
          <given-names>O</given-names>
        </name>
        <name>
          <surname>Missawa</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Galzerani</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Costa</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Vidal</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Noronha</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Dominska</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Andrietta</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Andrietta</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Cunha</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Gomes</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Tavares</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Alcarde</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Dietrich</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>McCusker</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Petes</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Pereira</surname>
          <given-names>G</given-names>
        </name>
        <article-title>Genome structure of a Saccharomyces cerevisiae strain widely used in bioethanol production</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>14</volume>
        <issue>12</issue>
        <fpage>2258</fpage>
        <lpage>2270</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.091777.109</pub-id>
        <?supplied-pmid 19812109?>
        <pub-id pub-id-type="pmid">19812109</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B12">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Vicedomini</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Vezzi</surname>
          <given-names>F</given-names>
        </name>
        <name>
          <surname>Scalabrin</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Arvestad</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Policriti</surname>
          <given-names>A</given-names>
        </name>
        <article-title>GAM-NGS: genomic assemblies merger for next generation sequencing</article-title>
        <source>BMC Bioinformatics</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>7</issue>
        <fpage>1</fpage>
        <lpage>18</lpage>
        <?supplied-pmid 23323762?>
        <pub-id pub-id-type="pmid">23323762</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B13">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Kurtz</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Phillippy</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Delcher</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Smoot</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Shumway</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Antonescu</surname>
          <given-names>C</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>S</given-names>
        </name>
        <article-title>Versatile and open software for comparing large genomes</article-title>
        <source>Genome Biology</source>
        <year>2004</year>
        <volume>14</volume>
        <issue>2</issue>
        <fpage>R12</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2004-5-2-r12</pub-id>
        <?supplied-pmid 14759262?>
        <pub-id pub-id-type="pmid">14759262</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B14">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Yao</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Ye</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Gao</surname>
          <given-names>H</given-names>
        </name>
        <name>
          <surname>Minx</surname>
          <given-names>P</given-names>
        </name>
        <name>
          <surname>Warren</surname>
          <given-names>W</given-names>
        </name>
        <name>
          <surname>Weinstock</surname>
          <given-names>G</given-names>
        </name>
        <article-title>Graph accordance of next-generation sequence assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2011</year>
        <volume>14</volume>
        <fpage>13</fpage>
        <lpage>6</lpage>
        <?supplied-pmid 22025481?>
        <pub-id pub-id-type="pmid">22025481</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B15">
      <mixed-citation publication-type="other">
        <name>
          <surname>Magoc</surname>
          <given-names>T</given-names>
        </name>
        <name>
          <surname>Pabinger</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Canzar</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Liu</surname>
          <given-names>X</given-names>
        </name>
        <name>
          <surname>Su</surname>
          <given-names>Q</given-names>
        </name>
        <name>
          <surname>Puiu</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Tallon</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Salzberg</surname>
          <given-names>S</given-names>
        </name>
        <article-title>GAGE-B: An Evaluation of Genome Assemblers for Bacterial Organisms</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <?supplied-pmid 23665771?>
        <pub-id pub-id-type="pmid">23665771</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B16">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Karger</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Motwani</surname>
          <given-names>R</given-names>
        </name>
        <name>
          <surname>Ramkumar</surname>
          <given-names>G</given-names>
        </name>
        <article-title>On Approximating the longest path in a graph</article-title>
        <source>Algorithmica</source>
        <year>1997</year>
        <volume>14</volume>
        <fpage>82</fpage>
        <lpage>98</lpage>
        <pub-id pub-id-type="doi">10.1007/BF02523689</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B17">
      <mixed-citation publication-type="other">
        <name>
          <surname>Hsu</surname>
          <given-names>YC</given-names>
        </name>
        <name>
          <surname>Sun</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Du</surname>
          <given-names>DC</given-names>
        </name>
        <article-title>Finding the longest simple path in cyclic combinational circuits</article-title>
        <source>Computer Design: VLSI in Computers and Processors, 1998 ICCD '98 Proceedings International Conference on</source>
        <year>1998</year>
        <fpage>530</fpage>
        <lpage>535</lpage>
      </mixed-citation>
    </ref>
    <ref id="B18">
      <mixed-citation publication-type="book">
        <name>
          <surname>Bollobas</surname>
          <given-names>B</given-names>
        </name>
        <source>Random Graphs</source>
        <year>1985</year>
        <publisher-name>Academic Press</publisher-name>
      </mixed-citation>
    </ref>
    <ref id="B19">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Gurevich</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Saveliev</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Vyahhi</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Tesler</surname>
          <given-names>G</given-names>
        </name>
        <article-title>QUAST: quality assessment tool for genome assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>8</issue>
        <fpage>1072</fpage>
        <lpage>1075</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt086</pub-id>
        <?supplied-pmid 23422339?>
        <pub-id pub-id-type="pmid">23422339</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B20">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Bankevich</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Nurk</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Antipov</surname>
          <given-names>D</given-names>
        </name>
        <name>
          <surname>Gurevich</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Dvorkin</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Kulikov</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Lesin</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Nikolenko</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Pham</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Prjibelski</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Pyshkin</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Sirotkin</surname>
          <given-names>A</given-names>
        </name>
        <name>
          <surname>Vyahhi</surname>
          <given-names>N</given-names>
        </name>
        <name>
          <surname>Tesler</surname>
          <given-names>G</given-names>
        </name>
        <name>
          <surname>Alekseyev</surname>
          <given-names>M</given-names>
        </name>
        <name>
          <surname>Pevzner</surname>
          <given-names>P</given-names>
        </name>
        <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>
        <source>J Comput Biol</source>
        <year>2012</year>
        <volume>14</volume>
        <fpage>455</fpage>
        <lpage>477</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id>
        <?supplied-pmid 22506599?>
        <pub-id pub-id-type="pmid">22506599</pub-id>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
