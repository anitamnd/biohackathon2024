<?DTDIdentifier.IdentifierValue -//ES//DTD journal article DTD version 5.6.0//EN//XML?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName art560.dtd?>
<?SourceDTD.Version 5.6.0?>
<?ConverterInfo.XSLTName elsevier2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<?origin publisher?>
<?FILEmeta_OHX105 xml ?>
<?FILEmain xml ?>
<?FILEmain pdf ?>
<?FILEgr1 jpg ?>
<?FILEgr2 jpg ?>
<?FILEgr3 jpg ?>
<?FILEgr4 jpg ?>
<?FILEgr5 jpg ?>
<?FILEgr6 jpg ?>
<?FILEgr7 jpg ?>
<?FILEgr8 jpg ?>
<?FILEgr9 jpg ?>
<?FILEgr10 jpg ?>
<?FILEgr11 jpg ?>
<?FILEgr12 jpg ?>
<?FILEgr13 jpg ?>
<?FILEgr14 jpg ?>
<?FILEgr15 jpg ?>
<?FILEga1 jpg ?>
<?FILEsi1 svg ?>
<?FILEsi2 svg ?>
<?FILEsi3 svg ?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">HardwareX</journal-id>
    <journal-id journal-id-type="iso-abbrev">HardwareX</journal-id>
    <journal-title-group>
      <journal-title>HardwareX</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2468-0672</issn>
    <publisher>
      <publisher-name>Elsevier</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9041221</article-id>
    <article-id pub-id-type="pii">S2468-0672(20)30013-4</article-id>
    <article-id pub-id-type="doi">10.1016/j.ohx.2020.e00105</article-id>
    <article-id pub-id-type="publisher-id">e00105</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>microUSV: A low-cost platform for indoor marine swarm robotics research</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="au005">
        <name>
          <surname>Gregory</surname>
          <given-names>Calvin</given-names>
        </name>
        <email>cgregory@mun.ca</email>
        <xref rid="af005" ref-type="aff">a</xref>
        <xref rid="cor1" ref-type="corresp">⁎</xref>
      </contrib>
      <contrib contrib-type="author" id="au010">
        <name>
          <surname>Vardy</surname>
          <given-names>Andrew</given-names>
        </name>
        <email>av@mun.ca</email>
        <xref rid="af010" ref-type="aff">b</xref>
      </contrib>
      <aff id="af005"><label>a</label>Department of Ocean and Naval Architectural Engineering, Memorial University of Newfoundland, Canada</aff>
      <aff id="af010"><label>b</label>Department of Computer Science and Department of Electrical and Computer Engineering, Memorial University of Newfoundland, Canada</aff>
    </contrib-group>
    <author-notes>
      <corresp id="cor1"><label>⁎</label>Corresponding author. <email>cgregory@mun.ca</email></corresp>
    </author-notes>
    <pub-date pub-type="pmc-release">
      <day>21</day>
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on <pub-date
						pub-type="epub">.-->
    <pub-date pub-type="collection">
      <month>4</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>21</day>
      <month>3</month>
      <year>2020</year>
    </pub-date>
    <volume>7</volume>
    <elocation-id>e00105</elocation-id>
    <permissions>
      <copyright-statement>© 2020 The Authors</copyright-statement>
      <copyright-year>2020</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).</license-p>
      </license>
    </permissions>
    <abstract abstract-type="graphical" id="ab005">
      <title>Graphical abstract</title>
      <fig id="f0080" position="anchor">
        <graphic xlink:href="ga1"/>
      </fig>
    </abstract>
    <abstract id="ab010">
      <p>This article describes an open source Unmanned Surface Vehicle (USV) designed to operate in indoor laboratory environments. The microUSV is small (23 cm long) and inexpensive (approximately $320 per unit for 10 vessels): an ideal hardware platform for algorithm validation and marine swarm robotics research. The primary design goal was to minimize the vehicle’s size and cost while providing a stable and maneuverable platform with onboard autonomy. To that end the vehicle is built using 3D printed and off-the-shelf hobbyist electronic components and uses an overhead camera system to simulate sensor data to minimize the number of onboard sensors required. This article describes the context, design, and assembly procedures for a microUSV and demonstrates the platform’s base-level functionality in the form of a waypoint following controller implementation for both single and multi-robot configurations.</p>
    </abstract>
    <kwd-group id="kg005">
      <title>Keywords</title>
      <kwd>Unmanned surface vehicle</kwd>
      <kwd>Autonomous surface vehicle</kwd>
      <kwd>Boat</kwd>
      <kwd>Swarm</kwd>
      <kwd>Multi-robot system</kwd>
    </kwd-group>
  </article-meta>
</front>
<body>
  <p id="p0005">
    <bold>Specifications table:</bold>
    <table-wrap position="float" id="t0030">
      <table frame="hsides" rules="groups">
        <tbody>
          <tr>
            <td>Hardware name</td>
            <td>microUSV</td>
          </tr>
          <tr>
            <td>Subject area</td>
            <td>Engineering and Material Science</td>
          </tr>
          <tr>
            <td>Hardware type</td>
            <td>Electrical engineering and computer science</td>
          </tr>
          <tr>
            <td>Open source license</td>
            <td>Hardware: CERN Open Hardware License v1.2</td>
          </tr>
          <tr>
            <td/>
            <td>Software: GNU General Public License v3.0</td>
          </tr>
          <tr>
            <td>Cost of hardware</td>
            <td>$522 CAD per vessel (single vessel), $317 CAD per vessel (10 vessels)</td>
          </tr>
          <tr>
            <td>Source file repository</td>
            <td>
              <ext-link ext-link-type="doi" xlink:href="10.17605/OSF.IO/7FQ6U" id="ir005">https://doi.org/10.17605/OSF.IO/7FQ6U</ext-link>
            </td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
  </p>
  <sec id="s0005">
    <label>1</label>
    <title>Hardware in context</title>
    <p id="p0010">Unmanned Surface Vehicles (USV) are autonomous boats capable of augmenting or even replacing the use of manned vessels in dangerous and/or monotonous tasks. These platforms are commonly used for oceanographic research and military applications such as surveillance and environmental monitoring <xref rid="b0005" ref-type="bibr">[1]</xref>. Designed to survive in harsh open-water environments, these vehicles are typically large and expensive. The majority of USVs are custom designed and built for their target application and are not generally available for purchase commercially. Those that are available on the market can range in size from 1.3 to 8 meters in length. These commercial vessels can cost between $30,000 and several million USD depending on their sensor payload <xref rid="b0010" ref-type="bibr">[2]</xref>, <xref rid="b0015" ref-type="bibr">[3]</xref>, <xref rid="b0020" ref-type="bibr">[4]</xref>. This makes the cost of purchasing a fleet of commercially available USVs prohibitive for many laboratories and researchers.</p>
    <p id="p0015">We are investigating the use of multi-robot systems as a means of environmental monitoring and cleanup as part of our ongoing research. The intended application for our proposed platform is to test algorithms developed for swarm robotics, such as the approach described in <xref rid="b0025" ref-type="bibr">[5]</xref>, as methods for ocean contaminant collection using a fleet of USVs.</p>
    <p id="p0020">As the name implies, multi-robot systems require multiple robots. Simulated environments can allow multiple robots to be easily generated and tested but to truly capture the complexity of the marine environment for algorithm validation, hardware testing is also necessary <xref rid="b0030" ref-type="bibr">[6]</xref>. The high cost associated with purchasing multiple commercial USVs motivated the search for a low-cost alternative platform.</p>
    <p id="p0025">Open source USV platforms offer an alternative to purchasing commercial options. Open source solutions are generally much less expensive and can be built and modified by an individual user or researcher to suit their specific needs. Such platforms are slowly being introduced to the research community such as the Jetyak <xref rid="b0035" ref-type="bibr">[7]</xref>, ARCAB <xref rid="b0040" ref-type="bibr">[8]</xref>, and SMARTBoat 3 <xref rid="b0045" ref-type="bibr">[9]</xref>. These three platforms have approached the problem of low-cost USV research platforms from different angles.</p>
    <p id="p0030">The Jetyak is a fully functional USV capable of carrying the same instrumentation and navigation equipment as large commercial USVs, however its $15,000 USD fabrication cost, while cheaper than commercial USV systems, make it too expensive to produce in large quantities for multi-robot systems research. The Arctic Research Centre Autonomous Boat (ARCAB) has the same issue as the Jetyak for our application: at 3000 euro per vessel the cost of acquiring multiple vessels is prohibitive. The SMARTBoat 3 is a recently published system with a much lower reported cost of $200 per vessel. Designed as a small environmental monitoring vessel, its shape was constrained by the use of repurposed off-the-shelf components for floatation. The SMARTBoat 3’s toroidal hull-form does not reflect the dynamics of larger USV’s, the eventual target platform for any algorithms developed through our experiments. This makes it an unsuitable platform for our purposes.</p>
    <p id="p0035">The size and payloads of full-scale USVs require outdoor testing environments whose availability can depend on weather and logistical factors. Ideally there would be an intermediary hardware testing platform capable of operating in a laboratory environment such as the system described in <xref rid="b0050" ref-type="bibr">[10]</xref>. Such a testbed could be used as a stepping-stone to evaluate algorithms before investing in larger, more costly hardware for open water experiments on lakes or oceans.</p>
    <p id="p0040">To be considered a USV, a marine vessel must be capable of three things: locomotion, localization, and some degree of automatic control. Locomotion is a prerequisite for any vehicle, as vehicles must be capable of moving to be considered as such. To be considered an unmanned vehicle, there must be no human operator(s) aboard the vessel. With no operator aboard, a USV must have partial, if not full, automatic control. In robotics, this will often take the form of an onboard computer or microprocessor reacting to measurements from the vessel’s sensor. One or more of these sensors must provide some means of localization to produce the feedback measurements needed for the onboard controller. To the best of our knowledge, no such platform exists that is available for purchase commercially. Those indoor platforms that do exist are typically custom built for a given researcher or research group.</p>
    <p id="p0045">A remote control (RC) boat would fit the definition of a USV however such platforms require human-in-the-loop control and lack other desirable properties for marine robotics research such as onboard processing. An RC boat could be modified to include an onboard controller and remove the need for human intervention; In fact, similar things have been done successfully by hobbyists <xref rid="b0055" ref-type="bibr">[11]</xref>, <xref rid="b0060" ref-type="bibr">[12]</xref>, <xref rid="b0065" ref-type="bibr">[13]</xref>. Such hobby projects served as a jumping-off point for our own solution.</p>
    <p id="p0050">Finding no available USV platforms suitable for swarm robotics research, we have developed our own: The microUSV, shown in <xref rid="f0005" ref-type="fig">Fig. 1</xref>, is a small USV platform designed for use in laboratory environments. It was designed to be inexpensive to produce, capable of onboard autonomous control, and easily reprogrammable. The design leverages 3D printing and off-the-shelf hobbyist electronics to produce a marine robotics research platform that costs just over $500 CAD for a single unit and is much cheaper when produced in multiples. It measures 23 cm in length and so is capable of maneuvering in the 3.65 m <inline-formula><mml:math id="M1" altimg="si1.svg"><mml:mrow><mml:mo>×</mml:mo></mml:mrow></mml:math></inline-formula> 3.65 m enclosed indoor water tank available to us for testing that would barely fit the smallest commercial USV platforms. A fleet of such vessels can be used to test and validate new or existing multi-robot systems applications in the marine environment such as object aggregation or dispersion, flocking behaviors, and collective mapping tasks.<fig id="f0005"><label>Fig. 1</label><caption><p>microUSV.</p></caption><graphic xlink:href="gr1"/></fig></p>
    <p id="p0055">This article, coupled with the project repository Wiki <xref rid="b0070" ref-type="bibr">[14]</xref>, will describe the procedures to assemble and test a microUSV and demonstrates the platform’s basic functionality.</p>
  </sec>
  <sec id="s0010">
    <label>2</label>
    <title>Hardware description</title>
    <sec id="s0015">
      <label>2.1</label>
      <title>Mechanical systems</title>
      <p id="p0060">The microUSV’s hardware can be broadly divided into three subassemblies: The hull, propulsion system, and onboard electronics bracket.</p>
      <sec id="s0020">
        <label>2.1.1</label>
        <title>Hull</title>
        <p id="p0065">The first notable aspect of the microUSV’s hull design is its size: the vessel has a length overall of 230 mm, a beam of 89.2 mm, and a depth of 121.5 mm as seen in <xref rid="f0010" ref-type="fig">Fig. 2</xref>. A laboratory tank is a tightly confined operating environment when compared to a lake or ocean, with a surface area measured in m<sup>2</sup> rather than km<sup>2</sup>. A small vessel is better suited to operating in such a small body of water than a full sized USV designed for the open water. A full sized USV with a length overall of 1.3 m, such as the vessel described in <xref rid="b0010" ref-type="bibr">[2]</xref>, or greater would be nearly incapable of maneuvering in a 3.65 m <inline-formula><mml:math id="M2" altimg="si2.svg"><mml:mrow><mml:mo>×</mml:mo></mml:mrow></mml:math></inline-formula> 3.65 m test tank. One or more scaled-down vessels are fully capable of maneuvering in such a confined environment and, by extension, are better at demonstrating the behaviors being investigated by the operator(s).<fig id="f0010"><label>Fig. 2</label><caption><p>microUSV Hull Lines Plan (Dimensions in mm).</p></caption><graphic xlink:href="gr2"/></fig></p>
        <p id="p0070">A small vessel design is also beneficial for its reduced material costs: A smaller vessel requires smaller parts which influences not only the volume of materials required but also their selection. Using smaller parts reduces the vessel’s weight which results in lower loads on the hull so structural components can be made smaller and lighter. The microUSV’s hull design eschews more traditional structural materials like steel and aluminum for parts made of polylactic acid (PLA) plastic produced using an Ultimaker 2+ 3D printer. Multiple plastic hull designs were prototyped, and the material was deemed strong enough to support the vessel’s small operating loads.</p>
        <p id="p0075">The vessel’s hull form was designed using the lines plan of a tugboat <xref rid="b0075" ref-type="bibr">[15]</xref> for reference. A tugboat hull was chosen for its stability and compact design. Good stability is of particular importance to the microUSV due to the use of an external pose detector system which will be discussed in Section 2.3. The compactness of this hull type is beneficial due to the increased usable internal cavity volume relative to the vessel’s size. The vessel’s low length-to-beam ratio is important to allow sufficient width of the internal volume for onboard electronics to be mounted without greatly increasing the vessel’s length overall. The microUSV’s hull was further compressed lengthwise relative to the reference lines plan to decrease this length-to-beam ratio and allow the hull to be fabricated as a single component on the 3D printer’s limited build platform space.</p>
      </sec>
      <sec id="s0025">
        <label>2.1.2</label>
        <title>Stability</title>
        <p id="p0080">The importance of mounting onboard electronics also influenced the decision to use a monohulled design over the catamaran design often seen in other small USVs <xref rid="b0010" ref-type="bibr">[2]</xref>, <xref rid="b0020" ref-type="bibr">[4]</xref>: Mounting heavy components like batteries at or below the waterline improves the vessel’s stability without increasing the beam length which results in a vessel with a smaller footprint, better able to navigate confined spaces. Due to the microUSV’s small size, a catamaran design would require the twin hulls to be scaled up to provide enough internal space for component mounting. They would quickly exceed the volume necessary to keep the vessel afloat and further increase the vessel’s footprint. Since the microUSV operates exclusively indoors it does not need to survive wind and large waves, so the catamaran’s tradeoff in size for stability was deemed unnecessary. The microUSV’s monohulled design utilizes other means to achieve the necessary stability.</p>
        <p id="p0085">A fin keel was added to improve vessel stability without resorting to widening the hull. The keel’s surface area catches water as the vessel rolls, inducing a drag force to resist the motion and a steel ballast plate in the keel lowers the vessel’s center of gravity, thus increasing the metacentric height (GM). Molland <xref rid="b0080" ref-type="bibr">[16]</xref> defines GM as ‘The vertical separation of the metacenter and the center of gravity as projected on to a transverse plane’ where the metacenter is ‘The intersection of successive vertical lines through the center of buoyancy as a ship is heeled progressively’, heel angle referring to the degree of roll a ship is experiencing. The metacenter is the effective pivot point for a ship experiencing roll and its height dictates the stability of a vessel.</p>
        <p id="p0090">Increasing a vessel’s GM increases its stability due to the resultant increase in the vessel’s righting lever (GZ). GZ is the horizontal distance between a vessel’s center of gravity and the line of action of its buoyancy force. When offset due to roll, the gravity and buoyancy forces generate a couple moment which rights the vessel. A longer righting lever increases the righting moment experienced by a vessel as it rolls, returning it to an upright position faster. In the case of the microUSV, the vessel has an estimated natural roll period of 1.17 s <xref rid="b0085" ref-type="bibr">[17]</xref>. The microUSV’s GZ curve, calculated using an iterative righting lever simulation with respect to vessel heel angle <xref rid="b0090" ref-type="bibr">[18]</xref> and shown in <xref rid="f0015" ref-type="fig">Fig. 3</xref>, shows no angle of vanishing stability, defined as the x-intercept on a vessel’s GZ curve, meaning it can theoretically right itself from any degree of roll.<fig id="f0015"><label>Fig. 3</label><caption><p>Righting Lever Length vs Heel (Roll) Angle Plot.</p></caption><graphic xlink:href="gr3"/></fig></p>
      </sec>
      <sec id="s0030">
        <label>2.1.3</label>
        <title>Waterproofing</title>
        <p id="p0095">The hull design includes a lid to keep water out of the internal cavity in the case of excessive roll or splashes. This lid is mounted to the hull using a double lap joint around the hull’s entire upper edge and is kept in place by a pair of hair elastics. The design does not include a gasket or O-ring and so is splash proof but not completely watertight. In order to achieve a fully waterproof design a gasket flange or O-ring groove would need to be added with many tightly spaced bolts along the joint between hull and lid to squeeze the sealing elastomer component. These bolts would add significant weight to the vessel, requiring increased buoyancy, and therefore hull size, to support them and would shift the center of gravity upward, reducing the vessel’s GM and stability. The microUSV was designed to operate on the water’s surface and should never need to endure being submerged under water, so the costs of a fully waterproof design outweighed its benefits.</p>
        <p id="p0100">The vessel has, however, been successfully tested for very brief periods of immersion: it can survive for one second fully submerged in water without any water reaching the internal cavity and can likely endure longer immersions, but this has not been tested. It is easily capable of surviving the splash from a wave or an accidental immersion during retrieval.</p>
        <p id="p0105">The PLA plastic used for the hull is naturally waterproof, but it is also a biodegradable material: Its integrity may gradually deteriorate due to exposure to UV light or temperature changes over time. Additionally, the layered building process used by fused deposition modeling (FDM) 3D printers is imperfect. There is a chance of introducing small, often unnoticeable, defects and gaps in the walls of a part during the printing process. Although a 3D printed hull made with an accurate printer can easily survive a handful of immersions in water, it is unlikely to endure months or years of repeated use without leaking which would likely destroy the electronics housed inside. Therefore, an additional waterproof coating of epoxy was added to the hull’s external surfaces.</p>
      </sec>
      <sec id="s0035">
        <label>2.1.4</label>
        <title>Propulsion system</title>
        <p id="p0110">The microUSV’s propulsion system consists of a pair of propellers driven directly by DC motors, the components for which can be seen in <xref rid="f0020" ref-type="fig">Fig. 4</xref>. Each motor connects to its drive shaft via a universal joint shaft coupler to mitigate small shaft misalignments. The drive shafts are arranged in parallel with a spacing of 48 mm and independently controlled motors to allow differential drive. A differential drive system was chosen over a more traditional propeller and rudder arrangement to improve the vessel’s maneuverability: making the microUSV better able to navigate its confined operating environment.<fig id="f0020"><label>Fig. 4</label><caption><p>Drive Train Assembly Exploded View Drawing.</p></caption><graphic xlink:href="gr4"/></fig></p>
        <p id="p0115">The vessel’s drive shafts are kept watertight with a pair of custom stuffing tubes. A stuffing tube is a simple assembly packed with grease which forms a seal around a rotating shaft. The microUSV’s stuffing tubes are made of stainless steel with a bushing at each end to support the shaft as it rotates and the void space between shaft and tube is filled with petroleum jelly. These tubes are mounted to the hull and themselves sealed in place using a marine-grade silicone sealant. The stuffing tubes needed to be custom made as all existing off-the-shelf stuffing tube and drive shaft systems were too long to fit the vessel’s hull.</p>
        <p id="p0120">The propulsion system consists of mostly off-the-shelf components to reduce costs: the propellers, drive dogs, and shaft couplers were all sourced from RC boat part suppliers. The drive shaft, motors, and components for the stuffing tubes were also purchased off-the-shelf but required further modification.</p>
      </sec>
      <sec id="s0040">
        <label>2.1.5</label>
        <title>Onboard electronics bracket</title>
        <p id="p0125">The electrical components onboard the microUSV are all mounted to a 3D printed bracket except for the batteries and motors which are mounted directly to the hull. The motors are mounted independently to ensure alignment with the drive shafts and the batteries are mounted below the electronics bracket in order to keep the vessel’s center of gravity as low as possible to improve stability as discussed in Section <xref rid="s0025" ref-type="sec">2.1.2</xref>, Stability. This electronics bracket is mounted on three threaded posts inside the hull and can be easily removed to change batteries or bench test and debug the electrical system. The mounting process is illustrated in <xref rid="f0025" ref-type="fig">Fig. 5</xref>.<fig id="f0025"><label>Fig. 5</label><caption><p>Electronics Bracket Assembly Drawing.</p></caption><graphic xlink:href="gr5"/></fig></p>
      </sec>
    </sec>
    <sec id="s0045">
      <label>2.2</label>
      <title>Electrical system</title>
      <p id="p0130">The microUSV’s onboard electronics system is designed to utilize readily available hobbyist components. This minimizes cost and allows damaged or defective components to be replaced quickly. It also grants access to the large user communities supporting each of these products, potentially simplifying the debugging process for a new user. A system integration diagram is provided in <xref rid="f0030" ref-type="fig">Fig. 6</xref>.<fig id="f0030"><label>Fig. 6</label><caption><p>System Integration Diagram.</p></caption><graphic xlink:href="gr6"/></fig></p>
      <sec id="s0050">
        <label>2.2.1</label>
        <title>Electronic devices</title>
        <p id="p0135">To achieve onboard autonomous control and reprogrammability, a single-board computer was selected as the primary control unit: A Raspberry Pi Zero W. The Pi Zero is the smallest of the popular family of pocket-sized computers and is well suited to small robotics projects. The Pi Zero W features a built-in wireless module used for communication between each vessel and the host PC discussed in Section <xref rid="s0060" ref-type="sec">2.3</xref>. It runs the Raspbian operating system which grants it the same functionality as most desktop Linux systems. This allows the microUSV’s onboard control software to be written in any number of popular high-level programming languages and easily changed during testing.</p>
        <p id="p0140">The Raspberry Pi communicates with an Arduino Nano, which serves as a peripheral control device. The Arduino is included to simplify the interface between the vessel’s primary controller and peripheral devices; a motor controller and inertial measurement unit (IMU). It also offers room for expansion with eight unused digital pins and six unused analog pins available for additional devices or sensors.</p>
        <p id="p0145">The peripheral devices, a Qik 2s9v1 dual serial motor controller and MinIMU-9 v5, were both sourced from Pololu Robotics and Electronics. These are each very small devices with easily accessible drivers and support communities which fulfill their designed rolls in the microUSV system: The IMU is included to augment any custom odometry system a user may deploy while the motor controller drives the vessel’s motors. All onboard electronic devices are shown in <xref rid="f0035" ref-type="fig">Fig. 7</xref>.<fig id="f0035"><label>Fig. 7</label><caption><p>Electronics Bracket with Labelled Components.</p></caption><graphic xlink:href="gr7"/></fig></p>
        <p id="p0150">The motors selected for the microUSV were also sourced from Pololu. They are tiny 12 V DC motors with a 5:1 gearbox. Since the torque requirements for the chosen 28 mm diameter propeller were so small, the priorities when selecting a motor were its small size and power consumption. The motor’s voltage rating was also a primary consideration to interface with the microUSV’s power system.</p>
      </sec>
      <sec id="s0055">
        <label>2.2.2</label>
        <title>Power system</title>
        <p id="p0155">The vessel’s power system was designed to be as simple as possible. Power is provided by a pair of standard 9 V alkaline batteries. Using standard batteries greatly simplifies vessel maintenance and they are much cheaper than lithium-polymer batteries which are popular in mobile robotics applications. Since the microUSV operates exclusively indoors, ease of maintenance was deemed more important than extended battery life as the vessels can be easily pulled from the water and have fresh batteries installed between experiments if necessary.</p>
        <p id="p0160">The Raspberry Pi, IMU, and motor controller cannot accept the 9 V battery power with a maximum input voltage for each device ranging from 5 V to 5.5 V. A simple voltage regulator circuit, shown in <xref rid="f0040" ref-type="fig">Fig. 8</xref>, was added to the design to accommodate these requirements providing regulated 5 V DC and unregulated 9 V DC. The unregulated 9 V DC power is used to drive the motors. This circuit doubles as a voltage bus allowing devices to be quickly connected to power without disturbing the rest of the system using standard 2.54 mm header pin connectors. The 5 V section of the voltage bus has its ground and live rail running adjacent to each other while the 9 V section has a 2.54 mm (one pin row) separation between its live and ground rails. By using the appropriately sized connector housings on their jumper wires, a two-pin housing for 5 V devices and a 3-pin housing with a gap in the middle slot for 9 V devices, the risk of connecting a device to the wrong input voltage is greatly reduced.<fig id="f0040"><label>Fig. 8</label><caption><p>Voltage Bus Drawing.</p></caption><graphic xlink:href="gr8"/></fig></p>
      </sec>
    </sec>
    <sec id="s0060">
      <label>2.3</label>
      <title>Control software</title>
      <p id="p0165">The sensors usable on the microUSV are limited due to the vessel’s size and indoor operating environment. Traditional navigation sensors for full scale USVs such as GPS and magnetometer cannot function in indoor environments and powerful rangefinder systems such as LIDAR can weigh as much as the rest of the microUSV’s components combined and needs to be mounted high on the vessel to function properly. Mounting one of these systems onboard would quickly sink or flip the vessel. Those sensors that are small and light enough to fit the microUSV cannot produce data of sufficient quality to be reliable. Unable to use traditional odometry sensors, we have opted to use an external pose detector system instead. Similar to the Augmented Reality for Kilobots system <xref rid="b0095" ref-type="bibr">[19]</xref>, the addition of virtual sensors using external hardware allows for more complex behaviors without greatly increasing the hardware cost or complexity of the vessels.</p>
      <p id="p0170">Each microUSV is marked with a unique AprilTag attached to its lid. These tags allow the position of each vessel to be tracked when in view of an overhead camera using the AprilTag detection algorithm <xref rid="b0100" ref-type="bibr">[20]</xref>. These tags must be kept in view of the camera in order to receive up-to-date pose. The AprilTag detection algorithm can detect tags with a large degree of skew but to ensure the most reliable performance the microUSV design attempts to minimize roll motion and so must be very stable, a dominant factor in the vessel’s hull design.</p>
      <sec id="s0065">
        <label>2.3.1</label>
        <title>Peripheral devices</title>
        <p id="p0175">In addition to the vessel’s themselves, several other devices are required for the microUSV system to function: A USB camera, a computer, and a wireless router. <xref rid="f0045" ref-type="fig">Fig. 9</xref> illustrates the arrangement of these devices to form the external pose detector system.<fig id="f0045"><label>Fig. 9</label><caption><p>External Pose Detector System Data Flow Diagram.</p></caption><graphic xlink:href="gr9"/></fig></p>
        <p id="p0180">A camera was chosen over a commercial pose tracking system due to the significantly lower cost. The camera, as mentioned previously, must be mounted above the operating area in order to capture video of the vessels or more specifically, their AprilTags. A Logitech C920 camera was used for this purpose during development. A higher video feed resolution allows for detections at a longer range, thus increasing the size of the operating area however the increased video bandwidth demands more processing time and so can introduce latency. The best results were achieved during testing using the camera set to output a 720p video feed. The camera is connected via USB to a computer, referred to henceforth as the host PC.</p>
        <p id="p0185">The host PC is responsible for running the AprilTag detection algorithm to continuously update a 2D pose estimate for each microUSV visible in the video feed. Our testing computer was running an Intel i7-8750H CPU. It also acts as a server, receiving update requests from the microUSVs and responding with simulated sensor data messages. The host PC sends these messages over a wireless network via a router to which all the microUSVs are connected. The wireless router used in our testing was a NETGEAR Nighthawk AC1900 however a router of this quality is not necessary. Each vessel requires approximately 200 Bytes/s of bandwidth so a small fleet of vessels can easily be managed by a low-end wireless router.</p>
        <p id="p0190"><xref rid="f0050" ref-type="fig">Fig. 10</xref> shows that the host PC software is able to maintain a stable pose estimate update rate between 17 and 21 Hz while managing a fleet of up to 10 vessels.<xref rid="fn1" ref-type="fn">1</xref> This update frequency is sufficient for simple navigation tasks even without utilizing the onboard IMU to estimate pose between updates.<fig id="f0050"><label>Fig. 10</label><caption><p>Host PC Software Update Frequency vs Number of Robots on the Network.</p></caption><graphic xlink:href="gr10"/></fig></p>
      </sec>
      <sec id="s0070">
        <label>2.3.2</label>
        <title>Host PC software</title>
        <p id="p0195">The host PC runs a C++ application called CVSensorSimulator: This application uses computer vision to continuously estimate the sensor values observed by each microUSV. Its primary purpose is providing a global pose estimate to each vessel using the AprilTag library <xref rid="b0100" ref-type="bibr">[20]</xref> written in C. As a global manager agent, it has access to all pose estimates simultaneously and so can also be used to simulate other sensors for behaviors such as collision avoidance and target tracking. The perfect information available to the application allows it to simulate different inter-vessel communication schemes by artificially limiting access to the data of other vessels. This can allow a researcher to test algorithms using multiple communication schemes without modifying the hardware involved. As an example, a system with no inter-vessel communication can be simulated by restricting a vessel’s sensor data access to its own data. A system with limited inter-vessel communication range can be simulated by restricting a vessel’s sensor data access to its own data in addition to the data of any other vessels within an arbitrary distance.</p>
        <p id="p0200">Since USVs operate in an effectively planar environment, the application extracts each vessel’s 2D pose from its AprilTag detection: x position, y position, and heading angle (yaw). This pose is stored in a local object for each microUSV. A separate thread acts as a server awaiting update request messages. When a vessel requires updated sensor data, it sends a message to the host PC which then takes the most recent pose data from the local object representing that vessel and sends it back. These messages are constructed using Google’s Protocol Buffer library <xref rid="b0105" ref-type="bibr">[21]</xref>, a language-neutral tool used to serialize data structures that requires less data than more traditional solutions such as XML. This reduces the bandwidth requirement for the wireless router.</p>
      </sec>
      <sec id="s0075">
        <label>2.3.3</label>
        <title>Vessel software</title>
        <p id="p0205">There are two devices onboard each vessel running our custom software: A Raspberry Pi (the primary controller) and an Arduino (the peripheral controller). The Arduino application, called PeripheralController, simply acts as a pass-through device for motor speed messages. It receives integer motor speed commands from the primary controller and forwards them to the Qik motor controller using Pololu’s Arduino library for the device. This application can also be modified to include an interface to the onboard IMU, also a Pololu device with an accompanying library, which connects to the Arduino. The IMU data can be used to augment a state estimation system implemented on the Raspberry Pi.</p>
        <p id="p0210">Two applications have been written for the microUSV’s primary controller: MUSVController and Teleop. These applications were both written in Python due to the Raspbian operating system’s native support for the language and the ability to prototype quickly. The Teleop application allows a user to operate the microUSV remotely over Secure Shell (SSH) using their keyboard and is intended as a tuning and debugging tool. The MUSVController application contains the logic for autonomous control. The MUSVController application implements a simple waypoint following algorithm: The controller manages its distance-to-target using a proportional controller and a PI controller to handle its heading angle. New users are encouraged to augment or replace this controller for their own work.</p>
        <p id="p0215"><xref rid="f0055" ref-type="fig">Fig. 11</xref> shows the sequence of messages used during microUSV operation: After the systems are initialized, the vessel will query the host PC for its pose. The host PC pulls data from the its local microUSV objects which are being continuously updated with AprilTag detections and sends back a pose estimate for the querying vessel. The vessel then performs its onboard control logic to produce motor commands which are sent to the motor controller via the Arduino. This process repeats continuously to form a feedback loop.<fig id="f0055"><label>Fig. 11</label><caption><p>Control Software Message Sequence Diagram.</p></caption><graphic xlink:href="gr11"/></fig></p>
      </sec>
    </sec>
  </sec>
  <sec id="s0080">
    <label>3</label>
    <title>Design files</title>
    <p id="p0220"><xref rid="t0005" ref-type="table">Table 1</xref> summarizes the design files used to fabricate or modify a microUSV. It includes the project’s source code and the required 3D printed components, all presented in STL format, along with models for an optional stand. The original CAD models, created using Solidworks, are included in the project repository as well however only one file, MicroUSV.sldasm, is included in this table due to the large number of components and subassemblies. To view and modify the full model download the ‘OSF Storage/CAD Models/Solidworks Model’ folder from the project repository <xref rid="b0070" ref-type="bibr">[14]</xref> and open this master assembly file.<list list-type="simple" id="l0005"><list-item id="u0005"><label>•</label><p id="p0315"><bold>Hull Rev 1.6.stl</bold>: CAD model for 3D printing the microUSV’s hull.</p></list-item><list-item id="u0010"><label>•</label><p id="p0320"><bold>Lid Rev 1.6.stl</bold>: CAD model for 3D printing the lid for the microUSV’s hull.</p></list-item><list-item id="u0015"><label>•</label><p id="p0325"><bold>Keel NACA0018.stl</bold>: CAD model for 3D printing the microUSV’s keel.</p></list-item><list-item id="u0020"><label>•</label><p id="p0330"><bold>Electronics Bracket Rev 2.1.stl</bold>: CAD model for 3D printing the bracket which holds the microUSV’s onboard electronics.</p></list-item><list-item id="u0025"><label>•</label><p id="p0335"><bold>Stuffing Tube Bracket Rev 2.stl</bold>: CAD model for 3D printing the bracket which holds the stuffing tubes in place.</p></list-item><list-item id="u0030"><label>•</label><p id="p0340"><bold>Gearmotor Bracket Rev 2.stl</bold>: CAD model for 3D printing the bracket which holds the motors in place.</p></list-item><list-item id="u0035"><label>•</label><p id="p0345"><bold>Stand Base Plate.stl</bold>: CAD model for 3D printing the base of a stand for the microUSV.</p></list-item><list-item id="u0040"><label>•</label><p id="p0350"><bold>Stand Plate Aft.stl</bold>: CAD model for 3D printing the rear plate of a stand for the microUSV.</p></list-item><list-item id="u0045"><label>•</label><p id="p0355"><bold>Stand Plate Fore.stl</bold>: CAD model for 3D printing the front plate of a stand for the microUSV.</p></list-item><list-item id="u0050"><label>•</label><p id="p0360"><bold>MicroUSV.sldasm</bold>: CAD model master assembly for the microUSV. Download the ‘OSF Storage/CAD Models/Solidworks Model’ folder to view and edit.</p></list-item><list-item id="u0055"><label>•</label><p id="p0365"><bold>microUSV-SourceCode-HardwareX.zip</bold>: The source code for the microUSV project which includes the CVSensorSimulator, MUSVController, PeripheralController, and Teleop applications. The source code can also be found at:<ext-link ext-link-type="uri" xlink:href="https://github.com/CalvinGregory/microUSV/releases/tag/v1.0" id="ir010">https://github.com/CalvinGregory/microUSV/releases/tag/v1.0</ext-link>.</p></list-item><list-item id="u0060"><label>•</label><p id="p0370"><bold>microUSV-Raspbian-Protobuf.zip</bold>: Disk image for the Raspberry Pi with the microUSV software and dependencies pre-installed.</p></list-item></list><table-wrap position="float" id="t0005"><label>Table 1</label><caption><p>Design File Table.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Design File Name</th><th>File Type</th><th>Open Source License</th><th>Location of the File</th><th/><th/></tr></thead><tbody><tr><td>Hull Rev 1.6.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/cwfyn/" id="ir065">https://osf.io/cwfyn/</ext-link></td><td/><td/></tr><tr><td>Lid Rev 1.6.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/y2q7p/" id="ir070">https://osf.io/y2q7p/</ext-link></td><td/><td/></tr><tr><td>Keel NACA0018.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/7q9yp/" id="ir075">https://osf.io/7q9yp/</ext-link></td><td/><td/></tr><tr><td>Electronics Bracket Rev 2.1.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/hv2wx/" id="ir080">https://osf.io/hv2wx/</ext-link></td><td/><td/></tr><tr><td>Stuffing Tube Bracket Rev 2.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/z93ex/" id="ir085">https://osf.io/z93ex/</ext-link></td><td/><td/></tr><tr><td>Gearmotor Bracket Rev 2.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/ya2mx/" id="ir090">https://osf.io/ya2mx/</ext-link></td><td/><td/></tr><tr><td>Stand Base Plate.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/gyext/" id="ir095">https://osf.io/gyext/</ext-link></td><td/><td/></tr><tr><td>Stand Plate Aft.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/x43pb/" id="ir100">https://osf.io/x43pb/</ext-link></td><td/><td/></tr><tr><td>Stand Plate Fore.stl</td><td>STL</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/c5r7d/" id="ir105">https://osf.io/c5r7d/</ext-link></td><td/><td/></tr><tr><td>MicroUSV.sldasm</td><td>Solidworks Assembly</td><td>CERN</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/wc7sj/" id="ir110">https://osf.io/wc7sj/</ext-link></td><td/><td/></tr><tr><td>microUSV-SourceCode-HardwareX.zip</td><td>Source Code</td><td>GPL</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/tjpc4/" id="ir115">https://osf.io/tjpc4/</ext-link></td><td/><td/></tr><tr><td>microUSV-Raspbian-Protobuf.zip</td><td>Disk Image</td><td>GPL</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/tpx5w/" id="ir120">https://osf.io/tpx5w/</ext-link></td><td/><td/></tr></tbody></table></table-wrap></p>
  </sec>
  <sec id="s0085">
    <label>4</label>
    <title>Bill of materials</title>
    <p id="p0225">A detailed, interactive Bill of Materials (BOM) spreadsheet can be found in the project repository <xref rid="b0070" ref-type="bibr">[14]</xref> at<ext-link ext-link-type="uri" xlink:href="https://osf.io/7ru36/" id="ir015">https://osf.io/7ru36/</ext-link> which includes vendor links for all off-the-shelf components. A simplified BOM is included in <xref rid="t0010" ref-type="table">Table 2</xref>, which summarizes the components required to produce a single microUSV. The detailed BOM spreadsheet has been structured to estimate the total production cost (in Canadian dollars) as a function of the number of microUSVs being produced. Due to the large number of items per package for some components, the cost per vessel drops significantly when producing two or more microUSVs as seen in <xref rid="t0015" ref-type="table">Table 3</xref>.<table-wrap position="float" id="t0010"><label>Table 2</label><caption><p>Generalized Bill of Materials.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Component Category</th><th>Description</th><th>Cost [$CAD]</th><th>Sources of Materials</th><th/></tr></thead><tbody><tr><td>3D Printed Components</td><td>Custom 3D printed components including the Hull, Lid, and brackets.</td><td>90.44</td><td>3D Printer (Custom)</td><td/></tr><tr><td>Electronic Devices and Wiring</td><td>Electronic devices such as the Raspberry Pi, Arduino, and motor controller as well as the components to connect them</td><td>200.18</td><td>BuyaPi, Digikey, Pololu</td><td/></tr><tr><td>Mechanical Components and Fasteners</td><td>Screws, Nuts, Propellers, Drive Shafts, etc.</td><td>146.39</td><td>Amazon, Hobby King, McMaster-Carr</td><td/></tr><tr><td>Adhesives and Sealants</td><td>Epoxy, silicone sealant, Loctite</td><td>85.00</td><td>Amazon, Hardware Stores</td><td/></tr><tr><td/><td><bold>Total:</bold></td><td><bold>522.00</bold></td><td/><td/></tr></tbody></table></table-wrap><table-wrap position="float" id="t0015"><label>Table 3</label><caption><p>Production Cost Scaling.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Number of Vessels Produced</th><th>Total Cost [$CAD]</th><th>Cost per Vessel [$CAD]</th><th/></tr></thead><tbody><tr><td>1</td><td>522.00</td><td>522.00</td><td/></tr><tr><td>3</td><td>1,121.64</td><td>373.88</td><td/></tr><tr><td>5</td><td>1,691.43</td><td>338.29</td><td/></tr><tr><td>10</td><td>3,173.73</td><td>317.38</td><td/></tr></tbody></table></table-wrap></p>
  </sec>
  <sec id="s0090">
    <label>5</label>
    <title>Build and operation instructions</title>
    <p id="p0230">The instructions for fabrication, assembly, and testing of the microUSV are provided in detail on the project repository Wiki page <xref rid="b0070" ref-type="bibr">[14]</xref>. The major steps are summarized below and require an estimated two days of fabrication effort for a single user to complete with an additional three days of indirect production time also required for steps such as 3D printing and adhesive curing.<list list-type="simple" id="l0010"><list-item id="u0065"><label>•</label><p id="p0375">3D print all necessary components</p></list-item><list-item id="u0070"><label>•</label><p id="p0380">Insert a ballast plate into the keel</p></list-item><list-item id="u0075"><label>•</label><p id="p0385">Mount the keel to the bottom of the hull</p></list-item><list-item id="u0080"><label>•</label><p id="p0390">Apply epoxy coating to hull and lid</p></list-item><list-item id="u0085"><label>•</label><p id="p0395">Cut and assemble two stuffing tubes</p></list-item><list-item id="u0090"><label>•</label><p id="p0400">Thread the tips of two drive shafts</p></list-item><list-item id="u0095"><label>•</label><p id="p0405">Assemble and solder the voltage bus</p></list-item><list-item id="u0100"><label>•</label><p id="p0410">Solder header pins onto all other electronic devices</p></list-item><list-item id="u0105"><label>•</label><p id="p0415">Mount all electronic devices to the electronics bracket</p></list-item><list-item id="u0110"><label>•</label><p id="p0420">Cut and terminate eight jumper cables</p></list-item><list-item id="u0115"><label>•</label><p id="p0425">Use jumper cables to connect electronic devices</p></list-item><list-item id="u0120"><label>•</label><p id="p0430">Bore propellers and one end of each shaft coupler to accommodate a <inline-formula><mml:math id="M3" altimg="si3.svg"><mml:mrow><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:msup><mml:mrow><mml:mn>8</mml:mn></mml:mrow><mml:mrow><mml:mo>″</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula> drive shaft</p></list-item><list-item id="u0125"><label>•</label><p id="p0435">Mount motors, drive shafts, and stuffing tubes inside the hull</p></list-item><list-item id="u0130"><label>•</label><p id="p0440">Mount batteries and electronics bracket inside the hull</p></list-item><list-item id="u0135"><label>•</label><p id="p0445">Install desktop and onboard software</p></list-item><list-item id="u0140"><label>•</label><p id="p0450">Configure lab environment</p></list-item></list></p>
  </sec>
  <sec id="s0095">
    <label>6</label>
    <title>Validation and characterization</title>
    <p id="p0235"><xref rid="t0020" ref-type="table">Table 4</xref> summarizes key properties of the microUSV.<table-wrap position="float" id="t0020"><label>Table 4</label><caption><p>microUSV Characteristics Table.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Characteristic</th><th>Value</th><th>Unit</th></tr></thead><tbody><tr><td>Mass</td><td>432</td><td>g</td></tr><tr><td>Length Overall</td><td>230</td><td>mm</td></tr><tr><td>Beam (Width)</td><td>89.2</td><td>mm</td></tr><tr><td>Depth (Height)</td><td>121.5</td><td>mm</td></tr><tr><td>Draft (Depth below waterline)</td><td>78.4</td><td>mm</td></tr><tr><td>Metacentric Height (GM)</td><td>9.168</td><td>mm</td></tr><tr><td>Maximum Righting Moment</td><td>0.0869</td><td>N*m</td></tr><tr><td>Angle of Vanishing Stability</td><td>None</td><td>Degrees</td></tr><tr><td>Maximum Speed</td><td>0.59</td><td>m/s</td></tr><tr><td>Roll Period</td><td>1.17</td><td>Seconds</td></tr><tr><td>Battery Life</td><td>4 to 8</td><td>Hours</td></tr><tr><td>Bandwidth Requirement</td><td>200</td><td>Byte/s</td></tr></tbody></table></table-wrap></p>
    <p id="p0240">It is worth noting that the battery life range listed in <xref rid="t0020" ref-type="table">Table 4</xref> will vary based on the intensity of the use case. A battery life of 4 h was achieved under continuous operation using medium-to-high motor speeds with a fresh pair of 9 V batteries during our testing. With a more typical, intermittent motor use at 50% of maximum speed, we were easily able to achieve double that operation time.</p>
    <p id="p0245">Three test cases were used to validate the functionality of the microUSV system, the videos for which are provided in <xref rid="t0025" ref-type="table">Table 5</xref>: a linear path following test, an elliptical path following test, and a multi-vehicle test. Each test has the vessel(s) operate autonomously using a simple waypoint following algorithm based on Proportional-Integral (PI) controllers. The vessels are initialized with a list of waypoints which they will steer toward sequentially with their PI controller outputting motor speed commands which aim to minimize its distance-to-waypoint error and heading-angle error. This simple controller was easy to implement and will be familiar to most potential users and so was chosen over more elaborate modern controllers.<table-wrap position="float" id="t0025"><label>Table 5</label><caption><p>System Validation Videos.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>File</th><th>Format</th><th>URL</th></tr></thead><tbody><tr><td>Linear Path Test Demo Video</td><td>MP4</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/3mcdg/" id="ir125">https://osf.io/3mcdg/</ext-link></td></tr><tr><td>Elliptical Path Test Demo Video</td><td>MP4</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/mt6p8/" id="ir130">https://osf.io/mt6p8/</ext-link></td></tr><tr><td>Multi-Vehicle Test Demo Video</td><td>MP4</td><td><ext-link ext-link-type="uri" xlink:href="https://osf.io/e47ud/" id="ir135">https://osf.io/e47ud/</ext-link></td></tr></tbody></table></table-wrap></p>
    <sec id="s0100">
      <label>6.1</label>
      <title>Linear path test</title>
      <p id="p0250">For the linear path following test, the microUSV was placed in a test tank and instructed to travel between two waypoints positioned 1.47 m apart along the camera’s x-axis from left to right. The vessel’s trajectory can be seen in <xref rid="f0060" ref-type="fig">Fig. 12</xref> along with the test’s waypoints and the expected trajectory between them.<fig id="f0060"><label>Fig. 12</label><caption><p>Linear Path Test Trajectory Plot.</p></caption><graphic xlink:href="gr12"/></fig></p>
      <p id="p0255">This test demonstrates the microUSV’s ability to operate under its own power, follow a pre-defined path using onboard control logic, including fine error correction. The CVSensorSimulator system functions as intended with an average update rate of 9.5 frames per second: an acceptable update rate for navigation purposes.</p>
      <p id="p0260">The vessel follows the expected trajectory very well with some small deviations. It reached the first waypoint with a small heading error and so when its waypoint target was updated the vessel overcompensated and overshot the target heading before correcting itself to arrive on target. Better controller tuning may have improved this behavior, or it may simply be due to the limitations of this control scheme: since the controller only has access to the position of its next goal and not the subsequent ones, it does not know what heading angle will be needed after reaching its next waypoint. This creates a tendency to start the next leg of its path with a non-zero heading error. This pattern is also apparent in the elliptical path test.</p>
      <p id="p0265">Even so the vessel only deviated from the expected trajectory by a maximum of 49 mm, a small margin for a 1.47 m long path. This error was calculated as the perpendicular distance from the vessel’s position to the expected trajectory line.</p>
    </sec>
    <sec id="s0105">
      <label>6.2</label>
      <title>Elliptical path test</title>
      <p id="p0270">The elliptical path following test uses a setup identical to that of the linear path test but with a different set of waypoints. The vessel is instructed to follow an elliptical path, or more accurately, an octagonal path whose vertices intersect an ellipse with a major diameter of 1.36 m and minor diameter of 0.92 m. The vessel starts at the left edge of the tank and proceeds through the waypoints counterclockwise. The vessel’s trajectory can be seen in <xref rid="f0065" ref-type="fig">Fig. 13</xref> with the expected trajectory and waypoints shown as well.<fig id="f0065"><label>Fig. 13</label><caption><p>Elliptical Path Test Trajectory Plot.</p></caption><graphic xlink:href="gr13"/></fig></p>
      <p id="p0275">This test demonstrates the microUSV’s ability to handle more aggressive maneuvers: It can perform tight turns without excessive roll and keeps the AprilTag in view of the overhead camera.</p>
      <p id="p0280">This trajectory deviates from its expected trajectory much more than what was observed in the linear path test, but the vessel still reaches each waypoint in sequence. Here the influence of sudden changes in heading error due to waypoint handoff is more obvious. While traveling between waypoints the vessel’s only concern is reaching the next target, so its heading is directed at the next waypoint. Once that waypoint is reached the next waypoint is considered and the vessel’s current heading now significantly off target. This leads to considerable overshoot in the vessel’s trajectory, particularly noticeable on sharp turns like that observed at the fifth waypoint on the far right of <xref rid="f0065" ref-type="fig">Fig. 13</xref>. The vessel still manages to achieve a reasonable approximation of the intended trajectory. Path following performance could be improved substantially by implementing a more robust control scheme such as the method described in <xref rid="b0110" ref-type="bibr">[22]</xref>.</p>
      <p id="p0285">The error, as seen in <xref rid="f0070" ref-type="fig">Fig. 14</xref>, was calculated as the perpendicular distance from the vessel’s position to the expected trajectory line. Due to the two-dimensional nature of the trajectory there were multiple expected trajectory line segments. The error calculation was therefore treated as a piecewise function, changing the expected trajectory line equation each time the vessel was considered to have reached its next waypoint. These transition points are denoted in <xref rid="f0070" ref-type="fig">Fig. 14</xref> by the vertical dotted lines. Note how the error tends to rise sharply after reaching each waypoint before decreasing as the vessel compensates for the sudden change in goal position.<fig id="f0070"><label>Fig. 14</label><caption><p>Elliptical Path Test Trajectory Error Plot.</p></caption><graphic xlink:href="gr14"/></fig></p>
    </sec>
    <sec id="s0110">
      <label>6.3</label>
      <title>Multi-vehicle test</title>
      <p id="p0290">The multi-vehicle test uses a nearly identical trajectory to the elliptical path following test where each vessel is given the same set of eight waypoints arranged in a roughly elliptical shape to follow. Unlike the elliptical test, once the vessels have reached the final waypoint in their trajectory, they are instructed to repeat that trajectory again ad infinitum. Four vessels were launched sequentially from the same position, shown in <xref rid="f0075" ref-type="fig">Fig. 15</xref>, with a roughly even spacing between their start times. Each vessel completes several laps of the trajectory with the first vessel successfully completing three laps of the trajectory while the fourth vessel has time for just over two laps in the 1-min, 40-s-long test with the first and last vessel launching 28 s apart.<fig id="f0075"><label>Fig. 15</label><caption><p>Multi-Vehicle Test Overhead Camera View.</p></caption><graphic xlink:href="gr15"/></fig></p>
      <p id="p0295">Five and six vessel configurations were also tested and were managed by the CVSensorSimulator system without issue. Due to the limited space in the operating environment and the lack of a collision avoidance strategy in the current control scheme these tests quickly resulted in vessel collisions and pileups. These limitations will be addressed in our future work with this platform.</p>
      <p id="p0300">This test demonstrates the CVSensorSimulator system’s ability to handle the simultaneous requests of multiple vehicles with enough speed to allow for real-time navigation of each. It also shows the microUSV’s are sufficiently stable to survive the disturbances introduced by other vessels. The microUSVs appear unperturbed by the wakes created by the other vessels in the tank and, although not shown in this video, multiple inter-vehicle collisions occurred during testing, none of which resulted in a vessel overturning or the overhead camera losing view of their AprilTags.</p>
    </sec>
  </sec>
  <sec id="s0115">
    <label>7</label>
    <title>Conclusions</title>
    <p id="p0305">This article has presented an open source USV system designed to operate in indoor laboratory environments. Built of 3D printed and off-the-shelf components, the microUSV is a cheap alternative to commercial USV systems for concept and algorithm validation in marine robotics research. The system was designed to meet a demand for low-cost marine robotics platforms suitable for swarm robotics research: a field unsatisfied by the available commercial and open source options. The system is designed to be quickly and easily modified, augmented, and reprogrammed by new users who are encouraged to find their own applications for the platform.</p>
  </sec>
  <sec sec-type="COI-statement">
    <title>Declaration of Competing Interest</title>
    <p id="p0310">The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.</p>
  </sec>
</body>
<back>
  <ref-list id="bi005">
    <title>References</title>
    <ref id="b0005">
      <label>1</label>
      <element-citation publication-type="journal" id="h0005">
        <person-group person-group-type="author">
          <name>
            <surname>Liu</surname>
            <given-names>Z.</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>Y.</given-names>
          </name>
          <name>
            <surname>Yu</surname>
            <given-names>X.</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>C.</given-names>
          </name>
        </person-group>
        <article-title>Unmanned surface vehicles: an overview of developments and challenges</article-title>
        <source>Annu. Rev. Control</source>
        <volume>41</volume>
        <year>2016</year>
        <fpage>71</fpage>
        <lpage>93</lpage>
      </element-citation>
    </ref>
    <ref id="b0010">
      <label>2</label>
      <mixed-citation publication-type="other" id="h0010">Heron unmanned surface vehicle.<ext-link ext-link-type="uri" xlink:href="https://www.clearpathrobotics.com/heron-unmanned-surface-vessel/" id="ir020">https://www.clearpathrobotics.com/heron-unmanned-surface-vessel/</ext-link> (accessed 30.05.2019)</mixed-citation>
    </ref>
    <ref id="b0015">
      <label>3</label>
      <mixed-citation publication-type="other" id="h0015">C-worker 8 product information.<ext-link ext-link-type="uri" xlink:href="https://www.asvglobal.com/product/c-worker-8/" id="ir025">https://www.asvglobal.com/product/c-worker-8/</ext-link> (accessed 30.05.2019).</mixed-citation>
    </ref>
    <ref id="b0020">
      <label>4</label>
      <mixed-citation publication-type="other" id="h0020">Cat-surveyor.<ext-link ext-link-type="uri" xlink:href="https://www.subsea-tech.com/cat-surveyor/" id="ir030">https://www.subsea-tech.com/cat-surveyor/</ext-link> (accessed 30.05.2019).</mixed-citation>
    </ref>
    <ref id="b0025">
      <label>5</label>
      <mixed-citation publication-type="other" id="h0025">A. Vardy, Orbital construction: Swarms of simple robots building enclosures, in: 2018 IEEE 3rd International Workshops on Foundations and Applications of Self* Systems (FAS*W), 2018, pp. 147–153.</mixed-citation>
    </ref>
    <ref id="b0030">
      <label>6</label>
      <element-citation publication-type="journal" id="h0030">
        <person-group person-group-type="author">
          <name>
            <surname>McTaggart</surname>
            <given-names>K.</given-names>
          </name>
          <name>
            <surname>Boudet</surname>
            <given-names>L.</given-names>
          </name>
          <name>
            <surname>Oakey</surname>
            <given-names>S.</given-names>
          </name>
        </person-group>
        <article-title>Validation of a distributed simulation of ship replenishment at sea with model tests</article-title>
        <source>J. Mar. Sci. Technol.</source>
        <year>2018</year>
        <fpage>1</fpage>
        <lpage>14</lpage>
      </element-citation>
    </ref>
    <ref id="b0035">
      <label>7</label>
      <mixed-citation publication-type="other" id="h0035">P. Kimball, J. Bailey, S. Das, R. Geyer, T. Harrison, C. Kunz, K. Manganini, K. Mankoff, K. Samuelson, T. Sayre-McCord, F. Straneo, P. Traykovski, H. Singh, The whoi jetyak: an autonomous surface vehicle for oceanographic research in shallow or dangerous waters, in: 2014 IEEE/OES Autonomous Underwater Vehicles (AUV), 2014, pp. 1–7.</mixed-citation>
    </ref>
    <ref id="b0040">
      <label>8</label>
      <mixed-citation publication-type="other" id="h0040">D.F. Carlson, A. Fürsterling, L. Vesterled, M. Skovby, S.S. Pedersen, C. Melvad, S. Rysgaard, An affordable and portable autonomous surface vehicle with obstacle avoidance for coastal ocean monitoring, HardwareX, vol. 5, 2019, p. e00059.</mixed-citation>
    </ref>
    <ref id="b0045">
      <label>9</label>
      <mixed-citation publication-type="other" id="h0045">W. Jo, Y. Hoashi, L.L. Paredes Aguilar, M. Postigo-Malaga, J.M. Garcia-Bravo, B.-C. Min, A low-cost and small usv platform for water quality monitoring, HardwareX, vol. 6, 2019, p. e00076.</mixed-citation>
    </ref>
    <ref id="b0050">
      <label>10</label>
      <mixed-citation publication-type="other" id="h0050">D. Larkin, M. Michini, A. Abad, S. Teleski, and M.A. Hsieh, Design of the multi-robot coherent structure testbed (mcoste) for distributed tracking of geophysical fluid dynamics, vol. Volume 5B: 38th Mechanisms and Robotics Conference, 08 2014.</mixed-citation>
    </ref>
    <ref id="b0055">
      <label>11</label>
      <mixed-citation publication-type="other" id="h0055">n3m0 the autonomous boat.<ext-link ext-link-type="uri" xlink:href="https://hackaday.io/project/25508-n3m0-the-autonomous-boat" id="ir035">https://hackaday.io/project/25508-n3m0-the-autonomous-boat</ext-link>, 06 2017.</mixed-citation>
    </ref>
    <ref id="b0060">
      <label>12</label>
      <mixed-citation publication-type="other" id="h0060">Boat autopilot - based on the arduino.<ext-link ext-link-type="uri" xlink:href="https://www.instructables.com/id/Boat-Autopilot/" id="ir040">https://www.instructables.com/id/Boat-Autopilot/</ext-link>, 10 2017.</mixed-citation>
    </ref>
    <ref id="b0065">
      <label>13</label>
      <element-citation publication-type="journal" id="h0065">
        <person-group person-group-type="author">
          <name>
            <surname>Barnes</surname>
            <given-names>M.</given-names>
          </name>
          <name>
            <surname>Graham</surname>
            <given-names>N.</given-names>
          </name>
          <name>
            <surname>Gregory</surname>
            <given-names>C.</given-names>
          </name>
          <name>
            <surname>Randell</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Whitby</surname>
            <given-names>W.</given-names>
          </name>
        </person-group>
        <article-title>Sunken history of grand lake</article-title>
        <source>J. Ocean Technol.</source>
        <volume>12</volume>
        <issue>4</issue>
        <year>2017</year>
        <fpage>19</fpage>
        <lpage>26</lpage>
      </element-citation>
    </ref>
    <ref id="b0070">
      <label>14</label>
      <mixed-citation publication-type="other" id="h0070">C. Gregory, microusv.<ext-link ext-link-type="doi" xlink:href="10.17605/OSF.IO/7FQ6U" id="ir045">https://doi.org/10.17605/OSF.IO/7FQ6U</ext-link>, 03 2020.</mixed-citation>
    </ref>
    <ref id="b0075">
      <label>15</label>
      <mixed-citation publication-type="other" id="h0075">Laurent’s multi tug – dundrum bay!.<ext-link ext-link-type="uri" xlink:href="https://www.modelboatmayhem.co.uk/Modellers/Laurent/1ndex.htm" id="ir050">https://www.modelboatmayhem.co.uk/Modellers/Laurent/1ndex.htm</ext-link> (accessed 28.08.2019).</mixed-citation>
    </ref>
    <ref id="b0080">
      <label>16</label>
      <mixed-citation publication-type="other" id="h0080">A.F. Molland, The Maritime Engineering Reference Book: A Guide to Ship Design, Construction and Operation, Elsevier Science, 2008, pp. 75–115. ch.3 Flotation and stability.</mixed-citation>
    </ref>
    <ref id="b0085">
      <label>17</label>
      <mixed-citation publication-type="other" id="h0085">A.F. Molland, The Maritime Engineering Reference Book: A Guide to Ship Design, Construction and Operation, Elsevier Science, 2008, pp. 484–577. ch.7 Seakeeping.</mixed-citation>
    </ref>
    <ref id="b0090">
      <label>18</label>
      <mixed-citation publication-type="other" id="h0090">J. Rubinovas, Hydrostatics calculator for solidworks.<ext-link ext-link-type="uri" xlink:href="https://www.floatsoft.net/" id="ir055">https://www.floatsoft.net/</ext-link> (accessed 13.05.2019).</mixed-citation>
    </ref>
    <ref id="b0095">
      <label>19</label>
      <element-citation publication-type="journal" id="h0095">
        <person-group person-group-type="author">
          <name>
            <surname>Reina</surname>
            <given-names>A.</given-names>
          </name>
          <name>
            <surname>Cope</surname>
            <given-names>A.J.</given-names>
          </name>
          <name>
            <surname>Nikolaidis</surname>
            <given-names>E.</given-names>
          </name>
          <name>
            <surname>Marshall</surname>
            <given-names>J.A.R.</given-names>
          </name>
          <name>
            <surname>Sabo</surname>
            <given-names>C.</given-names>
          </name>
        </person-group>
        <article-title>Ark: augmented reality for kilobots</article-title>
        <source>IEEE Robot. Autom. Lett.</source>
        <volume>2</volume>
        <year>2017</year>
        <fpage>1755</fpage>
        <lpage>1761</lpage>
      </element-citation>
    </ref>
    <ref id="b0100">
      <label>20</label>
      <mixed-citation publication-type="other" id="h0100">E. Olson, Apriltag: a robust and flexible visual fiducial system, 2011, pp. 3400–3407.</mixed-citation>
    </ref>
    <ref id="b0105">
      <label>21</label>
      <mixed-citation publication-type="other" id="h0105">Protocol buffers.<ext-link ext-link-type="uri" xlink:href="https://developers.google.com/protocol-buffers/" id="ir060">https://developers.google.com/protocol-buffers/</ext-link> (accessed 10.09.2019).</mixed-citation>
    </ref>
    <ref id="b0110">
      <label>22</label>
      <mixed-citation publication-type="other" id="h0110">Z. Li, R. Bachmayer, A. Vardy, Path-following control for unmanned surface vehicles, IEEE International Conference on Intelligent Robots and Systems, vol. 2017, 2017, pp. 4209–4216.</mixed-citation>
    </ref>
  </ref-list>
  <ack id="ak005">
    <title>Acknowledgements</title>
    <p id="p0455">This project was partially funded by the <funding-source id="gp005">Natural Sciences and Engineering Research Council of Canada</funding-source> (NSERC Discovery Grant #205849 and #06321).</p>
  </ack>
  <fn-group>
    <fn id="fn1">
      <label>1</label>
      <p id="np005">The data shown in <xref rid="f0050" ref-type="fig">Fig. 10</xref> was obtained at a later point in time using a better camera and running an updated software build. The camera used for these tests was an Intel RealSense D435, which updates faster than the Logitech C920. We recommend this new camera over the Logitech C920 to any new users going forward.</p>
    </fn>
  </fn-group>
</back>
