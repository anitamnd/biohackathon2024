<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9077837</article-id>
    <article-id pub-id-type="publisher-id">4701</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-022-04701-2</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Research</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>HGGA: hierarchical guided genome assembler</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Walve</surname>
          <given-names>Riku</given-names>
        </name>
        <address>
          <email>riku.walve@helsinki.fi</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Salmela</surname>
          <given-names>Leena</given-names>
        </name>
        <address>
          <email>leena.salmela@helsinki.fi</email>
        </address>
        <xref ref-type="aff" rid="Aff1"/>
      </contrib>
      <aff id="Aff1"><institution-wrap><institution-id institution-id-type="GRID">grid.7737.4</institution-id><institution-id institution-id-type="ISNI">0000 0004 0410 2071</institution-id><institution>Department of Computer Science, Helsinki Institute for Information Technology HIIT, </institution><institution>University of Helsinki, </institution></institution-wrap>Helsinki, Finland </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>7</day>
      <month>5</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>7</day>
      <month>5</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <volume>23</volume>
    <elocation-id>167</elocation-id>
    <history>
      <date date-type="received">
        <day>22</day>
        <month>6</month>
        <year>2021</year>
      </date>
      <date date-type="accepted">
        <day>25</day>
        <month>4</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022</copyright-statement>
      <license>
        <ali:license_ref specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated in a credit line to the data.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1"><italic>De novo</italic> genome assembly typically produces a set of contigs instead of the complete genome. Thus additional data such as genetic linkage maps, optical maps, or Hi-C data is needed to resolve the complete structure of the genome. Most of the previous work uses the additional data to order and orient contigs.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">Here we introduce a framework to guide genome assembly with additional data. Our approach is based on clustering the reads, such that each read in each cluster originates from nearby positions in the genome according to the additional data. These sets are then assembled independently and the resulting contigs are further assembled in a hierarchical manner. We implemented our approach for genetic linkage maps in a tool called HGGA.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">Our experiments on simulated and real Pacific Biosciences long reads and genetic linkage maps show that HGGA produces a more contiguous assembly with less contigs and from 1.2 to 9.8 times higher NGA50 or N50 than a plain assembly of the reads and 1.03 to 6.5 times higher NGA50 or N50 than a previous approach integrating genetic linkage maps with contig assembly. Furthermore, also the correctness of the assembly remains similar or improves as compared to an assembly using only the read data.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Genome assembly</kwd>
      <kwd>Genetic linkage maps</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2022</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par9"><italic>De novo</italic> genome assembly asks to reconstruct the genomic sequence of a new previously unsequenced organism given a set of sequencing reads. The advances in long read sequencing technologies have allowed for complete or near complete assemblies of bacterial and small genomes [<xref ref-type="bibr" rid="CR1">1</xref>–<xref ref-type="bibr" rid="CR3">3</xref>] but assembling larger genomes such as vertebrates and plants typically yields a set of contigs instead of the complete genome of the organism. Thus resolving the large scale structure of these genomes requires additional long range data such as genetic linkage maps, optical maps, or Hi-C data [<xref ref-type="bibr" rid="CR4">4</xref>].</p>
    <p id="Par10">Typically additional long range data is used to order the contigs into scaffolds. A genetic linkage map consists of a set of markers such as single nucleotide variations (SNVs). The markers are divided into chromosomes and their partial order within a chromosome is known. Chromonomer [<xref ref-type="bibr" rid="CR5">5</xref>] uses a genetic linkage map to scaffold contigs and it also detects misassemblies and can correct these based on a genetic linkage map. Similarly, Lep-Anchor [<xref ref-type="bibr" rid="CR6">6</xref>] can detect and correct chimeric contigs based on a genetic linkage map and it can anchor contigs into chromosomes using a genetic linkage map and additional information such as contig-contig and read alignments.</p>
    <p id="Par11">Optical maps are another type of physical maps that can be used to scaffold contigs. Optical maps are produced by elongating DNA molecules on a plate, applying a restriction enzyme that cuts or nicks the DNA molecules at specific restriction sites, and then imaging the cut or nicked molecules. SewingMachine [<xref ref-type="bibr" rid="CR7">7</xref>] uses a single optical map to scaffold contigs, whereas OMGS [<xref ref-type="bibr" rid="CR8">8</xref>] can simultaneously use several optical maps produced with different enzymes.</p>
    <p id="Par12">Some methods integrate the long range data directly into contig assembly. AGORA [<xref ref-type="bibr" rid="CR9">9</xref>] uses optical maps to guide the contig building from a de Bruijn graph. KOOTA [<xref ref-type="bibr" rid="CR10">10</xref>] maps reads to an optical map and uses the mapping positions to produce a positional de Bruijn graph which is less tangled than a regular de Bruijn graph. Kermit [<xref ref-type="bibr" rid="CR11">11</xref>] maps reads to a genetic linkage map and then uses this information to remove edges that conflict with a genetic linkage map from the assembly graph of miniasm [<xref ref-type="bibr" rid="CR1">1</xref>]. OpticalKermit [<xref ref-type="bibr" rid="CR12">12</xref>] is a modification of Kermit to use optical maps instead of genetic linkage maps.</p>
    <p id="Par13">All previous methods that integrate the long range data directly to contig assembly build the assembly graph for the whole set of reads and use the long range data to disentangle the graph. Here we propose a different approach. We first map the individual reads to the long range data and then cluster the reads based on these mappings. Each cluster is then assembled independently and finally we join the clusters in a hierarchical manner to produce a complete assembly. We implement our approach for genetic linkage maps in a tool called HGGA (Hierarchical Guided Genome Assembler) and show that on real and simulated Pacific Biosciences reads and genetic linkage maps, HGGA produces a more contiguous assembly with less contigs and from 1.2 to 9.8 times higher NGA50 or N50 than a plain assembly of the reads and 1.03 to 6.5 times higher NGA50 or N50 than a previous approach integrating genetic linkage maps with contig assembly. Our approach is also easy to parallelize as the long range data naturally divides the reads into clusters which can be assembled independently in a parallel fashion.</p>
    <sec id="Sec2">
      <title>Related work</title>
      <p id="Par14">The <italic>de novo</italic> assembly problem asks to reconstruct a genome from a set of sequencing reads. The two most popular approaches to solve it are the overlap-layout-consensus approach and the de Bruijn graph based approach. In the overlap-layout-consensus approach first overlaps between reads are found. These can be represented in the form of an overlap graph where the nodes are the reads and there is an edge between two reads if they overlap. The overlap graph can then be simplified by removing transitive edges. The resulting graph is called the string graph [<xref ref-type="bibr" rid="CR13">13</xref>]. In the layout phase, contigs are formed as paths in the string graph. Finally the consensus phase determines the base sequence of the contigs based on the reads. The alternative approach based on de Bruijn graphs first extracts all <italic>k</italic>-mers, i.e. <italic>k</italic> bases long sequences, that occur in the reads. These <italic>k</italic>-mers then form the nodes of the de Bruijn graph and there is an edge between two nodes if the <italic>k</italic>-mers overlap by <inline-formula id="IEq1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k-1$$\end{document}</tex-math><mml:math id="M2"><mml:mrow><mml:mi>k</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq1.gif"/></alternatives></inline-formula> bases. Contigs are typically reported as non-branching paths in the de Bruijn graph. The term assembly graph is often used to refer to both string graphs and de Bruijn graphs.</p>
      <p id="Par15">Reference guided assembly gives an attractive alternative to <italic>de novo</italic> assemblies. Here we are also given a reference sequence, against which we can compare our input reads. Schneeberger et al. [<xref ref-type="bibr" rid="CR14">14</xref>] proposed a reference guided assembly approach which was further developed by Lischer and Shimizu [<xref ref-type="bibr" rid="CR15">15</xref>]. They first map the reads against the reference. Based on the mappings the reads are divided into overlapping superblocks which are assembled independently into contigs and unmapped reads are also assembled separately into contigs. All these contigs are then joined into a set of supercontigs. AlignGraph [<xref ref-type="bibr" rid="CR16">16</xref>] implements an alternative approach. First, all reads are assembled into contigs. Then the contigs and paired end reads are aligned against the reference sequence. Based on these alignments the contigs are further extended and joined into longer contigs.</p>
      <p id="Par16">In our previous work, we introduced Kermit [<xref ref-type="bibr" rid="CR11">11</xref>], a method for guiding an assembly with a genetic linkage map instead of a reference sequence. Genetic linkage maps are a technique to orient and place contigs within a chromosome and to detect misassembled contigs. The genetic linkage maps themselves consist of genetic markers. The markers are divided into chromosomes and within each chromosome, the markers are further placed into bins. The order of the bins within a chromosome is known but the order of markers within a bin is not known.</p>
      <p id="Par17">The markers in the map are derived from a set of variations, such as single-nucleotide variations. The variations are found from a sequenced cross, a population of related individuals. Variations that are close to each other in the genome are likely to be inherited together. Genetic linkage maps can therefore be constructed by genotyping the individuals in the cross and examining the probabilities of variations being inherited together. Kermit colors the read set by mapping them to a genetic linkage map and then removes edges from the assembly graph that are not consistent with the coloring. While the same method theoretically extends to any guide data that can be represented as a linear ordering for reads, such as optical maps [<xref ref-type="bibr" rid="CR12">12</xref>], it fails to generalize to non-linear guide data.</p>
      <p id="Par18">Kermit uses miniasm [<xref ref-type="bibr" rid="CR1">1</xref>] for both assembly graph construction and genome assembly using the graph. We will be similarly using miniasm heavily here for easy comparison. Miniasm first uses minimap to find overlaps between the reads. Based on the overlaps it then creates a string graph by removing transitive edges. The graph is then cleaned by removing tips and popping bubbles. Finally miniasm reports unitigs, i.e. non-branching paths, in the resulting graph as contigs. Miniasm does not implement a consensus phase and thus the error rate of contigs produced by miniasm is the same as the error rate of the reads.</p>
    </sec>
  </sec>
  <sec id="Sec3">
    <title>Results</title>
    <sec id="Sec4">
      <title>Overview of our method</title>
      <p id="Par19">The input to our method is a set of reads and guide data describing the overall structure of the genome. First, we use the guide data to cluster the reads into multiple hierarchical trees where the set of reads is split into the leaves. Each leaf thus consists of a set of reads originating from nearby locations of the genome according to the guide data and the leaves are joined into multiple hierarchical binary trees according to the clustering. As the genomic distance between reads in different chromosomes is not defined, multiple trees, one for each chromosome, need to be used to cover a full multi-chromosomal genome.</p>
      <p id="Par20">We have implemented our method using genetic linkage maps as guide data. A genetic linkage map is usually constructed with respect to a draft assembly. Thus in this case the input consists of a set of reads, the genetic linkage map, and the draft assembly that has been used to construct the genetic linkage map. The draft assembly is used only for calling SNVs which become the markers of the genetic linkage map. The markers are ordered based on the observed patterns of inheritance and thus the ordering is done independently of the draft assembly.</p>
      <p id="Par21">The reads are localized on the genetic linkage map by aligning them to the draft genome and checking which markers of the genetic linkage map are closest to the alignment. The read is classified using the set of markers that are roughly equidistant from the closest marker. The classifications define a partial order for the reads and can thus be directly used to split the reads into leaves and to construct the hierarchical tree.</p>
      <p id="Par22">Next, we assemble the reads using the hierarchical tree. The assembly pipelines for leaf nodes and internal nodes are different. For leaf nodes, the input is raw long reads and as such, we use existing tools for assembling and error correcting the reads into polished contigs for further assembly in the hierarchy. Finally, for each internal node, we take the contigs from the child nodes and assemble them. Internal nodes take the error corrected contigs as input and output longer super-contigs, so we use a simple greedy assembly algorithm to combine the input contigs. The final assembly is produced at the root of the tree. The assembly process is shown in Fig. <xref rid="Fig1" ref-type="fig">1</xref>.<fig id="Fig1"><label>Fig. 1</label><caption><p>An example of how different points of the hierarchy affect the assembly. At the bottom raw reads are assembled into contigs in the leaf nodes. Each internal node then takes the contigs and further merges the contigs from its children together</p></caption><graphic xlink:href="12859_2022_4701_Fig1_HTML" id="MO1"/></fig></p>
    </sec>
    <sec id="Sec5">
      <title>Data sets and evaluation</title>
      <p id="Par23">We ran several experiments using simulated <italic>Caenorhabditis elegans</italic> reads and a simulated genetic linkage map, real <italic>Arabidopsis thaliana</italic> reads and simulated genetic linkage map, real human reads and a simulated genetic linkage map, and using real reads and a real genetic linkage map for an additional <italic>C. elegans</italic> data set [<xref ref-type="bibr" rid="CR17">17</xref>, <xref ref-type="bibr" rid="CR18">18</xref>] and a nine-spined stickleback <italic>Pungitius pungitius</italic> data set from a recent assembly project [<xref ref-type="bibr" rid="CR19">19</xref>, <xref ref-type="bibr" rid="CR20">20</xref>]. <italic>C. elegans</italic>, <italic>A. thaliana</italic>, and human have good quality reference genomes which allow us to evaluate the correctness of the produced assemblies accurately.</p>
      <p id="Par24">The <italic>P. pungitius</italic> data set allows us to evaluate the assemblers also on a data set where both reads and genetic linkage maps are real but due to the unavailability of a good quality reference genome, the correctness of the assemblies needs to be evaluated with more indirect means such as gene completeness and mappability of reads back to the assembly as explained in more details below. The <italic>C. elegans</italic> data set with real genetic linkage map and reads gives additional weight to any conclusions drawn from the indirect evaluation. The details of the read sets are shown in Table <xref rid="Tab1" ref-type="table">1</xref>.</p>
      <p id="Par25">The long reads for <italic>C. elegans</italic> were simulated with 40x coverage using SimLoRD v1.0.4 [<xref ref-type="bibr" rid="CR21">21</xref>]. The genetic linkage maps for <italic>C. elegans</italic>, <italic>A. thaliana</italic>, and <italic>H. sapiens</italic> were simulated by randomly positioning markers until 100,000, 50,000, and 700,000 markers respectively had been placed. Of those markers, the ones that are less than 20 bp away from the previous are removed. Bins were assigned to markers by starting from the first marker in the first chromosome and adding markers to the same bin until a marker is at least 200 bp away and then moving to the next bin. The real genetic linkage maps of <italic>C. elegans</italic> assigns a physical position for each marker in the genetic linkage map and thus does not divide the markers into bins. Therefore, we have interpreted the genetic linkage map data as each marker having its own bin.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Characteristics of the read data sets and genetic maps used in the experiments</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Organism</th><th align="left"># of reads</th><th align="left">Mean read length (bp)</th><th align="left">Total read length (Mbp)</th><th align="left">Coverage</th><th align="left"># of markers</th><th align="left"># of bins</th></tr></thead><tbody><tr><td align="left"><italic>C. elegans</italic> (sim)</td><td align="left">478,836</td><td align="left">8,214</td><td align="left">3,933</td><td align="left">40</td><td align="left">98,978</td><td align="left">81,788</td></tr><tr><td align="left"><italic>C. elegans</italic> (real)</td><td align="left">3,316,106</td><td align="left">8,801</td><td align="left">29,185</td><td align="left">291</td><td align="left">388,202</td><td align="left">–</td></tr><tr><td align="left"><italic>A. thaliana</italic></td><td align="left">1,135,065</td><td align="left">9,475</td><td align="left">10,755</td><td align="left">90</td><td align="left">49,617</td><td align="left">45,930</td></tr><tr><td align="left"><italic>P. pungitius</italic></td><td align="left">10,918,547</td><td align="left">4,948</td><td align="left">54,025</td><td align="left">115</td><td align="left">76,036</td><td align="left">34,845</td></tr><tr><td align="left"><italic>H. sapiens</italic></td><td align="left">25,986,153</td><td align="left">8,916</td><td align="left">231,694</td><td align="left">76</td><td align="left">996,603</td><td align="left">936,534</td></tr></tbody></table><table-wrap-foot><p>The <italic>C. elegans</italic> (sim) reads were simulated with SimLoRD and the <italic>C. elegans</italic> (sim), <italic>A. thaliana</italic>, and <italic>H. sapiens</italic> genetic linkage maps were simulated by randomly positioning the markers on the genome. The <italic>C. elegans</italic> (real), <italic>A. thaliana</italic>, <italic>P. pungitius</italic>, and <italic>H. sapiens</italic> reads are real PacBio reads</p></table-wrap-foot></table-wrap></p>
      <p id="Par26">We ran all the methods on a cluster with 16 cores reserved with default settings for all tools. The produced assemblies were evaluated with QUAST v5.0.2 [<xref ref-type="bibr" rid="CR22">22</xref>] and BUSCO v5.2.2 [<xref ref-type="bibr" rid="CR23">23</xref>]. QUAST reports genome fraction, misassemblies, and NGA50 values by aligning the assemblies to a reference genome. Additionally QUAST aligns the reads to the assemblies and reports the fraction of reads that can be mapped to the assemblies. For the <italic>P. pungitius</italic> assemblies we do not report misassembly and NGA50 statistics because a high quality reference sequence is not available.</p>
      <p id="Par27">BUSCO reports the number of single-copy orthologs from a gene set it can detect from the assemblies. We used the Nematoda, Brassicales, Actinopterygii, and primates gene sets (odb10 for all sets) for the BUSCO evaluation of <italic>C. elegans</italic>, <italic>A. thaliana</italic>, <italic>P. pungitius</italic>, and <italic>H. sapiens</italic>, respectively. We report the runtime of the methods as the total wall clock time and the memory usage is reported as the peak memory usage during execution.</p>
    </sec>
    <sec id="Sec6">
      <title>The minimum leaf size</title>
      <p id="Par28">The most important parameter in our method is the minimum leaf size, i.e. the minimum number of reads assigned to each leaf in the hierarchical tree. We experimented with different leaf sizes for both the simulated and the real data. The results of these experiments are shown in Tables <xref rid="Tab2" ref-type="table">2</xref> and <xref rid="Tab3" ref-type="table">3</xref> . We tried different minimum leaf sizes ranging from 0.1 to 5% of the reads. On the simulated data, the best assemblies regarding the number of contigs and the number of misassemblies are achieved with medium sized leaves. The genome fraction goes down as the leaf size increases. The proportion of mapped reads is similar across all leaf sizes. The runtime is fairly stable and the peak memory usage increases as the leaf size increases because assembling the leaves needs more memory for large leaves as there is more data per leaf to assemble. The NGA50 is less stable. This is likely due to the low number of contigs as in such scenarios a single join of two contigs can have a big effect on the NGA50. The BUSCO completeness is highest for assemblies that also have high NGA50 values but also the assembly produced with the smallest leaf size has a high BUSCO completeness score. For further comparisons with other methods, we will use the assemblies producing the highest NGA50.</p>
      <p id="Par29">On the real <italic>P. pungitius</italic> data the best N50 value is achieved with the minimum leaf size 1.5% of all reads. The medium minimum leaf sizes also achieve the longest assemblies and the most accurate assemblies as measured by BUSCO completeness and the proportion of mapped reads. The number of contigs is slightly smaller for the largest minimum leaf size but this assembly has a lower N50 value and the total length of the assembly is lower than the reference GenBank assembly (GCA_902500615.3). For comparisons with other methods we will use the leaf size 1.5% producing the best N50 value.</p>
      <p id="Par30">For both of our data sets good minimum leaf size is around 1.5% of the reads. However, we note that a denser genetic linkage map allows for smaller leaves. Similarly high coverage of the reads would increase the optimal number of reads per leaf.<table-wrap id="Tab2"><label>Table 2</label><caption><p>The effect of the minimum leaf size on the assembly of the simulated <italic>C. elegans</italic> data</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Min leaf size (% of reads)</th><th align="left"># of contigs</th><th align="left">NGA50 (bp)</th><th align="left">Genome fraction</th><th align="left">Misassemblies</th><th align="left">BUSCO Complete (%)</th><th align="left">Reads mapped (%)</th><th align="left">Runtime (min)</th><th align="left">Peak memory<break/>(MB)</th></tr></thead><tbody><tr><td align="left">0.1%</td><td align="left">42</td><td align="left">3,901,186</td><td align="left">99.699</td><td align="left">11</td><td align="left">97.8</td><td align="left">99.78</td><td align="left">60</td><td align="left">1564</td></tr><tr><td align="left">0.5%</td><td align="left">34</td><td align="left">4,282,525</td><td align="left">99.564</td><td align="left">11</td><td align="left">93.4</td><td align="left">99.76</td><td align="left">55</td><td align="left">487</td></tr><tr><td align="left">1.0%</td><td align="left">30</td><td align="left">4,274,710</td><td align="left">99.592</td><td align="left">9</td><td align="left">93.4</td><td align="left">99.77</td><td align="left">53</td><td align="left">901</td></tr><tr><td align="left">1.5%</td><td align="left">31</td><td align="left">5,901,436</td><td align="left">99.595</td><td align="left">14</td><td align="left">97.2</td><td align="left">99.78</td><td align="left">51</td><td align="left">1334</td></tr><tr><td align="left">2.0%</td><td align="left">37</td><td align="left">4,691,641</td><td align="left">99.604</td><td align="left">15</td><td align="left">93.5</td><td align="left">99.77</td><td align="left">53</td><td align="left">1776</td></tr><tr><td align="left">2.5%</td><td align="left">38</td><td align="left">3,900,976</td><td align="left">99.568</td><td align="left">12</td><td align="left">93.3</td><td align="left">99.78</td><td align="left">54</td><td align="left">2226</td></tr><tr><td align="left">5.0%</td><td align="left">39</td><td align="left">5,335,812</td><td align="left">99.571</td><td align="left">16</td><td align="left">98.1</td><td align="left">99.78</td><td align="left">40</td><td align="left">3954</td></tr></tbody></table></table-wrap><table-wrap id="Tab3"><label>Table 3</label><caption><p>The effect of the minimum leaf size on the assembly of the real <italic>P. pungitius</italic> data. The length of the scaffold level reference assembly (GCA_902500615.3) is 466 Mbp</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Min leaf size (% of reads)</th><th align="left"># of contigs</th><th align="left">N50 (bp)</th><th align="left">Total length (bp)</th><th align="left">BUSCO complete (%)</th><th align="left">Reads mapped (%)</th><th align="left">Runtime (h)</th><th align="left">Peak memory (MB)</th></tr></thead><tbody><tr><td align="left">0.1%</td><td align="left">1945</td><td align="left">918,119</td><td align="left">453,155,823</td><td align="left">88.0</td><td align="left">92.6</td><td align="left">13.34</td><td align="left">6,212</td></tr><tr><td align="left">0.5%</td><td align="left">1084</td><td align="left">1,799,563</td><td align="left">489,091,741</td><td align="left">91.3</td><td align="left">93.52</td><td align="left">14.3</td><td align="left">8,289</td></tr><tr><td align="left">1.0%</td><td align="left">884</td><td align="left">1,877,796</td><td align="left">511,024,231</td><td align="left">92.1</td><td align="left">93.95</td><td align="left">13.88</td><td align="left">11,680</td></tr><tr><td align="left">1.5%</td><td align="left">790</td><td align="left">2,119,727</td><td align="left">503,905,067</td><td align="left">92.5</td><td align="left">93.91</td><td align="left">13.44</td><td align="left">16,001</td></tr><tr><td align="left">2.0%</td><td align="left">779</td><td align="left">2,059,129</td><td align="left">499,019,519</td><td align="left">91.7</td><td align="left">93.82</td><td align="left">11.98</td><td align="left">17,884</td></tr><tr><td align="left">2.5%</td><td align="left">784</td><td align="left">2,027,447</td><td align="left">481,429,790</td><td align="left">91.7</td><td align="left">93.65</td><td align="left">17.95</td><td align="left">22,713</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec7">
      <title>Map density</title>
      <p id="Par31">To study the effect of the density of the genetic linkage map, i.e. the number of markers, we simulated maps with different numbers of markers using the <italic>C. elegans</italic> data. We ran both HGGA and Kermit on these data sets. The results are shown in Table <xref rid="Tab4" ref-type="table">4</xref>. HGGA is using closest marker coloring in all cases. We see that once the map is dense enough, the quality of the assembly hardly changes because once this threshold is reached, the reads originating from repeat regions are assigned to different leaves resulting in a good quality assembly which cannot be further improved by more fine grained division of the reads. For Kermit this happens when the density reaches 50k and for HGGA when the density reaches 10k. HGGA is less sensitive to the density because we color the reads using the marker which is closest to the alignment of the read when the alignment does not contain any markers. Kermit, on the other hand, colors these reads by propagating the colors in the overlap graph which can lead to ambiguous colorings.<table-wrap id="Tab4"><label>Table 4</label><caption><p>The effect of the map density on the assembly of the <italic>C. elegans</italic> data</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left"># of markers</th><th align="left"># of contigs</th><th align="left">NGA50 (bp)</th><th align="left">Genome fraction</th><th align="left">Misassemblies</th><th align="left">BUSCO Compl. (%)</th><th align="left">Reads mapped (%)</th><th align="left">Runtime (min)</th><th align="left">Peak memory (MB)</th></tr></thead><tbody><tr><td align="left">Kermit</td><td align="left">1k</td><td align="left">850</td><td align="left">89,141</td><td align="left">74.315</td><td align="left">13</td><td align="left">73.4</td><td align="left">91.84</td><td align="left">21</td><td align="left">11,943</td></tr><tr><td align="left">Kermit</td><td align="left">10k</td><td align="left">733</td><td align="left">82,640</td><td align="left">68.808</td><td align="left">16</td><td align="left">67.8</td><td align="left">90.69</td><td align="left">21</td><td align="left">11,809</td></tr><tr><td align="left">Kermit</td><td align="left">20k</td><td align="left">216</td><td align="left">818,928</td><td align="left">95.417</td><td align="left">9</td><td align="left">93.8</td><td align="left">98.09</td><td align="left">22</td><td align="left">12,434</td></tr><tr><td align="left">Kermit</td><td align="left">50k</td><td align="left">69</td><td align="left">3,450,849</td><td align="left">99.539</td><td align="left">12</td><td align="left">98.0</td><td align="left">99.74</td><td align="left">23</td><td align="left">12,542</td></tr><tr><td align="left">Kermit</td><td align="left">100k</td><td align="left">61</td><td align="left">3,476,344</td><td align="left">99.563</td><td align="left">11</td><td align="left">98.3</td><td align="left">99.75</td><td align="left">23</td><td align="left">12,543</td></tr><tr><td align="left">Kermit</td><td align="left">150k</td><td align="left">64</td><td align="left">3,450,700</td><td align="left">99.555</td><td align="left">12</td><td align="left">98.1</td><td align="left">99.77</td><td align="left">23</td><td align="left">12,555</td></tr><tr><td align="left">Kermit</td><td align="left">200k</td><td align="left">64</td><td align="left">3,476,344</td><td align="left">99.563</td><td align="left">11</td><td align="left">98.3</td><td align="left">99.75</td><td align="left">23</td><td align="left">12,542</td></tr><tr><td align="left">Kermit</td><td align="left">500k</td><td align="left">64</td><td align="left">3,476,344</td><td align="left">99.563</td><td align="left">11</td><td align="left">98.2</td><td align="left">99.75</td><td align="left">23</td><td align="left">12,544</td></tr><tr><td align="left">HGGA</td><td align="left">1k</td><td align="left">69</td><td align="left">2,488,265</td><td align="left">95.627</td><td align="left">8</td><td align="left">93.8</td><td align="left">97.63</td><td align="left">38</td><td align="left">1902</td></tr><tr><td align="left">HGGA</td><td align="left">10k</td><td align="left">44</td><td align="left">3,668,792</td><td align="left">99.698</td><td align="left">9</td><td align="left">97.9</td><td align="left">99.75</td><td align="left">40</td><td align="left">1837</td></tr><tr><td align="left">HGGA</td><td align="left">20k</td><td align="left">44</td><td align="left">3,668,641</td><td align="left">99.680</td><td align="left">10</td><td align="left">95.6</td><td align="left">98.52</td><td align="left">42</td><td align="left">1835</td></tr><tr><td align="left">HGGA</td><td align="left">50k</td><td align="left">46</td><td align="left">3,668,702</td><td align="left">99.708</td><td align="left">9</td><td align="left">95.9</td><td align="left">98.52</td><td align="left">42</td><td align="left">1827</td></tr><tr><td align="left">HGGA</td><td align="left">100k</td><td align="left">49</td><td align="left">3,668,667</td><td align="left">99.646</td><td align="left">9</td><td align="left">97.8</td><td align="left">99.78</td><td align="left">42</td><td align="left">1874</td></tr><tr><td align="left">HGGA</td><td align="left">150k</td><td align="left">51</td><td align="left">3,668,731</td><td align="left">99.669</td><td align="left">8</td><td align="left">98.1</td><td align="left">99.75</td><td align="left">42</td><td align="left">1886</td></tr><tr><td align="left">HGGA</td><td align="left">200k</td><td align="left">52</td><td align="left">3,869,053</td><td align="left">99.568</td><td align="left">8</td><td align="left">96.2</td><td align="left">99.36</td><td align="left">43</td><td align="left">1833</td></tr><tr><td align="left">HGGA</td><td align="left">500k</td><td align="left">47</td><td align="left">3,668,735</td><td align="left">99.652</td><td align="left">13</td><td align="left">98.0</td><td align="left">99.76</td><td align="left">48</td><td align="left">1837</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec8">
      <title>Assembly height</title>
      <p id="Par32">To evaluate the effects of assembly in the internal nodes, we also ran QUAST and BUSCO on all the contigs generated during the hierarchical assembly process. The results are shown in Table <xref rid="Tab5" ref-type="table">5</xref>. It should be noted that the height of the assembly trees is not an adjustable parameter of the method, rather it is derived from the width of tree, i.e. the number of leaf nodes. The width of the trees is controlled by both the minimum leaf size and the density of the map.</p>
      <p id="Par33">As expected, the contigs get joined to form longer and longer sequences as the assembly process moves up the trees. The leaf contigs contain duplicated sequences by design as the leaves are forced to overlap. Most of this duplication is removed as contigs are joined and contigs that are contained in the joined sequences are removed. This can be seen in the number of contigs plummeting in the first two levels of the internal node assemblies. The number of misassemblies increases after the final assembly, which takes the chromosomally separated trees and attempts to find possible overlaps due to errors in the map.<table-wrap id="Tab5"><label>Table 5</label><caption><p>The effect of assembly in the internal nodes on the <italic>C. elegans</italic> data</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Height</th><th align="left"># of contigs</th><th align="left">NGA50 (bp)</th><th align="left">Genome fraction</th><th align="left">Misassemblies</th><th align="left">BUSCO Complete (%)</th><th align="left">Reads mapped (%)</th></tr></thead><tbody><tr><td align="left">leaves</td><td align="left">221</td><td align="left">2,840,136</td><td align="left">99.619</td><td align="left">17</td><td align="left">98.6</td><td align="left">99.88</td></tr><tr><td align="left">1</td><td align="left">112</td><td align="left">3,323,225</td><td align="left">99.599</td><td align="left">17</td><td align="left">97.7</td><td align="left">99.84</td></tr><tr><td align="left">2</td><td align="left">71</td><td align="left">3,473,215</td><td align="left">99.571</td><td align="left">13</td><td align="left">98.1</td><td align="left">99.81</td></tr><tr><td align="left">3</td><td align="left">59</td><td align="left">3,540,478</td><td align="left">99.551</td><td align="left">12</td><td align="left">97.6</td><td align="left">99.79</td></tr><tr><td align="left">4</td><td align="left">51</td><td align="left">3,549,527</td><td align="left">99.551</td><td align="left">12</td><td align="left">97.6</td><td align="left">99.78</td></tr><tr><td align="left">root</td><td align="left">31</td><td align="left">5,901,436</td><td align="left">99.595</td><td align="left">14</td><td align="left">97.2</td><td align="left">99.78</td></tr></tbody></table></table-wrap></p>
    </sec>
    <sec id="Sec9">
      <title>Comparison to previous work</title>
      <p id="Par34">We compared HGGA to miniasm [<xref ref-type="bibr" rid="CR1">1</xref>] which uses only the reads and Kermit [<xref ref-type="bibr" rid="CR11">11</xref>] which uses both the reads and the genetic linkage map. We ran Racon [<xref ref-type="bibr" rid="CR24">24</xref>] to polish the assemblies produced by miniasm and Kermit since they do not implement a consensus phase. We note that HGGA uses Racon to polish the leaf assemblies and thus produces a polished assembly. We limited the comparison to these tools because all of them use the same module for assembling the reads and thus from this comparison we can see how the integration of the genetic linkage map improves assembly. The results of the comparison on the simulated <italic>C. elegans</italic>, <italic>A. thaliana</italic>, <italic>H. sapiens</italic>, and real <italic>C. elegans</italic> and <italic>P. pungitius</italic> data are shown in Tables <xref rid="Tab6" ref-type="table">6</xref>, <xref rid="Tab8" ref-type="table">8</xref>, <xref rid="Tab9" ref-type="table">9</xref>, <xref rid="Tab7" ref-type="table">7</xref>, and <xref rid="Tab10" ref-type="table">10</xref> , respectively.</p>
      <p id="Par35">Table <xref rid="Tab6" ref-type="table">6</xref> shows that on the simulated <italic>C. elegans</italic> data, both Kermit and HGGA are able to improve upon the miniasm assembly which uses only the read data. HGGA produces 63% less contigs than Kermit and twice as large NGA50 value as Kermit but also seven more misassemblies. Kermit also has the highest BUSCO completeness score, but slightly higher number of reads can be mapped back to the HGGA assembly. Kermit is faster but HGGA uses less memory. The results for <italic>C. elegans</italic> assemblies with real genetic linkage maps and reads are shown in Table <xref rid="Tab7" ref-type="table">7</xref>. The results mostly agree with those of the simulated setting, albeit the differences between the tools are less drastic due to being less perfect.</p>
      <p id="Par36">The results on the <italic>A. thaliana</italic> data, where the reads are real but the genetic linkage map is simulated, are shown in Table <xref rid="Tab8" ref-type="table">8</xref>. Kermit produces the smallest number of contigs. However, HGGA produces an assembly with 1.6 times higher NGA50 value, while the NGA50 value of the Kermit assembly is actually slightly smaller than for the miniasm assembly. The assembly produced by Kermit has the smallest number of misassemblies but less than 90% of reads can be mapped back to it, whereas over 95% of the reads map back to the HGGA and miniasm assemblies. The number of misassemblies in the HGGA assembly is still 30% lower as compared to the miniasm assembly and the BUSCO completeness score is highest for HGGA. Similar to the <italic>C. elegans</italic> data Kermit is faster but HGGA uses less memory.</p>
      <p id="Par37">On the <italic>H. sapiens</italic> data shown in Table <xref rid="Tab9" ref-type="table">9</xref>, HGGA produces a much more contiguous assembly compared to the other tools, as shown by the number of contigs and NGA50 value. As with the other datasets, Kermit produces the fewest misassemblies. However, this experiment shows that HGGA scales well to larger data sets as its memory usage remains low (69 GB as compared to more than 560 GB used by miniasm and Kermit) and it is also the fastest method.</p>
      <p id="Par38">Table <xref rid="Tab10" ref-type="table">10</xref> shows that on the real <italic>P. pungitius</italic> data, HGGA and Kermit both again improve over miniasm. Kermit has the lowest number of contigs but gives shortest assembly overall. HGGA has only slightly less contigs compared to Kermit but the contigs are longer which leads to the highest N50 value. The accuracy of all assemblies are similar with the miniasm assembly having slightly higher BUSCO completeness score than the other assemblies, and HGGA having the highest number of reads mapping to it. The runtime of all the tools is similar while HGGA uses only 10% of the memory used by the other tools.</p>
      <p id="Par39">HGGA produces an assembly which is longer than the reference genome, whereas the miniasm assembly is roughly of the same size and the Kermit assembly is smaller. To get a further estimate of the genome size, we computed the number of distinct 51-mers with abundancy above five in Illumina reads produced for this same genome, which yielded a genome size estimate of 450 million. The assemblies produced by miniasm, Kermit, and HGGA have 429 million, 413 million, and 431 million distinct 51-mers, respectively. As expected, these numbers are lower since the Illumina reads contain 51-mers from both haplotypes, whereas the assemblers attempt to produce a single haplotype. To further analyse the <italic>k</italic>-mer spectrum of the assemblies and reads, we generated the copy number spectrum plots for the three assemblies which are shown in the supplementary material (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S1). This analysis shows that HGGA has more duplicated <italic>k</italic>-mers that the other assemblies and thus the longer length is due to duplicated sequence.<table-wrap id="Tab6"><label>Table 6</label><caption><p>Comparison of HGGA, miniasm, and Kermit on the simulated <italic>C. elegans</italic> data</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left"># of contigs</th><th align="left">NGA50 (bp)</th><th align="left">Genome fraction</th><th align="left">Misassemblies</th><th align="left">BUSCO complete (%)</th><th align="left">Reads mapped (%)</th><th align="left">Runtime (min)</th><th align="left">Peak memory (MB)</th></tr></thead><tbody><tr><td align="left">Miniasm</td><td align="left">126</td><td align="left">1,982,361</td><td align="left">99.443</td><td align="left">10</td><td align="left">98.1</td><td align="left">99.75</td><td align="left">20</td><td align="left">18,332</td></tr><tr><td align="left">Kermit</td><td align="left">83</td><td align="left">2,819,353</td><td align="left">99.535</td><td align="left">7</td><td align="left">98.3</td><td align="left">99.75</td><td align="left">23</td><td align="left">19,578</td></tr><tr><td align="left">HGGA</td><td align="left">31</td><td align="left">5,901,436</td><td align="left">99.595</td><td align="left">14</td><td align="left">97.2</td><td align="left">99.78</td><td align="left">51</td><td align="left">1,334</td></tr></tbody></table></table-wrap><table-wrap id="Tab7"><label>Table 7</label><caption><p>Comparison of HGGA, miniasm, and Kermit on the <italic>C. elegans</italic> data with real genetic linkage map and reads</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left"># of contigs</th><th align="left">NGA50 (bp)</th><th align="left">Genome fraction</th><th align="left">Misassemblies</th><th align="left">BUSCO complete (%)</th><th align="left">Reads mapped (%)</th><th align="left">Runtime (h)</th><th align="left">Peak memory (MB)</th></tr></thead><tbody><tr><td align="left">Miniasm</td><td align="left">472</td><td align="left">1,582,439</td><td align="left">99.478</td><td align="left">420</td><td align="left">95.2</td><td align="left">94.43</td><td align="left">5.52</td><td align="left">88,371</td></tr><tr><td align="left">Kermit</td><td align="left">95</td><td align="left">1,864,384</td><td align="left">99.187</td><td align="left">197</td><td align="left">95.8</td><td align="left">93.41</td><td align="left">4.88</td><td align="left">88,028</td></tr><tr><td align="left">HGGA</td><td align="left">217</td><td align="left">1,927,968</td><td align="left">99.072</td><td align="left">195</td><td align="left">95.1</td><td align="left">94.61</td><td align="left">9.07</td><td align="left">9,101</td></tr></tbody></table></table-wrap><table-wrap id="Tab8"><label>Table 8</label><caption><p>Comparison of HGGA, miniasm, and Kermit on the <italic>A. thaliana</italic> data with real reads and simulated genetic linkage map</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left"># of contigs</th><th align="left">NGA50 (bp)</th><th align="left">Genome fraction</th><th align="left">Misassemblies</th><th align="left">BUSCO Complete (%)</th><th align="left">Reads mapped (%)</th><th align="left">Runtime (h)</th><th align="left">Peak memory (MB)</th></tr></thead><tbody><tr><td align="left">Miniasm</td><td align="left">712</td><td align="left">2,552,623</td><td align="left">98.766</td><td align="left">346</td><td align="left">84.5</td><td align="left">96.63</td><td align="left">2.37</td><td align="left">34,128</td></tr><tr><td align="left">Kermit</td><td align="left">123</td><td align="left">2,552,489</td><td align="left">98.185</td><td align="left">174</td><td align="left">85.1</td><td align="left">89.07</td><td align="left">2.08</td><td align="left">34,486</td></tr><tr><td align="left">HGGA</td><td align="left">136</td><td align="left">4,173,314</td><td align="left">98.247</td><td align="left">242</td><td align="left">86.3</td><td align="left">95.87</td><td align="left">3.41</td><td align="left">10,050</td></tr></tbody></table></table-wrap><table-wrap id="Tab9"><label>Table 9</label><caption><p>Comparison of HGGA, miniasm, and Kermit on the <italic>H. sapiens</italic> data with real reads and simulated genetic linkage map</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left"># of contigs</th><th align="left">NGA50 (bp)</th><th align="left">Genome fraction</th><th align="left">Misassemblies</th><th align="left">BUSCO complete (%)</th><th align="left">Reads mapped (%)</th><th align="left">Runtime (h)</th><th align="left">Peak memory (MB)</th></tr></thead><tbody><tr><td align="left">Miniasm</td><td align="left">8,789</td><td align="left">692,902</td><td align="left">89.761</td><td align="left">3,669</td><td align="left">76.5</td><td align="left">61.37</td><td align="left">237.84</td><td align="left">565,309</td></tr><tr><td align="left">Kermit</td><td align="left">4,503</td><td align="left">1,050,164</td><td align="left">90.069</td><td align="left">762</td><td align="left">77.9</td><td align="left">60.65</td><td align="left">239.29</td><td align="left">565,307</td></tr><tr><td align="left">HGGA</td><td align="left">2,204</td><td align="left">6,814,538</td><td align="left">93.181</td><td align="left">3,004</td><td align="left">86.5</td><td align="left">70.45</td><td align="left">37.46</td><td align="left">69,492</td></tr></tbody></table></table-wrap><table-wrap id="Tab10"><label>Table 10</label><caption><p>Comparison of HGGA, miniasm, and Kermit on the real <italic>P. pungitius</italic> data. The length of the scaffold level reference assembly (GCA_902500615.3) is 466 Mbp</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Method</th><th align="left"># of contigs</th><th align="left">N50 (bp)</th><th align="left">Total length (bp)</th><th align="left">BUSCO complete (%)</th><th align="left">Reads mapped (%)</th><th align="left">Runtime (h)</th><th align="left">Peak memory (MB)</th></tr></thead><tbody><tr><td align="left">Miniasm</td><td align="left">1,873</td><td align="left">1,182,753</td><td align="left">461,795,357</td><td align="left">92.7</td><td align="left">93.58</td><td align="left">13.49</td><td align="left">165,716</td></tr><tr><td align="left">Kermit</td><td align="left">833</td><td align="left">1,392,886</td><td align="left">432,823,234</td><td align="left">92.1</td><td align="left">93.08</td><td align="left">13.19</td><td align="left">165,061</td></tr><tr><td align="left">HGGA</td><td align="left">790</td><td align="left">2,119,727</td><td align="left">503,905,067</td><td align="left">92.5</td><td align="left">93.91</td><td align="left">13.44</td><td align="left">16,001</td></tr></tbody></table></table-wrap></p>
    </sec>
  </sec>
  <sec id="Sec10">
    <title>Discussion</title>
    <p id="Par40">We have presented HGGA, a method for assembling read data with the help of genetic linkage maps. Our experiments show that the number of contigs decreases 12-80% as compared to an assembly using only read data. When compared to Kermit, our previous method for assembling read data with genetic linkage maps, the number of contigs increases on the <italic>A. thaliana</italic> and real<italic>C. elegans</italic> data sets but decreases on the other three data sets. HGGA produces up to 9.8 times longer NGA50 values as compared to a read only assembly with miniasm and up to 6.5 times longer NGA50 when compared to Kermit.</p>
    <p id="Par41">On the simulated <italic>C. elegans</italic> data all methods produce few misassemblies and on the <italic>A. thaliana</italic> and human data HGGA produces more misassemblies than Kermit but less than miniasm, whereas on the real <italic>C. elegans</italic> data set HGGA produces a similar number of misassemblies as Kermit but less than miniasm. The runtime of HGGA is longer than the runtime of previous methods on the simulated and real <italic>C. elegans</italic> and <italic>A. thaliana</italic> data sets but similar on the <italic>P. pungitius</italic> data and less than a sixth on <italic>H. sapiens</italic> data. On all data sets, HGGA uses significantly less memory as the reads are assembled one subset at a time and thus do not reside in the memory simultaneously.</p>
    <p id="Par42">We assume here that the genetic linkage map has been constructed for a draft assembly. Recently, a tool called AFLAP [<xref ref-type="bibr" rid="CR25">25</xref>] has been published which builds a genetic linkage map in a reference-free manner using <italic>k</italic>-mer data. By integrating AFLAP output with HGGA  we could avoid the need for a draft assembly for the genetic linkage map construction. However, this would require localizing the markers on the highly erroneous PacBio reads based on the <italic>k</italic>-mers output by AFLAP instead of our current practise of aligning the reads to the draft assembly.</p>
    <p id="Par43">In this work, we only consider contig assembly, i.e. assembling the reads into contiguous sequences without gaps. Our method does not do scaffolding, which is the process of ordering the contigs into scaffolds where contigs are separated by gaps. Thus we did not compare HGGA against scaffolding methods which use genetic linkage maps for scaffolding. Such tools include for example Chromonomer [<xref ref-type="bibr" rid="CR5">5</xref>] and Lep-Anchor [<xref ref-type="bibr" rid="CR6">6</xref>]. Because these tools only scaffold the contigs, the contigs themselves do not change and thus the contig statistics remain the same as for the input set of contigs. Furthermore, such a scaffolding method could be run after HGGA to further increase the contiguity of the assembly.</p>
    <p id="Par44">Our current implementation only supports genetic linkage maps. As further work, it would be interesting to extend the implementation to use optical maps or Hi-C data. This would only require developing a method for dividing the reads into leaves based on the different kind of guide data. The hierarchical assembly of the leaves and the internal nodes of the hierarchical tree would remain the same.</p>
  </sec>
  <sec id="Sec11">
    <title>Conclusions</title>
    <p id="Par45">We have presented a framework for integrating additional data such as genetic linkage maps, optical maps, and Hi-C data to genome assembly, and implemented it for genetic linkage maps. The key insight of our method is to use the additional data to partition the reads into overlapping subsets and assemble the subsets independently. Because the assembly of the subsets is independent, our approach is inherently easy to parallelize beyond a single machine. Our implementation of the approach for genetic linkage maps shows that it improves the contiguity of the assembly on both simulated and real data.</p>
  </sec>
  <sec id="Sec12">
    <title>Methods</title>
    <sec id="Sec13">
      <title>Genomic distance function</title>
      <p id="Par46">Here, we show how to apply the idea of assembly guiding to any data that can be represented with a measure of positional similarity between reads. First, we define a distance function between two reads that gives the 1-dimensional genomic distance in base pairs. Using hierarchical clustering methods, we can then construct a hierarchy tree using this distance function.</p>
      <p id="Par47">Given two reads <inline-formula id="IEq2"><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_1$$\end{document}</tex-math><mml:math id="M4"><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq2.gif"/></alternatives></inline-formula> and <inline-formula id="IEq3"><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$R_2$$\end{document}</tex-math><mml:math id="M6"><mml:msub><mml:mi>R</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq3.gif"/></alternatives></inline-formula> that originate from positions <inline-formula id="IEq4"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$p_1$$\end{document}</tex-math><mml:math id="M8"><mml:msub><mml:mi>p</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq4.gif"/></alternatives></inline-formula> and <inline-formula id="IEq5"><alternatives><tex-math id="M9">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$p_2$$\end{document}</tex-math><mml:math id="M10"><mml:msub><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq5.gif"/></alternatives></inline-formula> in the genome, the genomic distance <inline-formula id="IEq6"><alternatives><tex-math id="M11">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$D(R_1,R_2) = |p_1-p_2|$$\end{document}</tex-math><mml:math id="M12"><mml:mrow><mml:mi>D</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>R</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>-</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq6.gif"/></alternatives></inline-formula>. In practice, we do not have access to the exact distance function <italic>D</italic> but we attempt to estimate it with the guide data.</p>
      <p id="Par48">For reference guided assembly, we can construct a genomic distance function for the reads by aligning the reads to the reference and computing distances between alignments. Assuming a high quality reference and good alignments for the reads, this gives a good estimate of the distance measure. The drawback is the requirement for high quality reference genome.</p>
      <p id="Par49">Genetic linkage maps are constructed relative to some draft assembly and so we have access to the draft assembly and the markers of the map are positioned on the draft assembly. Thus to estimate the genomic distance function using genetic linkage maps, we align reads to the map-relative draft assembly of the genome and find all overlapping markers in the map. We then apply all overlapping markers to reads and compute a distance based on the lists of markers. While the markers will not give a basepair level of accuracy for distance, they do give a good relative distance.</p>
      <p id="Par50">Optical maps are constructed by applying a restriction enzyme on a DNA molecule. The restriction enzyme cuts or nicks the DNA at a specific DNA pattern called restriction site. The fragment lengths between the restriction sites are then measured and they form the optical map. An optical map of a genome thus is a sequence of fragment lengths. In principle, reads could be <italic>in silico</italic> digested to a sequence of fragment lengths and then mapped to the optical map. However, the reads are too short and the optical maps too sparse for this to work in practice [<xref ref-type="bibr" rid="CR12">12</xref>]. Thus to localize reads on an optical map, they need to be assembled first into draft contigs, which then can be mapped to the optical map. Since alignments of the reads to the contigs are known, the mapping of reads to the optical maps can be found via the contig mappings [<xref ref-type="bibr" rid="CR12">12</xref>]. The genomic distance between two reads can then be estimated based on their mappings to the optical map.</p>
      <p id="Par51">Once we have an estimate of the genetic distance function for the reads, we can use any hierarchical clustering method to produce a dendrogram for the reads. We can then cut the dendrogram at a suitable depth to produce the hierarchical tree for assembly. The memory and time required for naively constructing both the distance function and hierarchy are both quadratic over the number of reads. As such, a different approach is required in practice.</p>
    </sec>
    <sec id="Sec14">
      <title>Hierarchical tree</title>
      <p id="Par52">For genetic linkage maps, we can exploit the linear ordering of the bins to fill leaf nodes with a linear scan of the reads. We align all reads to the map-relative assembly and find all overlapping markers in the map for each read. Each of the markers belongs to a bin of the genetic linkage map, and so the bins of the markers overlapping the alignment of a read are associated with that read. Alternatively, if the genetic linkage map is sparse and all read alignments do not overlap any markers, we can find the closest marker for the alignment of each read and define the bins associated with a read as the bins of the set of markers that are roughly the same distance away from the alignment of the read as the closest marker.</p>
      <p id="Par53">We then sort the reads based on their associated bins and make a linear scan through the sorted read set. We add entire bins to the current preliminary leaf node until a minimum number of reads is reached and then move on to fill the next preliminary leaf. The sorting can be done by radix sorting and thus the whole process of constructing the hierarchical tree in this way only takes linear time and is far more practical than constructing a genomic distance function and building the hierarchical tree with hierarchical clustering.</p>
      <p id="Par54">In order to guarantee that leaf assemblies have sufficient overlap with each other, we additionally overlap all preliminary leaf nodes with their neighbors. We split each preliminary leaf node in half into two blocks and take the union of four consecutive blocks as a final overlapped leaf node. In other words, each leaf node now is the union of a preliminary leaf node, the left half of the right preliminary leaf, and the right half the left preliminary leaf. Figure <xref rid="Fig2" ref-type="fig">2</xref> illustrates the process. This also has the added benefit of making the coverage in the leaves higher and more even.<fig id="Fig2"><label>Fig. 2</label><caption><p>An example of how reads, shown as black horizontal lines, are assigned to leaf nodes. Reads have each been assigned to one or more preliminary leaf nodes (shown in black vertical lines). Each preliminary leaf gets further split in half (shown as dashed vertical lines). These halves are then merge back together with their neighbors (shown as grey rectangles) and assigned to the final leaf nodes in their order of appearance</p></caption><graphic xlink:href="12859_2022_4701_Fig2_HTML" id="MO2"/></fig></p>
    </sec>
    <sec id="Sec15">
      <title>Assembly</title>
      <p id="Par55">The first step in our assembly flow is assembling each leaf node in the hierarchy independently. Any assembly pipeline that is suitable for the read data is valid here. We use miniasm [<xref ref-type="bibr" rid="CR1">1</xref>] for assembly and Racon [<xref ref-type="bibr" rid="CR24">24</xref>] for polishing the leaf assemblies given the long read data we use.</p>
      <p id="Par56">After the leaf assemblies, we start going up the hierarchy. For each unassembled node in the tree, we take its (up to) two children and find all overlaps between the contigs produced in the child nodes, build an overlap graph, and find an assembly path. This process looks deceptively similar to a regular assembly flow that we use in the leaves. However, not only are the input sequences very long and error corrected, we also expect there to be a very small number of input sequences. As most modern assembly pipelines have to be optimized for as large number of input sequences as possible, they are required to be more conservative in terms of time per sequence.</p>
      <p id="Par57">For our assembly flow in internal nodes, we use minimap2 [<xref ref-type="bibr" rid="CR26">26</xref>] to find all pair-wise overlaps and filter out self-loops, short overlaps (&lt; 10 kbp), and contained overlaps. We then build our overlap graph from the remaining overlaps. To correctly handle the double strandedness of the genome, we use the following undirected graph to simulate a bidirected overlap graph. Each contig <italic>u</italic> in the graph is represented by two vertices, <inline-formula id="IEq7"><alternatives><tex-math id="M13">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$u_s$$\end{document}</tex-math><mml:math id="M14"><mml:msub><mml:mi>u</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq7.gif"/></alternatives></inline-formula> and <inline-formula id="IEq8"><alternatives><tex-math id="M15">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$u_e$$\end{document}</tex-math><mml:math id="M16"><mml:msub><mml:mi>u</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq8.gif"/></alternatives></inline-formula>, which represent the start of the contig and the end of the contig, respectively, and a contig edge <inline-formula id="IEq9"><alternatives><tex-math id="M17">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(u_s,u_e)$$\end{document}</tex-math><mml:math id="M18"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq9.gif"/></alternatives></inline-formula>. For each overlap between two contigs, <italic>u</italic> and <italic>v</italic>, we add an overlap edge as follows:<list list-type="bullet"><list-item><p id="Par58">If the suffix of <italic>u</italic> overlaps with the prefix of <italic>v</italic>, we add the edge <inline-formula id="IEq10"><alternatives><tex-math id="M19">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(u_e,v_s)$$\end{document}</tex-math><mml:math id="M20"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq10.gif"/></alternatives></inline-formula>.</p></list-item><list-item><p id="Par59">If the suffix of <italic>u</italic> overlaps with the prefix of the reverse complement of <italic>v</italic>, we add the edge <inline-formula id="IEq11"><alternatives><tex-math id="M21">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(u_e,v_e)$$\end{document}</tex-math><mml:math id="M22"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq11.gif"/></alternatives></inline-formula>.</p></list-item><list-item><p id="Par60">If the suffix of the reverse complement of <italic>u</italic> overlaps with the prefix of <italic>v</italic>, we add the edge <inline-formula id="IEq12"><alternatives><tex-math id="M23">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(u_s,v_s)$$\end{document}</tex-math><mml:math id="M24"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq12.gif"/></alternatives></inline-formula>.</p></list-item><list-item><p id="Par61">If the suffix of the reverse complement of <italic>u</italic> overlaps with the prefix of the reverse complement of <italic>v</italic>, we add the edge <inline-formula id="IEq13"><alternatives><tex-math id="M25">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(u_s,v_e)$$\end{document}</tex-math><mml:math id="M26"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq13.gif"/></alternatives></inline-formula>.</p></list-item></list>An example of a bidirected overlap graph is shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>.<fig id="Fig3"><label>Fig. 3</label><caption><p>A bidirected overlap graph corresponding to overlaps between contigs <italic>a</italic>, <italic>b</italic>, and <italic>c</italic>. The contig edges are shown in gray and the overlap edges in black. An assembly path through the graph alternates betweem contig edges and overlap edges. In this graph the path <inline-formula id="IEq14"><alternatives><tex-math id="M27">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${a_s,a_e,b_s,b_e,c_e,c_s}$$\end{document}</tex-math><mml:math id="M28"><mml:mrow><mml:msub><mml:mi>a</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>a</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>b</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>b</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq14.gif"/></alternatives></inline-formula> is an assembly path</p></caption><graphic xlink:href="12859_2022_4701_Fig3_HTML" id="MO3"/></fig></p>
      <p id="Par62">Longer super-contigs can now be read from this graph as paths where contig and overlap edges alternate. If we traverse a contig edge in the direction <inline-formula id="IEq15"><alternatives><tex-math id="M29">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(u_s\rightarrow u_e)$$\end{document}</tex-math><mml:math id="M30"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo stretchy="false">→</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq15.gif"/></alternatives></inline-formula>, the contig is added to the supercontig in forward orientation, and if we traverse a contig edge in the direction <inline-formula id="IEq16"><alternatives><tex-math id="M31">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(u_e\rightarrow u_s)$$\end{document}</tex-math><mml:math id="M32"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mo stretchy="false">→</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>s</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><inline-graphic xlink:href="12859_2022_4701_Article_IEq16.gif"/></alternatives></inline-formula>, the contig is added to the super-contig in reverse complementary orientation. We start from the node in the graph with the lowest number of edges and first traverse the contig edge. Then we choose the edge from the node corresponding to the largest overlap between the contigs and continue traversing contig and overlap edges alternatingly until there is no overlap edge to follow. We repeat this until all maximal super-contigs are found.</p>
      <p id="Par63">As the reads get separated into their own trees, no overlaps are observed on pairs of reads that get mistakenly identified as being in different chromosome in the final assembly. To attempt to combat this issue, we perform one final assembly step using the super-contigs from the root nodes of each tree in the hierarchy. This assembly step can, and by default does, use stronger parameters such as requiring longer overlaps and longer sequences.</p>
    </sec>
    <sec id="Sec16">
      <title>Evaluation of assemblies</title>
      <p id="Par64">We use QUAST [<xref ref-type="bibr" rid="CR22">22</xref>] and BUSCO [<xref ref-type="bibr" rid="CR23">23</xref>] to evaluate the correctness of the produced assemblies. Here we explain the metrics used in the experiments in detail.</p>
      <p id="Par65">QUAST computes several metrics based solely on the set of contigs. When given a reference genome, it aligns the contigs against the reference genome using Minimap2 [<xref ref-type="bibr" rid="CR26">26</xref>] and evaluates the correctness of the assembly based on the alignments. Additionally, a set of reads can be provided to QUAST and then it maps the reads to the assembly using BWA [<xref ref-type="bibr" rid="CR27">27</xref>] and reports statistics based on the read mappings. In particular, we report the following statistics for data sets with a reference genome:<list list-type="bullet"><list-item><p id="Par66"><bold># of contigs:</bold> The number of contigs in the assembly.</p></list-item><list-item><p id="Par67"><bold>NGA50:</bold> NG50 is the shortest contig length such that half of the genome is covered by contigs of length at least the NG50 size. When computing NGA50, the contigs are first aligned to the reference genome and then broken at each position where a misassembly occurs. NGA50 is then the NG50 value of this broken set of contigs.</p></list-item><list-item><p id="Par68"><bold>Genome fraction:</bold> The percentage of bases in the reference genome that are covered by at least one alignment of a contig to the reference genome. Contigs from repetitive regions are allowed to align to several positions in the reference genome.</p></list-item><list-item><p id="Par69"><bold>Misassemblies:</bold> The number of positions in the contigs such that the sequence to the left of the positions and the sequence to the right of the position align 1 kbp away from each other or the two alignments of the two sequences overlap by at least 1 kbp or they align to different strands or chromosomes.</p></list-item><list-item><p id="Par70"><bold>Reads mapped:</bold> The percentage of reads mapping to the assembly.</p></list-item></list>On the <italic>P. pungitius</italic> data set, where a reference genome is not available, we cannot compute NGA50, genome fraction, and the number of misassemblies. In addition to the number of contigs and reads mapped, we then report<list list-type="bullet"><list-item><p id="Par71"><bold>N50:</bold> The shortest contig length such that half of the assembly is covered by contigs of length at least the N50 size.</p></list-item><list-item><p id="Par72"><bold>Total length:</bold> The total length of the contigs in the assembly.</p></list-item></list>We use BUSCO [<xref ref-type="bibr" rid="CR23">23</xref>] to further evaluate the completeness of assemblies. This is especially important for the <italic>P. pungitius</italic> data set which lacks a good quality reference genome and thus genome fraction cannot be computed for the <italic>P. pungitius</italic> assemblies. However, we provide the BUSCO completeness score for assemblies on all data sets to facilitate comparisons across the data sets. BUSCO evaluation is based on universal single-copy orthologs which are genes expected to be present across different species. For further accuracy, BUSCO comes with tailored gene sets for different clades. Thus we used the Nematoda, Brassicales, Actinopterygii, and primates gene sets for the BUSCO evaluation of <italic>C. elegans</italic>, <italic>A. thaliana</italic>, <italic>P. pungitius</italic>, and <italic>H. sapiens</italic>, respectively. For each assembly, we report the BUSCO completeness score which is the percentage of the universal single copy orthologs that were found in the assembly in one or more copies.</p>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec17">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2022_4701_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1.</bold>Figure S1: The <italic>k</italic>-mer spectrum of the <italic>P. pungitius</italic> Illumina reads (a) and the copy number spectrum plots of the <italic>P. pungitius</italic> assemblies produced by miniasm, Kermit, and HGGA. The copy number spectrum plots divide the <italic>k</italic>-mersinto subsets according to their copy number in the assembly. For each subset, the spectrum is then plotted according to the abundancies of the <italic>k</italic>-mers in the read set.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>HGGA</term>
        <def>
          <p id="Par4">Hierarchical Guided Genome Assembler</p>
        </def>
      </def-item>
      <def-item>
        <term>SNV</term>
        <def>
          <p id="Par5">Single nucleotide variation</p>
        </def>
      </def-item>
      <def-item>
        <term>GB</term>
        <def>
          <p id="Par6">Gigabytes</p>
        </def>
      </def-item>
      <def-item>
        <term>MB</term>
        <def>
          <p id="Par7">Megabytes</p>
        </def>
      </def-item>
      <def-item>
        <term>bp</term>
        <def>
          <p id="Par8">Base pairs</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher's Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary Information</title>
    <p>The online version contains supplementary material available at 10.1186/s12859-022-04701-2.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors wish to thank the Finnish Grid and Cloud Infrastructure (FGCI, persistent identifier urn:nbn:fi:research-infras-2016072533) for supporting this project with computational and data storage resources.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Author contributions</title>
    <p>RW and LS designed the methods and the experiments. RW implemented the methods and performed the experiments. RW drafted the initial manuscript. RW and LS revised and edited the manuscript. Both authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>This work is supported by the Academy of Finland, via Grants 308030, and 335553 (LS). Academy of Finland had no role in the design of the study, or collection, analysis, and interpretation of data or in writing the manuscript.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>HGGA is freely available at <ext-link ext-link-type="uri" xlink:href="https://github.com/rikuu/hgga">https://github.com/rikuu/hgga</ext-link>. The <italic>C. elegans</italic> and <italic>A. thaliana</italic> reference genomes were downloaded from NCBI (<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/genome/41?genome_assembly_id=43998">https://www.ncbi.nlm.nih.gov/genome/41?genome_assembly_id=43998</ext-link>, accession codes NC_003279.8, NC_003280.10, NC_003281.10, NC_003282.8, NC_003283.11, NC_003284.9 for <italic>C. elegans</italic> and <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/genome/4?genome_assembly_id=454618">https://www.ncbi.nlm.nih.gov/genome/4?genome_assembly_id=454618</ext-link>, NC_003070.9, NC_003071.7, NC_003074.8, NC_003075.7, NC_003076.8 for <italic>A. thaliana</italic>). The <italic>P. pungitius</italic> draft genome was downloaded from NCBI (<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/assembly/GCA_902500615.3">https://www.ncbi.nlm.nih.gov/assembly/GCA_902500615.3</ext-link>, accession code GCA_902500615.3). The human T2T reference genome was downloaded from NCBI (<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/assembly/GCA_009914755.3">https://www.ncbi.nlm.nih.gov/assembly/GCA_009914755.3</ext-link>, GCA_009914755.3). The real <italic>C. elegans</italic> reads were downloaded from SRA (accession codes SRX4459462, SRX4459460, and SRX4459459) and the real <italic>C. elegans</italic> genetic linkage map is from [<xref ref-type="bibr" rid="CR18">18</xref>]. The <italic>A. thaliana</italic> reads are available at <ext-link ext-link-type="uri" xlink:href="https://downloads.pacbcloud.com/public/SequelData/ArabidopsisDemoData">https://downloads.pacbcloud.com/public/SequelData/ArabidopsisDemoData</ext-link>. The <italic>P. pungitius</italic> reads were downloaded from ERA (accession code ERR3569182) and the genetic linkage map is from [<xref ref-type="bibr" rid="CR20">20</xref>]. The Illumina reads of <italic>P. pungitius</italic> were also downloaded from ERA (accession codes ERR3618123 and ERR3618124). The <italic>H. sapiens</italic> reads were downloaded from SRA (accession codes SRX825577 and SRX825578). The script for generating simulated genetic linkage maps is included in Kermit at <ext-link ext-link-type="uri" xlink:href="https://github.com/rikuu/kermit">https://github.com/rikuu/kermit</ext-link>.</p>
  </notes>
  <notes>
    <title>Declarations</title>
    <notes id="FPar3">
      <title>Ethics approval and consent to participate</title>
      <p id="Par73">Not applicable.</p>
    </notes>
    <notes id="FPar5">
      <title>Consent for publication</title>
      <p id="Par74">Not applicable.</p>
    </notes>
    <notes id="FPar4" notes-type="COI-statement">
      <title>Competing interests</title>
      <p id="Par75">The authors declare that they have no competing interests.</p>
    </notes>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap and miniasm: fast mapping and de novo assembly for noisy long sequences</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>14</issue>
        <fpage>2103</fpage>
        <lpage>2110</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw152</pub-id>
        <pub-id pub-id-type="pmid">27153593</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kolmogorov</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Yuan</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>Assembly of long, error-prone reads using repeat graphs</article-title>
        <source>Nat Biotechnol</source>
        <year>2019</year>
        <volume>37</volume>
        <fpage>540</fpage>
        <lpage>546</lpage>
        <pub-id pub-id-type="doi">10.1038/s41587-019-0072-8</pub-id>
        <pub-id pub-id-type="pmid">30936562</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Koren</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Walenz</surname>
            <given-names>BP</given-names>
          </name>
          <name>
            <surname>Berlin</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Miller</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Bergman</surname>
            <given-names>NH</given-names>
          </name>
          <name>
            <surname>Phillippy</surname>
            <given-names>AM</given-names>
          </name>
        </person-group>
        <article-title>Canu: scalable and accurate long-read assembly via adaptive <italic>k</italic>-mer weighting and repeat separation</article-title>
        <source>Genome Res.</source>
        <year>2017</year>
        <volume>27</volume>
        <fpage>722</fpage>
        <lpage>36</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.215087.116</pub-id>
        <pub-id pub-id-type="pmid">28298431</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rice</surname>
            <given-names>ES</given-names>
          </name>
          <name>
            <surname>Green</surname>
            <given-names>RE</given-names>
          </name>
        </person-group>
        <article-title>New approaches for genome assembly and scaffolding</article-title>
        <source>Ann Rev Anim Biosci</source>
        <year>2019</year>
        <volume>7</volume>
        <issue>1</issue>
        <fpage>17</fpage>
        <lpage>40</lpage>
        <pub-id pub-id-type="doi">10.1146/annurev-animal-020518-115344</pub-id>
        <pub-id pub-id-type="pmid">30485757</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Catchen</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Amores</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Bassham</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Chromonomer: a tool set for repairing and enhancing assembled genomes through integration of genetic maps and conserved synteny</article-title>
        <source>G3</source>
        <year>2020</year>
        <volume>10</volume>
        <issue>11</issue>
        <fpage>4115</fpage>
        <lpage>4128</lpage>
        <pub-id pub-id-type="doi">10.1534/g3.120.401485</pub-id>
        <?supplied-pmid 32912931?>
        <pub-id pub-id-type="pmid">32912931</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rastas</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>Lep-Anchor: automated construction of linkage map anchored haploid genomes</article-title>
        <source>Bioinformatics</source>
        <year>2020</year>
        <volume>36</volume>
        <issue>8</issue>
        <fpage>2359</fpage>
        <lpage>64</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btz978</pub-id>
        <?supplied-pmid 31913460?>
        <pub-id pub-id-type="pmid">31913460</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shelton</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Coleman</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Herndon</surname>
            <given-names>N</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Tools and pipelines for BioNano data: molecule assembly pipeline and FASTA super scaffolding tool</article-title>
        <source>BMC Genomics</source>
        <year>2015</year>
        <volume>16</volume>
        <fpage>734</fpage>
        <pub-id pub-id-type="doi">10.1186/s12864-015-1911-8</pub-id>
        <pub-id pub-id-type="pmid">26416786</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Pan</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Lonardi</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>OMGS: Optical map-based genome scaffolding</article-title>
        <source>J Comput Biol</source>
        <year>2020</year>
        <volume>27</volume>
        <issue>4</issue>
        <fpage>519</fpage>
        <lpage>533</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2019.0310</pub-id>
        <pub-id pub-id-type="pmid">31794680</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lin</surname>
            <given-names>HC</given-names>
          </name>
          <name>
            <surname>Goldstein</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Mendelowitz</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Zhou</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Wetzel</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Schwartz</surname>
            <given-names>DC</given-names>
          </name>
          <name>
            <surname>Pop</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>AGORA: assembly guided by optical restriction alignment</article-title>
        <source>BMC Bioinform</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>189</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-13-189</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">Alipanahi B, Salmela L, Puglisi SJ, Muggli M, Boucher C. Disentangled long-read de Bruijn graphs via optical maps. In: Schwartz, R., Reinert, K. (eds.) 17th International Workshop on Algorithms in Bioinformatics, WABI 2017. Leibniz International Proceedings in Informatics, pp. 1–14. Schloss Dagstuhl - Leibniz-Zentrum für Informatik, Germany 2017. 10.4230/LIPIcs.WABI.2017.1.</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Walve</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Rastas</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Salmela</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Kermit: linkage map guided long read assembly</article-title>
        <source>Algorithms Mol Biol</source>
        <year>2019</year>
        <volume>14</volume>
        <fpage>8</fpage>
        <pub-id pub-id-type="doi">10.1186/s13015-019-0143-x</pub-id>
        <pub-id pub-id-type="pmid">30930956</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Leinonen</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Salmela</surname>
            <given-names>L</given-names>
          </name>
        </person-group>
        <article-title>Optical map guided genome assembly</article-title>
        <source>BMC Bioinformat</source>
        <year>2020</year>
        <volume>12</volume>
        <fpage>285</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-020-03623-1</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <article-title>The fragment assembly string graph</article-title>
        <source>Bioinformatics</source>
        <year>2005</year>
        <volume>21</volume>
        <fpage>79</fpage>
        <lpage>85</lpage>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schneeberger</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Ossowski</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Ott</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Reference-guided assembly of four diverse <italic>Arabidopsis thaliana</italic> genomes</article-title>
        <source>PNAS</source>
        <year>2011</year>
        <volume>108</volume>
        <issue>25</issue>
        <fpage>10249</fpage>
        <lpage>10254</lpage>
        <pub-id pub-id-type="doi">10.1073/pnas.1107739108</pub-id>
        <pub-id pub-id-type="pmid">21646520</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lischer</surname>
            <given-names>HEL</given-names>
          </name>
          <name>
            <surname>Shimizu</surname>
            <given-names>KK</given-names>
          </name>
        </person-group>
        <article-title>Reference-guided de novo assembly approach improves genome reconstruction for related species</article-title>
        <source>BMC Bioinform</source>
        <year>2017</year>
        <volume>18</volume>
        <fpage>474</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-017-1911-6</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bao</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Jiang</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Girke</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>AlignGraph: algorithm for secondary de novo genome assembly guided by closely related references</article-title>
        <source>Bioinformatics</source>
        <year>2014</year>
        <volume>30</volume>
        <issue>12</issue>
        <fpage>319</fpage>
        <lpage>328</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btu291</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Yoshimura</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Ichikawa</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Shoura</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Artiles</surname>
            <given-names>KL</given-names>
          </name>
          <name>
            <surname>Gabdank</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Wahba</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>CL</given-names>
          </name>
          <name>
            <surname>Edgley</surname>
            <given-names>ML</given-names>
          </name>
          <name>
            <surname>Rougvie</surname>
            <given-names>AE</given-names>
          </name>
          <name>
            <surname>Fire</surname>
            <given-names>AZ</given-names>
          </name>
          <name>
            <surname>Morishita</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Schwarz</surname>
            <given-names>EM</given-names>
          </name>
        </person-group>
        <article-title>Recompleting the caenorhabditis elegans genome</article-title>
        <source>Genome Res</source>
        <year>2019</year>
        <volume>29</volume>
        <fpage>1009</fpage>
        <lpage>22</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.244830.118</pub-id>
        <pub-id pub-id-type="pmid">31123080</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Noble</surname>
            <given-names>LM</given-names>
          </name>
          <name>
            <surname>Chelo</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Guzella</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Afonso</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Riccardi</surname>
            <given-names>DD</given-names>
          </name>
          <name>
            <surname>Ammerman</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Dayarian</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Carvalho</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Crist</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Pino-Querido</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Shraiman</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Rockman</surname>
            <given-names>MV</given-names>
          </name>
          <name>
            <surname>Teotónio</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Polygenicity and epistasis underlie fitness-proximal traits in the <italic>Caenorhabditis elegans</italic> multiparental experimental evolution (CeMEE) panel</article-title>
        <source>Genetics</source>
        <year>2017</year>
        <volume>207</volume>
        <issue>4</issue>
        <fpage>1663</fpage>
        <lpage>85</lpage>
        <pub-id pub-id-type="doi">10.1534/genetics.117.300406</pub-id>
        <?supplied-pmid 29066469?>
        <pub-id pub-id-type="pmid">29066469</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Varadharajan</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Rastas</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Löytynoja</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Matschiner</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Calboli</surname>
            <given-names>FCF</given-names>
          </name>
          <name>
            <surname>Guo</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Nederbragt</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Jakobsen</surname>
            <given-names>KS</given-names>
          </name>
          <name>
            <surname>Merilä</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>A high-quality assembly of the nine-spined stickleback (<italic>Pungitius pungitius</italic>) genome</article-title>
        <source>Genome Biol Evol</source>
        <year>2019</year>
        <volume>11</volume>
        <issue>11</issue>
        <fpage>3291</fpage>
        <lpage>308</lpage>
        <pub-id pub-id-type="doi">10.1093/gbe/evz240</pub-id>
        <?supplied-pmid 31687752?>
        <pub-id pub-id-type="pmid">31687752</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kivikoski</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Rastas</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Löytynoja</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Merilä</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Automated improvement of stickleback reference genome assemblies with lep-anchor software</article-title>
        <source>Mol Ecol Resour</source>
        <year>2021</year>
        <volume>21</volume>
        <issue>6</issue>
        <fpage>2166</fpage>
        <lpage>76</lpage>
        <pub-id pub-id-type="doi">10.1111/1755-0998.13404</pub-id>
        <?supplied-pmid 33955177?>
        <pub-id pub-id-type="pmid">33955177</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Stöcker</surname>
            <given-names>BK</given-names>
          </name>
          <name>
            <surname>Köster</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Rahmann</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>SimLoRD: simulation of long read data</article-title>
        <source>Bioinformatics</source>
        <year>2016</year>
        <volume>32</volume>
        <issue>17</issue>
        <fpage>2704</fpage>
        <lpage>6</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btw286</pub-id>
        <?supplied-pmid 27166244?>
        <pub-id pub-id-type="pmid">27166244</pub-id>
      </element-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Gurevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Saveliev</surname>
            <given-names>V</given-names>
          </name>
          <name>
            <surname>Vyahhi</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Tesler</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>QUAST: quality assessment tool for genome assemblies</article-title>
        <source>Bioinformatics</source>
        <year>2013</year>
        <volume>29</volume>
        <issue>8</issue>
        <fpage>1072</fpage>
        <lpage>1075</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btt086</pub-id>
        <pub-id pub-id-type="pmid">23422339</pub-id>
      </element-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Manni</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Berkeley</surname>
            <given-names>MR</given-names>
          </name>
          <name>
            <surname>Seppey</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Simão</surname>
            <given-names>FA</given-names>
          </name>
          <name>
            <surname>Zdobnov</surname>
            <given-names>EM</given-names>
          </name>
        </person-group>
        <article-title>BUSCO update: novel and streamlined workflows along with broader and deeper phylogenetic coverage for scoring of eukaryotic, prokaryotic, and viral genomes</article-title>
        <source>Mol Biol Evol</source>
        <year>2021</year>
        <volume>38</volume>
        <issue>10</issue>
        <fpage>4647</fpage>
        <lpage>4654</lpage>
        <pub-id pub-id-type="doi">10.1093/molbev/msab199</pub-id>
        <pub-id pub-id-type="pmid">34320186</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vaser</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Sovic</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Nagarajan</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Sikic</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate de novo genome assembly from long uncorrected reads</article-title>
        <source>Genome Res</source>
        <year>2017</year>
        <volume>27</volume>
        <fpage>737</fpage>
        <lpage>746</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.214270.116</pub-id>
        <pub-id pub-id-type="pmid">28100585</pub-id>
      </element-citation>
    </ref>
    <ref id="CR25">
      <label>25.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Fletcher</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Zhang</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Gil</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Han</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Cavanaugh</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Michelmore</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>AFLAP: assembly-free linkage analysis pipeline using k-mers from genome sequencing data</article-title>
        <source>Genome Biol</source>
        <year>2021</year>
        <volume>22</volume>
        <fpage>115</fpage>
        <pub-id pub-id-type="doi">10.1186/s13059-021-02326-x</pub-id>
        <pub-id pub-id-type="pmid">33883006</pub-id>
      </element-citation>
    </ref>
    <ref id="CR26">
      <label>26.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title>
        <source>Bioinformatics</source>
        <year>2018</year>
        <volume>34</volume>
        <issue>18</issue>
        <fpage>3094</fpage>
        <lpage>100</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bty191</pub-id>
        <?supplied-pmid 29750242?>
        <pub-id pub-id-type="pmid">29750242</pub-id>
      </element-citation>
    </ref>
    <ref id="CR27">
      <label>27.</label>
      <mixed-citation publication-type="other">Li H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM 2013. <ext-link ext-link-type="uri" xlink:href="http://arxiv.org/abs/1303.3997">arXiv:1303.3997</ext-link></mixed-citation>
    </ref>
  </ref-list>
</back>
