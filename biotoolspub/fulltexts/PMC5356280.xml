<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">5356280</article-id>
    <article-id pub-id-type="publisher-id">1580</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-017-1580-5</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>A fast and efficient python library for interfacing with the Biological Magnetic Resonance Data Bank</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Smelter</surname>
          <given-names>Andrey</given-names>
        </name>
        <address>
          <email>andrey.smelter@louisville.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Astra</surname>
          <given-names>Morgan</given-names>
        </name>
        <address>
          <email>givengravity@gmail.com</email>
        </address>
        <xref ref-type="aff" rid="Aff5">5</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Moseley</surname>
          <given-names>Hunter N. B.</given-names>
        </name>
        <address>
          <email>hunter.moseley@uky.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
        <xref ref-type="aff" rid="Aff4">4</xref>
        <xref ref-type="aff" rid="Aff5">5</xref>
        <xref ref-type="aff" rid="Aff6">6</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2113 1622</institution-id><institution-id institution-id-type="GRID">grid.266623.5</institution-id><institution>School of Interdisciplinary and Graduate Studies, </institution><institution>University of Louisville, </institution></institution-wrap>Louisville, KY 40292 USA </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2113 1622</institution-id><institution-id institution-id-type="GRID">grid.266623.5</institution-id><institution>Department of Computer Engineering and Computer Science, </institution><institution>University of Louisville, </institution></institution-wrap>Louisville, KY 40292 USA </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 8438</institution-id><institution-id institution-id-type="GRID">grid.266539.d</institution-id><institution>Department of Molecular and Cellular Biochemistry, </institution><institution>University of Kentucky, </institution></institution-wrap>Lexington, KY 40356 USA </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 8438</institution-id><institution-id institution-id-type="GRID">grid.266539.d</institution-id><institution>Markey Cancer Center, </institution><institution>University of Kentucky, </institution></institution-wrap>Lexington, KY 40356 USA </aff>
      <aff id="Aff5"><label>5</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 8438</institution-id><institution-id institution-id-type="GRID">grid.266539.d</institution-id><institution>Center for Environmental and Systems Biochemistry, </institution><institution>University of Kentucky, </institution></institution-wrap>Lexington, KY 40356 USA </aff>
      <aff id="Aff6"><label>6</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 8438</institution-id><institution-id institution-id-type="GRID">grid.266539.d</institution-id><institution>Institute for Biomedical Informatics, </institution><institution>University of Kentucky, </institution></institution-wrap>Lexington, KY 40356 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>17</day>
      <month>3</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>17</day>
      <month>3</month>
      <year>2017</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2017</year>
    </pub-date>
    <volume>18</volume>
    <elocation-id>175</elocation-id>
    <history>
      <date date-type="received">
        <day>14</day>
        <month>8</month>
        <year>2016</year>
      </date>
      <date date-type="accepted">
        <day>3</day>
        <month>3</month>
        <year>2017</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s). 2017</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>The Biological Magnetic Resonance Data Bank (BMRB) is a public repository of Nuclear Magnetic Resonance (NMR) spectroscopic data of biological macromolecules. It is an important resource for many researchers using NMR to study structural, biophysical, and biochemical properties of biological macromolecules. It is primarily maintained and accessed in a flat file ASCII format known as NMR-STAR. While the format is human readable, the size of most BMRB entries makes computer readability and explicit representation a practical requirement for almost any rigorous systematic analysis.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>To aid in the use of this public resource, we have developed a package called nmrstarlib in the popular open-source programming language Python. The nmrstarlib’s implementation is very efficient, both in design and execution. The library has facilities for reading and writing both NMR-STAR version 2.1 and 3.1 formatted files, parsing them into usable Python dictionary- and list-based data structures, making access and manipulation of the experimental data very natural within Python programs (i.e. “saveframe” and “loop” records represented as individual Python dictionary data structures). Another major advantage of this design is that data stored in original NMR-STAR can be easily converted into its equivalent JavaScript Object Notation (JSON) format, a lightweight data interchange format, facilitating data access and manipulation using Python and any other programming language that implements a JSON parser/generator (i.e., all popular programming languages). We have also developed tools to visualize assigned chemical shift values and to convert between NMR-STAR and JSONized NMR-STAR formatted files. Full API Reference Documentation, User Guide and Tutorial with code examples are also available.</p>
        <p>We have tested this new library on all current BMRB entries: 100% of all entries are parsed without any errors for both NMR-STAR version 2.1 and version 3.1 formatted files. We also compared our software to three currently available Python libraries for parsing NMR-STAR formatted files: PyStarLib, NMRPyStar, and PyNMRSTAR.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>The nmrstarlib package is a simple, fast, and efficient library for accessing data from the BMRB. The library provides an intuitive dictionary-based interface with which Python programs can read, edit, and write NMR-STAR formatted files and their equivalent JSONized NMR-STAR files. The nmrstarlib package can be used as a library for accessing and manipulating data stored in NMR-STAR files and as a command-line tool to convert from NMR-STAR file format into its equivalent JSON file format and vice versa, and to visualize chemical shift values. Furthermore, the nmrstarlib implementation provides a guide for effectively JSONizing other older scientific formats, improving the FAIRness of data in these formats.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s12859-017-1580-5) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Biological Magnetic Resonance Bank</kwd>
      <kwd>Nuclear magnetic resonance</kwd>
      <kwd>NMR-STAR</kwd>
      <kwd>JSON</kwd>
      <kwd>nmrstarlib</kwd>
      <kwd>Python</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000076</institution-id>
            <institution>Directorate for Biological Sciences</institution>
          </institution-wrap>
        </funding-source>
        <award-id>1252893</award-id>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2017</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1" sec-type="introduction">
    <title>Background</title>
    <p>The Biological Magnetic Resonance Data Bank (BMRB) is a free, publicly-accessible repository of data on peptides, proteins, and nucleic acids obtained through NMR Spectroscopy [<xref ref-type="bibr" rid="CR1">1</xref>], that is part of the worldwide Protein Databank (wwPDB) [<xref ref-type="bibr" rid="CR2">2</xref>]. It currently consists of more than 11,000 individual NMR-STAR file entries, containing a wide range of NMR spectral data, experimental details, and biochemical data collected from thousands of biological samples. The NMR-STAR format is based on the Self-defining Text Archival and Retrieving (STAR) flat file database format [<xref ref-type="bibr" rid="CR3">3</xref>], with some modifications specific to the BMRB. STAR provides a hierarchical dictionary structure for storing arbitrary data. In NMR-STAR, the format specifies top-level dictionaries called “saveframes”, which are used to categorize the data and meta-data about the experiment. Inside each saveframe is an arbitrarily number of key-value pairs and tables of records (loops). The key-value pairs store a single piece of information under a descriptive variable name. Each loop stores a table of records, each record containing a set of values representing individual fields in the record. There are currently two active versions of the BMRB: version 2.1 and version 3.1. While they both use the same NMR-STAR format at the most general level, the layout of the data in the two formats is different.</p>
    <p>Python is a free, open-source scripting language which runs on all major operating systems [<xref ref-type="bibr" rid="CR4">4</xref>, <xref ref-type="bibr" rid="CR5">5</xref>]. It is designed to facilitate the development and maintenance of simple, efficient, and readable code. Python has object-oriented programming facilities and includes several high-level data structure objects in its standard library. Among these are the dictionary, a data structure implemented via the dict class that stores data as a set of key-value pairs (specific mappings between keys and values). The OrderedDict class is identical to the dict class except that the order of inserted keys-value pairs is remembered. This is particularly useful for categorical data with sequential relationships. The dictionary data structure is the most straightforward mechanism for representing and using data from NMR-STAR files, which have a nested, mostly dictionary-like structure themselves. However, to our knowledge no NMR-STAR parsing library using this design exists. The newest major version of Python (version 3.0.0), was initially released on 2008-12-03, however many software libraries and utilities written in Python still use Python version 2.x exclusively. As Python version 3.1 brings many substantial improvements over Python 2.x (including the addition of the OrderedDict class, which was later back-ported to Python version 2.7 [<xref ref-type="bibr" rid="CR6">6</xref>]). As of Python version 3.5 OrderedDict is implemented in C which makes it much faster than the Python 2.7 implementation of OrderedDict. Moreover in Python 3.6, the dict data structure implementation becomes ordered by default and dict and OrderedDict are more efficient than in any previous versions of Python. While we provide support for Python 2.7 for use by legacy code, we believe that researchers will prefer libraries and tools written in latest version of Python in order to develop maintainable codebases, especially as Python version 2.x becomes less supported over time. Moreover, Python version 2.7 will no longer be maintained after Spring of 2020 [<xref ref-type="bibr" rid="CR7">7</xref>]. Two publically available Python libraries for parsing NMR-STAR format files PyStarLib [<xref ref-type="bibr" rid="CR8">8</xref>] and NMRPyStar [<xref ref-type="bibr" rid="CR9">9</xref>] both require Python version 2.7. PyNMRSTAR [<xref ref-type="bibr" rid="CR10">10</xref>] works with both major versions of Python (2.7 and 3.3+).</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p>The nmrstarlib package consists of several modules: nmrstarlib.py, bmrblex.py, converter.py, and csviewer.py (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>). The nmrstarlib module (Fig. <xref rid="Fig1" ref-type="fig">1c</xref>) provides the StarFile class, which implements a nested Python dictionary/list representation of a BMRB NMR-STAR file. Once a NMR-STAR formatted file is processed into a StarFile object, experimental data can be accessed directly from the StarFile object, using bracket accessors as with any regular Python dict object. The nmrstarlib module relies on the bmrblex module (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>) for processing of tokens. The bmrblex module provides the bmrblex generator – BMRB lexical analyzer (parser). We provide two versions of the bmrblex module: a pure Python version (bmrblex.py) and a Python + C extension (bmrblex.py, cbmrblex.c) for faster performance. The compiled C extensions are implemented in the Cython programming language [<xref ref-type="bibr" rid="CR11">11</xref>], which we will call the Cython implementaion. If the Cython implementation of bmrblex fails for any reason, the library will use the Python implementation, ensuring that the library always works.<fig id="Fig1"><label>Fig. 1</label><caption><p>Organization of the nmrstarlib package version 1.1.0. <bold>a</bold> UML package diagram of the nmrstarlib library; <bold>b</bold> UML class diagram of the bmrblex.py (bmrblex.pyx) module; <bold>c</bold> UML class diagram of the nmrstarlib.py module; <bold>d</bold> UML class diagram of the converter.py module; <bold>e</bold> UML class diagram of the csviewer.py module</p></caption><graphic xlink:href="12859_2017_1580_Fig1_HTML" id="MO1"/></fig>
</p>
    <p>The library creates an internal representation of the NMR-STAR format as a nesting of OrderedDict objects with the top-level object StarFile inheriting from the OrderedDict class (Fig. <xref rid="Fig1" ref-type="fig">1c</xref>). This allows the user to access data in its original NMR-STAR organization using familiar Python dictionary syntax. The library provides facilities to read data from NMR-STAR formatted files into an internal StarFile object, to access and make modifications to this StarFile object, and to save the resulting StarFile object as a new NMR-STAR formatted file. It is also possible to create NMR-STAR files from scratch using this library; however, this requires the user to adhere to the recommended layout for NMR-STAR formatted files by adding keys and values to the StarFile object in the appropriate order.</p>
    <p>The nmrstarlib module provides a memory-efficient read_files() generator function (Fig. <xref rid="Fig1" ref-type="fig">1c</xref>) that yields (emits) StarFile objects, one at a time for each file parsed. When reading an NMR-STAR formatted file (Fig. <xref rid="Fig2" ref-type="fig">2</xref>, Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>), the read_files() generator function first opens the file and passes a filehandle to the StarFile.read() method that reads the text into Python as a string and passes that string into the bmrblex object that then splits the text into tokens. As the bmrblex lexical analyzer keeps emitting valid tokens, the StarFile object is constructed sequentially. The StarFile object decides what type of token it is dealing with and chooses which internal method to call in order to construct itself, i.e. calls to StarFile._build_starfile(), Starfile._build_saveframe(), or StarFile._build_loop(). For example, Fig. <xref rid="Fig2" ref-type="fig">2</xref> shows the function call diagram during the StarFile object creation: the _build_saveframe() method is called 25 times and _build_loop() is called 37 times, meaning that the NMR-STAR file consists of 25 different saveframe categories and 37 loops. The total number of tokens processed is equal to 36,155 = 27 (from _build_starfile) + 786 (from _build_saveframe) + 35,342 (from _build_loop).<fig id="Fig2"><label>Fig. 2</label><caption><p>Diagram showing what function calls are made during the process of StarFile object creation</p></caption><graphic xlink:href="12859_2017_1580_Fig2_HTML" id="MO2"/></fig>
</p>
    <p>Each saveframe category is also an OrderedDict data structure that can be accessed by saveframe name as the key from the top-level StarFile object. Once a saveframe dictionary is constructed and populated with key-value pairs, it descends further into each loop and constructs a tuple of two lists: the first list corresponding to loop field keys (loop field names); the second list consists of OrderedDict objects corresponding to loop rows (loop records) in the original NMR-STAR file. By the end of parsing, a single nested dictionary/list structure in the form of a StarFile dictionary object (Fig. <xref rid="Fig3" ref-type="fig">3b</xref>) is constructed, emulating the structure of the original NMR-STAR formatted file (Fig. <xref rid="Fig3" ref-type="fig">3a</xref>). In addition, comments can be parsed and included as additional key-value pairs within the nested dictionary structure.<fig id="Fig3"><label>Fig. 3</label><caption><p>Internal StarFile object representation and correspondence to NMR-STAR format without comments: <bold>a</bold> An example of a NMR-STAR formatted file; <bold>b</bold> StarFile dictionary representation equivalent to the NMR-STAR formatted file and the JSONized version of the NMR-STAR file</p></caption><graphic xlink:href="12859_2017_1580_Fig3_HTML" id="MO3"/></fig>
</p>
    <p>The nmrstarlib module provides a GenericFilePath (Figs. <xref rid="Fig1" ref-type="fig">1c</xref> and <xref rid="Fig2" ref-type="fig">2</xref>) object that is used by the read_files() generator function in order to open NMR-STAR formatted files from many different sources: a single file on a local machine; a URL address of a single file; a directory of files on a local machine; an archive of files on a local machine; a URL address of an archive of files; or the BMRB id of a single file.</p>
    <p>To write from a StarFile object to an NMR-STAR formatted file, the library recursively crawls through the StarFile dictionary structure, formatting and printing each of the keys and corresponding values sequentially. This allows nmrstarlib to recall the sequential order of the original NMR-STAR formatted file, due to the stored ordering of key insertion from the underlying OrderedDict objects. Using Python’s json library, the entire StarFile dictionary structure can be saved as JSON (JavaScript Object Notation), which is an open, human-readable, lightweight data exchange format that is readable by most programming languages via optimized parsing libraries. This JSON conversion of StarFile objects greatly facilitated the implementation of the converter module which converts original NMR-STAR formatted files into their equivalent JSONized NMR-STAR files and vice versa. The converter module (Fig. <xref rid="Fig1" ref-type="fig">1d</xref>) consists of a single Converter class which can convert in both one-to-one (single file) and many-to-many (directory or archive of files) modes. See “The nmrstarlib API Reference” documentation of the converter module for the full list of available conversion options (Additional file <xref rid="MOESM3" ref-type="media">3</xref>).</p>
    <p>In order to simplify access to assigned chemical shift data, we created the csviewer module (Fig. <xref rid="Fig1" ref-type="fig">1e</xref>) that includes the CSViewer class that can access both the NMR-STAR version 2.1 and version 3.1 assigned chemical shifts loop and visualize (organize) chemical shift values by amino acid residue type, and save this visualization as an image file or a pdf document (Fig. <xref rid="Fig4" ref-type="fig">4</xref>). The csviewer module requires the graphviz Python library [<xref ref-type="bibr" rid="CR12">12</xref>] in order to create an output file. In addition to visualizing chemical shift values, the csviewer module provide code example for utilizing the nmrstarlib library.<fig id="Fig4"><label>Fig. 4</label><caption><p>Example of output file: chemical shifts organized by amino acid residue type produced by csviewer module</p></caption><graphic xlink:href="12859_2017_1580_Fig4_HTML" id="MO4"/></fig>
</p>
    <p>Overall, the nmrstarlib package can be used in two ways: 1) as a library for accessing and manipulating data stored in NMR-STAR formatted files, converting between NMR-STAR and its equivalent JSON format, and visualizing assigned chemical shift values; or 2) as a standalone command-line tool for converting files in bulk and visualizing assigned chemical shift values. We used the docopt Python library [<xref ref-type="bibr" rid="CR13">13</xref>] to create the nmrstarlib package command-line interface.</p>
  </sec>
  <sec id="Sec3">
    <title>Results</title>
    <sec id="Sec4">
      <title>Performance on NMR-STAR formatted files</title>
      <p>As part of nmrstarlib’s development process, we tested our library extensively against the entire BMRB (as of December 11, 2016) for both NMR-STAR version 2.1 and version 3.1 [<xref ref-type="bibr" rid="CR14">14</xref>]. To measure the performance speed of the nmrstarlib library, we used a simple program that accesses NMR-STAR files from local directory one file at a time, which then creates a StarFile object and records how much time in seconds it took to create the object. Table <xref rid="Tab1" ref-type="table">1</xref> shows that our library was able to read the entire BMRB for both NMR-STAR version 2.1 and version 3.1 without any errors. With the pure Python implementation, it took 1,110 s (~18.3 min) and 326 s (~5.4 min) to read NMR-STAR version 3.1 and NMR-STAR version 2.1, respectively. With the more efficient Cython implementation, it took 423 s (~7 min) and 320 s (~5.3 min) to read NMR-STAR version 3.1 and NMR-STAR version 2.1, respectively. We used the metric kilobytes per second (KB/sec), because files/sec would be a misleading metric due to widely varying files sizes in the BMRB and because read times scale almost linearly (Fig. <xref rid="Fig5" ref-type="fig">5</xref>) with file size. As such, we found that nmrstarlib’s average reading speed is 1,700 KB/sec (NMR-STAR 3.1) and 3,290 KB/sec (NMR-STAR 2.1) for the Python implementation and 4,421 KB/sec (NMR-STAR 3.1) and 3,351 KB/sec (NMR-STAR 2.1) for the Cython implementation on the hardware used for testing. The NMR-STAR 3.1 is more comprehensive than NMR-STAR 2.1 and usually represents more experimental information and details. This additional complexity is computationally harder to parse. However, for our Cython implementation average reading speed for NMR-STAR 3.1 was faster than for NMR-STAR 2.1 due to multiline text pre-processing discussed in more detail in the next section.<table-wrap id="Tab1"><label>Table 1</label><caption><p>The nmrstarlib library performance test against NMR-STAR formatted files using pure Python and Python with C extension and against JSONized NMR-STAR files using the standard Python library json parser and the UltraJSON (ujson) 3<sup>rd</sup> party library</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th/><th/><th>NMR-STAR 2.1</th><th>NMR-STAR 3.1</th><th>JSONized NMR-STAR 2.1</th><th>JSONized NMR-STAR 3.1</th></tr></thead><tbody><tr><td colspan="3">Number of files</td><td>11,270</td><td>11,244</td><td>11,270</td><td>11,244</td></tr><tr><td colspan="3">Total size of files, GB</td><td>1.1</td><td>1.8</td><td>4.6</td><td>22.0</td></tr><tr><td rowspan="2">Time, sec</td><td>Pure Python</td><td>json</td><td>326</td><td>1,100</td><td>30</td><td>130</td></tr><tr><td>Python with C extension</td><td><sup>a</sup>ujson</td><td>320</td><td>423</td><td>27</td><td>126</td></tr><tr><td rowspan="2">Average reading speed, KB/sec</td><td>Pure Python</td><td>json</td><td>3,290</td><td>1,700</td><td>158,549</td><td>176,479</td></tr><tr><td>Python with C extension</td><td><sup>a</sup>ujson</td><td>3,351</td><td>4,421</td><td>176,166</td><td>182,082</td></tr></tbody></table><table-wrap-foot><p><sup>a</sup>We added support for the ujson library for versions of Python starting with Python 3.6, because the ujson library does not provide methods to keep the dict data structure in order when parsing from JSON files; however, starting with Python 3.6, the dict data structure is ordered by default</p></table-wrap-foot></table-wrap>
<fig id="Fig5"><label>Fig. 5</label><caption><p>Graph showing the dependency of loading time into StarFile object from the size of file: <bold>a</bold> Loading times for NMR-STAR 3.1 formatted files; <bold>b</bold> Loading times for JSONized NMR-STAR 3.1 files</p></caption><graphic xlink:href="12859_2017_1580_Fig5_HTML" id="MO5"/></fig>
</p>
    </sec>
    <sec id="Sec5">
      <title>Performance on JSONized NMR-STAR files</title>
      <p>Next, we converted both NMR-STAR version 2.1 and version 3.1 files into their equivalent JSON format and performed speed tests again (Table <xref rid="Tab1" ref-type="table">1</xref>). We found that read times of both JSONized NMR-STAR version 2.1 and version 3.1 were significantly faster than read times of the original NMR-STAR formatted files: 130 s (~2.2 min) and 30 s (~0.5 min) for NMR-STAR version 3.1 and NMR-STAR version 2.1, respectively, for the entire BMRB data set. The average read speed was 176,479 KB/sec and 158,549 KB/sec for version 3.1 and version 2.1, respectively. Next, we tested performance using another compiled JSON parsing third-party library, UltraJSON (ujson) [<xref ref-type="bibr" rid="CR15">15</xref>]. We found that reading times and average reading speeds of JSONized NMR-STAR files were slightly faster than using the built-in json parser: 127 s (182,082 KB/sec) and 27 s (176,166 KB/sec) for version 3.1 and version 2.1 respectively (Table <xref rid="Tab1" ref-type="table">1</xref>). Table <xref rid="Tab2" ref-type="table">2</xref> shows how much time it took to convert the entire BMRB into its JSONized version and how much disk space it occupied as uncompressed directory and as compressed zip and tar archives. Compressed zip and tar formats represent the entire BMRB database in a single file and save disk space. In order to simplify access, our library provides facilities to directly read NMR-STAR files from zip and tar archives without the requirement to manually decompress and separate the archive into separate files first. Frequency polygons of loading times on Fig. <xref rid="Fig6" ref-type="fig">6</xref> show that the majority of NMR-STAR and JSONized NMR-STAR files can be loaded into StarFile object in less than 1 s per file and JSONized NMR-STAR files can be loaded much faster than the original NMR-STAR files. Figure <xref rid="Fig6" ref-type="fig">6a</xref> and <xref rid="Fig6" ref-type="fig">b</xref> show that the fastest reading times were for parsing JSONized NMR-STAR files using the ujson and json parsers. However on Fig. <xref rid="Fig6" ref-type="fig">6a</xref>, it is clear that the pure Python implementation outperformed the Cython implementation for some of the NMR-STAR 2.1 files (e.g. BMRB ID: 17192, 16692). This is because those files contain saveframe categories deposited as very large multiline blocks of text and the majority of time is spent to pre-process them, equivalent NMR-STAR 3.1 files have those saveframes properly formatted and do not require extra time to pre-process multiline text blocks. For NMR-STAR 3.1 formatted files (Fig. <xref rid="Fig6" ref-type="fig">6b</xref>), the Cython implementation outperformed pure Python implementation in all cases.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Converting NMR-STAR formatted files into their equivalent JSON format</p></caption><table frame="hsides" rules="groups"><thead><tr><th/><th colspan="2">Directory</th><th colspan="2">zip archive</th><th colspan="2">tar.gz archive</th><th colspan="2">tar.bz2 archive</th></tr></thead><tbody><tr><td>Format</td><td>NMR-STAR 2.1</td><td>NMR-STAR 3.1</td><td>NMR-STAR 2.1</td><td>NMR-STAR 3.1</td><td>NMR-STAR 2.1</td><td>NMR-STAR 3.1</td><td>NMR-STAR 2.1</td><td>NMR-STAR 3.1</td></tr><tr><td>Number of files</td><td>11,270</td><td>11,244</td><td>11,270</td><td>11,244</td><td>11,270</td><td>11,244</td><td>11,270</td><td>11,244</td></tr><tr><td>Time, min</td><td>8</td><td>20</td><td>9</td><td>22</td><td>12</td><td>27</td><td>15</td><td>68</td></tr><tr><td>Total size, MB</td><td>4,756</td><td>22,942</td><td>230</td><td>470</td><td>200</td><td>409</td><td>131</td><td>222</td></tr></tbody></table></table-wrap>
<fig id="Fig6"><label>Fig. 6</label><caption><p>Frequency polygon of loading times for NMR-STAR files: <bold>a</bold> Comparison of loading times between NMR-STAR 2.1 and JSONized NMR-STAR 2.1; <bold>b</bold> Comparison of loading times between NMR-STAR 3.1 and JSONized NMR-STAR 3.1</p></caption><graphic xlink:href="12859_2017_1580_Fig6_HTML" id="MO6"/></fig>
</p>
    </sec>
    <sec id="Sec6">
      <title>Comparison to similar existing software</title>
      <p>Using the entire BMRB, we performed and compared speed performance tests between our nmrstarlib package and the three other publically available Python libraries for reading NMR-STAR formatted files: PyStarLib [<xref ref-type="bibr" rid="CR8">8</xref>], NMRPyStar [<xref ref-type="bibr" rid="CR9">9</xref>], and PyNMRSTAR [<xref ref-type="bibr" rid="CR10">10</xref>]. For each of these libraries, we wrote a simple Python program that loads a NMR-STAR formatted file from a directory, creates an object representation, and then reports how much time it took to process each file. Results of these comparisons are summarized in Table <xref rid="Tab3" ref-type="table">3</xref>. For the pure Python implementation, PyStarLib showed the fastest reading time: 239 s (~4 min) and 796 s (~13.3 min) for NMR-STAR version 2.1 and version 3.1 respectively, but it was not able to parse 0.43% (48 files) NMR-STAR version 2.1 and 4.08% (459 files) NMR-STAR version 3.1. All errors occurred inside a function that is responsible for processing multiline quoted text, which uses regular expressions to collapse multiline quoted text into a single token. The most probable cause for these errors is a regular expression that is not capable of handling all edge cases. Examples of failures include files where: i) multiline quoted text included a semicolon character inside the text; ii) multiline quoted text that is not followed by the new line character; and iii) multiline quoted text followed by a loop (see Additional files <xref rid="MOESM4" ref-type="media">4</xref>, <xref rid="MOESM5" ref-type="media">5</xref>, <xref rid="MOESM6" ref-type="media">6</xref>, and <xref rid="MOESM7" ref-type="media">7</xref> for list of failed files as of December 11, 2016 and particular fragments of files where the failure occurred for both NMR-STAR 2.1 and NMR-STAR 3.1 formatted files).<table-wrap id="Tab3"><label>Table 3</label><caption><p>Performance comparison of nmrstarlib to other Python libraries</p></caption><table frame="hsides" rules="groups"><thead><tr><th colspan="2"/><th>nmrstarlib</th><th>PyStarLib</th><th>NMRPyStar</th><th>PyNMRSTAR</th></tr></thead><tbody><tr><td colspan="6">Parsing NMR-STAR 2.1</td></tr><tr><td colspan="2"> Number of files</td><td>11,270</td><td>11,270</td><td>11,270</td><td>11,270</td></tr><tr><td rowspan="2"> Time, sec</td><td>Pure Python</td><td>326</td><td>239</td><td>N/A</td><td>547</td></tr><tr><td>Python with C Extension</td><td>320</td><td>N/A</td><td>N/A</td><td>144</td></tr><tr><td colspan="2"> Success rate, %</td><td>100</td><td>99.57</td><td>0</td><td>100</td></tr><tr><td colspan="6">Parsing NMR-STAR 3.1</td></tr><tr><td colspan="2"> Number of files</td><td>11,244</td><td>11,244</td><td>11,244</td><td>11,244</td></tr><tr><td rowspan="2"> Time, sec</td><td>Pure Python</td><td>1,100</td><td>796</td><td>56,569</td><td>2,354</td></tr><tr><td>Python with C Extension</td><td>423</td><td>N/A</td><td>N/A</td><td>538</td></tr><tr><td colspan="2"> Success rate, %</td><td>100</td><td>95.92</td><td>100</td><td>100</td></tr></tbody></table></table-wrap>
</p>
      <p>The pure Python implementation of the nmrstarlib package was the second fastest method 326 s (~5.4 min) and 1,110 s (~18.3 min) and, more importantly, parsed 100% of files for both NMR-STAR 2.1 and NMR-STAR 3.1, respectively. The NMRPyStar library showed the slowest results, taking 56,569 s (~15.7 h) to process NMR-STAR version 3.1 and was not able to read any of the NMR-STAR version 2.1 files (error status code was reported by the program during execution). Both the nmrstarlib and PyNMRSTAR provide Python + C extension implementations in order to speed up the tokenization process. The nmrstarlib performed faster than PyNMRSTAR on NMR-STAR 3.1 files: 423 s (~7 min) versus 538 s (~9 min). However, PyNMRSTAR was faster than nmrstarlib on NMR-STAR 2.1 files: 144 s (~2.4 min) versus 320 s (~5.3 min). Overall, the nmrstarlib (Python + C extension implementation) was the fastest method to read NMR-STAR 3.1 files, and PyNMRSTAR (Python + C extension implementation) was the fastest method to read NMR-STAR 2.1 files. However, when using the JSONized versions of NMR-STAR files with the nmrstarlib library, parsing speed can be further improved to 30 s for NMR-STAR 2.1 and 130 s for NMR-STAR 3.1 (see Table <xref rid="Tab1" ref-type="table">1</xref>).</p>
      <p>All tests were performed on a single workstation desktop computer with Intel(R) Core(TM) i7-4930 K CPU @ 3.40GHz processor, 64 GB memory, and a solid-state drive. The latest stable version of Python (Python 3.6.0) was used to compare libraries. Python version 2.7 was used for libraries that do not support the latest version of Python.</p>
    </sec>
  </sec>
  <sec id="Sec7">
    <title>Discussion</title>
    <sec id="Sec8">
      <title>The nmrstarlib interface</title>
      <p>To use nmrstarlib as a library, first import the library. Next, create a StarFile generator that will return StarFile instances one at a time from many different file sources: a local file, URL address of a file, directory, archive, BMRB id. Next, the StarFile object can be utilized like any built-in Python dict object. Table <xref rid="Tab4" ref-type="table">4</xref> shows common usage patterns for reading NMR-STAR files into StarFile objects, accessing and manipulating data using bracket accessors, and writing StarFile objects back to both NMR-STAR and JSONized NMR-STAR formats. For more detailed examples, see “The nmrstarlib Tutorial” documentation (Additional file <xref rid="MOESM3" ref-type="media">3</xref>).<table-wrap id="Tab4"><label>Table 4</label><caption><p>Common usage patterns for the nmrstarlib module</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Usage</th><th>Example</th></tr></thead><tbody><tr><td>Reading:</td><td>
sf_gen = nmrstarlib.read_files(‘path’)
<break/>
starfile = next(sf_gen)
</td></tr><tr><td>Access/Modification:</td><td>
starfile[‘saveframe’][‘key’]
<break/>
starfile[‘saveframe’][‘key’] = new_value
</td></tr><tr><td>Writing:</td><td>
starfile.write(fileobj, fileformat=‘nmrstar’)
<break/>
starfile.write(fileobj, fileformat=‘json’)
</td></tr></tbody></table></table-wrap>
</p>
      <p>The nmrstarlib command-line interface provides two commands: convert in order to convert between NMR-STAR format and its equivalent JSON format; the csview command for quick access to assigned chemical shift data of a single StarFile, organizing chemical shifts by amino acid residue type. Table <xref rid="Tab5" ref-type="table">5</xref> shows common usage examples for the convert and csview commands. For a full list of available conversion options and more detailed examples see “The nmrstarlib API Reference” and “The nmrstarlib Tutorial” documentation. Figure <xref rid="Fig4" ref-type="fig">4</xref> shows example output of the csview command.<table-wrap id="Tab5"><label>Table 5</label><caption><p>The nmrstarlib library command-line interface</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Command</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>
convert
</td><td>Convert between NMR-STAR and JSON formats</td><td>
$ python3 -m nmrstarlib convert bmr18569.str 18569.json \
<break/>
--from_format=nmrstar --to_format=json
<break/>
 $ python3 -m nmrstarlib convert 18569.json bmr18569.str \
<break/>
--from_format=json --to_format=nmrstar
</td></tr><tr><td>
csview
</td><td>View assigned chemical shifts</td><td>
$ python3 -m nmrstarlib csview 18569 \
<break/>
--csview_outfile=18569_cs_all
<break/>
--csview_format=png
<break/>
 $ python3 -m nmrstarlib csview 18569 \
<break/>
--aminoacids=GLU,THR --atoms=CA,CB,CG,CG2 \
<break/>
--csview_outfile=18569_cs_GLU_THR_CA_CB_CG_CG2 \
<break/>
--csview_format=png
</td></tr></tbody></table></table-wrap>
</p>
      <p>We also have developed the “User Guide”, “The nmrstarlib Tutorial” and “The nmrstarlib API Reference” documentation that is available as a PDF file (Additional file <xref rid="MOESM3" ref-type="media">3</xref>) and up-to-date online documentation (Table <xref rid="Tab6" ref-type="table">6</xref>).<table-wrap id="Tab6"><label>Table 6</label><caption><p>Comparison of nmrstarlib to other Python libraries</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Feature</th><th>nmrstarlib</th><th>PyStarLib</th><th>NMRPyStar</th><th>PyNMRSTAR</th></tr></thead><tbody><tr><td>Read NMR-STAR 2.1</td><td>Yes</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>Read NMR-STAR 3.1</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Supported Python version</td><td>2.7, 3.4+</td><td>2.7</td><td>2.7</td><td>2.6, 2.7, 3.3+</td></tr><tr><td>API Reference documentation</td><td>Yes</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>Tutorial documentation</td><td>Yes</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>PDF of documentation</td><td>Yes</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>User Guide documentation</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>Up to date online documentation</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr><tr><td>Open Source</td><td>Yes<break/>(GitHub)</td><td>Yes<break/>(SourceForge)</td><td>Yes<break/>(GitHub)</td><td>Yes<break/>(GitHub)</td></tr></tbody></table></table-wrap>
</p>
    </sec>
    <sec id="Sec9">
      <title>Advantages of using nmrstarlib and JSONized NMR-STAR version</title>
      <p>One of the main advantages of our library is that it provides a one-to-one mapping between each of the following representations of BMRB entries: NMR-STAR format, internal Python OrderedDict- and list-based objects, and JSONized NMR-STAR format. This makes the library more Python-idiomatic, providing a very intuitive programming interface for accessing and manipulating NMR data. Another benefit of our nmrstarlib package is that the bmrblex lexical analyser module is written in a generic fashion, making it easy to adapt for parsing data from other STAR-related formats, for example, the Crystallographic Information File (CIF) and its closely related macromolecular CIF (mmCIF) format.</p>
      <p>JSON is an open, programming language independent, human-readable, data exchange standard that represents data objects in a nested dictionary/list ASCII format. JSON is one of the most common formats for asynchronous browser/server communication as an alternative to XML (Extensible Markup Language). We selected the JSON object representation, because it has a smaller overhead compared to common XML object representations, making it faster to parse and more human-readable when formatted for this purpose. But more importantly, it facilitates a one-to-one mapping with both nested Python data structures and BMRB’s nested data representations of their entries. While XML is more flexible, it is not easily represented by a nesting of standard Python data structures that would produce an intuitive programming interface. Also, JSONization of the original NMR-STAR files provides several advantages: i) much faster reading times (see Table <xref rid="Tab1" ref-type="table">1</xref>) and ii) makes the data stored in BMRB entries easily accessible to other programming languages that have JSON parsers, i.e. all modern programming languages, scripting as well as compiled, without requiring to write a specific parser for the specialized NMR-STAR format. Figures <xref rid="Fig7" ref-type="fig">7</xref>, <xref rid="Fig8" ref-type="fig">8</xref>, and <xref rid="Fig9" ref-type="fig">9</xref> show code examples for accessing data from JSONized NMR-STAR files using R with the jsonlite library [<xref ref-type="bibr" rid="CR16">16</xref>], JavaScript with the jQuery library [<xref ref-type="bibr" rid="CR17">17</xref>], and C++ with the RapidJSON library [<xref ref-type="bibr" rid="CR18">18</xref>] (Additional file <xref rid="MOESM8" ref-type="media">8</xref> provides output of C++ example after compilation and execution), respectively.<fig id="Fig7"><label>Fig. 7</label><caption><p>Code example showing how to access data from JSONized NMR-STAR files using R programming language</p></caption><graphic xlink:href="12859_2017_1580_Fig7_HTML" id="MO7"/></fig>
<fig id="Fig8"><label>Fig. 8</label><caption><p>Code example showing how to access data from JSONized NMR-STAR files using JavaScript programming language</p></caption><graphic xlink:href="12859_2017_1580_Fig8_HTML" id="MO8"/></fig>
<fig id="Fig9"><label>Fig. 9</label><caption><p>Code example showing how to access data from JSONized NMR-STAR files using C++ programming language</p></caption><graphic xlink:href="12859_2017_1580_Fig9_HTML" id="MO9"/></fig>
</p>
      <p>But one disadvantage of using JSON format is that it is more verbose in comparison to the original NMR-STAR format. As a result, uncompressed JSONized NMR-STAR files occupy more disk space (Table <xref rid="Tab2" ref-type="table">2</xref>). However, the nmrstarlib library offers the ability to read NMR-STAR files in both uncompressed (directory of files) and compressed (zip and tar archives) forms, making storage and access of JSONized NMR-STAR files very efficient.</p>
    </sec>
  </sec>
  <sec id="Sec10">
    <title>Conclusions</title>
    <p>The nmrstarlib package is a useful Python library, providing classes and other facilities for parsing, accessing, and manipulating data stored in NMR-STAR and JSONized NMR-STAR formats. Also, nmrstarlib provides a simple command-line interface that can convert from the NMR-STAR file format into its equivalent JSON file format and vice versa, as well as accessing and visualizing assigned chemical shift values. The library has an easy-to-use, idiomatic dictionary-based interface, usable in programs written in Python. The library also has extensive documentation including the “User Guide”, “The nmrstarlib Tutorial”, and “The nmrstarlib API Reference”. Furthermore, the easy conversion into the JSONized NMR-STAR format facilitates utilization of BMRB entries by programs in any programming language with a JSON parser. This same basic approach can be used to quickly JSONize other older text-based scientific data formats, making the underlying scientific data easily accessible in a wide variety of programming languages. As demonstrated in this study, many available JSON parsers are highly optimized and typically much more efficient than specialized parsers for scientific data formats. Thus, JSONization of older scientific data formats provides easy steps for reaching Interoperability and Reusability goals of FAIR guiding principles [<xref ref-type="bibr" rid="CR19">19</xref>].</p>
  </sec>
</body>
<back>
  <app-group>
    <app id="App1">
      <sec id="Sec11">
        <title>Additional files</title>
        <p>
          <media position="anchor" xlink:href="12859_2017_1580_MOESM1_ESM.png" id="MOESM1">
            <label>Additional file 1:</label>
            <caption>
              <p>Function call diagram of nmrstarlib. (PNG 1167 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12859_2017_1580_MOESM2_ESM.txt" id="MOESM2">
            <label>Additional file 2:</label>
            <caption>
              <p>Profile of nmrstarlib execution. (TXT 27 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12859_2017_1580_MOESM3_ESM.pdf" id="MOESM3">
            <label>Additional file 3:</label>
            <caption>
              <p>Documentation for nmrstarlib. (PDF 256 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12859_2017_1580_MOESM4_ESM.json" id="MOESM4">
            <label>Additional file 4:</label>
            <caption>
              <p>List of failed NMR-STAR 2.1 files for PyStarLib. (JSON 917 bytes)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12859_2017_1580_MOESM5_ESM.json" id="MOESM5">
            <label>Additional file 5:</label>
            <caption>
              <p>List of failed NMR-STAR 3.1 files for PyStarLib. (JSON 8 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12859_2017_1580_MOESM6_ESM.txt" id="MOESM6">
            <label>Additional file 6:</label>
            <caption>
              <p>Fragments of failed NMR-STAR 2.1 files for PyStarLib. (TXT 16 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12859_2017_1580_MOESM7_ESM.txt" id="MOESM7">
            <label>Additional file 7:</label>
            <caption>
              <p>Fragments of failed NMR-STAR 3.1 files for PyStarLib. (TXT 149 kb)</p>
            </caption>
          </media>
          <media position="anchor" xlink:href="12859_2017_1580_MOESM8_ESM.txt" id="MOESM8">
            <label>Additional file 8:</label>
            <caption>
              <p>Output of C++ example from Fig. <xref rid="Fig9" ref-type="fig">9</xref>. (TXT 1 kb)</p>
            </caption>
          </media>
        </p>
      </sec>
    </app>
  </app-group>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>NMR</term>
        <def>
          <p>Nuclear magnetic resonance</p>
        </def>
      </def-item>
      <def-item>
        <term>BMRB</term>
        <def>
          <p>Biological Magnetic Resonance Data Bank</p>
        </def>
      </def-item>
      <def-item>
        <term>STAR</term>
        <def>
          <p>Self-defining text archival and retrieving</p>
        </def>
      </def-item>
      <def-item>
        <term>JSON</term>
        <def>
          <p>JavaScript Object Notation</p>
        </def>
      </def-item>
      <def-item>
        <term>XML</term>
        <def>
          <p>Extensible markup language</p>
        </def>
      </def-item>
      <def-item>
        <term>UML</term>
        <def>
          <p>Unified modeling language</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <ack>
    <title>Acknowledgements</title>
    <p>We want to acknowledge the constant work and effect that the BMRB staff have done over the years to maintain and expand the BMRB public repository of NMR data.</p>
    <sec id="FPar1">
      <title>Funding</title>
      <p>This work was supported by National Science Foundation grant NSF 1252893 (Hunter N.B. Moseley); however, they played no role in the design or conclusions of this study.</p>
    </sec>
    <sec id="FPar2">
      <title>Availability of data and materials</title>
      <p>The nmrstarlib package is available at <ext-link ext-link-type="uri" xlink:href="http://software.cesb.uky.edu/">http://software.cesb.uky.edu</ext-link>, at GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/MoseleyBioinformaticsLab/nmrstarlib">https://github.com/MoseleyBioinformaticsLab/nmrstarlib</ext-link>) and at PyPI (<ext-link ext-link-type="uri" xlink:href="https://pypi.python.org/pypi/nmrstarlib">https://pypi.python.org/pypi/nmrstarlib</ext-link>) under the MIT license. Project documentation is available online at ReadTheDocs (<ext-link ext-link-type="uri" xlink:href="http://nmrstarlib.readthedocs.io/">http://nmrstarlib.readthedocs.io/</ext-link>) and also as a pdf file (Additional file <xref rid="MOESM3" ref-type="media">3</xref>). Profiling of nmrstarlib package (Additional file <xref rid="MOESM2" ref-type="media">2</xref>) and full function call diagram (Additional file <xref rid="MOESM1" ref-type="media">1</xref>) are also available.</p>
      <p>Requirements: Python 2.7, 3.4+, docopt Python library for command-line interface functionality, graphviz Python library for chemical shift visualization functionality.</p>
      <p>All NMR-STAR datasets analyzed in this manuscript are available from the Biological Magnetic Resonance Bank at <ext-link ext-link-type="uri" xlink:href="http://www.bmrb.wisc.edu/">http://www.bmrb.wisc.edu/</ext-link>.</p>
    </sec>
    <sec id="FPar3">
      <title>Authors’ contributions</title>
      <p>AS, MA, and HNBM worked together on the design of the library and its API. AS and MA implemented the library. HNBM helped troubleshoot implementation issues. AS created library documentation. AS tested the library and compared performance to other libraries. AS and HNBM wrote the manuscript. All authors have read and approved the manuscript.</p>
    </sec>
    <sec id="FPar4">
      <title>Competing interests</title>
      <p>The authors declare that they have no competing interests.</p>
    </sec>
    <sec id="FPar5">
      <title>Consent for publication</title>
      <p>Not applicable.</p>
    </sec>
    <sec id="FPar6">
      <title>Ethics approval and consent to participate</title>
      <p>Not applicable.</p>
    </sec>
    <sec id="FPar7">
      <title>Publisher’s note</title>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </sec>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <mixed-citation publication-type="other">Ulrich EL, Akutsu H, Doreleijers JF, Harano Y, Ioannidis YE, Lin J, Livny M, Mading S, Maziuk D, Miller Z, Nakatani E, Schulte CF, Tolmie DE, Kent Wenger R, Yao H, Markley JL. BioMagResBank. Nucleic Acids Res. 2008;36 Suppl 1:D402–8.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <mixed-citation publication-type="other">Berman H, Henrick K, Nakamura H, Markley JL. The worldwide Protein Data Bank (wwPDB): Ensuring a single, uniform archive of PDB data. Nucleic Acids Res. 2007;35 Suppl 1:D301–3.</mixed-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hall</surname>
            <given-names>SR</given-names>
          </name>
        </person-group>
        <article-title>The STAR file: a new format for electronic data transfer and archiving</article-title>
        <source>J Chem Inf Model</source>
        <year>1991</year>
        <volume>31</volume>
        <issue>2</issue>
        <fpage>326</fpage>
        <lpage>33</lpage>
        <pub-id pub-id-type="doi">10.1021/ci00002a020</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <mixed-citation publication-type="other">Van Rossum G, Drake FL Jr. The Python Language Reference. Technical report, Python Software Foundation; 2014.</mixed-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Van Rossum</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Drake</surname>
            <given-names>FL</given-names>
          </name>
        </person-group>
        <source>The Python Library Reference</source>
        <year>2010</year>
        <fpage>1</fpage>
        <lpage>1144</lpage>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <mixed-citation publication-type="other">Ronacher A, Hettinger R. PEP 372—Adding an ordered dictionary to collections. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="https://www.python.org/dev/peps/pep-0372/">https://www.python.org/dev/peps/pep-0372/</ext-link>. Accessed June 2008.</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <mixed-citation publication-type="other">Python 2.7 Countdown. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="https://pythonclock.org/">https://pythonclock.org/</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <mixed-citation publication-type="other">Doreleijers J. PyStarLib. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="https://sourceforge.net/projects/pystarlib/">https://sourceforge.net/projects/pystarlib/</ext-link>. Accessed Oct 2014.</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">Fenwick M. NMRPyStar. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/mattfenwick/NMRPyStar">https://github.com/mattfenwick/NMRPyStar</ext-link>. Accessed Dec 2014.</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">Wedell J. PyNMRSTAR. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/uwbmrb/PyNMRSTAR">https://github.com/uwbmrb/PyNMRSTAR</ext-link>. Accessed Mar 2017.</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Behnel</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bradshaw</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Citro</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Dalcin</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Seljebotn</surname>
            <given-names>DS</given-names>
          </name>
          <name>
            <surname>Smith</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Cython: The best of both worlds</article-title>
        <source>Comput Sci Eng</source>
        <year>2011</year>
        <volume>13</volume>
        <issue>2</issue>
        <fpage>31</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1109/MCSE.2010.118</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <mixed-citation publication-type="other">graphviz Python library. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="http://graphviz.readthedocs.io/en/latest/index.html">http://graphviz.readthedocs.io/en/latest/index.html</ext-link>. Accessed 2017.</mixed-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <mixed-citation publication-type="other">docopt Python Library for creating command-line interfaces. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="http://docopt.readthedocs.io/en/latest/">http://docopt.readthedocs.io/en/latest/</ext-link>. Accessed Apr 2016.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <mixed-citation publication-type="other">Biological Magnetic Resonance Bank. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="http://www.bmrb.wisc.edu/">http://www.bmrb.wisc.edu/</ext-link>. Accessed Mar 2017.</mixed-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <mixed-citation publication-type="other">UltraJSON. UltraJSON is an ultra fast JSON encoder and decoder written in pure C with bindings for Python 2.5+ and 3. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="https://github.com/esnme/ultrajson">https://github.com/esnme/ultrajson</ext-link>. Accessed Feb 2017.</mixed-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <mixed-citation publication-type="other">Ooms J, Lang TD, Lloyd H. jsonlite: A Robust, High Performance JSON Parser and Generator for R. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="https://cran.r-project.org/web/packages/jsonlite/index.html">https://cran.r-project.org/web/packages/jsonlite/index.html</ext-link>. Accessed Feb 2017.</mixed-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">jQuery is a cross-platform JavaScript library. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="http://jquery.com/">http://jquery.com/</ext-link>. Accessed Jan 2017.</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <mixed-citation publication-type="other">Yip M. RapidJSON - A fast JSON parser/generator for C++ with both SAX/DOM style API. [Online]. Available: <ext-link ext-link-type="uri" xlink:href="http://rapidjson.org/">http://rapidjson.org/</ext-link>. Accessed Mar 2017.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Wilkinson</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Dumontier</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Aalbersberg</surname>
            <given-names>IJ</given-names>
          </name>
          <name>
            <surname>Appleton</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Axton</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Baak</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Blomberg</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Boiten</surname>
            <given-names>J-W</given-names>
          </name>
          <name>
            <surname>da Silva Santos</surname>
            <given-names>LB</given-names>
          </name>
          <name>
            <surname>Bourne</surname>
            <given-names>PE</given-names>
          </name>
          <name>
            <surname>Bouwman</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Brookes</surname>
            <given-names>AJ</given-names>
          </name>
          <name>
            <surname>Clark</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Crosas</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Dillo</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Dumon</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Edmunds</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Evelo</surname>
            <given-names>CT</given-names>
          </name>
          <name>
            <surname>Finkers</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Gonzalez-Beltran</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gray</surname>
            <given-names>AJG</given-names>
          </name>
          <name>
            <surname>Groth</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Goble</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Grethe</surname>
            <given-names>JS</given-names>
          </name>
          <name>
            <surname>Heringa</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>’t Hoen</surname>
            <given-names>P a</given-names>
          </name>
          <name>
            <surname>Hooft</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Kuhn</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Kok</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Kok</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Lusher</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Martone</surname>
            <given-names>ME</given-names>
          </name>
          <name>
            <surname>Mons</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Packer</surname>
            <given-names>AL</given-names>
          </name>
          <name>
            <surname>Persson</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Rocca-Serra</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Roos</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>van Schaik</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Sansone</surname>
            <given-names>S-A</given-names>
          </name>
          <name>
            <surname>Schultes</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Sengstag</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Slater</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Strawn</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Swertz</surname>
            <given-names>M a</given-names>
          </name>
          <name>
            <surname>Thompson</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>van der Lei</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>van Mulligen</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Velterop</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Waagmeester</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Wittenburg</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Wolstencroft</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Zhao</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Mons</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title>
        <source>Sci Data</source>
        <year>2016</year>
        <volume>3</volume>
        <fpage>160018</fpage>
        <pub-id pub-id-type="doi">10.1038/sdata.2016.18</pub-id>
        <?supplied-pmid 26978244?>
        <pub-id pub-id-type="pmid">26978244</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
