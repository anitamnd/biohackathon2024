<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.3 20070202//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName journalpublishing.dtd?>
<?SourceDTD.Version 2.3?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <?epub May-5-2010?>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Nucleic Acids Res</journal-id>
    <journal-id journal-id-type="iso-abbrev">Nucleic Acids Res</journal-id>
    <journal-id journal-id-type="publisher-id">nar</journal-id>
    <journal-id journal-id-type="hwp">nar</journal-id>
    <journal-title-group>
      <journal-title>Nucleic Acids Research</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">0305-1048</issn>
    <issn pub-type="epub">1362-4962</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2896144</article-id>
    <article-id pub-id-type="pmid">20444869</article-id>
    <article-id pub-id-type="doi">10.1093/nar/gkq311</article-id>
    <article-id pub-id-type="publisher-id">gkq311</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Articles</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>HexServer: an FFT-based protein docking server powered by graphics processors</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Macindoe</surname>
          <given-names>Gary</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>1</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Mavridis</surname>
          <given-names>Lazaros</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Venkatraman</surname>
          <given-names>Vishwesh</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Devignes</surname>
          <given-names>Marie-Dominique</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>3</sup>
        </xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Ritchie</surname>
          <given-names>David W.</given-names>
        </name>
        <xref ref-type="aff" rid="AFF1">
          <sup>2</sup>
        </xref>
        <xref ref-type="corresp" rid="COR1">*</xref>
      </contrib>
    </contrib-group>
    <aff id="AFF1"><sup>1</sup>Department of Computing Science, Lillybank Gardens, University of Glasgow, G12 8QQ Scotland, UK, <sup>2</sup>Orpailleur Team (INRIA) and <sup>3</sup>Orpailleur Team (CNRS), LORIA, 615 Jardin du Botanique, 54506 Vandoeuvre-lès-Nancy, France</aff>
    <author-notes>
      <corresp id="COR1">*To whom correspondence should be addressed. Tel: <phone>+33 3 83 59 30 45</phone>; Fax: <fax>+33 3 83 59 30 79</fax>; Email: <email>dave.ritchie@loria.fr</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>1</day>
      <month>7</month>
      <year>2010</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>5</day>
      <month>5</month>
      <year>2010</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>5</day>
      <month>5</month>
      <year>2010</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the
							<pub-date pub-type="epub"/>. -->
    <volume>38</volume>
    <issue>Web Server issue</issue>
    <fpage>W445</fpage>
    <lpage>W449</lpage>
    <history>
      <date date-type="received">
        <day>28</day>
        <month>1</month>
        <year>2010</year>
      </date>
      <date date-type="rev-recd">
        <day>25</day>
        <month>3</month>
        <year>2010</year>
      </date>
      <date date-type="accepted">
        <day>17</day>
        <month>4</month>
        <year>2010</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2010. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2010</copyright-year>
      <license license-type="creative-commons" xlink:href="http://creativecommons.org/licenses/by-nc/2.5">
        <license-p><!--CREATIVE COMMONS-->This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by-nc/2.5">http://creativecommons.org/licenses/by-nc/2.5</ext-link>), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <abstract>
      <p>HexServer (<ext-link ext-link-type="uri" xlink:href="http://hexserver.loria.fr/">http://hexserver.loria.fr/</ext-link>) is the first Fourier transform (FFT)-based protein docking server to be powered by graphics processors. Using two graphics processors simultaneously, a typical 6D docking run takes ∼15 s, which is up to two orders of magnitude faster than conventional FFT-based docking approaches using comparable resolution and scoring functions. The server requires two protein structures in PDB format to be uploaded, and it produces a ranked list of up to 1000 docking predictions. Knowledge of one or both protein binding sites may be used to focus and shorten the calculation when such information is available. The first 20 predictions may be accessed individually, and a single file of all predicted orientations may be downloaded as a compressed multi-model PDB file. The server is publicly available and does not require any registration or identification by the user.</p>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>INTRODUCTION</title>
    <p>Protein docking is the task of calculating the 3D structure of a protein complex from its unbound or model-built subunits. Although proteins are intrinsically flexible, many protein docking algorithms begin by assuming that the proteins are rigid and they use geometric hashing (<xref ref-type="bibr" rid="B1">1</xref>) or fast Fourier transform (FFT) correlation techniques (<xref ref-type="bibr" rid="B2">2</xref>) to find a relatively small number of putative docking orientations which may be refined and re-scored using more sophisticated techniques.</p>
    <p>In recent years, several protein docking programs have been made available as web servers. These range from the rapid PatchDock server (<xref ref-type="bibr" rid="B3">3</xref>), which is based on a rigid-body geometric hashing algorithm (<xref ref-type="bibr" rid="B4">4</xref>), to much more computationally intensive approaches incorporating models of flexibility such as RosettaDock (<xref ref-type="bibr" rid="B5">5</xref>) and Haddock (<xref ref-type="bibr" rid="B6">6</xref>). Several FFT-based docking programs have also been made available as web servers e.g. ClusPro (<xref ref-type="bibr" rid="B7">7</xref>), GRAMM-X (<xref ref-type="bibr" rid="B8">8</xref>) and ZDOCK (<xref ref-type="bibr" rid="B9">9</xref>). Like the geometric hashing approach, the FFT-based approaches assume that the proteins to be docked are rigid, but they sample densely all possible rigid-body orientations in the 6D search space. However, because most FFT-based approaches use 3D Cartesian grid representations of the proteins, they can only compute translational correlations, and these must be repeated over multiple rotational samples in order to cover the 6D search space. Thus, despite the rigid-body assumption, Cartesian grid-based FFT docking algorithms are inherently computationally expensive.</p>
    <p>In order to address the main limitations of the Cartesian FFT approaches, we developed the ‘Hex’ spherical polar Fourier (SPF) approach which uses rotational correlations (<xref ref-type="bibr" rid="B10">10</xref>), and which reduces execution times to a matter of minutes (<xref ref-type="bibr" rid="B11">11</xref>). Nonetheless, we recently adapted the Hex algorithm to obtain a further significant speed-up by exploiting the enormous computational power of modern graphics processor units (GPUs; in preparation) using the CUDA (Common Unified Device Architecture) development tools (<ext-link ext-link-type="uri" xlink:href="http://www.nvidia.com/object/cuda_home.htm">http://www.nvidia.com/object/cuda_home.htm</ext-link>). For typical Hex docking calculations, a single high-performance GPU can evaluate ∼170 million trial orientations/second. This corresponds to a speed-up of at least a factor of 45 compared to a contemporary central processor unit (CPU), and which is up to two orders of magnitude faster than conventional Cartesian grid-based FFT docking approaches. However, because high performance GPUs are relatively expensive, we have developed HexServer, a web interface for Hex, in order to make our GPU-accelerated docking approach widely and freely available.</p>
    <p>The Hex SPF algorithm has been validated in the CAPRI (Critical Assessment of PRedicted Interactions) blind docking experiment (<xref ref-type="bibr" rid="B12">12</xref>), and an acceptable rigid-body Hex prediction has often been found within the top 100 orientations in recent CAPRI scoring sections. Thus, HexServer provides a very fast and convenient way to generate high quality docking predictions for subsequent refinement.</p>
  </sec>
  <sec sec-type="materials|methods">
    <title>MATERIALS AND METHODS</title>
    <sec>
      <title>System architecture</title>
      <p>HexServer is implemented using a small number of web pages and shell scripts which communicate via a MySQL (<ext-link ext-link-type="uri" xlink:href="http://www.mysql.com/">http://www.mysql.com/</ext-link>) database. The computational part of the server consists of a 32-node cluster running the CentOS 5.2 operating system and using the OAR batch scheduling system (<ext-link ext-link-type="uri" xlink:href="http://oar.imag.fr/">http://oar.imag.fr/</ext-link>). Each node consists of two quad-core Intel Xeon 2.5 GHz CPUs, and eight of the nodes are equipped with two Nvidia Tesla C1060 GPUs. Hence, a total of 256 CPU cores and 16 GPUs are currently available on our server.</p>
      <p>The web interface is implemented using the PHP scripting language, through which the user's PDB files are uploaded and stored in a MySQL database along with the other parameters of the docking job. Each job is identified by a unique 13 digit job number. The web interface performs some basic sanity checks on the input data in order to highlight errors quickly and to avoid wasting processor time on the server. A Linux shell script running on the compute server periodically polls the databases for new jobs. When a new job is found, another shell script is generated and is submitted to the OAR batch queuing system. This script executes the Hex program and copies the results files back to the MySQL database when the job has finished. The submitting web page periodically polls the database for an indication that the job has completed, and the results may be accessed from a job-specific web link generated automatically using the job number. If the user has provided an e-mail address, he will be sent a mail message containing a link to the job's results page.</p>
      <p>HexServer does not require any kind of user registration or identification, and all results are accessible using only the 13 digit job number. All PDB coordinate files of each job are deleted from the system after 24 h, although other details of the job are stored for statistical purposes.</p>
    </sec>
    <sec>
      <title>Inputs</title>
      <p>HexServer has an easy-to-use form-based interface, through which users may upload a pair of protein structures in PDB format. Users may optionally provide an e-mail address for notification of the status of their jobs. <xref ref-type="fig" rid="F1">Figure 1</xref> shows the web interface for defining the parameters of a docking job. For a blind unconstrained 6D docking run, it is normally sufficient to use the default values for all parameters. If the proteins to be docked have large and opposite formal charges, or if electrostatic interactions are known to be important, it is often beneficial to request a shape plus electrostatic calculation. Otherwise, a shape-only correlation is recommended.
<fig id="F1" position="float"><label>Figure 1.</label><caption><p>Screenshots of the two dataentry web pages of the HexServer interface. (<bold>A</bold>) Top: the first web page is used to specify the PDB files to be uploaded, and the type of docking calculation to be performed. (<bold>B</bold>) Bottom: the second web page may be used to define optional interface residues and angular search ranges to focus the search around a known or hypothesized interface. By convention, the larger of the two proteins is called the ‘receptor’ and the smaller is called the ‘ligand,’ although Hex treats the two proteins equally. All input parameters are explained in further detail in the online Help page, and some typical protein domains are available from the ‘Examples’ page.</p></caption><graphic xlink:href="gkq311f1"/></fig></p>
      <p>As described previously (<xref ref-type="bibr" rid="B11">11</xref>), all Hex docking correlations use SPF shape–density representations to polynomial order <inline-formula><inline-graphic xlink:href="gkq311i1.jpg"/></inline-formula> in order to generate very rapidly a list of up to 25 000 candidate solutions. We find that the top 3000 orientations nearly always include some near-native orientations but a larger list is used to avoid pruning good candidates in exceptional cases. These candidate solutions are then re-scored using higher order shape-only or shape plus electro-static correlations (using e.g. polynomials to order <inline-formula><inline-graphic xlink:href="gkq311i2.jpg"/></inline-formula> or <inline-formula><inline-graphic xlink:href="gkq311i3.jpg"/></inline-formula>), as selected by the user. Requesting polynomial order <inline-formula><inline-graphic xlink:href="gkq311i4.jpg"/></inline-formula> (the default) gives relatively soft representations of each protein whereas order <inline-formula><inline-graphic xlink:href="gkq311i5.jpg"/></inline-formula> polynomials give somewhat sharper representations.</p>
      <p>If prior information is available about one or both binding sites, the user can request that the docking search will be focused around a selected interface residue on one or both docking partners. As illustrated in <xref ref-type="fig" rid="F1">Figure 1</xref>B, this is achieved by specifying one central residue from each protein to define an intermolecular axis, and by specifying two further residues to be placed on the intermolecular axis near the protein–protein interface. The user may then specify an angular search range (e.g. of 45°) for each protein with respect to the intermolecular axis in order to constrain the rotational search around the putative interface.</p>
    </sec>
    <sec>
      <title>Outputs</title>
      <p>Once a job is complete, the user is directed to a simple results page (<xref ref-type="fig" rid="F2">Figure 2</xref>) where he may download a ranked list of predicted complexes. Because HexServer aims to provide a relatively large number of putative complexes for re-scoring, the requested number of predictions is presented as a single compressed multi-structure PDB file in which each structure is identified using the standard PDB ‘MODEL’ and ‘ENDMDL’ keywords. This file may be requested in any of the ‘zip’, ‘gzip’ or ‘bzip2’ compression formats. The first 20 structures are also made available individually in uncompressed PDB format. Thus the user may quickly preview the predictions before downloading the large multi-structure results file.
<fig id="F2" position="float"><label>Figure 2.</label><caption><p>A screenshot of a results page generated by HexServer.</p></caption><graphic xlink:href="gkq311f2"/></fig></p>
    </sec>
  </sec>
  <sec>
    <title>RESULTS AND DISCUSSION</title>
    <sec>
      <title>Overall performance</title>
      <p>The HexServer web interface provides a simple and easy way to prepare protein–protein docking calculations using Hex. The computational backend provides public access to a powerful GPU-based cluster. The OAR batch queuing system ensures that only one docking job can execute at a time on each pair of GPUs, which maximizes job throughput and avoids contention for resources. On our system, a typical exhaustive 6D rigid-body docking search takes around 15 s when using two C1060 GPUs simultaneously. If knowledge of even just one interface residue from one or both proteins is available, it can be used very effectively to constrain the docking search around the known or supposed interface. This further reduces the overall docking time, and significantly improves the quality of the predicted complexes (<xref ref-type="bibr" rid="B11">11</xref>).</p>
    </sec>
    <sec>
      <title>Comparison with ZDOCK</title>
      <p>In order to illustrate the speed-up given by our GPU-accelerated approach over a conventional Cartesian grid-based FFT docking calculation, we docked the PDB structures given on the HexServer ‘Examples’ page (porcine trypsin and soybean trypsin inhibitor, PDB code 1AVX) using Hex 6.0, HexServer (which invokes Hex 6.0), ZDOCK 3.0.1 and the corresponding ZDOCK server (<ext-link ext-link-type="uri" xlink:href="http://zdock.bu.edu/">http://zdock.bu.edu/</ext-link>).</p>
      <p>It should be noted, however, that it is difficult to make an exact comparison due to the fundamental difference in how the search space is partitioned in the SPF (five rotations and one translation) and Cartesian (three rotations and three translations) coordinate systems, and because of other differences in the orientational sampling techniques used. It is also worth emphasizing that the speed of any FFT-based approach depends critically on the sampling resolution used: doubling the step size in each dimension will give a speed-up of <inline-formula><inline-graphic xlink:href="gkq311i6.jpg"/></inline-formula>, but using large step sizes entails a risk that good solutions will be missed. Hence, both Hex and ZDOCK employ a strategy of densely sampling the search space and then clustering solutions with similar orientations. For example, by default, both Hex and HexServer use 64 steps of 5.625° for rotational increments about the intermolecular axis, and they use icosahedral tessellations of the sphere of 812 vertices to give angular rotation samples of about 7.5 for the remaining angular degrees of freedom. Hence, the default sampling density in Hex (812×64=51 968 ligand rotations) corresponds quite closely to ZDOCK's ‘dense’ sampling mode (54 000 ligand rotational steps of about 6°). On the other hand, ZDOCK server does not offer dense sampling due to its high computational cost, and instead uses the default ZDOCK coarse sampling level of 15° (3600 ligand rotations). Furthermore, Hex and HexServer use translational steps of 0.8Å, which is somewhat finer than the 1.2Å grid spacing used in ZDOCK and ZDOCK server (<xref ref-type="bibr" rid="B9">9</xref>).</p>
      <p>It should also be noted that Hex and ZDOCK employ different scoring functions. For example, Hex calculates an excluded volume model of shape complementarity with an optional <italic>in vacuo</italic> electrostatic contribution (<xref ref-type="bibr" rid="B10">10</xref>), whereas ZDOCK uses a scoring function composed from shape, electrostatics and an atomic contact model of desolvation (<xref ref-type="bibr" rid="B9">9</xref>). Hence, the two programs will inevitably produce different lists of predictions, although the overall computational complexity of their scoring functions is broadly similar.</p>
      <p>Bearing the above observations in mind, <xref ref-type="table" rid="T1">Table 1</xref> shows that for dense sampling, using Hex with one high performance GPU is about 330 times faster than using ZDOCK on a single 2.5 GHz CPU core. Although 15° sampling is not publicly available in HexServer due to the risk of missing good solutions, performing such coarse sampling using two GPUs takes only around 3s, which is around 160 times faster than the corresponding calculation on the ZDOCK server. These figures justify our claim that using GPUs to accelerate Hex docking calculations can be up to two orders of magnitude faster than conventional FFT-based docking approaches when using comparable search resolutions and scoring functions.
<table-wrap id="T1" position="float"><label>Table 1.</label><caption><p>Timing comparisons of Hex and ZDOCK<xref ref-type="table-fn" rid="TF1"><sup>a</sup></xref></p></caption><table frame="hsides" rules="groups"><thead align="left"><tr><th rowspan="1" colspan="1">Mode<xref ref-type="table-fn" rid="TF2"><sup>b</sup></xref></th><th rowspan="1" colspan="1">Hex</th><th rowspan="1" colspan="1">Hex</th><th rowspan="1" colspan="1">ZDOCK</th><th rowspan="1" colspan="1">HexServer</th><th rowspan="1" colspan="1">ZDOCK server</th></tr><tr><th rowspan="1" colspan="1"/><th rowspan="1" colspan="1">(CPU<xref ref-type="table-fn" rid="TF3"><sup>c</sup></xref>)</th><th rowspan="1" colspan="1">(GPU<xref ref-type="table-fn" rid="TF4"><sup>d</sup></xref>)</th><th rowspan="1" colspan="1">(CPU<xref ref-type="table-fn" rid="TF5"><sup>c</sup></xref>)</th><th rowspan="1" colspan="1">(GPU<xref ref-type="table-fn" rid="TF6"><sup>e</sup></xref>)</th><th rowspan="1" colspan="1">(CPU<sup>f</sup>)</th></tr></thead><tbody align="left"><tr><td rowspan="1" colspan="1">dense</td><td rowspan="1" colspan="1">240</td><td rowspan="1" colspan="1">22</td><td rowspan="1" colspan="1">7255</td><td rowspan="1" colspan="1">15</td><td rowspan="1" colspan="1">–</td></tr><tr><td rowspan="1" colspan="1">coarse</td><td rowspan="1" colspan="1">52</td><td rowspan="1" colspan="1">5</td><td rowspan="1" colspan="1">500</td><td rowspan="1" colspan="1">3</td><td rowspan="1" colspan="1">900</td></tr></tbody></table><table-wrap-foot><fn id="TF1"><p><sup>a</sup>All times are given in seconds: the server timings exclude any networking delays or time spent waiting in a queue.</p></fn><fn id="TF2"><p><sup>b</sup>Here, a ‘coarse’ sampling mode corresponds to 15° angular steps (about 3600 ligand rotations), whereas ‘dense’ sampling corresponds to 6° angular steps (about 54 000 ligand rotations). Dense sampling is not available in ZDOCK server.</p></fn><fn id="TF3"><p><sup>c</sup>Using 3D FFTs on one 2.5 GHz Intel Xeon processor.</p></fn><fn id="TF4"><p><sup>d</sup>Using 1D Hex FFTs on one Nvidia C1060 processor.</p></fn><fn id="TF5"><p><sup>e</sup>Using 1D Hex FFTs on two Nvidia C1060 processors.</p></fn><fn id="TF6"><p><sup>f</sup>Using 3D FFTs on eight IBM 1.1 GHz p655 processors.</p></fn></table-wrap-foot></table-wrap></p>
    </sec>
    <sec>
      <title>Recommendations for use</title>
      <p>Although docking programs such as Hex and ZDOCK can often produce near-native orientations within the first few hundred predictions, it remains a significant challenge to identify which orientations are in fact the near-native ones. We therefore recommend that users should visualize docking predictions from HexServer using an interactive graphics tool such as Jmol (<ext-link ext-link-type="uri" xlink:href="http://jmol.sourceforge.net/download/">http://jmol.sourceforge.net/download/</ext-link>), VMD (<ext-link ext-link-type="uri" xlink:href="http://www.ks.uiuc.edu/Research/vmd/">http://www.ks.uiuc.edu/Research/vmd/</ext-link>) or indeed the stand-alone version of Hex itself (<ext-link ext-link-type="uri" xlink:href="http://hex.loria.fr/">http://hex.loria.fr/</ext-link>). If biological knowledge about the interaction is available, this should be used to colour-code known interaction residues to help assess each orientation. It is also recommended to consider refining selected orientations using short molecular dynamics runs or by submitting them to a flexible docking server such as RosettaDock (<xref ref-type="bibr" rid="B5">5</xref>) or Haddock (<xref ref-type="bibr" rid="B6">6</xref>).</p>
      <p>In principle, PDB files could be loaded into HexServer directly from the PDB repository (<ext-link ext-link-type="uri" xlink:href="http://www.rcsb.org">http://www.rcsb.org</ext-link>). However, we recommend that the user first download and examine the protein structures to be docked, because it is often necessary to delete unwanted domains and hetero groups before performing a docking calculation.</p>
      <p>It should be noted that Hex is designed for docking typical protein domains of up to around 150 amino acid residues. To dock proteins which are larger than this, it is recommended to perform a constrained angular search with respect to an explicitly specified initial orientation, as described above.</p>
      <p>In order to keep the web interface simple, many of the more advanced or specialized features in Hex are not available in HexServer. Hence, we encourage users both to experiment with HexServer and to download the Hex program. Binary executables are available for several versions of popular operating systems, of which an increasing number support CUDA-based GPUs.</p>
    </sec>
  </sec>
  <sec sec-type="conclusions">
    <title>CONCLUSION</title>
    <p>HexServer provides a convenient way to perform exhaustive GPU-accelerated FFT-based rigid-body docking predictions without requiring the user to invest in special hardware. Each blind 6D docking calculation takes only ∼15s on our server, and the results for each docking run are accessible for up to 24 h from a unique web page. Thus, users may quickly and easily obtain a list of high quality docking predictions for subsequent refinement and analysis.</p>
  </sec>
  <sec>
    <title>FUNDING</title>
    <p>Part of this work was funded by Agence Nationale de la Recherche (grant reference ANR-08-CEXC-017-01). The compute cluster is co-funded by INRIA and Region Lorraine. Funding for open acess charge: Agence Nationale de la Recherche.</p>
    <p><italic>Conflict of interest statement</italic>. None declared.</p>
  </sec>
</body>
<back>
  <ack>
    <title>ACKNOWLEDGEMENTS</title>
    <p>We thank Birama Ndiaye and Olivier Demengeon for assistance with configuring OAR and the compute cluster.</p>
  </ack>
  <ref-list>
    <title>REFERENCES</title>
    <ref id="B1">
      <label>1</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bachar</surname>
            <given-names>O</given-names>
          </name>
          <name>
            <surname>Fischer</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Nussinov</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Wolfson</surname>
            <given-names>HJ</given-names>
          </name>
        </person-group>
        <article-title>A computer vision based technique for 3D sequence-independent structural comparison of proteins</article-title>
        <source>Protein Eng.</source>
        <year>1993</year>
        <volume>6</volume>
        <fpage>279</fpage>
        <lpage>288</lpage>
        <pub-id pub-id-type="pmid">8506262</pub-id>
      </element-citation>
    </ref>
    <ref id="B2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Katchalski-Katzir</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Shariv</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Eisenstein</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Friesem</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Aflalo</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Vakser</surname>
            <given-names>IA</given-names>
          </name>
        </person-group>
        <article-title>Molecular surface recognition: determination of geometric fit between proteins and their ligands by correlation techniques</article-title>
        <source>Proc. Natl Acad. Sci. USA</source>
        <year>1992</year>
        <volume>89</volume>
        <fpage>2195</fpage>
        <lpage>2199</lpage>
        <pub-id pub-id-type="pmid">1549581</pub-id>
      </element-citation>
    </ref>
    <ref id="B3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Schneidman-Duhovny</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Inbar</surname>
            <given-names>Y</given-names>
          </name>
          <name>
            <surname>Nussinov</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Wolfson</surname>
            <given-names>HJ</given-names>
          </name>
        </person-group>
        <article-title>PatchDock and SymmDock: servers for rigid and symmetric docking</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2005</year>
        <volume>33</volume>
        <fpage>W363</fpage>
        <lpage>W367</lpage>
        <pub-id pub-id-type="pmid">15980490</pub-id>
      </element-citation>
    </ref>
    <ref id="B4">
      <label>4</label>
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Duhovny</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Nussinov</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Wolfson</surname>
            <given-names>HJ</given-names>
          </name>
        </person-group>
        <article-title>Efficient unbound docking of rigid molecules</article-title>
        <source>Proceedings of the 2nd Workshop on Algorithms in Bioinformatics (WABI), Lecture Notes in Computer Science 2452</source>
        <year>2002</year>
        <publisher-loc>Berlin</publisher-loc>
        <publisher-name>Springer</publisher-name>
        <fpage>185</fpage>
        <lpage>200</lpage>
      </element-citation>
    </ref>
    <ref id="B5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Lyskov</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Gray</surname>
            <given-names>JJ</given-names>
          </name>
        </person-group>
        <article-title>The RosettaDock server for local protein-protein docking</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2008</year>
        <volume>36</volume>
        <fpage>W233</fpage>
        <lpage>W238</lpage>
        <pub-id pub-id-type="pmid">18442991</pub-id>
      </element-citation>
    </ref>
    <ref id="B6">
      <label>6</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Dominguez</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Boelens</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Bonvin</surname>
            <given-names>A.M.JJ</given-names>
          </name>
        </person-group>
        <article-title>HADDOCK: a protein-protein docking approach based on biochemical or biophysical information</article-title>
        <source>J. Am. Chem. Soc.</source>
        <year>2003</year>
        <volume>125</volume>
        <fpage>1731</fpage>
        <lpage>1737</lpage>
        <pub-id pub-id-type="pmid">12580598</pub-id>
      </element-citation>
    </ref>
    <ref id="B7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Comeau</surname>
            <given-names>SR</given-names>
          </name>
          <name>
            <surname>Gatchell</surname>
            <given-names>DW</given-names>
          </name>
          <name>
            <surname>Vajda</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Camacho</surname>
            <given-names>CJ</given-names>
          </name>
        </person-group>
        <article-title>ClusPro: a fully automated algorithm for protein-protein docking</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2004</year>
        <volume>32</volume>
        <fpage>W96</fpage>
        <lpage>W99</lpage>
        <pub-id pub-id-type="pmid">15215358</pub-id>
      </element-citation>
    </ref>
    <ref id="B8">
      <label>8</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tovchigrechko</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Vakser</surname>
            <given-names>IA</given-names>
          </name>
        </person-group>
        <article-title>GRAMM-X public web server for protein-protein docking</article-title>
        <source>Nucleic Acids Res.</source>
        <year>2006</year>
        <volume>34</volume>
        <fpage>W310</fpage>
        <lpage>W314</lpage>
        <pub-id pub-id-type="pmid">16845016</pub-id>
      </element-citation>
    </ref>
    <ref id="B9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Weng</surname>
            <given-names>Z</given-names>
          </name>
        </person-group>
        <article-title>ZDOCK: an initial-stage protein-docking algorithm</article-title>
        <source>Proteins: Struct. Func. Bioinf.</source>
        <year>2003</year>
        <volume>52</volume>
        <fpage>80</fpage>
        <lpage>87</lpage>
      </element-citation>
    </ref>
    <ref id="B10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ritchie</surname>
            <given-names>DW</given-names>
          </name>
          <name>
            <surname>Kemp</surname>
            <given-names>G.JL</given-names>
          </name>
        </person-group>
        <article-title>Protein docking using spherical polar Fourier correlations</article-title>
        <source>Proteins: Struct. Func. Genet.</source>
        <year>2000</year>
        <volume>39</volume>
        <fpage>178</fpage>
        <lpage>194</lpage>
      </element-citation>
    </ref>
    <ref id="B11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ritchie</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Kozakov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Vajda</surname>
            <given-names>S</given-names>
          </name>
        </person-group>
        <article-title>Accelerating and focusing protein-protein docking correlations using multi-dimensional rotational FFT generating functions</article-title>
        <source>Bioinformatics</source>
        <year>2008</year>
        <volume>24</volume>
        <fpage>1865</fpage>
        <lpage>1873</lpage>
        <pub-id pub-id-type="pmid">18591193</pub-id>
      </element-citation>
    </ref>
    <ref id="B12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Méndez</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Leplae</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>De Maria</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Wodak</surname>
            <given-names>SJ</given-names>
          </name>
        </person-group>
        <article-title>Assessment of blind predictions of protein-protein interactions: current status of docking methods</article-title>
        <source>Proteins: Struct. Func. Genet.</source>
        <year>2003</year>
        <volume>52</volume>
        <fpage>51</fpage>
        <lpage>67</lpage>
      </element-citation>
    </ref>
  </ref-list>
</back>
