<?DTDIdentifier.IdentifierValue article.dtd?>
<?DTDIdentifier.IdentifierType system?>
<?SourceDTD.DTDName article.dtd?>
<?SourceDTD.Version 1.0?>
<?ConverterInfo.XSLTName bmc2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Proc</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Proc</journal-id>
    <journal-title-group>
      <journal-title>BMC Proceedings</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1753-6561</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">3504801</article-id>
    <article-id pub-id-type="publisher-id">1753-6561-6-S7-S4</article-id>
    <article-id pub-id-type="doi">10.1186/1753-6561-6-S7-S4</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Proceedings</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Effect of conformation sampling strategies in genetic algorithm for multiple protein docking</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" id="A1">
        <name>
          <surname>Esquivel-Rodríguez</surname>
          <given-names>Juan</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>jesquivel@purdue.edu</email>
      </contrib>
      <contrib contrib-type="author" corresp="yes" id="A2">
        <name>
          <surname>Kihara</surname>
          <given-names>Daisuke</given-names>
        </name>
        <xref ref-type="aff" rid="I2">2</xref>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>dkihara@purdue.edu</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Department of Computer Science, College of Science, Purdue University, West Lafayette, IN 47907, USA</aff>
    <aff id="I2"><label>2</label>Department of Biological Sciences, College of Science, Purdue University, West Lafayette, IN 47907, USA</aff>
    <pub-date pub-type="collection">
      <year>2012</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>13</day>
      <month>11</month>
      <year>2012</year>
    </pub-date>
    <volume>6</volume>
    <issue>Suppl 7</issue>
    <supplement>
      <named-content content-type="supplement-title">Proceedings of the Great Lakes Bioinformatics Conference 2012</named-content>
      <named-content content-type="supplement-editor">Laura Brown, Margit Burmeister and Elodie Ghedin</named-content>
    </supplement>
    <fpage>S4</fpage>
    <lpage>S4</lpage>
    <permissions>
      <copyright-statement>Copyright ©2012 Esquivel-Rodríguez and Kihara; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2012</copyright-year>
      <copyright-holder>Esquivel-Rodríguez and Kihara; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <license-p>This is an open access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="http://www.biomedcentral.com/1753-6561/6/S7/S4"/>
    <abstract>
      <sec>
        <title>Background</title>
        <p>Macromolecular protein complexes play important roles in a cell and their tertiary structure can help understand key biological processes of their functions. Multiple protein docking is a valuable computational tool for providing structure information of multimeric protein complexes. In a previous study we developed and implemented an algorithm for this purpose, named Multi-LZerD. This method represents a conformation of a multimeric protein complex as a graph, where nodes denote subunits and each edge connecting nodes denotes a pairwise docking conformation of the two subunits. Multi-LZerD employs a genetic algorithm to sample different topologies of the graph and pairwise transformations between subunits, seeking for the conformation of the optimal (lowest) energy. In this study we explore different configurations of the genetic algorithm, namely, the population size, whether to include a crossover operation, as well as the threshold for structural clustering, to find the optimal experimental setup.</p>
      </sec>
      <sec>
        <title>Methods</title>
        <p>Multi-LZerD was executed to predict the structures of three multimeric protein complexes, using different population sizes, clustering thresholds, and configurations of mutation and crossover. We analyzed the impact of varying these parameters on the computational time and the prediction accuracy.</p>
      </sec>
      <sec>
        <title>Results and conclusions</title>
        <p>Given that computational resources is a key for handling complexes with a large number of subunits and also for computing a large number of protein complexes in a genome-scale study, finding a proper setting for sampling the conformation space is of the utmost importance. Our results show that an excessive sampling of the conformational space by increasing the population size or by introducing the crossover operation is not necessary for improving accuracy for predicting structures of small complexes. The clustering is effective in reducing redundant pairwise predictions, which leads to successful identification of near-native conformations.</p>
      </sec>
    </abstract>
    <conference>
      <conf-date>15-17 May 2012</conf-date>
      <conf-name>Great Lakes Bioinformatics Conference 2012</conf-name>
      <conf-loc>Ann Arbor, MI, USA</conf-loc>
    </conference>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>The tertiary structure of proteins provides valuable information about the mechanisms of protein function, however, structures of multimeric protein complexes are often difficult to solve by experimental methods. Even in the cases that the structure of an entire complex has not been determined, the structure of the individual subunits are often available, either because they have been solved experimentally or computationally modeled. Multi-LZerD is a multiple protein docking protocol developed by our group [<xref ref-type="bibr" rid="B1">1</xref>-<xref ref-type="bibr" rid="B3">3</xref>], which takes structures of individual subunits and assembles them into complex models. The method was shown to be able to construct near-native structures both for bound and unbound docking cases. It was shown Multi-LZerD achieved overall better performance than a competitive method especially in unbound docking of multiple subunits [<xref ref-type="bibr" rid="B3">3</xref>].</p>
    <p>Multi-LZerD is composed of two main stages (Figure <xref ref-type="fig" rid="F1">1</xref>). First, we compute pairwise docking predictions between all pairs of subunits by mainly considering shape complementarity of the subunits [<xref ref-type="bibr" rid="B4">4</xref>]. In the second stage, we represent entire multimeric complex structures using graphs where nodes denote subunits and the edges specify a pairwise transformation between subunits, which are computed in the pairwise docking stage. At the beginning of the second stage, a configurable number of random graphs are created to explore different graph topologies. Pairwise transformations are randomly selected from the pool of pairwise docking solutions computed in the first stage. The population of graphs is iteratively improved in terms of a fitness function using a Genetic Algorithm (GA), by exploring different topologies and pairwise transformations for edges. The fitness function is a linear combination of physics-based and/or knowledge-based scoring terms including van der Waals potential, electrostatic potential, and a knowledge-based atom contact potential [<xref ref-type="bibr" rid="B3">3</xref>] (i.e. not just shape matching as used in the first stage). At each generation, models are clustered to remove redundancy in the population.</p>
    <fig id="F1" position="float">
      <label>Figure 1</label>
      <caption>
        <p><bold>Overview of Multi-LZerD and this experiment</bold>. Multi-LZerD builds a protein complex by assembling pairwise docking predictions computed by LZerD. For each pair 54,000 models will be generated. The pairwise predictions can be clustered using a RMSD cutoff value of 5 or 10 Å or used for assembly without clustering. Pairwise docking models are assembled using GA. We tested different settings of the GA runs, with/without crossover operation, and different population sizes. After the final generation of GA, models can be clustered and refined, which we did not perform in this work.</p>
      </caption>
      <graphic xlink:href="1753-6561-6-S7-S4-1"/>
    </fig>
    <p>As it is typical for stochastic evolutionary optimization approaches, the parameters used to execute the simulations affect the accuracy of the final results as well as the computational cost. In particular, we would like to optimize the number of random graphs used as the initial input and those kept at each GA generation (the population size) as well as the population variability given by the mutation and the crossover operators. Using these two operators increases the population size temporarily, before selecting the best fitted structures that are passed to the subsequent generation. The computation of a physics-oriented fitness function can have a significant cost if the population size is too large. Oppositely, if the population size is too small, it may require a large number of generations to find a near-native model. We also tested different pairwise docking clustering thresholds. The pairwise docking decoys for each pair of subunits are clustered based on the root mean square deviation (RMSD) of Cα atoms. The procedure implemented is based on the clustering ideas conceived in ClusPro [<xref ref-type="bibr" rid="B5">5</xref>]. Two complexes are considered to be neighbors if they are closer than a threshold value. Once the clusters are created, the decoy with the best shape-based score is selected out of each cluster as a representative structure. The other members in the clusters will be deleted.</p>
    <p>In this work, we analyzed the effect of the three parameters in the GA optimization in Multi-LZerD, namely, the population size, whether to use the crossover operation, and the threshold value in the structural clustering (Figure <xref ref-type="fig" rid="F1">1</xref>). The results suggest that an excessive sampling of the conformational space is not necessary in our multiple-docking procedure to find correct structure models.</p>
  </sec>
  <sec sec-type="methods">
    <title>Methods</title>
    <p>We assessed the effect of different GA parameters used in Multi-LZerD on the computational time and the accuracy. The original Multi-LZerD is configured as follows: Given a set of tertiary structures of subunits of a protein complex, the pairwise protein docking algorithm, LZerD [<xref ref-type="bibr" rid="B4">4</xref>], is run to produce 54,000 docking candidates (decoys). A conformation of a whole protein complex is uniquely defined by a spanning tree (graph) where each node is connected to at least another node by an edge. This is suitable for constructing a multiple docking complex from pairwise decoys because not all pairs of nodes need to be connected. An edge between a pair of subunits specifies one of 54,000 pairwise docking decoys. Starting with <italic>M </italic>spanning trees, with <italic>M </italic>being 200 in the original setting, various alternative conformations are generated by GA with mutation or crossover operations. The mutation deletes one of the spanning tree edges and then selects a new edge randomly to reconnect the graph. It is possible that the same edge is selected again. Then, for a newly selected edge, one of the pairwise docking decoys for the two subunits is randomly selected. The rest of the edges remain unaltered. The crossover takes two candidate structures in the current population and creates a new individual by combining edges from the two parents. It will first create an empty graph and randomly select edges from the parents until a spanning tree is created. The decoys are subject to clustering with a predefined threshold value of RMSD. Finally, <italic>M </italic>= 200 decoys with the best fitness scores are selected for the next generation. In the final generation, clustering will yield at most <italic>M </italic>= 200 decoys ranked by their fitness score as the final prediction.</p>
    <p>Two experiments were performed (Figure <xref ref-type="fig" rid="F1">1</xref>). The first experiment was to examine the effect of using the crossover operation together with the mutation operator in the GA. We executed Multi-LZerD in two different settings:</p>
    <p>1) Enable both mutation and crossover operations. Decoys of a population size of <italic>M </italic>(200) were subject to the application of the crossover operation, which was set to increase the population by 50% (i.e. 300). Then, the mutation operation is applied, which was configured to double the population size (i.e. 300 × 2 = 600). The 600 decoys were clustered and ranked by the fitness score, and the top 200 decoys were passed to the next iteration.</p>
    <p>2) Enable mutation and disable crossover. For a population of 200 decoys, the mutation operation increases it to 400, which were subject to the clustering and the selection by the fitness score.</p>
    <p>In both 1) and 2), the within-generation clustering was performed using a threshold value of 10 Å.</p>
    <p>The second experiment is to examine the effect of different population sizes, 200, 400, 600, and 800 at each GA generation. Obviously, increasing the population size is costly but at the same time near native models may be found at an earlier GA generation. In this experiment, only the mutation operation was used and the threshold of the within-generation clustering was set to 10 Å.</p>
    <p>We have also examined different clustering cutoffs for pairwise docking decoys computed by LZerD. Three pairwise clustering settings were tested, using either 5 Å or 10 Å Cα RMSD, or without using clustering (Figure <xref ref-type="fig" rid="F1">1</xref>). For the last setting, all 54,000 pairwise predictions generated by LZerD were used. The three clustering settings are tested in combination with the four different population sizes.</p>
  </sec>
  <sec sec-type="results">
    <title>Results</title>
    <p>The above experiments were performed on three protein complexes, BMP-2-BRIA ectodomain complex (PDB ID: <ext-link ext-link-type="pdb" xlink:href="1ES7">1ES7</ext-link>
), plant-type L-asparaginase (1K2X), and nerve growth factor/trka complex (1WWW). All three complexes consist of four chains. Figure <xref ref-type="fig" rid="F2">2</xref> shows the native structure of the three protein complexes superimposed with the best models obtained in the experiments.</p>
    <fig id="F2" position="float">
      <label>Figure 2</label>
      <caption>
        <p><bold>Best models obtained for each test case</bold>. The best model from all the experiments is shown for each of the three complexes. <bold>A</bold>, a 1.14 Å RMSD model for 1ES7; <bold>B</bold>, the best model for 1K2X, RMSD: 2.12 Å; <bold>C</bold>, a 2.48 Å RMSD model for 1WWW. The native structure is shown in green while the prediction is shown in pink.</p>
      </caption>
      <graphic xlink:href="1753-6561-6-S7-S4-2"/>
    </fig>
    <sec>
      <title>Impact of using the crossover operator</title>
      <p>Figure <xref ref-type="fig" rid="F3">3</xref> shows the progressive improvement of the RMSD of the best model at each GA generation using both crossover and mutation, as well as the mutation-only settings. In the case of 1ES7 (Figure <xref ref-type="fig" rid="F3">3A</xref>) and 1WWW (Figure <xref ref-type="fig" rid="F3">3C</xref>), both settings yielded near-native predictions (an RMSD of 2.5 Å or less to the native). For 1K2X (Figure <xref ref-type="fig" rid="F3">3B</xref>) the best RMSD obtained with crossover is 4.30 Å, while the run with mutation-only yielded a model with 8.21 Å.</p>
      <fig id="F3" position="float">
        <label>Figure 3</label>
        <caption>
          <p><bold>Improvement of RMSD of the best model along GA generations</bold>. For three protein complexes, A, 1ES7; B, 1K2X; C, 1WWW, GA was applied with and without crossover starting with a population size of 200. Black lines represent the GA runs where both crossover and mutation were applied, while gray lines show results of the mutation-only conformation search.</p>
        </caption>
        <graphic xlink:href="1753-6561-6-S7-S4-3"/>
      </fig>
      <p>In the case of 1ES7, the GA run with crossover generated a near native structure at an earlier generation of around 600. In contrast, the GA without crossover found a near native structure at around the 900<sup>th </sup>generation. Although the GA with crossover found the near-native structure earlier, the actual computational cost was similar because using the crossover increases the population size at each generation by 1.5 times, which increases the clustering cost by 1.5<sup>2 </sup>= 2.25 times, as we will discuss in the computational cost section. In the next case (Figure <xref ref-type="fig" rid="F3">3B</xref>), the GA run without crossover quickly found the structures between 6-8 Å RMSD, starting with 7.53 Å at the 308th generation. However, the GA with crossover found a better structure at the end around the 3000<sup>th </sup>generation. In the last example (Figure <xref ref-type="fig" rid="F3">3C</xref>), the GA with crossover identified a near native structure at a significantly earlier generation (136th) than without crossover, which yielded a near-native structure at the 2689th.</p>
      <p>Overall, the GA with crossover found a near-native structure at an earlier generation for two out of three cases. However, in one case (1ES7, Figure <xref ref-type="fig" rid="F3">3A</xref>) the actual computational cost for the GA with and without crossover was comparable.</p>
    </sec>
    <sec>
      <title>Impact of the population size and the clustering threshold</title>
      <p>Next, we tested four different population sizes (200, 400, 600, and 800) and three different pairwise clustering settings (10 Å, 5 Å, and not using the clustering step). Table <xref ref-type="table" rid="T1">1</xref> shows the summary of the best model (i.e. the model with the smallest RMSD) obtained by using GA runs for each setting. In addition to the RMSD of the best model, the rank of the fitness score, and the fnat, the fraction of native contacts [<xref ref-type="bibr" rid="B6">6</xref>], are also shown.</p>
      <table-wrap id="T1" position="float">
        <label>Table 1</label>
        <caption>
          <p>Summary of predictions using different population sizes and clustering thresholds</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <th/>
              <th/>
              <th align="center" colspan="3">No Pairwise Clusters</th>
              <th align="center" colspan="3">5Å Pairwise Clusters</th>
              <th align="center" colspan="3">10Å Pairwise Clusters</th>
            </tr>
            <tr>
              <th align="center">PDB</th>
              <th align="center">Population Size</th>
              <th align="center">RMSD (Å)<sup>1</sup></th>
              <th align="center">fnat<sup>2</sup></th>
              <th align="center">Rank</th>
              <th align="center">RMSD (Å)<sup>1</sup></th>
              <th align="center">fnat<sup>2</sup></th>
              <th align="center">Rank</th>
              <th align="center">RMSD (Å)<sup>1</sup></th>
              <th align="center">fnat<sup>2</sup></th>
              <th align="center">Rank</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="1ES7">1ES7</ext-link>
              </td>
              <td align="center">200</td>
              <td align="center">17.51</td>
              <td align="center">0.03</td>
              <td align="center">20</td>
              <td align="center">17.94</td>
              <td align="center">0.03</td>
              <td align="center">16</td>
              <td align="center">1.86</td>
              <td align="center">0.92</td>
              <td align="center">3</td>
            </tr>
            <tr>
              <td/>
              <td align="center">400</td>
              <td align="center">9.85</td>
              <td align="center">0.25</td>
              <td align="center">159</td>
              <td align="center">7.95</td>
              <td align="center">0.63</td>
              <td align="center">47</td>
              <td align="center">1.86</td>
              <td align="center">0.92</td>
              <td align="center">3</td>
            </tr>
            <tr>
              <td/>
              <td align="center">600</td>
              <td align="center">14.21</td>
              <td align="center">0.00</td>
              <td align="center">445</td>
              <td align="center">9.56</td>
              <td align="center">0.34</td>
              <td align="center">265</td>
              <td align="center">1.86</td>
              <td align="center">0.92</td>
              <td align="center">3</td>
            </tr>
            <tr>
              <td/>
              <td align="center">800</td>
              <td align="center">2.15</td>
              <td align="center">0.70</td>
              <td align="center">18</td>
              <td align="center">7.23</td>
              <td align="center">0.64</td>
              <td align="center">2</td>
              <td align="center">1.86</td>
              <td align="center">0.92</td>
              <td align="center">3</td>
            </tr>
            <tr>
              <td colspan="11">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="1K2X">1K2X</ext-link>
              </td>
              <td align="center">200</td>
              <td align="center">18.52</td>
              <td align="center">0.00</td>
              <td align="center">84</td>
              <td align="center">21.20</td>
              <td align="center">0.01</td>
              <td align="center">61</td>
              <td align="center">6.05</td>
              <td align="center">0.49</td>
              <td align="center">74</td>
            </tr>
            <tr>
              <td/>
              <td align="center">400</td>
              <td align="center">20.36</td>
              <td align="center">0.01</td>
              <td align="center">239</td>
              <td align="center">6.05</td>
              <td align="center">0.49</td>
              <td align="center">80</td>
              <td align="center">23.69</td>
              <td align="center">0.01</td>
              <td align="center">195</td>
            </tr>
            <tr>
              <td/>
              <td align="center">600</td>
              <td align="center">6.14</td>
              <td align="center">0.46</td>
              <td align="center">250</td>
              <td align="center">2.12</td>
              <td align="center">0.51</td>
              <td align="center">1</td>
              <td align="center">23.41</td>
              <td align="center">0.01</td>
              <td align="center">599</td>
            </tr>
            <tr>
              <td/>
              <td align="center">800</td>
              <td align="center">19.45</td>
              <td align="center">0.01</td>
              <td align="center">56</td>
              <td align="center">19.26</td>
              <td align="center">0.02</td>
              <td align="center">718</td>
              <td align="center">6.04</td>
              <td align="center">0.49</td>
              <td align="center">60</td>
            </tr>
            <tr>
              <td colspan="11">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="1WWW">1WWW</ext-link>
              </td>
              <td align="center">200</td>
              <td align="center">19.16</td>
              <td align="center">0.02</td>
              <td align="center">51</td>
              <td align="center">13.49</td>
              <td align="center">0.11</td>
              <td align="center">152</td>
              <td align="center">8.62</td>
              <td align="center">0.58</td>
              <td align="center">23</td>
            </tr>
            <tr>
              <td/>
              <td align="center">400</td>
              <td align="center">5.34</td>
              <td align="center">0.52</td>
              <td align="center">10</td>
              <td align="center">15.58</td>
              <td align="center">0.00</td>
              <td align="center">115</td>
              <td align="center">2.48</td>
              <td align="center">0.78</td>
              <td align="center">12</td>
            </tr>
            <tr>
              <td/>
              <td align="center">600</td>
              <td align="center">17.37</td>
              <td align="center">0.03</td>
              <td align="center">248</td>
              <td align="center">15.76</td>
              <td align="center">0.03</td>
              <td align="center">182</td>
              <td align="center">11.12</td>
              <td align="center">0.39</td>
              <td align="center">13</td>
            </tr>
            <tr>
              <td/>
              <td align="center">800</td>
              <td align="center">16.30</td>
              <td align="center">0.00</td>
              <td align="center">160</td>
              <td align="center">17.19</td>
              <td align="center">0.02</td>
              <td align="center">615</td>
              <td align="center">2.48</td>
              <td align="center">0.78</td>
              <td align="center">14</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>GA runs were carried out for 1000 generations. The crossover operation was not used.</p>
          <p><sup>1</sup>The Global C-α RMSD between the best prediction in the final population and the native structure, for each simulation.</p>
          <p><sup>2</sup>fnat is the fraction of correctly predicted interface residues.</p>
        </table-wrap-foot>
      </table-wrap>
      <p>The first observation is that results using the 10 Å cutoff showed the best RMSD models in ten out of twelve cases as compared with results without clustering and with the 5 Å cutoff. Comparing the no clustering and the 5 Å cutoff, the latter performed better than the former for seven out of twelve cases. The results indicate a better result can be expected in general when a larger cutoff is used for clustering for reducing redundancy to efficiently explore the conformational space.</p>
      <p>As for the population size, we did not observe a clear trend relative to the best RMSD. Thus, we temporarily conclude that the population size of 200 or 400 is sufficient for the multiple docking by Multi-LZerD for the complexes of four chains. Although we did not observe improvement of prediction accuracy by increasing the population size for the current dataset, a larger population size may work better for complexes of a larger number of chains.</p>
    </sec>
    <sec>
      <title>Computational cost</title>
      <p>The computational time of the GA optimization in Multi-LZerD consists mainly of the pairwise docking by LZerD along with the pairwise clustering step, and the followings at each GA generation: the calculation of the fitness score for each decoy, the mutation operation for each decoy, the crossover operation for pairs of decoys, and the clustering step performed at each generation. The time complexity of computing the fitness score, the mutation operation, and the crossover operation is linear in the number of decoys, while it is quadratic for the clustering step because it needs pairwise RMSD values between all decoy pairs in the population. Thus, the overall time complexity is quadratic in the number of decoys in the population. The use of the crossover operation has a significant impact in the overall computational time because it will increase the number of decoys in the population that are subject to the clustering.</p>
      <p>In Figure <xref ref-type="fig" rid="F4">4</xref>, we show the actual average computational time of one Multi-LZerD GA generation, for the protein complex 1ES7, with and without the crossover operation. In both cases, the computational time roughly grows in a quadratic fashion as the population size grows. Comparing the time of running Multi-LZerD with and without crossover at each population size, the time using the crossover is about 1.6 to 1.8 times larger than that of without using crossover. As described above, when the initial population size is <italic>2N</italic>, applying the mutation increases the population to <italic>4N </italic>while using both crossover and mutation operations increases it to <italic>6N</italic>. Thus, the quadratic computational cost for the clustering step for the latter will take (<italic>6N</italic>/<italic>4N</italic>)<sup>2 </sup>= 1.5<sup>2 </sup>= 2.25 times more than the former. The observed increase of the population size in Figure <xref ref-type="fig" rid="F4">4</xref> roughly agrees with this estimation.</p>
      <fig id="F4" position="float">
        <label>Figure 4</label>
        <caption>
          <p><bold>Computational time of running Multi-LZerD</bold>. Average running time per generation (in minutes) required by Multi-LZerD. Four different population sizes, 200, 400, 600, and 800 were tested with and without using the crossover operation. A protein complex, 1ES7, was used. Multi-LZerD was executed on 10 Intel Xeon L5630 CPUs at 2.13GHz. The computational time on the y-axis is the average of 25 generations.</p>
        </caption>
        <graphic xlink:href="1753-6561-6-S7-S4-4"/>
      </fig>
    </sec>
  </sec>
  <sec sec-type="conclusions">
    <title>Conclusions</title>
    <p>Multi-LZerD employs GA for exploring the conformation space and there are several key parameters that can critically affect the prediction performance. Since computing the fitness score is a time-consuming step, it is desired to keep the population of decoys in each GA generation small, but at the same time the algorithm should be able to explore the conformation space sufficiently to find near-native models. From the testing of Multi-LZerD on the three protein complexes, we found that the population size of 200 or 400 is sufficient (Table <xref ref-type="table" rid="T1">1</xref>). The clustering is effective in reducing redundant pairwise predictions, which leads to successful identification of near-native conformations. Using the crossover operation yielded a near-native structure in an earlier generation than without using the crossover; however, they yielded similar final prediction results after a larger number of iterations. The current study leads to the conclusion that an excessive sampling of the conformational space is not necessary for small protein complexes (around four subunits) to find correct structure models in the Multi-LZerD scheme. However, it is not clear if the conclusion applies to complexes with a larger number of subunits since their conformational space can be significantly larger than smaller ones.</p>
  </sec>
  <sec>
    <title>List of abbreviations used</title>
    <p>• GA: Genetic Algorithm; • fnat: Fraction of native contacts; • PDB: Protein Data Bank; • RMSD: Root mean square deviation.</p>
  </sec>
  <sec>
    <title>Competing interests</title>
    <p>The authors declare that they have no competing interests.</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>JER developed the multiple protein docking prediction method, Multi-LZerD, performed the computational experiments and wrote the manuscript draft. DK conceived the study and participated in its design and coordination, as well as drafting and finalizing the manuscript. All authors read and approved the final manuscript.</p>
  </sec>
</body>
<back>
  <sec>
    <title>Acknowledgements</title>
    <p>This work was supported by the National Institute of General Medical Sciences of the National Institutes of Health (R01GM075004, R01GM097528) and the National Science Foundation (EF0850009, IIS0915801, IOS1127027) and National Research Foundation of Korea Grant (NRF-2011-220-C00004). JER is a Fulbright Science and Technology Fellow.</p>
    <p>This article has been published as part of <italic>BMC Proceedings </italic>Volume 6 Supplement 7, 2012: Proceedings from the Great Lakes Bioinformatics Conference 2012. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/bmcproc/supplements/6/S7">http://www.biomedcentral.com/bmcproc/supplements/6/S7</ext-link>.</p>
  </sec>
  <ref-list>
    <ref id="B1">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Esquivel-Rodriguez</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Kihara</surname>
          <given-names>D</given-names>
        </name>
        <article-title>Evaluation of multiple protein docking structures using correctly predicted pairwise subunits</article-title>
        <source>BMC Bioinformatics</source>
        <year>2012</year>
        <volume>13</volume>
        <fpage>S6</fpage>
        <pub-id pub-id-type="pmid">22536869</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B2">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Esquivel-Rodriguez</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Kihara</surname>
          <given-names>D</given-names>
        </name>
        <article-title>Fitting multimeric protein complexes into electron microscopy maps using 3D Zernike descriptors</article-title>
        <source>J Phys Chem B</source>
        <year>2012</year>
        <volume>116</volume>
        <fpage>6854</fpage>
        <lpage>6861</lpage>
        <pub-id pub-id-type="doi">10.1021/jp212612t</pub-id>
        <pub-id pub-id-type="pmid">22417139</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B3">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Esquivel-Rodriguez</surname>
          <given-names>J</given-names>
        </name>
        <name>
          <surname>Yang</surname>
          <given-names>YD</given-names>
        </name>
        <name>
          <surname>Kihara</surname>
          <given-names>D</given-names>
        </name>
        <article-title>Multi-LZerD: multiple protein docking for asymmetric complexes</article-title>
        <source>Proteins</source>
        <year>2012</year>
        <volume>80</volume>
        <fpage>1818</fpage>
        <lpage>1833</lpage>
        <pub-id pub-id-type="pmid">22488467</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B4">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Venkatraman</surname>
          <given-names>V</given-names>
        </name>
        <name>
          <surname>Yang</surname>
          <given-names>YD</given-names>
        </name>
        <name>
          <surname>Sael</surname>
          <given-names>L</given-names>
        </name>
        <name>
          <surname>Kihara</surname>
          <given-names>D</given-names>
        </name>
        <article-title>Protein-protein docking using region-based 3D Zernike descriptors</article-title>
        <source>BMC Bioinformatics</source>
        <year>2009</year>
        <volume>10</volume>
        <fpage>407</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-407</pub-id>
        <pub-id pub-id-type="pmid">20003235</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B5">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Comeau</surname>
          <given-names>SR</given-names>
        </name>
        <name>
          <surname>Gatchell</surname>
          <given-names>DW</given-names>
        </name>
        <name>
          <surname>Vajda</surname>
          <given-names>S</given-names>
        </name>
        <name>
          <surname>Camacho</surname>
          <given-names>CJ</given-names>
        </name>
        <article-title>ClusPro: an automated docking and discrimination method for the prediction of protein complexes</article-title>
        <source>Bioinformatics</source>
        <year>2004</year>
        <volume>20</volume>
        <fpage>45</fpage>
        <lpage>50</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btg371</pub-id>
        <pub-id pub-id-type="pmid">14693807</pub-id>
      </mixed-citation>
    </ref>
    <ref id="B6">
      <mixed-citation publication-type="journal">
        <name>
          <surname>Janin</surname>
          <given-names>J</given-names>
        </name>
        <article-title>Protein-protein docking tested in blind predictions: the CAPRI experiment</article-title>
        <source>Mol Biosyst</source>
        <year>2010</year>
        <volume>6</volume>
        <fpage>2351</fpage>
        <lpage>2362</lpage>
        <pub-id pub-id-type="doi">10.1039/c005060c</pub-id>
        <pub-id pub-id-type="pmid">20725658</pub-id>
      </mixed-citation>
    </ref>
  </ref-list>
</back>
