<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 2?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">4462005</article-id>
    <article-id pub-id-type="pmid">26063651</article-id>
    <article-id pub-id-type="publisher-id">626</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-015-0626-9</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Methodology Article</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>BitMapper: an efficient all-mapper based on bit-vector computing</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Cheng</surname>
          <given-names>Haoyu</given-names>
        </name>
        <address>
          <email>chhy@mail.ustc.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Jiang</surname>
          <given-names>Huaipan</given-names>
        </name>
        <address>
          <email>jhp9650@mail.ustc.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Yang</surname>
          <given-names>Jiaoyun</given-names>
        </name>
        <address>
          <email>jiaoyun@hfut.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Xu</surname>
          <given-names>Yun</given-names>
        </name>
        <address>
          <email>xuyun@ustc.edu.cn</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Shang</surname>
          <given-names>Yi</given-names>
        </name>
        <address>
          <email>ShangY@missouri.edu</email>
        </address>
        <xref ref-type="aff" rid="Aff4">4</xref>
      </contrib>
      <aff id="Aff1"><label>1</label>Key Laboratory on High Performance Computing, Hefei, Anhui230027, P.R. China </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000000121679639</institution-id><institution-id institution-id-type="GRID">grid.59053.3a</institution-id><institution>School of Computer Science, </institution><institution>University of Science and Technology of China, </institution></institution-wrap>Hefei, Anhui, 230027 P.R. China </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="GRID">grid.256896.6</institution-id><institution/><institution>Hefei University of Technology, </institution></institution-wrap>Hefei, 230009 China </aff>
      <aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 2162 3504</institution-id><institution-id institution-id-type="GRID">grid.134936.a</institution-id><institution>Department of Computer Science, </institution><institution>University of Missouri-Columbia, </institution></institution-wrap>Columbia MO, 65203 USA </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>11</day>
      <month>6</month>
      <year>2015</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2015</year>
    </pub-date>
    <volume>16</volume>
    <elocation-id>192</elocation-id>
    <history>
      <date date-type="received">
        <day>26</day>
        <month>11</month>
        <year>2014</year>
      </date>
      <date date-type="accepted">
        <day>22</day>
        <month>5</month>
        <year>2015</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© Cheng et al. 2015</copyright-statement>
      <license license-type="open-access">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0">http://creativecommons.org/licenses/by/4.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly credited. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p>As the next-generation sequencing (NGS) technologies producing hundreds of millions of reads every day, a tremendous computational challenge is to map NGS reads to a given reference genome efficiently. However, existing methods of all-mappers, which aim at finding all mapping locations of each read, are very time consuming. The majority of existing all-mappers consist of 2 main parts, filtration and verification. This work significantly reduces verification time, which is the dominant part of the running time.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>An efficient all-mapper, BitMapper, is developed based on a new vectorized bit-vector algorithm, which simultaneously calculates the edit distance of one read to multiple locations in a given reference genome. Experimental results on both simulated and real data sets show that BitMapper is from several times to an order of magnitude faster than the current state-of-the-art all-mappers, while achieving higher sensitivity, i.e., better quality solutions.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p>We present BitMapper, which is designed to return all mapping locations of raw reads containing indels as well as mismatches. BitMapper is implemented in C under a GPL license. Binaries are freely available at <ext-link ext-link-type="uri" xlink:href="http://home.ustc.edu.cn/%7Echhy">http://home.ustc.edu.cn/%7Echhy</ext-link>.</p>
      </sec>
      <sec>
        <title>Electronic supplementary material</title>
        <p>The online version of this article (doi:10.1186/s12859-015-0626-9) contains supplementary material, which is available to authorized users.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Read alignment</kwd>
      <kwd>Edit distance</kwd>
      <kwd>Multiple locations</kwd>
      <kwd>Simultaneously calculating</kwd>
      <kwd>Bit-vector algorithm</kwd>
    </kwd-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2015</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p>Recently, DNA sequencing has become a powerful tool for researches in biology and medicine. The decreasing cost and improving speed of the next-generation sequencing (NGS) technologies generate massive reads every day. However, a disadvantage of NGS technologies is that they produce sequenced reads of relatively short length. For instance, the HiSeq2500 platform of Illumina usually produces 150 bp reads. The first step of many genomic researches is finding the mapping locations of these short NGS reads in a given large reference genome.</p>
    <p>For this mapping issue, two classes of methods have been developed. One class, including Bowtie [<xref ref-type="bibr" rid="CR1">1</xref>], Bowtie2 [<xref ref-type="bibr" rid="CR2">2</xref>], BWA [<xref ref-type="bibr" rid="CR3">3</xref>], GEM [<xref ref-type="bibr" rid="CR4">4</xref>], etc., is referred to as best-mappers for trying to identify one or a few best mapping locations for each read. The other class, including RazerS 3 [<xref ref-type="bibr" rid="CR5">5</xref>], Hobbes2 [<xref ref-type="bibr" rid="CR6">6</xref>], and mrFAST [<xref ref-type="bibr" rid="CR7">7</xref>, <xref ref-type="bibr" rid="CR8">8</xref>], is referred to as all-mappers for finding all mapping locations. Generally, the selection of different mappers depends on the needs of down-stream applications. Finding one or a few best mapping locations for each read using best-mappers is enough in most cases (e.g., mapping DNA-protein interactions, whole-transcriptome sequencing and whole genome expression profiling). However, for some specific applications, such as ChIP-seq experiments, CNVs (copy number variation) calling and detecting structural variants, it is necessary to identify all mapping locations using all-mappers.</p>
    <p>Due to the different purposes, identifying all mapping locations using all-mappers is usually much slower than finding one or a few best locations using best-mappers. An important reason is that all-mappers have to enumerate all possible locations, while best-mappers can use some heuristic methods to select the most likely one. There are a lot of matches for some reads due to huge numbers of segmental duplications and common repeats in reference genomes. Thus, finding all mapping locations is still a computationally very expensive problem.</p>
    <p>To solve this problem, many all-mappers have been developed. Most of them consist of two parts, filtration and verification. Filtration reduces the number of the locations that need to be verified (called candidates), especially when a reference genome is extremely large. For example, Hobbes [<xref ref-type="bibr" rid="CR9">9</xref>] uses a dynamic programming algorithm to select several <italic>q</italic>-grams with the lowest frequency, where <italic>q</italic>-grams are the subsequences with length of <italic>q</italic>. Therefore, the number of candidates is minimal. Another filter proposed by Hobbes 2 chooses <italic>k</italic>+2 <italic>q</italic>−grams instead of <italic>k</italic>+1 and only verifies the locations that appear at least two times. Recently, Masai [<xref ref-type="bibr" rid="CR10">10</xref>] improved the performance of filtration by generating candidate locations of multiple reads simultaneously and using approximate seeds. Compared with filtration, verification used for edit distance is the dominant part of the whole running time in current mappers [<xref ref-type="bibr" rid="CR8">8</xref>]. Several algorithms have been proposed to speedup verification. A bit-vector algorithm proposed by Myers [<xref ref-type="bibr" rid="CR11">11</xref>] uses bit representation contained in a machine word to calculte edit distance. RazerS 3 [<xref ref-type="bibr" rid="CR5">5</xref>] implements a banded version of Myers’ algorithm [<xref ref-type="bibr" rid="CR12">12</xref>], which only calculates several consecutive diagonals rather than the whole dynamic programming matrix. Although the current banded method of verification is quite quick, it only calculates the edit distance of a read to one location rather than multiple locations.</p>
    <p>In this paper, we present BitMapper, an efficient read mapper which is designed to return all mapping locations of raw reads containing indels as well as mismatches. It includes a new vectorized bit-vector algorithm using a single machine word to represent several bit vectors and simultaneously calculates the edit distance of a read to multiple locations in a given reference genome. A vectorized verification scheme is also proposed to work with the new bit-vector algorithm. Experimental results show that the running time of BitMapper is from several times to an order of magnitude faster than the best existing all-mappers, including Hobbes 2, RazerS 3, mrFAST (with FastHASH) [<xref ref-type="bibr" rid="CR8">8</xref>], Masai and Yara [<xref ref-type="bibr" rid="CR13">13</xref>].</p>
  </sec>
  <sec id="Sec2">
    <title>Methods</title>
    <p>First, we define the read mapping problem and related concepts.</p>
    <sec id="d30e377">
      <title><bold>Definition</bold><bold>1</bold>.</title>
      <p>Given a set of reads R and a reference genome S, find all locations in S where the hamming or edit distance of each read in R is at most k.</p>
      <p>Hamming and edit distance are two common distance metrics for sequence alignment. Hamming distance only includes the substitutions of the corresponding symbols between two strings of equal length, while edit distance consists of substitutions, insertions and deletions. Calculating hamming distance is relatively easy and has been well solved. On the other hand, calculating edit distance efficiently is still difficult, which is the focus on this article.</p>
      <p>Similar to existing short reads mappers, BitMapper mainly consists of two parts: filtration and verification. In the following, we first briefly describe the procedure of existing approaches and then present and analyze BitMapper in detail.</p>
    </sec>
    <sec id="Sec3">
      <title>Filtration</title>
      <p>Filtration is an important phase for sequence alignment, especially if a reference genome is extremely large. Only the regions consisting of potential mapping locations can be reserved after filtration. Currently, the basic principle of nearly all <italic>q</italic>-gram-based filtration strategies is that the number of <italic>q</italic>-grams shared between two sequences should exceed a certain threshold if they are potentially similar. Next, we briefly summarize commonly used<italic>q</italic>-gram-based approaches.</p>
      <sec id="Sec4">
        <title>Pigeonhole principle</title>
        <p>A simple and efficient filtration strategy is pigeonhole principle: if <italic>l</italic> items are put into <italic>l</italic>+1 boxes, then one or more boxes would be empty. In its application on sequence alignment, first each read is divided into <italic>k</italic>+1 non-overlapping <italic>q</italic>-grams, where <italic>k</italic> is the threshold of edit distance or hamming distance. If the distance between a read and a candidate region is less than <italic>k</italic>, at least one in <italic>k</italic>+1 non-overlapping <italic>q</italic>-grams of the read can be mapped to the reference exactly, since a substitution, insertion or deletion only affects a <italic>q</italic>-gram. A more general version of pigeonhole principle is that if a read is able to be cut into <italic>k</italic>+<italic>m</italic> non-overlapping <italic>q</italic>-grams, sharing at least <italic>m</italic> of them with a read is necessary for each mappinglocation.</p>
      </sec>
      <sec id="Sec5">
        <title>Count filtering</title>
        <p>Compared with pigeonhole principle, a more involved filtration strategy is count filtering. Given a sequence <italic>s</italic>, there are |<italic>s</italic>|−<italic>q</italic>+1 overlapping <italic>q</italic>-grams that are obtained by sliding a window of length <italic>q</italic> over <italic>s</italic>, where |<italic>s</italic>| is the length of <italic>s</italic>. As in the explanation of pigeonhole principle, a substitution only affects at most <italic>q</italic> overlapping <italic>q</italic>-grams. Thus, no more than <italic>k</italic>×<italic>q</italic>
<italic>q</italic>-grams could be affected with hamming distance <italic>k</italic>. If the hamming distance between <italic>s</italic> and another sequence <italic>r</italic> is less than <italic>k</italic>, then the number <italic>T</italic> of shared <italic>q</italic>-grams is at least. <disp-formula id="Equ1"><label>(1)</label><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
$$ T=|s|-(k+1)\times q+1  $$
\end{document}</tex-math><mml:math id="M2"><mml:mi>T</mml:mi><mml:mo>=</mml:mo><mml:mo>|</mml:mo><mml:mi>s</mml:mi><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mo>(</mml:mo><mml:mi>k</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mo>×</mml:mo><mml:mi>q</mml:mi><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:math><graphic xlink:href="12859_2015_626_Equ1.gif" position="anchor"/></alternatives></disp-formula>
</p>
        <p>The lower bound <italic>T</italic> of edit distance is similar to that of hamming distance. The first method of count filtering on sequence alignment is a modified SWIFT algorithm [<xref ref-type="bibr" rid="CR14">14</xref>] used in RazerS [<xref ref-type="bibr" rid="CR15">15</xref>].</p>
      </sec>
      <sec id="Sec6">
        <title>Our implementation</title>
        <p>Pigeonhole principle is faster than count filtering on filtration phase, while the verification time of the pigeonhole-principle-based mappers is more than that of the count-filtering-based mappers. In fact, there is a tradeoff between filtration and verification. Because the proportion of verification time for the pigeonhole-principle-based mappers is larger than that for the count-filtering-based mappers, the former benefit more from the improvement of verification than the latter. As our verification method is efficient, Bitmapper used pigeonhole principle instead of count filtering.</p>
      </sec>
    </sec>
    <sec id="Sec7">
      <title>Verification</title>
      <p>The locations reserved after filtration are the candidates for matches. During the verification phase, these candidates should be verified by calculating their edit distance or hamming distance to each read. Compared with computing hamming distance, computing edit distance is extremely time-consuming. In the following, we first describe the theoretical basis for our vectorized Gene Myers’ bit-vector algorithm, and illustrate the algorithm in detail. Then, we present a vectorized verification scheme, which is designed to work with the vectorized Gene Myers’ bit-vector algorithm.</p>
      <sec id="Sec8">
        <title>Theoretical basis</title>
        <p>For sequence alignment, the reads and the reference genomes can be viewed as the strings including letters <italic>A</italic>, <italic>C</italic>, <italic>G</italic>, <italic>T</italic> and <italic>N</italic>. Assume the length of read <italic>r</italic> is <italic>m</italic>, the length of genome <italic>s</italic> is <italic>n</italic>, and the threshold of edit distance is <italic>k</italic>. The dynamic programming algorithm proposed in [<xref ref-type="bibr" rid="CR16">16</xref>] is a classic method for this problem, which computes a dynamic programming matrix <italic>C</italic>[0…<italic>m</italic>,0…<italic>n</italic>] of size (<italic>m</italic>+1)×(<italic>n</italic>+1). The well-known recurrence formula is as follows. <disp-formula id="Equ2"><label>(2)</label><alternatives><tex-math id="M3">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
$$ {\small{\begin{aligned} &amp;E[i,j]=\left\{ \begin{array}{ll} 0&amp; r_{i}=s_{j}\\ 1&amp; {r_{i}\neq s_{j}}\\ \end{array} \right.&amp; {i \in [1,m],j \in [1,n]} &amp; \\ &amp;C[i,j]=min\left\{ \begin{array}{ll} C[i,j-1]+1\\ C[i-1,j]+1\\ C[i-1,j-1]+E[i,j] \end{array} \right.&amp; {i \in [1,m],j \in [1,n]}&amp; \\ &amp;C[0,j]=0,C[i,0]=i &amp; {i \in [0,m],j \in [0,n]}&amp; \end{aligned}}}  $$
\end{document}</tex-math><mml:math id="M4"><mml:mspace width="-15.0pt"/><mml:mtable><mml:mtr><mml:mtd><mml:mi>E</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mfenced close="" open="{" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mn>0</mml:mn></mml:mtd><mml:mtd><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mn>1</mml:mn></mml:mtd><mml:mtd><mml:msub><mml:mrow><mml:mi>r</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>≠</mml:mo><mml:msub><mml:mrow><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr/></mml:mtable></mml:mrow></mml:mfenced></mml:mtd><mml:mtd><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>]</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>]</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mtext mathvariant="italic">min</mml:mtext><mml:mfenced close="" open="{" separators=""><mml:mrow><mml:mtable><mml:mtr><mml:mtd><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>]</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>]</mml:mo><mml:mo>+</mml:mo><mml:mi>E</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mfenced></mml:mtd><mml:mtd><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>]</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>]</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mi>i</mml:mi></mml:mtd><mml:mtd><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>]</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>]</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2015_626_Equ2.gif" position="anchor"/></alternatives></disp-formula>
</p>
        <p>Its time complexity is <italic>O</italic>(<italic>m</italic>×<italic>n</italic>) and it is very slow when a reference genome is large. Actually, calculating the whole dynamic programming matrix is unnecessary when the edit distance threshold <italic>k</italic> has been set in advance. As stated in the following Lemma 1, the size of computing area in dynamic programming matrix is related to <italic>k</italic>, which has been proven in [<xref ref-type="bibr" rid="CR17">17</xref>].</p>
        <sec id="d30e962">
          <title><bold>Lemma</bold><bold>1</bold>.</title>
          <p>Given a read of length m, a candidate location d in a reference genome and an edit distance threshold k, the start and end positions of potential matches may be from <italic>d</italic>−<italic>k</italic> to <italic>d</italic>+<italic>k</italic> and from <italic>d</italic>+<italic>m</italic>−<italic>k</italic>−1 to <italic>d</italic>+<italic>m</italic>+<italic>k</italic>−1, respectively. In other words, the length of the verification window, which would be calculated with the read, is <italic>m</italic>+2<italic>k</italic>.</p>
          <p>Figure <xref rid="Fig1" ref-type="fig">1</xref> shows an example for Lemma 1. Note that the candidate location <italic>d</italic> is obtained by subtracting the offset <italic>c</italic> from <italic>dq</italic>, where <italic>dq</italic> is an exactly matched location of a <italic>q</italic>-gram and <italic>c</italic> is the offset of this <italic>q</italic>-gram in the read. If there are only at most <italic>k</italic> deletions, the segment starting at <italic>d</italic>−<italic>k</italic> and ending at <italic>d</italic>+<italic>m</italic>+<italic>k</italic>−1 needs to be computed. If there are only at most <italic>k</italic> insertions, the segment range needing to be considered is from <italic>d</italic>+<italic>k</italic> to <italic>d</italic>+<italic>m</italic>−<italic>k</italic>−1. Combining with these two intervals, the range of maximal verification window is from <italic>d</italic>-<italic>k</italic> to <italic>d</italic>+<italic>m</italic>+<italic>k</italic>−1.<fig id="Fig1"><label>Fig. 1</label><caption><p>The verification window in reference genome. It includes the candidate mapping locations of the read with edit distance up to 3</p></caption><graphic xlink:href="12859_2015_626_Fig1_HTML" id="MO1"/></fig>
</p>
          <p>According to Lemma 1, the length of verification window is <italic>m</italic>+2<italic>k</italic>. Thus, only (<italic>m</italic>+2<italic>k</italic>+1)×(<italic>m</italic>+1) cells in dynamic programming matrix need to be calculated. We define the diagonal which is shifted from the main diagonal by <italic>k</italic> diagonals to the right as “base diagonal”. It corresponds to the situation that only substitutions are considered, since the computing path moves right down from the current cell in dynamic programming matrix to the adjacent cell when a substitution occurs. For a deletion in the reference genome, the computing path goes right to the adjacent cell. For an insertion, this path goes down to the adjacent cell. Thus, the rightmost and the leftmost diagonals are obtained by sliding <italic>k</italic> diagonals from the “base diagonal” to its right and left, respectively. In fact, the computing area in dynamic programming matrix is a banded parallelogram, as shownin Fig. <xref rid="Fig2" ref-type="fig">2</xref>.<fig id="Fig2"><label>Fig. 2</label><caption><p>The computing area in dynamic programming matrix with the edit distance threshold k = 2. The initial cells should be set to 0 because the start locations of potential matches can not be known in advance</p></caption><graphic xlink:href="12859_2015_626_Fig2_HTML" id="MO2"/></fig>
</p>
          <p>An efficient solution for this problem is the bit-vector algorithm proposed in [<xref ref-type="bibr" rid="CR11">11</xref>], which is based on the observation that the difference of the values between adjacent cells in dynamic programming matrix is at most 1. It is able to encode a whole column in dynamic programming matrix using bit vectors and compute a column by bit operations rather than cell-by-cell. Banded versions of Myers’ bit-vector algorithm have been implemented in [<xref ref-type="bibr" rid="CR5">5</xref>] and [<xref ref-type="bibr" rid="CR12">12</xref>]. They encode a banded parallelogram in dynamic programming matrix into columns for column-wise computation, since only limited consecutive diagonals need to be calculated rather than the whole dynamic programming matrix, according to the analysis above. Figure <xref rid="Fig2" ref-type="fig">2</xref> shows that at most 2<italic>k</italic>+1 cells in each column need to be calculated, so that the length of the bit vectors is also 2<italic>k</italic>+1. If 2<italic>k</italic>+1 is less than the word size of computer, a column could be processed in one step.</p>
        </sec>
      </sec>
      <sec id="Sec9">
        <title>Vectorized Gene Myers’ bit-vector algorithm</title>
        <p>A significant characteristic of the NGS reads is that the length of them is relatively short. For the down-stream applications using all-mappers, the edit distance threshold is usually set to 4 % or 5 % of the read length. Thus, the edit distance threshold <italic>k</italic> is usually low. It means that a few bits are enough for banded bit-vector algorithms to calculate edit distance. For example, the length of the reads sequenced by Illumina platform is always under 150 so that the threshold <italic>k</italic> is set to 7. If <italic>k</italic>=7, the length of bit vectors is 15, while the word size of modern computers is typically 64 and the Streaming SIMD Extensions (SSE) instruction set has several 128-bit registers. Therefore, it is possible to load multiple bit vectors into a machine word or a 128-bit SSE register. Furthermore, the problem can be converted to how to compute the edit distance between several patterns and a text. Based on these observations, we propose a new vectorized Gene Myers’ bit-vector algorithm to simultaneously process a text with multiple patterns.</p>
        <p>First we briefly introduce the current bit-vector algorithm proposed in [<xref ref-type="bibr" rid="CR12">12</xref>], which is the basis of our vectorized algorithm. It uses delta encoding in dynamic programming matrix <italic>C</italic>[0…<italic>m</italic>,0…<italic>n</italic>]. Specifically, for column <italic>j</italic>, the bit delta vectors are. <disp-formula id="Equ3"><label>(3)</label><alternatives><tex-math id="M5">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
$$\begin{array}{*{20}l} &amp;{HP}_{j}[i] \equiv(C[i,j]-C[i,j-1]=+1)&amp; \\ &amp;{HN}_{j}[i] \equiv(C[i,j]-C[i,j-1]=-1)&amp; \\ &amp;{VP}_{j}[i] \equiv(C[i,j]-C[i-1,j]=+1)&amp; i \in [1,m],j \in [1,n] &amp; \\ &amp;{VN}_{j}[i] \equiv(C[i,j]-C[i-1,j]=-1)&amp;\\ &amp;D0_{j}[i]=C[i,j]-C[i-1,j-1]&amp; \\ &amp;{Peq}_{j}[s][i]\equiv(pattern[i]=s)&amp; s \in \{A,T,G,C\}&amp; \end{array} $$
\end{document}</tex-math><mml:math id="M6"><mml:mtable class="align" columnalign="left"><mml:mtr><mml:mtd class="align-1"/><mml:mtd class="align-2"><mml:mspace width="-15.0pt"/><mml:msub><mml:mrow><mml:mtext mathvariant="italic">HP</mml:mtext></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo><mml:mo>≡</mml:mo><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>−</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"/><mml:mtd class="align-2"><mml:mspace width="-15.0pt"/><mml:msub><mml:mrow><mml:mtext mathvariant="italic">HN</mml:mtext></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo><mml:mo>≡</mml:mo><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>−</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"/><mml:mtd class="align-2"><mml:mspace width="-15.0pt"/><mml:msub><mml:mrow><mml:mtext mathvariant="italic">VP</mml:mtext></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo><mml:mo>≡</mml:mo><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>−</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mo>+</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>]</mml:mo><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mo>[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo>]</mml:mo></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"/><mml:mtd class="align-2"><mml:mspace width="-15.0pt"/><mml:msub><mml:mrow><mml:mtext mathvariant="italic">VN</mml:mtext></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo><mml:mo>≡</mml:mo><mml:mo>(</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>−</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>)</mml:mo><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"/><mml:mtd class="align-2"><mml:mspace width="-15.0pt"/><mml:mi>D</mml:mi><mml:msub><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>]</mml:mo><mml:mo>−</mml:mo><mml:mi>C</mml:mi><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>−</mml:mo><mml:mn>1</mml:mn><mml:mo>]</mml:mo><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr><mml:mtr><mml:mtd class="align-1"/><mml:mtd class="align-2"><mml:mspace width="-15.0pt"/><mml:msub><mml:mrow><mml:mtext mathvariant="italic">Peq</mml:mtext></mml:mrow><mml:mrow><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>[</mml:mo><mml:mi>s</mml:mi><mml:mo>]</mml:mo><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo><mml:mo>≡</mml:mo><mml:mo>(</mml:mo><mml:mtext mathvariant="italic">pattern</mml:mtext><mml:mo>[</mml:mo><mml:mi>i</mml:mi><mml:mo>]</mml:mo><mml:mo>=</mml:mo><mml:mi>s</mml:mi><mml:mo>)</mml:mo><mml:mspace width="2em"/></mml:mtd><mml:mtd><mml:mi>s</mml:mi><mml:mo>∈</mml:mo><mml:mo>{</mml:mo><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo>,</mml:mo><mml:mi>G</mml:mi><mml:mo>,</mml:mo><mml:mi>C</mml:mi><mml:mo>}</mml:mo></mml:mtd><mml:mtd><mml:mspace width="2em"/></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="12859_2015_626_Equ3.gif" position="anchor"/></alternatives></disp-formula>
</p>
        <p>where <italic>H</italic>
<italic>P</italic>
<sub><italic>j</italic></sub>,<italic>H</italic>
<italic>N</italic>
<sub><italic>j</italic></sub>,<italic>V</italic>
<italic>P</italic>
<sub><italic>j</italic></sub>,<italic>V</italic>
<italic>N</italic>
<sub><italic>j</italic></sub>,<italic>D</italic>0<sub><italic>j</italic></sub> and <italic>P</italic>
<italic>e</italic>
<italic>q</italic>
<sub><italic>j</italic></sub> are the <italic>j</italic>th element of <italic>H</italic>
<italic>P</italic>,<italic>H</italic>
<italic>N</italic>,<italic>V</italic>
<italic>P</italic>,<italic>V</italic>
<italic>N</italic>,<italic>D</italic> and <italic>P</italic>
<italic>e</italic>
<italic>q</italic>, respectively. And the notation <italic>H</italic>
<italic>P</italic>
<sub><italic>j</italic></sub>[<italic>i</italic>],<italic>H</italic>
<italic>N</italic>
<sub><italic>j</italic></sub>[<italic>i</italic>],<italic>V</italic>
<italic>P</italic>
<sub><italic>j</italic></sub>[<italic>i</italic>],<italic>V</italic>
<italic>N</italic>
<sub><italic>j</italic></sub>[<italic>i</italic>],<italic>D</italic>0<sub><italic>j</italic></sub>[<italic>i</italic>] and <italic>P</italic>
<italic>e</italic>
<italic>q</italic>
<sub><italic>j</italic></sub>[<italic>s</italic>][<italic>i</italic>] denote the <italic>i</italic>th bit of <italic>H</italic>
<italic>P</italic>
<sub><italic>j</italic></sub>,<italic>H</italic>
<italic>N</italic>
<sub><italic>j</italic></sub>,<italic>V</italic>
<italic>P</italic>
<sub><italic>j</italic></sub>,<italic>V</italic>
<italic>N</italic>
<sub><italic>j</italic></sub>,<italic>D</italic>0<sub><italic>j</italic></sub> and <italic>P</italic>
<italic>e</italic>
<italic>q</italic>
<sub><italic>j</italic></sub>[<italic>s</italic>], respectively.</p>
        <p>If the values of these bit vectors in column <italic>j</italic>−1 have already been known, then the bit vectors in column <italic>j</italic> can be computed as following.</p>
        <p>
          <inline-graphic xlink:href="12859_2015_626_Figa_HTML.gif" id="d30e1903"/>
        </p>
        <p>where <italic>t</italic>[<italic>p</italic>] is the <italic>p</italic>th element of text. Because the length of each column in computing area is 2<italic>k</italic>+1, so the length of these bit vectors is also 2<italic>k</italic>+1.</p>
        <p>Based on the Algorithm 1, we developed the vectorized Gene Myers’ bit-vector algorithm. Briefly, it packs multiple bit-vectors of different patterns into a machine word so that these patterns are able to be processed with one text simultaneously. The calculating of each bit-vector is similar to the previous banded bit-vector algorithm [<xref ref-type="bibr" rid="CR12">12</xref>]. However, some problems would occur when multiple bit-vectors are processed as a whole. From Algorithm 1, only six operations have been used: ‘ ⊕’, ‘ |’, ‘ &amp;’, ‘ ≫’, ‘ ∼’ and ‘+’. They can be divided into two groups. The first group consists of ‘ ⊕’, ‘ |’, ‘ &amp;’ and ‘ ∼’, while ‘ ≫’ and ‘+’ belong to the second group. Using the operations of the first group in a machine word including multiple bit vectors does not have any difficulty, because the bit vectors in it cannot be affected with each other. However, implementing the operations of the second group as a whole would influence each other. For operation ‘+’, the carries resulted from addition of lower bit vectors would affect the nearly upper bit vectors. For operation ‘ ≫’, the lowest bit in upper bit vector would move right to influence the nearly lower bit vector.</p>
        <p>To solve the problem about operation ‘+’, the data structures of the variables used in our vectorized Gene Myers’ bit-vector algorithm have been redesigned. For the previous banded bit-vector algorithm [<xref ref-type="bibr" rid="CR12">12</xref>], 2<italic>k</italic>+1 bits are enough for each variable. Intuitively, for the vectorized algorithm, the length of each variable, which represents <italic>n</italic> bit vectors, is (2<italic>k</italic>+1)×<italic>n</italic>. However, if multiple bit vectors are loaded into a machine word as this, the problem above could not be solved. Our solution is to use one more bit between two bit vectors as a buffer, so that the carries resulted from the operation ‘+’ among the lower bit vectors would not affect the upper bit vectors. For example, <italic>V</italic>
<italic>P</italic>
<sub><italic>l</italic></sub>, which represents the difference of values between the vertical cells for pattern <italic>l</italic>, is a part of <italic>V</italic>
<italic>P</italic>, starting from (2<italic>k</italic>+2)×<italic>l</italic>th bit and ending at (2<italic>k</italic>+2)×(<italic>l</italic>+1)−1th bit. For <italic>h</italic> patterns, the bit vectors of them are assembled together so that the length of variables including <italic>VP</italic>, <italic>V</italic>
<italic>N</italic>,<italic>H</italic>
<italic>P</italic>,<italic>H</italic>
<italic>N</italic>,<italic>D</italic>0 and <italic>Peq</italic> is not less than (2<italic>k</italic>+2)×<italic>h</italic>, as shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. And the problem about operation ‘ ≫’ has been solved in our vectorized Gene Myers’ bit-vector algorithm by using an extra ‘ &amp;’ operation with a predefined bitmask.<fig id="Fig3"><label>Fig. 3</label><caption><p>The data structure for the variables containing several bit vectors. Each pattern needs (2<italic>k</italic>+2) bits to represent itself</p></caption><graphic xlink:href="12859_2015_626_Fig3_HTML" id="MO3"/></fig>
</p>
        <p>Our vectorized Gene Myers’ bit-vector algorithm proceeds column-by-column through the dynamic programming matrix. If the length of patterns is less than that of the text, it returns the optimal end location for each pattern on text. Otherwise, it returns the optimal end locations for the text on each pattern. As an example, we present the outline of the algorithm for the second situation as follows. <list list-type="order"><list-item><p>Preprocess the variables for column 0. <list list-type="bullet"><list-item><label/><p>Set the <italic>Peq</italic> array for the first 2<italic>k</italic>+1 symbols in each pattern.</p></list-item><list-item><label/><p>Set <italic>VP</italic>, <italic>VN</italic> and <italic>E</italic> to 0, where <italic>E</italic> contains the edit distances for <italic>h</italic> patterns.</p></list-item></list>
</p></list-item><list-item><p>Scan and compute the banded parallelogram in the dynamic programming matrix from left to right by column. <list list-type="bullet"><list-item><label/><p>Compute <italic>HP</italic>, <italic>HN</italic> and <italic>D</italic>0 of column <italic>j</italic> from <italic>VP</italic> and <italic>VN</italic> of column <italic>j</italic>-1.</p></list-item><list-item><label/><p>Compute <italic>VP</italic> and <italic>VN</italic> of next column using <italic>HP</italic>, <italic>HN</italic> and <italic>D</italic>0.</p></list-item><list-item><label/><p>Set <italic>Peq</italic> for next column by shifting to the right of the current <italic>Peq</italic>.</p></list-item><list-item><label/><p>Update <italic>E</italic> for this column using <italic>D</italic>0.</p></list-item></list>
</p></list-item><list-item><p>Output the locations with the lowest edit distance as the optimal end location on each pattern, separately. The range in <italic>E</italic> from (2<italic>k</italic>+2)×<italic>j</italic>th bit to (2<italic>k</italic>+2)×(<italic>j</italic>+1)−1th bit denotes the edit distance of pattern <italic>j</italic>.</p></list-item></list>
</p>
        <p>All of the patterns have to be processed one by one in step 3, while step 1 and step 2 can process multiple patterns simultaneously. Fortunately, unlike step 1 and step 2, step 3 is not always necessary due to two reasons: a) the number of matched locations is much less than that of the candidate locations, and b) a simple branch-cut strategy is used in step 2 to stop algorithm earlier, as described in [<xref ref-type="bibr" rid="CR5">5</xref>]. More details of the vectorized Gene Myers’ bit-vector algorithm can be found in the Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section S5.</p>
      </sec>
      <sec id="Sec10">
        <title>Influence of the number of patterns</title>
        <p>We have already implemented the vectorized Gene Myers’ bit-vector algorithm using 64-bit machine word and 128-bit SSE2 register. It can calculate the edit distance of a text with <italic>n</italic> patterns. In order to figure out the influence of different <italic>n</italic>, we selected a 100 bp read from specimen HG00096 as a text and regarded 1 thousand subsequences of human genome starting at the candidate locations of this read as patterns. The threshold <italic>k</italic> of edit distance was set to 4. Because the length of each bit vector is 2<italic>k</italic> + 2=10 and the length of a SSE register is 128, the vectorized Gene Myers’ bit-vector algorithm can process at most 12 patterns with a text simultaneously. Figure <xref rid="Fig4" ref-type="fig">4</xref> shows the running time of the algorithm with different <italic>n</italic>. Although the performance was improved until <italic>n</italic>=12, we found that the running time decreased rapidly from <italic>n</italic>=1 to <italic>n</italic>=8, while it only decreased a little from <italic>n</italic>=9 to <italic>n</italic>=12.<fig id="Fig4"><label>Fig. 4</label><caption><p>Performance for the vectorized Gene Myers’ bit-vector algorithm according to different <italic>n</italic>
</p></caption><graphic xlink:href="12859_2015_626_Fig4_HTML" id="MO4"/></fig>
</p>
        <p>The reason is that for the original banded bit-vector algorithm which calculates the edit distance between a text and a pattern, algorithm stops once it meets the requirement of the branch-cut strategy. For our vectorized Gene Myers’ bit-vector algorithm, calculating stops until all of the patterns meet the requirement. It is difficult when <italic>n</italic> is large and would result in extra cost. Therefore, we set <italic>n</italic> to 8 in most cases. For higher edit distance threshold, <italic>n</italic> is set to 4 since a 128-bit register cannot load 8 bit vectors.</p>
      </sec>
      <sec id="Sec11">
        <title>Vectorized verification scheme</title>
        <p>In order to make full use of the vectorized algorithm, the patterns used to compare with a same text should be collected. The traditional verification scheme, which only selects a read and a subsequence in given reference genome as input every time, is not suitable for our vectorized Gene Myers’ bit-vector algorithm. It is necessary to propose a vectorized verification scheme that considers multiple reads as patterns and a subsequences in given reference genome as text, or vice versa. In other words, multiple reads may correspond to one location in given reference genome, or multiple locations correspond to one read.</p>
        <p>Figure <xref rid="Fig5" ref-type="fig">5</xref>a shows the vectorized verification scheme A, which considers multiple reads as patterns and a subsequence in given reference genome as a text. All of the four reads have a matched 3-gram <italic>ATG</italic> in the reference genome and share the same candidate location <italic>d</italic>. Generally, this scheme needs to build a reads index in order to collect the reads sharing the same locations efficiently. Figure <xref rid="Fig5" ref-type="fig">5</xref>b shows vectorized verification scheme B that considers a read as a text and multiple subsequences starting at the candidate locations of the read as patterns. The read here corresponds to two subsequences sharing a 2-gram <italic>AT</italic>. These two subsequences are obtained by looking up the index of the reference genome using the non-overlapping <italic>q</italic>-grams of the read.<fig id="Fig5"><label>Fig. 5</label><caption><p>Two vectorized verification schemes for the vectorized Gene Myers’ bit-vector algorithm. <bold>a</bold> A location in a reference genome corresponds to four reads. <bold>b</bold> A read corresponds to two locations in the reference genome</p></caption><graphic xlink:href="12859_2015_626_Fig5_HTML" id="MO5"/></fig>
</p>
        <p>According to the analysis above, we found that scheme A takes advantage of the repeatability of the reads, while B takes advantage of the repeatability of the reference genomes. In the experimental results presented in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section S2, the repeatability of genomes is much more than that of reads. Therefore, scheme B suits the vectorized Gene Myers’ bit-vector algorithm better than A. Another advantage of scheme B is that it does not need an extra index of reads. For the reasons outlined above, BitMapper is implemented as scheme B.</p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec12">
    <title>Results and discussion</title>
    <p>BitMapper was compared with five state-of-the-art all-mappers, including mrFAST (with FastHASH), Hobbes 2, RazerS 3, Masai and Yara, and three popular best-mappers, Bowtie 2, GEM and BWA in our experiments. The default configurations of these mappers were used except stated otherwise, and the results were output in the SAM format. For a fair comparison, all mappers ran on the same computer with an Intel(R) Core(TM) i7-4770 processor and 24GB of RAM running 64-bit Ubuntu 14.04.</p>
    <p>The distance metric used in our experiments was edit distance with threshold 5 %. The reference genomes were the whole genome of human (NCBI HG19), caenorhabditis elegans (WormBase WS201) and arabidopsis thaliana (assembly TAIR10). In the following, mapping time and sensitivity on both real and simulated data sets were presented.</p>
    <sec id="Sec13">
      <title>Sensitivity comparison using Rabema results</title>
      <p>In this experiment, 100 k simulated 100 bp reads of human were generated by a simulator tool Mason [<xref ref-type="bibr" rid="CR18">18</xref>] using default profile setting. And we also selected a real data set consisting of 1 million 100 bp reads from specimen HG00096 of the 1000 Genome project [<xref ref-type="bibr" rid="CR19">19</xref>]. To compare the sensitivity of single-end alignment in different genomes, we used the first 1 million 100 bp reads of the data sets SRX026594 and the first 1 million 101 bp reads of SRR1604937, which were obtained from the DNA Data Bank of Japan (DDBJ) repository [<xref ref-type="bibr" rid="CR20">20</xref>] and National Center for Biotechnology Information (NCBI) repository [<xref ref-type="bibr" rid="CR21">21</xref>], respectively.</p>
      <p>To compare the sensitivity of different mappers fairly, Rabema benchmark [<xref ref-type="bibr" rid="CR22">22</xref>] was used to evaluate them. It has been widely used in recent articles, such as [<xref ref-type="bibr" rid="CR5">5</xref>, <xref ref-type="bibr" rid="CR6">6</xref>] and [<xref ref-type="bibr" rid="CR10">10</xref>]. The categories of sensitivity scores provided by Rabema benchmark include all, all-best, and any-best, which are designed to denote the mapped fraction of all, all of the best, and any of the best matches. And to measure these scores, Rabema benchmark defines two metrics: <italic>normalized found interval</italic> and <italic>found interval</italic>. For <italic>normalized found interval</italic>, each read is given at most one point no matter how many mapping locations it has. For <italic>found interval</italic>, each mapping location is given one point [see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section S4 for more detailed illustration]. Note that we only presented the Rabema scores (<italic>normalized found interval</italic>) in the following, and presented the Rabema scores (<italic>found interval</italic>) in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Section S4 due to the limited space. Because Rabema benchmark needs a baseline of mapping locations to build a gold standard, we implemented RazerS 3 in full sensitivity mode, which can report 100 % of mapping locations for each read.</p>
      <sec id="Sec14">
        <title>Rabema benchmark results on simulated data</title>
        <p>Table <xref rid="Tab1" ref-type="table">1</xref> shows the results of mapping 100k simulated reads to the reference genome of human. The Rabema all, all-best and any-best scores were presented here. Each Rabema category has a large number and 6 small numbers representing the total score and the scores for mapping locations with <inline-formula id="IEq1"><alternatives><tex-math id="M7">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}
$\binom {0\ 1\ 2}{3\ 4\ 5}$
\end{document}</tex-math><mml:math id="M8"><mml:mfenced close=")" open="(" separators=""><mml:mfrac linethickness="0.0pt"><mml:mrow><mml:mn>0</mml:mn><mml:mspace width="1em"/><mml:mn>1</mml:mn><mml:mspace width="1em"/><mml:mn>2</mml:mn></mml:mrow><mml:mrow><mml:mn>3</mml:mn><mml:mspace width="1em"/><mml:mn>4</mml:mn><mml:mspace width="1em"/><mml:mn>5</mml:mn></mml:mrow></mml:mfrac></mml:mfenced></mml:math><inline-graphic xlink:href="12859_2015_626_IEq1.gif"/></alternatives></inline-formula> errors, respectively. Best-mappers including Bowtie 2, GEM and BWA were implemented in both high and default sensitivity mode. In high sensitivity mode, the Rabema all-scores (<italic>normalized found interval</italic>) for Bowtie 2, BWA and GEM were 99.73 %, 97.80 % and 96.02 %, respectively. It seems that these best-mappers can achieve nearly full sensitivity. However, the Rabema all-scores (<italic>found interval</italic>) of BWA and GEM, which can be found in in Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S3, were 86.67 % and 61.46 %, respectively. For Bowtie 2, although the Rabema all-scores (<italic>found interval</italic>) was still more than 98 %, it was extremely slow using one thread. Thus, we implemented Bowtie 2 with 16 threads and did not present its running time here. This means that the best-mappers are not suitable for applications requiring full or nearly full sensitivity. It is mainly because the best-mappers are designed specifically for identifying the best mapping locations of each read.<table-wrap id="Tab1"><label>Table 1</label><caption><p>Rabema benchmark results (<italic>normalized found interval</italic>) for 100 k simulated reads</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Mapper</th><th align="left">Time</th><th align="left" colspan="4">Benchmark category</th><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/></tr><tr><th align="left"/><th align="left">[min:sec]</th><th align="left" colspan="4">All[%]</th><th align="left" colspan="4">All-best[%]</th><th align="left" colspan="4">Any-best[%]</th></tr></thead><tbody><tr><td align="left">Bowtie2 <sup>a</sup>
</td><td align="justify">0:18</td><td align="justify">90.18</td><td align="justify">97.68</td><td align="justify">96.60</td><td align="justify">92.25</td><td align="justify">95.87</td><td align="justify">96.46</td><td align="justify">96.14</td><td align="justify">94.48</td><td align="justify">99.26</td><td align="justify">100.00</td><td align="justify">99.49</td><td align="justify">97.51</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">78.95</td><td align="justify">52.71</td><td align="justify">21.13</td><td align="justify"/><td align="justify">93.69</td><td align="justify">92.76</td><td align="justify">92.27</td><td align="justify"/><td align="justify">96.63</td><td align="justify">96.27</td><td align="justify">95.38</td></tr><tr><td align="left">BWA <sup>b</sup>
</td><td align="justify">0:49</td><td align="justify">92.28</td><td align="justify">100.00</td><td align="justify">99.81</td><td align="justify">96.75</td><td align="justify">98.84</td><td align="justify">100.00</td><td align="justify">99.80</td><td align="justify">99.40</td><td align="justify">98.89</td><td align="justify">100.00</td><td align="justify">99.86</td><td align="justify">99.50</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">79.47</td><td align="justify">44.91</td><td align="justify">16.65</td><td align="justify"/><td align="justify">93.61</td><td align="justify">78.42</td><td align="justify">70.67</td><td align="justify"/><td align="justify">93.70</td><td align="justify">78.61</td><td align="justify">71.17</td></tr><tr><td align="left">GEM <sup>c</sup>
</td><td align="justify">0:14</td><td align="justify">92.75</td><td align="justify">98.25</td><td align="justify">97.65</td><td align="justify">95.69</td><td align="justify">98.15</td><td align="justify">98.27</td><td align="justify">98.21</td><td align="justify">97.97</td><td align="justify">99.36</td><td align="justify">99.42</td><td align="justify">99.42</td><td align="justify">99.24</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">88.44</td><td align="justify">67.06</td><td align="justify">33.44</td><td align="justify"/><td align="justify">98.11</td><td align="justify">96.87</td><td align="justify">95.87</td><td align="justify"/><td align="justify">99.42</td><td align="justify">98.74</td><td align="justify">97.33</td></tr><tr><td align="left">Bowtie 2</td><td align="justify">—</td><td align="justify">99.73</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.96</td><td align="justify">99.53</td><td align="justify">95.45</td><td align="justify"/><td align="justify">99.95</td><td align="justify">99.67</td><td align="justify">97.89</td><td align="justify"/><td align="justify">99.95</td><td align="justify">99.67</td><td align="justify">97.89</td></tr><tr><td align="left">BWA</td><td align="justify">40:32</td><td align="justify">97.80</td><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">99.62</td><td align="justify">98.95</td><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">99.62</td><td align="justify">98.95</td><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">99.62</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">94.26</td><td align="justify">83.53</td><td align="justify">75.30</td><td align="justify"/><td align="justify">93.82</td><td align="justify">79.03</td><td align="justify">70.93</td><td align="justify"/><td align="justify">93.82</td><td align="justify">79.16</td><td align="justify">71.17</td></tr><tr><td align="left">GEM</td><td align="justify">3:15</td><td align="justify">96.02</td><td align="justify">98.25</td><td align="justify">98.24</td><td align="justify">98.09</td><td align="justify">98.15</td><td align="justify">98.27</td><td align="justify">98.18</td><td align="justify">98.01</td><td align="justify">99.35</td><td align="justify">99.42</td><td align="justify">99.41</td><td align="justify">99.24</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">95.92</td><td align="justify">87.02</td><td align="justify">66.35</td><td align="justify"/><td align="justify">98.17</td><td align="justify">97.02</td><td align="justify">95.94</td><td align="justify"/><td align="justify">99.44</td><td align="justify">98.68</td><td align="justify">97.17</td></tr><tr><td align="left">Masai</td><td align="justify">17:43</td><td align="justify">99.86</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.96</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.87</td><td align="justify">99.54</td><td align="justify">97.87</td><td align="justify"/><td align="justify">99.85</td><td align="justify">99.29</td><td align="justify">98.59</td><td align="justify"/><td align="justify">99.85</td><td align="justify">98.34</td><td align="justify">98.70</td></tr><tr><td align="left">Hobbes 2</td><td align="justify">7:51</td><td align="justify">99.82</td><td align="justify">99.98</td><td align="justify">99.97</td><td align="justify">99.97</td><td align="justify">99.97</td><td align="justify">99.98</td><td align="justify">99.97</td><td align="justify">99.97</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.98</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.98</td><td align="justify">99.87</td><td align="justify">97.20</td><td align="justify"/><td align="justify">99.97</td><td align="justify">99.98</td><td align="justify">99.80</td><td align="justify"/><td align="justify">99.97</td><td align="justify">100.00</td><td align="justify">99.92</td></tr><tr><td align="left">mrFAST</td><td align="justify">12:32</td><td align="justify">99.32</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.42</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.43</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">99.96</td><td align="justify">87.51</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">53.69</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">54.09</td></tr><tr><td align="left">RazerS 3 <sup>d</sup>
</td><td align="justify">41:33</td><td align="justify">99.92</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">99.84</td><td align="justify">98.62</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.95</td><td align="justify">99.92</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.95</td><td align="justify">99.92</td></tr><tr><td align="left">RazerS 3</td><td align="justify">54:59</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left">Yara</td><td align="justify">3:06</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td></tr><tr><td align="left">BitMapper</td><td align="justify">2:57</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.98</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr></tbody></table><table-wrap-foot><p>Bowtie2 <sup>a</sup>, BWA <sup>b</sup>, and GEM <sup>c</sup> represent the results in default sensitivity mode, while Bowtie2, BWA, and GEM represent the results in high sensitivity mode. The RazerS 3 <sup>d</sup> and RazerS 3 represent the results of RazerS 3 in default and full sensitivity mode, respectively. Note that in default mode, RazerS 3 is designed to find 99% of mapping locations, while Bowtie2, BWA, and GEM are designed to find the best mapping locations for each reads</p></table-wrap-foot></table-wrap>
</p>
        <p>Compared to the best-mappers, all-mappers usually achieve higher sensitivity. For mrFAST, it is interesting that its Rabema any-best and all-best scores were 53.69 % and 54.09 % at edit distance 5, which were much lower than other all-mappers. Masai and Hobbes 2 lost a few mapping locations due to their heuristic methods. BitMapper and RazerS 3 were the only two mappers identifying 100 % all of the best and any of the best mapping locations. Note that the all, all-best and any-best scores of RazerS 3 in full sensitivity mode were 100 %, since we used the output of RazerS 3 in full sensitivity mode as the baseline for Rabema benchmark. However, it was extremely slow. The Rabema all-score for BitMapper was nearly 100 %, which was the best except RazerS 3 in full sensitivity. We did not present the sensitivity of Yara in Table <xref rid="Tab1" ref-type="table">1</xref>, since it could not generate CIGAR strings for suboptimal alignments, which led to incorrect output of Rabema benchmark.</p>
      </sec>
      <sec id="Sec15">
        <title>Rabema benchmark results on real data</title>
        <p>According to the results above, we found that the sensitivities of GEM and BWA on both high and default sensitivity modes were not high enough for the applications needing all or nearly all mapping locations. For Bowtie 2, although the sensitivity on high sensitivity mode has been improved, it spent much more time and memory than all-mappers. Thus, we would not present the results of them in the following.</p>
        <p>To compare the sensitivity of all-mappers on real data sets, we also measured the Rabema scores using 1 million 100 bp reads of human, as shown in Table <xref rid="Tab2" ref-type="table">2</xref>. And to evaluate the sensitivity for different genomes, the Rabema scores for caenorhabditis elegans genome and arabidopsis thaliana genome were presented in Tables <xref rid="Tab3" ref-type="table">3</xref> and <xref rid="Tab4" ref-type="table">4</xref>, respectively. According to these results, we fonud that the sensitivity of Bitmapper was also best among all of the all-mappers except RazerS 3 in full sensitivity, which generated the baseline of Rabema benchmark. As the results in Table <xref rid="Tab1" ref-type="table">1</xref>, the Rabema scores of Yara were not included in Tables <xref rid="Tab2" ref-type="table">2</xref>, <xref rid="Tab3" ref-type="table">3</xref> and <xref rid="Tab4" ref-type="table">4</xref> due to the absence of CIGAR strings.<table-wrap id="Tab2"><label>Table 2</label><caption><p>Rabema benchmark results (<italic>normalized found interval</italic>) for 1 million 100 bp real reads of human</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Mapper</th><th align="left">Time</th><th align="left" colspan="4">Benchmark category</th><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/></tr></thead><tbody><tr><td align="left"/><td align="justify">[min:sec]</td><td align="justify" colspan="4">All[%]</td><td align="justify" colspan="4">All-best[%]</td><td align="justify" colspan="4">Any-best[%]</td></tr><tr><td align="left">Masai</td><td align="justify">42:50</td><td align="justify">99.94</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">98.93</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.70</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.80</td></tr><tr><td align="left">Hobbes 2</td><td align="justify">60:05</td><td align="justify">99.89</td><td align="justify">99.99</td><td align="justify">99.97</td><td align="justify">99.97</td><td align="justify">99.98</td><td align="justify">99.98</td><td align="justify">99.98</td><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.96</td><td align="justify">99.91</td><td align="justify">98.43</td><td align="justify"/><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">99.91</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td></tr><tr><td align="left">mrFAST</td><td align="justify">98:06</td><td align="justify">99.79</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.91</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.92</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">96.45</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.96</td><td align="justify">93.61</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.97</td><td align="justify">93.88</td></tr><tr><td align="left">RazerS 3 <sup>a</sup>
</td><td align="justify">372:21</td><td align="justify">99.90</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">99.80</td><td align="justify">98.45</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.90</td><td align="justify">99.47</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.91</td><td align="justify">99.70</td></tr><tr><td align="left">RazerS 3</td><td align="justify">512:46</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left">Yara</td><td align="justify">29:25</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td></tr><tr><td align="left">BitMapper</td><td align="justify">17:03</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.98</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.98</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td></tr></tbody></table><table-wrap-foot><p>RazerS 3 <sup>a</sup>: the result of RazerS 3 in default sensitivity mode (i.e., finding 99% of mapping locations); RazerS 3: the result of RazerS 3 in full sensitivity mode (i.e., finding 100% of mapping locations)</p></table-wrap-foot></table-wrap>
<table-wrap id="Tab3"><label>Table 3</label><caption><p>Rabema benchmark results (<italic>normalized found interval</italic>) for 1 million 100 bp real reads of caenorhabditis elegans</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Mapper</th><th align="left">Time</th><th align="left" colspan="4">Benchmark category</th><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/></tr><tr><th align="left"/><th align="left">[min:sec]</th><th align="left" colspan="4">All[%]</th><th align="left" colspan="4">All-best[%]</th><th align="left" colspan="4">Any-best[%]</th></tr></thead><tbody><tr><td align="left">Masai</td><td align="justify">3:02</td><td align="justify">99.93</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.92</td><td align="justify">99.67</td><td align="justify">98.14</td><td align="justify"/><td align="justify">99.98</td><td align="justify">99.93</td><td align="justify">99.78</td><td align="justify"/><td align="justify">99.99</td><td align="justify">99.95</td><td align="justify">99.89</td></tr><tr><td align="left">Hobbes 2</td><td align="justify">2:01</td><td align="justify">99.94</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.99</td><td align="justify">99.86</td><td align="justify">98.18</td><td align="justify"/><td align="justify">99.99</td><td align="justify">99.96</td><td align="justify">99.72</td><td align="justify"/><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">99.97</td></tr><tr><td align="left">mrFAST</td><td align="justify">3:40</td><td align="justify">98.89</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.95</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.96</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">96.50</td><td align="justify"/><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">93.43</td><td align="justify"/><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">93.89</td></tr><tr><td align="left">RazerS 3 <sup>a</sup>
</td><td align="justify">7:18</td><td align="justify">99.95</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.99</td><td align="justify">99.79</td><td align="justify">98.64</td><td align="justify"/><td align="justify">99.99</td><td align="justify">99.89</td><td align="justify">99.61</td><td align="justify"/><td align="justify">99.99</td><td align="justify">99.95</td><td align="justify">99.84</td></tr><tr><td align="left">RazerS 3</td><td align="justify">7:53</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left">Yara</td><td align="justify">1:25</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td></tr><tr><td align="left">BitMapper</td><td align="justify">0:32</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.98</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.98</td><td align="justify"/><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.98</td></tr></tbody></table><table-wrap-foot><p>RazerS 3 <sup>a</sup>: the result of RazerS 3 in default sensitivity mode (i.e., finding 99% of mapping locations); RazerS 3: the result of RazerS 3 in full sensitivity mode (i.e., finding 100% of mapping locations)</p></table-wrap-foot></table-wrap>
<table-wrap id="Tab4"><label>Table 4</label><caption><p>Rabema benchmark results (<italic>normalized found interval</italic>) for 1 million 101 bp real reads of arabidopsis thaliana</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left">Mapper</th><th align="left">Time</th><th align="left" colspan="4">Benchmark category</th><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/><th align="left"/></tr><tr><th align="left"/><th align="left">[min:sec]</th><th align="left" colspan="4">All[%]</th><th align="left" colspan="4">All-best[%]</th><th align="left" colspan="4">Any-best[%]</th></tr></thead><tbody><tr><td align="left">Masai</td><td align="justify">3:05</td><td align="justify">99.96</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.97</td><td align="justify">99.96</td><td align="justify">99.25</td><td align="justify"/><td align="justify">99.98</td><td align="justify">99.96</td><td align="justify">99.27</td><td align="justify"/><td align="justify">99.98</td><td align="justify">99.96</td><td align="justify">99.53</td></tr><tr><td align="left">Hobbes 2</td><td align="justify">1:52</td><td align="justify">99.92</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.97</td><td align="justify">99.88</td><td align="justify">98.72</td><td align="justify"/><td align="justify">99.98</td><td align="justify">99.99</td><td align="justify">99.64</td><td align="justify"/><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">99.98</td></tr><tr><td align="left">mrFAST</td><td align="justify">2:30</td><td align="justify">99.88</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.98</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">97.94</td><td align="justify"/><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">97.70</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">98.50</td></tr><tr><td align="left">RazerS 3 <sup>a</sup>
</td><td align="justify">8:30</td><td align="justify">99.88</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.98</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.99</td><td align="justify">99.70</td><td align="justify">98.12</td><td align="justify"/><td align="justify">99.98</td><td align="justify">99.70</td><td align="justify">98.63</td><td align="justify"/><td align="justify">99.99</td><td align="justify">99.84</td><td align="justify">99.27</td></tr><tr><td align="left">RazerS 3</td><td align="justify">9:06</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify"/><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">100.00</td></tr><tr><td align="left">Yara</td><td align="justify">1:25</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">—</td></tr><tr><td align="left">BitMapper</td><td align="justify">0:32</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">100.00</td><td align="justify">99.99</td></tr><tr><td align="left"/><td align="justify"/><td align="justify"/><td align="justify">99.98</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify"/><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">99.99</td><td align="justify"/><td align="justify">99.99</td><td align="justify">100.00</td><td align="justify">99.99</td></tr></tbody></table><table-wrap-foot><p>RazerS 3 <sup>a</sup>: the result of RazerS 3 in default sensitivity mode (i.e., finding 99% of mapping locations); RazerS 3: the result of RazerS 3 in full sensitivity mode (i.e., finding 100% of mapping locations)</p></table-wrap-foot></table-wrap>
</p>
      </sec>
    </sec>
    <sec id="Sec16">
      <title>Performance comparison on large data sets</title>
      <p>In order to compare the performance of BitMapper with other mappers on large data sets, we selected a single-end data set consisting of 10 million 100 bp reads from specimen HG00096 of the 1000 Genome project. And to compare the performance in different genomes, we used the first 10 million 100 bp reads of the data sets SRX026594 and the first 10 million 101 bp reads of SRR1604937, which were obtained from the DNA Data Bank of Japan (DDBJ) repository and National Center for Biotechnology Information (NCBI) repository, respectively. The first 10 million read pairs of these data sets were also used to measure the performance of paired-end alignment. Moreover, to demonstrate that Bitmapper also works well for longer reads, a real data set and two simulated data sets were used. The real data set consists of the first 10 million 151 bp reads of human in the HiSeq 2500 NA12878 demo data set in [<xref ref-type="bibr" rid="CR23">23</xref>], while the two simulated data sets include 10 million 300 bp reads of caenorhabditis elegans and arabidopsis thaliana, respectively. All of these data sets with 100 bp, 151 bp and 300 bp reads were mapped to their reference genomes using edit distance threshold 5, 7 and 15, respectively.</p>
      <p>Because the Rabema benchmark cannot be implemented in such large data sets, we used the percentage of mapped reads and the number of mapping sites to measure the sensitivity, instead of Rabema scores. For running time comparison, the results of different mappers with single and eight threads were presented in Tables <xref rid="Tab5" ref-type="table">5</xref>, <xref rid="Tab6" ref-type="table">6</xref>, <xref rid="Tab7" ref-type="table">7</xref> and <xref rid="Tab8" ref-type="table">8</xref>. Note that since Masai and mrFAST do not support multi-threading, the results of them with eight threads were omitted. In addition, peak memory consumption was also compared.<table-wrap id="Tab5"><label>Table 5</label><caption><p>Results for mapping 10 million 100 bp and 151 bp single-end reads against human genome</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left" colspan="4">100 bp reads</th><th align="left"/><th align="left"/><th align="left" colspan="4">151 bp reads</th><th align="left"/><th align="left"/></tr><tr><th align="left">Mapper</th><th align="left" colspan="2">Time[min:sec]</th><th align="left">Peak</th><th align="left">Mapping</th><th align="left">Mapped</th><th align="left"/><th align="left" colspan="2">Time [min:sec]</th><th align="left">Peak</th><th align="left">Mapping</th><th align="left">Mapped</th><th align="left"/></tr><tr><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">sites[million]</th><th align="left">reads[%]</th><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">sites[million]</th><th align="left">reads[%]</th><th align="left"/></tr></thead><tbody><tr><td align="left">Masai</td><td align="justify">361:35</td><td align="justify">—</td><td align="justify">20.1GB</td><td align="justify">1371.18</td><td align="justify">92.2736</td><td align="justify"/><td align="justify">602:06</td><td align="justify">—</td><td align="justify">21.3GB</td><td align="justify">939.89</td><td align="justify">93.8483</td><td align="left"/></tr><tr><td align="left">Hobbes 2</td><td align="justify">587:04</td><td align="justify">135:10</td><td align="justify">14.0GB</td><td align="justify">1368.86</td><td align="justify">92.2767</td><td align="justify"/><td align="justify">694:53</td><td align="justify">151:52</td><td align="justify">14.5GB</td><td align="justify">936.42</td><td align="justify">93.8481</td><td align="left"/></tr><tr><td align="left">mrFAST</td><td align="justify">921:46</td><td align="justify">—</td><td align="justify">4.9GB</td><td align="justify">1374.76</td><td align="justify">92.2572</td><td align="justify"/><td align="justify">795:59</td><td align="justify">—</td><td align="justify">6.5GB</td><td align="justify">939.48</td><td align="justify">93.7376</td><td align="left"/></tr><tr><td align="left">RazerS 3 <sup>a</sup>
</td><td align="justify">—</td><td align="justify">—</td><td align="justify">&gt;24GB</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">&gt;24GB</td><td align="justify">—</td><td align="justify">—</td><td align="left"/></tr><tr><td align="left">RazerS 3</td><td align="justify">—</td><td align="justify">—</td><td align="justify">&gt;24GB</td><td align="justify">—</td><td align="justify">—</td><td align="justify"/><td align="justify">—</td><td align="justify">—</td><td align="justify">&gt;24GB</td><td align="justify">—</td><td align="justify">—</td><td align="left"/></tr><tr><td align="left">Yara</td><td align="justify">278:09</td><td align="justify">78:10</td><td align="justify">9.0GB</td><td align="justify">1367.42</td><td align="justify">92.2658</td><td align="justify"/><td align="justify">389:56</td><td align="justify">93:15</td><td align="justify">9.3GB</td><td align="justify">939.44</td><td align="justify">93.8480</td><td align="left"/></tr><tr><td align="left">BitMapper</td><td align="justify">158:57</td><td align="justify">32:59</td><td align="justify">17.9GB</td><td align="justify">1375.68</td><td align="justify">92.2771</td><td align="justify"/><td align="justify">135:06</td><td align="justify">27:56</td><td align="justify">19.2GB</td><td align="justify">940.16</td><td align="justify">93.8487</td><td align="left"/></tr></tbody></table><table-wrap-foot><p>RazerS 3 <sup>a</sup>: the result of RazerS 3 in default sensitivity mode (i.e., finding 99% of mapping locations); RazerS 3: the result of RazerS 3 in full sensitivity mode (i.e., finding 100% of mapping locations)</p></table-wrap-foot></table-wrap>
<table-wrap id="Tab6"><label>Table 6</label><caption><p>Results for mapping 10 million 100 bp single-end reads against caenorhabditis elegans and arabidopsis thaliana</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left" colspan="4">Caenorhabditis elegans</th><th align="left"/><th align="left"/><th align="left" colspan="4">Arabidopsis thaliana</th><th align="left"/><th align="left"/></tr><tr><th align="left">Mapper</th><th align="left" colspan="2">Time [min:sec]</th><th align="left">Peak</th><th align="left">Mapping</th><th align="left">Mapped</th><th align="left"/><th align="left" colspan="2">Time [min:sec]</th><th align="left">Peak</th><th align="left">Mapping</th><th align="left">Mapped</th><th align="left"/></tr><tr><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">sites[million]</th><th align="left">reads[%]</th><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">sites[million]</th><th align="left">reads[%]</th><th align="left"/></tr></thead><tbody><tr><td align="left">Masai</td><td align="justify">22:28</td><td align="justify">—</td><td align="justify">3.2GB</td><td align="justify">54.61</td><td align="justify">90.4140</td><td align="justify"/><td align="justify">21:06</td><td align="justify">—</td><td align="justify">3.3GB</td><td align="justify">57.83</td><td align="justify">98.2578</td><td align="left"/></tr><tr><td align="left">Hobbes 2</td><td align="justify">16:51</td><td align="justify">4:42</td><td align="justify">0.9GB</td><td align="justify">55.40</td><td align="justify">90.4150</td><td align="justify"/><td align="justify">16:05</td><td align="justify">3:42</td><td align="justify">1.0GB</td><td align="justify">57.76</td><td align="justify">98.2616</td><td align="left"/></tr><tr><td align="left">mrFAST</td><td align="justify">35:15</td><td align="justify">—</td><td align="justify">4.2GB</td><td align="justify">55.60</td><td align="justify">90.4119</td><td align="justify"/><td align="justify">23:12</td><td align="justify">—</td><td align="justify">4.3GB</td><td align="justify">57.94</td><td align="justify">98.2609</td><td align="left"/></tr><tr><td align="left">RazerS 3 <sup>a</sup>
</td><td align="justify">69:24</td><td align="justify">59:39</td><td align="justify">12.0GB</td><td align="justify">55.24</td><td align="justify">90.4118</td><td align="justify"/><td align="justify">86:39</td><td align="justify">72:31</td><td align="justify">10.3GB</td><td align="justify">57.49</td><td align="justify">98.2551</td><td align="left"/></tr><tr><td align="left">RazerS 3</td><td align="justify">75:27</td><td align="justify">61:40</td><td align="justify">12.6GB</td><td align="justify">55.61</td><td align="justify">90.4154</td><td align="justify"/><td align="justify">89:31</td><td align="justify">75:26</td><td align="justify">10.4GB</td><td align="justify">57.96</td><td align="justify">98.2622</td><td align="left"/></tr><tr><td align="left">Yara</td><td align="justify">13:42</td><td align="justify">3:37</td><td align="justify">1.1GB</td><td align="justify">54.65</td><td align="justify">90.4150</td><td align="justify"/><td align="justify">15:13</td><td align="justify">4:01</td><td align="justify">1.2GB</td><td align="justify">57.87</td><td align="justify">98.2608</td><td align="left"/></tr><tr><td align="left">BitMapper</td><td align="justify">5:08</td><td align="justify">1:25</td><td align="justify">4.5GB</td><td align="justify">55.63</td><td align="justify">90.4159</td><td align="justify"/><td align="justify">5:24</td><td align="justify">1:30</td><td align="justify">4.5GB</td><td align="justify">57.94</td><td align="justify">98.2631</td><td align="left"/></tr></tbody></table><table-wrap-foot><p>RazerS 3 <sup>a</sup>: the result of RazerS 3 in default sensitivity mode (i.e., finding 99% of mapping locations); RazerS 3: the result of RazerS 3 in full sensitivity mode (i.e., finding 100% of mapping locations)</p></table-wrap-foot></table-wrap>
<table-wrap id="Tab7"><label>Table 7</label><caption><p>Results for mapping 10 million 300bp single-end reads against caenorhabditis elegans and arabidopsis thaliana</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left" colspan="4">Caenorhabditis elegans</th><th align="left"/><th align="left"/><th align="left" colspan="4">Arabidopsis thaliana</th><th align="left"/><th align="left"/></tr><tr><th align="left">Mapper</th><th align="left" colspan="2">Time [min:sec]</th><th align="left">Peak</th><th align="left">Mapping</th><th align="left">Mapped</th><th align="left"/><th align="left" colspan="2">Time [min:sec]</th><th align="left">Peak</th><th align="left">Mapping</th><th align="left">Mapped</th><th align="left"/></tr><tr><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">sites[million]</th><th align="left">reads[%]</th><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">sites[million]</th><th align="left">reads[%]</th><th align="left"/></tr></thead><tbody><tr><td align="left">Masai</td><td align="justify">48:54</td><td align="justify">—</td><td align="justify">11.5GB</td><td align="justify">17.44</td><td align="justify">99.9894</td><td align="justify"/><td align="justify">46:26</td><td align="justify">—</td><td align="justify">11.8GB</td><td align="justify">14.83</td><td align="justify">99.9884</td><td align="left"/></tr><tr><td align="left">Hobbes 2</td><td align="justify">66:38</td><td align="justify">13:12</td><td align="justify">0.9GB</td><td align="justify">2.14</td><td align="justify">0.5327</td><td align="justify"/><td align="justify">64:25</td><td align="justify">12:50</td><td align="justify">1.0GB</td><td align="justify">0.01</td><td align="justify">0.0219</td><td align="left"/></tr><tr><td align="left">mrFAST</td><td align="justify">80:56</td><td align="justify">—</td><td align="justify">9.9GB</td><td align="justify">16.71</td><td align="justify">96.1888</td><td align="justify"/><td align="justify">47:00</td><td align="justify">—</td><td align="justify">10.0GB</td><td align="justify">14.27</td><td align="justify">96.2356</td><td align="left"/></tr><tr><td align="left">RazerS 3 <sup>a</sup>
</td><td align="justify">195:07</td><td align="justify">182:34</td><td align="justify">11.9GB</td><td align="justify">17.43</td><td align="justify">99.9894</td><td align="justify"/><td align="justify">172:21</td><td align="justify">155:48</td><td align="justify">12.0GB</td><td align="justify">14.82</td><td align="justify">99.9884</td><td align="left"/></tr><tr><td align="left">RazerS 3</td><td align="justify">209:30</td><td align="justify">185:29</td><td align="justify">12.6GB</td><td align="justify">17.44</td><td align="justify">99.9894</td><td align="justify"/><td align="justify">185:05</td><td align="justify">160:02</td><td align="justify">12.0GB</td><td align="justify">14.83</td><td align="justify">99.9884</td><td align="left"/></tr><tr><td align="left">Yara</td><td align="justify">34:20</td><td align="justify">7:43</td><td align="justify">2.1GB</td><td align="justify">17.33</td><td align="justify">99.9894</td><td align="justify"/><td align="justify">29:44</td><td align="justify">6:34</td><td align="justify">2.1GB</td><td align="justify">14.72</td><td align="justify">99.9884</td><td align="left"/></tr><tr><td align="left">BitMapper</td><td align="justify">12:26</td><td align="justify">4:57</td><td align="justify">10.1GB</td><td align="justify">17.43</td><td align="justify">99.9894</td><td align="justify"/><td align="justify">12:10</td><td align="justify">4:55</td><td align="justify">10.2GB</td><td align="justify">14.83</td><td align="justify">99.9884</td><td align="left"/></tr></tbody></table><table-wrap-foot><p>RazerS 3 <sup>a</sup>: the result of RazerS 3 in default sensitivity mode (i.e., finding 99% of mapping locations); RazerS 3: the result of RazerS 3 in full sensitivity mode (i.e., finding 100% of mapping locations)</p></table-wrap-foot></table-wrap>
<table-wrap id="Tab8"><label>Table 8</label><caption><p>Results for mapping 10 million paired-end reads</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"/><th align="left" colspan="4">Human</th><th align="left"/><th align="left" colspan="4">Caenorhabditis elegans</th><th align="left"/><th align="left" colspan="4">Arabidopsis thaliana</th></tr><tr><th align="left">Mapper</th><th align="left" colspan="2">Time [min:sec]</th><th align="left">Peak</th><th align="left">Mapped</th><th align="left"/><th align="left" colspan="2">Time [min:sec]</th><th align="left">Peak</th><th align="left">Mapped</th><th align="left"/><th align="left" colspan="2">Time [min:sec]</th><th align="left">Peak</th><th align="left">Mapped</th></tr><tr><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">pairs[%]</th><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">pairs[%]</th><th align="left"/><th align="left">1 thr</th><th align="left">8 thr</th><th align="left">memory</th><th align="left">pairs[%]</th></tr></thead><tbody><tr><td align="left">Masai</td><td align="justify">464:07</td><td align="justify">—</td><td align="justify">16.8GB</td><td align="justify">84.8984</td><td align="justify"/><td align="justify">31:07</td><td align="justify">—</td><td align="justify">11.3GB</td><td align="justify">65.8674</td><td align="justify"/><td align="justify">29:40</td><td align="justify">—</td><td align="justify">11.6GB</td><td align="justify">64.9149</td></tr><tr><td align="left">Hobbes 2</td><td align="justify">439:05</td><td align="justify">105:29</td><td align="justify">14.6GB</td><td align="justify">87.3945</td><td align="justify"/><td align="justify">80:04</td><td align="justify">22:41</td><td align="justify">0.9GB</td><td align="justify">67.1739</td><td align="justify"/><td align="justify">23:59</td><td align="justify">6:21</td><td align="justify">1.0GB</td><td align="justify">68.1224</td></tr><tr><td align="left">RazerS 3 <sup>a</sup>
</td><td align="justify">—</td><td align="justify">—</td><td align="justify">&gt;24GB</td><td align="justify">—</td><td align="justify"/><td align="justify">61:15</td><td align="justify">47:11</td><td align="justify">16.4GB</td><td align="justify">67.1841</td><td align="justify"/><td align="justify">51:25</td><td align="justify">41:31</td><td align="justify">14.9GB</td><td align="justify">68.1250</td></tr><tr><td align="left">RazerS 3</td><td align="justify">—</td><td align="justify">—</td><td align="justify">&gt;24GB</td><td align="justify">—</td><td align="justify"/><td align="justify">66:28</td><td align="justify">50:13</td><td align="justify">17.4GB</td><td align="justify">67.1894</td><td align="justify"/><td align="justify">55:33</td><td align="justify">42:38</td><td align="justify">17.1GB</td><td align="justify">68.1473</td></tr><tr><td align="left">Yara</td><td align="justify">489:58</td><td align="justify">117:40</td><td align="justify">13.2GB</td><td align="justify">87.1614</td><td align="justify"/><td align="justify">23:43</td><td align="justify">5:47</td><td align="justify">2.0GB</td><td align="justify">67.1058</td><td align="justify"/><td align="justify">28:09</td><td align="justify">6:52</td><td align="justify">2.2GB</td><td align="justify">66.8150</td></tr><tr><td align="left">BitMapper</td><td align="justify">177:47</td><td align="justify">39:39</td><td align="justify">21.5GB</td><td align="justify">87.4233</td><td align="justify"/><td align="justify">11:16</td><td align="justify">3:15</td><td align="justify">8.0GB</td><td align="justify">67.1883</td><td align="justify"/><td align="justify">6:47</td><td align="justify">2:20</td><td align="justify">8.1GB</td><td align="justify">68.1500</td></tr></tbody></table><table-wrap-foot><p>RazerS 3 <sup>a</sup>: the result of RazerS 3 in default sensitivity mode (i.e., finding 99% of mapping locations); RazerS 3: the result of RazerS 3 in full sensitivity mode (i.e., finding 100% of mapping locations)</p></table-wrap-foot></table-wrap>
</p>
      <sec id="Sec17">
        <title>Sensitivity and running time comparison</title>
        <p>Table <xref rid="Tab5" ref-type="table">5</xref> shows the results of mapping 10 million 100 bp and 151 bp single-end reads to the whole human genome. Results of the best-mappers including GEM, Bowtie 2 and BWA were left out, because the sensitivity of them is usually substantially less than that of all-mappers and the running time is usually longer, as shown in Table <xref rid="Tab1" ref-type="table">1</xref> and Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S3. The results in Table <xref rid="Tab5" ref-type="table">5</xref> show that BitMapper was the best in terms of sensitivity and running time on the human genome data sets. For 10 million 151 bp reads, it was nearly 3 times faster than the second fastest read mapper Yara, and achieved highest sensitivity with 940.16 million mapping locations identified and 93.8487 % reads mapped in the human genome. Compared to Masai, BitMapper was more than 4 times faster and found more mapping locations. For 10 million 100 bp reads, Bitmapper also presented the best performance among all read mappers. The results of RazerS 3 were not shown, since the memory requirement of RazerS 3 was larger than the memory capacity of our computer. Similarly, BitMapper was superior in mapping 10 million single-end reads against the genomes of caenorhabditis elegans and arabidopsis thaliana, as shown in Table <xref rid="Tab6" ref-type="table">6</xref>. And for longer 300 bp reads, Bitmapper was still more efficient than others, as shown in Table <xref rid="Tab7" ref-type="table">7</xref>.</p>
        <p>Finally, Table <xref rid="Tab8" ref-type="table">8</xref> shows the experimental results for paired-end alignment, where three data sets consisting of 10 million read pairs from different genomes were used to evaluate the performance. Again, BitMapper was the best, 2.5 times faster than Hobbes 2, nearly 3 times faster than Masai and Yara in human genome. Note that the results of the human genome using RazerS 3 are not shown here, because the memory requirement of RazerS 3 was larger than the memory capacity of our computer. For caenorhabditis elegans and arabidopsis thaliana, BitMapper was also several times faster than the existing all-mappers. In addition, BitMapper still showed great performance in sensitivity comparison. We did not present the results of mrFAST, since it reported many extra locations. Thus, the running time was extremely long.</p>
      </sec>
      <sec id="Sec18">
        <title>Memory usage comparison</title>
        <p>If a reference genome is large, the memory usage of most mappers mainly depends on the size of the genome and the index for it. For instance, the human genome could be regarded as a long string including 3.15 billion symbols so that 3GB is required to store them. For hash table index, the locations for each <italic>q</italic>-gram should be saved and a location is represented by a 32-bit integer. Thus, BitMapper and Hobbes 2, which both index the reference genome using hash tables, require more than 14GB to load the index and genome. Similarly, Masai requires large memory space and uses about 20GB to map 10 million reads to human genome. Although the hash table index is also used in mrFAST, only 7GB is used since it splits the whole human genome and index into several segments and loads one of them at a time. Yara is another read mapper which requires small memory space, since it uses the BWT and FM-index. The memory usage of RazerS 3 mainly depends on the number of mapping locations. It needs more than 24GB to map 10 million 151 bp reads of human.</p>
      </sec>
    </sec>
  </sec>
  <sec id="Sec19" sec-type="conclusion">
    <title>Conclusion</title>
    <p>BitMapper is designed to find all mapping locations for each read based on bit-vector computing. In experiments on both simulated and real data sets, it achieved nearly full sensitivity and superior speed, outperforming existing state-of-the-art all-mappers.</p>
    <p>The verification of edit distance constitutes a significant portion of the whole running time. We propose a new vectorized Gene Myers’ bit-vector algorithm, which calculates the edit distance of a read to multiple locations in a given genome. To make full use of the algorithm, the traditional verification scheme is redesigned in BitMapper.</p>
    <p>Recently, a new SIMD instruction set AVX2 has been applied to many CPUs. Thus, the performance of our vectorized Gene Myers’ bit-vector algorithm will be improved further by using AVX2 in the future. The vectorized bit-vector computing approach can also be used to accelerate filtration, which is a future research direction in BitMapper.</p>
    <p>BitMapper is implemented in C under a GPL license and is able to download at <ext-link ext-link-type="uri" xlink:href="http://home.ustc.edu.cn/%7Echhy">http://home.ustc.edu.cn/%7Echhy</ext-link>.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Additional file</title>
    <sec id="Sec20">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2015_626_MOESM1_ESM.pdf">
            <label>Additional file 1</label>
            <caption>
              <p><bold>Supplementary material.</bold> This file consists of the configuration of each read mapper and the analysis of the two vectorized verification schemes. Besides, we present the pseudo code of our vectorized bit-vector algorithm and the performance comparison between it and other existing implementation of the Gene Myers’ algorithmin in the additional file.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <fn-group>
    <fn>
      <p>
        <bold>Competing interests</bold>
      </p>
      <p>The authors declare that they have no competing interests.</p>
    </fn>
    <fn>
      <p>
        <bold>Authors’ contributions</bold>
      </p>
      <p>HC developed the vectorized Gene Myers’ bit-vector algorithm, and implemented the whole software. HC, JY and YX designed the strategies in the software. HC,YX and YS drafted the manuscript. HJ tested the software and revised the bugs of it. All authors read and approved the final manuscript.</p>
    </fn>
  </fn-group>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors would like to thank Yanan Zhao for her suggestions about our article. This work was partially supported by the Key Project of The National Nature Science Foundation of China under the grant No. 60533020 and the Fund for Foreign Scholars in University Research and Teaching Programs(B07033).</p>
  </ack>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1</label>
      <mixed-citation publication-type="other">Langmead B, Trapnell C, Pop M, Salzberg SL. Ultrafast and memory-efficient alignment of short dna sequences to the human genome. Genome Biol. 2009; 10(3):25.</mixed-citation>
    </ref>
    <ref id="CR2">
      <label>2</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with bowtie 2</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>4</issue>
        <fpage>357</fpage>
        <lpage>9</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Li</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Durbin</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate short read alignment with burrows–wheeler transform</article-title>
        <source>Bioinformatics</source>
        <year>2009</year>
        <volume>25</volume>
        <issue>14</issue>
        <fpage>1754</fpage>
        <lpage>60</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp324</pub-id>
        <pub-id pub-id-type="pmid">19451168</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Marco-Sola</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Sammeth</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Guigó</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Ribeca</surname>
            <given-names>P</given-names>
          </name>
        </person-group>
        <article-title>The gem mapper: fast, accurate and versatile alignment by filtration</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>12</issue>
        <fpage>1185</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.2221</pub-id>
        <pub-id pub-id-type="pmid">23103880</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weese</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Holtgrewe</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Reinert</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Razers 3: faster, fully sensitive read mapping</article-title>
        <source>Bioinformatics</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>20</issue>
        <fpage>2592</fpage>
        <lpage>599</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts505</pub-id>
        <pub-id pub-id-type="pmid">22923295</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6</label>
      <mixed-citation publication-type="other">Kim J, Li C, Xie X. Improving read mapping using additional prefix grams. BMC Bioinformatics. 2014; 15(1):42.</mixed-citation>
    </ref>
    <ref id="CR7">
      <label>7</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hach</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Hormozdiari</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Alkan</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Hormozdiari</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
          <name>
            <surname>Eichler</surname>
            <given-names>EE</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>mrsfast: a cache-oblivious algorithm for short-read mapping</article-title>
        <source>Nat Methods</source>
        <year>2010</year>
        <volume>7</volume>
        <issue>8</issue>
        <fpage>576</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth0810-576</pub-id>
        <pub-id pub-id-type="pmid">20676076</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8</label>
      <mixed-citation publication-type="other">Xin H, Lee D, Hormozdiari F, Yedkar S, Mutlu O, Alkan C. Accelerating read mapping with fasthash. BMC Genomics. 2013; 14(Suppl 1):13.</mixed-citation>
    </ref>
    <ref id="CR9">
      <label>9</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ahmadi</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Behm</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Honnalli</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Weng</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Xie</surname>
            <given-names>X</given-names>
          </name>
        </person-group>
        <article-title>Hobbes: optimized gram-based methods for efficient read alignment</article-title>
        <source>Nucleic Acids Res</source>
        <year>2012</year>
        <volume>40</volume>
        <fpage>41</fpage>
        <lpage>1</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkr1246</pub-id>
      </element-citation>
    </ref>
    <ref id="CR10">
      <label>10</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Siragusa</surname>
            <given-names>E</given-names>
          </name>
          <name>
            <surname>Weese</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Reinert</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Fast and accurate read mapping with approximate seeds and multiple backtracking</article-title>
        <source>Nucleic Acids Res</source>
        <year>2013</year>
        <volume>41</volume>
        <issue>7</issue>
        <fpage>78</fpage>
        <lpage>8</lpage>
        <pub-id pub-id-type="doi">10.1093/nar/gkt005</pub-id>
      </element-citation>
    </ref>
    <ref id="CR11">
      <label>11</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Myers</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>A fast bit-vector algorithm for approximate string matching based on dynamic programming</article-title>
        <source>J ACM (JACM)</source>
        <year>1999</year>
        <volume>46</volume>
        <issue>3</issue>
        <fpage>395</fpage>
        <lpage>415</lpage>
        <pub-id pub-id-type="doi">10.1145/316542.316550</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hyyrö</surname>
            <given-names>H</given-names>
          </name>
        </person-group>
        <article-title>A bit-vector algorithm for computing levenshtein and damerau edit distances</article-title>
        <source>Nord J Comput</source>
        <year>2003</year>
        <volume>10</volume>
        <issue>1</issue>
        <fpage>29</fpage>
        <lpage>39</lpage>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13</label>
      <mixed-citation publication-type="other">Siragusa WD E, Reinert K. Yara: well-defined alignment of high-throughput sequencing reads. http://www.seqan.de/projects/yara/.</mixed-citation>
    </ref>
    <ref id="CR14">
      <label>14</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Rasmussen</surname>
            <given-names>KR</given-names>
          </name>
          <name>
            <surname>Stoye</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>EW</given-names>
          </name>
        </person-group>
        <article-title>Efficient q-gram filters for finding all <italic>ε</italic>-matches over a given length</article-title>
        <source>J Comput Biol</source>
        <year>2006</year>
        <volume>13</volume>
        <issue>2</issue>
        <fpage>296</fpage>
        <lpage>308</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2006.13.296</pub-id>
        <pub-id pub-id-type="pmid">16597241</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weese</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Emde</surname>
            <given-names>AK</given-names>
          </name>
          <name>
            <surname>Rausch</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Döring</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Reinert</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Razers-fast read mapping with sensitivity control</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>19</volume>
        <issue>9</issue>
        <fpage>1646</fpage>
        <lpage>54</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.088823.108</pub-id>
        <pub-id pub-id-type="pmid">19592482</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sellers</surname>
            <given-names>PH</given-names>
          </name>
        </person-group>
        <article-title>The theory and computation of evolutionary distances: pattern recognition</article-title>
        <source>J Algorithms</source>
        <year>1980</year>
        <volume>1</volume>
        <issue>4</issue>
        <fpage>359</fpage>
        <lpage>73</lpage>
        <pub-id pub-id-type="doi">10.1016/0196-6774(80)90016-4</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ukkonen</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Finding approximate patterns in strings</article-title>
        <source>J Algorithms</source>
        <year>1985</year>
        <volume>6</volume>
        <issue>1</issue>
        <fpage>132</fpage>
        <lpage>7</lpage>
        <pub-id pub-id-type="doi">10.1016/0196-6774(85)90023-9</pub-id>
      </element-citation>
    </ref>
    <ref id="CR18">
      <label>18</label>
      <mixed-citation publication-type="other">Holtgrewe M. Mason–a read simulator for second generation sequencing data. Technical Report FU Berlin. 2010.</mixed-citation>
    </ref>
    <ref id="CR19">
      <label>19</label>
      <mixed-citation publication-type="other">1000 Genomes: a Deep Catalog of Human Genetic Variation. http://www.1000genomes.org/data.</mixed-citation>
    </ref>
    <ref id="CR20">
      <label>20</label>
      <mixed-citation publication-type="other">DNA Data Bank of Japan. <ext-link ext-link-type="uri" xlink:href="ftp://ftp.ddbj.nig.ac.jp">ftp://ftp.ddbj.nig.ac.jp</ext-link>.</mixed-citation>
    </ref>
    <ref id="CR21">
      <label>21</label>
      <mixed-citation publication-type="other">National Center for Biotechnology Information. http://www.ncbi.nlm.nih.gov/.</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22</label>
      <mixed-citation publication-type="other">Holtgrewe M, Emde AK, Weese D, Reinert K. A novel and well-defined benchmarking method for second generation read mapping. BMC Bioinformatics. 2011; 12(1):210.</mixed-citation>
    </ref>
    <ref id="CR23">
      <label>23</label>
      <mixed-citation publication-type="other">BaseSpace Sequencing Data Sets. http://www.illumina.com/informatics/research/sequencing-data-analysis-management/sequencing-data-library.html.</mixed-citation>
    </ref>
  </ref-list>
</back>
