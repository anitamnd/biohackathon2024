<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1 20151215//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.1?>
<?ConverterInfo.XSLTName jp2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">6821292</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btz385</article-id>
    <article-id pub-id-type="publisher-id">btz385</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Notes</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Data and Text Mining</subject>
        </subj-group>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Entrezpy: a Python library to dynamically interact with the NCBI Entrez databases</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-6842-1229</contrib-id>
        <name>
          <surname>Buchmann</surname>
          <given-names>Jan P</given-names>
        </name>
        <xref ref-type="corresp" rid="btz385-cor1"/>
        <!--<email>jan.buchmann@sydney.edu.au</email>-->
        <xref ref-type="aff" rid="btz385-aff1"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Holmes</surname>
          <given-names>Edward C</given-names>
        </name>
        <xref ref-type="aff" rid="btz385-aff1"/>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Wren</surname>
          <given-names>Jonathan</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <aff id="btz385-aff1"><institution>Marie Bashir Institute for Infectious Diseases and Biosecurity, Charles Perkins Centre, School of Life and Environmental Sciences and Sydney Medical School, The University of Sydney</institution>, Sydney, NSW 2006, Australia</aff>
    <author-notes>
      <corresp id="btz385-cor1">To whom correspondence should be addressed. E-mail: <email>jan.buchmann@sydney.edu.au</email></corresp>
    </author-notes>
    <pub-date pub-type="ppub">
      <day>01</day>
      <month>11</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2019-05-11">
      <day>11</day>
      <month>5</month>
      <year>2019</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>11</day>
      <month>5</month>
      <year>2019</year>
    </pub-date>
    <!-- PMC Release delay is 0 months and 0 days and was based on the <pub-date pub-type="epub"/>. -->
    <volume>35</volume>
    <issue>21</issue>
    <fpage>4511</fpage>
    <lpage>4514</lpage>
    <history>
      <date date-type="received">
        <day>04</day>
        <month>12</month>
        <year>2018</year>
      </date>
      <date date-type="rev-recd">
        <day>29</day>
        <month>4</month>
        <year>2019</year>
      </date>
      <date date-type="accepted">
        <day>04</day>
        <month>5</month>
        <year>2019</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2019. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2019</copyright-year>
      <license license-type="cc-by" xlink:href="http://creativecommons.org/licenses/by/4.0/">
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btz385.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>Entrezpy is a Python library that automates the querying and downloading of data from the Entrez databases at National Center for Biotechnology Information by interacting with E-Utilities. Entrezpy implements complex queries by automatically creating E-Utility parameters from the results obtained that can then be used directly in subsequent queries. Entrezpy also allows the user to cache and retrieve results locally, implements interactions with all Entrez databases as part of an analysis pipeline and adjusts parameters within an ongoing query or using prior results. Entrezpy’s modular design enables it to easily extend and adjust existing E-Utility functions.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>Entrezpy is implemented in Python 3 (≥3.6) and depends only on the Python Standard Library. It is available via PyPi (<ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/entrezpy/">https://pypi.org/project/entrezpy/</ext-link>) and at <ext-link ext-link-type="uri" xlink:href="https://gitlab.com/ncbipy/entrezpy.git">https://gitlab.com/ncbipy/entrezpy.git</ext-link>. Entrezpy is licensed under the LGPLv3 and also at <ext-link ext-link-type="uri" xlink:href="http://entrezpy.readthedocs.io/">http://entrezpy.readthedocs.io/</ext-link>.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <named-content content-type="funder-name">ARC Australian Laureate Fellowship</named-content>
        </funding-source>
        <award-id>FL170100022</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="4"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>The increasing availability of biological data has not only resulted in a multitude of genome sequence data, but also substantial increases in the amount of accompanying metadata, including phylogenies, sampling conditions and locations and gene ontologies. To use such data in a biological analysis pipeline a programmatic approach is required to query and retrieve data from these databases. The National Center for Biotechnology Information (NCBI) is one of the largest such repositories and both developed and maintains the Entrez databases that currently comprise 37 individual databases storing 2.1 billion records related to the life sciences (<xref rid="btz385-B4" ref-type="bibr">NCBI Resource Coordinators, 2016</xref>).</p>
    <p>NCBI offers two approaches to interact programmatically with its Entrez databases: (i) E-utilities (<ext-link ext-link-type="uri" xlink:href="http://eutils.ncbi.nlm.nih.gov/">http://eutils.ncbi.nlm.nih.gov/</ext-link>) are a set of tools that allow the user to query and retrieve NCBI data using specific Uniform Resource Identifiers (URIs). Entrez databases can be accessed using an URI describing the function and its parameter, such as searching a database with a specific term; and (ii) Entrez Direct—a powerful Perl program that allows <italic>ad hoc</italic> access to the NCBI databases through a command line interface (<xref rid="btz385-B3" ref-type="bibr">Kans, 2016</xref>, <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/books/NBK179288">https://www.ncbi.nlm.nih.gov/books/NBK179288</ext-link>). E-Utilities offer a low-level interface to the Entrez databases via Entrez Direct. However, Entrez Direct is designed as a command line tool and is therefore primarily incorporated into analysis pipelines via a Shell, such as Bash, but not designed as a library. Although Python is increasingly used by biologists, incorporating Entrez Direct into Python pipelines requires the use of new processes outside Python, adding an additional layer of complexity.</p>
    <p>Herein, we present Entrezpy. To our knowledge, this is the first Python library to offer the same functionalities as Entrez Direct, but as a Python library. Existing libraries, such as Biopython (<xref rid="btz385-B1" ref-type="bibr">Cock <italic>et al.</italic>, 2009</xref>) or ETE 3 (<xref rid="btz385-B2" ref-type="bibr">Huerta-Cepas <italic>et al.</italic>, 2016</xref>), offer either a basic or a very narrow interaction with E-utilities. Biopython does not handle whole queries, leaving the user to implement the logic to fetch large requests, while ETE represents a library focusing only on phylogenetics. In contrast, Entrezpy is specifically designed to interact with E-Utilities. It offers fine grained control on how to download data and can cache results locally for quick retrieval. This allows the querying and downloading data from Entrez databases as an integral part of an analysis pipeline. Entrezpy automatically configures itself to retrieve large datasets according to the implemented E-Utility function and limits enforced by NCBI.</p>
    <p>Entrezpy includes a helper class, termed Conduit, that facilitates the creation and execution of query pipelines; that is, several consecutive queries that may depend on previous queries with possible dependencies, and the ability to re-use previously obtained results. Entrezpy is licensed under the GNU Lesser General Public License and is packaged in PyPi (<ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/entrezpy/">https://pypi.org/project/entrezpy/</ext-link>) or can be obtained from <ext-link ext-link-type="uri" xlink:href="https://gitlab.com/ncbipy/entrezpy">https://gitlab.com/ncbipy/entrezpy</ext-link>. The Entrezpy source code is documented using Sphinx (<ext-link ext-link-type="uri" xlink:href="http://www.sphinx-doc.org/en/stable/index.html">http://www.sphinx-doc.org/en/stable/index.html</ext-link>) and the documentation, including usage examples, is available at <ext-link ext-link-type="uri" xlink:href="https://entrezpy.readthedocs.io/">https://entrezpy.readthedocs.io/</ext-link>.</p>
  </sec>
  <sec>
    <title>2 Implementation</title>
    <p>Data records within an Entrez database are identified by their identification number. The Entrez documentation refers to this number interchangeably as either an UID or ID. For the remainder of this article we will use the term UID to refer to a data record identification number. UIDs are unique within an Entrez database but not across Entrez databases. Entrezpy is a library of Python classes implementing the specific steps required to interact with the E-Utilities. Querying and downloading data via the E-Utility is achieved by sending queries encoded as an URI for the specific function and the corresponding parameters (<xref ref-type="fig" rid="btz385-F1">Fig. 1</xref>). For example, the following URI searches the nucleotide database for all virus nucleotide sequences and returns the UIDs identified: <ext-link ext-link-type="uri" xlink:href="https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=nucleotide&amp;term=viruses">https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi? db=nucleotide&amp;term=viruses</ext-link>[orgn] (<xref ref-type="fig" rid="btz385-F1">Fig. 1A</xref>).
</p>
    <fig id="btz385-F1" orientation="portrait" position="float">
      <label>Fig. 1.</label>
      <caption>
        <p>E-Utility examples using two queries to download virus sequences from the Nucleotide Entrez database. (<bold>A</bold>) E-utility steps without using the Entrez History server. (<bold>B</bold>) The E-utility steps when using the Entrez History server. Tables in A and B list the minimum required POST parameter for queries sent to E-Utilities. All E-Utility functions start with https://eutils.ncbi.nlm.nih.gov/entrez/eutils/. Dashed lines indicate the figurative and not literal interaction between E-Utilities and Entrez databases. Only three Entrez databases are depicted. Numbers indicate the sequence of steps in the query. (<bold>C</bold>) Depiction of Entrezpy queries and requests using a query with nine data records and a request size of 4. The size of the last request is automatically adjusted. All requests within a query are passed to the same Entrezpy EutilsAnalyzer instance. (<bold>D</bold>) Resolving the example queries using Entrez-Direct. (<bold>E</bold>) Resolving the example queries using Conduit</p>
      </caption>
      <graphic xlink:href="btz385f1"/>
    </fig>
    <p>The E-Utility returns a response describing the search result. This includes the number of data records found within the requested database and corresponding UIDs. To fetch the data records, a second E-Utility URI must be assembled. The following E-utility URI fetches the first four sequences from the previous query in FASTA format: <ext-link ext-link-type="uri" xlink:href="https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&amp;id=1509580163,1509580026,1509580024,1509580022&amp;rettype=fasta&amp;retmode=text">https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi? db=nucleotide&amp;id=1509580163, 1509580026, 1509580024, 1509580022&amp;rettype=fasta&amp;retmode=text</ext-link>. ESearch, ELink and EPost queries can be stored on the Entrez History server (<xref ref-type="fig" rid="btz385-F1">Fig. 1B</xref>). Such queries return a reference as part of the result, consisting of a WebEnv string and a query_key number. The WebEnv value is not static and stored only temporarily, while the query_key increments for each query using the same WebEnv. Together, these values can be used in subsequent queries to reference a prior query. Using the History servers can reduce the amount of data to download. For example, queries fetching large datasets can store the preceding search query and thereby prevent the downloading of large numbers of UIDs. Another use is to combine queries using E-Utilities on the NCBI severs, such as via Elink queries. NCBI enforces a limit of three requests per second to E-Utilities. With an NCBI API key, this limit can be raised to ten requests per second (<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/books/NBK25500/">https://www.ncbi.nlm.nih.gov/books/NBK25500/</ext-link>). By default, Entrezpy enforces the lower limit, but if an NCBI API key is used or stored as environmental variable (see <ext-link ext-link-type="uri" xlink:href="https://entrezpy.readthedocs.io/en/master/">Supplementary Material</ext-link> for details), the upper limit is used.</p>
    <p>Entrezpy supports the E-Utilities EFetch, ESearch, ELink, ESummary and EPost. The E-Utilities ESpell (spelling suggestions), EInfo (database statistics), ECitMatch (batch citation searching in PubMed) and EGQuery (global ESearch) are currently not supported since they can be either assembled using existing functions or have a very broad usage. Entrezpy is not primarily intended to replace an NCBI website search, but to run queries for a specific problem. The Entrezpy functions implemented use the same parameters as those described in the Entrez manual. NCBI limits query and retrieval sizes. For example, downloading summaries in JSON format is limited to 500 summaries at a time. In such cases, queries must be split into several requests to obtain the whole requested <xref ref-type="fig" rid="btz385-F1">dataset (Fig. 1C</xref>). Entrezpy automates these steps, enabling the easy assembly of complex E-Utility queries to search the Entrez databases and download datasets. Entrez History server responses can be used to link queries, analogous to piping commands on UNIX systems (<xref ref-type="fig" rid="btz385-F1">Fig. 1D</xref>). Entrezpy is designed to analyze the response from each request as soon as it is received, allowing the implementation of checkpoints when handling large datasets, for example, whether to resume after aborts or errors. For the Efetch, Esummary and ESearch functions we added the parameter req_size that sets the size of requests within a query. We observed that in some cases connection timeout errors can be solved by setting a smaller request size for the query. Entrezpy uses no threading by default to download datasets but can use multithreading.</p>
    <p>The class Conduit simplifies the assembly of complex queries (<xref ref-type="fig" rid="btz385-F1">Fig. 1</xref>). Internally, Entrezpy assigns each query and requests a unique identifier. This allows Entrezpy to cache queries and results, thereby enabling to access data from an earlier query as parameters for a new query. We implemented this caching approach in Conduit, in which all Conduit instances share the same cache and are cleared if the pipeline is finished or aborted. In addition, Entrezpy result classes can assemble and return parameters that can be used as input parameters for other Entrezpy functions, such as an Esearch result return input parameters for Efetch. Together with the ability to cache results, this allows Entrezpy to create complex queries. In Conduit, such a series of queries is called a pipeline (<xref ref-type="fig" rid="btz385-F1">Fig. 1E</xref>). Queries can be added to a Conduit pipeline either as parameter or as dependency (<xref ref-type="fig" rid="btz385-F1">Fig. 1E</xref>). A dependency is a query ID from an earlier query and Conduit will obtain the corresponding parameters from the cache. If query parameters and a dependency are been passed to a Conduit query, the parameters overwrite the corresponding parameter obtained via the dependency.</p>
    <p>Entrezpy checks for errors in parameters, during requests and after receiving the response from NCBI. If erroneous parameter combinations or values are recognized, Entrezpy aborts. During a request, Entrezpy checks for connection errors and aborts immediately if the HTTP error 400 is returned (Bad request). For other connection errors, Entrezpy retries the request ten times with a randomized waiting time. For timeout errors, Entrezpy increases its request time in ten steps until the maximum request time of one minute is exhausted. If an error persists after ten retries the query is aborted. All Entrezpy aborts return a log message describing the problem. After receiving the response, Entrezpy checks for error messages in the NCBI response, for example, Entrez database errors. These errors trigger a log message, but the request is technically considered a success and Entrezpy does not abort.</p>
    <p>The versatility of Entrezpy is based on the use of virtual functions and modular design. We implemented a default analyzer for all E-Utilities. However, the default Efetch analyzer is very basic and prints results to the standard output. This is deliberate, since an analyzer for an Efetch request is usually the last step in query. Given the numerous possibilities, databases and formats available, finalizing and adjusting an appropriate Efetch analyzer is best left to the pipeline developer. Creating a specific analyzer requires the implementation of only two virtual functions of the Entrezpy analyzer base class, specifically the methods to handle errors and the result. Therefore, a new and highly specific analyzer for a specific dataset can be written without the need to adjust the whole request process.</p>
    <p>Entrezpy has been designed ‘to do one thing and do it well’. It enables the querying and downloading data from the Entrez databases, one of the largest life sciences data repositories, while giving a developer the freedom to easily integrate specific analysis functions.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by an ARC Australian Laureate Fellowship [FL170100022 to E.C.H.].</p>
    <p><italic>Conflict of Interest</italic>: none declared.</p>
  </sec>
</body>
<back>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btz385-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Cock</surname><given-names>P.J.A.</given-names></name></person-group><etal>et al</etal> (<year>2009</year>) 
<article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>1422</fpage>–<lpage>1423</lpage>.<pub-id pub-id-type="pmid">19304878</pub-id></mixed-citation>
    </ref>
    <ref id="btz385-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name name-style="western"><surname>Huerta-Cepas</surname><given-names>J.</given-names></name></person-group><etal>et al</etal> (<year>2016</year>) 
<article-title>ETE 3: reconstruction, analysis, and visualization of phylogenomic data</article-title>. <source>Mol. Biol. Evol</source>., <volume>33</volume>, <fpage>1635</fpage>–<lpage>1638</lpage>.<pub-id pub-id-type="pmid">26921390</pub-id></mixed-citation>
    </ref>
    <ref id="btz385-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><name name-style="western"><surname>Kans</surname><given-names>J.</given-names></name></person-group> (<year>2016</year>) <italic>Entrez Direct: E-utilities on the UNIX Command Line</italic>. National Center for Biotechnology Information, Bethesda, MD, USA.</mixed-citation>
    </ref>
    <ref id="btz385-B4">
      <mixed-citation publication-type="journal">NCBI Resource Coordinators (<year>2016</year>) 
<article-title>Database resources of the National Center for Biotechnology Information</article-title>. <source>Nucleic Acids Res</source>., <volume>45</volume>, <fpage>D12</fpage>–<lpage>D17</lpage>.<pub-id pub-id-type="pmid">27899561</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
