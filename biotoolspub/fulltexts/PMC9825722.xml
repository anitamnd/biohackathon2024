<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9825722</article-id>
    <article-id pub-id-type="pmid">36478036</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btac770</article-id>
    <article-id pub-id-type="publisher-id">btac770</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Original Paper</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Systems Biology</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>libRoadRunner 2.0: a high performance SBML simulation and analysis library</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Welsh</surname>
          <given-names>Ciaran</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">USA</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-6738-9979</contrib-id>
        <name>
          <surname>Xu</surname>
          <given-names>Jin</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">USA</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-7002-6386</contrib-id>
        <name>
          <surname>Smith</surname>
          <given-names>Lucian</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">USA</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-1725-179X</contrib-id>
        <name>
          <surname>König</surname>
          <given-names>Matthias</given-names>
        </name>
        <aff><institution>Institute of Biology, Institute of Theoretical Biology, Humboldt-University Berlin</institution>, Berlin 10115, <country country="DE">Germany</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-0156-8410</contrib-id>
        <name>
          <surname>Choi</surname>
          <given-names>Kiri</given-names>
        </name>
        <aff><institution>School of Computational Sciences, Korea Institute for Advanced Study</institution>, Seoul 02455, <country country="KR">Republic of Korea</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-3659-6817</contrib-id>
        <name>
          <surname>Sauro</surname>
          <given-names>Herbert M</given-names>
        </name>
        <aff><institution>Department of Bioengineering, University of Washington</institution>, Seattle, WA 98195, <country country="US">USA</country></aff>
        <xref rid="btac770-cor1" ref-type="corresp"/>
        <!--hsauro@uw.edu-->
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Martelli</surname>
          <given-names>Pier Luigi</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btac770-cor1">To whom correspondence should be addressed. <email>hsauro@uw.edu</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>1</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2022-12-08">
      <day>08</day>
      <month>12</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>08</day>
      <month>12</month>
      <year>2022</year>
    </pub-date>
    <volume>39</volume>
    <issue>1</issue>
    <elocation-id>btac770</elocation-id>
    <history>
      <date date-type="received">
        <day>15</day>
        <month>6</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>22</day>
        <month>11</month>
        <year>2022</year>
      </date>
      <date date-type="editorial-decision">
        <day>24</day>
        <month>11</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>07</day>
        <month>12</month>
        <year>2022</year>
      </date>
      <date date-type="corrected-typeset">
        <day>16</day>
        <month>12</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btac770.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>This article presents libRoadRunner 2.0, an extensible, high-performance, cross-platform, open-source software library for the simulation and analysis of models expressed using the systems biology markup language (SBML).</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>libRoadRunner is a self-contained library, able to run either as a component inside other tools via its C++, C and Python APIs, or interactively through its Python or Julia interface. libRoadRunner uses a custom just-in-time (JIT) compiler built on the widely used LLVM JIT compiler framework. It compiles SBML-specified models directly into native machine code for a large variety of processors, making it fast enough to simulate extremely large models or repeated runs in reasonable timeframes. libRoadRunner is flexible, supporting the bulk of the SBML specification (except for delay and non-linear algebraic equations) as well as several SBML extensions such as hierarchical composition and probability distributions. It offers multiple deterministic and stochastic integrators, as well as tools for steady-state, sensitivity, stability and structural analyses.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>libRoadRunner binary distributions for Windows, Mac OS and Linux, Julia and Python bindings, source code and documentation are all available at <monospace><ext-link xlink:href="https://github.com/sys-bio/roadrunner" ext-link-type="uri">https://github.com/sys-bio/roadrunner</ext-link></monospace>, and Python bindings are also available via pip. The source code can be compiled for the supported systems as well as in principle any system supported by LLVM-13, such as ARM-based computers like the Raspberry Pi. The library is licensed under the Apache License Version 2.0.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>National Institute of Health</institution>
          </institution-wrap>
        </funding-source>
        <award-id>GM123032-04</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>National Science Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/100000001</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>1933453</award-id>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="6"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Dynamic network models (<xref rid="btac770-B35" ref-type="bibr">Sauro, 2014</xref>) of metabolic, gene regulatory, protein signaling and electrophysiological models require the specification of components, interactions, compartments and kinetic parameters. The systems biology markup language (SBML) (<xref rid="btac770-B14" ref-type="bibr">Hucka <italic toggle="yes">et al.</italic>, 2003</xref>; <xref rid="btac770-B17" ref-type="bibr">Keating <italic toggle="yes">et al.</italic>, 2020</xref>) has become the <italic toggle="yes">de facto</italic> standard for the declarative specification of these types of models (see SBML.org).</p>
    <p>Popular tools for the development, simulation and analysis of models specified in SBML include COPASI (<xref rid="btac770-B13" ref-type="bibr">Hoops <italic toggle="yes">et al.</italic>, 2006</xref>), the systems biology workbench (SBW) (<xref rid="btac770-B2" ref-type="bibr">Bergmann and Sauro, 2006</xref>), the systems biology simulation core library (<xref rid="btac770-B33" ref-type="bibr">Panchiwala <italic toggle="yes">et al.</italic>, 2022</xref>), libSBMLSim (<xref rid="btac770-B43" ref-type="bibr">Takizawa <italic toggle="yes">et al.</italic>, 2013</xref>), iBioSim (<xref rid="btac770-B28" ref-type="bibr">Myers <italic toggle="yes">et al.</italic>, 2009</xref>), PySB (<xref rid="btac770-B23" ref-type="bibr">Lopez <italic toggle="yes">et al.</italic>, 2013</xref>), PySCeS (<xref rid="btac770-B31" ref-type="bibr">Olivier <italic toggle="yes">et al.</italic>, 2005</xref>) and VirtualCell (<xref rid="btac770-B27" ref-type="bibr">Moraru <italic toggle="yes">et al.</italic>, 2008</xref>), as well as many legacy tools that have been superseded by more modern software. Some of these applications are stand-alone packages designed for interactive use. Very few are reusable libraries. Currently, none are fast enough to support emerging applications that require large-scale simulation of network dynamics (<xref rid="btac770-B24" ref-type="bibr">Maggioli <italic toggle="yes">et al.</italic>, 2020</xref>). For example, multi-cell virtual-tissue simulations (<xref rid="btac770-B11" ref-type="bibr">Hester <italic toggle="yes">et al.</italic>, 2011</xref>) often require simultaneous simulation of tens of thousands of replicas of models residing in their cell objects and interacting between cells. In addition, optimization methods require the generation of time series for tens of thousands of replicas to explore the high-dimensional parameter spaces typical of biochemical networks (<xref rid="btac770-B3" ref-type="bibr">Bouteiller <italic toggle="yes">et al.</italic>, 2015</xref>).</p>
    <p>Previously, we published libRoadRunner version 1, a cross-platform, multi-language library for fast execution of SBML model simulations. We designed libRoadRunner to provide: (i) Efficient time-series generation and analysis of large or multiple SBML-based models; (ii) A comprehensive and logical API; (iii) Interactive simulations in the style of IPython and MATLAB; and (iv) Extensibility. The library achieves its performance capabilities by compiling SBML directly into machine code ‘on-the-fly’ using LLVM as a ‘just-in-time’ (JIT) compiler (<xref rid="btac770-B22" ref-type="bibr">Lattner and Adve, 2004</xref>). The SBML model description is lexed and parsed into an abstract syntax tree using libSBML. Then libRoadRunner creates the necessary low-level LLVM intermediate representation (IR) code for compiling the SBML. Once compiled, the SBML representation of the model has been converted into an in-memory dynamic library from which symbols representing model functions can be exported and loaded into other languages. libRoadRunner wraps this low-level interface in user-friendly C and C++ APIs, which, in turn, provide the foundation for critical systems modelling tasks, such as model integration, steady-state analysis and metabolic control analysis (<xref rid="btac770-B41" ref-type="bibr">Somogyi <italic toggle="yes">et al.</italic>, 2015</xref>).libRoadRunner users usually fall into one of two categories: modellers or tool developers. Modellers use the libRoadRunner tool directly in their research for modelling dynamic systems (<xref rid="btac770-B16" ref-type="bibr">Karagöz <italic toggle="yes">et al.</italic>, 2021</xref>; <xref rid="btac770-B19" ref-type="bibr">Köller <italic toggle="yes">et al.</italic>, 2021a</xref>, <xref rid="btac770-B20" ref-type="bibr">b</xref>) or for developing new computational approaches such as detecting bistable switches (<xref rid="btac770-B34" ref-type="bibr">Reyes <italic toggle="yes">et al.</italic>, 2022</xref>) or performing dynamic flux balance analysis (<xref rid="btac770-B44" ref-type="bibr">Watanabe <italic toggle="yes">et al.</italic>, 2018</xref>). Tool developers, on the other hand, use libRoadRunner as a core SBML handling component in their modular software design, such as in Tellurium (<xref rid="btac770-B7" ref-type="bibr">Choi <italic toggle="yes">et al.</italic>, 2018</xref>), runBiosimulations (<xref rid="btac770-B36" ref-type="bibr">Shaikh <italic toggle="yes">et al.</italic>, 2021</xref>), MASSPy (<xref rid="btac770-B10" ref-type="bibr">Haiman <italic toggle="yes">et al.</italic>, 2021</xref>), SBMLsim (<ext-link xlink:href="https://github.com/matthiaskoenig/sbmlsim" ext-link-type="uri">https://github.com/matthiaskoenig/sbmlsim</ext-link>), Compucell3D (<xref rid="btac770-B42" ref-type="bibr">Swat <italic toggle="yes">et al.</italic>, 2012</xref>), PhysiCell (<xref rid="btac770-B9" ref-type="bibr">Ghaffarizadeh <italic toggle="yes">et al.</italic>, 2018</xref>), pyBioNetFit (<xref rid="btac770-B29" ref-type="bibr">Neumann <italic toggle="yes">et al.</italic>, 2022</xref>), pyViPR (<xref rid="btac770-B32" ref-type="bibr">Ortega and Lopez, 2020</xref>) and DIVIPAC (<xref rid="btac770-B30" ref-type="bibr">Nguyen <italic toggle="yes">et al.</italic>, 2015</xref>).</p>
    <p>In this work, we present libRoadRunner version 2. We have improved performance both for single-model and multi-model simulations. We have expanded the range of available features to include additional steady-state solvers, as well as time-dependent sensitivity analysis (see example in <xref rid="btac770-F1" ref-type="fig">Fig. 1</xref>).</p>
    <fig position="float" id="btac770-F1">
      <label>Fig. 1.</label>
      <caption>
        <p>Time-dependent sensitivities for a simple linear chain model: <monospace>X0 -&gt; S1; k1*S1; S1 -&gt; S2; k2*S2; S2 -&gt;; k3*S2; k1</monospace> <monospace>=</monospace> <monospace>0.1; k2</monospace> <monospace>=</monospace> <monospace>0.3; k3</monospace> <monospace>=</monospace> <monospace>0.14; Xo</monospace> <monospace>=</monospace> <monospace>10</monospace>. Here, all possible combinations of the species (S1 and S2) and parameters (k1, k2 and k3) are shown. However, the interface allows us to be more selective if needed. The plots were generated by helper functions in libRoadRunner</p>
      </caption>
      <graphic xlink:href="btac770f1" position="float"/>
    </fig>
  </sec>
  <sec>
    <title>2 Major changes to 2.0</title>
    <sec>
      <title>2.1 Performance improvements</title>
      <p>In previous versions of libRoadRunner, loading many <monospace>RoadRunner</monospace> instances was slow because each model must JIT compile SBML to binary code. We have addressed this problem in several ways (i) by increasing the speed of compilation of a single model; (ii) by making it easy to compile multiple models simultaneously and (iii) by providing a ‘direct’ API for access to the model topology outside of modifying the SBML directly (reducing the amount of re-compilations).</p>
      <sec>
        <title>2.1.1 LLJit: a new JIT compiler</title>
        <p>To increase the speed of compiling SBML to machine code, we have built a new JIT compiler called <monospace>LLJit</monospace> to replace the previous <monospace>MCJit</monospace>. <monospace>LLJit</monospace> uses LLVM version 13’s ‘ORC JIT v2’ API which provides an out-of-the-box but modular and customizable tool for JIT compiling LLVM IR code to machine code. It was not necessary to modify the LLVM IR generation stage of the compilation process, but a new strategy was designed to perform the compilation step. Our implementation of <monospace>LLJit</monospace> uses the standard object linking layer but a customized compile layer that automatically caches model object files in memory for fast reloading. The process of switching to the <monospace>LLJit</monospace> compiler is shown in <xref rid="btac770-BOX1" ref-type="boxed-text">Listing 1</xref>.</p>
        <p>
          <boxed-text id="btac770-BOX1" position="float">
            <label>Listing 1</label>
            <caption>
              <p>Python example of how to turn on the <monospace>LLJit</monospace> compiler. Variables: <monospace>sbmlFile</monospace> (<monospace>str</monospace>) is absolute path to sbml file on the disk.</p>
            </caption>
            <p>
              <monospace>from roadrunner import RoadRunner, Config</monospace>
            </p>
            <p>
              <monospace>Config.setValue(</monospace>
            </p>
            <p>   <monospace>Config.LLVM_BACKEND, Config.LLJIT)</monospace></p>
            <p>
              <monospace>rr = RoadRunner(sbmlFile)</monospace>
            </p>
          </boxed-text>
        </p>
      </sec>
      <sec>
        <title>2.1.2 RoadRunnerMap: a parallel RoadRunner container</title>
        <p>Because RoadRunner models are computationally expensive to compile, we have made it easy for users to make use of their multi-core system for compiling multiple models in parallel. libRoadRunner uses a lightweight abstraction around the standard C++17 threading library called <monospace>thread_pool</monospace> (<xref rid="btac770-B37" ref-type="bibr">Shoshany, 2021</xref>) for queuing build jobs and then storing references to compiled <monospace>RoadRunner</monospace> models in a thread-safe hash map structure called <monospace>RoadRunnerMap</monospace>. To construct a <monospace>RoadRunnerMap</monospace>, a collection of SBML files or strings are passed to the <monospace>RoadRunnerMap</monospace> constructor, along with an integer specifying the number of threads to use (<xref rid="btac770-BOX2" ref-type="boxed-text">Listing 2</xref>).<boxed-text id="btac770-BOX2" position="float"><label>Listing 2</label><caption><p>Python example of loading a list of SBML models in parallel using three threads. Variables: <monospace>listOfSBML</monospace> (<monospace>List[str]</monospace>) is a list of full paths to SBML files on the disk or strings in memory (or a mix thereof).</p></caption><p><monospace>from roadrunner import RoadRunnerMap</monospace></p><p><monospace>rrm = RoadRunnerMap(listOfSBML, 3)</monospace></p></boxed-text>To demonstrate the capabilities of libRoadRunner v2, we have measured the time it takes for the MCJit and LLJit compilers to load and simulate over 1100 models from the curated section of the BioModels database (<xref rid="btac770-B25" ref-type="bibr">Malik-Sheriff <italic toggle="yes">et al.</italic>, 2020</xref>) using either the native-Python <monospace>concurrent</monospace> package, or using the <monospace>RoadRunnerMap</monospace> construct, both with different numbers of threads. As can be seen in <xref rid="btac770-F2" ref-type="fig">Figure 2</xref>, the new <monospace>LLJit</monospace> compiler is more than three times faster than the previous <monospace>MCJit</monospace> compiler in both contexts, making it the fastest compiler we have built to date. Increasing the number of threads decreases runtime but with diminishing returns. The RoadRunnerMap construct was seen to be faster than the native Python ‘concurrent’ multithreading approach at lower numbers of threads, but slower than the native at higher numbers of threads. We hypothesize this is due to the RoadRunnerMap controlling thread taking up a significant portion of the clock time: because the parallelization occurs entirely in C++, the Python thread itself remains unoptimized. When using the native-Python <monospace>concurrent</monospace> package, that control is better managed by Python itself.</p>
        <fig position="float" id="btac770-F2">
          <label>Fig. 2.</label>
          <caption>
            <p>Time to load over 1100 models from the BioModels database with libRoadRunner. Data are included for the two different JIT backends (MCJit and LLJit), using the RoadRunnerMap construct or not, and using the given number of threads. Shown is the average of 10 replicates with their standard deviations. Not shown: when increasing the number of threads to 23, the total times were only reduced by a maximum of an additional 2%</p>
          </caption>
          <graphic xlink:href="btac770f2" position="float"/>
        </fig>
      </sec>
      <sec>
        <title>2.1.3 Pickled (serialized) RoadRunner</title>
        <p>Once loaded, users can save a model’s state either to a binary string for in-memory storage or to a disk for persistent storage. The result is a platform-specific binary snapshot of a <monospace>RoadRunner</monospace> object which can be reloaded with significant performance improvements compared to recompiling the model. <xref rid="btac770-BOX3" ref-type="boxed-text">Listing 3</xref> demonstrates this functionality.<boxed-text id="btac770-BOX3" position="float"><label>Listing 3</label><caption><p>Example of saving a <monospace>RoadRunner</monospace> object’s state to a file and then loading it again. Variables: <monospace>sbmlFile</monospace> (<monospace>str</monospace>) is a full path to a valid SBML file on the disk; <monospace>fileName</monospace> (<monospace>str</monospace>) is a full path to where to save the model state on the disk.</p></caption><p><monospace>from roadrunner import RoadRunner</monospace></p><p><monospace>rr = RoadRunner(sbmlFile)</monospace></p><p><italic toggle="yes"><monospace># save state to string</monospace></italic></p><p><monospace>rr.saveState(fileName)</monospace></p><p><italic toggle="yes"><monospace># load state</monospace></italic></p><p><monospace>rrReloaded = RoadRunner()</monospace></p><p><monospace>rrReloaded.loadState(fileName)</monospace></p></boxed-text>In Python, a prerequisite for using <monospace>RoadRunner</monospace> with various parallel or multithreading toolboxes is the ability to serialize an instance of a <monospace>RoadRunner</monospace> object using Python’s standardized ‘pickle’ protocol. We have built an adaptor between our in-house <monospace>RoadRunner</monospace> serialization strategy and Python’s pickle protocol so that our users can now build their own parallel applications on top of libRoadRunner. We anticipate that this will be valuable to the systems biology community, particularly for problems involving repeated time-series simulations such as optimization or stochastic simulations. An example of the latter is shown in <xref rid="btac770-BOX4" ref-type="boxed-text">Listing 4</xref>.</p>
        <p>
          <boxed-text id="btac770-BOX4" position="float">
            <label>Listing 4</label>
            <caption>
              <p>Example of using <monospace>RoadRunner</monospace> object with Python’s multiprocessing library to stochastically simulate a model hundred thousand times.</p>
            </caption>
            <p>
              <monospace>from multiprocessing import Pool</monospace>
            </p>
            <p>
              <monospace>from roadrunner import RoadRunner</monospace>
            </p>
            <p>
              <monospace>def simulate_worker(rr: RoadRunner):</monospace>
            </p>
            <p>    <monospace>rr.resetAll()</monospace></p>
            <p>    <monospace>return rr.simulate(0, 10, 11)</monospace></p>
            <p>
              <monospace>rr = RoadRunner(sbmlFile)</monospace>
            </p>
            <p>
              <monospace>rr.setIntegrator(’gillespie’)</monospace>
            </p>
            <p>
              <monospace>if __name__==’__main__’:</monospace>
            </p>
            <p>    <monospace>p = Pool(processes</monospace> <monospace>=</monospace> <monospace>8)</monospace></p>
            <p>    <monospace>results = p.map(</monospace></p>
            <p>      <monospace>simulate_worker,</monospace></p>
            <p>      <monospace>[rr for i in range(100000)])</monospace></p>
          </boxed-text>
        </p>
      </sec>
    </sec>
    <sec>
      <title>2.2 Direct API</title>
      <p>In libRoadRunner version 1, any changes to the model structure required the modification, re-parsing and re-compiling of the SBML. Since these operations are computationally expensive and potentially convoluted, we have implemented an API for interacting directly with the internal object model. This ‘direct’ API allows users to add and remove SBML components such as compartments, species, reactions and events programmatically, without the need to re-parse the model after each change. Since these changes require model recompilation before use, we provide an argument called <monospace>forceRegenerate</monospace> to all direct API functions which give users the ability to control when the model is recompiled—i.e. only after all model changes are complete. <xref rid="btac770-BOX5" ref-type="boxed-text">Listing 5</xref> provides an example using this API.</p>
      <p>
        <boxed-text id="btac770-BOX5" position="float">
          <label>Listing 5</label>
          <caption>
            <p>Example of adding a simple first-order mass action degradation reaction to a loaded SBML model. The code assumes that a compartment called “<monospace>cell</monospace>” was loaded in the initial <monospace>sbmlFile</monospace>. Variables: <monospace>sbmlFile</monospace> (<monospace>str</monospace>) is a full path to a valid SBML file on the disk.</p>
          </caption>
          <p>
            <monospace>from roadrunner import RoadRunner</monospace>
          </p>
          <p>
            <monospace>rr = RoadRunner(sbmlFile)</monospace>
          </p>
          <p>
            <monospace>rr.addSpecies(“A”, “cell”,</monospace>
          </p>
          <p>     <monospace>initConcentration</monospace> <monospace>=</monospace> <monospace>5.0,</monospace></p>
          <p>     <monospace>forceRegenerate=False</monospace></p>
          <p>
            <monospace>)</monospace>
          </p>
          <p>
            <monospace>rr.addReaction(“ADeg”, [“A”], [], 0.5*A, True)</monospace>
          </p>
        </boxed-text>
      </p>
    </sec>
    <sec>
      <title>2.3 Julia language bindings</title>
      <p>The Julia programming language has gained traction with the systems biology community in recent years. We have therefore implemented language bindings to connect Julia users to libRoadRunner. While our Python bindings are implemented using SWIG (<xref rid="btac770-B1" ref-type="bibr">Beazley <italic toggle="yes">et al.</italic>, 1996</xref>), there is no Julia interface for SWIG, so our Julia bindings use <monospace>ccall</monospace> internally to expose symbols from the libRoadRunner shared library to a Julia API. <xref rid="btac770-BOX6" ref-type="boxed-text">Listing 6</xref> demonstrates the use of this API in Julia.</p>
      <p>
        <boxed-text id="btac770-BOX6" position="float">
          <label>Listing 6</label>
          <caption>
            <p>An example showing how to load an SBML model and perform a simulation in Julia. The first two lines install the libRoadRunner language bindings and the rest of the code compiles an SBML model <monospace>sbmlString</monospace> and runs a simulation using the <monospace>simulateEx</monospace> method.</p>
          </caption>
          <p>
            <italic toggle="yes">
              <monospace># get julia bindings</monospace>
            </italic>
          </p>
          <p>
            <monospace>import Pkg</monospace>
          </p>
          <p>
            <monospace>Pkg.add(“RoadRunner”)</monospace>
          </p>
          <p>
            <italic toggle="yes">
              <monospace># simulate a model</monospace>
            </italic>
          </p>
          <p>
            <monospace>using RoadRunner</monospace>
          </p>
          <p>
            <monospace>rr = RoadRunner.createRRInstance()</monospace>
          </p>
          <p>
            <monospace>RoadRunner.loadSBML(rr, sbmlString)</monospace>
          </p>
          <p>
            <monospace>S = RoadRunner.getFloatingSpeciesIds(rr)</monospace>
          </p>
          <p>
            <monospace>data = RoadRunner.simulateEx(rr, 0, 40, 500)</monospace>
          </p>
        </boxed-text>
      </p>
    </sec>
    <sec>
      <title>2.4 Plugin system</title>
      <p>We have developed a flexible and robust plugin system that tightly integrates extensions to the libRoadRunner with various functionalities. Anyone can incorporate a computational routine based on an instance of libRoadRunner which can greatly increase the performance, with the only requirement being the plugin code to be written in C++ and available at the compile time. Several examples such as parameter estimation algorithms that use libRoadRunner solvers and an interface to AUTO (<xref rid="btac770-B8" ref-type="bibr">Doedel, 1981</xref>) for bifurcation analysis are available in the documentation. <xref rid="btac770-BOX7" ref-type="boxed-text">Listing 7</xref> illustrates a simple example of using the AUTO plugin for bifurcation analysis.</p>
      <p>
        <boxed-text id="btac770-BOX7" position="float">
          <label>Listing 7</label>
          <caption>
            <p>An example showing how to load a model into AUTO plugin, set parameters, run bifurcation analysis, and plot the bifurcation diagram.</p>
          </caption>
          <p>
            <monospace>from rrplugins import *</monospace>
          </p>
          <p>
            <monospace>auto = Plugin(“tel_auto2000”)</monospace>
          </p>
          <p> </p>
          <p>
            <italic toggle="yes">
              <monospace># Set parameters</monospace>
            </italic>
          </p>
          <p>
            <monospace>auto.setProperty(“SBML”, sbmlString)</monospace>
          </p>
          <p>
            <monospace>auto.setProperty(“NMX”, 5000)</monospace>
          </p>
          <p>
            <monospace>auto.setProperty(“ScanDirection”, “Positive”)</monospace>
          </p>
          <p> </p>
          <p>
            <italic toggle="yes">
              <monospace># Execute the plugin</monospace>
            </italic>
          </p>
          <p>
            <monospace>auto.execute()</monospace>
          </p>
          <p> </p>
          <p>
            <italic toggle="yes">
              <monospace># Plot bifurcation diagram</monospace>
            </italic>
          </p>
          <p>
            <monospace>pts = auto. BifurcationPoints</monospace>
          </p>
          <p>
            <monospace>lbls = auto. BifurcationLabels</monospace>
          </p>
          <p>
            <monospace>biData = auto. BifurcationData</monospace>
          </p>
          <p>
            <monospace>biData.plotBifurcationDiagram(pts, lbls)</monospace>
          </p>
        </boxed-text>
      </p>
    </sec>
    <sec>
      <title>2.5 Miscellaneous new functionality</title>
      <p>In 2019, a new SBML specification was released [level 3 version 2 (<xref rid="btac770-B15" ref-type="bibr">Hucka <italic toggle="yes">et al.</italic>, 2019</xref>)]. We now support the features of the new specification, including additional MathML functions, cases with ‘missing’ elements that are now valid in SBML, and the presence of Boolean values where numeric values are expected, and vice versa. In addition, we now fully support the ‘Distributions’ SBML package (<xref rid="btac770-B40" ref-type="bibr">Smith <italic toggle="yes">et al.</italic>, 2020</xref>), which defines new functions that stochastically draw values from known distributions, even in otherwise deterministic conditions (such as initial species levels).</p>
      <p>Version 2 of libRoadRunner also includes a number of other miscellaneous changes. These include additions to numerical routines used to solve differential equations for the time course and for computing the steady state. In particular, we have implemented a basic Euler integration method which has been used for certain time-critical applications and the RK45 solver which can be used to double-check the accuracy of the time course solution generated by the default CVODE implementation. We have also included support for variable stoichiometries in reactions. The Antimony language (<xref rid="btac770-B39" ref-type="bibr">Smith <italic toggle="yes">et al.</italic>, 2009</xref>) has been updated to reflect this change.</p>
      <p>Like our CVODE implementation, our time series sensitivity implementation uses the popular Sundials package (<xref rid="btac770-B12" ref-type="bibr">Hindmarsh <italic toggle="yes">et al.</italic>, 2005</xref>). Specifically, we have two strategies for solving the sensitivity equations. They can either be solved simultaneously with the system equations (<xref rid="btac770-B26" ref-type="bibr">Maly and Petzold, 1996</xref>) or solved using a staggered approach (<xref rid="btac770-B5" ref-type="bibr">Caracotsios and Stewart, 1995</xref>).libRoadRunner version 2 also makes use of the Sundials ‘kinsol’ library for new steady-state solvers. Specifically, we support the Inexact Newton approach (<xref rid="btac770-B4" ref-type="bibr">Brown, 1987</xref>). As a result, version 2 now gives the user access to two nonlinear solvers.</p>
      <p>For Windows users, we also provided an updated installer that will install an independent but complete working environment for biochemical modelling. The installer distributes the latest Spyder IDE (<monospace><ext-link xlink:href="https://www.spyder-ide.org/" ext-link-type="uri">https://www.spyder-ide.org/</ext-link></monospace>) as well as the Jupyter notebook interface (<xref rid="btac770-B18" ref-type="bibr">Kluyver <italic toggle="yes">et al.</italic>, 2016</xref>). Note that libRoadRunner and associated tools can be easily installed on open platforms such as Colaboratory (<xref rid="btac770-B6" ref-type="bibr">Carneiro <italic toggle="yes">et al.</italic>, 2018</xref>) using pip.</p>
      <p>User control over roadrunner functionality has also been improved. Time-series simulations, steady-state calculations and approximation routines, among others, now have more options for the user and can be used on a wider variety of models. Other changes in libRoadRunner version 2 include improved compliance with the SBML Test Suite (<xref rid="btac770-B38" ref-type="bibr">Smith, 2022</xref>), and a new automatic build and test system using updated dependencies, which allows us to release more frequently, with fewer bugs. Overall, we have resolved over 250 issues since 2018, filed by 23 different people.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Discussion</title>
    <p>libRoadRunner is a fast and convenient tool for both individuals who are investigating the dynamics of a biological system and tool developers who are building new methods for solving and analysing such systems. In version 2, we have built a variety of new tools for the construction, compilation, analysis and solving of dynamical systems described in SBML.</p>
    <p>libRoadRunner version 1 was highly optimized for the simulation of dynamical systems thanks to our JIT compilation strategy. As a result, libRoadRunner was the fastest available SBML dedicated simulator (<xref rid="btac770-B24" ref-type="bibr">Maggioli <italic toggle="yes">et al.</italic>, 2020</xref>; <xref rid="btac770-B33" ref-type="bibr">Panchiwala <italic toggle="yes">et al.</italic>, 2022</xref>; <xref rid="btac770-B41" ref-type="bibr">Somogyi <italic toggle="yes">et al.</italic>, 2015</xref>). However, one of the disadvantages of our strategy is that when the need arises for the simulation of many SBML models together, the run time is dominated by the compile time. Examples of such a need include ensemble modelling, where many instances of SBML with varying parameters or typologies need to be simulated simultaneously. With the new changes we describe in this article, our performance metrics have increased even further.</p>
    <p>To alleviate this bottleneck, we have prioritized new features that enhance the speed with which a model can be compiled. One such feature is an entirely new compiler called <monospace>LLJit</monospace> which sits side-by-side with the older <monospace>MCJit</monospace>. We have demonstrated that <monospace>LLJit</monospace> is significantly faster than earlier libRoadRunner implementations (<xref rid="btac770-F2" ref-type="fig">Fig. 2</xref>) at compiling the same code. Similarly, once loaded, a model may be modified (even to the extent of adding or removing model elements) more rapidly than loading a new model from scratch, and new functions have been added to allow this, as well.</p>
    <p>While decreasing the compile time is a worthy goal, there is a natural limit to the speed with which a single model can be compiled. An alternative mechanism for enhancing performance in multi-model problems is to make better use of the available resources that exist in most modern computer systems using parallelism. We have introduced parallelism in two ways. First, we have built a <monospace>RoadRunner</monospace> container called <monospace>RoadRunnerMap</monospace> which is capable of orchestrating parallel compiles. Secondly, we have implemented support for Python’s pickle protocol. While the former enables us to abstract parallelism away from the user completely, the latter allows our more experienced users to devise their own parallel computation.</p>
  </sec>
  <sec>
    <title>4 Conclusion</title>
    <p>With the advent of the changes introduced into libRoadRunner version 2, the library is now more efficient in running, loading and changing models at runtime. These features were added to support a number of specific use cases. These include two main applications: parameter optimization on large compute clusters, and using libRoadRunner to create large model ensembles that include variation in parameters as well as rate laws and network topology.</p>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>The authors are most grateful to generous funding from the National Institute of General Medical Sciences of the National Institutes of Health under award R01 GM-123032. The content is solely the responsibility of the authors and does not necessarily represent the official views of the National Institutes of Health or the University of Washington. We would like to thank the many users who have contributed to libRoadRunner via suggestions for improvements and bug reports.</p>
    <sec>
      <title>Funding</title>
      <p>This work was supported by the National Institute of Health [GM123032-04], the National Science Foundation [1933453], and the Federal Ministry of Education and Research (BMBF, Germany) within the research network Systems Medicine of the Liver (LiSyM) [031L0054] and by the German Research Foundation (DFG) within the Research Unit Programme FOR 5151 ‘QuaLiPerF (Quantifying Liver Perfusion-Function Relationship in Complex Resection—A Systems Medicine Approach)’ by [436883643] and [465194077] (Priority Programme SPP 2311, Subproject SimLivA) to M.K.; KIAS Individual Grants [CG077001 to K.C.].</p>
    </sec>
  </ack>
  <ack id="ack2">
    <title>Acknowledgement</title>
    <p><italic toggle="yes">Conflict of Interest</italic>: none declared.</p>
  </ack>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>libRoadRunner source code is available from our GitHub webpage at <monospace><ext-link xlink:href="https://github.com/sys-bio/roadrunner/" ext-link-type="uri">https://github.com/sys-bio/roadrunner/</ext-link></monospace> and precompiled binaries are available for Windows, Mac OS and Linux operating systems at <monospace><ext-link xlink:href="https://github.com/sys-bio/roadrunner/releases" ext-link-type="uri">https://github.com/sys-bio/roadrunner/releases</ext-link></monospace>. The Windows front end for Tellurium (which includes the latest version of roadrunner) is available at <monospace><ext-link xlink:href="https://github.com/sys-bio/tellurium#front-end-1-tellurium-spyder-ide" ext-link-type="uri">https://github.com/sys-bio/tellurium#front-end-1-tellurium-spyder-ide</ext-link></monospace>. Python bindings are available both as wheel files from the releases page and from pypi.org installable through pip:</p>
    <p>
      <monospace>pip install libroadrunner</monospace>
    </p>
    <p>The Julia source code is available at <monospace><ext-link xlink:href="https://github.com/sys-bio/RoadRunner.jl" ext-link-type="uri">https://github.com/sys-bio/RoadRunner.jl</ext-link></monospace> and can be installed via Julia’s package manager with <monospace>Pkg.add(”RoadRunner”)</monospace>.</p>
    <p>The scripts used to generate the data for this article are available at <ext-link xlink:href="https://github.com/saurolab-papers/rr2.0_paper" ext-link-type="uri">https://github.com/saurolab-papers/rr2.0_paper</ext-link>.</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btac770-B1">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Beazley</surname><given-names>D.M.</given-names></string-name></person-group><etal>et al</etal> (<year>1996</year>) SWIG: an easy to use tool for integrating scripting languages with C and C++. In: <italic toggle="yes">Proceedings of the 4th USENIX Tcl/Tk Workshop</italic>, Monterey, California, pp. <fpage>129</fpage>–<lpage>139</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B2">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Bergmann</surname><given-names>F.T.</given-names></string-name>, <string-name><surname>Sauro</surname><given-names>H.M.</given-names></string-name></person-group> (<year>2006</year>) SBW - a modular framework for systems biology. In: <italic toggle="yes">WSC ’06 Proceedings of the 38th Conference on Winter Simulation</italic>. Winter Simulation Conference, Monterey, California, pp. <fpage>1637</fpage>–<lpage>1645</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Bouteiller</surname><given-names>J.-M.C.</given-names></string-name></person-group><etal>et al</etal> (<year>2015</year>) Maximizing predictability of a bottom-up complex multi-scale model through systematic validation and multi-objective multi-level optimization. In: <italic toggle="yes">2015 7th International IEEE/EMBS Conference on Neural Engineering (NER)</italic>. IEEE, pp. <fpage>300</fpage>–<lpage>303</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Brown</surname><given-names>P.N.</given-names></string-name></person-group> (<year>1987</year>) <article-title>A local convergence theory for combined inexact-newton/finite-difference projection methods</article-title>. <source>SIAM J. Numer. Anal</source>., <volume>24</volume>, <fpage>407</fpage>–<lpage>434</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Caracotsios</surname><given-names>M.</given-names></string-name>, <string-name><surname>Stewart</surname><given-names>W.</given-names></string-name></person-group> (<year>1995</year>) <article-title>Sensitivity analysis of initial-boundary-value problems with mixed PDEs and algebraic equations: applications to chemical and biochemical systems</article-title>. <source>Comput. Chem. Eng</source>., <volume>19</volume>, <fpage>1019</fpage>–<lpage>1030</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Carneiro</surname><given-names>T.</given-names></string-name></person-group><etal>et al</etal> (<year>2018</year>) <article-title>Performance analysis of google colaboratory as a tool for accelerating deep learning applications</article-title>. <source>IEEE Access</source>, <volume>6</volume>, <fpage>61677</fpage>–<lpage>61685</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Choi</surname><given-names>K.</given-names></string-name></person-group><etal>et al</etal> (<year>2018</year>) <article-title>Tellurium: an extensible python-based modeling environment for systems and synthetic biology</article-title>. <source>Biosystems</source>, <volume>171</volume>, <fpage>74</fpage>–<lpage>79</lpage>.<pub-id pub-id-type="pmid">30053414</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Doedel</surname><given-names>E.J.</given-names></string-name></person-group> (<year>1981</year>) <article-title>Auto: a program for the automatic bifurcation analysis of autonomous systems</article-title>. <source>Congr. Numer</source>., <volume>30</volume>, <fpage>25</fpage>–<lpage>93</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ghaffarizadeh</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2018</year>) <article-title>Physicell: an open source physics-based cell simulator for 3-d multicellular systems</article-title>. <source>PLoS Comput. Biol</source>., <volume>14</volume>, <fpage>e1005991</fpage>.<pub-id pub-id-type="pmid">29474446</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Haiman</surname><given-names>Z.B.</given-names></string-name></person-group><etal>et al</etal> (<year>2021</year>) <article-title>MASSpy: building, simulating, and visualizing dynamic biological models in python using mass action kinetics</article-title>. <source>PLoS Comput. Biol</source>., <volume>17</volume>, <fpage>e1008208</fpage>.<pub-id pub-id-type="pmid">33507922</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hester</surname><given-names>S.D.</given-names></string-name></person-group><etal>et al</etal> (<year>2011</year>) <article-title>A multi-cell, multi-scale model of vertebrate segmentation and somite formation</article-title>. <source>PLoS Comput. Biol</source>., <volume>7</volume>, <fpage>e1002155</fpage>.<pub-id pub-id-type="pmid">21998560</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hindmarsh</surname><given-names>A.C.</given-names></string-name></person-group><etal>et al</etal> (<year>2005</year>) <article-title>SUNDIALS: suite of nonlinear and differential/algebraic equation solvers</article-title>. <source>ACM Transactions on Mathematical Software (TOMS)</source>, <volume>31</volume>, <fpage>363</fpage>–<lpage>396</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hoops</surname><given-names>S.</given-names></string-name></person-group><etal>et al</etal> (<year>2006</year>) <article-title>COPASI—a complex pathway simulator</article-title>. <source>Bioinformatics</source>, <volume>22</volume>, <fpage>3067</fpage>–<lpage>3074</lpage>.<pub-id pub-id-type="pmid">17032683</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hucka</surname><given-names>M.</given-names></string-name></person-group><etal>et al</etal>; <collab>SBML Forum</collab>. (<year>2003</year>) <article-title>The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models</article-title>. <source>Bioinformatics</source>, <volume>19</volume>, <fpage>524</fpage>–<lpage>531</lpage>.<pub-id pub-id-type="pmid">12611808</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B15">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hucka</surname><given-names>M.</given-names></string-name></person-group><etal>et al</etal> (<year>2019</year>) <article-title>The systems biology markup language (SBML): language specification for level 3 version 2 core release 2</article-title>. <source>J. Integr. Bioinformatics</source>, <volume>16</volume>, 20190021.</mixed-citation>
    </ref>
    <ref id="btac770-B16">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Karagöz</surname><given-names>Z.</given-names></string-name></person-group><etal>et al</etal> (<year>2021</year>) <article-title>Win, lose, or tie: mathematical modeling of ligand competition at the cell–extracellular matrix interface</article-title>. <source>Front. Bioeng. Biotechnol</source>., <volume>9</volume>, <fpage>340</fpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B17">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Keating</surname><given-names>S.M.</given-names></string-name></person-group><etal>et al</etal>; <collab>SBML Level 3 Community members</collab>. (<year>2020</year>) <article-title>SBML level 3: an extensible format for the exchange and reuse of biological models</article-title>. <source>Mol. Syst. Biol</source>., <volume>16</volume>, <fpage>e9110</fpage>.<pub-id pub-id-type="pmid">32845085</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B18">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Kluyver</surname><given-names>T.</given-names></string-name></person-group><etal>et al</etal> (<year>2016</year>) <source>Jupyter Notebooks - A Publishing Format for Reproducible Computational Workflows</source>, Vol. <volume>2016</volume>. <publisher-name>IOS Press, Amsterdam, NL</publisher-name>.</mixed-citation>
    </ref>
    <ref id="btac770-B19">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Köller</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2021a</year>) <article-title>Physiologically based modeling of the effect of physiological and anthropometric variability on indocyanine green based liver function tests</article-title>. <source>Front. Physiol</source>., <volume>12</volume>, <fpage>757293</fpage>.<pub-id pub-id-type="pmid">34880776</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B20">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Köller</surname><given-names>A.</given-names></string-name></person-group><etal>et al</etal> (<year>2021b</year>) <article-title>Prediction of survival after partial hepatectomy using a physiologically based pharmacokinetic model of indocyanine green liver function tests</article-title>. <source>Front. Physiol</source>., <volume>12</volume>, <fpage>730418</fpage>.<pub-id pub-id-type="pmid">34880771</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B22">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Lattner</surname><given-names>C.</given-names></string-name>, <string-name><surname>Adve</surname><given-names>V.</given-names></string-name></person-group> (<year>2004</year>) LLVM: a compilation framework for lifelong program analysis &amp; transformation. In: <italic toggle="yes">Code Generation and Optimization 2004.</italic> IEEE, pp. <fpage>75</fpage>–<lpage>86</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B23">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lopez</surname><given-names>C.F.</given-names></string-name></person-group><etal>et al</etal> (<year>2013</year>) <article-title>Programming biological models in python using PySB</article-title>. <source>Mol. Syst. Biol</source>., <volume>9</volume>, <fpage>646</fpage>.<pub-id pub-id-type="pmid">23423320</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B24">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Maggioli</surname><given-names>F.</given-names></string-name></person-group><etal>et al</etal> (<year>2020</year>) <article-title>SBML2Modelica: integrating biochemical models within open-standard simulation ecosystems</article-title>. <source>Bioinformatics</source>, <volume>36</volume>, <fpage>2165</fpage>–<lpage>2172</lpage>.<pub-id pub-id-type="pmid">31738386</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B25">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Malik-Sheriff</surname><given-names>R.S.</given-names></string-name></person-group><etal>et al</etal> (<year>2020</year>) <article-title>Biomodels–15 years of sharing computational models in life science</article-title>. <source>Nucleic Acids Res</source>., <volume>48</volume>, <fpage>D407</fpage>–<lpage>D415</lpage>.<pub-id pub-id-type="pmid">31701150</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B26">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Maly</surname><given-names>T.</given-names></string-name>, <string-name><surname>Petzold</surname><given-names>L.R.</given-names></string-name></person-group> (<year>1996</year>) <article-title>Numerical methods and software for sensitivity analysis of differential-algebraic systems</article-title>. <source>Appl. Numer. Math</source>., <volume>20</volume>, <fpage>57</fpage>–<lpage>79</lpage>.</mixed-citation>
    </ref>
    <ref id="btac770-B27">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Moraru</surname><given-names>I.I.</given-names></string-name></person-group><etal>et al</etal> (<year>2008</year>) <article-title>Virtual cell modelling and simulation software environment</article-title>. <source>IET Syst. Biol</source>., <volume>2</volume>, <fpage>352</fpage>–<lpage>362</lpage>.<pub-id pub-id-type="pmid">19045830</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B28">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Myers</surname><given-names>C.J.</given-names></string-name></person-group><etal>et al</etal> (<year>2009</year>) <article-title>iBioSim: a tool for the analysis and design of genetic circuits</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>2848</fpage>–<lpage>2849</lpage>.<pub-id pub-id-type="pmid">19628507</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B29">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Neumann</surname><given-names>J.</given-names></string-name></person-group><etal>et al</etal> (<year>2022</year>) <article-title>Implementation of a practical Markov chain Monte Carlo sampling algorithm in PyBioNetFit</article-title>. <source>Bioinformatics</source>, <volume>38</volume>, <fpage>1770</fpage>–<lpage>1772</lpage>.<pub-id pub-id-type="pmid">34986226</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B30">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nguyen</surname><given-names>L.K.</given-names></string-name></person-group><etal>et al</etal> (<year>2015</year>) <article-title>DYVIPAC: an integrated analysis and visualisation framework to probe multi-dimensional biological networks</article-title>. <source>Sci. Rep</source>., <volume>5</volume>, <fpage>12569</fpage>–<lpage>12517</lpage>.<pub-id pub-id-type="pmid">26220783</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B31">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Olivier</surname><given-names>B.G.</given-names></string-name></person-group><etal>et al</etal> (<year>2005</year>) <article-title>Modelling cellular systems with PySCeS</article-title>. <source>Bioinformatics</source>, <volume>21</volume>, <fpage>560</fpage>–<lpage>561</lpage>.<pub-id pub-id-type="pmid">15454409</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B32">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ortega</surname><given-names>O.O.</given-names></string-name>, <string-name><surname>Lopez</surname><given-names>C.F.</given-names></string-name></person-group> (<year>2020</year>) <article-title>Interactive multiresolution visualization of cellular network processes</article-title>. <source>iScience</source>, <volume>23</volume>, <fpage>100748</fpage>.<pub-id pub-id-type="pmid">31884165</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B33">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Panchiwala</surname><given-names>H.</given-names></string-name></person-group><etal>et al</etal> (<year>2022</year>) <article-title>The systems biology simulation core library</article-title>. <source>Bioinformatics</source>, <volume>38</volume>, <fpage>864</fpage>–<lpage>865</lpage>.<pub-id pub-id-type="pmid">34554191</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B34">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Reyes</surname><given-names>B.C.</given-names></string-name></person-group><etal>et al</etal> (<year>2022</year>) <article-title>A numerical approach for detecting switch-like bistability in mass action chemical reaction networks with conservation laws</article-title>. <source>BMC Bioinformatics</source>, <volume>23</volume>, <fpage>1</fpage>–<lpage>26</lpage>.<pub-id pub-id-type="pmid">34983366</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B35">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Sauro</surname><given-names>H.M.</given-names></string-name></person-group> (<year>2014</year>) <source>Systems Biology: An Introduction to Pathway Modeling</source>. <publisher-name>Ambrosius Publishing</publisher-name>.</mixed-citation>
    </ref>
    <ref id="btac770-B36">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Shaikh</surname><given-names>B.</given-names></string-name></person-group><etal>et al</etal> (<year>2021</year>) <article-title>RunBioSimulations: an extensible web application that simulates a wide range of computational modeling frameworks, algorithms, and formats</article-title>. <source>Nucleic Acids Res</source>., <volume>49</volume>, <fpage>W597</fpage>–<lpage>W602</lpage>.<pub-id pub-id-type="pmid">34019658</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B37">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Shoshany</surname><given-names>B.</given-names></string-name></person-group> (<year>2021</year>) A C++ 17 thread pool for high-performance scientific computing. <italic toggle="yes">arXiv preprint arXiv:2105.00613</italic>.</mixed-citation>
    </ref>
    <ref id="btac770-B38">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Smith</surname><given-names>L.</given-names></string-name></person-group> (<year>2022</year>) Test results: libRoadRunner 2.2.0.</mixed-citation>
    </ref>
    <ref id="btac770-B39">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Smith</surname><given-names>L.P.</given-names></string-name></person-group><etal>et al</etal> (<year>2009</year>) <article-title>Antimony: a modular model definition language</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>2452</fpage>–<lpage>2454</lpage>.<pub-id pub-id-type="pmid">19578039</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B40">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Smith</surname><given-names>L.P.</given-names></string-name></person-group><etal>et al</etal> (<year>2020</year>) <article-title>Systems biology markup language (SBML) level 3 package: distributions, version 1, release 1</article-title>. <source>J. Integr. Bioinformatics</source>, <volume>17</volume>, 20200018.</mixed-citation>
    </ref>
    <ref id="btac770-B41">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Somogyi</surname><given-names>E.T.</given-names></string-name></person-group><etal>et al</etal> (<year>2015</year>) <article-title>libRoadRunner: a high performance SBML simulation and analysis library</article-title>. <source>Bioinformatics</source>, <volume>31</volume>, <fpage>3315</fpage>–<lpage>3321</lpage>.<pub-id pub-id-type="pmid">26085503</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B42">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Swat</surname><given-names>M.H.</given-names></string-name></person-group><etal>et al</etal> (<year>2012</year>) <article-title>Multi-scale modeling of tissues using compucell3d</article-title>. <source>Methods Cell Biol</source>., <volume>110</volume>, <fpage>325</fpage>–<lpage>366</lpage>.<pub-id pub-id-type="pmid">22482955</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B43">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Takizawa</surname><given-names>H.</given-names></string-name></person-group><etal>et al</etal> (<year>2013</year>) <article-title>LibSBMLSim: a reference implementation of fully functional SBML simulator</article-title>. <source>Bioinformatics</source>, <volume>29</volume>, <fpage>1474</fpage>–<lpage>1476</lpage>.<pub-id pub-id-type="pmid">23564843</pub-id></mixed-citation>
    </ref>
    <ref id="btac770-B44">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Watanabe</surname><given-names>L.H.</given-names></string-name></person-group><etal>et al</etal> (<year>2018</year>) <article-title>Dynamic flux balance analysis models in SBML</article-title>. <source>Bioinformatics</source>. <pub-id pub-id-type="doi">10.1101/245076</pub-id>.</mixed-citation>
    </ref>
  </ref-list>
</back>
