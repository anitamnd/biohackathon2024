<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?subarticle report130101?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">F1000Res</journal-id>
    <journal-id journal-id-type="iso-abbrev">F1000Res</journal-id>
    <journal-title-group>
      <journal-title>F1000Research</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2046-1402</issn>
    <publisher>
      <publisher-name>F1000 Research Limited</publisher-name>
      <publisher-loc>London, UK</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9171289</article-id>
    <article-id pub-id-type="doi">10.12688/f1000research.110385.2</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software Tool Article</subject>
      </subj-group>
      <subj-group>
        <subject>Articles</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Easing batch image processing from OMERO: a new toolbox for ImageJ</article-title>
      <fn-group content-type="pub-status">
        <fn>
          <p>[version 2; peer review: 2 approved]</p>
        </fn>
      </fn-group>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Pouchin</surname>
          <given-names>Pierre</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Conceptualization</role>
        <role content-type="http://credit.niso.org/">Investigation</role>
        <role content-type="http://credit.niso.org/">Methodology</role>
        <role content-type="http://credit.niso.org/">Resources</role>
        <role content-type="http://credit.niso.org/">Software</role>
        <role content-type="http://credit.niso.org/">Supervision</role>
        <role content-type="http://credit.niso.org/">Validation</role>
        <role content-type="http://credit.niso.org/">Writing – Original Draft Preparation</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-3858-3152</contrib-id>
        <xref rid="c1" ref-type="corresp">a</xref>
        <xref rid="a1" ref-type="aff">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zoghlami</surname>
          <given-names>Rayan</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Investigation</role>
        <role content-type="http://credit.niso.org/">Software</role>
        <role content-type="http://credit.niso.org/">Validation</role>
        <xref rid="a2" ref-type="aff">2</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Valarcher</surname>
          <given-names>Rémi</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Investigation</role>
        <role content-type="http://credit.niso.org/">Software</role>
        <role content-type="http://credit.niso.org/">Validation</role>
        <xref rid="a1" ref-type="aff">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Delannoy</surname>
          <given-names>Maxence</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Investigation</role>
        <role content-type="http://credit.niso.org/">Software</role>
        <role content-type="http://credit.niso.org/">Validation</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-7061-1833</contrib-id>
        <xref rid="a3" ref-type="aff">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Carvalho</surname>
          <given-names>Manon</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Investigation</role>
        <role content-type="http://credit.niso.org/">Software</role>
        <role content-type="http://credit.niso.org/">Validation</role>
        <xref rid="a3" ref-type="aff">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Belle</surname>
          <given-names>Clémence</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Investigation</role>
        <role content-type="http://credit.niso.org/">Software</role>
        <role content-type="http://credit.niso.org/">Validation</role>
        <xref rid="a3" ref-type="aff">3</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Mongy</surname>
          <given-names>Marc</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Validation</role>
        <xref rid="a4" ref-type="aff">4</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes" equal-contrib="yes">
        <name>
          <surname>Desset</surname>
          <given-names>Sophie</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Funding Acquisition</role>
        <role content-type="http://credit.niso.org/">Supervision</role>
        <role content-type="http://credit.niso.org/">Validation</role>
        <role content-type="http://credit.niso.org/">Writing – Original Draft Preparation</role>
        <xref rid="c2" ref-type="corresp">b</xref>
        <xref rid="a1" ref-type="aff">1</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes" equal-contrib="yes">
        <name>
          <surname>Brau</surname>
          <given-names>Frédéric</given-names>
        </name>
        <role content-type="http://credit.niso.org/">Conceptualization</role>
        <role content-type="http://credit.niso.org/">Methodology</role>
        <role content-type="http://credit.niso.org/">Project Administration</role>
        <role content-type="http://credit.niso.org/">Resources</role>
        <role content-type="http://credit.niso.org/">Software</role>
        <role content-type="http://credit.niso.org/">Validation</role>
        <role content-type="http://credit.niso.org/">Writing – Original Draft Preparation</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-5967-5895</contrib-id>
        <xref rid="c3" ref-type="corresp">c</xref>
        <xref rid="a2" ref-type="aff">2</xref>
      </contrib>
      <aff id="a1"><label>1</label>GReD, CNRS, INSERM, Université Clermont Auvergne, Clermont-Ferrand, France</aff>
      <aff id="a2"><label>2</label>Université Côte d’Azur, CNRS, IPMC, Valbonne, France</aff>
      <aff id="a3"><label>3</label>Polytech Nice Sophia, Campus SophiaTech, Sophia Antipolis, France</aff>
      <aff id="a4"><label>4</label>Univ. Lille, CNRS, Inserm, CHU Lille, Institut Pasteur de Lille, U1019 - UMS 9017 - CIIL - Center for Infection and Immunity of Lille, Lille, 59000, France</aff>
    </contrib-group>
    <author-notes>
      <corresp id="c1">
        <label>a</label>
        <email xlink:href="mailto:pierre.pouchin@uca.fr">pierre.pouchin@uca.fr</email>
      </corresp>
      <corresp id="c2">
        <label>b</label>
        <email xlink:href="mailto:sophie.desset@uca.fr">sophie.desset@uca.fr</email>
      </corresp>
      <corresp id="c3">
        <label>c</label>
        <email xlink:href="mailto:brau@ipmc.cnrs.fr">brau@ipmc.cnrs.fr</email>
      </corresp>
      <fn fn-type="COI-statement">
        <p>No competing interests were disclosed.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>12</day>
      <month>9</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <volume>11</volume>
    <elocation-id>392</elocation-id>
    <history>
      <date date-type="accepted">
        <day>8</day>
        <month>8</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright: © 2022 Pouchin P et al.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access article distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri content-type="pdf" xlink:href="f1000research-11-135994.pdf"/>
    <abstract>
      <p>The Open Microscopy Environment Remote Objects (OMERO) is an open-source image manager used by many biologists to store, organize, view, and share microscopy images, while the open-source software ImageJ/Fiji is a very popular program used to analyse them. However, there is a lack of an easy-to-use generic tool to run a workflow on a batch of images without having to download them to local computers, and to automatically organize the results in OMERO. To offer this functionality, we have built (i) a library in Java: “Simple OMERO Client”, to communicate with an OMERO database from Java software, (ii) an ImageJ/Fiji plugin to run a macro-program on a batch of images from OMERO and (iii) a new set of Macro Functions, “OMERO Macro extensions“, dedicated to interact with OMERO in macro-programming. The latter is intended for developers, with additional possibilities using tag criteria, while the “Batch OMERO plugin” is more geared towards non-IT scientists and has a very easy to use interface. Each tool is illustrated with a use case.</p>
    </abstract>
    <kwd-group kwd-group-type="author">
      <kwd>OMERO</kwd>
      <kwd>Fiji</kwd>
      <kwd>ImageJ</kwd>
      <kwd>Java</kwd>
      <kwd>Image Analysis</kwd>
      <kwd>Image processing</kwd>
      <kwd>Automation</kwd>
      <kwd>Microscopy</kwd>
    </kwd-group>
    <funding-group>
      <award-group id="fund-1">
        <funding-source>COST-Action INDEPTH</funding-source>
        <award-id>CA16212</award-id>
      </award-group>
      <award-group id="fund-2" xlink:href="http://dx.doi.org/10.13039/501100001665">
        <funding-source>Agence Nationale de la Recherche</funding-source>
        <award-id>ANR-15-IDEX-01</award-id>
      </award-group>
      <award-group id="fund-3">
        <funding-source>Pack Ambition Recherche project Noyau-HD</funding-source>
      </award-group>
      <award-group id="fund-4">
        <funding-source>Université Clermont Auvergne</funding-source>
        <award-id>16-IDEX-0001CAP20-25challenge1</award-id>
      </award-group>
      <funding-statement>The Université Côte d'Azur and EMBRC-France OMERO Database deployment was financially supported by the "Complexity and diversity of living systems" Academie of Excellence established within the framework of the UCAJEDI IdEx program. This work has been supported by the French government, through the UCAJEDI Investments in the Future project managed by the National Research Agency (ANR) with the reference number ANR-15-IDEX-01. The work of PP and SD was supported by CNRS, INSERM, Université Clermont Auvergne (UCA), 16-IDEX-0001 CAP 20-25 challenge 1, and the COST-Action INDEPTH (CA16212), the work of RV was supported by Pack Ambition Recherche project Noyau-HD from the Region Auvergne Rhone Alpes.</funding-statement>
      <funding-statement>
        <italic toggle="yes">The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</italic>
      </funding-statement>
    </funding-group>
  </article-meta>
  <notes notes-type="version-changes">
    <sec sec-type="version-changes">
      <label>Revised</label>
      <title>Amendments from Version 1</title>
      <p>This revised version is a modified version giving complementary and missing information about previous works of the OMERO community and discussing our development choices regarding these approaches through the Introduction and Implementation chapters. We also attempted to clarify the terminology between the three developments mentioned as tools in this new toolbox, particularly the distinction between the library which is the support of the conjoint development of the OMERO Macro extensions and Batch OMERO plugins, which are new ImageJ/Fiji modules giving access respectively to a new set of new set of Macro Functions for macro programming; and a specific Graphical User Interface to ease non-IT batch image analysis on OMERO.</p>
    </sec>
  </notes>
</front>
<body>
  <sec sec-type="intro" id="sec1">
    <title>Introduction</title>
    <p>Cell biology research is a big provider of multidimensional image data through the use of multimodal microscopy approaches to decipher cellular processes. Photonic microscopes and associated areas of expertise in image analysis are often available in cellular imaging facilities which tend to propose unified tools to manage images and associated projects. Over the last decade many tools emerged which are in constant development: software platforms (QuPath,
<sup><xref rid="ref1" ref-type="bibr">1</xref></sup> Cell Profiler,
<sup><xref rid="ref2" ref-type="bibr">2</xref></sup> Icy,
<sup><xref rid="ref3" ref-type="bibr">3</xref></sup> KNIME,
<sup><xref rid="ref4" ref-type="bibr">4</xref></sup> napari
<sup><xref rid="ref5" ref-type="bibr">5</xref></sup>), browser-based and collaborative frameworks (ImJoy,
<sup><xref rid="ref6" ref-type="bibr">6</xref></sup> BIAFLOWS,
<sup><xref rid="ref7" ref-type="bibr">7</xref></sup> TissUUmaps
<sup><xref rid="ref8" ref-type="bibr">8</xref></sup>), and image databases (BisQUE,
<sup><xref rid="ref9" ref-type="bibr">9</xref></sup> Cytomine
<sup><xref rid="ref10" ref-type="bibr">10</xref></sup>). While some of these programs are focused essentially on the analysis of images and others on their management, the global trend for image analysis in the machine and deep learning era is to use complementary software or platforms integrating a combination of these tools. In this ecosystem, the Open Microscopy Environment (OME) Remote Objects (OMERO),
<sup><xref rid="ref11" ref-type="bibr">11</xref></sup> and ImageJ/Fiji
<sup><xref rid="ref12" ref-type="bibr">12</xref></sup>
<sup>–</sup>
<sup><xref rid="ref14" ref-type="bibr">14</xref></sup> benefit from a high level of historical implementation in the microscopy landscape involving a large community of users and developers.</p>
    <p>OMERO is a complete platform designed for managing (organizing, editing, analysing and sharing) images online through standalone clients (OMERO.insight) and dedicated web interfaces, including a viewer for full multi-dimensional image display, a figure editor, analysis with internal scripts and an integrated data mining tool. Over 150 proprietary microscopy image formats are supported. The organisation, browsing and searching of images is eased by multiple cataloguing tools, as data can be annotated with tags, comments, key-value pairs, tables, and supplementary files.</p>
    <p>To analyse images, OMERO also provides Application Programming Interfaces (APIs) to let developers interact with a server from programs in Java, Python, MATLAB and C++ and thus many image analysis software packages can connect to OMERO via dedicated links or plugins.
<sup><xref rid="ref1" ref-type="bibr">1</xref></sup>
<sup>,</sup>
<sup><xref rid="ref2" ref-type="bibr">2</xref></sup>
<sup>,</sup>
<sup><xref rid="ref15" ref-type="bibr">15</xref></sup>
<sup>,</sup>
<sup><xref rid="ref16" ref-type="bibr">16</xref></sup> Among these,
<ext-link xlink:href="https://omero-guides.readthedocs.io/en/latest/fiji/docs/installation.html" ext-link-type="uri">the official OMERO plugin for ImageJ/Fiji</ext-link> allows access to the OMERO.insight interface to open and treat an image on local desktops before saving regions of interest (ROIs), results tables and images in the database after a manual or semi-manual sequence of treatment, and so does the bidirectional software bridge
<ext-link xlink:href="https://github.com/imagej/imagej-omero" ext-link-type="uri">ImageJ-OMERO</ext-link> in ImageJ2. Although it is easy and common to automate such processing with Fiji via a macro for a folder of images, it is not yet possible to automate all the processes (import/export, saving images, ROIs, results, etc.) through a unique Macro program in ImageJ/Fiji for images hosted in the OMERO database. The only solutions available today are either to write and execute a script in ImageJ2/Fiji
<ext-link xlink:href="https://omero-guides.readthedocs.io/en/latest/fiji/docs/threshold_scripting.html" ext-link-type="uri">similar to the example provided in the OMERO guide for threshold segmentation on datasets</ext-link>, or using ImageJ-OMERO.</p>
    <p>The goal of this work is to ease the access to image analysis for all users who are managing their projects and images in OMERO. Based on a new and exhaustive library for importing/exporting images and results from and to the OMERO database, named Simple OMERO Client, which mirrors similar efforts done in Python with
<ext-link xlink:href="https://github.com/TheJacksonLaboratory/ezomero" ext-link-type="uri"><italic toggle="yes">ezomero</italic></ext-link>, we propose two ways to interact with the OMERO database using the ImageJ Macro language. The first one is through a graphical user interface (GUI) on the same basis as the Batch Process module of ImageJ, which will loop a macro program written for one image on whole datasets. The other one is using new OMERO Macro functions to write a macro program that will loop the analysis on datasets. Both are developed using the aforementioned Java library, Simple OMERO client, which will also be described in this paper.</p>
  </sec>
  <sec sec-type="methods" id="sec2">
    <title>Methods</title>
    <sec id="sec3">
      <title>Implementation</title>
      <p>Simple OMERO Client a library, and two plugins, OMERO Macro Extensions and batch OMERO plugin were built. These last two, are mentioned as “plugins” as they will be new ImageJ/Fiji modules/menus to get access to (i) a vocabulary extension in macro programming to interact with OMERO, or (ii) a specific GUI to batch image analysis from OMERO. All three were written in Java 8 and use Maven
<sup><xref rid="ref17" ref-type="bibr">17</xref></sup> to handle their dependencies. They all rely on
<italic toggle="yes">ImageJ.</italic> The two plugins depend on the
<italic toggle="yes">Simple OMERO Client</italic> library which was developed to wrap calls to the underlying
<italic toggle="yes">OMERO Java Gateway</italic>, its main dependency.</p>
      <p>Simple OMERO Client</p>
      <p>Simple OMERO Client is a Java library that we developed to factor code that was often re-used when interacting with ImageJ1 in a few projects, such as methods to retrieve pixel values or ROI data. The ImageJ-OMERO plugin, which offers similar functionality, was not used as it was aimed at ImageJ2; and not compatible with OMERO versions greater than 5.4, until recently.</p>
      <p>Our Maven project relies on
<italic toggle="yes">omero-gateway</italic>,
<italic toggle="yes">omero-blitz</italic> and
<italic toggle="yes">omero-model</italic> to interact with an OMERO server, but it also depends on
<italic toggle="yes">formats-api</italic> to handle microscope images locally. Finally, it uses
<italic toggle="yes">bio-formats_plugins</italic>,
<italic toggle="yes">junit4</italic> and
<italic toggle="yes">Jacoco</italic> to run tests which should ensure that the library functions as intended. These tests, however, require a local OMERO server and are ideally run through
<italic toggle="yes">omero-test-infra</italic>, as is the case during the continuous integration (CI) process on the project GitHub repository, where the sources and compiled JAR can be found. The CI also uses SonarCloud and Codecov for code analysis (coverage, quality).</p>
      <p>This library often wraps simple calls to the underlying OMERO API, but does contain complex blocks that would otherwise need to be copied to every project, such as:
<list list-type="simple"><list-item><label>•</label><p>handling key/value pairs or folders,</p></list-item><list-item><label>•</label><p>retrieving pixels from OMERO,</p></list-item><list-item><label>•</label><p>converting ROIs between OMERO and ImageJ,</p></list-item><list-item><label>•</label><p>converting ImageJ results to OMERO tables.</p></list-item></list>
</p>
      <p>Most OMERO data structures are simply wrapped (Facade pattern), although a Template method pattern was also used to reinstate inheritance like in the OME model and factor common methods shared by several classes when possible (such as shapes, annotations, or hierarchy objects).</p>
      <p>OMERO Macro Extensions</p>
      <p>The
<italic toggle="yes">OMERO Macro Extensions</italic> set of macro functions only depends on
<italic toggle="yes">ImageJ</italic> and
<italic toggle="yes">Simple OMERO Client</italic> to run. It relies on
<italic toggle="yes">junit5</italic> and
<italic toggle="yes">Jacoco</italic> for unit tests, although some functions rely on graphical elements (such as the ROI manager) and are not currently automatically tested. The CI process is similar to what is done for
<italic toggle="yes">Simple OMERO Client</italic>, except code analysis which is not performed through SonarCloud or Codecov. This plugin consists of a single class implementing the
<italic toggle="yes">MacroExtension</italic> interface from ImageJ: it defines 22 macro functions to interact with OMERO and acts as a front for Simple OMERO Client. To do that, it essentially parses String and Long arguments before it calls the appropriate methods from the underlying library.</p>
      <p>Batch OMERO plugin</p>
      <p>The
<italic toggle="yes">batch OMERO plugin</italic> depends on
<italic toggle="yes">ImageJ</italic> and
<italic toggle="yes">Simple OMERO Client</italic> as well as
<italic toggle="yes">formats-api</italic> and
<italic toggle="yes">bio-formats_plugins</italic> to open images from local files. It also, optionally, relies on
<italic toggle="yes">scijava-common</italic> and
<italic toggle="yes">scijava-ui-swing</italic> to handle script inputs and other script languages, if possible. Currently, no automatic testing is performed and there is no CI. The main plugin window handles the connection to OMERO, displays the objects and collects the input/output while a different class is responsible for effectively running the script on all the images from the selected source and saving the results. A specific class handles the execution of the script file and collects the possible arguments beforehand: if SciJava is available, it will be used, otherwise it will fall back on ImageJ1 functions.</p>
    </sec>
    <sec id="sec5">
      <title>Operation</title>
      <p>To operate these tools, respective Maven dependencies need to be available, as well as a Java Virtual Machine (JVM). In practice, the OMERO dependencies can be provided by the
<ext-link xlink:href="https://omero-guides.readthedocs.io/en/latest/fiji/docs/installation.html" ext-link-type="uri">OMERO.insight plugin for ImageJ</ext-link>, or better yet, by the
<ext-link xlink:href="https://sites.imagej.net/OMERO-5.5-5.6/" ext-link-type="uri">OMERO-5.5-5.6 Fiji update site</ext-link>, while the bio-formats dependencies are provided by the corresponding
<ext-link xlink:href="https://www.openmicroscopy.org/bio-formats/downloads/" ext-link-type="uri">plugin</ext-link> (included in Fiji).</p>
      <p>Simple OMERO Client</p>
      <p>The library will normally be used by developers: the easiest way is to add it as a Maven dependency to the project, as it was done by the ImageJ plugins presented in this paper. If the aim is to use an uber-JAR (including the dependencies) through another language (e.g. Python), the code just needs to be built with Maven: this will produce the desired file. This file can also be downloaded from the GitHub packages for this
<ext-link xlink:href="https://github.com/orgs/GReD-Clermont/packages?repo_name=simple-omero-client" ext-link-type="uri">repository</ext-link>. When interacting with ImageJ, it is possible to create tables on OMERO from ImageJ results. The library also makes it possible to transfer ROIs between OMERO and ImageJ. However, as the latter only works with 2D shapes while the former handles 4D data, additional metadata are required to track which shapes belong to the same ROI. The library expects it to be done using a property in ImageJ: shapes that share the same local index for the specified key correspond to the same ROI in OMERO. Moreover, when ROIs are retrieved from OMERO, a second property, with “_ID” appended, is set with the OMERO ID as its value. Finally, tables created from ImageJ results can have a ROI column linking each line to an ROI if all the lines fulfil one of the following conditions:
<list list-type="simple"><list-item><label>•</label><p>A column with the same name as the property key contains the corresponding value, and the ROI has an ID property.</p></list-item><list-item><label>•</label><p>A column with the same name as the ID property contains the ROI ID.</p></list-item><list-item><label>•</label><p>The label contains the name of an ImageJ ROI with those properties set.</p></list-item></list>
</p>
      <p>OMERO Macro Extensions</p>
      <p>Once the OMERO Macro Extensions plugin is installed in ImageJ, along with its dependencies, it can be used through the macro language. When writing a macro using these extensions, the first thing to do is to load the plugin with the following command:
<monospace>run(“OMERO Extensions”);</monospace>
</p>
      <p>Connecting to OMERO is done using:
<monospace>Ext.connectToOMERO(“host”, 4064, “username”, “password”);</monospace>
</p>
      <p>Then, switching group can be performed through:
<monospace>Ext.switchGroup(groupId);</monospace>
</p>
      <p>Afterwards, interacting with OMERO only takes simple instructions, such as:
<preformat preformat-type="computer code" position="float" xml:space="preserve">datasets = Ext.list("datasets");</preformat>
</p>
      <p>or:
<preformat preformat-type="computer code" position="float" xml:space="preserve">imageplusID = Ext.getImage(imageId);</preformat>
</p>
      <p>When done, you can disconnect with:
<monospace>Ext.disconnect();</monospace>
</p>
      <p>Batch OMERO plugin</p>
      <p>In the same way, the batch OMERO plugin needs to be installed in the ImageJ plugins folder along with its dependencies. If this plugin is installed in ImageJ2/Fiji, it will make use of SciJava to run scripts using script parameters, otherwise it will only run ImageJ1 macro files, with arguments specified manually. When the plugin and the Simple OMERO Client are downloaded and installed, and once ImageJ/Fiji is launched, a new “Batch process…” item is added in the OMERO plugin menu. When chosen, the GUI (
<xref rid="f1" ref-type="fig">Figure 1</xref>) is opened. A connection window to OMERO appears by clicking « Connect » in this window. Once connected, the drop-down menus will be filled with information coming from the default group of the User (Group, User, Project, Dataset). Depending on the saving options (OMERO or local), the window will adapt its output choices.</p>
      <fig position="float" fig-type="figure" id="f1">
        <label>Figure 1. </label>
        <caption>
          <title>GUI window of the batch OMERO plugin.</title>
        </caption>
        <graphic xlink:href="f1000research-11-135994-g0000" id="gr1" position="float"/>
      </fig>
      <p>The tool can process images retrieved remotely from OMERO or locally from a folder, using Bio-Formats. Conversely, it can save the output on OMERO and/or locally. The main possible outputs are new images, ROIs, results tables, or log windows and the user has to specify (
<xref rid="f1" ref-type="fig">Figure 1</xref>) what should be saved in accordance with the outputs of the macro.</p>
      <p>ROIs can be loaded from OMERO: if this option is chosen (
<xref rid="f1" ref-type="fig">Figure 1</xref>), then OMERO ROIs will be exported to the ROI Manager using Simple OMERO Client. 3D/4D ROIs can thus be accessed from macros through two ROI properties: “ROI” and “ROI_ID”, which contain, respectively, the local index and the ROI ID on OMERO for each 2D shape.</p>
      <p>When saving to OMERO, the users have to choose an existing project or a dataset they own in the current group.</p>
      <p>Furthermore, the following rules apply:
<list list-type="simple"><list-item><label>•</label><p>If ROIs are saved but images are not, then they are saved to the input image on OMERO, which should be annotatable by the user.</p></list-item><list-item><label>•</label><p>If images and ROIs are saved, then:</p><list list-type="simple"><list-item><label>‐</label><p>For each image, its overlay is imported as well.</p></list-item><list-item><label>‐</label><p>The last active image obtained with the macro-processing gets the content of the ROI Manager, and the Results tables and log windows will be its associated files.</p></list-item><list-item><label>‐</label><p>If the last active image is the same than the input image but it cannot be annotated by the current user, then the image is re-imported for the user.</p></list-item></list></list-item><list-item><label>•</label><p>If tables are saved to a project, and ROIs were loaded or saved, the tables can have a ROI column, provided they fulfil the requirements from the simple-omero-client library mentioned previously.</p></list-item></list>
</p>
    </sec>
  </sec>
  <sec id="sec6">
    <title>Use cases</title>
    <p>Batch OMERO plugin</p>
    <p>As 2D or 3D segmentation is a general requirement to perform quantification in cellular biology, a use case based on this image analysis procedure is proposed to show all the possible outputs obtained with these tools. So, the batch OMERO plugin and OMERO Macro extensions were tested on a XYZ set of DAPI images obtained from a FluoCells Prepared Slide 3 (mouse kidney section with Alexa Fluor 488 WGA, Alexa Fluor 568 Phalloidin, and DAPI) from Thermo Fisher Scientific. Images were acquired on a LSM780 laser scanning confocal (Carl Zeiss, France) through a 63X/1.4 oil immersion objective (excitation 405 nm, emission 430-460 nm, voxel size 130×130×200 nm) and a blind deconvolution was applied using Huygens Remote Manager with a CMLE algorithm (Scientific Volume Imaging, Netherlands). Two macros are available to try the Batch OMERO plugin:
<list list-type="simple"><list-item><label>•</label><p>“Macro_to_Batch_onOmero_3D”: this program performs 3D segmentation on the image stack of nuclei using the 3D object counter plugin
<sup><xref rid="ref18" ref-type="bibr">18</xref></sup> after low pass filtering and Otsu thresholding. Then ROI groups are created by gathering objects which have the same label on different slices. At the end, the macro returns the image of labels overlaid with the ROIs, a results Table (
<xref rid="f2" ref-type="fig">Figure 2</xref>) and a log window. It can be run by ImageJ1 or ImageJ2/Fiji: in the former case default parameters will be used (predefined minimal sizes of objects, and all images kept at the end). In the latter, as it also uses the script parameters of ImageJ2, the minimal size of the objects can be defined by the user who can decide if images are kept or not at the end of the execution of the macro. These inputs can be displayed and modified through the GUI of the plugin with the “Set Arguments” button. This macro is the generic one called by the next one and the use case macro of OMERO Macro extensions.</p></list-item><list-item><label>•</label><p>“Macro_to_Batch_onOmero_3D_IJ1_Arguments”: this macro is only coded in ImageJ1 macro language to get the parameters and calls the previous one. Its goal is to show another way to get input parameters. Indeed, the batch OMERO plugin calls the macro each time an image is opened from a dataset. If it is an ImageJ1 macro containing a dialog box to get input parameters, this one will be displayed at each execution of the macro, by default. This problem can be circumvented by getting the number of times the macro is called by the plugin with the
<monospace>getArguments()</monospace> command. The dialog box will be displayed at the first call and parameters stored in a text file. They will be retrieved from the file at the next calls.</p></list-item></list>
</p>
    <fig position="float" fig-type="figure" id="f2">
      <label>Figure 2. </label>
      <caption>
        <title>A) Project and Dataset processed by the “Macro_to_Batch_onOmero_3D” B) First image with 2 groups of ROIs displayed (red and yellow) C) View of each ROI of these groups on the different z positions of the 3D stack D) csv file and Table attached to the Project containing all the ROI measurements for all the images of the dataset processed.</title>
      </caption>
      <graphic xlink:href="f1000research-11-135994-g0001" id="gr2" position="float"/>
    </fig>
    <p>OMERO Macro Extensions</p>
    <p>In this use case, the macro language extension for OMERO is used in the macro program “Test_langage_extensions_runMacro_alltags” to show another way to access and process the images through their tags. Two dialog boxes are displayed during the execution. The first one allows the user to log in and define a specific signature keyword to tag the images that will be processed (“IJ_Processed” by default). The second one contains a drop-down menu to choose the images that will be processed for 3D segmentation according to their tag, among the tags used in the default user group. If the signature tag already exists, the macro tests if it is linked to the image. If this condition is fulfilled, the image will not be processed, otherwise it will be linked to the image after processing. When the signature tag is unknown in the user group, it is created and linked to the processed image.</p>
    <p>The plugin also includes macro templates that are conversions of some of the Groovy scripts provided in the
<ext-link xlink:href="https://github.com/ome/omero-guide-fiji/tree/master/scripts/groovy" ext-link-type="uri"><italic toggle="yes">omero-guide-fiji</italic></ext-link> repository and illustrate the possibilities offered by the plugin.</p>
    <p>Simple OMERO Client</p>
    <p>The expected use case for the library is to use it as a Maven dependency in a Java project, as demonstrated by the two ImageJ plugins presented in this paper. Another use case would be to call it from an ImageJ2 script to access advanced OMERO functions directly from there. It is, for example, short and easy to retrieve the maximum value from images inside a dataset and tag them if the value is between two set thresholds (script available in OMERO toolbox examples).</p>
  </sec>
  <sec sec-type="conclusion" id="sec7">
    <title>Conclusion</title>
    <p>In this paper we provide new tools to facilitate automatic image processing with ImageJ/Fiji on images managed through an OMERO database. One of the main advantages of these tools is to simplify the macro-programming and give the opportunity to quickly analyse multiple images. Among these advantages, avoiding the tedious image format management when coding Macro programs in ImageJ/Fiji, will accelerate Macro development for end-users and help focus on the essential goal: image analysis. The spirit of the plugin could be considered close to the Batch Process plugin integrated in ImageJ1, as people without any knowledge with Macro language could record their image analysis process and apply it after on all their images. Consequently, we should highlight, that our plugin potentiates the original Batch Process by offering the choice to alternatively work with local folders, like the original one, or the files could be imported/exported from local directories or the OMERO database. The plugin and language extension approaches can be considered complementary, as the language extension will allow more complex processing, including a faster connection without GUI, a tag management of the images for example, allowing selective analyses. Another big advantage will be the delivery of CSV files and tables associated with the Project, which allows the use of the OMERO.parade data mining tool, and particularly the recent
<ext-link xlink:href="https://github.com/will-moore/parade-crossfilter" ext-link-type="uri">parade-crossfilter development</ext-link>.</p>
  </sec>
  <sec sec-type="data-availability" id="sec8">
    <title>Data availability</title>
    <sec id="sec9">
      <title>Underlying data</title>
      <p>No underlying data are associated with this article.</p>
    </sec>
    <sec id="sec10">
      <title>Extended data</title>
      <p>The Dataset of images dedicated to these treatments and processed with the “Macro_to_Batch_onOmero_3D”, through the Batch OMERO Plugin are available, alongside their results, on the public webpage of the OMERO database from Université Côte d’Azur and EMBRC-France, managed by the “Microscopie Imagerie Côte d’Azur” (MICA) Facility and housed by “Institut Français de Bioinformatique” from:
<ext-link xlink:href="https://bioimage.france-bioinformatique.fr/omero-mica/webclient/?show=project-3006" ext-link-type="uri">https://bioimage.france-bioinformatique.fr/omero-mica/webclient/?show=project-3006</ext-link>.</p>
    </sec>
  </sec>
  <sec id="sec11">
    <title>Software availability</title>
    <p>
      <list list-type="simple">
        <list-item>
          <label>•</label>
          <p>Simple OMERO Client:</p>
          <list list-type="simple">
            <list-item>
              <label>•</label>
              <p>Software and source code available from:
<ext-link xlink:href="https://github.com/GReD-Clermont/simple-omero-client" ext-link-type="uri">https://github.com/GReD-Clermont/simple-omero-client</ext-link>
</p>
            </list-item>
            <list-item>
              <label>•</label>
              <p>Archived source code at time of publication:
<ext-link xlink:href="https://doi.org/10.5281/zenodo.6320867" ext-link-type="uri">https://doi.org/10.5281/zenodo.6320867</ext-link>
</p>
            </list-item>
            <list-item>
              <label>•</label>
              <p>License: GPLv2+</p>
            </list-item>
          </list>
        </list-item>
        <list-item>
          <label>•</label>
          <p>OMERO Macro Extensions:</p>
          <list list-type="simple">
            <list-item>
              <label>•</label>
              <p>Software and source code available from:
<ext-link xlink:href="https://github.com/GReD-Clermont/omero_macro-extensions" ext-link-type="uri">https://github.com/GReD-Clermont/omero_macro-extensions</ext-link>
</p>
            </list-item>
            <list-item>
              <label>•</label>
              <p>Archived source code at time of publication:
<ext-link xlink:href="https://doi.org/10.5281/zenodo.6320876" ext-link-type="uri">https://doi.org/10.5281/zenodo.6320876</ext-link>
</p>
            </list-item>
            <list-item>
              <label>•</label>
              <p>License: GPLv2+</p>
            </list-item>
          </list>
        </list-item>
        <list-item>
          <label>•</label>
          <p>OMERO Batch plugin:</p>
          <list list-type="simple">
            <list-item>
              <label>•</label>
              <p>Software and source code available from:
<ext-link xlink:href="https://github.com/GReD-Clermont/omero_batch-plugin" ext-link-type="uri">https://github.com/GReD-Clermont/omero_batch-plugin</ext-link>
</p>
            </list-item>
            <list-item>
              <label>•</label>
              <p>Archived source code at time of publication:
<ext-link xlink:href="https://doi.org/10.5281/zenodo.6367840" ext-link-type="uri">https://doi.org/10.5281/zenodo.6367840</ext-link>
</p>
            </list-item>
            <list-item>
              <label>•</label>
              <p>License: GPLv2+</p>
            </list-item>
          </list>
        </list-item>
        <list-item>
          <label>•</label>
          <p>OMERO toolbox examples:</p>
          <list list-type="simple">
            <list-item>
              <label>•</label>
              <p>Software and source code available from:
<ext-link xlink:href="https://github.com/GReD-Clermont/omero-toolbox-examples/tree/1.0.1" ext-link-type="uri">https://github.com/GReD-Clermont/omero-toolbox-examples/tree/1.0.1</ext-link>
</p>
            </list-item>
            <list-item>
              <label>•</label>
              <p>Archived source code at time of publication:
<ext-link xlink:href="https://doi.org/10.5281/zenodo.6367851" ext-link-type="uri">https://doi.org/10.5281/zenodo.6367851</ext-link>
</p>
            </list-item>
            <list-item>
              <label>•</label>
              <p>License: MIT</p>
            </list-item>
          </list>
        </list-item>
      </list>
    </p>
  </sec>
</body>
<back>
  <ack>
    <title>Acknowledgements</title>
    <p>We thank Carole Rovere for providing the initial use case of this project in the context of a co-mentored internship. We thank Christophe Blanchet from Institut Français de Bioinformatique for the Université Côte d’Azur and EMBRC-France OMERO Database administration. We are grateful to the Mésocentre Clermont Auvergne University and AuBi platform for providing computing and storage resources. We also thank Sophie Abélanet for her expertise with OMERO.Figure, helpful for this manuscript.</p>
  </ack>
  <ref-list>
    <title>References</title>
    <ref id="ref1">
      <label>1</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bankhead</surname><given-names>P</given-names></name><name><surname>Loughrey</surname><given-names>MB</given-names></name><name><surname>Fernández</surname><given-names>JA</given-names></name><etal/></person-group>:
<article-title>QuPath: Open source software for digital pathology image analysis.</article-title><source><italic toggle="yes">Sci. Rep.</italic></source><year>2017</year>;<volume>7</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>7</lpage>.<pub-id pub-id-type="pmid">28127051</pub-id></mixed-citation>
    </ref>
    <ref id="ref2">
      <label>2</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="editor"><name><surname>McQuin</surname><given-names>C</given-names></name><name><surname>Goodman</surname><given-names>A</given-names></name><name><surname>Chernyshev</surname><given-names>V</given-names></name><etal/></person-group>:
<article-title>CellProfiler 3.0: Next-generation image processing for biology.</article-title><source><italic toggle="yes">PLoS Biol.</italic></source><year>2018</year>;<volume>16</volume>(<issue>7</issue>):<fpage>e2005970</fpage>.
<pub-id pub-id-type="doi">10.1371/journal.pbio.2005970</pub-id><?supplied-pmid 29969450?><pub-id pub-id-type="pmid">29969450</pub-id></mixed-citation>
    </ref>
    <ref id="ref3">
      <label>3</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>De Chaumont</surname><given-names>F</given-names></name><name><surname>Dallongeville</surname><given-names>S</given-names></name><name><surname>Chenouard</surname><given-names>N</given-names></name><etal/></person-group>:
<article-title>Icy: an open bioimage informatics platform for extended reproducible research.</article-title><source><italic toggle="yes">Nat. Methods.</italic></source><year>2012</year>;<volume>9</volume>(<issue>7</issue>):<fpage>690</fpage>–<lpage>696</lpage>.
<pub-id pub-id-type="doi">10.1038/nmeth.2075</pub-id><?supplied-pmid 22743774?><pub-id pub-id-type="pmid">22743774</pub-id></mixed-citation>
    </ref>
    <ref id="ref4">
      <label>4</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dietz</surname><given-names>C</given-names></name><name><surname>Berthold</surname><given-names>MR</given-names></name></person-group>:
<article-title>Knime for Open-Source bioimage analysis: a tutorial.</article-title><source><italic toggle="yes">Focus on Bio-Image Informatics.</italic></source><year>2016</year>:<fpage>179</fpage>–<lpage>197</lpage>.
<pub-id pub-id-type="doi">10.1007/978-3-319-28549-8_7</pub-id><?supplied-pmid 27207367?><pub-id pub-id-type="pmid">27207367</pub-id></mixed-citation>
    </ref>
    <ref id="ref5">
      <label>5</label>
      <mixed-citation publication-type="other"><collab>Napari Contributors</collab>:
<article-title>napari: a multi-dimensional image viewer for python. Zenodo 10.5281/zenodo.</article-title><year>2019</year>;<fpage>3555620</fpage>.</mixed-citation>
    </ref>
    <ref id="ref6">
      <label>6</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ouyang</surname><given-names>W</given-names></name><name><surname>Mueller</surname><given-names>F</given-names></name><name><surname>Hjelmare</surname><given-names>M</given-names></name><etal/></person-group>:
<article-title>Imjoy: an open-source computational platform for the deep learning era.</article-title><source><italic toggle="yes">Nat. Methods.</italic></source><year>2019</year>;<volume>16</volume>(<issue>12</issue>):<fpage>1199</fpage>–<lpage>1200</lpage>.
<pub-id pub-id-type="doi">10.1038/s41592-019-0627-0</pub-id><?supplied-pmid 31780825?><pub-id pub-id-type="pmid">31780825</pub-id></mixed-citation>
    </ref>
    <ref id="ref7">
      <label>7</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rubens</surname><given-names>U</given-names></name><name><surname>Mormont</surname><given-names>R</given-names></name><name><surname>Paavolainen</surname><given-names>L</given-names></name><etal/></person-group>:
<article-title>Biaflows: A collaborative framework to reproducibly deploy and benchmark bioimage analysis workflows.</article-title><source><italic toggle="yes">Patterns.</italic></source><year>2020</year>;<volume>1</volume>(<issue>3</issue>):<fpage>100040</fpage>.
<pub-id pub-id-type="doi">10.1016/j.patter.2020.100040</pub-id><?supplied-pmid 33205108?><pub-id pub-id-type="pmid">33205108</pub-id></mixed-citation>
    </ref>
    <ref id="ref8">
      <label>8</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Solorzano</surname><given-names>L</given-names></name><name><surname>Partel</surname><given-names>G</given-names></name><name><surname>Wählby</surname><given-names>C</given-names></name></person-group>:
<article-title>Tissuumaps: Interactive visualization of large-scale spatial gene expression and tissue morphology data.</article-title><source><italic toggle="yes">Bioinformatics.</italic></source><year>2020</year>;<volume>36</volume>(<issue>15</issue>):<fpage>4363</fpage>–<lpage>4365</lpage>.
<pub-id pub-id-type="doi">10.1093/bioinformatics/btaa541</pub-id><?supplied-pmid 32449759?><pub-id pub-id-type="pmid">32449759</pub-id></mixed-citation>
    </ref>
    <ref id="ref9">
      <label>9</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kvilekval</surname><given-names>K</given-names></name><name><surname>Fedorov</surname><given-names>D</given-names></name><name><surname>Obara</surname><given-names>B</given-names></name><etal/></person-group>:
<article-title>Bisque: a platform for bioimage analysis and management.</article-title><source><italic toggle="yes">Bioinformatics.</italic></source><year>2010</year>;<volume>26</volume>(<issue>4</issue>):<fpage>544</fpage>–<lpage>552</lpage>.
<pub-id pub-id-type="doi">10.1093/bioinformatics/btp699</pub-id><?supplied-pmid 20031971?><pub-id pub-id-type="pmid">20031971</pub-id></mixed-citation>
    </ref>
    <ref id="ref10">
      <label>10</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rubens</surname><given-names>U</given-names></name><name><surname>Hoyoux</surname><given-names>R</given-names></name><name><surname>Vanosmael</surname><given-names>L</given-names></name><etal/></person-group>:
<article-title>Cytomine: toward an open and collaborative software platform for digital pathology bridged to molecular investigations.</article-title><source><italic toggle="yes">Proteomics Clin. Appl.</italic></source><year>2019</year>;<volume>13</volume>(<issue>1</issue>):<fpage>1800057</fpage>.
<pub-id pub-id-type="doi">10.1002/prca.201800057</pub-id><?supplied-pmid 30520559?><pub-id pub-id-type="pmid">30520559</pub-id></mixed-citation>
    </ref>
    <ref id="ref11">
      <label>11</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Allan</surname><given-names>C</given-names></name><name><surname>Burel</surname><given-names>J-M</given-names></name><name><surname>Moore</surname><given-names>J</given-names></name><etal/></person-group>:
<article-title>William J Moore, Carlos Neves, Andrew Patterson, et al. Omero: flexible, model-driven data management for experimental biology.</article-title><source><italic toggle="yes">Nat. Methods.</italic></source><year>2012</year>;<volume>9</volume>(<issue>3</issue>):<fpage>245</fpage>–<lpage>253</lpage>.
<pub-id pub-id-type="doi">10.1038/nmeth.1896</pub-id><?supplied-pmid 22373911?><pub-id pub-id-type="pmid">22373911</pub-id></mixed-citation>
    </ref>
    <ref id="ref12">
      <label>12</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schneider</surname><given-names>CA</given-names></name><name><surname>Rasband</surname><given-names>WS</given-names></name><name><surname>Eliceiri</surname><given-names>KW</given-names></name></person-group>:
<article-title>Nih image to imagej: 25 years of image analysis.</article-title><source><italic toggle="yes">Nat. Methods.</italic></source><year>2012</year>;<volume>9</volume>(<issue>7</issue>):<fpage>671</fpage>–<lpage>675</lpage>.
<pub-id pub-id-type="doi">10.1038/nmeth.2089</pub-id><?supplied-pmid 22930834?><pub-id pub-id-type="pmid">22930834</pub-id></mixed-citation>
    </ref>
    <ref id="ref13">
      <label>13</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schindelin</surname><given-names>J</given-names></name><name><surname>Arganda-Carreras</surname><given-names>I</given-names></name><name><surname>Frise</surname><given-names>E</given-names></name><etal/></person-group>:
<article-title>Fiji: an open-source platform for biological-image analysis.</article-title><source><italic toggle="yes">Nat. Methods.</italic></source><year>2012</year>;<volume>9</volume>(<issue>7</issue>):<fpage>676</fpage>–<lpage>682</lpage>.
<pub-id pub-id-type="doi">10.1038/nmeth.2019</pub-id><?supplied-pmid 22743772?><pub-id pub-id-type="pmid">22743772</pub-id></mixed-citation>
    </ref>
    <ref id="ref14">
      <label>14</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schroeder</surname><given-names>AB</given-names></name><name><surname>Dobson</surname><given-names>ETA</given-names></name><name><surname>Rueden</surname><given-names>CT</given-names></name><etal/></person-group>:
<article-title>The imagej ecosystem: Open-source software for image visualization, processing, and analysis.</article-title><source><italic toggle="yes">Protein Sci.</italic></source><year>2021</year>;<volume>30</volume>(<issue>1</issue>):<fpage>234</fpage>–<lpage>249</lpage>.
<pub-id pub-id-type="doi">10.1002/pro.3993</pub-id><?supplied-pmid 33166005?><pub-id pub-id-type="pmid">33166005</pub-id></mixed-citation>
    </ref>
    <ref id="ref15">
      <label>15</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stritt</surname><given-names>M</given-names></name><name><surname>Stalder</surname><given-names>AK</given-names></name><name><surname>Vezzali</surname><given-names>E</given-names></name></person-group>:
<article-title>Orbit image analysis: an open-source whole slide image analysis tool.</article-title><source><italic toggle="yes">PLoS Comput. Biol.</italic></source><year>2020</year>;<volume>16</volume>(<issue>2</issue>):<fpage>e1007313</fpage>.
<pub-id pub-id-type="doi">10.1371/journal.pcbi.1007313</pub-id><?supplied-pmid 32023239?><pub-id pub-id-type="pmid">32023239</pub-id></mixed-citation>
    </ref>
    <ref id="ref16">
      <label>16</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Berg</surname><given-names>S</given-names></name><name><surname>Kutra</surname><given-names>D</given-names></name><name><surname>Kroeger</surname><given-names>T</given-names></name><etal/></person-group>:
<article-title>Ilastik: interactive machine learning for (bio) image analysis.</article-title><source><italic toggle="yes">Nat. Methods.</italic></source><year>2019</year>;<volume>16</volume>(<issue>12</issue>):<fpage>1226</fpage>–<lpage>1232</lpage>.
<pub-id pub-id-type="doi">10.1038/s41592-019-0582-9</pub-id><?supplied-pmid 31570887?><pub-id pub-id-type="pmid">31570887</pub-id></mixed-citation>
    </ref>
    <ref id="ref17">
      <label>17</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Miller</surname><given-names>FP</given-names></name><name><surname>Vandome</surname><given-names>AF</given-names></name><name><surname>McBrewster</surname><given-names>J</given-names></name></person-group>:
<source><italic toggle="yes">Apache Maven.</italic></source><publisher-name>Alpha Press</publisher-name>;<year>2010</year>.</mixed-citation>
    </ref>
    <ref id="ref18">
      <label>18</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bolte</surname><given-names>S</given-names></name><name><surname>Cordelières</surname><given-names>FP</given-names></name></person-group>:
<article-title>A guided tour into subcellular colocalization analysis in light microscopy.</article-title><source><italic toggle="yes">J. Microsc.</italic></source><year>2006</year>;<volume>224</volume>(<issue>3</issue>):<fpage>213</fpage>–<lpage>232</lpage>.
<pub-id pub-id-type="doi">10.1111/j.1365-2818.2006.01706.x</pub-id><?supplied-pmid 17210054?><pub-id pub-id-type="pmid">17210054</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
<sub-article article-type="peer-review" id="report130101">
  <front-stub>
    <article-id pub-id-type="doi">10.5256/f1000research.121985.r130101</article-id>
    <title-group>
      <article-title>Reviewer response for version 1</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Strambio-De-Castillia</surname>
          <given-names>Caterina</given-names>
        </name>
        <xref rid="r130101a1" ref-type="aff">1</xref>
        <role>Referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-1069-1816</contrib-id>
      </contrib>
      <aff id="r130101a1"><label>1</label>Program in Molecular Medicine, University of Massachusetts Medical School, Worcester, MA, USA</aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="COI-statement">
        <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>6</day>
      <month>6</month>
      <year>2022</year>
    </pub-date>
    <permissions>
      <copyright-statement>Copyright: © 2022 Strambio-De-Castillia C</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access peer review report distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <related-article related-article-type="peer-reviewed-article" ext-link-type="doi" id="relatedArticleReport130101" xlink:href="10.12688/f1000research.110385.1">Version 1</related-article>
    <custom-meta-group>
      <custom-meta>
        <meta-name>recommendation</meta-name>
        <meta-value>approve</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>
      <bold>GENERAL NOTES</bold>
    </p>
    <p> --------------------------</p>
    <p> The authors describe three software tools they have developed to facilitate the batch analysis of images that are stored and managed using the popular OMERO data management platform.</p>
    <p> The explicit goal described by the authors "to ease the access to image analysis for all users who are managing their projects and images in OMERO." is definitely worthwhile and the work is timely especially because similar work to connect ImageJ with OMERO (
<ext-link xlink:href="https://github.com/imagej/imagej-omero" ext-link-type="uri">https://github.com/imagej/imagej-omero</ext-link>) has not been maintained and cannot be used with recent versions of OMERO.</p>
    <p>
      <bold>SPECIFIC COMMENTS</bold>
    </p>
    <p> --------------------------------</p>
    <p><underline>LANDSCAPE ANALYSIS</underline>:</p>
    <p> Given the potential impact and general interest of the topic and the existence of similar ongoing efforts in the community, in order to avoid confusion it is important that the authors compare their work with other tools and address the following questions:
<list list-type="order"><list-item><p>Were previous efforts utilized as a starting point?</p></list-item><list-item><p>If not why not?</p></list-item><list-item><p>How are their tools better than those produced by other efforts?</p></list-item></list>
<underline>CLARITY:</underline>
</p>
    <p> We suggest that the authors might consider revising the text to increase clarity and the potential impact of their work on non-IT users.</p>
    <p> Specifically, the authors should consider that terms that are routinely used by software engineers such as "application", "tool", "plugin" "API" and "library" are often very confusing to biomedical researchers who are often non-computer experts.</p>
    <p> For example, the text in the Abstract and Introduction is a bit confusing regarding the number of tools that were developed. Below I list the primary sources of confusion in the text:
<list list-type="order"><list-item><p>Line 8 of the Abstract states "we have built three tools".</p></list-item><list-item><p>The description in the Abstract describes three tools, called: Simple OMERO Client (a library); OMERO Macro extensions (a plugin); and Batch OMERO plugin (a plugin).</p></list-item><list-item><p>The last line of the Abstract states "Both tools are illustrated..."</p></list-item><list-item><p>The last paragraph of the Introduction describes two methods to interact with OMERO.</p></list-item><list-item><p>The Methods section states "Three tools were built..."</p></list-item></list> While I understand that some of the confusion arises from the fact that one of the tools is a library and the others are plugins, the authors might want to consider revising the text to ensure that biomedical researchers who are not fluent in "computerese" can understand the importance of their work.</p>
    <p>Are the conclusions about the tool and its performance adequately supported by the findings presented in the article?</p>
    <p>Partly</p>
    <p>Is the rationale for developing the new software tool clearly explained?</p>
    <p>Partly</p>
    <p>Is the description of the software tool technically sound?</p>
    <p>Yes</p>
    <p>Are sufficient details of the code, methods and analysis (if applicable) provided to allow replication of the software development and its use by others?</p>
    <p>Yes</p>
    <p>Is sufficient information provided to allow interpretation of the expected output datasets and any results generated using the tool?</p>
    <p>Yes</p>
    <p>Reviewer Expertise:</p>
    <p>Cell Biology, Microscopy, Metadata Modelling, Data Management, Imaging Science</p>
    <p>I confirm that I have read this submission and believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
  </body>
  <sub-article article-type="response" id="comment8624-130101">
    <front-stub>
      <contrib-group>
        <contrib contrib-type="author">
          <name>
            <surname>BRAU</surname>
            <given-names>Frédéric</given-names>
          </name>
          <aff>CNRS, France</aff>
        </contrib>
      </contrib-group>
      <author-notes>
        <fn fn-type="COI-statement">
          <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
        </fn>
      </author-notes>
      <pub-date pub-type="epub">
        <day>8</day>
        <month>8</month>
        <year>2022</year>
      </pub-date>
    </front-stub>
    <body>
      <p><underline>LANDSCAPE ANALYSIS</underline>:</p>
      <p>
        <bold>
          <italic toggle="yes">Given the potential impact and general interest of the topic and the existence of similar ongoing efforts in the community, in order to avoid confusion it is important that the authors compare their work with other tools and address the following questions:</italic>
        </bold>
      </p>
      <p>
        <bold>
          <italic toggle="yes">Were previous efforts utilized as a starting point?</italic>
        </bold>
      </p>
      <p> This work mixes two different axes of development: from the language part, a dedicated library developed to ease Java interaction with OMERO commands on a specific image analysis problem (NucleusJ); and from the GUI part of the batch OMERO plugin and modified groovy script from OMERO guide integrating GUI interfaces. The former library was then used to ease the Java plugins development, including the migration from groovy to Java for the batch OMERO plugin.</p>
      <p>
        <bold>
          <italic toggle="yes">If not why not?</italic>
        </bold>
      </p>
      <p>
        <bold>
          <italic toggle="yes">How are their tools better than those produced by other efforts?</italic>
        </bold>
      </p>
      <p> This tool addresses the problem from the ImageJ/Fiji point of view, to link OMERO which is more detailed in the introduction. Previous links between this database and third-party software and languages exists, as also mentioned in the manuscript. The closest approaches are dedicated groovy scripts available in OMERO guide or using the ImageJ-OMERO plugin.</p>
      <p>
        <underline>CLARITY:</underline>
      </p>
      <p>
        <bold>We suggest that the authors might consider revising the text to increase clarity and the potential impact of their work on non-IT users. Specifically, the authors should consider that terms that are routinely used by software engineers such as "application", "tool", "plugin" "API" and "library" are often very confusing to biomedical researchers who are often non-computer experts.</bold>
      </p>
      <p>
        <bold>
          <italic toggle="yes">For example, the text in the Abstract and Introduction is a bit confusing regarding the number of tools that were developed. Below I list the primary sources of confusion in the text:</italic>
        </bold>
      </p>
      <p>
        <bold>
          <italic toggle="yes">Line 8 of the Abstract states "we have built three tools".</italic>
        </bold>
      </p>
      <p>
        <bold>
          <italic toggle="yes">The description in the Abstract describes three tools, called: Simple OMERO Client (a library); OMERO Macro extensions (a plugin); and Batch OMERO plugin (a plugin).</italic>
        </bold>
      </p>
      <p>
        <bold>
          <italic toggle="yes">The last line of the Abstract states "Both tools are illustrated..."</italic>
        </bold>
      </p>
      <p>
        <bold>
          <italic toggle="yes">The last paragraph of the Introduction describes two methods to interact with OMERO.</italic>
        </bold>
      </p>
      <p>
        <bold>
          <italic toggle="yes">The Methods section states "Three tools were built..."</italic>
        </bold>
      </p>
      <p>
        <bold>While I understand that some of the confusion arises from the fact that one of the tools is a library and the others are plugins, the authors might want to consider revising the text to ensure that biomedical researchers who are not fluent in "computerese" can understand the importance of their work.</bold>
      </p>
      <p> We tempted to clarify the terminology through the updated version submitted, and these points to be more accurate with the denominations between the tools mentioning that there is a library, a new set of Macro Functions through the OMERO Macro extensions plugin and a Batch OMERO plugin. These last two are mentioned as plugins as they are modules added to ImageJ/Fiji to get their functionalities, and they were developed using the library
<italic toggle="yes">.</italic>
</p>
    </body>
  </sub-article>
</sub-article>
<sub-article article-type="peer-review" id="report129917">
  <front-stub>
    <article-id pub-id-type="doi">10.5256/f1000research.121985.r129917</article-id>
    <title-group>
      <article-title>Reviewer response for version 1</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Swedlow</surname>
          <given-names>Jason R.</given-names>
        </name>
        <xref rid="r129917a1" ref-type="aff">1</xref>
        <role>Referee</role>
        <contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-2198-1958</contrib-id>
      </contrib>
      <aff id="r129917a1"><label>1</label>Division of Computational Biology, Centre for Gene Regulation and Expression, School of Life Sciences, University of Dundee, Dundee, UK</aff>
    </contrib-group>
    <author-notes>
      <fn fn-type="COI-statement">
        <p><bold>Competing interests: </bold>The reviewers are part of the OME Consortium which builds and releases OMERO. JRS founded and runs Glencoe Software which commercialises OME's tools, including OMERO.</p>
      </fn>
    </author-notes>
    <pub-date pub-type="epub">
      <day>17</day>
      <month>5</month>
      <year>2022</year>
    </pub-date>
    <permissions>
      <copyright-statement>Copyright: © 2022 Swedlow JR</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an open access peer review report distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <related-article related-article-type="peer-reviewed-article" ext-link-type="doi" id="relatedArticleReport129917" xlink:href="10.12688/f1000research.110385.1">Version 1</related-article>
    <custom-meta-group>
      <custom-meta>
        <meta-name>recommendation</meta-name>
        <meta-value>approve</meta-value>
      </custom-meta>
    </custom-meta-group>
  </front-stub>
  <body>
    <p>The authors introduce a set of tools to simplify access to an OMERO server from the ImageJ ecosystem (Java). Similar efforts are on-going in other programming languages e.g.
<ext-link xlink:href="https://github.com/TheJacksonLaboratory/ezomero" ext-link-type="uri">https://github.com/TheJacksonLaboratory/ezomero</ext-link> (Python). This could maybe be mentioned to highlight the fact that the work of the authors is part of a general community effort and should be well received by scientists.</p>
    <p> Other groups previously released work connecting OMERO and ImageJ, see
<ext-link xlink:href="https://github.com/imagej/imagej-omero" ext-link-type="uri">https://github.com/imagej/imagej-omero</ext-link>. This work has not been updated in recent years to be compatible with newer versions of the OMERO.server. Have the authors considered such work based on ImageJ2 as a starting point? If not, it will be interesting to highlight why since scientists and other software e.g. KNIME used it in some versions of their applications.</p>
    <p> From a technical point of view:</p>
    <p> The examples provided have been tested and the various GitHub repositories checked.
<list list-type="bullet"><list-item><p>Simple OMERO client. The jar associated with the tag e.g.
<ext-link xlink:href="https://github.com/GReD-Clermont/simple-omero-client/releases/tag/5.9.0" ext-link-type="uri">https://github.com/GReD-Clermont/simple-omero-client/releases/tag/5.9.0</ext-link> will not allow the user to run the examples. There is no indication in the README of the dependencies required. They are mentioned in the paper but it is not indicated where they can be found. The name of the omero dependencies is omero-gateway-java and not omero-gateway. Installing the uber jar simple-omero-client-with-dependencies.jar, built from source, will allow us to run the examples exposed in the README. Authors should consider uploading the uber jar to the GitHub tag and should review the installation instructions in the paper and README.</p></list-item><list-item><p>The Authors indicate that the simple-omero-client is built and compatible with Java 8. The GitHub action only uses Java 11. Java 8 should be added to the matrix of the GitHub action to ensure compatibility.</p></list-item><list-item><p><ext-link xlink:href="https://github.com/GReD-Clermont/omero_macro-extensions" ext-link-type="uri">https://github.com/GReD-Clermont/omero_macro-extensions</ext-link> and
<ext-link xlink:href="https://github.com/GReD-Clermont/omero_batch-plugin" ext-link-type="uri">https://github.com/GReD-Clermont/omero_batch-plugin</ext-link>, the authors should consider depending on simple-omero-client-with-dependencies.jar and not the OMERO.insight plugin. The instructions written in the paper and the ones in the README in the GitHub repository do not match. The instructions in the paper will not work since the omero-* libraries used to connect to the OMERO.server are not mentioned. The OMERO.insight plugin jar listed in the README will install several dependencies not required by the plugins or macro-extensions e.g. UI dependencies. This should be considered for multiple reasons: size required, conflict of dependencies etc. The authors should consider mentioning simple-omero-client-with-dependencies.jar or (simple-omero-client.jar +omero-* dependencies). It will also allow the authors to control the exact version of the omero libraries  e.g. the version of omero-gateway-java they want their application to depend on.</p></list-item><list-item><p>Have the authors considered an ImageJ update site?</p></list-item><list-item><p>Minor point:</p><p>  
<list list-type="bullet"><list-item><p>The term Facade should be used in this context and not Façade</p></list-item><list-item><p>The authors should indicate that the macro extensions examples are a conversion of some of the groovy scripts, used for training scientists, in
<ext-link xlink:href="https://github.com/ome/omero-guide-fiji/tree/master/scripts/groovy" ext-link-type="uri">https://github.com/ome/omero-guide-fiji/tree/master/scripts/groovy</ext-link>. Some examples in the omero-guide-fiji repository have been requested by the scientists themselves.</p></list-item><list-item><p>Code example: imageplusID = Ext.getImage (imageId);. Remove space between getImage and (</p></list-item><list-item><p>The term fluidize in the conclusion could be replaced with facilitate</p></list-item></list>
</p></list-item></list>
</p>
    <p> Suggestion for follow-up work. If the package
<ext-link xlink:href="https://github.com/GReD-Clermont/simple-omero-client" ext-link-type="uri">https://github.com/GReD-Clermont/simple-omero-client</ext-link>  is going to supersede
<ext-link xlink:href="https://github.com/imagej/imagej-omero" ext-link-type="uri">https://github.com/imagej/imagej-omero</ext-link>, the authors should consider implementing methods from
<ext-link xlink:href="https://github.com/imagej/imagej-omero" ext-link-type="uri">https://github.com/imagej/imagej-omero</ext-link> to the new proposed package.</p>
    <p> Jean-Marie Burel</p>
    <p> Jason Swedlow</p>
    <p>Are the conclusions about the tool and its performance adequately supported by the findings presented in the article?</p>
    <p>Partly</p>
    <p>Is the rationale for developing the new software tool clearly explained?</p>
    <p>Yes</p>
    <p>Is the description of the software tool technically sound?</p>
    <p>Partly</p>
    <p>Are sufficient details of the code, methods and analysis (if applicable) provided to allow replication of the software development and its use by others?</p>
    <p>Yes</p>
    <p>Is sufficient information provided to allow interpretation of the expected output datasets and any results generated using the tool?</p>
    <p>Yes</p>
    <p>Reviewer Expertise:</p>
    <p>microscopy, cell biology, mitosis, image informatics, public data resources</p>
    <p>I confirm that I have read this submission and believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p>
  </body>
  <sub-article article-type="response" id="comment8623-129917">
    <front-stub>
      <contrib-group>
        <contrib contrib-type="author">
          <name>
            <surname>BRAU</surname>
            <given-names>Frédéric</given-names>
          </name>
          <aff>CNRS, France</aff>
        </contrib>
      </contrib-group>
      <author-notes>
        <fn fn-type="COI-statement">
          <p><bold>Competing interests: </bold>No competing interests were disclosed.</p>
        </fn>
      </author-notes>
      <pub-date pub-type="epub">
        <day>8</day>
        <month>8</month>
        <year>2022</year>
      </pub-date>
    </front-stub>
    <body>
      <p>
        <bold>
          <italic toggle="yes">The authors introduce a set of tools to simplify access to an OMERO server from the ImageJ ecosystem (Java). Similar efforts are on-going in other programming languages e.g. https://github.com/TheJacksonLaboratory/ezomero (Python). This could maybe be mentioned to highlight the fact that the work of the authors is part of a general community effort and should be well received by scientists.</italic>
        </bold>
      </p>
      <p> We haven taken into account these remarks and mentioned the ezomero and ImageJ-OMERO works done before, with a similar goal, in the Introduction.</p>
      <p>
        <bold>
          <italic toggle="yes">Other groups previously released work connecting OMERO and ImageJ, see https://github.com/imagej/imagej-omero. This work has not been updated in recent years to be compatible with newer versions of the OMERO.server. Have the authors considered such work based on ImageJ2 as a starting point? If not, it will be interesting to highlight why since scientists and other software e.g. KNIME used it in some versions of their applications.</italic>
        </bold>
      </p>
      <p> The library project started as a small project to wrap API calls when accessing and organizing data on OMERO from a Java program. However, as this software depended on ImageJ 1.x to open images, it soon became apparent that it would be easier to directly convert that data from OMERO to ImageJ than to create and populate basic Java objects from the server and then convert them to ImageJ. This was not the initial goal though, which is why the ImageJ-OMERO project was not considered during the project genesis. Moreover, the project focus was on making small and simple re-usable objects/methods for an IJ1 plugin: the ImageJ2 library looked impressive and using it as a starting point seemed too time-consuming considering the human resources at our disposal. In hindsight, it might have been a better choice for the community though. Merging both may still be an option, however.</p>
      <p>
        <bold>
          <italic toggle="yes">Simple OMERO client. The jar associated with the tag e.g. https://github.com/GReD-Clermont/simple-omero-client/releases/tag/5.9.0 will not allow the user to run the examples. There is no indication in the README of the dependencies required. They are mentioned in the paper but it is not indicated where they can be found. The name of the omero dependencies is omero-gateway-java and not omero-gateway. Installing the uber jar simple-omero-client-with-dependencies.jar, built from source, will allow us to run the examples exposed in the README. Authors should consider uploading the uber jar to the GitHub tag and should review the installation instructions in the paper and README.</italic>
        </bold>
      </p>
      <p> Indeed, the library has only been thought as a Maven dependency, which would be available to users if they installed the other plugins following the provided steps, so instructions to install only the library to ImageJ specifically are currently missing. The uber-jar exists because when the project started, before ezomero, the library was also used to interact with OMERO from Python using JPype, as well as other Java programs outside of ImageJ. However, using it in ImageJ may cause conflicts if the official OMERO.insight plugin is installed, unless dependencies are “shaded” and “relocated”, which is why it was not readily available. The aim will be to rely on the ImageJ-OMERO-5.5 update site in Fiji to provide the dependencies and, alternatively, the uber-jar for ImageJ1. Instructions will be updated when this solution will be operational.</p>
      <p>
        <bold>
          <italic toggle="yes">The Authors indicate that the simple-omero-client is built and compatible with Java 8. The GitHub action only uses Java 11. Java 8 should be added to the matrix of the GitHub action to ensure compatibility.</italic>
        </bold>
      </p>
      <p> The paper states the language level in which the library is written is 8, it is true though that the inference would be that it is therefore built and compatible with Java 8, when it only uses Maven properties to convey this information to the Java 11 compiler (source = 8, target = 8), which could fail in theory. However, as the build is done through omero-test-infra, it is the Dockerfile that defines which JDK is used for the build. It will be changed to 8 in 5.9.2. The GitHub action JDK will remain 11 though, as it is required for SonarCloud and not used for compilation.</p>
      <p>
        <bold>
          <italic toggle="yes">https://github.com/GReD-Clermont/omero_macro-extensions and https://github.com/GReD-Clermont/omero_batch-plugin, the authors should consider depending on simple-omero-client-with-dependencies.jar and not the OMERO.insight plugin. The instructions written in the paper and the ones in the README in the GitHub repository do not match. The instructions in the paper will not work since the omero-* libraries used to connect to the OMERO.server are not mentioned. The OMERO.insight plugin jar listed in the README will install several dependencies not required by the plugins or macro-extensions e.g. UI dependencies. This should be considered for multiple reasons: size required, conflict of dependencies etc. The authors should consider mentioning simple-omero-client-with-dependencies.jar or (simple-omero-client.jar +omero-* dependencies). It will also allow the authors to control the exact version of the omero libraries e.g. the version of omero-gateway-java they want their application to depend on.</italic>
        </bold>
      </p>
      <p> Instructions in the paper should indeed reflect what is in the README. Moreover, what is in the README may need adjustments, depending on the possible use of the library uber-jar. As mentioned previously, the procedure in the README (OMERO.insight plugin + library jar + plugin jars) was chosen to prevent conflicts between OMERO.insight and the library when it comes to dependencies.</p>
      <p>
        <bold>
          <italic toggle="yes">Have the authors considered an ImageJ update site?</italic>
        </bold>
      </p>
      <p> An update site has been considered but OMERO dependencies need to be properly handled beforehand. If the plugins can rely on the ImageJ-OMERO update site (and offer to activate it), then an update site for these JARs will be set up.</p>
      <p> The Minor points have been considered and the corresponding corrections were applied in the new version of the manuscript.</p>
    </body>
  </sub-article>
</sub-article>
