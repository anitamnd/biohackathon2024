<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">10159651</article-id>
    <article-id pub-id-type="pmid">37074928</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btad214</article-id>
    <article-id pub-id-type="publisher-id">btad214</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Sequence Analysis</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>PyHMMER: a Python library binding to HMMER for efficient sequence analysis</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-3947-4444</contrib-id>
        <name>
          <surname>Larralde</surname>
          <given-names>Martin</given-names>
        </name>
        <xref rid="btad214-cor1" ref-type="corresp"/>
        <!--martin.larralde@embl.de-->
        <aff><institution>Structural and Computational Biology Unit, EMBL</institution>, <addr-line>Meyerhofstraße 1</addr-line>, Heidelberg 69117, <country country="DE">Germany</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-1429-7485</contrib-id>
        <name>
          <surname>Zeller</surname>
          <given-names>Georg</given-names>
        </name>
        <xref rid="btad214-cor1" ref-type="corresp"/>
        <!--zeller@embl.de-->
        <aff><institution>Structural and Computational Biology Unit, EMBL</institution>, <addr-line>Meyerhofstraße 1</addr-line>, Heidelberg 69117, <country country="DE">Germany</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Alkan</surname>
          <given-names>Can</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btad214-cor1">Corresponding author. Structural and Computational Biology Unit, EMBL, Meyerhofstraße 1, Heidelberg, Germany. E-mail: <email>martin.larralde@embl.de</email> (M.L.); Structural and Computational Biology Unit, EMBL, Meyerhofstraße 1, Heidelberg, Germany. E-mail: <email>zeller@embl.de</email> (G.Z.)</corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>5</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2023-04-19">
      <day>19</day>
      <month>4</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>19</day>
      <month>4</month>
      <year>2023</year>
    </pub-date>
    <volume>39</volume>
    <issue>5</issue>
    <elocation-id>btad214</elocation-id>
    <history>
      <date date-type="received">
        <day>19</day>
        <month>1</month>
        <year>2023</year>
      </date>
      <date date-type="rev-recd">
        <day>31</day>
        <month>3</month>
        <year>2023</year>
      </date>
      <date date-type="accepted">
        <day>12</day>
        <month>4</month>
        <year>2023</year>
      </date>
      <date date-type="corrected-typeset">
        <day>04</day>
        <month>5</month>
        <year>2023</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2023. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2023</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btad214.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>PyHMMER provides Python integration of the popular profile Hidden Markov Model software HMMER via Cython bindings. This allows the annotation of protein sequences with profile HMMs and building new ones directly with Python. PyHMMER increases flexibility of use, allowing creating queries directly from Python code, launching searches, and obtaining results without I/O, or accessing previously unavailable statistics like uncorrected <italic toggle="yes">P</italic>-values. A new parallelization model greatly improves performance when running multithreaded searches, while producing the exact same results as HMMER.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>PyHMMER supports all modern Python versions (Python 3.6+) and similar platforms as HMMER (x86 or PowerPC UNIX systems). Pre-compiled packages are released via PyPI (<ext-link xlink:href="https://pypi.org/project/pyhmmer/" ext-link-type="uri">https://pypi.org/project/pyhmmer/</ext-link>) and Bioconda (<ext-link xlink:href="https://anaconda.org/bioconda/pyhmmer" ext-link-type="uri">https://anaconda.org/bioconda/pyhmmer</ext-link>). The PyHMMER source code is available under the terms of the open-source MIT licence and hosted on GitHub (<ext-link xlink:href="https://github.com/althonos/pyhmmer" ext-link-type="uri">https://github.com/althonos/pyhmmer</ext-link>); its documentation is available on ReadTheDocs (<ext-link xlink:href="https://pyhmmer.readthedocs.io" ext-link-type="uri">https://pyhmmer.readthedocs.io</ext-link>).</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>German Research Foundation</institution>
            <institution-id institution-id-type="DOI">10.13039/501100001659</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Deutsche Forschungsgemeinschaft</institution>
            <institution-id institution-id-type="DOI">10.13039/501100001659</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="3"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Protein similarity search and annotation is a key part of biological sequence analysis, allowing for the discovery of protein function from sequence data. Improving on Position-Specific Scoring Matrices that were used historically to search for motifs, Profile Hidden Markov Models (pHMMs) were introduced in HMMER (<xref rid="btad214-B3" ref-type="bibr">Eddy 2011</xref>) to model protein sequence families. Since then, HMMER has become a de facto standard for protein domain annotation, with several protein domain databases such as Pfam (<xref rid="btad214-B12" ref-type="bibr">Mistry et al. 2021</xref>) or TIGRFAM (<xref rid="btad214-B4" ref-type="bibr">Haft et al. 2013</xref>) being distributed as pHMMs.</p>
    <p>HMMER provides different utilities with a command line interface (CLI), and only offers an application programming interface (API) for the C language (<xref rid="btad214-B7" ref-type="bibr">Kernighan and Ritchie 1978</xref>). This makes it rather cumbersome to use with modern languages such as Python, which are now more popular among scientists (<xref rid="btad214-B13" ref-type="bibr">Perkel 2015</xref>). Here we describe PyHMMER, a library providing Python bindings to the C API of HMMER using Cython (<xref rid="btad214-B2" ref-type="bibr">Behnel et al. 2011</xref>), allowing seamless integration of HMMER in larger Python programs, or in Jupyter notebooks (<xref rid="btad214-B8" ref-type="bibr">Kluyver et al. 2016</xref>). Such literate programming efforts help to address the reproducibility crisis, allowing for exact versioning and reproducible scripts for pHMM generation, among other recommended practices (<xref rid="btad214-B14" ref-type="bibr">Rule et al. 2019</xref>).</p>
  </sec>
  <sec>
    <title>2 Implementation</title>
    <p>The original HMMER codebase is organized into several components: a general purpose library for biological sequence manipulation named <monospace>easel</monospace>, a core library specific to HMMER named <monospace>libhmmer</monospace>, and dedicated CLI tools for building HMMs and performing sequence searches (<monospace>hmmbuild, hmmsearch, phmmer</monospace>, etc.).</p>
    <p>The Cython language, a superset of Python that can be compiled into C or C++ extension modules, allows defining foreign function interfaces to the library components of HMMER. Using this particular feature, we developed the <monospace>pyhmmer.easel</monospace> and <monospace>pyhmmer.plan7</monospace> extension modules to wrap the most relevant types from the <monospace>easel</monospace> and <monospace>libhmmer</monospace> libraries, respectively. In both submodules these types are exposed as Python classes, allowing the user to create and manipulate a <monospace>Sequence</monospace> or an <monospace>HMM</monospace> object directly (<xref rid="btad214-F2" ref-type="fig">Listing 1</xref>).</p>
    <p>Classes in PyHMMER implement the relevant methods from the Python data model: containers like <monospace>TopHits</monospace> or <monospace>Domains</monospace> support the usual Python syntax for iterating or indexing, while file readers support the context manager protocol to be used inside a with statement and the iteration protocol to read the file content with a simple for loop. Subclassing is supported to allow end-users to implement additional functionalities if needed. Numeric collections, such as <monospace>VectorF</monospace> which wraps a one-dimensional array of floating point numbers, all implement the buffer protocol. They can be used seamlessly with the entire NumPy ecosystem (<xref rid="btad214-B5" ref-type="bibr">Harris et al. 2020</xref>), using the <monospace>numpy.asarray</monospace> function to wrap them into an <monospace>ndarray</monospace> without copying the underlying data. Type hints are provided for all public classes and functions, allowing a static analyzer such as MyPy (<ext-link xlink:href="https://mypy-lang.org/" ext-link-type="uri">https://mypy-lang.org</ext-link>) to detect type errors ahead of runtime. These type annotations also make PyHMMER more pleasant to use inside an Integrated Development Environment (IDE), where the function signatures can be suggested and corrected automatically.</p>
    <p>For sensible types, the corresponding Python class also exposes internal attributes through Python properties that can be used for introspection. This includes some attributes that were not originally available in the HMMER results, such as the uncorrected p-value for each alignment (HMMER would only report the Bonferroni-corrected <italic toggle="yes">P</italic>-values in the output tables). HMM objects can be modified manually, for instance to set bitscore cutoffs using an externally computed threshold.</p>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>The functionality of several of the CLI tools from HMMER was rewritten as pure Python functions using the API from the <monospace>pyhmmer.easel</monospace> and <monospace>pyhmmer.plan7</monospace> modules.</p>
    <p>Computational efficiency of the new parallelization code was benchmarked against the original implementation for the hmmsearch task (<xref rid="btad214-F1" ref-type="fig">Fig. 1b–d</xref>). It shows much better performance for smaller target databases such as the proteome of a single microbial species, which can be entirely loaded into memory before querying. For extreme cases where none of the HMM or sequence databases fit into memory, a fallback using file readers is implemented to support larger searches at the cost of I/O overhead.</p>
    <fig position="float" id="btad214-F1">
      <label>Figure 1</label>
      <caption>
        <p>Comparison of the parallelization strategy for running <italic toggle="yes">hmmsearch</italic>. (a) A summary of the job dispatching between the HMMER and the PyHMMER implementations of <italic toggle="yes">hmmsearch</italic>. HMMER breaks the target database into chunks and synchronizes the queries; PyHMMER runs multiple queries in parallel threads while using the main thread for I/O. Blocking and non-blocking inter-thread communications are shown in plain and dashed lines, respectively. (b) Runtime comparison of <italic toggle="yes">hmmsearch</italic> annotation with six threads. Proteins were obtained from representative microbial genomes contained in the proGenomes2 database (<xref rid="btad214-B11" ref-type="bibr">Mende et al. 2020</xref>), and annotated with Pfam version 33.1 (<xref rid="btad214-B12" ref-type="bibr">Mistry et al. 2021</xref>) grouped by genome. Each command was run once on an Intel i7-10710U processor with six physical cores. (c) Average runtime and (d) speedup of <italic toggle="yes">hmmsearch</italic> implemented in PyHMMER compared to HMMER. Proteins of 10 different species were downloaded from proGenomes and annotated with Pfam version 35.0. Shown are the averages of three runs on an Intel Xeon E5-2683 processor with 16 physical cores. More benchmarks can be found at <ext-link xlink:href="https://pyhmmer.readthedocs.io/en/latest/benchmarks.html" ext-link-type="uri">https://pyhmmer.readthedocs.io/en/latest/benchmarks.html</ext-link>.</p>
      </caption>
      <graphic xlink:href="btad214f1" position="float"/>
    </fig>
    <fig position="float" id="btad214-F2">
      <label>Listing 1</label>
      <caption>
        <p>A Python code snippet demonstrating how to run <italic toggle="yes">hmmsearch</italic> with the PyHMMER API. The target sequences are pre-fetched from the <monospace>proteins.faa</monospace> file before running the search loop while the query HMMs are loaded iteratively from <monospace>Pfam-A.hmm</monospace>. More code examples can be found at <ext-link xlink:href="https://pyhmmer.readthedocs.io/en/latest/examples/" ext-link-type="uri">https://pyhmmer.readthedocs.io/en/latest/examples/</ext-link>.</p>
      </caption>
      <graphic xlink:href="btad214f2" position="float"/>
    </fig>
    <p>The parallel section in particular was reimplemented with plain Python threads and a different model for balancing load across worker threads (<xref rid="btad214-F1" ref-type="fig">Fig. 1a</xref>), the default number of which is chosen as the number of physical cores to avoid resource contention. The <monospace>hmmpgmdb</monospace> client was adapted to use Python sockets for network communication, although message encoding and decoding uses the HMMER code for consistency.</p>
    <p>The new threading strategy reduces latency caused by the filesystem as it introduces pre-fetching of query HMMs from the HMM file while the worker threads run the one-to-many comparison pipeline. Modeling the speedup with Amdahl’s law (<xref rid="btad214-B1" ref-type="bibr">Amdahl 1967</xref>) suggests that the original <italic toggle="yes">hmmsearch</italic> task is not taking full advantage of multi-core machines, with only around 35% of the code being truly parallel (<xref rid="btad214-F1" ref-type="fig">Fig. 1d</xref>). In comparison, PyHMMER has ∼96% of the code in parallel sections. In practice, using PyHMMER to annotate a large protein set on a six-core machine reduced the runtime by 72%, totaling only 27 h where HMMER took 97 h (<xref rid="btad214-F1" ref-type="fig">Fig. 1b</xref>). Similarly, <italic toggle="yes">hmmscan</italic> tasks benefit from the PyHMMER parallelization strategy, which makes it possible to annotate 1 million proteins with 32 threads within ∼2.5 h compared to an estimate of &gt;7 days the original HMMER implementation would take.</p>
    <p>At the time of writing, PyHMMER has already been integrated into several projects covering various areas of bioinformatics, including long-read transcriptome sequencing (<xref rid="btad214-B10" ref-type="bibr">Lienhard et al. 2021</xref>); average amino-acid identity estimation (<xref rid="btad214-B9" ref-type="bibr">Konstantinidis et al. 2022</xref>) or clustering of biosynthetic gene clusters (<xref rid="btad214-B6" ref-type="bibr">Kautsar et al. 2021</xref>).</p>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>The authors thank Sean R. Eddy and his team for the development of HMMER, which features outstanding documentation and quality standards; Rob Finn and Nicolo Lazzaro for their invitation to work on the jackhmmer and hmmpgmdb re-implementations; Antonio P. Camargo and Felix Langer for their suggestions during the early stage of development; Troy Sincomb for fixing errors in the documentation; Valentyn Bezshapkin and Zachary Kurtz for their contributions; and all individuals who reported issues on the GitHub tracker.</p>
  </ack>
  <sec sec-type="COI-statement">
    <title>Conflict of interest</title>
    <p>None declared.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by the European Molecular Biology Laboratory; the SFB 1371 of the German Research Foundation (Deutsche Forschungsgemeinschaft, DFG) [395357507] and the Federal Ministry of Education and Research (BMBF) [031L0181A].</p>
  </sec>
  <sec sec-type="data-availability">
    <title>Data availability</title>
    <p>The data underlying this article are available on GitHub at <ext-link xlink:href="https://github.com/althonos/pyhmmer" ext-link-type="uri">https://github.com/althonos/pyhmmer</ext-link>. The datasets for benchmarking were derived from sources free for academic and non-commercial use: proGenomes 3 (<ext-link xlink:href="https://progenomes.embl.de" ext-link-type="uri">https://progenomes.embl.de</ext-link>), Pfam 33.1 (<ext-link xlink:href="https://www.ebi.ac.uk/interpro/" ext-link-type="uri">https://www.ebi.ac.uk/interpro/</ext-link>).</p>
  </sec>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="btad214-B1">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Amdahl</surname><given-names>GM.</given-names></string-name></person-group> Validity of the single processor approach to achieving large scale computing capabilities. In: <italic toggle="yes">Proceedings of the April 18–20, 1967, Spring Joint Computer Conference, AFIPS ’67 (Spring).</italic> New York, NY: Association for Computing Machinery, <year>1967</year>, <fpage>483</fpage>–<lpage>5</lpage>.</mixed-citation>
    </ref>
    <ref id="btad214-B2">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Behnel</surname><given-names>S</given-names></string-name>, <string-name><surname>Bradshaw</surname><given-names>R</given-names></string-name>, <string-name><surname>Citro</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Cython: the best of both worlds</article-title>. <source>Comput Sci Eng</source><year>2011</year>;<volume>13</volume>:<fpage>31</fpage>–<lpage>9</lpage>. <pub-id pub-id-type="doi">10.1109/MCSE.2010.118</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad214-B3">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Eddy</surname><given-names>SR.</given-names></string-name></person-group><article-title>Accelerated profile HMM searches</article-title>. <source>PLoS Comput Biol</source><year>2011</year>;<volume>7</volume>:<fpage>e1002195</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1002195</pub-id>.<pub-id pub-id-type="pmid">22039361</pub-id></mixed-citation>
    </ref>
    <ref id="btad214-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Haft</surname><given-names>DH</given-names></string-name>, <string-name><surname>Selengut</surname><given-names>JD</given-names></string-name>, <string-name><surname>Richter</surname><given-names>RA</given-names></string-name></person-group><etal>et al</etal><article-title>TIGRFAMs and genome properties in 2013</article-title>. <source>Nucleic Acids Res</source><year>2013</year>;<volume>41</volume>:<fpage>D387</fpage>–<lpage>95</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gks1234</pub-id>.<pub-id pub-id-type="pmid">23197656</pub-id></mixed-citation>
    </ref>
    <ref id="btad214-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Harris</surname><given-names>CR</given-names></string-name>, <string-name><surname>Millman</surname><given-names>KJ</given-names></string-name>, <string-name><surname>van der Walt</surname><given-names>SJ</given-names></string-name></person-group><etal>et al</etal><article-title>Array programming with NumPy</article-title>. <source>Nature</source><year>2020</year>;<volume>585</volume>:<fpage>357</fpage>–<lpage>62</lpage>. <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>.<pub-id pub-id-type="pmid">32939066</pub-id></mixed-citation>
    </ref>
    <ref id="btad214-B6">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kautsar</surname><given-names>SA</given-names></string-name>, <string-name><surname>van der Hooft</surname><given-names>JJJ</given-names></string-name>, <string-name><surname>de Ridder</surname><given-names>D</given-names></string-name></person-group><etal>et al</etal><article-title>BiG-SLiCE: a highly scalable tool maps the diversity of 1.2 million biosynthetic gene clusters</article-title>. <source>GigaScience</source><year>2021</year>;<volume>10</volume>:<fpage>giaa154</fpage>. <pub-id pub-id-type="doi">10.1093/gigascience/giaa154</pub-id>.<pub-id pub-id-type="pmid">33438731</pub-id></mixed-citation>
    </ref>
    <ref id="btad214-B7">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Kernighan</surname><given-names>BW</given-names></string-name>, <string-name><surname>Ritchie</surname><given-names>DM.</given-names></string-name></person-group><source>The C Programming Language</source>. <publisher-loc>Englewood Cliffs, NJ</publisher-loc>: <publisher-name>Prentice-Hall</publisher-name>, <year>1978</year>.</mixed-citation>
    </ref>
    <ref id="btad214-B8">
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Kluyver</surname><given-names>T</given-names></string-name>, <string-name><surname>Ragan-Kelley</surname><given-names>B</given-names></string-name>, <string-name><surname>Perez</surname><given-names>F</given-names></string-name></person-group><etal>et al</etal> Jupyter Notebooks—A Publishing Format for Reproducible Computational Workflows. In: <person-group person-group-type="editor"><string-name><surname>Loizides</surname><given-names>F</given-names></string-name>, <string-name><surname>Schmidt</surname><given-names>B</given-names></string-name></person-group> (eds.), <italic toggle="yes">Positioning and Power in Academic Publishing: Players, Agents and Agendas</italic>. <publisher-loc>Amsterdam, The Netherlands</publisher-loc>: <publisher-name>IOS Press</publisher-name>, <year>2016</year>, <fpage>87</fpage>–<lpage>90</lpage>.</mixed-citation>
    </ref>
    <ref id="btad214-B9">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Konstantinidis</surname><given-names>K</given-names></string-name>, <string-name><surname>Ruiz-Perez</surname><given-names>C</given-names></string-name>, <string-name><surname>Gerhardt</surname><given-names>K</given-names></string-name></person-group><etal>et al</etal> FastAAI: efficient estimation of genome average amino acid identity and phylum-level relationships using tetramers of universal protein<italic toggle="yes">.</italic> Research Square 2022. <pub-id pub-id-type="doi">10.21203/rs.3.rs-1459378/v1</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad214-B10">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Lienhard</surname><given-names>M</given-names></string-name>, <string-name><surname>Van den Beucken</surname><given-names>T</given-names></string-name>, <string-name><surname>Claiment</surname><given-names>F</given-names></string-name></person-group><etal>et al</etal> Long-read transcriptome sequencing analysis with IsoTools Genetics. bioRxiv <year>2021</year>. <pub-id pub-id-type="doi">10.1101/2021.07.13.452091</pub-id>.</mixed-citation>
    </ref>
    <ref id="btad214-B11">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mende</surname><given-names>DR</given-names></string-name>, <string-name><surname>Letunic</surname><given-names>I</given-names></string-name>, <string-name><surname>Maistrenko</surname><given-names>OM</given-names></string-name></person-group><etal>et al</etal><article-title>proGenomes2: an improved database for accurate and consistent habitat, taxonomic and functional annotations of prokaryotic genomes</article-title>. <source>Nucleic Acids Res</source><year>2020</year>;<volume>48</volume>:<fpage>D621</fpage>–<lpage>5</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkz1002</pub-id>.<pub-id pub-id-type="pmid">31647096</pub-id></mixed-citation>
    </ref>
    <ref id="btad214-B12">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mistry</surname><given-names>J</given-names></string-name>, <string-name><surname>Chuguransky</surname><given-names>S</given-names></string-name>, <string-name><surname>Williams</surname><given-names>L</given-names></string-name></person-group><etal>et al</etal><article-title>Pfam: the protein families database in 2021</article-title>. <source>Nucleic Acids Res</source><year>2021</year>;<volume>49</volume>:<fpage>D412</fpage>–<lpage>9</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkaa913</pub-id>.<pub-id pub-id-type="pmid">33125078</pub-id></mixed-citation>
    </ref>
    <ref id="btad214-B13">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Perkel</surname><given-names>JM.</given-names></string-name></person-group><article-title>Programming: pick up Python</article-title>. <source>Nature</source><year>2015</year>;<volume>518</volume>:<fpage>125</fpage>–<lpage>6</lpage>. <pub-id pub-id-type="doi">10.1038/518125a</pub-id>.<pub-id pub-id-type="pmid">25653001</pub-id></mixed-citation>
    </ref>
    <ref id="btad214-B14">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Rule</surname><given-names>A</given-names></string-name>, <string-name><surname>Birmingham</surname><given-names>A</given-names></string-name>, <string-name><surname>Zuniga</surname><given-names>C</given-names></string-name></person-group><etal>et al</etal><article-title>Ten simple rules for writing and sharing computational analyses in Jupyter Notebooks</article-title>. <source>PLoS Comput Biol</source><year>2019</year>;<volume>15</volume>:<fpage>e1007007</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1007007</pub-id>.<pub-id pub-id-type="pmid">31344036</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
