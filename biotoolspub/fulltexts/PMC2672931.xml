<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Struct Biol</journal-id>
    <journal-title>BMC Structural Biology</journal-title>
    <issn pub-type="epub">1472-6807</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">2672931</article-id>
    <article-id pub-id-type="publisher-id">1472-6807-9-19</article-id>
    <article-id pub-id-type="pmid">19331660</article-id>
    <article-id pub-id-type="doi">10.1186/1472-6807-9-19</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>ProteinShader: illustrative rendering of macromolecules</article-title>
    </title-group>
    <contrib-group>
      <contrib id="A1" corresp="yes" contrib-type="author">
        <name>
          <surname>Weber</surname>
          <given-names>Joseph R</given-names>
        </name>
        <xref ref-type="aff" rid="I1">1</xref>
        <email>joe.weber@alumni.duke.edu</email>
      </contrib>
    </contrib-group>
    <aff id="I1"><label>1</label>Extension School, Harvard University, Cambridge, Massachusetts 02138, USA</aff>
    <pub-date pub-type="collection">
      <year>2009</year>
    </pub-date>
    <pub-date pub-type="epub">
      <day>30</day>
      <month>3</month>
      <year>2009</year>
    </pub-date>
    <volume>9</volume>
    <fpage>19</fpage>
    <lpage>19</lpage>
    <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1472-6807/9/19"/>
    <history>
      <date date-type="received">
        <day>26</day>
        <month>7</month>
        <year>2008</year>
      </date>
      <date date-type="accepted">
        <day>30</day>
        <month>3</month>
        <year>2009</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>Copyright © 2009 Weber; licensee BioMed Central Ltd.</copyright-statement>
      <copyright-year>2009</copyright-year>
      <copyright-holder>Weber; licensee BioMed Central Ltd.</copyright-holder>
      <license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0">
        <p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0"/>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</p>
        <!--<rdf xmlns="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:dcterms="http://purl.org/dc/terms"><Work xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" rdf:about=""><license rdf:resource="http://creativecommons.org/licenses/by/2.0"/><dc:type rdf:resource="http://purl.org/dc/dcmitype/Text"/><dc:author>
               Weber
               R
               Joseph
               
               joe.weber@alumni.duke.edu
            </dc:author><dc:title>
            ProteinShader: illustrative rendering of macromolecules
         </dc:title><dc:date>2009</dc:date><dcterms:bibliographicCitation>BMC Structural Biology 9(1): 19-. (2009)</dcterms:bibliographicCitation><dc:identifier type="sici">1472-6807(2009)9:1&#x0003c;19&#x0003e;</dc:identifier><dcterms:isPartOf>urn:ISSN:1472-6807</dcterms:isPartOf><License rdf:about="http://creativecommons.org/licenses/by/2.0"><permits rdf:resource="http://web.resource.org/cc/Reproduction" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/Distribution" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Notice" xmlns=""/><requires rdf:resource="http://web.resource.org/cc/Attribution" xmlns=""/><permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" xmlns=""/></License></Work></rdf>-->
      </license>
    </permissions>
    <abstract>
      <sec>
        <title>Background</title>
        <p>Cartoon-style illustrative renderings of proteins can help clarify structural features that are obscured by space filling or balls and sticks style models, and recent advances in programmable graphics cards offer many new opportunities for improving illustrative renderings.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p>The ProteinShader program, a new tool for macromolecular visualization, uses information from Protein Data Bank files to produce illustrative renderings of proteins that approximate what an artist might create by hand using pen and ink. A combination of Hermite and spherical linear interpolation is used to draw smooth, gradually rotating three-dimensional tubes and ribbons with a repeating pattern of texture coordinates, which allows the application of texture mapping, real-time halftoning, and smooth edge lines. This free platform-independent open-source program is written primarily in Java, but also makes extensive use of the OpenGL Shading Language to modify the graphics pipeline.</p>
      </sec>
      <sec>
        <title>Conclusion</title>
        <p>By programming to the graphics processor unit, ProteinShader is able to produce high quality images and illustrative rendering effects in real-time. The main feature that distinguishes ProteinShader from other free molecular visualization tools is its use of texture mapping techniques that allow two-dimensional images to be mapped onto the curved three-dimensional surfaces of ribbons and tubes with minimum distortion of the images.</p>
      </sec>
    </abstract>
  </article-meta>
</front>
<body>
  <sec>
    <title>Background</title>
    <p>The study of protein structure is an intensely active area of research. The number of proteins for which a three-dimensional structure has been solved has increased exponentially in recent years, and there are currently over 56,000 entries in the Protein Data Bank (PDB [<xref ref-type="bibr" rid="B1">1</xref>,<xref ref-type="bibr" rid="B2">2</xref>]), a publicly accessible single worldwide archive of structural data for biological macromolecules. The three-dimensional structure of a protein determines what other molecules it is capable of binding and interacting with, so a deep understanding of protein structure is critical for predicting protein function and for designing drugs that interact with proteins.</p>
    <p>The basic building blocks of protein, amino acids, are small enough that they can be easily understood using simple balls and sticks models that show every atom and bond. Proteins, however, are typically composed of hundreds or even thousands of amino acids, making detailed three-dimensional models very difficult to understand. Fortunately, artistic ribbon representations of the protein backbone can be used to clarify regions of secondary structure, for example by using spiral ribbons for α-helices and arrows for β-strands [<xref ref-type="bibr" rid="B3">3</xref>], and simplified cartoon-style models using ribbons and tubes are commonly used in molecular visualization programs.</p>
    <p>The World Index of BioMolecular Visualization Resources web page [<xref ref-type="bibr" rid="B4">4</xref>] has an extensive listing of free molecular visualization programs that can run on ordinary personal computers. One of the most influential of these is RasMol [<xref ref-type="bibr" rid="B5">5</xref>], which is written in the C programming language, and is available on Windows, Macintosh, Linux, and Unix platforms [<xref ref-type="bibr" rid="B6">6</xref>,<xref ref-type="bibr" rid="B7">7</xref>]. RasMol's success was apparently due to an excellent compromise between rendering speed and image quality so that even large proteins can be rotated in real time [<xref ref-type="bibr" rid="B8">8</xref>]. More recently, Java based molecular visualization tools have become popular, in large part because of Java's platform independence, and a typical PDB web page for a protein now contains links to allow interactive three-dimensional images to be displayed using Java programs such as KiNG [<xref ref-type="bibr" rid="B9">9</xref>], WebMol [<xref ref-type="bibr" rid="B10">10</xref>], or Jmol [<xref ref-type="bibr" rid="B11">11</xref>].</p>
    <p>Recent advances in programmable graphics cards offer a number of new opportunities for illustrating proteins. Many inexpensive, commonly available graphics cards now fully support the use of the OpenGL Shading Language (GLSL [<xref ref-type="bibr" rid="B12">12</xref>]), which is used to write small programs, known as shaders, for modifying the graphics pipeline to produce sophisticated visual effects [<xref ref-type="bibr" rid="B13">13</xref>]. A few free molecular visualization tools have begun to take advantage of these new opportunities. The Visual Molecular Dynamics program uses GLSL to improve image quality and rendering speed [<xref ref-type="bibr" rid="B14">14</xref>,<xref ref-type="bibr" rid="B15">15</xref>], while QuteMol goes further by using GLSL to add illustrative rendering effects (also known as non-photorealistic rendering) such as borders around atoms and halo effects that make space filling, balls and sticks, and liquorice models much easier to interpret [<xref ref-type="bibr" rid="B16">16</xref>,<xref ref-type="bibr" rid="B17">17</xref>].</p>
    <p>The ProteinShader program described in this paper further exploits GLSL by using custom texture mapping and lighting calculations implemented on the graphics card to produce ribbon and tube cartoon-style illustrative renderings of proteins that approximate what an artist might create by hand using pen and ink. Custom shading calculations are also used to map text labels and decorative textures onto the curved surfaces of tubes and ribbons shown in color.</p>
  </sec>
  <sec>
    <title>Implementation</title>
    <p>ProteinShader is written primarily in Java, which was chosen because of its platform independence, as well as the ability of a Java Swing-based GUI to adopt the look and feel of the current operating system [<xref ref-type="bibr" rid="B18">18</xref>]. The Javadoc tool [<xref ref-type="bibr" rid="B19">19</xref>] was used to extract comments from the source code and generate the API (Application Programming Interface) files that are included in the help directory of the ProteinShader distribution. The current version of ProteinShader, beta 0.9.4, is available as Additional files <xref ref-type="supplementary-material" rid="S1">1</xref> and <xref ref-type="supplementary-material" rid="S2">2</xref>, or can be downloaded from SourceForge [<xref ref-type="bibr" rid="B20">20</xref>], where future versions will be posted.</p>
    <p>To obtain hardware-accelerated rendering of high quality three-dimensional perspective images of a protein, the low-level Open Graphics Library (OpenGL [<xref ref-type="bibr" rid="B21">21</xref>,<xref ref-type="bibr" rid="B22">22</xref>]) that runs on most modern graphics cards is used. The ribbons and tubes used by ProteinShader are drawn as collections of flat polygons tiled together to form continuous surfaces, and texture mapping coordinates are assigned to individual vertices as they are generated. Because OpenGL is primarily intended to work with the C/C++ language, Java Bindings for OpenGL (JOGL [<xref ref-type="bibr" rid="B23">23</xref>,<xref ref-type="bibr" rid="B24">24</xref>]) is used to allow the Java code to access OpenGL.</p>
    <p>To map textures onto the surfaces of ribbons and tubes, vertex and fragment shaders written in the OpenGL Shading Language [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>] are used. The vertex shader allows a programmer to manipulate directional vectors associated with a vertex, while the fragment shader is for applying custom equations for setting the color of each surface fragment (potential future pixel) [<xref ref-type="bibr" rid="B13">13</xref>,<xref ref-type="bibr" rid="B25">25</xref>].</p>
    <p>To speed up the number of frames per second that can be rendering during an animation (a constant rotation), geometry is cached on the graphics card by using OpenGL display lists [<xref ref-type="bibr" rid="B26">26</xref>]. When tested with an inexpensive good quality mid-range graphics card, the ATI Radeon X1600, caching geometry in advance resulted in a nine-fold increase in performance for ribbons and a thirteen-fold increase in performance for tubes (data not shown).</p>
  </sec>
  <sec>
    <title>Results and discussion</title>
    <sec>
      <title>Overview of the ProteinShader GUI</title>
      <p>A screenshot of the ProteinShader GUI is shown in Figure <xref ref-type="fig" rid="F1">1</xref>, where the retinol-binding protein [<xref ref-type="bibr" rid="B27">27</xref>] is displayed as a pen-and-ink style rendering. The main window consists of a drawing canvas with a menu bar across the top, and the purpose of each menu is summarized in Table <xref ref-type="table" rid="T1">1</xref>. The File menu's chooser box will open to the ProteinShader's data directory by default, so that is the best place to store protein structure files downloaded from the PDB web site [<xref ref-type="bibr" rid="B1">1</xref>].</p>
      <table-wrap position="float" id="T1">
        <label>Table 1</label>
        <caption>
          <p>Menu bar options.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <td align="left">
                <bold>Menu</bold>
              </td>
              <td align="left">
                <bold>Purpose</bold>
              </td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">File</td>
              <td align="left">In addition to Open and Quit, there is an Export Image submenu that allows the image on the canvas to be saved as a PNG or JPEG file.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Style</td>
              <td align="left">The Cartoon submenu allows the protein to be displayed as Tubes, Ribbons, Tubes and Ribbons, or Frenet Frames. The Atom submenu offers Space Filling (spheres), Balls and Sticks (spheres and cylinders), or Sticks (cylinders).</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Visibility</td>
              <td align="left">Coarse-level of control over whether Amino Acids, Heterogens, or Waters are visible. Control panels in Table 2 provide a more fine-grained control.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Orientation</td>
              <td align="left">Choosing Original resets the protein to its original size and front orientation, while Front, Back, left, Right, Top, and Bottom affect the protein's orientation, but not the camera distance.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Background</td>
              <td align="left">Sets the background color on the canvas to Black, Gray, Light Gray, White, or opens a Chooser dialog box that can be used to select any color.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Tools</td>
              <td align="left">Opens and closes the control panel on the right side of the canvas.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Help</td>
              <td align="left">Opens the desktop's default web browser and loads a help html file.</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <fig position="float" id="F1">
        <label>Figure 1</label>
        <caption>
          <p><bold>The ProteinShader GUI</bold>. A screen capture of the ProteinShader GUI with a pen-and-ink style rendering of the retinol-binding protein [PDB:<ext-link ext-link-type="pdb" xlink:href="1AQB">1AQB</ext-link>], a β-barrel structure [<xref ref-type="bibr" rid="B27">27</xref>], as a tubes style display. In the control panel on the right, the entire model was selected in the Decorations subpanel, and real-time halftoning was applied by selecting Noise from the Halftone Texture menu and Diagonals 1 from the Bend Texture menu.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-1"/>
      </fig>
      <p>The retractable control panel on the right side of the canvas is composed of two parts: a left-side subpanel that allows the user to select any model, chain, residue, or atom of the protein structure, and a right-side subpanel that can be switched to any of several different modifier or action subpanels. The menu at the top right of the control panel is used for changing the right-side subpanel, and the purpose of each subpanel is summarized in Table <xref ref-type="table" rid="T2">2</xref>. Most of the modifier subpanels also allow selection of individual α-helices, β-strands, or loop regions.</p>
      <table-wrap position="float" id="T2">
        <label>Table 2</label>
        <caption>
          <p>Subpanels of the retractable right-side control panel.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <td align="left">
                <bold>Subpanel</bold>
              </td>
              <td align="left">
                <bold>Purpose</bold>
              </td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Selection</td>
              <td align="left">The left-side subpanel allows selection of any model, chain, residue, water, heterogen, or atom of the protein. This subpanel is always present, whereas the right-side subpanel can be changed to any of the subpanels listed below.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Decorations</td>
              <td align="left">Applies texture maps and other special effects to ribbon and tube segments (the term segment refers to the length of a tube or ribbon that corresponds to an individual amino acid). This subpanel is visible in Figure 1.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Cartoon Color</td>
              <td align="left">Sets the color of tube and ribbon segments. Default colors based on region or amino acid type can be used, or a color chooser dialog box can be opened.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Cartoon Visibility</td>
              <td align="left">Sets any segment or group of segments in a tube or ribbon to be opaque, translucent, or invisible.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Cartoon Side Chains</td>
              <td align="left">Used to display amino acid side chains in combination with tubes or ribbons. The side chains can be shown as space filling, balls and sticks, or sticks.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Motion</td>
              <td align="left">Allows constant motion about the x-axis and/or y-axis of the protein. The frames per second will be displayed in the upper left of the canvas.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Antialiasing</td>
              <td align="left">Provides options for smoothing out the aliasing (jagged diagonal line) effect that often occurs at the edges of geometrically defined objects.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Atom Color</td>
              <td align="left">Sets the color of atoms in a space filling, balls and sticks, or sticks style display. Default colors based on atom or amino acid type can be applied, or a color chooser dialog box can be opened.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Atom Visibility</td>
              <td align="left">Sets any atom or group of atoms to be opaque, translucent, or invisible. A slider allows any degree of translucency from 0 to 100%.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Atom Scale</td>
              <td align="left">Adjusts the radii of spheres in a space filling or balls and sticks style display.</td>
            </tr>
            <tr>
              <td colspan="2">
                <hr/>
              </td>
            </tr>
            <tr>
              <td align="left">Tiling</td>
              <td align="left">Can be used to turn off automatic tiling (level of detail control) for spheres and cylinders. This panel has no effect on ribbon and tube style displays.</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>A few examples of the kind of artwork ProteinShader can generate are shown in Figure <xref ref-type="fig" rid="F2">2</xref> using the porin protein [<xref ref-type="bibr" rid="B28">28</xref>,<xref ref-type="bibr" rid="B29">29</xref>], the ribonuclease inhibitor protein [<xref ref-type="bibr" rid="B30">30</xref>], the 3-isopropylmalate dehydrogenase enzyme [<xref ref-type="bibr" rid="B31">31</xref>], and the potassium channel [<xref ref-type="bibr" rid="B32">32</xref>]. When a protein structure is loaded, the canvas automatically displays it as a pen-and-ink style illustrative rendering of ribbons and tubes, and the right side of the control panel is set to the Decorations subpanel shown in Figure <xref ref-type="fig" rid="F1">1</xref>. A variety of patterns can be applied to the ribbons and tubes by using the Halftone Texture and Bend Texture menus of the Decorations subpanel. The patterns are read from image files, which will be discussed further below in the section on texture mapping. A Cartoon Visibility subpanel can be used to deemphasize parts of the structure by setting them to be translucent, and the Visibility menu above the canvas can be used to display heterogens, such as the 3-isopropylmalate substrate molecules in Figure <xref ref-type="fig" rid="F2">2C</xref> or the K+ ion in Figure <xref ref-type="fig" rid="F2">2D</xref>.</p>
      <fig position="float" id="F2">
        <label>Figure 2</label>
        <caption>
          <p><bold>Illustrative renderings of proteins</bold>. Real-time halftoning and edge-line generation algorithms have been applied to ribbon and tube style displays generated from PDB structure files. (A) The porin protein [PDB:<ext-link ext-link-type="pdb" xlink:href="3POR">3POR</ext-link>], a transmembrane β-barrel structure [<xref ref-type="bibr" rid="B28">28</xref>,<xref ref-type="bibr" rid="B29">29</xref>]. (B) The ribonuclease inhibitor protein [PDB:<ext-link ext-link-type="pdb" xlink:href="2BNH">2BNH</ext-link>], a α/β horseshoe-shaped structure [<xref ref-type="bibr" rid="B30">30</xref>]. (C) The 3-isopropylmalate dehydrogenase enzyme [PDB:<ext-link ext-link-type="pdb" xlink:href="1A05">1A05</ext-link>], a three-layer (α-β-α) sandwich-structure [<xref ref-type="bibr" rid="B31">31</xref>], with two substrate molecules (C, gray; O, red; Mg<sup>2+</sup>, green). (D) The potassium channel [PDB:<ext-link ext-link-type="pdb" xlink:href="1BL8">1BL8</ext-link>], a transmembrane α-domain structure [<xref ref-type="bibr" rid="B32">32</xref>], with a K+ ion (deep pink) in the channel. In all four images, loop regions are de-emphasized by showing them as thin ribbons with 75% translucency. In (A) to (C), α-helices are shown as tubes, while β-strands are shown as wide ribbons. In (D), the α-helices are shown as wide ribbons.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-2"/>
      </fig>
      <p>In addition to the ribbons and tubes cartoon-type representations, the Style menu above the canvas can also be used to select atom-type representations: space filling (spheres), balls and sticks (spheres and cylinders), and sticks (cylinders). Dragging the mouse across the canvas can be used to rotate or zoom in on images, or an image can be rotated at constant speed by using a motion control panel. Details on mouse movements or the various control panels and menus can be found by using the Help menu above the canvas.</p>
    </sec>
    <sec>
      <title>General strategy for tubes and ribbons</title>
      <p>Three-dimensional ribbons and tubes can be drawn by sweeping a waist polygon along a curved line at regular intervals and, at each point along the curve, aligning the polygon to a local coordinate frame (an xyz-axis system) that keeps the plane of the polygon perpendicular to the tangent of the curve [<xref ref-type="bibr" rid="B33">33</xref>]. When two copies of the polygon are placed at adjacent points along the curve, connecting their vertices can be used to define the small, flat polygons that ultimately approximate the curved surface of the ribbon or tube. In ProteinShader, the curved line and local coordinate frames needed for creating ribbons and tubes are generated using the xyz-coordinates of the α-carbons in each polypeptide chain.</p>
    </sec>
    <sec>
      <title>Local coordinate frames for α-carbons</title>
      <p>To define each α-carbon's local xyz-coordinate frame, the technique illustrated in Figure <xref ref-type="fig" rid="F3">3A</xref> is used. For α-carbon <italic>i</italic>, a tangent vector T (z-axis) is calculated as the vector pointing from α-carbon (<italic>i </italic>- 1) to α-carbon (<italic>i </italic>+ 1). A second vector in the same plane is calculated by subtracting α-carbon (<italic>i </italic>- 1) from α-carbon (<italic>i</italic>), and a binormal vector B (y-axis) is then calculated as the cross product of this second vector and T. Finally, the cross product of B and T is used to obtain a normal vector N (x-axis). If a previous or next α-carbon is missing, the calculations use the current α-carbons's amino group nitrogen or carbonyl group oxygen, respectively.</p>
      <fig position="float" id="F3">
        <label>Figure 3</label>
        <caption>
          <p><bold>Calculation of local coordinate frames and a spline for drawing tubes</bold>. (A) The local coordinate frame for α-carbon number <italic>i </italic>in a polypeptide chain, C<sub>α </sub>(i), is calculated relative to the triangle (light green) that it forms with C<sub>α </sub>(i-1) and C<sub>α </sub>(i+1). The vectors N (Normal; green), B (Binormal; yellow), and T (Tangent; red) are the xyz-axes, respectively, of the local frame (see Local coordinate frames in the text). (B) The column vectors N, B, and T form a matrix that defines a rotation about C<sub>α </sub>(i). (C) The tangent vectors and xyz-coordinates of two α-carbons are sufficient to define a parameterized cubic polynomial equation (see Hermite interpolation in the text). The set of cubic polynomials connecting the α-carbons of a polypeptide chain form a spline, which is shown as a curved dotted line in (A). (D) The equation for interpolation between rotations using quaternions (see SLERP in text). (E) An α-helix after selecting Frenet Frames from the Style menu. The α-carbons (small gray spheres) have local frames represented by green, yellow, and red vectors as in (A). The smaller local frames between α-carbons are interpolated by using the Hermite-SLERP algorithm described in the text. (F) The α-helix from (E) after selecting Tubes from the Style menu and Wireframe from the Decorations panel. To draw the tube, a regular polygon defined by 20 vertices in a circle (red) is swept along the spline and rotated into alignment with the xy-plane of each local frame. Connecting vertices between successive positions of the polygon produces the surface of the tube. (G) The α-helix from (F) after Plain is selected from the Decorations menu and the Cartoon Color subpanel is used to color tube segments by amino acid type.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-3"/>
      </fig>
      <p>N, B, and T form a right-handed perpendicular xyz-axis system, with N and T in the plane represented by the light green triangle in Figure <xref ref-type="fig" rid="F3">3A</xref>. Written as column vectors, N, B, and T form the rotation matrix shown in Figure <xref ref-type="fig" rid="F3">3B</xref>. This matrix can be used to take a waist polygon drawn in the xy-plane of a global xyz-coordinate system and rotate it into the xy-plane of the local coordinate frame for an α-carbon.</p>
    </sec>
    <sec>
      <title>Hermite interpolation</title>
      <p>To develop a curved line that passes through the α-carbons in a chain, Hermite interpolation [<xref ref-type="bibr" rid="B34">34</xref>] is used. The curved line is actually a spline, a series of piecewise cubic polynomial equations, where each polynomial equation begins at one α-carbon and ends at the next. The xyz-coordinates and tangent vectors of the two α-carbons are used to solve the constants A, B, C, and D in the set of parameterized equations shown in Figure <xref ref-type="fig" rid="F3">3C</xref>. The parameter <italic>t </italic>is set to 0.0 at α-carbon (<italic>i</italic>) and to 1.0 at α-carbon (<italic>i </italic>+ 1), so intermediate values of <italic>t </italic>can be used to solve for the xyz-coordinates of any point on the curved line. The tangent vectors used in the calculations are adjusted to a length of 4.0 because that gives a reasonable curvature for α-helices and β-strands.</p>
    </sec>
    <sec>
      <title>SLERP</title>
      <p>An algorithm is also needed for interpolating between the local coordinate frames of α-carbons. The tangent (z-axis) of each interpolated frame could be calculated from the first derivatives of the equations shown in Figure <xref ref-type="fig" rid="F3">3C</xref>, and a simplistic linear interpolation could be used to calculate a normal (x-axis) and binormal (y-axis) for each point. However, a much smoother interpolation can be achieved by using the spherical linear interpolation (SLERP) parameterized equation shown in Figure <xref ref-type="fig" rid="F3">3D</xref>[<xref ref-type="bibr" rid="B35">35</xref>-<xref ref-type="bibr" rid="B37">37</xref>].</p>
      <p>SLERP, which is based on the use of quaternions, is commonly used in computer graphics for gliding a camera through a scene because it avoids the quirks and jerky motion of earlier methods [<xref ref-type="bibr" rid="B37">37</xref>]. A quaternion is a four-tuple devised by W. R. Hamilton to extend complex numbers into multiple dimensions, but it can also be used to represent a three-dimensional rotation in space [<xref ref-type="bibr" rid="B35">35</xref>,<xref ref-type="bibr" rid="B37">37</xref>]. A rotation matrix can be converted into a quaternion [<xref ref-type="bibr" rid="B38">38</xref>], and interpolating between quaternions produces a smoother rotation than attempting to interpolate between matrices.</p>
    </sec>
    <sec>
      <title>Hermite-SLERP algorithm</title>
      <p>To maintain the three-dimensional structure of a tube or ribbon, the waist polygon drawn in the xy-plane of each local coordinate frame should be kept perpendicular to the spline, so the tangent (z-axis) of each local frame should closely matches the tangent of the spline. A minor problem with using SLERP is that the tangent of each interpolated quaternion (the z-axis of the local frame that the quaternion is equivalent to) will not necessarily match the tangent calculated by Hermite interpolation.</p>
      <p>To fix any discrepancy between the SLERP- and Hermite-calculated tangents, the tangents are compared, and if there is more than one degree of difference, a rotation is used to make the SLERP tangent match the Hermite tangent. The axis and angle of rotation are calculated using the cross product and dot product, respectively, of the two tangents, and for convenience the axis and angle are converted into a quaternion.</p>
      <p>Multiplying the interpolated quaternion by the tangent-fix-up quaternion adjusts the interpolated quaternion so that if it was converted back into a rotation matrix, its tangent would now match the tangent of the spline. The net effect of these manipulations is that the tangent (z-axis) of each local frame along the spline is determined by Hermite interpolation, while the SLERP algorithm provides for a smooth, gradual rotation of the xy-axes.</p>
    </sec>
    <sec>
      <title>Frenet Frames</title>
      <p>To visualize the spline and local coordinate frames produced by the Hermite-SLERP algorithm, the Style menu above the canvas has a Frenet Frames option. An α-helix from the c-Jun protein [<xref ref-type="bibr" rid="B39">39</xref>] is shown as Frenet Frames in Figure <xref ref-type="fig" rid="F3">3E</xref>, where the local frames use the same color scheme as in Figure <xref ref-type="fig" rid="F3">3A</xref>, and the interpolated frames are shown on a smaller scale. In Figure <xref ref-type="fig" rid="F3">3F</xref>, the same α-helix is shown after selecting Tubes from the Style menu and Wireframe from the Decorations panel. The red end cap is the waist polygon that is swept along the spline while drawing the tube, and the lines of the wireframe connect the vertices that define the surface of the tube. In Figure <xref ref-type="fig" rid="F3">3G</xref>, the α-helix is shown after selecting Plain from the Decorations panel and using the Cartoon Color panel to apply colors based on amino acid type. Phong lighting calculations [<xref ref-type="bibr" rid="B40">40</xref>,<xref ref-type="bibr" rid="B41">41</xref>] are used to smooth out the appearance of the tube's surface and to add specular highlighting (the shiny plastic-like appearance) to enhance the three-dimensional quality of the image.</p>
    </sec>
    <sec>
      <title>Untwisting β-strands</title>
      <p>The Hermite-SLERP algorithm works fine for α-helices and loops, but encounters a problem with β-strands, where the amino acid side chain directionality alternates by approximately 180 degrees for successive residues. The local coordinate frames will, in most cases, flip direction for every other α-carbon. Consequently, a β-strand ribbon will appear highly twisted as illustrated in Figure <xref ref-type="fig" rid="F4">4</xref>, where two β-strands are shown as Frenet frames (Figure <xref ref-type="fig" rid="F4">4A</xref>) or ribbons (Figure <xref ref-type="fig" rid="F4">4B</xref>). The twisted ribbons are visually difficult to follow, and any images mapped onto their surface become highly distorted.</p>
      <fig position="float" id="F4">
        <label>Figure 4</label>
        <caption>
          <p><bold>Untwisting β-strand ribbons</bold>. (A) The local coordinate frames for two β-strands are calculated using the same algorithm as for the α-helix in Figure 3. In this view, the direction of the y-axis (yellow) of the local frames can be seen to alternate by approximately 180 degrees for each successive α-carbon in a chain. (B) The ribbons drawn using the local coordinates frames shown in (A) have a highly twisted appearance, making the text labels texture mapped onto their surface very difficult to read. (C) The local frames for the β-strands in (A) are shown after being adjusted by an algorithm that compares the local frames for successive α-carbons and, if necessary, rotates frames 180 degrees about their z-axis. (D) The ribbons drawn using the local coordinate frames shown in (C) have a smoothed out appearance. The direction of the text labels indicates the amino to carboxyl direction of the polypeptide chain.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-4"/>
      </fig>
      <p>To fix this problem, the local coordinate frames for successive α-carbons are compared to check for a radical change in direction. The frames are aligned along their tangents (z-axes) by using the procedure described earlier for making SLERP-calculated tangents match Hermite-calculated tangents, and if the angle between the two binormal vectors (y-axes) is greater than 90 degrees, the second frame is rotated 180 degrees about its tangent (z-axis). After performing this fix-up step along a β-strand's length, the frames will be aligned as shown in Figure <xref ref-type="fig" rid="F4">4C</xref>. The appearance of the ribbon is greatly improved as shown in Figure <xref ref-type="fig" rid="F4">4D</xref>, and the antiparallel nature of the two β-strands becomes more obvious because the crests and valleys of the ribbons coincide.</p>
      <p>It might seem simpler to assume that the coordinate frame for every second α-carbon should be rotated. However, that strategy will not always work because there are occasional irregularities in the structure of lengthy β-strands, as well as some problems with how β-strands are defined.</p>
    </sec>
    <sec>
      <title>Combining side chains with ribbons</title>
      <p>Because the spline runs through the α-carbons, when balls and sticks representations of amino acid side chains are combined with ribbons, the side chains appear to be firmly attached to the ribbon. This effect is illustrated in Figure <xref ref-type="fig" rid="F5">5</xref>, which shows two β-strand ribbons after the Balls and Sticks button was clicked in the Cartoon Side Chain subpanel of the Control Panel. By looking closely along the length of the ribbon, the alternating orientation of side chains discussed in the previous section can be clearly observed.</p>
      <fig position="float" id="F5">
        <label>Figure 5</label>
        <caption>
          <p><bold>Combining balls and sticks style side chains with ribbons</bold>. β-Strands 3 (H52-L63) and 4 (W67-T78) of the retinol-binding protein [PDB:<ext-link ext-link-type="pdb" xlink:href="1AQB">1AQB</ext-link>] are shown as ribbons (main chain) with side chains added as a balls and sticks style display. The small gray spheres that appear to be imbedded in the ribbon are the α-carbons of the main chain.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-5"/>
      </fig>
    </sec>
    <sec>
      <title>Segments and texture mapping</title>
      <p>If a region of secondary structure were stored as a single collection of vertices, dynamically applying colors or textures to mark individual amino acids would become quite complex. Therefore, the basic geometric unit of organization for rendering tubes and ribbons in the ProteinShader program is a segment, which is defined as a length of a tube or ribbon that corresponds to a single amino acid. A segment's center is the xyz-coordinates of its α-carbon, while its beginning and end are the midpoints along the spline to the previous and next α-carbon, respectively.</p>
      <p>A segment can be thought of as a collection of local coordinate frames, as shown in Figure <xref ref-type="fig" rid="F6">6A</xref>, where an amino acid is shown as Frenet frames with blue, gray, and red spheres marking the beginning, α-carbon, and end of the segment, respectively. The same amino acid is also shown as a tube segment (Figure <xref ref-type="fig" rid="F6">6B</xref>) and as a ribbon segment (Figure <xref ref-type="fig" rid="F6">6C</xref>). As the waist polygon that specifies the vertices of a tube or ribbon segment is swept along the spline and aligned to each local frame, every vertex is assigned a surface normal and a pair of texture coordinates. The surface normal is a vector needed for lighting calculations, while the texture coordinates allow two-dimensional images such as the swirl pattern in Figure 6D to be systematically mapped onto the surface of a tube or ribbon segment. By convention, the texture coordinates are referred to as <italic>s </italic>and <italic>t</italic>, and each coordinate is on a scale from 0.0 to 1.0 [<xref ref-type="bibr" rid="B42">42</xref>,<xref ref-type="bibr" rid="B43">43</xref>].</p>
      <fig position="float" id="F6">
        <label>Figure 6</label>
        <caption>
          <p><bold>Texture mapping onto the curved surfaces of tube and ribbon segments</bold>. (A) The local coordinate frames needed for drawing a single amino acid as a tube or ribbon segment are shown using the same conventions as in Figure 3, except that a small blue sphere marks the amino-terminal end of the segment, while a small red sphere marks the carboxyl-terminal end. The same amino acid is drawn as a tube segment in (B) and as a ribbon segment in (C). In both (B) and (C), a blue end cap indicates the amino-terminus of the segment, while a red end cap indicates the carboxyl-terminus. (D) This two-dimensional swirl image was mapped onto the curved three-dimensional surfaces of the tube (B) and ribbon (C) segments by using (s, t) texture coordinates that are assigned to each vertex of a segment when its geometry is first calculated.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-6"/>
      </fig>
      <p>Vertices at the beginning of a segment are assigned a <italic>t</italic>-coordinate of 0.0, while vertices at the end are assigned a <italic>t</italic>-coordinate of 1.0. The <italic>s</italic>-coordinate, on the other hand, increases in the counter clockwise direction as the vertices of the waist polygon are drawn in the xy-plane, and the exact start and end values are somewhat variable. For example, the broad surfaces of ribbons have <italic>s</italic>-coordinates from 0.0 to 1.0, but on the narrow sides of ribbons the s-coordinates run from 0.0 to only 0.125. For tubes, the s-coordinate runs from 0.0 to 2.0 so that the same texture map will be wrapped around the tube twice.</p>
      <p>The Patterns, Text Labels, and Wireframe buttons of the Decorations subpanel accomplish their effects by using texture mapping. The images in the Patterns menu are read from PNG (Portable Network Graphics [<xref ref-type="bibr" rid="B44">44</xref>]) or JPEG (Joint Photographic Experts Group [<xref ref-type="bibr" rid="B45">45</xref>]) files in the textures/patterns subdirectory, and the menu can be modified by editing a configuration file. The lines for the wireframe images are calculated on-the-fly, while the images needed for amino acid labels are generated whenever a protein structure is first loaded by extracting letters and digits from an image file. Texture mapping is also important for creating pen-and-ink style drawings.</p>
    </sec>
    <sec>
      <title>Pen-and-ink style drawings</title>
      <p>To produce pen-and-ink style drawings, a variety of edge lines need to be added. For ribbons, many of the edge lines can be added by darkening fragments of a surface if they have an <italic>s </italic>or <italic>t </italic>coordinate close to the minimum or maximum. For tubes, however, this approach is only useful at the beginning or end of a segment, as what appears to be an edge along the length of a tube is determined by the view angle.</p>
      <p>A solution for generating edge lines based on the view angle is presented in Figure <xref ref-type="fig" rid="F7">7</xref>. Lighting calculations typically use a surface normal that indicates the direction a fragment faces, a view vector from the fragment to the camera, and a lighting vector from the fragment to the light source (a fragment is similar to a pixel, but occurs earlier in the graphics pipeline). As shown in Figure <xref ref-type="fig" rid="F7">7A</xref>, if the angle between the surface normal (N) and the view vector (V) is close to 90 degrees, then the surface is an edge and should be darkened.</p>
      <fig position="float" id="F7">
        <label>Figure 7</label>
        <caption>
          <p><bold>Generation of edge lines for pen-and-ink style drawings</bold>. (A) Edge lines for a tube are calculated by measuring the angle between the view vector V and the surface normal vector N, and then darkening a surface if the angle is close to 90 degrees. (B) The equation for edge-line intensity is based on the smooth function used for single-pass wireframe rendering [<xref ref-type="bibr" rid="B46">46</xref>]. (C) A tube style display of the human growth hormone protein [PDB:<ext-link ext-link-type="pdb" xlink:href="1HGU">1HGU</ext-link>], a four α-helix bundle structure [<xref ref-type="bibr" rid="B47">47</xref>], is shown in gray scale and using Phong lighting with a single directional light and no specular highlighting. (D) Edge lines are added to the image shown in (C).</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-7"/>
      </fig>
      <p>Instead of a sharp cutoff, the smoothing function graphed in Figure <xref ref-type="fig" rid="F7">7B</xref> is used to determine edge line intensity: <italic>I </italic>= exp<sub>2</sub>(-2<italic>d</italic><sup>2</sup>), where <italic>d </italic>= 2cosine(θ) and θ is the angle between N and V. This equation is from a paper on single-pass wireframe rendering [<xref ref-type="bibr" rid="B46">46</xref>], where <italic>d </italic>was a distance. The equation is also used to smooth edge lines generated from texture coordinates.</p>
      <p>The result of these edge-line calculations can be seen by comparing two images of the human growth hormone protein [<xref ref-type="bibr" rid="B47">47</xref>]. In Figure <xref ref-type="fig" rid="F7">7C</xref>, a color model has been converted to grayscale by using the equation: <italic>gray = 0.30 red + 0.59 green + 0.12 blue</italic>. In Figure <xref ref-type="fig" rid="F7">7D</xref>, edge lines generated from the view angle have been applied along with texture-coordinate based edges added to segment end caps.</p>
      <p>The image in Figure <xref ref-type="fig" rid="F7">7D</xref> is shown in Figure <xref ref-type="fig" rid="F8">8</xref> after using the real-time halftoning technique [<xref ref-type="bibr" rid="B48">48</xref>] to mix a noise texture (upper right inset) with grayscale lighting calculations by using the smooth threshold function, <italic>color </italic>= <italic>1.0 </italic>- <italic>aliasFactor*(1.0 - {halftoneColor + grayscaleColor} </italic>[<xref ref-type="bibr" rid="B49">49</xref>]. An aliasFactor of 4.0 is suitable for some applications of halftoning [<xref ref-type="bibr" rid="B49">49</xref>], but a number closer to 1.0 is used in ProteinShader to obtain a more subtle effect. This function allows for grayscale values, whereas some versions of halftoning only allow black and white.</p>
      <fig position="float" id="F8">
        <label>Figure 8</label>
        <caption>
          <p><bold>Use of real-time halftoning and bend textures for pen-and-ink style illustrative renderings</bold>. The human growth hormone protein image shown in Figure 7D is shown with a halftoning texture (upper right inset) and a bend texture (lower right inset) mapped onto the surface of each tube segment. The halftoning texture is mixed with lighting calculations, whereas the bend texture is multiplied by a bend factor from 0.0 to 1.0 that is determined by comparing the tangents at the very beginning and end of a segment.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-8"/>
      </fig>
      <p>To emphasize bends in the middle of segments, a second texture has been applied to the image in Figure <xref ref-type="fig" rid="F8">8</xref> (see lower right inset), and the intensity of the texture is proportional to how strongly a segment's spline is bent. A bend factor on a linear scale from 0.0 to 1.0 is calculated by comparing the tangents at the beginning and end of a segment. If the tangents have an angle close to 180 degrees when placed tail to tail, the spline is nearly straight and the bend factor is close to 0.0. If the angle is almost 50 degrees, the segment is strongly bent, and the bend factor is close to 1.0.</p>
      <p>Halftoning and bend textures can be selected from menus in the Decorations panel shown in Figure <xref ref-type="fig" rid="F1">1</xref>. The textures are stored as PNG [<xref ref-type="bibr" rid="B44">44</xref>] or JPEG [<xref ref-type="bibr" rid="B45">45</xref>] files, and the Help menu has directions for adding new textures. Textures can be assigned to individual segments of a ribbon or tube, so the pen-and-ink style drawing can be mixed with other options (Patterns, Text Labels, Wireframe, and Plain).</p>
      <p>Selection of individual segments also allows important regions of a protein to be highlighted by adding amino acid side chains to pen-and-ink style drawings. As examples, in Figure <xref ref-type="fig" rid="F9">9</xref> side chains involved in binding of human growth hormone to its receptor [<xref ref-type="bibr" rid="B50">50</xref>] have been added as a space filling (Figure <xref ref-type="fig" rid="F9">9A</xref>) or balls and sticks (Figure <xref ref-type="fig" rid="F9">9B</xref>) style display, and the way that a loop region (red in Figure <xref ref-type="fig" rid="F9">9C</xref>) of the transmembrane β-barrel porin protein fills up much of the channel [<xref ref-type="bibr" rid="B28">28</xref>,<xref ref-type="bibr" rid="B29">29</xref>] is illustrated with space filling side chains (Figure <xref ref-type="fig" rid="F9">9D</xref>).</p>
      <fig position="float" id="F9">
        <label>Figure 9</label>
        <caption>
          <p><bold>Combining amino acid side chain displays with pen-and-ink style illustrative renderings</bold>. (A) The human growth hormone image from Figure 8 is displayed in a different orientation, and amino acid side chains involved in binding to the growth hormone receptor [<xref ref-type="bibr" rid="B50">50</xref>] are shown as a space filling style display colored by amino acid type (the amino acids are F10, F54, E56, I58, R64, Q68, D171, K172, E174, T175, F176, R178, C182, and V185). The α-carbons are also shown. (B) The same as (A), except that the protein is shown as ribbons and the amino acid side chains are shown as a balls and sticks style display. (C) The transmembrane β-barrel protein porin that was shown as a side view in Figure 2A is shown here with an end view of the β-barrel. A loop region (loop 7) that fits inside the β-barrel is highlighted in red. (D) The same as (C), except that the amino acid side chains of loop 7 are shown as a space filling style display and are colored by amino acid type. Loop 7 restricts the size of the channel to a narrow region called the eyelet, which is about 8 angstroms in diameter and 9 angstroms in length [<xref ref-type="bibr" rid="B28">28</xref>,<xref ref-type="bibr" rid="B29">29</xref>].</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-9"/>
      </fig>
    </sec>
    <sec>
      <title>Performance costs for shaders</title>
      <p>The experiments in Figures <xref ref-type="fig" rid="F10">10</xref> and <xref ref-type="fig" rid="F11">11</xref> measure the performance costs for using vertex and fragment shaders to perform custom lighting, texture mapping, and edge-line generation calculations. For a space filling style display, Phong lighting using custom shaders (Figure <xref ref-type="fig" rid="F10">10A</xref>) produces a smoother, higher quality image than using the built-in OpenGL lighting (Figure <xref ref-type="fig" rid="F10">10B</xref>). The performance cost appears to be fairly minor (Figure <xref ref-type="fig" rid="F10">10C</xref>), with about a 12% reduction in frames per second during an animation when the Phong shaders are used rather than the built-in lighting. Similar results were seen for a tubes style display (Figures <xref ref-type="fig" rid="F10">10D</xref> to <xref ref-type="fig" rid="F10">10F</xref>), with about a 17% reduction in frames per second.</p>
      <fig position="float" id="F10">
        <label>Figure 10</label>
        <caption>
          <p><bold>Comparison of Phong vertex and fragment shaders to OpenGL's built-in lighting</bold>. (A) A close up view of a small portion of the c-Jun homodimer [PDB:<ext-link ext-link-type="pdb" xlink:href="1JUN">1JUN</ext-link>], a leucine zipper protein [<xref ref-type="bibr" rid="B39">39</xref>], is shown as a space filling (spheres) style display. Lighting calculations were performed using the phong.vert and phong.frag shaders in the ProteinShader shaders directory. (B) The same view as in (A), except that OpenGL's built-in lighting was activated by temporarily removing the phong.frag file from the shaders directory and restarting the program (a dialog box warns the user that the Phong shaders could not be compiled, and OpenGL's built-in lighting is used as a backup). (C) Several proteins were used to compare the frames per second that could be rendered during an animation of a space filling style display while using OpenGL's built-in lighting (white bars) or Phong shaders (black bars). (D) Phong lighting is used on a tubes style display of the same protein as in (A). (E) The same view as (D), except that OpenGL's built-in lighting is used. (F) The same comparisons as in (C), except that a tubes style display is used. See Table <xref ref-type="table" rid="T3">3</xref> for the sizes of the test proteins and notes on the computer used for performance testing.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-10"/>
      </fig>
      <table-wrap position="float" id="T3">
        <label>Table 3</label>
        <caption>
          <p>Proteins used in performance testing.</p>
        </caption>
        <table frame="hsides" rules="groups">
          <thead>
            <tr>
              <td align="center">
                <bold>PDB ID</bold>
              </td>
              <td align="center">
                <bold>Residues</bold>
              </td>
              <td align="center">
                <bold>Atoms</bold>
              </td>
              <td align="left">
                <bold>Protein</bold>
              </td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="1AQB">1AQB</ext-link>
              </td>
              <td align="center">175</td>
              <td align="center">1574</td>
              <td align="left">retinol-binding protein</td>
            </tr>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="1BL8">1BL8</ext-link>
              </td>
              <td align="center">388</td>
              <td align="center">2824</td>
              <td align="left">potassium channel</td>
            </tr>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="6ADH">6ADH</ext-link>
              </td>
              <td align="center">748</td>
              <td align="center">5669</td>
              <td align="left">alcohol dehydrogenase</td>
            </tr>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="13PK">13PK</ext-link>
              </td>
              <td align="center">1660</td>
              <td align="center">12508</td>
              <td align="left">phosphoglycerate kinase</td>
            </tr>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="1E79">1E79</ext-link>
              </td>
              <td align="center">3315</td>
              <td align="center">25248</td>
              <td align="left">F1 ATPase inhibited by DCCD</td>
            </tr>
            <tr>
              <td align="center">
                <ext-link ext-link-type="pdb" xlink:href="1AON">1AON</ext-link>
              </td>
              <td align="center">8015</td>
              <td align="center">59674</td>
              <td align="left">GroEL-GroES-(ADP)7 chaperonin complex</td>
            </tr>
          </tbody>
        </table>
        <table-wrap-foot>
          <p>The performance tests graphed in Figures 10 to 12 were made on a Macintosh 2.16 GHz Intel Core 2 Duo with 2 GB of RAM and an ATI Radeon X1600 graphics card with 256 MB VRAM. To prevent an out of memory error for the largest protein tested, the chaperonin complex, the maximum size of the Java heap was increased to 512 MB by adding "-Xmx512m" as an argument to the java command in the run.sh script provided with the ProteinShader distribution.</p>
        </table-wrap-foot>
      </table-wrap>
      <fig position="float" id="F11">
        <label>Figure 11</label>
        <caption>
          <p><bold>Performance costs of texture mapping, edge line generation, and real-time halftoning</bold>. An α-helix is shown after using the Decorations subpanel of the ProteinShader GUI to select Plain (A), Wireframe (B), Text Labels (C), Patterns (D), or Halftoning (E). (F) Several proteins were used to compare frames per second during an animation for the type of images shown in (A) through (E). The items in the graph legend are presented in the same order as (A) through (E). See Table 3 for the sizes of the test proteins and notes on the computer used for performance testing.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-11"/>
      </fig>
      <p>For Figure <xref ref-type="fig" rid="F11">11</xref>, the Decorations subpanel of the ProteinShader GUI was used to select shaders for special effects while rendering a tubes style display. For each test protein in Figure <xref ref-type="fig" rid="F11">11F</xref>, if the Phong lighting (Plain) frames per second is considered to be 100%, switching to the wireframe shaders or adding patterns by texture mapping typically results in a fairly minor reduction of less than 20%, while more complex calculations such as adding text labels or halftoning result in reductions of almost 50%. Given the quality of the images obtained, the performance costs for using custom vertex and fragment shaders seems reasonable. A caveat to these results, however, is that a fairly recent good quality graphics card is required.</p>
      <p>The proteins tested in Figure <xref ref-type="fig" rid="F11">11F</xref> range from 175 amino acids to about 8,000 amino acids (see Table <xref ref-type="table" rid="T3">3</xref>), and each approximate doubling in protein size results in a roughly 2-fold reduction in frames per second. Overall, the 46-fold increase in number of residues from the smallest to the largest test protein (<ext-link ext-link-type="pdb" xlink:href="1AQB">1AQB</ext-link> to <ext-link ext-link-type="pdb" xlink:href="1AON">1AON</ext-link>) results in very close to a 46-fold decrease in frames per second (from 153 to 3.2 frames per second for Phong lighting (Plain) and from 86.7 to 1.9 frames per second for Halftoning). These results indicate that, at least within this size range, rendering times scale in a nearly linear manner for tubes style displays with custom shaders.</p>
    </sec>
    <sec>
      <title>Antialiasing</title>
      <p>When pen-and-ink style ribbons and tubes are drawn on a white background, the darkened edges often appear to be quite jagged, as shown in Figure <xref ref-type="fig" rid="F12">12A</xref>. This phenomena, which is referred to as aliasing [<xref ref-type="bibr" rid="B51">51</xref>,<xref ref-type="bibr" rid="B52">52</xref>], occurs because a pixel is determined to be all the way in or out of an object based on whether the center of the pixel falls within a boundary line.</p>
      <fig position="float" id="F12">
        <label>Figure 12</label>
        <caption>
          <p><bold>Antialiasing object edges</bold>. (A) The dark edges of a small portion of the retinol-binding protein from Figure 1 display a marked alias (jagged edge) effect if nothing special is done to smooth out the edges. (B) Same as A, except that the dark edges have been partially smoothed by using the Antialiasing panel of the ProteinShader GUI to select an option to antialias the black edges of halftoning images by using translucent black silhouettes to add gray pixels to the edges (see Antialiasing section of text). (C) Same as (B), except that the Antialiasing panel has been used to select an option to perform additional antialiasing by jittering the entire scene 3 times and blending the images. Each jittered image is offset by a fraction of a pixel from the original image. (D) Same as (C), except that the scene is jittered 6 times. (E) The performance costs for antialiasing are measured by comparing frames per second during a constant rotation. See Table 3 for the sizes of the test proteins and notes on the computer used for performance testing. The items in the graph legend are presented in the same order as (A) through (D). The images were generated on a monitor with a 72 pixels per inch resolution, where the alias effect in (A) is quite obvious. Because of the dramatic slowdown in rendering time, antialiasing is primarily intended for saving static images, not for animations.</p>
        </caption>
        <graphic xlink:href="1472-6807-9-19-12"/>
      </fig>
      <p>The ProteinShader control panel has an Antialiasing subpanel, where the option to antialias black edges of halftoning images can be selected. By adding gray pixels outside object boundaries, this option partially smooths out the jagged edges, as shown in Figure <xref ref-type="fig" rid="F12">12B</xref>. To accomplish this effect, a translucent black silhouette of each tube or ribbon segment is rendered four times with a slight offset (a half pixel up, down, left, or right) before rendering the segment with halftoning.</p>
      <p>The Antialiasing subpanel also provides an option for smoothing any image by rendering the entire scene several times with jitter and blending the images. The scene can be jittered from 2 to 16 times using jitter values taken from the OpenGL Programming Guide [<xref ref-type="bibr" rid="B53">53</xref>], and this antialiasing can be combined with the silhouette-based antialiasing to produce nicely smoothed dark edges, as shown in Figures <xref ref-type="fig" rid="F12">12C</xref> and <xref ref-type="fig" rid="F12">12D</xref>.</p>
      <p>Antialiasing dramatically slows rendering during an animation, as shown in Figure <xref ref-type="fig" rid="F12">12E</xref>. The silhouette-based antialiasing slows rendering by about 3-fold, while jittering the entire scene n times will slow rendering down about n-fold. Because of the performance costs, antialiasing is intended mainly for saving static images as PNG or JPEG files. Antialiasing is used on all of the images in previous figures, except for Figures <xref ref-type="fig" rid="F10">10</xref> and <xref ref-type="fig" rid="F11">11</xref>.</p>
    </sec>
  </sec>
  <sec>
    <title>Conclusion</title>
    <p>The ProteinShader program is a platform-independent Java-OpenGL molecular visualization tool that exploits recent advances in programmable graphics cards. The primary accomplishment of this free, open-source code program is its ability to render a protein as a cartoon-style drawing that approximates what an artist might create by hand using pen and ink (see Figures <xref ref-type="fig" rid="F1">1</xref>, <xref ref-type="fig" rid="F2">2</xref>, <xref ref-type="fig" rid="F8">8</xref>, and <xref ref-type="fig" rid="F9">9</xref>). The artistic effects employed by ProteinShader rely heavily on texture mapping, where two-dimensional images are systematically mapped onto the curved surfaces of three-dimensional ribbons and tubes. To minimize distortions or irregularities in the images used as textures, a hybrid Hermite-SLERP algorithm was developed for generating smooth, gradually rotating tubes and ribbons.</p>
    <p>The custom texture mapping and lighting calculations needed for rendering pen-and-ink style images are implemented using vertex and fragment shaders written in the OpenGL Shading Language [<xref ref-type="bibr" rid="B12">12</xref>,<xref ref-type="bibr" rid="B13">13</xref>], which is supported on most new graphics cards for ordinary desktop and laptop computers. Shaders are also used for mapping text labels and decorative textures onto the surfaces of ribbons and tubes shown in color.</p>
    <p>To create images suitable for publication, the program has antialiasing options that can nicely smooth out the jagged (pixelated) edges that are often seen in computer-generated images. However, antialiasing dramatically slows rendering time, so it may not be suitable for animations, unless a fairly high-end graphics card is used. The performance costs for using custom shaders rather than OpenGL's built-in lighting equations appears to be fairly minor on recent graphics cards.</p>
    <p>As an aid to future development, a Frenet frames style display allows the user to visualize the mathematics that underlies the tubes and ribbons. Key areas for future development are representations of DNA, which is not currently supported, and selection by clicking on parts of an image. In the present version of the ProteinShader program, all manipulations are done through user-friendly menus and control panels.</p>
  </sec>
  <sec>
    <title>Availability and requirements</title>
    <p>• Project name: ProteinShader</p>
    <p>• Project home page: <ext-link ext-link-type="uri" xlink:href="http://proteinshader.sourceforge.net"/></p>
    <p>• Operating system: Platform independent (tested on Linux, Macintosh OS X, and Windows XP)</p>
    <p>• Programming languages: Java and OpenGL Shading Language</p>
    <p>• Other requirements: Java 1.5 and a graphics card supporting OpenGL 2.0 or higher.</p>
    <p>• License: GNU General Public License</p>
    <p>• Restrictions to use by non-academics: None</p>
  </sec>
  <sec>
    <title>Authors' contributions</title>
    <p>JRW wrote the program and authored the manuscript. All authors read and approved the final manuscript.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material content-type="local-data" id="S1">
      <caption>
        <title>Additional file 1</title>
        <p><bold>ProteinShader program without source code.</bold> This compressed file contains the complete ProteinShader program including associated libraries, but no source code. A README.txt file gives an overview of the ProteinShader distribution, and the index.html file in the help subdirectory has directions on getting started with the program as well as a set of tutorials.</p>
      </caption>
      <media xlink:href="1472-6807-9-19-S1.zip" mimetype="application" mime-subtype="x-zip-compressed"/>
    </supplementary-material>
    <supplementary-material content-type="local-data" id="S2">
      <caption>
        <title>Additional file 2</title>
        <p><bold>ProteinShader program with source code.</bold> This compressed file contains everything in the binary distribution plus the Java source code and a build.xml file for compiling with Ant.</p>
      </caption>
      <media xlink:href="1472-6807-9-19-S2.gz" mimetype="application" mime-subtype="x-zip-compressed">
        <caption>
          <p>Click here for file</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack>
    <sec>
      <title>Acknowledgements</title>
      <p>The ProteinShader program was originally written as a thesis project for the ALM in Information Technology program at the Harvard University Extension School, and I thank my thesis director, Hanspeter Pfister, who provided critical feedback on the project and suggested the use of the real-time halftoning technique developed by Freudenberg, Masuch, and Strothotte [<xref ref-type="bibr" rid="B48">48</xref>,<xref ref-type="bibr" rid="B49">49</xref>]. I am also grateful to Brad Fish for making his glFont source code freely available and to Jerome Jouvie and Ron Sullivan for making their TextureLoader source code freely available. The license agreements and terms of use for the glFont and TextureLoader libraries are in the licenses subdirectory of the ProteinShader distribution.</p>
    </sec>
  </ack>
  <ref-list>
    <ref id="B1">
      <citation citation-type="other">
        <article-title>RSCB Protein Data Bank</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.rcsb.org"/>
      </citation>
    </ref>
    <ref id="B2">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Berman</surname>
            <given-names>HM</given-names>
          </name>
          <name>
            <surname>Westbrook</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Feng</surname>
            <given-names>Z</given-names>
          </name>
          <name>
            <surname>Gilliland</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Bhat</surname>
            <given-names>TN</given-names>
          </name>
          <name>
            <surname>Weissig</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Shindyalov</surname>
            <given-names>IN</given-names>
          </name>
          <name>
            <surname>Bourne</surname>
            <given-names>PE</given-names>
          </name>
        </person-group>
        <article-title>The Protein Data Bank</article-title>
        <source>Nucleic Acids Res</source>
        <year>2000</year>
        <volume>28</volume>
        <fpage>235</fpage>
        <lpage>242</lpage>
        <pub-id pub-id-type="pmid">10592235</pub-id>
      </citation>
    </ref>
    <ref id="B3">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Richardson</surname>
            <given-names>JS</given-names>
          </name>
        </person-group>
        <article-title>The anatomy and taxonomy of protein structure</article-title>
        <source>Adv Protein Chem</source>
        <year>1981</year>
        <volume>34</volume>
        <fpage>167</fpage>
        <lpage>339</lpage>
        <pub-id pub-id-type="pmid">7020376</pub-id>
      </citation>
    </ref>
    <ref id="B4">
      <citation citation-type="other">
        <article-title>World Index of Biomolecular Visualization Resources</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://molvis.sdsc.edu/visres/molvisfw/titles.jsp"/>
      </citation>
    </ref>
    <ref id="B5">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Sayle</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Milner-White</surname>
            <given-names>EJ</given-names>
          </name>
        </person-group>
        <article-title>RASMOL: biomolecular graphics for all</article-title>
        <source>Trends Biochem Sci</source>
        <year>1995</year>
        <volume>20</volume>
        <fpage>374</fpage>
        <pub-id pub-id-type="pmid">7482707</pub-id>
      </citation>
    </ref>
    <ref id="B6">
      <citation citation-type="other">
        <article-title>Home Page for RasMol and OpenRasMol</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.openrasmol.org"/>
      </citation>
    </ref>
    <ref id="B7">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bernstein</surname>
            <given-names>HJ</given-names>
          </name>
        </person-group>
        <article-title>Recent changes to RasMol, recombining the variants</article-title>
        <source>Trends Biochem Sci</source>
        <year>2000</year>
        <volume>25</volume>
        <fpage>453</fpage>
        <lpage>455</lpage>
        <pub-id pub-id-type="pmid">10973060</pub-id>
      </citation>
    </ref>
    <ref id="B8">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Martz</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Protein Explorer: easy yet powerful macromolecular visualization</article-title>
        <source>Trends Biochem Sci</source>
        <year>2002</year>
        <volume>27</volume>
        <fpage>107</fpage>
        <lpage>109</lpage>
        <pub-id pub-id-type="pmid">11852249</pub-id>
      </citation>
    </ref>
    <ref id="B9">
      <citation citation-type="other">
        <article-title>KiNG Display Software</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://kinemage.biochem.duke.edu/software/king.php"/>
      </citation>
    </ref>
    <ref id="B10">
      <citation citation-type="other">
        <article-title>WebMol Java PDB Viewer</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.cmpharm.ucsf.edu/cgi-bin/webmol.pl"/>
      </citation>
    </ref>
    <ref id="B11">
      <citation citation-type="other">
        <article-title>Jmol: an open-source Java viewer for chemical structures in 3D</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.jmol.org"/>
      </citation>
    </ref>
    <ref id="B12">
      <citation citation-type="other">
        <article-title>OpenGL Shading Language Specification</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.opengl.org/documentation/glsl"/>
      </citation>
    </ref>
    <ref id="B13">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Shreiner</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Woo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Neider</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Davis</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>OpenGL 2.0 and the OpenGL Shading Language</article-title>
        <source>OpenGL Programming Guide</source>
        <year>2005</year>
        <edition>Fifth</edition>
        <publisher-name>Upper Saddle River, NJ: Addison-Wesley</publisher-name>
        <fpage>623</fpage>
        <lpage>664</lpage>
      </citation>
    </ref>
    <ref id="B14">
      <citation citation-type="other">
        <article-title>Visual Molecular Dynamics</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.ks.uiuc.edu/Research/vmd"/>
      </citation>
    </ref>
    <ref id="B15">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Humphrey</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Dalke</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Schulten</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>VMD: visual molecular dynamics</article-title>
        <source>J Mol Graph</source>
        <year>1996</year>
        <volume>14</volume>
        <fpage>33</fpage>
        <lpage>38</lpage>
        <pub-id pub-id-type="pmid">8744570</pub-id>
      </citation>
    </ref>
    <ref id="B16">
      <citation citation-type="other">
        <article-title>QuteMol</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://qutemol.sourceforge.net"/>
      </citation>
    </ref>
    <ref id="B17">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Tarini</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Cignoni</surname>
            <given-names>P</given-names>
          </name>
          <name>
            <surname>Montani</surname>
            <given-names>C</given-names>
          </name>
        </person-group>
        <article-title>Ambient occlusion and edge cueing for enhancing real time molecular visualization</article-title>
        <source>IEEE Trans Vis Comput Graph</source>
        <year>2006</year>
        <volume>12</volume>
        <fpage>1237</fpage>
        <lpage>1244</lpage>
        <pub-id pub-id-type="pmid">17080857</pub-id>
      </citation>
    </ref>
    <ref id="B18">
      <citation citation-type="other">
        <article-title>The Swing Tutorial</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://java.sun.com/docs/books/tutorial/uiswing/index.html"/>
      </citation>
    </ref>
    <ref id="B19">
      <citation citation-type="other">
        <article-title>Javadoc Tool Home Page</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://java.sun.com/j2se/javadoc/index.jsp"/>
      </citation>
    </ref>
    <ref id="B20">
      <citation citation-type="other">
        <article-title>ProteinShader Project Summary Page</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://sourceforge.net/projects/proteinshader"/>
      </citation>
    </ref>
    <ref id="B21">
      <citation citation-type="other">
        <article-title>OpenGL</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.opengl.org"/>
      </citation>
    </ref>
    <ref id="B22">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Shreiner</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Woo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Neider</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Davis</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <source>OpenGL Programming Guide</source>
        <year>2005</year>
        <edition>Fifth</edition>
        <publisher-name>Upper Saddle River, NJ: Addison-Wesley</publisher-name>
      </citation>
    </ref>
    <ref id="B23">
      <citation citation-type="other">
        <article-title>The JOGL API Project</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://jogl.dev.java.net"/>
      </citation>
    </ref>
    <ref id="B24">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Davis</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <source>Learning Java Bindings for OpenGL (JOGL)</source>
        <year>2004</year>
        <publisher-name>Bloomington, IN: AuthorHouse</publisher-name>
      </citation>
    </ref>
    <ref id="B25">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Rost</surname>
            <given-names>RJ</given-names>
          </name>
        </person-group>
        <source>OpenGL Shading Language</source>
        <year>2006</year>
        <publisher-name>Upper Saddle River, NJ: Addison-Wesley</publisher-name>
      </citation>
    </ref>
    <ref id="B26">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Shreiner</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Woo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Neider</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Davis</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Display lists</article-title>
        <source>OpenGL Programming Guide</source>
        <year>2005</year>
        <edition>Fifth</edition>
        <publisher-name>Upper Saddle River, NJ: Addison-Wesley</publisher-name>
        <fpage>277</fpage>
        <lpage>300</lpage>
      </citation>
    </ref>
    <ref id="B27">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zanotti</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Panzalorto</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Marcato</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Malpeli</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Folli</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berni</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>Structure of pig plasma retinol-binding protein at 1.65 A resolution</article-title>
        <source>Acta Crystallogr D Biol Crystallogr</source>
        <year>1998</year>
        <volume>54</volume>
        <fpage>1049</fpage>
        <lpage>1052</lpage>
        <pub-id pub-id-type="pmid">9757135</pub-id>
      </citation>
    </ref>
    <ref id="B28">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Brandon</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Tooze</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Membrane proteins</article-title>
        <source>Introduction to Protein Structure</source>
        <year>1998</year>
        <edition>Second</edition>
        <publisher-name>New York: Garland Publishing</publisher-name>
        <fpage>223</fpage>
        <lpage>250</lpage>
      </citation>
    </ref>
    <ref id="B29">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Weiss</surname>
            <given-names>MS</given-names>
          </name>
          <name>
            <surname>Schulz</surname>
            <given-names>GE</given-names>
          </name>
        </person-group>
        <article-title>Porin conformation in the absence of calcium. Refined structure at 2.5 A resolution</article-title>
        <source>J Mol Biol</source>
        <year>1993</year>
        <volume>231</volume>
        <fpage>817</fpage>
        <lpage>824</lpage>
        <pub-id pub-id-type="pmid">7685826</pub-id>
      </citation>
    </ref>
    <ref id="B30">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kobe</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Deisenhofer</surname>
            <given-names>J</given-names>
          </name>
        </person-group>
        <article-title>Mechanism of ribonuclease inhibition by ribonuclease inhibitor protein based on the crystal structure of its complex with ribonuclease A</article-title>
        <source>J Mol Biol</source>
        <year>1996</year>
        <volume>264</volume>
        <fpage>1028</fpage>
        <lpage>1043</lpage>
        <pub-id pub-id-type="pmid">9000628</pub-id>
      </citation>
    </ref>
    <ref id="B31">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Imada</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Inagaki</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Matsunami</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Kawaguchi</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Tanaka</surname>
            <given-names>H</given-names>
          </name>
          <name>
            <surname>Tanaka</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Namba</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Structure of 3-isopropylmalate dehydrogenase in complex with 3-isopropylmalate at 2.0 A resolution: the role of Glu88 in the unique substrate-recognition mechanism</article-title>
        <source>Structure</source>
        <year>1998</year>
        <volume>6</volume>
        <fpage>971</fpage>
        <lpage>982</lpage>
        <pub-id pub-id-type="pmid">9739088</pub-id>
      </citation>
    </ref>
    <ref id="B32">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Doyle</surname>
            <given-names>DA</given-names>
          </name>
          <name>
            <surname>Morais Cabral</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Pfuetzner</surname>
            <given-names>RA</given-names>
          </name>
          <name>
            <surname>Kuo</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Gulbis</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Cohen</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Chait</surname>
            <given-names>BT</given-names>
          </name>
          <name>
            <surname>MacKinnon</surname>
            <given-names>R</given-names>
          </name>
        </person-group>
        <article-title>The structure of the potassium channel: molecular basis of K+ conduction and selectivity</article-title>
        <source>Science</source>
        <year>1998</year>
        <volume>280</volume>
        <fpage>69</fpage>
        <lpage>77</lpage>
        <pub-id pub-id-type="pmid">9525859</pub-id>
      </citation>
    </ref>
    <ref id="B33">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hill</surname>
            <given-names>FS</given-names>
          </name>
        </person-group>
        <article-title>Extruded shapes</article-title>
        <source>Computer Graphics using OpenGL</source>
        <year>2000</year>
        <edition>Second</edition>
        <publisher-name>Upper Saddle River, NJ: Prentice Hall</publisher-name>
        <fpage>310</fpage>
        <lpage>321</lpage>
      </citation>
    </ref>
    <ref id="B34">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hill</surname>
            <given-names>FS</given-names>
          </name>
        </person-group>
        <article-title>Hermite interpolation</article-title>
        <source>Computer Graphics using OpenGL</source>
        <year>2000</year>
        <edition>Second</edition>
        <publisher-name>Upper Saddle River, NJ: Prentice Hall</publisher-name>
        <fpage>644</fpage>
        <lpage>645</lpage>
      </citation>
    </ref>
    <ref id="B35">
      <citation citation-type="other">
        <article-title>Gamasutra: Rotating Objects Using Quaternions</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.gamasutra.com/features/19980703/quaternions_01.htm"/>
      </citation>
    </ref>
    <ref id="B36">
      <citation citation-type="other">
        <article-title>Sacred Software: Quaternions</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.sacredsoftware.net/tutorials/Quaternions/Quaternions.xhtml"/>
      </citation>
    </ref>
    <ref id="B37">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Shoemake</surname>
            <given-names>K</given-names>
          </name>
        </person-group>
        <article-title>Animating rotation with quaternion curves</article-title>
        <source>Comput Graph (ACM)</source>
        <year>1985</year>
        <volume>19</volume>
        <fpage>245</fpage>
        <lpage>254</lpage>
      </citation>
    </ref>
    <ref id="B38">
      <citation citation-type="other">
        <article-title>Maths: Conversion Matrix to Quaternion</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm"/>
      </citation>
    </ref>
    <ref id="B39">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Junius</surname>
            <given-names>FK</given-names>
          </name>
          <name>
            <surname>O'Donoghue</surname>
            <given-names>SI</given-names>
          </name>
          <name>
            <surname>Nilges</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Weiss</surname>
            <given-names>AS</given-names>
          </name>
          <name>
            <surname>King</surname>
            <given-names>GF</given-names>
          </name>
        </person-group>
        <article-title>High resolution NMR solution structure of the leucine zipper domain of the c-Jun homodimer</article-title>
        <source>J Biol Chem</source>
        <year>1996</year>
        <volume>271</volume>
        <fpage>13663</fpage>
        <lpage>13667</lpage>
        <pub-id pub-id-type="pmid">8662824</pub-id>
      </citation>
    </ref>
    <ref id="B40">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hill</surname>
            <given-names>FS</given-names>
          </name>
        </person-group>
        <article-title>Phong shading</article-title>
        <source>Computer Graphics using OpenGL</source>
        <year>2000</year>
        <edition>Second</edition>
        <publisher-name>Upper Saddle River, NJ: Prentice Hall</publisher-name>
        <fpage>435</fpage>
        <lpage>436</lpage>
      </citation>
    </ref>
    <ref id="B41">
      <citation citation-type="other">
        <article-title>OpenGL Directional Lights II</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.lighthouse3d.com/opengl/glsl/index.php?ogldir2"/>
      </citation>
    </ref>
    <ref id="B42">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hill</surname>
            <given-names>FS</given-names>
          </name>
        </person-group>
        <article-title>Adding textures to faces</article-title>
        <source>Computer Graphics using OpenGL</source>
        <year>2000</year>
        <edition>Second</edition>
        <publisher-name>Upper Saddle River, NJ: Prentice Hall</publisher-name>
        <fpage>439</fpage>
        <lpage>465</lpage>
      </citation>
    </ref>
    <ref id="B43">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Shreiner</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Woo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Neider</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Davis</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Assigning texture coordinates</article-title>
        <source>OpenGL Programming Guide</source>
        <year>2005</year>
        <edition>Fifth</edition>
        <publisher-name>Upper Saddle River, NJ: Addison-Wesley</publisher-name>
        <fpage>420</fpage>
        <lpage>421</lpage>
      </citation>
    </ref>
    <ref id="B44">
      <citation citation-type="other">
        <article-title>PNG: Portable Network Graphics</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.libpng.org/pub/png"/>
      </citation>
    </ref>
    <ref id="B45">
      <citation citation-type="other">
        <article-title>JPEG: Joint Photographic Experts Group</article-title>
        <ext-link ext-link-type="uri" xlink:href="http://www.jpeg.org"/>
      </citation>
    </ref>
    <ref id="B46">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Baerentzen</surname>
            <given-names>JA</given-names>
          </name>
          <name>
            <surname>Nielsen</surname>
            <given-names>SL</given-names>
          </name>
          <name>
            <surname>Gjael</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Larsen</surname>
            <given-names>BD</given-names>
          </name>
          <name>
            <surname>Christensen</surname>
            <given-names>NJ</given-names>
          </name>
        </person-group>
        <article-title>Single-pass wireframe rendering</article-title>
        <source>ACM SIGGRAPH Conference Sketches: July 2006; Boston</source>
        <year>2006</year>
        <publisher-name>ACM Press, New York</publisher-name>
      </citation>
    </ref>
    <ref id="B47">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chantalat</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>ND</given-names>
          </name>
          <name>
            <surname>Korber</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Navaza</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Pavlovsky</surname>
            <given-names>AG</given-names>
          </name>
        </person-group>
        <article-title>The crystal-structure of wild-type growth-hormone at 2.5 angstrom resolution</article-title>
        <source>Protein Pept Lett</source>
        <year>1995</year>
        <volume>2</volume>
        <fpage>333</fpage>
        <lpage>340</lpage>
      </citation>
    </ref>
    <ref id="B48">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Freudenberg</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Masuch</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Strothotte</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Real-time halftoning: a primitive for non-photorealistic shading</article-title>
        <source>Proceedings of the 13th Eurographics Workshop on Rendering: 26–28 June 2002; Pisa, Italy</source>
        <year>2002</year>
        <publisher-name>Springer-Verlag Wien, New York</publisher-name>
        <fpage>227</fpage>
        <lpage>232</lpage>
      </citation>
    </ref>
    <ref id="B49">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Freudenberg</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Masuch</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Strothotte</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <person-group person-group-type="editor">
          <name>
            <surname>Kirmse A</surname>
          </name>
        </person-group>
        <article-title>Real-time halftoning: fast and simple stylized shading</article-title>
        <source>Game Programming Gems 4</source>
        <year>2004</year>
        <publisher-name>Charles River Media</publisher-name>
        <fpage>443</fpage>
        <lpage>450</lpage>
        <ext-link ext-link-type="uri" xlink:href="http://wwwisg.cs.uni-magdeburg.de/~stefans/npr/entry-Freudenberg-2004-RTH.html"/>
      </citation>
    </ref>
    <ref id="B50">
      <citation citation-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Cunningham</surname>
            <given-names>BC</given-names>
          </name>
          <name>
            <surname>Wells</surname>
            <given-names>JA</given-names>
          </name>
        </person-group>
        <article-title>High-resolution epitope mapping of hGH-receptor interactions by alanine-scanning mutagenesis</article-title>
        <source>Science</source>
        <year>1989</year>
        <volume>244</volume>
        <fpage>1081</fpage>
        <lpage>1085</lpage>
        <pub-id pub-id-type="pmid">2471267</pub-id>
      </citation>
    </ref>
    <ref id="B51">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Hill</surname>
            <given-names>FS</given-names>
          </name>
        </person-group>
        <article-title>Aliasing; antialiasing techniques</article-title>
        <source>Computer Graphics using OpenGL</source>
        <year>2000</year>
        <edition>Second</edition>
        <publisher-name>Upper Saddle River, NJ: Prentice Hall</publisher-name>
        <fpage>577</fpage>
        <lpage>586</lpage>
      </citation>
    </ref>
    <ref id="B52">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Shreiner</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Woo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Neider</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Davis</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>Antialiasing</article-title>
        <source>OpenGL Programming Guide</source>
        <year>2005</year>
        <edition>Fifth</edition>
        <publisher-name>Upper Saddle River, NJ: Addison-Wesley</publisher-name>
        <fpage>247</fpage>
        <lpage>260</lpage>
      </citation>
    </ref>
    <ref id="B53">
      <citation citation-type="book">
        <person-group person-group-type="author">
          <name>
            <surname>Shreiner</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Woo</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Neider</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Davis</surname>
            <given-names>T</given-names>
          </name>
        </person-group>
        <article-title>The accumulation buffer</article-title>
        <source>OpenGL Programming Guide</source>
        <year>2005</year>
        <edition>Fifth</edition>
        <publisher-name>Upper Saddle River, NJ: Addison-Wesley</publisher-name>
        <fpage>482</fpage>
        <lpage>495</lpage>
      </citation>
    </ref>
  </ref-list>
</back>
