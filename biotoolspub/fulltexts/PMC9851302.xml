<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Brief Bioinform</journal-id>
    <journal-id journal-id-type="iso-abbrev">Brief Bioinform</journal-id>
    <journal-id journal-id-type="publisher-id">bib</journal-id>
    <journal-title-group>
      <journal-title>Briefings in Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1467-5463</issn>
    <issn pub-type="epub">1477-4054</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9851302</article-id>
    <article-id pub-id-type="pmid">36434788</article-id>
    <article-id pub-id-type="doi">10.1093/bib/bbac491</article-id>
    <article-id pub-id-type="publisher-id">bbac491</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Problem Solving Protocol</subject>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>Ultraliser: a framework for creating multiscale, high-fidelity and geometrically realistic 3D models for <italic toggle="yes">in silico</italic> neuroscience</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-7549-9657</contrib-id>
        <name>
          <surname>Abdellah</surname>
          <given-names>Marwan</given-names>
        </name>
        <!--marwan.abdellah@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
        <xref rid="cor1" ref-type="corresp"/>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Cantero</surname>
          <given-names>Juan José García</given-names>
        </name>
        <!--juanjose.garcia@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Guerrero</surname>
          <given-names>Nadir Román</given-names>
        </name>
        <!--nadir.romanguerrero@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Foni</surname>
          <given-names>Alessandro</given-names>
        </name>
        <!--alessandro.foni@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Coggan</surname>
          <given-names>Jay S</given-names>
        </name>
        <!--jay.coggan@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Calì</surname>
          <given-names>Corrado</given-names>
        </name>
        <!--corrado.cali@unito.it-->
        <aff><institution>Biological and Environmental Sciences and Engineering Division King Abdullah University of Science and Technology (KAUST) Thuwal</institution>, <country country="SA">Saudi Arabia</country></aff>
        <aff><institution>Neuroscience Institute Cavalieri Ottolenghi (NICO) Orbassano</institution>, <country country="IT">Italy</country></aff>
        <aff><institution>Department of Neuroscience, University of Torino Torino</institution>, <country country="IT">Italy</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Agus</surname>
          <given-names>Marco</given-names>
        </name>
        <!--magus@hbku.edu.qa-->
        <aff><institution>Visual Computing Center King Abdullah University of Science and Technology (KAUST) Thuwal</institution>, <country country="SA">Saudi Arabia</country></aff>
        <aff><institution>College of Science and Engineering Hamad Bin Khalifa University Doha</institution>, <country country="QA">Qatar</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Zisis</surname>
          <given-names>Eleftherios</given-names>
        </name>
        <!--eleftherios.zisis@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Keller</surname>
          <given-names>Daniel</given-names>
        </name>
        <!--daniel.keller@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Hadwiger</surname>
          <given-names>Markus</given-names>
        </name>
        <!--markus.hadwiger@kaust.edu.sa-->
        <aff><institution>Visual Computing Center King Abdullah University of Science and Technology (KAUST) Thuwal</institution>, <country country="SA">Saudi Arabia</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Magistretti</surname>
          <given-names>Pierre J</given-names>
        </name>
        <!--pierre.magistretti@epfl.ch-->
        <aff><institution>Biological and Environmental Sciences and Engineering Division King Abdullah University of Science and Technology (KAUST) Thuwal</institution>, <country country="SA">Saudi Arabia</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Markram</surname>
          <given-names>Henry</given-names>
        </name>
        <!--henry.markram@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Schürmann</surname>
          <given-names>Felix</given-names>
        </name>
        <!--felix.schuermann@epfl.ch-->
        <aff><institution>Blue Brain Project (BBP) École Polytecnique Fédérale de Lausanne (EPFL) Geneva</institution>, <country country="CH">Switzerland</country></aff>
        <xref rid="cor1" ref-type="corresp"/>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="cor1">Corresponding authors. Marwan Abdellah, Blue Brain Project (BBP), École Polytechnique Fédérale de Lausanne (EPFL), Geneva, Switzerland. E-mail: <email>marwan.abdellah@epfl.ch</email>; Felix Schürmann, Blue Brain Project (BBP), École Polytechnique Fédérale de Lausanne (EPFL), Geneva, Switzerland. E-mail: <email>felix.schuermann@epfl.ch</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <month>1</month>
      <year>2023</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2022-11-26">
      <day>26</day>
      <month>11</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>26</day>
      <month>11</month>
      <year>2022</year>
    </pub-date>
    <volume>24</volume>
    <issue>1</issue>
    <elocation-id>bbac491</elocation-id>
    <history>
      <date date-type="received">
        <day>2</day>
        <month>8</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>27</day>
        <month>9</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>14</day>
        <month>10</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="bbac491.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="abs1">
        <title> </title>
        <p>Ultraliser is a neuroscience-specific software framework capable of creating accurate and biologically realistic 3D models of complex neuroscientific structures at intracellular (e.g. mitochondria and endoplasmic reticula), cellular (e.g. neurons and glia) and even multicellular scales of resolution (e.g. cerebral vasculature and minicolumns). Resulting models are exported as triangulated surface meshes and annotated volumes for multiple applications in <italic toggle="yes">in silico</italic> neuroscience, allowing scalable supercomputer simulations that can unravel intricate cellular structure–function relationships. Ultraliser implements a high-performance and unconditionally robust voxelization engine adapted to create optimized watertight surface meshes and annotated voxel grids from arbitrary non-watertight triangular soups, digitized morphological skeletons or binary volumetric masks. The framework represents a major leap forward in simulation-based neuroscience, making it possible to employ high-resolution 3D structural models for quantification of surface areas and volumes, which are of the utmost importance for cellular and system simulations. The power of Ultraliser is demonstrated with several use cases in which hundreds of models are created for potential application in diverse types of simulations. Ultraliser is publicly released under the GNU GPL3 license on GitHub (<ext-link xlink:href="https://github.com/BlueBrain/Ultraliser" ext-link-type="uri">BlueBrain/Ultraliser</ext-link>).</p>
      </sec>
      <sec id="abs1aa">
        <title>Significance</title>
        <p>There is crystal clear evidence on the impact of cell shape on its signaling mechanisms. Structural models can therefore be insightful to realize the function; the more realistic the structure can be, the further we get insights into the function. Creating realistic structural models from existing ones is challenging, particularly when needed for detailed subcellular simulations. We present Ultraliser, a neuroscience-dedicated framework capable of building these structural models with realistic and detailed cellular geometries that can be used for simulations.</p>
      </sec>
    </abstract>
    <kwd-group>
      <kwd>ultrastructure</kwd>
      <kwd>mesh reconstruction</kwd>
      <kwd> voxelization</kwd>
      <kwd>watertight</kwd>
      <kwd>in silico</kwd>
      <kwd>molecular simulations</kwd>
      <kwd>reaction–diffusion simulations</kwd>
      <kwd>optical imaging simulations</kwd>
      <kwd>Ultraliser</kwd>
    </kwd-group>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>King Abdullah University of Science and Technology</institution>
            <institution-id institution-id-type="DOI">10.13039/501100004052</institution-id>
          </institution-wrap>
        </funding-source>
        <award-id>OSR-2017-CRG6-3438</award-id>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Swiss Federal Institute of Technology Lausanne</institution>
            <institution-id institution-id-type="DOI">10.13039/501100001703</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="20"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec id="sec3">
    <title>Introduction</title>
    <p>It has been more than a 100 years since Santiago Ramón y Cajal (1854–1934) commenced his pioneering quest to study the brain by elucidating its anatomical structures and establishing the neuron doctrine [<xref rid="ref1" ref-type="bibr">1</xref>]. Nevertheless, and so far, our knowledge is still incomplete, particularly at cellular and synaptic levels of detail [<xref rid="ref2" ref-type="bibr">2</xref>]. Even with the broad spectrum of research that followed Cajal’s leading efforts, taking into account the vast amount of resulting data, it has been proven that conventional wet lab experiments alone are insufficient to unravel the underlying function of the brain [<xref rid="ref3" ref-type="bibr">3</xref>]. The generation of massive amounts of experimental data in addition to the recent quantum leap in computing technologies have led to the renaissance of a complementary approach: simulation neuroscience [<xref rid="ref4" ref-type="bibr">4</xref>]. Mathematical modeling, computer simulations and terabytes of structural data resulting from a myriad diversity of experiments are being successfully consolidated—with this approach we can test our hypotheses and predict the quantitative behavior of complex biological processes [<xref rid="ref5" ref-type="bibr">5</xref>].</p>
    <p>Data-driven models integrated with systematic computational methods can dramatically increase efficiency, efficacy and reliability of simulations [<xref rid="ref6" ref-type="bibr">6</xref>], particularly when our experimental knowledge is fragmented [<xref rid="ref5" ref-type="bibr">5</xref>]. An important question is whether we can reuse existing structural data to synthesize detailed, multiscale and biologically plausible three-dimensional (3D) models that can be integrated into simulation contexts to gain insights into the cellular function. The interdependency of structure and function produces a kind of metaplasticity [<xref rid="ref7" ref-type="bibr">7</xref>] that requires performing simulations within geometrically realistic subdomains at ultrastructural resolutions in which molecular reactions can be contained [<xref rid="ref8" ref-type="bibr">8</xref>].</p>
    <p>Structural neuroscientific datasets are either acquired from a wide spectrum of imaging modalities, such as imaging scanners and microscopes [<xref rid="ref9" ref-type="bibr">9–11</xref>] or digitally synthesized in supercomputer simulations to yield similar structural characteristics of biological counterparts [<xref rid="ref12" ref-type="bibr">12–15</xref>]. 3D models of structural data (on the scale of 100 nm to 1 mm) can be classified according to their digital representations into four principal formats: morphology skeletons, surface meshes, volumetric meshes and volumetric grids. Each representation (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S1</xref>) is convenient for a specific category of simulation.</p>
    <p>Morphology skeletons are point-and-diameter descriptions of either acyclic or cyclic graphs that can model connectivity of neuronal arborizations [<xref rid="ref16" ref-type="bibr">16</xref>], astrocytic processes [<xref rid="ref15" ref-type="bibr">15</xref>] and dense vascular networks [<xref rid="ref17" ref-type="bibr">17</xref>, <xref rid="ref18" ref-type="bibr">18</xref>]. Aside from their usage for topological and visual analysis [<xref rid="ref19" ref-type="bibr">19</xref>], these morphologies are used to conduct one-dimensional (1D) compartmental simulations. Neuronal and glial morphologies are used in NEURON [<xref rid="ref20" ref-type="bibr">20</xref>] (<ext-link xlink:href="http://neuron.yale.edu" ext-link-type="uri">neuron.yale.edu</ext-link>) to simulate electrophysiology based on Hodgkin-Huxely ion channel formalism [<xref rid="ref21" ref-type="bibr">21</xref>], and vascular morphologies are used to simulate blood flow in cerebral vasculature [<xref rid="ref22" ref-type="bibr">22</xref>, <xref rid="ref23" ref-type="bibr">23</xref>]. Surface meshes are sets of vertices, edges and facets (ideally triangles) that can define the boundaries of 3D structures, such as cellular membranes of neurons [<xref rid="ref24" ref-type="bibr">24</xref>] and astrocytes [<xref rid="ref25" ref-type="bibr">25</xref>] and tubular membranes of blood vessels [<xref rid="ref26" ref-type="bibr">26</xref>]. These meshes, if watertight, are extensively used in particle-based stochastic molecular simulations, for example with the <ext-link xlink:href="https://mcell.org/" ext-link-type="uri">MCell</ext-link> simulator [<xref rid="ref27" ref-type="bibr">27</xref>, <xref rid="ref28" ref-type="bibr">28</xref>] (<ext-link xlink:href="https://mcell.org/" ext-link-type="uri">mcell.org</ext-link>). Volumetric meshes are derived from their surface counterparts to model their interior volume with convenient discretization, for example, with tetrahedral [<xref rid="ref29" ref-type="bibr">29</xref>] or hexahedral [<xref rid="ref30" ref-type="bibr">30</xref>] subdomains. Such meshes are primarily used in reaction–diffusion simulations with STEPS [<xref rid="ref31" ref-type="bibr">31</xref>] (<ext-link xlink:href="http://steps.sourceforge.net" ext-link-type="uri">steps.sourceforge.net</ext-link>) or Smoldyn [<xref rid="ref32" ref-type="bibr">32–34</xref>] (<ext-link xlink:href="https://www.smoldyn.org/" ext-link-type="uri">smoldyn.org</ext-link>). Cartesian volumetric grids use, alternatively, cubic discretization to model the interior volume, in which we can account for the variations in optical properties of different regions of the tissue to simulate its interaction with light [<xref rid="ref35" ref-type="bibr">35</xref>, <xref rid="ref36" ref-type="bibr">36</xref>].</p>
    <p>Generally, the same 3D model can be converted from one format to another to be used in hybrid or multimodal simulations; however, the principal format with which a given 3D model can be restructured into any other format is a surface mesh that must be watertight [<xref rid="ref37" ref-type="bibr">37</xref>] (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S1b</xref>, <xref rid="sup1" ref-type="supplementary-material">S2</xref>). For instance, the generation of a volumetric mesh from a surface input—using TetGen [<xref rid="ref38" ref-type="bibr">38</xref>], QuarTet [<xref rid="ref39" ref-type="bibr">39</xref>], GMsh [<xref rid="ref40" ref-type="bibr">40</xref>] or CGAL [<xref rid="ref41" ref-type="bibr">41</xref>]—requires the surface mesh to be watertight. TetWild can tetrahedralize non-watertight meshes, but it has limited performance [<xref rid="ref29" ref-type="bibr">29</xref>] and fails to handle complex biological models with realistic geometries [<xref rid="ref42" ref-type="bibr">42</xref>]. Moreover, accurate skeletonization of cerebral vasculature from microscopy stacks requires multimodal algorithms that combine an input volume with its corresponding watertight mesh to create a morphological representation of the network [<xref rid="ref43" ref-type="bibr">43–45</xref>]. Therefore, to automate and systematize simulation workflows, watertightness is essential, not only for the simulation per se, but also for data conversion from one representation to another.</p>
    <p>On one level, and as a consequence of the segmentation challenges of electron microscopy (EM) volumes, existing 3D mesh models of cellular and subcellular brain structures are expected to be fragmented and non-watertight. This applies to manually segmented neuropil structures [<xref rid="ref11" ref-type="bibr">11</xref>] or even those segmented with state-of-the-art deep neural networks [<xref rid="ref46" ref-type="bibr">46</xref>]. Machine learning (ML) has helped automating the process [<xref rid="ref47" ref-type="bibr">47</xref>] allowing the generation of a massive amount of neuro-glia-vasculature (NGV) reconstructions that are disseminated online as demonstrated by several research programs such as MICrONS [<xref rid="ref48" ref-type="bibr">48</xref>], FAFB-FFN1 [<xref rid="ref49" ref-type="bibr">49</xref>], and FlyEM Hemibrain [<xref rid="ref50" ref-type="bibr">50</xref>]. Nevertheless, the majority of the resulting reconstructions requires many person-years of effort for proofreading. Online collaborative efforts are introduced to accelerate the process [<xref rid="ref51" ref-type="bibr">51</xref>], which could be effective in resolving fragmentation artifacts, but watertightness remains lacking.</p>
    <p>On another level, there is a huge diversity of NGV morphological models that have been released publicly to central databases, for instance, NeuroMorpho.Org [<xref rid="ref16" ref-type="bibr">16</xref>] and Brain Vasculature (BraVa) [<xref rid="ref18" ref-type="bibr">18</xref>]. These models are only appropriate for conducting 1D compartmental simulations; there are no existing frameworks that can convert them, taking into consideration their structural artifacts, into watertight mesh models for applications in other types of simulations. The key question therefore is, given an input 3D model in any of aforementioned formats, can we reconstruct it in another format that can be systematically plugged into simulation environments for <italic toggle="yes">in silico</italic> experimentation? A few relevant <italic toggle="yes">remeshing</italic> frameworks are capable of handling geometric topology and optimization issues for relatively small-scale structures (minuscule segments of spiny dendrites), such as GAMer [<xref rid="ref52" ref-type="bibr">52</xref>] and VolRoverN [<xref rid="ref53" ref-type="bibr">53</xref>], but they are incapable of accomplishing watertightness and they cannot process any kind of morphology skeletons. Other applications presented applicable solutions to construct polygonal meshes from morphology skeletons, for (i) neurons such as NeuroTessMesh [<xref rid="ref54" ref-type="bibr">54</xref>], NeuroMorphoVis [<xref rid="ref19" ref-type="bibr">19</xref>], Neuronize [<xref rid="ref55" ref-type="bibr">55</xref>], AnaMorph [<xref rid="ref56" ref-type="bibr">56</xref>], (ii) vasculature, such as VessMorphoVis [<xref rid="ref26" ref-type="bibr">26</xref>] and (iii) astrocytes [<xref rid="ref25" ref-type="bibr">25</xref>] (summarized in <xref rid="sup1" ref-type="supplementary-material">Supplementary Tables S1</xref> and <xref rid="sup1" ref-type="supplementary-material">S2</xref>). Nonetheless, the resulting meshes are neither optimized nor watertight (<xref rid="sup1" ref-type="supplementary-material">Supplementary Section 3</xref>), furthermore they might have unrealistic geometries and structural deficits. We present Ultraliser to eliminate the gap and address those challenges, all within a unique and efficient framework.</p>
  </sec>
  <sec id="sec4">
    <title>Results</title>
    <sec id="sec5">
      <title>Ultraliser</title>
      <p>Ultraliser is a neuroscience-specific framework capable of creating multiscale (from the subcellular scale up to mesoscale circuits) and high fidelity 3D models of neuroscientific data sets that can be integrated in the context of simulation-based experiments, aiming to understand the function. Ultraliser is consistent and unconditionally robust, as it can systematically build adaptively optimized watertight triangular meshes and large-scale annotated volumes from input data models with multiple formats including: (i) ill-conditioned, fragmented and self-intersecting polygonal meshes with irregular topologies, (ii) cyclic and acyclic morphological graphs, (iii) gray-scale volumetric stacks with user-specified isovalues, (iv) binary volume masks segmented from microscopy stacks and (v) tetrahedral volumetric meshes.</p>
      <p>Contrary to traditional remeshing applications that use geometry-based methods [<xref rid="ref57" ref-type="bibr">57</xref>] to repair the geometric topology of non-watertight meshes, the core engine of Ultraliser is designed based on efficient voxelization kernels that create intermediate high resolution proxy volumes, with which we can extract continuous surface meshes that are adaptively optimized and watertight, refer to <xref rid="f1" ref-type="fig">Figure 1</xref> and <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S2</xref>. The core library of Ultraliser is exploited to develop several applications that can be part of a large-scale software ecosystem for establishing fully automated neuroscientific pipelines involving multimodal simulation systems. The current version of Ultraliser integrates the following applications:</p>
      <list list-type="simple">
        <list-item>
          <p>(i) <italic toggle="yes">ultraMesh2Mesh</italic>, restructures an input polygonal surface mesh composed of a set of unorganized triangles with no defined connectivity—i.e. a triangle soup—into a smooth, optimized, two-manifold and watertight triangular surface mesh.</p>
        </list-item>
        <list-item>
          <p>(ii) <italic toggle="yes">ultraMeshes2Mesh</italic>, a similar application to <italic toggle="yes">ultraMesh2Mesh</italic>, but it produces a single output watertight mesh from a list of non-watertight input meshes that have existing spatial relationship.</p>
        </list-item>
        <list-item>
          <p>(iii) <italic toggle="yes">ultraMesh2Volume</italic>, reconstructs1-bit (one bit per voxel) and 8-bit (one byte per voxel) volumes from an input mesh that is not necessarily watertight and might have severe geometric deficits including self-intersecting facets, fragmented partitions and even floating vertices.</p>
        </list-item>
        <list-item>
          <p>(iv) <italic toggle="yes">ultraVolume2Mesh</italic>, generates a watertight surface mesh from a single-channel volume stack. The surface of the resulting mesh is established based on a user-specified isovalue or range of isovalues.</p>
        </list-item>
        <list-item>
          <p>(v) <italic toggle="yes">ultraMask2Mesh</italic>, a similar application to <italic toggle="yes">ultraVolume2Mesh</italic>, but it takes an input binary mask that is typically segmented from microscopy stacks, where the isosurface is already reconstructed as a set of voxels.</p>
        </list-item>
        <list-item>
          <p>(vi) <italic toggle="yes">ultraNeuroMorpho2Mesh</italic>, converts an input acyclic graph representing a neuronal morphology skeleton into an optimized and continuous membrane with a biologically realistic 3D somatic profile reconstructed on a physically plausible basis. Spines can be also integrated along the dendritic surface if the morphology is reconstructed in a digital microcircuit [<xref rid="ref2" ref-type="bibr">2</xref>], where synaptic locations are determined.</p>
        </list-item>
        <list-item>
          <p>(vii) <italic toggle="yes">ultraAstroMorpho2Mesh</italic>, converts an input astrocytic morphology containing branching processes and endfeet surfaces into an optimized and continuous membrane surface.</p>
        </list-item>
        <list-item>
          <p>(viii) <italic toggle="yes">ultraVessMorpho2Mesh</italic>, converts an input cyclic graph representing a large-scale vascular network into an optimized, watertight and multi-partitioned mesh model with accurate branching geometries.</p>
        </list-item>
        <list-item>
          <p>(ix) <italic toggle="yes">ultraCircuit2Volume</italic>, takes an input microcircuit and a configuration file, and produces a volumetric tissue model that is tagged with multiple optical properties. The configuration file describes the annotation details of the circuit [<xref rid="ref10" ref-type="bibr">10</xref>].</p>
        </list-item>
      </list>
      <p>In the following sections, we demonstrate the significance of Ultraliser for <italic toggle="yes">in silico</italic> neuroscience taking into account several use cases that involve multiple types of input structural data including: non-watertight surface meshes of cellular and subcellular structures segmented from EM volumes and NGV (neuronal, astrocytic and vascular) morphologies that are either segmented from optical microscopy stacks or generated synthetically.</p>
      <fig position="float" id="f1">
        <label>Figure 1</label>
        <caption>
          <p>Ultraliser workflow. Ultraliser implements a voxelization-based remeshing engine to create annotated volume models and watertight surface manifolds from input morphology skeletons, non-watertight triangular soups, gray scale volumes and segmented binary masks. The workflow has five essential stages: surface and solid voxelization, triangular mesh reconstruction from uniformly sampled volume grids, surface optimization, and watertight verification. Detailed workflow is illustrated in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S2</xref>.</p>
        </caption>
        <graphic xlink:href="bbac491f1" position="float"/>
      </fig>
    </sec>
    <sec id="sec6">
      <title>Remeshing cellular and subcellular structures of the NGV ensemble</title>
      <p>In the context of a recent collaboration between EPFL and KAUST, we developed a multi-stage framework (imaging, segmentation, modeling, simulation and visualization) to re-create the NGV ensemble <italic toggle="yes">in silico</italic> [<xref rid="ref58" ref-type="bibr">58</xref>]. This framework aims to advance our understanding of the substantial role of cytoscale structures and functions in controlling brain energy metabolism. Our fundamental objective is to digitally reconstruct 3D structural models of NGV structures with realistic geometries to fuel detailed subcellular simulations [<xref rid="ref59" ref-type="bibr">59</xref>, <xref rid="ref60" ref-type="bibr">60</xref>], allowing us to investigate the biochemical and biophysical properties of oligocellular networks [<xref rid="ref61" ref-type="bibr">61</xref>]. Realizing the objectives of this framework, however, has been impeded by the lack of availability of topologically accurate watertight meshes with which we can conduct the simulations or even skeletonize the meshes extracted in the segmentation stage (<xref rid="f2" ref-type="fig">Figure 2A</xref>).</p>
      <fig position="float" id="f2">
        <label>Figure 2</label>
        <caption>
          <p>Ultraliser creates high-fidelity watertight surface manifolds of neuropil structures from non-watertight inputs. (<bold>A</bold>) The EM volume block is segmented semi-automatically to extract 3D mesh models of individual cell morphologies and other structures (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S3</xref>). (<bold>B</bold>) An exemplar mesh (Astrocyte 4) is selected for evaluating the optimum values of the remeshing parameters. (<bold>C</bold>) The effect of varying voxelization resolution (in voxels per micron) and the number of optimization iterations on—from left to right—the Hausdorff distance (in μm), number of vertices, total surface area (in μm<sup>2</sup>)[<xref rid="ref2" ref-type="bibr">2</xref>] and volume (in μm<sup>3</sup>) [<xref rid="ref3" ref-type="bibr">3</xref>] of the mesh. Astrocyte 4 has been remeshed at multiple voxelization resolutions (0.1–1.0 μm) and optimized with different optimization iterations (1–10) to determine the most optimum values for these parameters as a reference to be used to remesh all the other segmented structures from the neuropil volume. (<bold>D</bold>) The input mesh of Astrocyte 4 is not watertight and is also over tessellated with ∼1.7 million triangles. This mesh has been remeshed with a voxelization resolution of 5 voxels per micron (200 nm), and optimized with one, five and ten optimization iterations. (<bold>E</bold>) <italic toggle="yes">ultraMesh2Mesh</italic> creates an adaptively optimized watertight mesh with only ∼425 thousand triangles. The distributions show a comparison between the qualitative analysis metrics of the input mesh and resulting one. Scale bars, 5 μm (<bold>B</bold>), 2.5 μm (<bold>D</bold>).</p>
        </caption>
        <graphic xlink:href="bbac491f2" position="float"/>
      </fig>
      <p>We acquired a 750,000 cubic micron volume from layer IV of the somatosensory cortex of a two-weekold rat. Within this volume, a total of 186 structures were labeled, segmented, and classified into (i) cellular structures including: astrocytes, neurons, microglia, pericytes and oligodendrocytes, (ii) subcellular structures including: nuclei, mitochondria and endoplasmic reticula (ER), (iii) other fragmented structures including a few blood vessel segments and a group of myelinated axons and (iv) other non-identifiable structures. From this collection, the following <italic toggle="yes">complete</italic> structures—that are of central significance to our modeling objectives—were segmented: four astrocytes, four neurons, four microglia, four pericytes and a single oligodendrocyte in addition to the mitochondria of all the cells and the ER of the astrocytes (Supplementary Section 5).</p>
      <p>A surface mesh model corresponding to each structure is exported into a Wavefront OBJ file for qualitative and quantitative analysis (<xref rid="sup1" ref-type="supplementary-material">Supplementary Tables S3</xref> and <xref rid="sup1" ref-type="supplementary-material">S4</xref>). From those 17 cells and their subcellular structures, only the meshes of three pericytes and astrocytic ER were verified to be watertight, but they had poor geometric topologies. Meshes of the remaining cells were confirmed to be non-watertight; containing thousands of non-manifold edges and vertices in addition to tens of self-intersecting polygons.</p>
      <p>We then remeshed all the cellular and subcellular meshes using <italic toggle="yes">ultraMesh2Mesh</italic> to reconstruct corresponding watertight manifolds that are accurate and geometrically optimized (Methods). Geometric accuracy, tessellation and topology of the resulting meshes are subject to two principal parameters: voxelization resolution and number of optimization iterations. Resolution is defined by the number of voxels per micron used to rasterize the input mesh. Geometric accuracy is primarily measured by the Hausdorff distance and difference in volume between the input and output meshes.</p>
      <p>To estimate the optimum values of these two parameters, we constructed five analysis matrices for an exemplar mesh (Astrocyte 4, shown in <xref rid="f2" ref-type="fig">Figure 2B</xref>) in which we can apply those optimum values to other cellular meshes in the block. <xref rid="f2" ref-type="fig">Figure 2C</xref> illustrates four quantitative matrices showing the effect of varying the two principal parameters on the Hausdorff distance, number of vertices, surface area and volume of the output mesh. The number of vertices determines the footprint of the resulting mesh. Essentially, the lower this footprint is, the better for processing. However, the lower it becomes, the values of the difference in volume and Hausdorff distance between resulting and original meshes are increasing, which implies altering shape or losing detail—for example, of a spine located along a dendritic branch. Therefore, we must combine the volume analysis and Hausdorff distance matrices to determine convenient values of voxelization resolution and optimization iterations that could preserve the geometry and volume of the original mesh (Supplementary Section 4). <xref rid="f2" ref-type="fig">Figure 2D</xref> shows the effect of using one, five and ten optimization iterations on the tessellation and topology of the resulting mesh. The full analysis matrix is shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S4</xref>. From this analysis, the optimum values were estimated to be five voxels per micron and five optimization iterations. Those values are then used to remesh all the cellular meshes in the block. <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S5</xref>–<xref rid="sup1" ref-type="supplementary-material">S26</xref> (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S6</xref>) reveal detailed quantitative, qualitative and visual comparisons (the results for Astrocyte 2 are shown in <xref rid="f2" ref-type="fig">Figure 2E</xref>) between the input and output meshes of the complete cellular structures shown in <xref rid="f2" ref-type="fig">Figure 2A</xref>.</p>
      <p>Subcellular meshes were remeshed with higher voxelization resolution (10 voxels per micron) to ensure resolving their fragmented and minuscule segments. Complete comparative analysis of the subcellular meshes is shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S29</xref> – <xref rid="sup1" ref-type="supplementary-material">S53</xref> (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S7</xref>).</p>
      <p>Resulting astrocytic meshes were therefore applicable for skeletonization, with which we have successfully developed a novel pipeline to synthesize a digital reconstruction of the NGV ensemble at micrometer anatomical resolution [<xref rid="ref15" ref-type="bibr">15</xref>]. Moreover, all the resulting meshes were tetrahedralized using <ext-link xlink:href="https://wias-berlin.de/software/tetgen/features.html" ext-link-type="uri">TetGen</ext-link> [<xref rid="ref38" ref-type="bibr">38</xref>] and <ext-link xlink:href="https://gmsh.info/" ext-link-type="uri">Gmsh</ext-link> [<xref rid="ref40" ref-type="bibr">40</xref>] to create corresponding volume, or simulation-ready, meshes for <ext-link xlink:href="https://github.com/CNS-OIST/STEPS" ext-link-type="uri">STEPS</ext-link> [<xref rid="ref31" ref-type="bibr">31</xref>] simulations with which we have successfully completed the objectives of the collaboration. Simulation results are beyond the scope of this sequel.</p>
    </sec>
    <sec id="sec7">
      <title>Remeshing poorly segmented meshes with fragmented partitions and slicing artifacts</title>
      <p>Dense reconstructions of brain circuits are made available with volume EM and advanced ML-based segmentation solutions, allowing us to render hundreds of thousands of cortical structures—including complete cells, cell parts, cytoplasmic organelles and blood vessels—that are shared [<xref rid="ref62" ref-type="bibr">62</xref>] and made freely available online [<xref rid="ref49" ref-type="bibr">49</xref>, <xref rid="ref50" ref-type="bibr">50</xref>, <xref rid="ref63" ref-type="bibr">63</xref>, <xref rid="ref64" ref-type="bibr">64</xref>]. A decent amount of the segmented structures is proofread to resolve false-split (fragmentation) and false-merge (connectivity) errors. Nevertheless, pipelines involved in the segmentation process yield triangular mesh models characterized by sharp features, rough surfaces and high tessellation rates, leading to triangle soups with large numbers of geometric deficits. The meshes might have large discontinued partitions with overlapping geometries (<xref rid="f3" ref-type="fig">Figures 3A, B, F</xref>), gaps (<xref rid="f3" ref-type="fig">Figure 3J</xref>) and tiny disconnected fragments (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S75</xref>) due to common slicing and misalignment artifacts [<xref rid="ref65" ref-type="bibr">65</xref>]. Those poorly reconstructed and fragmented meshes cannot be effectively repaired—or remeshed to produce watertight counterparts—relying on geometric-based solutions [<xref rid="ref57" ref-type="bibr">57</xref>]. Thanks to its voxelization engine, Ultraliser can transparently handle these deficits and build a continuous, adaptively tessellated and high resolution manifold of the entire structure with superior topology.</p>
      <fig position="float" id="f3">
        <label>Figure 3</label>
        <caption>
          <p>Remeshing fragmented mesh model with multiple mesh partitions, self intersecting faces and slicing artifacts. (<bold>A</bold>) Segmented mesh model of a neuron extracted from layer II/III of the visual cortex of the rat. The closeup in (<bold>B</bold>) shows the messy fragmented structure of the mesh. This triangle soup has been processed with Ultraliser to generate an optimized, connected and two-manifold mesh model with high quality topology at three different resolutions: (<bold>C</bold>) one, (<bold>D</bold>) five and (<bold>E</bold>) 10 voxels per micron. The closeups in (<bold>F</bold>)–(<bold>I</bold>) focus on a small spiny branch to highlight the effect of varying the reconstruction resolution on the ultrastructure of the mesh. <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S55</xref> shows comparative analysis between the input mesh and the ultralized one. (<bold>J</bold>) The mesh contains a few gaps due to the misalignment and slicing artifacts. The three-way solid voxelization is used to reconstruct a continuous manifold with optimized topology at different resolutions (<bold>K–M</bold>). Scale bars, 10 μm (<bold>A</bold>), 5 μm (<bold>B–E</bold>, <bold>J–M</bold>), 1 μm (<bold>F–I</bold>).</p>
        </caption>
        <graphic xlink:href="bbac491f3" position="float"/>
      </fig>
      <p>To accomplish this objective, we used <italic toggle="yes">ultraMesh2Mesh</italic>, with which the polygons of an input surface mesh are independently rasterized into a volume grid, where self-intersecting and duplicate facets are implicitly eliminated; they are rasterized to the same voxel or a neighboring one. This grid is then processed by isosurface extraction kernels to produce an intermediate highly tessellated surface, which is smoothed, adaptively optimized and finally verified to be watertight (see section Methods). <xref rid="f3" ref-type="fig">Figure 3</xref> demonstrates how effective Ultraliser can be in processing an exemplar mesh—segmented from layer II/III of the visual cortex of a young rat—with thousands of mesh partitions, self-intersections and other geometric artifacts. <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S55</xref>–<xref rid="sup1" ref-type="supplementary-material">S74</xref> show comparative remeshing results for a small subset of meshes of pyramidal neurons (the full block is shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S54</xref>) that were publicly provided by MICrONS program [<xref rid="ref48" ref-type="bibr">48</xref>, <xref rid="ref66" ref-type="bibr">66</xref>]. All the resulting meshes are watertight and have a single mesh partition with a continuous manifold.</p>
      <p>Segmented meshes suffering from slicing or alignment artifacts are, in certain cases, characterized by thin gaps across their surfaces. Such gaps lead to surface discontinuity (<xref rid="f3" ref-type="fig">Figure 3J</xref>) or disconnected fragments of the mesh (shown in red in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S75</xref>). Those gaps cannot be easily detected and might require advanced and computationally intensive ML-based algorithms to identify and repair them. In our implementation, we extended the voxelization stage and integrated a three-way solid voxelization algorithm, that is seamlessly taking into account repairing those gaps, in which the interiors bounded by cell membranes are voxelized along each axis independently and then merged into a single volume (see section Methods). <xref rid="f3" ref-type="fig">Figure 3K–M</xref> illustrate the results of remeshing a pyramidal neuron mesh with three obvious slicing artifacts (two of them exist on the soma and one is located along a dendritic branch) into a continuous surface mesh at three different voxelization resolutions. <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S75</xref> illustrates a side-by-side comparison between an input mesh with several artifacts and the resulting one from <italic toggle="yes">ultrasMesh2Mesh</italic>, in which all the gaps are filled to connect the disconnected fragments to the surface of the mesh to produce a continuous surface.</p>
    </sec>
    <sec id="sec8">
      <title>Generating biologically realistic neuronal meshes from digitized morphologies</title>
      <p>There is a huge diversity of neuronal morphologies (mainly in SWC format) that is routinely used for simulating electrical activity in <ext-link xlink:href="https://neuron.yale.edu/" ext-link-type="uri">NEURON</ext-link> [<xref rid="ref20" ref-type="bibr">20</xref>] and its modern extensions [<xref rid="ref67" ref-type="bibr">67</xref>, <xref rid="ref68" ref-type="bibr">68</xref>]. Such diversity can be a significant resource for performing mesoscale hybrid simulations combining electrophysiology with intracellular calcium dynamics simultaneously [<xref rid="ref69" ref-type="bibr">69</xref>]. However, this objective entails the development of a robust technique that can construct biologically detailed and watertight neuronal mesh models consistent with their morphological counterparts. Several applications were developed to create neuronal surface meshes from their corresponding morphologies (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>). The majority was focused on building low-tessellated, non-watertight and visually appealing mesh models that can be rapidly generated and efficiently used for visualization or in visual analytics [<xref rid="ref19" ref-type="bibr">19</xref>, <xref rid="ref24" ref-type="bibr">24</xref>, <xref rid="ref54" ref-type="bibr">54</xref>, <xref rid="ref55" ref-type="bibr">55</xref>, <xref rid="ref70" ref-type="bibr">70</xref>]. Only a few ones addressed the watertightness challenge, however, using simplified geometries and without support to integrate spine models [<xref rid="ref56" ref-type="bibr">56</xref>, <xref rid="ref71" ref-type="bibr">71</xref>]. We therefore implemented an application (<italic toggle="yes">ultraNeuroMorpho2Mesh</italic>) capable of consolidating neuronal meshes combining both features, biological realism and watertightness, irrespective of the conditions or topology of the input morphology.</p>
      <p>To create an integrated mesh model of a spiny neuronal morphology, our implementation addressed four principal challenges: (i) creating a plausible 3D somatic surface that can simulate the biological growth of the soma relying merely on the initial segments of the neurites, (ii) creating neuritic arborization membranes with non-overlapping geometries around their bifurcation points, regardless of their branching angles, (iii) integrating realistic spine models along the membranes of their dendritic branches, and finally (iv) optimization and watertightness verification (see section Methods).</p>
      <p>Digitized neuronal morphologies are composed of three distinct structural components: somata, neurities and dendritic spines (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S76</xref>). Somata are typically approximated with geometric primitives, mainly a sphere [<xref rid="ref71" ref-type="bibr">71</xref>], whose radius is computed based on the relative locations of the initial segments of each neurite, or in some cases, cylinders [<xref rid="ref72" ref-type="bibr">72</xref>]. Advanced traces digitize the soma into a two-dimensional (2D) contour representing its projection along the optical axis. To reconstruct a plausible 3D somatic profile, we apply the finite element method (FEM) approach [<xref rid="ref73" ref-type="bibr">73</xref>] to deform a volumetric model of an elastic sphere by pulling towards each neurite in the morphology. This approach preserves the initial volume of the sphere, resulting into more realistic somatic surface (<xref rid="f4" ref-type="fig">Figure 4A</xref>). Neurites are represented by directed acyclic graphs (DAGs) as a set of interconnected nodes, each of which defines a 3D Cartesian position and radius (<xref rid="f4" ref-type="fig">Figure 4B</xref>), with which we can reproduce cross-sectional variations and orientation of each segment in the morphology. A depth-first scheme is used to construct a set of connected paths from the root node (or the soma) to the terminal ones. For each path, a cross-sectional geometry is created as an independent proxy mesh (<xref rid="f4" ref-type="fig">Figure 4C</xref>) (see section Methods). The integration of the spines along dendritic membranes is optional; spines are not included by default within the morphological descriptions of individual neurons loaded from SWC files. Spiny neurons are modeled after circuit building [<xref rid="ref2" ref-type="bibr">2</xref>], where we can localize synapses and characterize their spine attributes. We designed a set of realistic spine geometries (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S79</xref>) based on a few reconstructions of interneurons segmented from the somatosensory cortex [<xref rid="ref11" ref-type="bibr">11</xref>]. All the proxy meshes—of the soma, neurites and spines—are agglomerated and rasterized in parallel to create a corresponding solid volume, with which the final mesh is generated (see section Methods). <xref rid="f4" ref-type="fig">Figure 4</xref> illustrates the steps of building a mesh model of a spiny neuron from its morphology skeleton. The resulting mesh is shown in detail in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S80</xref>. Our implementation has been tested with a group of 25 neurons with various morphological types [<xref rid="ref16" ref-type="bibr">16</xref>]. Morphology files and resulting meshes are available in the Supplementary Data.</p>
      <fig position="float" id="f4">
        <label>Figure 4</label>
        <caption>
          <p>Creating biologically realistic spiny neuronal surface mesh from its morphology. (<bold>A</bold>) Progressive reconstruction of the soma from an initial icosphere into a 3D plausible profile based on the FEM approach [<xref rid="ref73" ref-type="bibr">73</xref>]. (<bold>B</bold>) The morphology is rendered as a set of samples. (<bold>C</bold>) For each neurite, we reconstruct a list of proxy-geometries linking a set of principal sections from the root node and until the leaf: level 1 is in red, level 2 is in green, and level 3 is in blue. Note that the proxy geometries start from the origin of the soma to avoid any gaps when the soma mesh is added afterwards (<bold>D</bold>). (<bold>E</bold>) Spine proxy geometries are added along the surface of the proxy-mesh. All the section geometries, spines and somatic mesh are rasterized to create a continuous and watertight manifold. Renderings of multiple closeups of this mesh are shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S80</xref>. Scale bars, 5 μm (<bold>A</bold>) and 20 μm (<bold>B–E</bold>).</p>
        </caption>
        <graphic xlink:href="bbac491f4" position="float"/>
      </fig>
    </sec>
    <sec id="sec9">
      <title>Generating astroglial meshes from complete synthetic morphologies</title>
      <p>Complete astrocytic morphologies with endfeet reconstructions are sparse. NeuroMorpho.Org has ∼5500 astrocytes, but none of them contains any endfeet descriptions; only the arborizations of perisynaptic and perivascular processes. Based on a few reconstructions of complete astroglial morphologies [<xref rid="ref11" ref-type="bibr">11</xref>], we presented in a recent study [<xref rid="ref15" ref-type="bibr">15</xref>] an effective method to synthesize biologically inspired, and complete, astrocytic morphologies including end-feet patches (the skeleton of an astroglial morphology is shown <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S77</xref>). The objective of the study is to allow the creation of a huge diversity of astrocytic morphologies that can be used to understand their structure–function relationship using molecular simulations.</p>
      <p>We therefore complemented this effort and integrated a specific application (<italic toggle="yes">ultraAstroMorpho2Mesh</italic>) to create simulation-ready astrocytic meshes from their morphological counterparts. The mesh generation algorithm is similar to that used to create neuronal meshes, but in addition, end-feet proxy geometries are created using implicit surface modeling (see section Methods). <xref rid="f5" ref-type="fig">Figure 5</xref> illustrates the results for reconstructing a watertight astrocytic mesh that is consistent with its morphological description. We also tested the implementation with a group of 25 astrocytes sampled from different cortical regions and created their corresponding watertight manifolds (Supplementary Data).</p>
      <fig position="float" id="f5">
        <label>Figure 5</label>
        <caption>
          <p>Creating a realistic and watertight astroglial mesh from synthetic astrocytic morphology with two endfeet. (<bold>A</bold>) Synthetic astrocytes are excessively oversampled. (<bold>B</bold>) The processes are adaptively resampled to avoid any reconstruction artifacts during the mesh generation process. (<bold>B</bold>) The processes are adaptively resampled for convenience. (<bold>D</bold>) Reconstruction of the astrocytic surface mesh with endfeet included. A high resolution reconstruction of this mesh is illustrated in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S82</xref>. Scale bars, 10 μm (<bold>A–D</bold>).</p>
        </caption>
        <graphic xlink:href="bbac491f5" position="float"/>
      </fig>
    </sec>
    <sec id="sec10">
      <title>Generating continuous cellular meshes from fragmented components</title>
      <p>We extended the remeshing pipeline and integrated another application (<italic toggle="yes">ultraMeshes2Mesh</italic>) that agglomerates a list of fragmented meshes—that are spatially overlapping—into a single and continuous watertight mesh. This extension, however seamless, enables the reconstruction of ultrarealistic cellular models based on existing meshing implementations (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>), in which we can assemble 3D mesh models of different cellular components generated independently by multiple third-party applications into a single watertight mesh with continuous surface (Methods). For instance, <italic toggle="yes">ultraNeuroMorpho2Mesh</italic> uses the FEM to reconstruct a plausible 3D surface of the soma, but meanwhile, there are other advanced implementations that use Hooke’s law and mass-spring models to reconstruct 3D somatic profiles with more realistic shapes, which could ultimately improve the realism of resulting neuronal meshes. This can be demonstrated with the <ext-link xlink:href="https://github.com/BlueBrain/NeuroMorphoVis/wiki/Soma-Reconstruction" ext-link-type="uri">Soma Reconstruction Toolbox</ext-link> in <ext-link xlink:href="https://github.com/BlueBrain/NeuroMorphoVis" ext-link-type="uri">NeuroMorphoVis</ext-link> [<xref rid="ref19" ref-type="bibr">19</xref>], where users can fine tune the parameters of the soma reconstruction algorithm and validate the resulting profile with respect to a segmented ground-truth mesh. <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S81</xref> provides an example of creating a watertight mesh of a spiny neuron from a set of input meshes, each representing a single component of the neuron (soma, arbor or even a spine). <italic toggle="yes">ultraMeshes2Mesh</italic> can therefore be seen as a complementary or post-processing application that can ensure the watertightness of resulting mesh models of NGV cellular structures created by other software applications.</p>
    </sec>
    <sec id="sec11">
      <title>Generating vasculature meshes from corresponding graph networks</title>
      <p>Another application is developed to create ‘multi-partitioned’ watertight mesh models of large-scale cerebral vascular networks. This application is intended to confront the rising trend to automate the reconstruction of accurate 3D models of brain vasculature, with which we can analyze their structural angioarchitecture and characterize their dynamic behavior [<xref rid="ref17" ref-type="bibr">17</xref>, <xref rid="ref74" ref-type="bibr">74</xref>]. The networks are typically segmented into vectorized graphs, i.e. centerlines with point-and-diameter representations (the structure of a vascular morphology graph is shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S78</xref>). Those graphs are becoming imperative for performing vascular simulations, whether used in vectorized format in 1D compartmental simulations or being converted into alternative formats, for example, into tetrahedral meshes that can be applied in reaction–diffusion simulations. Such simulations pave the way to understand how our brains meet the energy demands of neuronal computations. Nevertheless, creating such ‘simulation-ready’ vascular models from segmented data is challenging.</p>
      <p>The first challenge is the fragmentation of the network. Even with current state-of-the-art imaging and segmentation protocols, it is nearly impossible to reconstruct a full—and accurate—high-resolution cerebral vascular network segmented into a single and connected graph [<xref rid="ref75" ref-type="bibr">75</xref>]. Resulting graphs are typically composed of multiple disconnected partitions, which complicates the creation of watertight meshes if the partitions are self-intersecting. The second challenge is the scale of segmented networks, which has been exponentially growing due to the recent advances in lightsheet imaging and Clarity [<xref rid="ref76" ref-type="bibr">76</xref>, <xref rid="ref77" ref-type="bibr">77</xref>], allowing the creation of whole-brain vascular maps down to capillary level [<xref rid="ref78" ref-type="bibr">78</xref>]. The third challenge is the segmentation quality of the vessel network; in particular, for small vessels, the quality is not optimal, and the resulting skeletons might have severe topological artifacts around branching terminals. Therefore, typical meshing algorithms of branching structures would fail to build watertight meshes of such complex geometries.</p>
      <p>There are plenty of tools that can be used to visualize the graphs, but only a few are capable of visualizing large-scale graphs [<xref rid="ref26" ref-type="bibr">26</xref>, <xref rid="ref79" ref-type="bibr">79</xref>]. Some tools [<xref rid="ref26" ref-type="bibr">26</xref>, <xref rid="ref54" ref-type="bibr">54</xref>] can also create surface meshes from their corresponding morphologies, but usually the results are not watertight, particularly for dense graphs. To fill this gap, we designed <italic toggle="yes">ultraVessMorpho2Mesh</italic>, a vasculature-specific application that can efficiently convert large-scale networks of vascular morphologies into multi-partitioned and adaptively optimized watertight meshes with smooth branching geometries. Our algorithm handles an input graph as a linear list of sections without the necessity to have predefined connectivity information. Initially, the morphology skeleton is analyzed, where high frequency variations in cross-sectional radii are filtered and short sections are eliminated (<xref rid="f6" ref-type="fig">Figure 6B</xref>). Each section in the graph is independently converted into a proxy mesh. However, and to guarantee the connectivity of branches along the surface of the final mesh, we add multiple sphere meshes (icospheres) at both terminals of the section. All the proxy meshes are then rasterized and converted into a solid volume, with which the final mesh is generated (see section Methods).</p>
      <fig position="float" id="f6">
        <label>Figure 6</label>
        <caption>
          <p>Reconstruction of a watertight mesh of a cerebral vascular network from its corresponding vectorized graph. (<bold>A</bold>) The data set is sliced from a larger cortical network with hundreds of millions of vertices to demonstrate how Ultraliser is effective in building mesh models with clean geometric topology and accurate branching structures from raw vectorized morphologies. (<bold>B</bold>) The data set is qualitatively and quantitatively analyzed to evaluate its local geometry and topology (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S9</xref>). (<bold>C</bold>) A closeup revealing the overlap between the different sections at a common branching point, where each section is assigned a different color based on its average radius. (<bold>D</bold>) Each section of morphology is converted into a tubular proxy mesh with a circular cross-section interpolated at every vertex along the section. (<bold>E</bold>) We add packing spheres (in yellow) at the terminal samples of each section to ensure the smoothness and continuity of the proxy mesh. (<bold>F</bold>) The proxy mesh is rasterized into a volumetric grid with a resolution of five microns per voxel, where the overlap between the different sections is obvious. (<bold>G</bold>) Applying the three-way solid voxelization algorithm fills the intravascular space and removes any intersections, in which we can extract a continuous manifold of every partition in the volume. (<bold>H</bold>) A watertight mesh is reconstructed with clean geometric topology and accurate branching. This mesh can be then used in several simulation experiments. Scale bars, 100 μm (<bold>A</bold>), 50 μm (<bold>C</bold><sub><bold>1</bold></sub>, <bold>D</bold><sub><bold>1</bold></sub>, <bold>E</bold><sub><bold>1</bold></sub>, <bold>F</bold><sub><bold>1</bold></sub>, <bold>G</bold><sub><bold>1</bold></sub>, <bold>H</bold><sub><bold>1</bold></sub>), 25 μm (<bold>C</bold><sub><bold>2</bold></sub>, <bold>D</bold><sub><bold>2</bold></sub>, <bold>E</bold><sub><bold>2</bold></sub>, <bold>F</bold><sub><bold>2</bold></sub>, <bold>G</bold><sub><bold>2</bold></sub>, <bold>H</bold><sub><bold>2</bold></sub>).</p>
        </caption>
        <graphic xlink:href="bbac491f6" position="float"/>
      </fig>
      <p>Due to the cyclic nature of vascular graphs, there is a high possibility that our slice-based solid voxelization algorithm will fail. We therefore use three-way solid voxelization instead of three-way voxelization, in which the flood-filling algorithm is applied on every principal axis independently. Prior to the optimization stage, the different partitions in the polygonized mesh object are split and optimized individually. After optimization, these partitions are regrouped again in a single mesh object (see section Methods). <xref rid="f6" ref-type="fig">Figure 6</xref> depicts the stages of processing a fragmented vascular network towards reconstructing a high fidelity watertight surface mesh with multiple partitions. <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S83</xref> shows the results of converting a more complex vascular network into a watertight mesh with <italic toggle="yes">ultraVessMorpho2Mesh</italic> and ultimately into a tetrahedral one using <ext-link xlink:href="https://wias-berlin.de/software/index.jsp?id=TetGen&amp;lang=1" ext-link-type="uri">TetGen</ext-link> [<xref rid="ref38" ref-type="bibr">38</xref>].</p>
    </sec>
    <sec id="sec12">
      <title>Generating annotated 3D tissue volumes from digital circuits</title>
      <p>We also extended Ultraliser to create annotated voxel-based tissue models from surface meshes of neuronal morphologies. Voxel-based models are becoming essential, not only for visual analytics, but also for performing <italic toggle="yes">in silico</italic> optical imaging experiments that simulate light interaction with brain tissue using physically plausible Monte Carlo visualization [<xref rid="ref10" ref-type="bibr">10</xref>]. Simulation applicability and even its accuracy are subject to two factors. First, the derivation of advanced mathematical formalism of the radiative transfer equation (RTE) that could account for absorption, scattering and, in certain cases, fluorescence. Second, the existence of biologically realistic 3D models that account for (i) the optical properties of brain tissue across its different regions at microscopic levels and (ii) the spectral properties of fluorescent dyes used in wet lab experiments for cell labeling.</p>
      <p>What is missing then? RTE was extended to model light interaction with low- and high-scattering fluorescent participating media [<xref rid="ref35" ref-type="bibr">35</xref>, <xref rid="ref80" ref-type="bibr">80</xref>], recent experiments were able to build accurate 3D brain atlases mapping the different optical properties of the tissue [<xref rid="ref81" ref-type="bibr">81</xref>], and fluorescence databases are available online, where spectral properties of common fluorescent dyes are provided. The only missing element is a robust application capable of creating detailed biologically and optically accurate volume models of cortical circuits. To address this issue, we implemented <italic toggle="yes">ultraCircuit2Volume</italic>.</p>
      <p>Our implementation uses the information retrieved from the circuits that are digitally reconstructed by the Blue Brain Project [<xref rid="ref2" ref-type="bibr">2</xref>, <xref rid="ref82" ref-type="bibr">82</xref>]. These circuits identify neuron types, their coordinates and orientation. Starting from raw morphologies, corresponding surface meshes are generated either with Ultraliser directly or relying on third-party applications, such as <ext-link xlink:href="https://github.com/BlueBrain/NeuroMorphoVis" ext-link-type="uri">NeuroMorphoVis</ext-link> [<xref rid="ref19" ref-type="bibr">19</xref>]. Meshes are then rasterized in voxel grids, where each voxel is annotated with location-specific optical properties. In case of fluorescence, voxels corresponding to intracellular spaces are annotated with the spectral parameters of fluorescent dyes (see section Methods). The resulting volumes are used with recently developed <italic toggle="yes">in silico</italic> imaging simulators [<xref rid="ref10" ref-type="bibr">10</xref>] to create synthetic optical sections of cortical tissue models, on physically plausible basis (shown in <xref rid="f7" ref-type="fig">Figure 7</xref>).</p>
      <fig position="float" id="f7">
        <label>Figure 7</label>
        <caption>
          <p>Creating annotated volumetric tissue models for <italic toggle="yes">in silico</italic> imaging. (<bold>A</bold>) The mesh is created using <ext-link xlink:href="https://github.com/BlueBrain/NeuroMorphoVis" ext-link-type="uri">NeuroMorphoVis</ext-link> [<xref rid="ref19" ref-type="bibr">19</xref>] from a neuronal morphology reconstructed from the somatosensory cortex of a P14 rat [<xref rid="ref82" ref-type="bibr">82</xref>]. (<bold>B</bold>) The neuron is placed into a digital circuit [<xref rid="ref2" ref-type="bibr">2</xref>] to determine its connectivity in which we can identify the synaptic locations and integrate the spines along its dendritic arborizations. The neuron mesh is used to reconstruct a high resolution annotated volume in which its intracellular space is tagged with optical properties of multiple fluorescent dyes. The volume is then used for simulating the imaging of a single cell with fluorescence microscope. The following dyes are used Alexa Fluor 488, 405, 532, 658 and 610 in (<bold>C</bold>), (<bold>D</bold><sub><bold>1</bold></sub>), (<bold>D</bold><sub><bold>2</bold></sub>), (<bold>D</bold><sub><bold>3</bold></sub>) and (<bold>D</bold><sub><bold>4</bold></sub>), respectively. The simulated tissue block is illuminated with collimated laser beams at a wavelength that corresponds to the maximum excitation of each respective dye. (<bold>E</bold>) <italic toggle="yes">In silico</italic> brainbow optical section of a digitally reconstructed neocortical slice (920 × 640 × 1740 cubic microns) simulating the imaging of lightsheet fluorescence microscope. The slice is tagged with six fluorescent labels (GFP, CFP, eCFP, mBannan, mCheery and mPlum) and illuminated at the maximum excitation wavelength of each respective dye. Scale bars 25 μm (<bold>A–D</bold>), 50 μm (<bold>E</bold>).</p>
        </caption>
        <graphic xlink:href="bbac491f7" position="float"/>
      </fig>
    </sec>
    <sec id="sec13">
      <title>Comparative analysis with existing frameworks</title>
      <p>To demonstrate the critical significance of Ultraliser and its accompanying applications, we performed detailed quantitative and qualitative comparisons with relevant open source frameworks that are used for remeshing and mesh reconstruction from morphological skeletons of neurons (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>) and vascular networks (<xref rid="sup1" ref-type="supplementary-material">Supplementary Table S2</xref>). Comparative results and their analysis are discussed in detail in Supplementary Section 13. From the comparisons presented in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S85</xref>–<xref rid="sup1" ref-type="supplementary-material">S89</xref>, Ultraliser has demonstrated obvious superiority in terms of topology, tessellation, watertightness and its robust performance.</p>
    </sec>
  </sec>
  <sec id="sec14">
    <title>Conclusion</title>
    <p>Biologically realistic simulations are indispensable for revealing the structure–function relationships within and among brain cells. Driven by a quantum leap in computing technologies, <italic toggle="yes">in silico</italic> brain research is complementing <italic toggle="yes">in vivo</italic> and <italic toggle="yes">in vitro</italic> methods. Meanwhile, advances in imaging technologies and automated ML-based segmentation algorithms are boosting the creation of detailed and anatomically realistic 3D neuroscientific models that are fueling simulation-based research. The goal of Ultraliser is to provide a systematic and robust framework for creating accurate watertight meshes and high resolution annotated volumes of 3D brain structures that can be integrated in multimodal supercomputer simulations. On one level, Ultraliser unconditionally rectifies non-watertight mesh models that cannot be repaired with existing meshing solutions. On another level, it has native support to create ultrarealistic watertight meshes and annotated volumes of NGV models from their morphological descriptions. The framework has a modular and extensible architecture, making it possible to integrate further relevant applications that are of paramount importance in structural systems neuroscience.</p>
  </sec>
  <sec id="sec15">
    <title>Methods</title>
    <sec id="sec16">
      <title>Ultraliser: an overview</title>
      <p>Ultraliser is an unconditionally robust and optimized framework dedicated primarily to <italic toggle="yes">in silico</italic> neuroscience research, allowing the generation of high fidelity and multiscale (from subcellular and up to multicellular scales of resolution: 100 nm–1 mm) 3D neuroscientific models—such as: nuclei, mitochondria, endoplasmic reticula, neurons, astrocytes, pericytes, neuronal branches with dendritic spines, minicolumns with thousands of neurons and large networks of cerebral vasculature—with realistic geometries. Ultraliser implements an effective voxelization-based remeshing engine that can rasterize non-watertight surface meshes—in the form of triangular soups—into high resolution volumes, with which we can reconstruct topologically accurate, adaptively optimized and watertight surface manifolds (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S1</xref>). In addition to their importance for accurate quantitative analysis, resulting models are primarily intended to automate the process of conducting supercomputer simulations of neuroscience experiments; complementing <italic toggle="yes">in vivo</italic> and <italic toggle="yes">in vitro</italic> techniques. Watertight triangular meshes are used for (i) performing 3D particle simulations, (ii) mesh-based skeletonization, in which accurate morphologies of cellular structures are obtained for performing 1D compartmental simulations and (iii) tetrahedralization, where we can generate tetrahedral volume meshes for 3D reaction–diffusion simulations. Annotated volumetric tissue models are also used in <italic toggle="yes">in silico</italic> imaging studies, where we can simulate optical imaging experiments with brightfield or fluorescence microscopy [<xref rid="ref10" ref-type="bibr">10</xref>]. Ultraliser’s workflow is graphically illustrated in <xref rid="f1" ref-type="fig">Figure 1</xref> and a detailed schematic showing the ecosystem and relationship between its different modules is illustrated in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S2</xref>. The code is open sourced under the <ext-link xlink:href="https://www.gnu.org/licenses/gpl-3.0.en.html" ext-link-type="uri">GNU General Public License version 3.0 (GPL)</ext-link>, and is available for free on GitHub at <ext-link xlink:href="https://github.com/BlueBrain/Ultraliser" ext-link-type="uri">https://github.com/BlueBrain/Ultraliser</ext-link>. Documentation and tutorials are available online at <ext-link xlink:href="https://github.com/BlueBrain/Ultraliser/wiki" ext-link-type="uri">https://github.com/BlueBrain/Ultraliser/wiki</ext-link>. Quantitative and qualitative analysis scripts used in this study are also open sourced and integrated into <ext-link xlink:href="https://github.com/BlueBrain/NeuroMorphoVis" ext-link-type="uri">NeuroMorphoVis</ext-link> [<xref rid="ref19" ref-type="bibr">19</xref>] (<ext-link xlink:href="https://github.com/BlueBrain/NeuroMorphoVis" ext-link-type="uri">github.com/BlueBrain/NeuroMorphoVis</ext-link>). Images, movies and datasets produced in this study are publicly available on Zenodo (<ext-link xlink:href="https://doi.org/10.5281/zenodo.7105941" ext-link-type="uri">10.5281/zenodo.7105941</ext-link>).</p>
    </sec>
    <sec id="sec17">
      <title>Data structures</title>
      <p>Ultraliser is a C++ based library accompanied by several use case-specific applications that can generate 3D models in two principal formats: watertight triangular surface manifolds and annotated, or tagged, volumes from a diverse set of input data formats including (i) digitized morphology skeletons, (ii) fragmented, self-intersecting and non-watertight polygonal surface meshes, (iii) binary volume masks, (iv) grayscale volumes, and (v) tetrahedral volume meshes (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S1a</xref>). Resulting watertight meshes can be further processed and converted into morphology skeletons or volume meshes relying on existing mesh-based skeletonization or tetrahedralization applications, respectively.</p>
      <sec id="sec18">
        <title>Morphology skeletons</title>
        <p>Neuroscientific 3D models with branching topologies—that are traced from optical microscopy stacks, for example: neurons, astrocytes and vasculature—are segmented, digitized and typically stored as morphology skeletons. 3D models acquired with electron microscopy [<xref rid="ref11" ref-type="bibr">11</xref>, <xref rid="ref58" ref-type="bibr">58</xref>] are further processed and converted into morphology skeletons using skeletonization [<xref rid="ref83" ref-type="bibr">83</xref>, <xref rid="ref84" ref-type="bibr">84</xref>]. Neuronal morphologies are commonly stored in the standardized <ext-link xlink:href="http://www.neuronland.org/NLMorphologyConverter/MorphologyFormats/SWC/Spec.html" ext-link-type="uri">SWC</ext-link> file format [<xref rid="ref16" ref-type="bibr">16</xref>]. This format is also used to store processes of astroglial cells, but it does not account for any endfeet information, which is typically stored as trianglular patches and requires custom file formats that can combine branching and surface data [<xref rid="ref15" ref-type="bibr">15</xref>, <xref rid="ref25" ref-type="bibr">25</xref>]. The <ext-link xlink:href="http://www.neuronland.org/NLMorphologyConverter/MorphologyFormats/SWC/Spec.html" ext-link-type="uri">SWC</ext-link> format is adopted by the <ext-link xlink:href="http://neuromorpho.org/" ext-link-type="uri">NeuroMorpho.Org</ext-link> [<xref rid="ref16" ref-type="bibr">16</xref>] database, which contains hundreds of thousands of neuronal and astrocytic morphologies collected from a huge diversity of experiments. The <ext-link xlink:href="http://www.neuronland.org/NLMorphologyConverter/MorphologyFormats/SWC/Spec.html" ext-link-type="uri">SWC</ext-link> format has been also adapted to store cerebral arterial arborizations, for instance the datasets of the <ext-link xlink:href="http://cng.gmu.edu/brava/help.php" ext-link-type="uri">Brain Vasculature (BraVa)</ext-link> [<xref rid="ref18" ref-type="bibr">18</xref>] database (<ext-link xlink:href="http://cng.gmu.edu/brava" ext-link-type="uri">cng.gmu.edu/brava</ext-link>). Ultraliser has full support to load <ext-link xlink:href="http://www.neuronland.org/NLMorphologyConverter/MorphologyFormats/SWC/Spec.html" ext-link-type="uri">SWC</ext-link> morphologies of neurons, astrocytes and cerebral vasculature. Moreover, it supports loading customized file formats such as (i) H5 morphologies that were defined within the scope of the Human Brain Project [<xref rid="ref85" ref-type="bibr">85</xref>] and (ii) the VMV format that is used to store vascular morphologies supported by <ext-link xlink:href="https://github.com/BlueBrain/VessMorphoVis" ext-link-type="uri">VessMorphoVis</ext-link> [<xref rid="ref26" ref-type="bibr">26</xref>]. Morphology skeletons are represented by a list of connected morphological samples, where each sample has a unique identifier, 3D Cartesian coordinate, cross-sectional radius, and optionally an index characterizing the type of the branch it belongs to. A pair of adjacent samples defines a segment or an edge, and a concatenated list of adjacent edges between two branching points defines a section or strand. In memory, morphologies are stored as a linear list of sections, where each section has a unique index and references to its parent and child sections. Those references are used to reconstruct the hierarchical organization of the morphology when required. The structures of neuronal, astrocytic and vascular morphologies are illustrated in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S76</xref>–<xref rid="sup1" ref-type="supplementary-material">S78</xref>, respectively.</p>
      </sec>
      <sec id="sec19">
        <title>Polygonal surface meshes</title>
        <p>Ultraliser has native support to import and export polygonal surface meshes with multiple file formats including those that are commonly used for visual analytics with Blender [<xref rid="ref86" ref-type="bibr">86</xref>] (<ext-link xlink:href="http://blender.org" ext-link-type="uri">blender.org</ext-link>) or MeshLab [<xref rid="ref87" ref-type="bibr">87</xref>] (<ext-link xlink:href="https://www.meshlab.net/" ext-link-type="uri">meshlab.net</ext-link>), such as <ext-link xlink:href="https://en.wikipedia.org/wiki/Wavefront_.obj_file" ext-link-type="uri">OBJ</ext-link> and <ext-link xlink:href="https://en.wikipedia.org/wiki/PLY_(file_format)" ext-link-type="uri">PLY</ext-link>, and also those required for 3D printing, molecular simulations and conversion into tetrahedral meshes by tetrahedralization applications [<xref rid="ref38" ref-type="bibr">38</xref>, <xref rid="ref39" ref-type="bibr">39</xref>] such as <ext-link xlink:href="https://en.wikipedia.org/wiki/STL_(file_format)" ext-link-type="uri">STL</ext-link> and <ext-link xlink:href="https://en.wikipedia.org/wiki/OFF_(file_format)" ext-link-type="uri">OFF</ext-link> file formats. The meshes downloaded from the <ext-link xlink:href="https://www.microns-explorer.org/" ext-link-type="uri">MICrONS program</ext-link> [<xref rid="ref48" ref-type="bibr">48</xref>] are stored in <ext-link xlink:href="https://www.microns-explorer.org/phase1" ext-link-type="uri">H5</ext-link> files based on the HDF5 [<xref rid="ref88" ref-type="bibr">88</xref>] library. Although this format is not standard, it is straightforward to reconstruct the triangulation of the mesh. Ultraliser implements two complementary data structures to store ‘triangular’ surface meshes. The first data structure Ultraliser:: Mesh is a light version that only stores vertices and triangles. It has low memory footprint, allowing to perform most of the operations that do not necessitate any details of surface normals, edges or patch connectivity. The other data structure Ultraliser:: AdvancedMesh is much more advanced and stores further information including surface normals, edges, connectivity between vertices, edges and triangles. This structure has been adopted from MeshFix [<xref rid="ref89" ref-type="bibr">89</xref>] and adapted to address the essential requirements needed to accomplish the objectives of the framework. It is mainly used for repairing any geometric deficits in the mesh, detecting fragmented mesh partitions, removing self-intersecting triangles and also for watertighntess verification.</p>
      </sec>
      <sec id="sec20">
        <title>Volumetric models sampled on 3D Cartesian grids</title>
        <p>Ultraliser processes and creates volume models sampled uniformly on 3D Cartesian grids. Ultraliser can import and export several volume formats including: 1-bit binary volumes (in BIT/HDR format), 8-, 16-, 32- and 64-bit volumes (in RAW/HDR and NRRD formats) and TIFF image stacks. The HDR file is an ASCII file that contains the volume dimensions, i.e. the number of voxels along each axis, and the precision of the data. Ultraliser:: Volume implements three different types of grids. Ultraliser::BitVolumeGrid uses bit-arrays [<xref rid="ref90" ref-type="bibr">90</xref>] (Ultraliser::BitArray) to represent every voxel in the volume by a single bit in memory. The voxel is either set or unset; this is sufficient to voxelize the interior of a polygonal mesh. By default and unless otherwise specified, this data structure is used by the voxelization kernels, making it possible to process large-scale volumes efficiently with reduced memory footprint. Ultraliser:: UnsignedVolumeGrid stores every voxel in the volume in either 1, 2, 3, or 4 byte(s) in memory, allowing to define a grayscale volume. Ultraliser :VoxelGrid stores a list of attributes per voxel, for example: its value, an index representing the optical properties of a participating medium or a sub-region in the volume it belongs too. This data structure is mainly used for creating tagged volumes that are needed to create physically plausible visualizations that can simulate optical imaging experiments [<xref rid="ref35" ref-type="bibr">35</xref>, <xref rid="ref80" ref-type="bibr">80</xref>].</p>
      </sec>
    </sec>
    <sec id="sec21">
      <title>Voxelization and volume reconstruction</title>
      <p>Voxlization is the process of creating 3D volumes of geometric models either from their parametric representations or from polygonal or polyhedral, tetrahedral and hexahedral meshes. Voxelization is classified into two categories: surface and solid voxelization. Surface voxelization creates volumetric shells representing boundaries of surface manifolds as a series of connected voxels–if no holes exist on the surface, while solid voxelization fills their interiors [<xref rid="ref91" ref-type="bibr">91</xref>].</p>
      <sec id="sec22">
        <title>Surface voxelization</title>
        <p>We implemented a fast data-parallel surface voxelization algorithm, which sets all the voxels that overlap with any triangle in a given mesh using conservative rasterization [<xref rid="ref92" ref-type="bibr">92</xref>]. In contrary to standard rasterization, the conservative criterion guarantees that a voxel is filled if it is partially overlapping or even touching a triangle. The algorithm can reconstruct a volumetric shell corresponding to the extent of a given triangle soup, even in the presence of self-intersecting triangles, non-manifold edges and non-manifold vertices [<xref rid="ref93" ref-type="bibr">93</xref>]. The bounding box of each voxel is computed from its three-dimensional index and side length. For every triangle in the mesh, a box-triangle intersection test is performed to rasterize all the polygons in the mesh and create a volumetric shell that reflects the surface of the mesh [<xref rid="ref94" ref-type="bibr">94</xref>]. Note that all the <italic toggle="yes">n</italic>-gons (<italic toggle="yes">n</italic> &gt; 3) in the input mesh are automatically split into triangles prior to voxelization.</p>
      </sec>
      <sec id="sec23">
        <title>Solid voxelization</title>
        <p>Conventional solid voxelization algorithms in computer graphics require a watertight manifold to successfully voxelize its interior into occupancy grids. By definition, a watertight mesh consists of a compact manifold that has clearly defined inside and does not contain any holes across its surface; that is if the surface is punctured with a hypodermic needle trying to fill it with water, it will not leak. A triangular mesh is guaranteed to be watertight—if and only if—it has no self-intersecting triangles, zero non-manifold edges, zero non-manifold vertices, and no boundary edges (Supplementary Section 4). In reality, and unfortunately, neuroscientific mesh models segmented from microscopy stacks have ill topologies with hundreds or even thousands of self-intersections, non-manifold edges and vertices and even fragmented mesh partitions. Major contributions have been introduced to fix the topology of these meshes using geometric mesh conditioning [<xref rid="ref52" ref-type="bibr">52</xref>, <xref rid="ref95" ref-type="bibr">95</xref>], nevertheless, their solutions are neither robust nor scalable, based on trials. Therefore, existing solid voxelization algorithms would fail to handle detailed mesh reconstructions with realistic geometries. Contrary to traditional methods, we present an efficient data-parallel, slice-based solid voxelization algorithm that does not entail an input watertight mesh. Initially, the surface voxelization algorithm converts a given triangular mesh into a volumetric shell in a uniformly sampled 3D Cartesian grid. The rasterization is binary, where each voxel in the grid is either set or cleared. The interior of the shell can be filled using 3D flood-filling. However, this algorithm is accompanied with extensive computational loads and cannot be easily parallelized. Our algorithm is based on 2D flood-filling that can be implemented in parallel. The 2D flood-filling kernel is applied independently to each slice in the volume. The aggregate result is exactly similar to what can be accomplished with 3D flood-filling, but in much less time.</p>
      </sec>
      <sec id="sec24">
        <title>Three-way solid voxelization</title>
        <p>By default, the solid voxelization algorithm is applied on a per-slice-basis along the <italic toggle="yes">Z-</italic>axis of a given volume grid, where each slice is processed, or flood-filled, in a separate thread, independently. Certain structures, for example vascular morphologies—represented with cyclic graphs—have loops. In the general case, the flood-filling algorithm is unable to identify any internal boundaries beyond the first one detected. Therefore, running the flood-filling kernel along a single axis will fail to capture the entire geometry of an input mesh. To resolve this constraint, we implemented a three-way solid voxelization algorithm which processes the volume along the <italic toggle="yes">X</italic>, <italic toggle="yes">Y</italic> and <italic toggle="yes">Z</italic> axes to produce three volume grids that are combined later with a logical <italic toggle="yes">ANDing</italic> operation to obtain the final grid. This approach makes it possible to resolve all the loops in a given cyclic structure.</p>
      </sec>
    </sec>
    <sec id="sec25">
      <title>Mesh reconstruction</title>
      <p>The binary volume resulting from the voxelization operation is then processed to reconstruct a smooth, optimized and watertight triangular mesh in four principal steps: (i) isosurface polygonization, (ii) Laplacian smoothing, (iii) adaptive or non-adaptive mesh optimization and (iv) watertightness verification.</p>
      <p><italic toggle="yes">Isosurface polygonization</italic> Ultraliser integrates efficient implementations of two popular isosurface extraction algorithms: the default marching cubes (MC) algorithm [<xref rid="ref96" ref-type="bibr">96</xref>] and its superior, dual marching cubes (DMC) [<xref rid="ref97" ref-type="bibr">97</xref>]. MC is relatively faster than DMC, but in certain cases it cannot reproduce rough surfaces with high frequency structures or sharp edges, while DMC can preserve thin surface features without excessive tessellation. The DMC algorithm reconstructs quadrilateral patches, but for consistency, every tetragon—or quadrilateral—created is divided and stored as two triangles with a shared edge. Moreover, MC cannot handle complex triangulation configurations, leading to self-intersecting faces and consequently non-watertight meshes. Adaptive optimization and watertightness verification are, however, implemented in subsequent stages whether any of the two algorithms is used for surface reconstruction. Therefore, using MC or DMC would ultimately yield an optimized and watertight mesh.</p>
      <sec id="sec26">
        <title>Surface smoothing</title>
        <p>Due to the finite resolution of volumes, and their discretized nature, polygonal meshes reconstructed from those volumes exhibit zigzagged or ‘staircase’ artifacts on their surfaces (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S1a</xref>). Such artifacts distort the organic appearance of the resulting meshes, unless surface smoothing is applied. We therefore use the Laplacian operator to remedy those staircase artifacts in an iterative scheme. Initially, we build a list of neighbor vertices and faces for each vertex. In each iteration, it uses the aforementioned lists to compute a smoothing kernel for each vertex, applies it and then updates the mesh surface to prepare it for the next iteration. To compute the kernel, we identify the difference between the vertex and the arithmetic sum of the neighbor vertices, each weighted by their average cotangent. To compute the average cotangent, we use the two cotangents calculated from the two neighboring vertices of the edge formed by the vertex to the neighbor. To obtain the smoothed vertex, we linearly interpolate between the original vertex, and the original vertex weighted by the kernel. The interpolating parameter, also called the smoothing value, is an input to the algorithm chosen by the user, which must be greater than zero to have an effect. Additionally, an inflate parameter—also provided by the user—can be specified to dampen the shrinking effect on thin parts of the mesh. This parameter is used in the same form as the smoothing value, but with the opposite effect, and its value must be less than zero to have an effect.</p>
      </sec>
      <sec id="sec27">
        <title>Mesh optimization</title>
        <p>Irrespective to the applied surface extraction algorithm, the tessellation of the reconstructed surface depends primarily on the resolution of the volume grid that is used to sample and voxelize the input mesh. For convenience, the resolution is set in terms of number of voxels per micron. The resolution is a free parameter that is either controlled by the user or automatically set based on the axis-aligned bounding box (AABB) of the input mesh, the size of the finest detail in the mesh and the scale or focus of the potential experiment in which the resulting mesh will be plugged in. Ultraliser takes advantage of binary volume grids, in which each voxel is represented in memory with a single bit; it is therefore capable of creating large-scale volumes which can resolve the finest features of an object, for example: the ultrastructure of a dendritic spine in tall-tufted layer 5 pyramidal neurons [<xref rid="ref98" ref-type="bibr">98</xref>]. With such resolutions, the reconstructed mesh is excessively tessellated, possibly with tens of millions of polygons, whose practicality is undoubtedly questionable. Ultraliser integrates a mesh optimization module that can adaptively refine highly tessellated meshes to create optimized counterparts with preserved features. The mesh optimization module extends an existing implementation [<xref rid="ref99" ref-type="bibr">99</xref>] that uses an angle-based approach for adaptive tessellation and normal-based smoothing to guarantee the quality of the resulting surface. The optimization process includes: surface smoothing, normal smoothing, flat coarsening, dense coarsening and also adaptive optimization.</p>
      </sec>
      <sec id="sec28">
        <title>Watertightness verification</title>
        <p>The optimized meshes are guaranteed to have good topology and convenient polygonization, nevertheless, their watertightness is not guaranteed; the optimizer might introduce self-intersecting triangles depending on surface complexity and roughness. Watertightness has been addressed by extending an existing solution based on <ext-link xlink:href="https://github.com/MarcoAttene/MeshFix-V2.1" ext-link-type="uri">MeshFix</ext-link> [<xref rid="ref89" ref-type="bibr">89</xref>] that uses a heuristic iterative approach that strives to reconstruct a single compact manifold with neither degeneracies nor self-intersections from a low quality input.</p>
      </sec>
      <sec id="sec29">
        <title>Meshes with multiple partitions</title>
        <p>In certain cases, 3D models of cellular structures are not composed of a single and continuous object (or partition), but rather of multiple fragmented objects that could be spatially overlapping. This fragmentation is common due to labeling or tracing artifacts that arise during the segmentation of cellular models characterized with complex or thin structures [<xref rid="ref100" ref-type="bibr">100</xref>] such as astrocytes, neurons or microglia (refer to <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S3</xref>-<italic toggle="yes">Partitions</italic>). Applying mesh reconstruction kernels to segmented volume stacks of such cellular models will result in polygonal surface meshes with multiple partitions, in which each partition is isolated as an independent set of polygons, nevertheless, and is still part of the mesh. Mesh analysis applications expect a watertight mesh to have a single partition represented as a set of connected vertices, edges and faces on a continuous manifold. Processing fragmented meshes with multiple partitions requires special handling to avoid generating incomplete or even non-watertight meshes. We allow the user to choose either to process the largest partition in the mesh and remove the other ones or to preserve all the partitions in the mesh. In the latter case, each partition is split and treated as an independent mesh object during the optimization. Afterwards, all the partitions are grouped together in a single mesh objects.</p>
      </sec>
    </sec>
    <sec id="sec30">
      <title>Watertight mesh generation from input triangle soup</title>
      <p>Triangular soups of fragmented non-watertight meshes are processed to create watertight counterparts in two steps: voxelization and isosurface polygonization. Initially, the input mesh is triangulated, in which each polygon (<italic toggle="yes">n</italic>-gon: <italic toggle="yes">n</italic> &gt; 3) in the mesh is split into a list of corresponding triangles. The AABB of the mesh is then computed. Based on the dimensions of this AABB and the voxelization resolution (in voxels per micron) defined by the user, a binary 3D volume grid is created to cover the spatial extent of this AABB. The mesh is converted into a volumetric shell using surface voxelization, where every triangle along the surface of the mesh is independently rasterized in the volume grid. The interior of the resulting volumetric shell is then filled using solid voxelization; a 2Dflood-filling kernel is applied independently to every slice in the grid along the <italic toggle="yes">Z</italic>-axis. If the input mesh was suspected to have loops, three-way solid voxelization is then performed, in which the flood-filling kernel is applied along the <italic toggle="yes">X</italic>, <italic toggle="yes">Y</italic> and finally the <italic toggle="yes">Z</italic> axis. In the second stage, the binary volume grid is processed by a user-selected isosurface polygonization kernel (MC or DMC) to reconstruct a low-quality triangular mesh. This mesh is then post-processed to generate an optimized watertight manifold in three steps: (i) surface smoothing using the Laplacian operator, (ii) re-tessellation to remove unnecessary small triangles resulting from the polygonization process, and (iii) watertightness verification, ensuring that all self-intersecting triangles, boundary edges, floating vertices and non-manifold edges and vertices are removed.</p>
    </sec>
    <sec id="sec31">
      <title>Watertight mesh generation from input morphology skeletons</title>
      <p>The conversion of morphology skeletons into watertight meshes is performed in two steps: (i) creation of intermediate proxy meshes that can be accurately rasterized into volumetric grids and (ii) applying the remeshing routine used to create watertight meshes from triangle soups. These proxy meshes are known to be spatially overlapping and self-intersecting, but they are only used to rasterize the geometry of every section in the morphology into the volume grid. We implemented two algorithms to build these proxy-meshes. The first one converts every section in the morphology into an independent mesh. Each mesh is overlapping with its adjacent ones that correspond to parent and child sections in the morphology. To guarantee the continuity between the neighboring sections at their branching points, packing spheres are added. The radius of every sphere is computed based on the largest terminal sample of all the sections connected at the respective branching point. This algorithm is optimum to reconstruct vasculature meshes from their corresponding morphologies and, in general, can be applied to handle structures with cyclic graphs. The other algorithm computes the longest connected paths along the graph of an input morphology to create a proxy mesh, not on a per-section-basis, but rather on a per-path-basis. Every path is a continuous list of samples that can represent an individual section or an aggregate of two adjacent sections or more. This algorithm is well suited to handle morphologies with directed acyclic graphs, including neuronal arborizations and astroglial processes. As illustrated in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S76</xref>–<xref rid="sup1" ref-type="supplementary-material">S78</xref>, each section in the morphology is composed of a sequence of samples, each defines a position and radius. For each section, or path, a mesh is reconstructed by resampling the corresponding segments using the cubic Hermite spline interpolation. The positions and tangents of the new samples are defined by Supplementary Equations 1 and 2. To avoid loops or self-intersections between the different sections in the reconstructed mesh, the tangent at each original segment point is computed using the Centripetal CatmullRom spline formulation, that uses the positions of the previous and next samples to the current segment, as shown by Supplementary Equations 3 and 4. Once all new samples of the section are computed, a sectional geometry in the form of circumference is used to interpolate along the path to construct a connected vertex assembly in the form of a tubular mesh (Supplementary Section 9).</p>
    </sec>
    <sec id="sec32">
      <title>Watertight mesh generation from input volumes</title>
      <p>Input volumes are directly converted into watertight meshes using isosurface polygonization followed by watertightness verification. 1-bit volumes, binary volumes or segmented masks are directly processed to reconstruct a surface mesh. However, n-bit grayscale volumes, where n is 8, 16, 32 or 64, require specifying an additional parameter to complete the process: the isovalue, with which an isosurface is segmented and used for surface reconstruction.</p>
    </sec>
    <sec id="sec33">
      <title>Volume generation from input meshes or morphologies</title>
      <p>Volume generation is implicit; it is automatically implemented within the remeshing pipeline during the voxelization stage. Unless specified, resulting volumes are binary, in which every voxel is represented by a single bit, and therefore, these volumes are not annotated to account for any variations across the spatial extent of the volume. To create annotated volumes, Ultraliser::VoxelGrids are used for voxelization, in which we can assign annotation indices to every voxel in the grid. Volumes can be exported into BIN (1-bit), RAW (8-bit) and NRRD (8-bit) files.</p>
    </sec>
    <sec id="sec34">
      <title>Tetrahedralization</title>
      <p>Ultraliser reads tetrahedral meshes for the purpose of data conversion between formats, i.e. to create watertight surface meshes and volumes from tetrahedral inputs using <italic toggle="yes">ultraTet2Surface</italic>. However, it does not implement any tetrahedral mesh generators within its pipeline to create meshes in a direct manner. For this purpose, we rely on existing implementations, mainly <ext-link xlink:href="https://wias-berlin.de/software/tetgen/features.html" ext-link-type="uri">TetGen</ext-link> [<xref rid="ref38" ref-type="bibr">38</xref>] (<ext-link xlink:href="http://tetgen.org/" ext-link-type="uri">tetgen.org</ext-link>) and <ext-link xlink:href="https://gmsh.info/" ext-link-type="uri">Gmsh</ext-link> [<xref rid="ref40" ref-type="bibr">40</xref>] (<ext-link xlink:href="https://gmsh.info/" ext-link-type="uri">gmsh.info</ext-link>), which can complement our pipeline to create tetrahedral volumetric meshes from the watertight meshes created by Ultraliser.</p>
    </sec>
    <sec id="sec35">
      <title>Generating biologically realistic neuronal meshes from digitized morphologies</title>
      <p>A 3D somatic profile is created based on a finite element method (FEM) approach [<xref rid="ref73" ref-type="bibr">73</xref>]. The algorithm takes into account the coordinates of the initial segments of the neurites that only emanate from to the soma. The connected neurites are identified in a pre-processing step, in which the distance between the initial segments to the center of the soma is evaluated and relatively compared with respect to its average radius. The soma is initially modeled by a tetrahedral icosahedron (or icosphere) approximating the mean radius of the soma. Projective mapping is then applied, where cross-sectional areas of the initial segments of the connected neurites are projected onto the icosphere. Vertices located within every projection surface are selected and grouped together to identify their center. Simultaneously, a pulling force is applied at every center to deform the icosphere towards the neurites, giving it a realistic profile.</p>
      <p>Every tree corresponding to an individual neurite in the morphology is then processed and converted into a proxy mesh. As aforementioned, proxy meshes are not watertight, but they are essential to reconstruct a volumetric shell in the following voxelization stage. Mesh branching at bifurcation (or trifurcation) points is not explicitly implemented; most mesh branching algorithms at small branching angles (less than 30°) fail to reconstruct an organic and accurate bifurcation geometry. To guarantee continuous branching, whatever the conditions at the bifurcation point, we implemented an exhaustive algorithm that builds all the possible paths starting from the soma and until the terminal segments. At every section in the morphology, the algorithm reconstructs all the path combinations between the section itself, its parent section and the child sections. These formed paths are considered as independent polylines with thickness. Each segment of the path is resampled using the cubic Hermite spline interpolation to compute the positions and tangents of the new generated intermediate nodes. Once all new nodes of the path are computed, to mesh the complete polyline, a sectional geometry in the form of circumference is placed at the origin of coordinates of the plane defined by the position and the tangent at each node. The tangent of the node is taken as the normal vector of the plane. Finally, since the sectional geometry keeps the same number of vertices along the path, the vertex assembly consists in a simple connection between the already sorted vertices.</p>
      <p>To improve the realism of the resulting mesh models, we extracted ∼50 spine meshes (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S79</xref>) from the four neurons shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S10</xref>–<xref rid="sup1" ref-type="supplementary-material">S13</xref>. Each neuronal mesh is loaded in Blender, where spine geometries are visually identified. Afterwards, and for each spine, we created a bounding box covering its spatial extent and overlapping with the dendritic section it emanates from. We then applied, per spine, a mesh intersection operator to extract its geometry as an independent object. The spines are oriented along the Y-axis after identifying their base and apex. Spine geometries are then processed to clean any self-intersecting facets along their surfaces, optimized and finally exported as independent mesh objects.</p>
    </sec>
    <sec id="sec36">
      <title>Generating astroglial meshes from complete synthetic morphologies</title>
      <p>In terms of representation, processes of astroglial cells are similar to neuronal arborizations, except that they have relatively compact extents and star-shaped structure, and are excessively oversampled in certain cases [<xref rid="ref15" ref-type="bibr">15</xref>]. Moreover, astrocytic morphologies contain triangular surface patches that represent their endfeet geometries (<xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S77</xref>). Therefore, the same routine used to reconstruct neuronal meshes is applied to build astrocytic somata and processes. We then extended the implementation to generate endfeet proxy meshes using implicit surfaces. Endfeet patches are composed of a set of connected triangles and their respective vertices, and each vertex has a specific diameter that accounts for thickness at this particular vertex. Implicit surface modeling requires sufficient vertex density to avoid fragmented mesh partitions. Accordingly, we resample the surface of every endfoot patch, in which the distance between any two connected vertices across the patch is greater than the thickness of the endfoot. Following to the rasterization of the somatic and processes proxy meshes, resulting endfeet proxy meshes are rasterized to create a continuous volume shell of the entire astrocyte morphology. Surface reconstruction routines (MC or DMC) are directly applied on the resulting volume shell without applying solid voxelization. During the surface optimization process, all the internal mesh partitions are automatically removed. The partition with largest surface area (or tessellation), which represents the astrocytic membrane, remains.</p>
    </sec>
    <sec id="sec37">
      <title>Generating continuous cellular meshes from fragmented components</title>
      <p>In general, <italic toggle="yes">ultraMeshes2Mesh</italic> can compile a group of individual meshes into a single mesh object. If the input meshes are not spatially overlapping at all, then the resulting mesh will be composed of multiple partitions. In case that all the input meshes are overlapping, the output mesh will have a single partition with a continuous manifold. We therefore can use this application to generate ultrarealistic structural mesh models of neurons or astrocytes relying on a combination of already existing methods that are summarized in <xref rid="sup1" ref-type="supplementary-material">Supplementary Table S1</xref>. For neurons, we can use the <ext-link xlink:href="https://github.com/BlueBrain/NeuroMorphoVis/wiki/Soma-Reconstruction" ext-link-type="uri">Soma Reconstruction Toolbox</ext-link> in <ext-link xlink:href="https://github.com/BlueBrain/NeuroMorphoVis" ext-link-type="uri">NeuroMorphoVis</ext-link> [<xref rid="ref19" ref-type="bibr">19</xref>] and create a plausible somatic mesh. Skin modifiers in Blender (<ext-link xlink:href="http://blender.org" ext-link-type="uri">blender.org</ext-link>) can also be used to generate neuronal arborizations with organic-looking or realistic branching structure [<xref rid="ref24" ref-type="bibr">24</xref>]. These individual meshes—of the soma and arborizations—can be combined together to generate a single mesh object with a continuous cellular surface. If spine meshes are available [<xref rid="ref101" ref-type="bibr">101</xref>], even at a later stage, we can also integrate them along the dendritic surface of the resulting mesh to create an integrated spiny mesh model of the neuron (as shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S81</xref>). Nevertheless, it is the responsibility of the user to ensure that all the meshes of the cellular components (soma, neurites and spines) are spatially overlapping without having any gaps either between parent and child sections or between the soma and the all branches that originate from it, to be able to establish a single continuous surface manifold. <italic toggle="yes">ultraMeshes2Mesh</italic> loads a list of meshes grouped in a single input directory and computes an aggregate bounding volume, with which we can identify the spatial extent of the resulting mesh. Based on the voxelization resolution specified by the user, a binary volume grid is created, where the input meshes are rasterized, in parallel. The interior of the grid is filled with solid voxelization to create a homogeneous volume, with which the surface mesh is reconstructed, optimized and verified to be watertight.</p>
    </sec>
    <sec id="sec38">
      <title>Creating vasculature meshes from corresponding graph networks</title>
      <p>Frequently, vascular skeletons vectorized from optical microscopy stacks are excessively oversampled. We accordingly apply adaptive resampling to every section in the morphology to remove any unnecessary samples while preserving its structure. In certain cases, resampling reduces the total number of samples by 60–70%, thus lessening the tessellation of the proxy meshes created on a per-section-basis. To avoid fragmentation artifacts, we identify the samples with the least radii across the entire morphology, with which we can identify the most convenient voxelization resolution needed to preserve the integrity of the final vascular mesh, avoiding the structural fragmentation that arise due to surface smoothing and optimization. Samples with comparatively small radii –or zero-radius samples– are interpolated, and short sections with zero-length edges are eliminated. To ensure continuity between interconnected sections, i.e. smooth and accurate branching geometries, we add packing spheres (explicit icospheres) at the terminal samples of each section. Proxy geometries are then created on a per-section-basis and rasterized in a volume grid. Packing spheres are also rasterized to yield a continuous shell of voxels for every partition in the morphology. To avoid flood-filling vascular loops, three-way solid voxelization is applied. The resulting volume grid is finally used for mesh reconstruction and optimization.</p>
    </sec>
    <sec id="sec39">
      <title>Data sources</title>
      <p>Cellular and subcellular NGV meshes segmented from the volume shown in <xref rid="f2" ref-type="fig">Figure 2</xref> are provided by the collaborating co-authors affiliated with KAUST. Neuronal meshes shown in <xref rid="f3" ref-type="fig">Figure 3</xref>, <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S55</xref>–<xref rid="sup1" ref-type="supplementary-material">S75</xref> and <xref rid="sup1" ref-type="supplementary-material">S85</xref> are publicly available from the <ext-link xlink:href="https://www.microns-explorer.org/" ext-link-type="uri">MICrONS</ext-link> program [<xref rid="ref48" ref-type="bibr">48</xref>]. Neuronal morphologies shown in <xref rid="f4" ref-type="fig">Figure 4</xref>, <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S80</xref>,<xref rid="sup1" ref-type="supplementary-material">S81</xref> and <xref rid="sup1" ref-type="supplementary-material">S86</xref> are publicly available from NeuroMorpho.Org [<xref rid="ref16" ref-type="bibr">16</xref>]. Astrocytic morphologies (<xref rid="f5" ref-type="fig">Figure 5</xref> and <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S82</xref>) are provided by Zisis [<xref rid="ref15" ref-type="bibr">15</xref>]. Vascular morphologies (rat’s cerebral microvasculature) shown in <xref rid="f6" ref-type="fig">Figure 6</xref> and <xref rid="sup1" ref-type="supplementary-material">Supplementary Figures S83</xref>,<xref rid="sup1" ref-type="supplementary-material">S84</xref> are courtesy of <ext-link xlink:href="https://www.neuroscience.uzh.ch/en/about/people/steering/Weber.html" ext-link-type="uri">Bruno Weber</ext-link> [<xref rid="ref22" ref-type="bibr">22</xref>], University of Zürich (UZH). The vascular morphology of the arterial arborizations shown in <xref rid="sup1" ref-type="supplementary-material">Supplementary Figure S88</xref> is available from the <ext-link xlink:href="http://cng.gmu.edu/brava" ext-link-type="uri">Brain Vasculature (BraVa)</ext-link> database [<xref rid="ref18" ref-type="bibr">18</xref>] (<ext-link xlink:href="http://cng.gmu.edu/brava" ext-link-type="uri">cng.gmu.edu/brava</ext-link>).</p>
      <boxed-text id="box01" position="float">
        <sec id="sec44">
          <title>Key Points</title>
          <list list-type="bullet">
            <list-item>
              <p>Ultraliser creates spatial models of neuro-glia-vascular (NGV) structures with realistic geometries.</p>
            </list-item>
            <list-item>
              <p>Ultraliser creates high fidelity watertight manifolds and large-scale volumes from centerline descriptions, non-watertight surfaces and binary masks.</p>
            </list-item>
            <list-item>
              <p>Resulting models enable scalable <italic toggle="yes">in silico</italic> experiments that can probe intricate structure–function relationships.</p>
            </list-item>
            <list-item>
              <p>The framework is unrivalled both in ease-of-use and in the accuracy of resulting geometry representing a major leap forward in simulation-based neuroscience.</p>
            </list-item>
          </list>
        </sec>
      </boxed-text>
    </sec>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>supplement_bbac491</label>
      <media xlink:href="supplement_bbac491.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="bbac491-ack">
    <title>Acknowledgments</title>
    <p>We thank Grigori Chevtchenko and Samuel Lapere for the impactful discussions on watertight meshing, Pawel Podhajski on technical assistance to deploy the software on Blue Brain 5. We also thank Karin Holm and Judit Planas for their valuable comments on the manuscript. We acknowledge the artistic touch of Elvis Boci to improve the quality of figures.</p>
  </ack>
  <sec id="sec40">
    <title>Software availability</title>
    <p>Ultraliser is developed entirely in C++. The data-parallel sections of the code are parallelized using OpenMP [<xref rid="ref102" ref-type="bibr">102</xref>]. The code is released to public as an open-source software (OSS) in accordance with the regulations of the <ext-link xlink:href="https://www.epfl.ch/research/domains/bluebrain/" ext-link-type="uri">Blue Brain Project</ext-link>, École polytechnique fédérale de Lausanne (EPFL) for open sourcing under the <ext-link xlink:href="https://www.gnu.org/licenses/gpl-3.0.en.html" ext-link-type="uri">GNU GPL3</ext-link> license. The code is freely available online at <ext-link xlink:href="https://github.com/BlueBrain/Ultraliser" ext-link-type="uri">github.com/BlueBrain/Ultraliser</ext-link>. The version of the code used to create all the results demonstrated in this study is available in the Supplementary Software.</p>
  </sec>
  <sec id="sec41">
    <title>Authors’ contributions</title>
    <p>M.A. and F.S. co-conceived the study. M.A., M.H., H.M, P.M., F.S. co-led the study. M.A. designed and implemented the framework, reconstructed and analyzed the resulting models and wrote the manuscript with input and critique from all authors. JJ.G.C. implemented the neuronal mesh reconstruction algorithm with FEM simulation, implemented the astrocytic endfeet proxy mesh reconstruction using implicit surfaces and contributed to the manuscript. N.R.G implemented the surface smoothing filters and contributed to the manuscript. A.F. implemented the morphology and mesh analysis code and provided technical assistance to load the H5 meshes downloaded from <ext-link xlink:href="https://www.microns-explorer.org/" ext-link-type="uri">MICrONS Explorer</ext-link>. JS.C. contributed to the simulation discussions and the manuscript. C.C. reconstructed the NGV data sets within the EPFL-KAUST collaboration, analyzed them and contributed to the manuscript. M.Ag. contributed to the meshing discussions. E.Z. processed and provided the vasculature morphologies based on the original data set that was reconstructed by <ext-link xlink:href="https://www.pharma.uzh.ch/en/research/functionalimaging.html" ext-link-type="uri">Bruno Weber (UZH)</ext-link>, created the synthetic astrocytic morphologies and provided assistance to load them in Python. D.K. contributed to the discussions on the simulation requirements and the watertight meshing performance. All authors reviewed the manuscript.</p>
  </sec>
  <sec id="sec46">
    <title>Funding</title>
    <p>The Blue Brain Project, a research center of the <ext-link xlink:href="https://www.epfl.ch/en/" ext-link-type="uri">École Polytechnique</ext-link> Fédérale de Lausanne (EPFL), from the Swiss government’s ETH Board of the Swiss Federal Institutes of Technology. This publication is based upon work supported by the King Abdullah University of Science and Technology (KAUST) Office of Sponsored Research (OSR) under Award No. OSR-2017-CRG6-3438.</p>
  </sec>
  <notes id="AN1">
    <p><bold>Marwan Abdellah</bold> is a senior visualization expert and research engineer in the Computing division at the Blue Brain Project of the École polytechnique fédérale de Lausanne (EPFL). He received his Ph.D. in Neuroscience from EPFL in 2017.</p>
    <p><bold>Juan José García Cantero</bold> is a system specialist in the Computing division at the Blue Brain Project of the École polytechnique fédérale de Lausanne (EPFL). He received his PhD in Computer Science from Escuela Técnica Superior de Ingeniería Informática at Universidad Rey Juan Carlos in 2020.</p>
    <p><bold>Nadir Román Guerrero</bold> is a visualization engineer in the computing division at the Blue Brain Project of the École polytechnique fédérale de Lausanne (EPFL).</p>
    <p><bold>Alessandro Foni</bold> is a system specialist in the computing division at the Blue Brain Project of the École polytechnique fédérale de Lausanne (EPFL). He received his PhD in Economics and Social Sciences from the University of Geneva at the Information Science Institute in 2013.</p>
    <p><bold>Jay S. Coggan</bold> is a senior scientist in the Molecular Systems group in the Simulation Neuroscience division at the Blue Brain Project of the École polytechnique fédérale de Lausanne (EPFL).</p>
    <p><bold>Corrado Calì</bold> is a group leader and assistant professor RTDB in Human Anatomy at the Neuroscience Institute Cavalieri Ottolenghi (NICO)—Unito.</p>
    <p><bold>Marco Agus</bold> is an assistant professor at the College of Science and Engineering, Hamad Bin Khalifa University (HBKU).</p>
    <p><bold>Eleftherios Zisis</bold> is a software engineer at the Blue Brain Project of the École polytechnique fédérale de Lausanne (EPFL).</p>
    <p><bold>Daniel Keller</bold> is the group leader of the Molecular Systems group in the Simulation Neuroscience division at the Blue Brain Project of the École polytechnique fédérale de Lausanne (EPFL).</p>
    <p><bold>Markus Hadwiger</bold> is an associate professor in computer science and the Visual Computing Center (VCC) at King Abdullah University of Science and Technology (KAUST), leading the High-Performance Visualization research group at VCC.</p>
    <p><bold>Pierre J. Magistretti</bold> is a professor emeritus at the Brain Mind Institute of the École polytechnique fédérale de Lausanne (EPFL), director of the Center for Psychiatric Neuroscience, Department of Psychiatry/CHUV, a distinguished professor and vice president for research and the director of the KAUST Smart Health Initiative at King Abdullah University of Science and Technology (KAUST).</p>
    <p><bold>Henry Markram</bold> is a full professor of neuroscience at the École polytechnique fédérale de Lausanne (EPFL), director of the Laboratory of Neural Microcircuitry (LNMC) and the founder and director of the Blue Brain Project.</p>
    <p><bold>Felix Schürmann</bold> is an adjunct professor at the École Polytechnique Fédérale de Lausanne, co-director of the Blue Brain Project and involved in several research challenges of the European Human Brain Project of the École polytechnique fédérale de Lausanne (EPFL).</p>
  </notes>
  <ref-list id="bib1">
    <title>References</title>
    <ref id="ref1">
      <label>1.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Cajal</surname><given-names>SRY</given-names></string-name></person-group>. <source>Histologie du système nerveux de l’homme &amp; des vertébrés: Cervelet, cerveau moyen, rétine, couche optique, corps strié, écorce cérébrale générale &amp; régionale, grand sympathique</source>.
<publisher-name>A. Maloine</publisher-name>, Paris, France, <year>1911</year>. <pub-id pub-id-type="doi">10.5962/bhl.title.48637</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref2">
      <label>2.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Markram</surname><given-names>H</given-names></string-name>, <string-name><surname>Muller</surname><given-names>E</given-names></string-name>, <string-name><surname>Ramaswamy</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Reconstruction and simulation of neocortical microcircuitry</article-title>. <source>Cell</source><year>2015</year>;<volume>163</volume>(<issue>2</issue>):<fpage>456</fpage>–<lpage>92</lpage>. <pub-id pub-id-type="doi">10.1016/j.cell.2015.09.029</pub-id>.<pub-id pub-id-type="pmid">26451489</pub-id></mixed-citation>
    </ref>
    <ref id="ref3">
      <label>3.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Di Ventura</surname><given-names>B</given-names></string-name>, <string-name><surname>Lemerle</surname><given-names>C</given-names></string-name>, <string-name><surname>Michalodimitrakis</surname><given-names>K</given-names></string-name>, <etal>et al.</etal></person-group><article-title>From in vivo to in silico biology and back</article-title>. <source>Nature</source><year>2006</year>;<volume>443</volume>(<issue>7111</issue>):<fpage>527</fpage>–<lpage>33</lpage>. <pub-id pub-id-type="doi">10.1038/nature05127</pub-id>.<pub-id pub-id-type="pmid">17024084</pub-id></mixed-citation>
    </ref>
    <ref id="ref4">
      <label>4.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Markram</surname><given-names>H</given-names></string-name></person-group>. <article-title>The Blue Brain Project</article-title>. <source>Nat Rev Neurosci</source><year>2006</year>;<volume>7</volume>(<issue>2</issue>):<fpage>153</fpage>–<lpage>60</lpage>. <pub-id pub-id-type="doi">10.1038/nrn1848</pub-id>.<pub-id pub-id-type="pmid">16429124</pub-id></mixed-citation>
    </ref>
    <ref id="ref5">
      <label>5.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Gerstner</surname><given-names>W</given-names></string-name>, <string-name><surname>Sprekeler</surname><given-names>H</given-names></string-name>, <string-name><surname>Deco</surname><given-names>G</given-names></string-name></person-group>. <article-title>Theory and simulation in neuroscience</article-title>. <source>Science</source><year>2012</year>;<volume>338</volume>(<issue>6103</issue>):<fpage>60</fpage>–<lpage>5</lpage>. <pub-id pub-id-type="doi">10.1126/science.1227356</pub-id>.<pub-id pub-id-type="pmid">23042882</pub-id></mixed-citation>
    </ref>
    <ref id="ref6">
      <label>6.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hunt</surname><given-names>CA</given-names></string-name>, <string-name><surname>Ropella</surname><given-names>GEP</given-names></string-name>, <string-name><surname>Lam</surname><given-names>TN</given-names></string-name>, <etal>et al.</etal></person-group><article-title>At the biological modeling and simulation frontier</article-title>. <source>Pharm Res</source><year>2009</year>;<volume>26</volume>(<issue>11</issue>):<fpage>2369</fpage>–<lpage>400</lpage>. <pub-id pub-id-type="doi">10.1007/s11095-009-9958-3</pub-id>.<pub-id pub-id-type="pmid">19756975</pub-id></mixed-citation>
    </ref>
    <ref id="ref7">
      <label>7.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mahajan</surname><given-names>G</given-names></string-name>, <string-name><surname>Nadkarni</surname><given-names>S</given-names></string-name></person-group>. <article-title>Intracellular calcium stores mediate metaplasticity at hippocampal dendritic spines</article-title>. <source>J Physiol</source><year>2019</year>;<volume>597</volume>:<fpage>3473</fpage>–<lpage>502</lpage>. <pub-id pub-id-type="doi">10.1113/JP277726</pub-id>.<pub-id pub-id-type="pmid">31099020</pub-id></mixed-citation>
    </ref>
    <ref id="ref8">
      <label>8.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Coggan</surname><given-names>JS</given-names></string-name>, <string-name><surname>Bartol</surname><given-names>TM</given-names></string-name>, <string-name><surname>Esquenazi</surname><given-names>E</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Evidence for ectopic neurotransmission at a neuronal synapse</article-title>. <source>Science</source><year>2005</year>;<volume>309</volume>(<issue>5733</issue>):<fpage>446</fpage>–<lpage>51</lpage>. <pub-id pub-id-type="doi">10.1126/science.1108239</pub-id>.<pub-id pub-id-type="pmid">16020730</pub-id></mixed-citation>
    </ref>
    <ref id="ref9">
      <label>9.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Donohue</surname><given-names>DE</given-names></string-name>, <string-name><surname>Ascoli</surname><given-names>GA</given-names></string-name></person-group>. <article-title>Automated reconstruction of neuronal morphology: an overview</article-title>. <source>Brain Res Rev</source><year>2011</year>;<volume>67</volume>:<fpage>94</fpage>–<lpage>102</lpage>. <pub-id pub-id-type="doi">10.1016/j.brainresrev.2010.11.003</pub-id>.<pub-id pub-id-type="pmid">21118703</pub-id></mixed-citation>
    </ref>
    <ref id="ref10">
      <label>10.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Abdellah</surname><given-names>M.</given-names></string-name></person-group><source>In Silico Brain Imaging: Physically-plausible Methods for Visualizing Neocortical Microcircuitry</source>, <volume>400</volume>. EPFL Lausanne, <ext-link xlink:href="http://infoscience.epfl.ch/record/232444" ext-link-type="uri">http://infoscience.epfl.ch/record/232444</ext-link> (<year>2017</year>). <pub-id pub-id-type="doi">10.5075/epfl-thesis-8161</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref11">
      <label>11.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Calì</surname><given-names>C</given-names></string-name>, <string-name><surname>Agus</surname><given-names>M</given-names></string-name>, <string-name><surname>Kare</surname><given-names>K</given-names></string-name>, <etal>et al.</etal></person-group><article-title>3D cellular reconstruction of cortical glia and parenchymal morphometric analysis from Serial Block-Face Electron Microscopy of juvenile rat</article-title>. <source>Prog Neurobiol</source><year>2019</year>;<volume>183</volume>:<fpage>101696</fpage>. <pub-id pub-id-type="doi">10.1016/j.pneurobio.2019.101696</pub-id>.<pub-id pub-id-type="pmid">31550514</pub-id></mixed-citation>
    </ref>
    <ref id="ref12">
      <label>12.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ascoli</surname><given-names>GA</given-names></string-name>, <string-name><surname>Krichmar</surname><given-names>JL</given-names></string-name></person-group>. <article-title>L-Neuron: a modeling tool for the efficient generation and parsimonious description of dendritic morphology</article-title>. <source>Neurocomputing</source><year>2000</year>;<volume>32</volume>:<fpage>1003</fpage>–<lpage>11</lpage>. <pub-id pub-id-type="doi">10.1016/j.brainresrev.2010.11.003</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref13">
      <label>13.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cuntz</surname><given-names>H</given-names></string-name>, <string-name><surname>Forstner</surname><given-names>F</given-names></string-name>, <string-name><surname>Borst</surname><given-names>A</given-names></string-name>, <etal>et al.</etal></person-group><article-title>One rule to grow them all: a general theory of neuronal branching and its practical application</article-title>. <source>PLoS Comput Biol</source><year>2010</year>;<volume>6</volume>:<fpage>e1000877</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1000877</pub-id>.<pub-id pub-id-type="pmid">20700495</pub-id></mixed-citation>
    </ref>
    <ref id="ref14">
      <label>14.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kanari</surname><given-names>L</given-names></string-name>, <string-name><surname>Dictus</surname><given-names>H</given-names></string-name>, <string-name><surname>Chalimourda</surname><given-names>A</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Computational synthesis of cortical dendritic morphologies</article-title>. <source>Cell Rep</source><year>2022</year>;<volume>39</volume>(<issue>1</issue>):<fpage>110586</fpage>. <pub-id pub-id-type="doi">10.1016/j.celrep.2022.110586</pub-id>.<pub-id pub-id-type="pmid">35385736</pub-id></mixed-citation>
    </ref>
    <ref id="ref15">
      <label>15.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zisis</surname><given-names>E</given-names></string-name>, <string-name><surname>Keller</surname><given-names>D</given-names></string-name>, <string-name><surname>Kanari</surname><given-names>L</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Digital reconstruction of the neuro-glia-vascular architecture</article-title>. <source>Cereb Cortex</source><year>2021</year>;<volume>31</volume>(<issue>12</issue>):<fpage>5686</fpage>–<lpage>703</lpage>. <pub-id pub-id-type="doi">10.1093/cercor/bhab254</pub-id>.<pub-id pub-id-type="pmid">34387659</pub-id></mixed-citation>
    </ref>
    <ref id="ref16">
      <label>16.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ascoli</surname><given-names>GA</given-names></string-name>, <string-name><surname>Donohue</surname><given-names>DE</given-names></string-name>, <string-name><surname>Halavi</surname><given-names>M</given-names></string-name></person-group>. <article-title>NeuroMorpho.org: a central resource for neuronal morphologies</article-title>. <source>J Neurosci</source><year>2007</year>;<volume>27</volume>:<fpage>9247</fpage>–<lpage>51</lpage>. <pub-id pub-id-type="doi">10.1523/JNEUROSCI.2055-07.2007</pub-id>.<pub-id pub-id-type="pmid">17728438</pub-id></mixed-citation>
    </ref>
    <ref id="ref17">
      <label>17.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Blinder</surname><given-names>P</given-names></string-name>, <string-name><surname>Tsai</surname><given-names>PS</given-names></string-name>, <string-name><surname>Kaufhold</surname><given-names>JP</given-names></string-name>, <etal>et al.</etal></person-group><article-title>The cortical angiome: an interconnected vascular network with noncolumnar patterns of blood flow</article-title>. <source>Nat Neurosci</source><year>2013</year>;<volume>16</volume>(<issue>7</issue>):<fpage>889</fpage>–<lpage>97</lpage>. <pub-id pub-id-type="doi">10.1038/nn.3426</pub-id>.<pub-id pub-id-type="pmid">23749145</pub-id></mixed-citation>
    </ref>
    <ref id="ref18">
      <label>18.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wright</surname><given-names>SN</given-names></string-name>, <string-name><surname>Kochunov</surname><given-names>P</given-names></string-name>, <string-name><surname>Mut</surname><given-names>F</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Digital reconstruction and morphometric analysis of human brain arterial vasculature from magnetic resonance angiography</article-title>. <source>Neuroimage</source><year>2013</year>;<volume>82</volume>:<fpage>170</fpage>–<lpage>81</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuroimage.2013.05.089</pub-id>.<pub-id pub-id-type="pmid">23727319</pub-id></mixed-citation>
    </ref>
    <ref id="ref19">
      <label>19.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Abdellah</surname><given-names>M</given-names></string-name>, <string-name><surname>Hernando</surname><given-names>J</given-names></string-name>, <string-name><surname>Eilemann</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>NeuroMorphoVis: a collaborative framework for analysis and visualization of neuronal morphology skeletons reconstructed from microscopy stacks</article-title>. <source>Bioinformatics</source><year>2018</year>;<volume>34</volume>(<issue>13</issue>):<fpage>i574</fpage>–<lpage>82</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/bty231</pub-id>.<pub-id pub-id-type="pmid">29949998</pub-id></mixed-citation>
    </ref>
    <ref id="ref20">
      <label>20.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hines</surname><given-names>ML</given-names></string-name>, <string-name><surname>Carnevale</surname><given-names>NT</given-names></string-name></person-group>. <article-title>The NEURON simulation environment</article-title>. <source>Neural Comput</source><year>1997</year>;<volume>9</volume>:<fpage>1179</fpage>–<lpage>209</lpage>. <pub-id pub-id-type="doi">10.1162/neco.1997.9.6.1179</pub-id>.<pub-id pub-id-type="pmid">9248061</pub-id></mixed-citation>
    </ref>
    <ref id="ref21">
      <label>21.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>McCormick</surname><given-names>DA</given-names></string-name>, <string-name><surname>Shu</surname><given-names>Y</given-names></string-name>, <string-name><surname>Yu</surname><given-names>Y</given-names></string-name></person-group>. <article-title>Hodgkin and Huxley model—still standing?</article-title><source>Nature</source><year>2007</year>;<volume>445</volume>:<fpage>E1</fpage>–<lpage>2</lpage>. <pub-id pub-id-type="doi">10.1038/nature05523</pub-id>.<pub-id pub-id-type="pmid">17203021</pub-id></mixed-citation>
    </ref>
    <ref id="ref22">
      <label>22.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Reichold</surname><given-names>J</given-names></string-name>, <string-name><surname>Stampanoni</surname><given-names>M</given-names></string-name>, <string-name><surname>Keller</surname><given-names>AL</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Vascular graph model to simulate the cerebral blood flow in realistic vascular networks</article-title>. <source>J Cereb Blood Flow Metab</source><year>2009</year>;<volume>29</volume>(<issue>8</issue>):<fpage>1429</fpage>–<lpage>43</lpage>. <pub-id pub-id-type="doi">10.1038/jcbfm.2009.58</pub-id>.<pub-id pub-id-type="pmid">19436317</pub-id></mixed-citation>
    </ref>
    <ref id="ref23">
      <label>23.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Feiger</surname><given-names>B</given-names></string-name>, <string-name><surname>Kochar</surname><given-names>A</given-names></string-name>, <string-name><surname>Gounley</surname><given-names>J</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Determining the impacts of venoarterial extracorporeal membrane oxygenation on cerebral oxygenation using a one-dimensional blood flow simulator</article-title>. <source>J Biomech</source><year>2020</year>;<volume>104</volume>:<fpage>109707</fpage>. <pub-id pub-id-type="doi">10.1016/j.jbiomech.2020.109707</pub-id>.<pub-id pub-id-type="pmid">32220425</pub-id></mixed-citation>
    </ref>
    <ref id="ref24">
      <label>24.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Abdellah</surname><given-names>M</given-names></string-name>, <string-name><surname>Favreau</surname><given-names>C</given-names></string-name>, <string-name><surname>Hernando</surname><given-names>J</given-names></string-name>, <etal>et al.</etal></person-group><source>Generating High Fidelity Surface Meshes of Neocortical Neurons using Skin Modifiers in Computer Graphics and Visual Computing (CGVC)</source>. <person-group person-group-type="editor"><string-name><surname>Vidal</surname><given-names>FP</given-names></string-name>, <string-name><surname>Tam</surname><given-names>GKL</given-names></string-name>, <string-name><surname>Roberts</surname><given-names>JC</given-names></string-name></person-group> (eds), Bangor University, UK (
<publisher-name>The Eurographics Association</publisher-name>, <year>2019</year>). <comment>ISBN: 978-3-03868-096-3</comment>. <pub-id pub-id-type="doi">10.2312/cgvc.20191257</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref25">
      <label>25.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Abdellah</surname><given-names>M</given-names></string-name>, <string-name><surname>Foni</surname><given-names>A</given-names></string-name>, <string-name><surname>Zisis</surname><given-names>E</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Metaball skinning of synthetic astroglial morphologies into realistic mesh models for visual analytics and in silico simulations</article-title>. <source>Bioinformatics</source><year>2021</year>;<volume>37</volume>(<issue>Supplement_1</issue>):<fpage>i426</fpage>–<lpage>33</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btab280</pub-id>.<pub-id pub-id-type="pmid">34252950</pub-id></mixed-citation>
    </ref>
    <ref id="ref26">
      <label>26.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Abdellah</surname><given-names>M</given-names></string-name>, <string-name><surname>Guerrero</surname><given-names>NR</given-names></string-name>, <string-name><surname>Lapere</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Interactive visualization and analysis of morphological skeletons of brain vasculature networks with VessMorphoVis</article-title>. <source>Bioinformatics</source><year>2020</year>;<volume>36</volume>(<issue>Supplement_1</issue>):<fpage>i534</fpage>–<lpage>41</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btaa461</pub-id>.<pub-id pub-id-type="pmid">32657395</pub-id></mixed-citation>
    </ref>
    <ref id="ref27">
      <label>27.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Stiles</surname><given-names>JR</given-names></string-name>, <string-name><surname>Bartol</surname><given-names>TM</given-names></string-name></person-group>. <part-title>Monte Carlo methods for simulating realistic synaptic microphysiology using MCell</part-title>. <source>Computational Neuroscience: Realistic Modeling for Experimentalists</source> CRC Press, <year>2001</year>:<fpage>87</fpage>–<lpage>127, ISBN: 9780429122040</lpage>. <pub-id pub-id-type="doi">10.1201/9781420039290.ch4</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref28">
      <label>28.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Khan</surname><given-names>D</given-names></string-name>, <string-name><surname>Yan</surname><given-names>D-M</given-names></string-name>, <string-name><surname>Gui</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Molecular surface remeshing with local region refinement</article-title>. <source>Int J Mol Sci</source><year>2018</year>;<volume>19</volume>:<fpage>1383</fpage>. <pub-id pub-id-type="doi">10.3390/ijms19051383</pub-id>.<pub-id pub-id-type="pmid">29734794</pub-id></mixed-citation>
    </ref>
    <ref id="ref29">
      <label>29.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hu</surname><given-names>Y</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Tetrahedral meshing in the wild</article-title>. <source>ACM Trans Graph</source><year>2018</year>;<volume>37</volume>:<fpage>60</fpage>–<lpage>1</lpage>. <pub-id pub-id-type="doi">10.1145/3386569.3392385</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref30">
      <label>30.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>X</given-names></string-name>, <string-name><surname>Zhou</surname><given-names>Z</given-names></string-name>, <string-name><surname>Kleiven</surname><given-names>S</given-names></string-name></person-group>. <article-title>An anatomically detailed and personalizable head injury model: significance of brain and white matter tract morphological variability on strain</article-title>. <source>Biomech Model Mechanobiol</source><year>2021</year>;<volume>20</volume>:<fpage>403</fpage>–<lpage>31</lpage>. <pub-id pub-id-type="doi">10.1007/s10237-020-01391-8</pub-id>.<pub-id pub-id-type="pmid">33037509</pub-id></mixed-citation>
    </ref>
    <ref id="ref31">
      <label>31.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hepburn</surname><given-names>I</given-names></string-name>, <string-name><surname>Chen</surname><given-names>W</given-names></string-name>, <string-name><surname>Wils</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>STEPS: efficient simulation of stochastic reaction–diffusion models in realistic morphologies</article-title>. <source>BMC Syst Biol</source><year>2012</year>;<volume>6</volume>:<fpage>1</fpage>–<lpage>19</lpage>. <pub-id pub-id-type="doi">10.1186/1752-0509-6-36</pub-id>.<pub-id pub-id-type="pmid">22222070</pub-id></mixed-citation>
    </ref>
    <ref id="ref32">
      <label>32.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Andrews</surname><given-names>SS</given-names></string-name>, <string-name><surname>Addy</surname><given-names>NJ</given-names></string-name>, <string-name><surname>Brent</surname><given-names>R</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Detailed simulations of cell biology with Smoldyn 2.1</article-title>. <source>PLoS Comput Biol</source><year>2010</year>;<volume>6</volume>:<fpage>e1000705</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1000705</pub-id>.<pub-id pub-id-type="pmid">20300644</pub-id></mixed-citation>
    </ref>
    <ref id="ref33">
      <label>33.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Andrews</surname><given-names>SS</given-names></string-name></person-group>. <part-title>Spatial and Stochastic Cellular Modeling with the Smoldyn Simulator</part-title>. In: van Helden J, Toussaint A, Thieffry D (eds) <source>Bacterial Molecular Networks. Methods in Molecular Biology</source>. Springer, New York, NY, <year>2012</year>, <fpage>519</fpage>–<lpage>42</lpage>. <pub-id pub-id-type="doi">10.1007/978-1-61779-361-5_26</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref34">
      <label>34.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Robinson</surname><given-names>M</given-names></string-name>, <string-name><surname>Andrews</surname><given-names>SS</given-names></string-name>, <string-name><surname>Erban</surname><given-names>R</given-names></string-name></person-group>. <article-title>Multiscale reaction-diffusion simulations with Smoldyn</article-title>. <source>Bioinformatics</source><year>2015</year>;<volume>31</volume>:<fpage>2406</fpage>–<lpage>8</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btv149</pub-id>.<pub-id pub-id-type="pmid">25788627</pub-id></mixed-citation>
    </ref>
    <ref id="ref35">
      <label>35.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Abdellah</surname><given-names>M</given-names></string-name>, <string-name><surname>Bilgili</surname><given-names>A</given-names></string-name>, <string-name><surname>Eilemann</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Physically-based in silico light sheet microscopy for visualizing fluorescent brain models</article-title>. <source>BMC Bioinform</source><year>2015</year>;<volume>16</volume>:<fpage>S8</fpage>. <pub-id pub-id-type="doi">10.1186/1471-2105-16-S11-S8</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref36">
      <label>36.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Pharr</surname><given-names>M</given-names></string-name>, <string-name><surname>Jakob</surname><given-names>W</given-names></string-name>, <string-name><surname>Humphreys</surname><given-names>G</given-names></string-name></person-group>. <source>Physically Based Rendering: From Theory to Implementation</source><edition>3rd edn</edition>. <comment>ISBN: 9780128007099</comment>. <ext-link xlink:href="http://pbrt.org/" ext-link-type="uri">http://pbrt.org</ext-link>.
<publisher-name>Morgan Kaufmann</publisher-name>, <year>Massachusetts, USA, 2016</year>.</mixed-citation>
    </ref>
    <ref id="ref37">
      <label>37.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Botsch</surname><given-names>M</given-names></string-name>, <string-name><surname>Kobbelt</surname><given-names>L</given-names></string-name>, <string-name><surname>Pauly</surname><given-names>M</given-names></string-name>, <etal>et al.</etal></person-group><source>Polygon Mesh Processing</source>.
<publisher-name>CRC Press</publisher-name>, <year>2010</year>. <pub-id pub-id-type="doi">10.1201/b10688</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref38">
      <label>38.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Si</surname><given-names>H</given-names></string-name></person-group>. <article-title>TetGen, a Delaunay-based quality tetrahedral mesh generator</article-title>. <source>ACM Trans Math Softw (TOMS)</source><year>2015</year>;<volume>41</volume>:<fpage>1</fpage>–<lpage>36</lpage>. <pub-id pub-id-type="doi">10.1145/2629697</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref39">
      <label>39.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Labelle</surname><given-names>F</given-names></string-name>, <string-name><surname>Shewchuk</surname><given-names>JR</given-names></string-name></person-group>. <source>ACM SIGGRAPH 2007, ACM USA,</source><comment>papers 57–es</comment> (<year>2007</year>). <pub-id pub-id-type="doi">10.1145/1275808.1276448</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref40">
      <label>40.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Geuzaine</surname><given-names>C</given-names></string-name>, <string-name><surname>Remacle</surname><given-names>J-F</given-names></string-name></person-group>. <article-title>Gmsh: A 3-D finite element mesh generator with built-in pre-and post-processing facilities</article-title>. <source>Int J Numer Methods Eng</source><year>2009</year>;<volume>79</volume>:<fpage>1309</fpage>–<lpage>31</lpage>. <pub-id pub-id-type="doi">10.1002/nme.2579</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref41">
      <label>41.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Fabri</surname><given-names>A</given-names></string-name>, <string-name><surname>Pion</surname><given-names>S</given-names></string-name></person-group>. <part-title><italic toggle="yes">CGAL: the computational geometry algorithms library</italic></part-title> in <source>Proceedings of the 17th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems</source>, ACM USA, (<year>2009</year>), <fpage>538</fpage>–<lpage>9</lpage>. <pub-id pub-id-type="doi">10.1145/1653771.1653865</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref42">
      <label>42.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hu</surname><given-names>Y</given-names></string-name>, <string-name><surname>Schneider</surname><given-names>T</given-names></string-name>, <string-name><surname>Wang</surname><given-names>B</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Fast tetrahedral meshing in the wild</article-title>. <source>ACM Trans Graph (TOG)</source><year>2020</year>;<volume>39</volume>:<fpage>117</fpage>–<lpage>1</lpage>. <pub-id pub-id-type="doi">10.1145/3386569.3392385</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref43">
      <label>43.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Narayanaswamy</surname><given-names>A</given-names></string-name>, <string-name><surname>Dwarakapuram</surname><given-names>S</given-names></string-name>, <string-name><surname>Bjornsson</surname><given-names>CS</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Robust adaptive 3-D segmentation of vessel laminae from fluorescence confocal microscope images and parallel GPU implementation</article-title>. <source>IEEE Trans Med Imaging</source><year>2009</year>;<volume>29</volume>(<issue>3</issue>):<fpage>583</fpage>–<lpage>97</lpage>. <pub-id pub-id-type="doi">10.1109/TMI.2009.2022086</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref44">
      <label>44.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Tagliasacchi</surname><given-names>A</given-names></string-name>, <string-name><surname>Alhashim</surname><given-names>I</given-names></string-name>, <string-name><surname>Olson</surname><given-names>M</given-names></string-name>, <etal>et al.</etal></person-group><part-title>Mean curvature skeletons</part-title>. In <source>Computer Graphics Forum</source>. Oxford, UK: Blackwell Publishing Ltd, (<year>2012</year>);<volume>31</volume>:<fpage>1735</fpage>–<lpage>44</lpage>. <pub-id pub-id-type="doi">10.1111/j.1467-8659.2012.03178.x</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref45">
      <label>45.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Damseh</surname><given-names>R</given-names></string-name>, <string-name><surname>Pouliot</surname><given-names>P</given-names></string-name>, <string-name><surname>Gagnon</surname><given-names>L</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Automatic graph-based modeling of brain microvessels captured with two-photonmicroscopy</article-title>. <source>IEEE J Biomed Health Inform</source><year>2018</year>;<volume>23</volume>(<issue>6</issue>):<fpage>2551</fpage>–<lpage>62</lpage>. <pub-id pub-id-type="doi">10.1109/JBHI.2018.2884678</pub-id>.<pub-id pub-id-type="pmid">30507542</pub-id></mixed-citation>
    </ref>
    <ref id="ref46">
      <label>46.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Januszewski</surname><given-names>M</given-names></string-name>, <string-name><surname>Kornfeld</surname><given-names>J</given-names></string-name>, <string-name><surname>Li</surname><given-names>PH</given-names></string-name>, <etal>et al.</etal></person-group><article-title>High-precision automated reconstruction of neurons with flood-filling networks</article-title>. <source>Nat Methods</source><year>2018</year>;<volume>15</volume>(<issue>8</issue>):<fpage>605</fpage>–<lpage>10</lpage>. <pub-id pub-id-type="doi">10.1038/s41592-018-0049-4</pub-id>.<pub-id pub-id-type="pmid">30013046</pub-id></mixed-citation>
    </ref>
    <ref id="ref47">
      <label>47.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Konishi</surname><given-names>K</given-names></string-name>, <string-name><surname>Mimura</surname><given-names>M</given-names></string-name>, <string-name><surname>Nonaka</surname><given-names>T</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Practical method of cell segmentation in electron microscope image stack using deep convolutional neural network</article-title>. <source>Microscopy</source><year>2019</year>;<volume>68</volume>(<issue>4</issue>):<fpage>338</fpage>–<lpage>41</lpage>. <pub-id pub-id-type="doi">10.1093/jmicro/dfz016</pub-id>.<pub-id pub-id-type="pmid">31220299</pub-id></mixed-citation>
    </ref>
    <ref id="ref48">
      <label>48.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Bae</surname><given-names>JA</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Functional connectomics spanning multiple areas of mouse visual cortex</article-title>. <source>bioRxiv</source><year>2021</year>. <pub-id pub-id-type="doi">10.1101/2021.07.28.454025</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref49">
      <label>49.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Zheng</surname><given-names>Z</given-names></string-name>, <string-name><surname>Lauritzen</surname><given-names>JS</given-names></string-name>, <string-name><surname>Perlman</surname><given-names>E</given-names></string-name>, <etal>et al.</etal></person-group><article-title>A complete electron microscopy volume of the brain of adult <italic toggle="yes">Drosophila melanogaster</italic></article-title>. <source>Cell</source><year>2018</year>;<volume>174</volume>(<issue>3</issue>):<fpage>730</fpage>–<lpage>43</lpage>. <pub-id pub-id-type="doi">10.1016/j.cell.2018.06.019</pub-id>.<pub-id pub-id-type="pmid">30033368</pub-id></mixed-citation>
    </ref>
    <ref id="ref50">
      <label>50.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Xu</surname><given-names>CS</given-names></string-name>, <etal>et al.</etal></person-group><article-title>A connectome of the adult drosophila central brain</article-title>. <source>bioRxiv</source><year>2020</year>. <pub-id pub-id-type="doi">10.1101/2021.07.28.454025</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref51">
      <label>51.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Dorkenwald</surname><given-names>S</given-names></string-name>, <string-name><surname>McKellar</surname><given-names>CE</given-names></string-name>, <string-name><surname>Macrina</surname><given-names>T</given-names></string-name>, <etal>et al.</etal></person-group><article-title>FlyWire: online community for whole-brain connectomics</article-title>. <source>Nat Methods</source><year>2022</year>;<volume>19</volume>(<issue>1</issue>):<fpage>119</fpage>–<lpage>28</lpage>. <pub-id pub-id-type="doi">10.1038/s41592-021-01330-0</pub-id>.<pub-id pub-id-type="pmid">34949809</pub-id></mixed-citation>
    </ref>
    <ref id="ref52">
      <label>52.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lee</surname><given-names>CT</given-names></string-name>, <string-name><surname>Laughlin</surname><given-names>JG</given-names></string-name>, <string-name><surname>Angliviel de la Beaumelle</surname><given-names>N</given-names></string-name>, <etal>et al.</etal></person-group><article-title>3D mesh processing using GAMer 2 to enable reaction-diffusion simulations in realistic cellular geometries</article-title>. <source>PLoS Comput Biol</source><year>2020</year>;<volume>16</volume>(<issue>4</issue>):<fpage>e1007756</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1007756</pub-id>.<pub-id pub-id-type="pmid">32251448</pub-id></mixed-citation>
    </ref>
    <ref id="ref53">
      <label>53.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Edwards</surname><given-names>J</given-names></string-name>, <string-name><surname>Daniel</surname><given-names>E</given-names></string-name>, <string-name><surname>Kinney</surname><given-names>J</given-names></string-name>, <etal>et al.</etal></person-group><article-title>VolRoverN: enhancing surface and volumetric reconstruction for realistic dynamical simulation of cellular and subcellular function</article-title>. <source>Neuroinformatics</source><year>2014</year>;<volume>12</volume>(<issue>2</issue>):<fpage>277</fpage>–<lpage>89</lpage>. <pub-id pub-id-type="doi">10.1007/s12021-013-9205-2</pub-id>.<pub-id pub-id-type="pmid">24100964</pub-id></mixed-citation>
    </ref>
    <ref id="ref54">
      <label>54.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Garcia-Cantero</surname><given-names>JJ</given-names></string-name>, <string-name><surname>Brito</surname><given-names>JP</given-names></string-name>, <string-name><surname>Mata</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>NeurotessMesh: a tool for the generation and visualization of neuron meshes and adaptive on-the-fly refinement</article-title>. <source>Front Neuroinform</source><year>2017</year>;<volume>11</volume>:<fpage>38</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2017.00038</pub-id>.<pub-id pub-id-type="pmid">28690511</pub-id></mixed-citation>
    </ref>
    <ref id="ref55">
      <label>55.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Brito</surname><given-names>JP</given-names></string-name>, <string-name><surname>Mata</surname><given-names>S</given-names></string-name>, <string-name><surname>Bayona</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Neuronize: a tool for building realistic neuronal cell morphologies</article-title>. <source>Front Neuroanat</source><year>2013</year>;<volume>7</volume>(15):1–10. <pub-id pub-id-type="doi">10.3389/fnana.2013.00015</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref56">
      <label>56.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mörschel</surname><given-names>K</given-names></string-name>, <string-name><surname>Breit</surname><given-names>M</given-names></string-name>, <string-name><surname>Queisser</surname><given-names>G</given-names></string-name></person-group>. <article-title>Generating neuron geometries for detailed three-dimensional simulations using anamorph</article-title>. <source>Neuroinformatics</source><year>2017</year>;<volume>15</volume>:<fpage>247</fpage>–<lpage>69</lpage>. <pub-id pub-id-type="doi">10.1007/s12021-017-9329-x</pub-id>.<pub-id pub-id-type="pmid">28447297</pub-id></mixed-citation>
    </ref>
    <ref id="ref57">
      <label>57.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lee</surname><given-names>CT</given-names></string-name>, <string-name><surname>Laughlin</surname><given-names>JG</given-names></string-name>, <string-name><surname>Moody</surname><given-names>JB</given-names></string-name>, <etal>et al.</etal></person-group><article-title>An open-source mesh generation platform for biophysical modeling using realistic cellular geometries</article-title>. <source>Biophys J</source><year>2020</year>;<volume>118</volume>(<issue>5</issue>):<fpage>1003</fpage>–<lpage>8</lpage>. <pub-id pub-id-type="doi">10.1016/j.bpj.2019.11.3400</pub-id>.<pub-id pub-id-type="pmid">32032503</pub-id></mixed-citation>
    </ref>
    <ref id="ref58">
      <label>58.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Coggan</surname><given-names>JS</given-names></string-name>, <string-name><surname>Calì</surname><given-names>C</given-names></string-name>, <string-name><surname>Keller</surname><given-names>D</given-names></string-name>, <etal>et al.</etal></person-group><article-title>A process for digitizing and simulating biologically realistic oligocellular networks demonstrated for the neuro-glio-vascular ensemble</article-title>. <source>Front Neurosci</source><year>2018</year>;<volume>12</volume>(664):1–12. <pub-id pub-id-type="doi">10.3389/fnins.2018.00664</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref59">
      <label>59.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Wils</surname><given-names>S</given-names></string-name>, <string-name><surname>De Schutter</surname><given-names>E</given-names></string-name></person-group>. <article-title>STEPS: modeling and simulating complex reaction-diffusion systems with Python</article-title>. <source>Front Neuroinform</source><year>2009</year>;<volume>3</volume>:<fpage>15</fpage>. <pub-id pub-id-type="doi">10.3389/neuro.11.015.2009</pub-id>.<pub-id pub-id-type="pmid">19623245</pub-id></mixed-citation>
    </ref>
    <ref id="ref60">
      <label>60.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Chen</surname><given-names>W</given-names></string-name>, <string-name><surname>De Schutter</surname><given-names>E</given-names></string-name></person-group>. <article-title>Parallel STEPS: large scale stochastic spatial reaction-diffusion simulation with high performance computers</article-title>. <source>Front Neuroinform</source><year>2017</year>;<volume>11</volume>:<fpage>13</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2017.00013</pub-id>.<pub-id pub-id-type="pmid">28239346</pub-id></mixed-citation>
    </ref>
    <ref id="ref61">
      <label>61.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Coggan</surname><given-names>JS</given-names></string-name>, <string-name><surname>Bittner</surname><given-names>S</given-names></string-name>, <string-name><surname>Stiefel</surname><given-names>KM</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Physiological dynamics in demyelinating diseases: unraveling complex relationships through computer modeling</article-title>. <source>Int J Mol Sci</source><year>2015</year>;<volume>16</volume>:<fpage>21215</fpage>–<lpage>36</lpage>. <pub-id pub-id-type="doi">10.3390/ijms160921215</pub-id>.<pub-id pub-id-type="pmid">26370960</pub-id></mixed-citation>
    </ref>
    <ref id="ref62">
      <label>62.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ascoli</surname><given-names>GA</given-names></string-name>, <string-name><surname>Maraver</surname><given-names>P</given-names></string-name>, <string-name><surname>Nanda</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Win–win data sharing in neuroscience</article-title>. <source>Nat Methods</source><year>2017</year>;<volume>14</volume>:<fpage>112</fpage>–<lpage>6</lpage>. <pub-id pub-id-type="doi">10.1038/nmeth.4152</pub-id>.<pub-id pub-id-type="pmid">28139675</pub-id></mixed-citation>
    </ref>
    <ref id="ref63">
      <label>63.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Takemura</surname><given-names>SY</given-names></string-name>, <string-name><surname>Xu</surname><given-names>CS</given-names></string-name>, <string-name><surname>Lu</surname><given-names>Z</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Synaptic circuits and their variations within different columns in the visual system of Drosophila</article-title>. <source>Proc Natl Acad Sci</source><year>2015</year>;<volume>112</volume>(<issue>44</issue>):<fpage>13711</fpage>–<lpage>6</lpage>. <pub-id pub-id-type="doi">10.1073/pnas.1509820112</pub-id>.<pub-id pub-id-type="pmid">26483464</pub-id></mixed-citation>
    </ref>
    <ref id="ref64">
      <label>64.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kasthuri</surname><given-names>N</given-names></string-name>, <string-name><surname>Hayworth</surname><given-names>KJ</given-names></string-name>, <string-name><surname>Berger</surname><given-names>DR</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Saturated reconstruction of a volume of neocortex</article-title>. <source>Cell</source><year>2015</year>;<volume>162</volume>(<issue>3</issue>):<fpage>648</fpage>–<lpage>61</lpage>. <pub-id pub-id-type="doi">10.1016/j.cell.2015.06.054</pub-id>.<pub-id pub-id-type="pmid">26232230</pub-id></mixed-citation>
    </ref>
    <ref id="ref65">
      <label>65.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Dorkenwald</surname><given-names>S</given-names></string-name>, <string-name><surname>Schubert</surname><given-names>PJ</given-names></string-name>, <string-name><surname>Killinger</surname><given-names>MF</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Automated synaptic connectivity inference for volume electronmicroscopy</article-title>. <source>Nat Methods</source><year>2017</year>;<volume>14</volume>(<issue>4</issue>):<fpage>435</fpage>–<lpage>42</lpage>. <pub-id pub-id-type="doi">10.1038/nmeth.4206</pub-id>.<pub-id pub-id-type="pmid">28250467</pub-id></mixed-citation>
    </ref>
    <ref id="ref66">
      <label>66.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Dorkenwald</surname><given-names>S</given-names></string-name>, Turner NL, Macrina T, <etal>et al.</etal></person-group><article-title>Binary and analog variation of synapses between cortical pyramidal neurons</article-title>. <source>bioRxiv</source><year>2019</year>. <pub-id pub-id-type="doi">10.1101/2019.12.29.890319</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref67">
      <label>67.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kumbhar</surname><given-names>P</given-names></string-name>, <etal>et al.</etal></person-group><article-title>CoreNEURON: an optimized compute engine for the NEURON simulator</article-title>. <source>Front Neuroinform</source><year>2019</year>;<volume>13</volume>:<fpage>63</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2019.00063</pub-id>.<pub-id pub-id-type="pmid">31616273</pub-id></mixed-citation>
    </ref>
    <ref id="ref68">
      <label>68.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Awile</surname><given-names>O</given-names></string-name>, <string-name><surname>Kumbhar</surname><given-names>P</given-names></string-name>, <string-name><surname>Cornu</surname><given-names>N</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Modernizing the NEURON simulator for sustainability, portability, and performance</article-title>. <source>Front Neuroinform</source><year>2022</year>;<volume>16</volume>(884046):1–21. <pub-id pub-id-type="doi">10.3389/fninf.2022.884046</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref69">
      <label>69.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Grein</surname><given-names>S</given-names></string-name>, <string-name><surname>Stepniewski</surname><given-names>M</given-names></string-name>, <string-name><surname>Reiter</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>1D-3D hybrid modeling—from multi-compartment models to full resolution models in space and time</article-title>. <source>Front Neuroinform</source><year>2014</year>;<volume>8</volume>:<fpage>68</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2014.00068</pub-id>.<pub-id pub-id-type="pmid">25120463</pub-id></mixed-citation>
    </ref>
    <ref id="ref70">
      <label>70.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lasserre</surname><given-names>S</given-names></string-name>, <string-name><surname>Hernando</surname><given-names>J</given-names></string-name>, <string-name><surname>Hill</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><article-title>A neuron membrane mesh representation for visualization of electrophysiological simulations</article-title>. <source>IEEE Trans Vis Comput Graph</source><year>2012</year>;<volume>18</volume>(<issue>2</issue>):<fpage>214</fpage>–<lpage>27</lpage>. <pub-id pub-id-type="doi">10.1109/TVCG.2011.55</pub-id>.<pub-id pub-id-type="pmid">21383404</pub-id></mixed-citation>
    </ref>
    <ref id="ref71">
      <label>71.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>McDougal</surname><given-names>RA</given-names></string-name>, <string-name><surname>Hines</surname><given-names>ML</given-names></string-name>, <string-name><surname>Lytton</surname><given-names>WW</given-names></string-name></person-group>. <article-title>Water-tight membranes from neuronal morphology files</article-title>. <source>J Neurosci Methods</source><year>2013</year>;<volume>220</volume>:<fpage>167</fpage>–<lpage>78</lpage>. <pub-id pub-id-type="doi">10.1016/j.jneumeth.2013.09.011</pub-id>.<pub-id pub-id-type="pmid">24091136</pub-id></mixed-citation>
    </ref>
    <ref id="ref72">
      <label>72.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>McDougal</surname><given-names>RA</given-names></string-name>, <string-name><surname>Shepherd</surname><given-names>GM</given-names></string-name></person-group>. <article-title>3D-printer visualization of neuron models</article-title>. <source>Front Neuroinform</source><year>2015</year>;<volume>9</volume>:<fpage>18</fpage>. <pub-id pub-id-type="doi">10.3389/fninf.2015.00018</pub-id>.<pub-id pub-id-type="pmid">26175684</pub-id></mixed-citation>
    </ref>
    <ref id="ref73">
      <label>73.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Erleben</surname><given-names>K</given-names></string-name>, <string-name><surname>Sporring</surname><given-names>J</given-names></string-name>, <string-name><surname>Henriksen</surname><given-names>K</given-names></string-name>, <etal>et al.</etal></person-group><source>Physics-based animation</source>.
<publisher-name>Charles River Media Hingham</publisher-name>, Massachusetts, <year>2005</year>.</mixed-citation>
    </ref>
    <ref id="ref74">
      <label>74.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Schmid</surname><given-names>F</given-names></string-name>, <string-name><surname>Barrett</surname><given-names>MJ</given-names></string-name>, <string-name><surname>Jenny</surname><given-names>P</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Vascular density and distribution in neocortex</article-title>. <source>Neuroimage</source><year>2019</year>;<volume>197</volume>:<fpage>792</fpage>–<lpage>805</lpage>. <pub-id pub-id-type="doi">10.1016/j.neuroimage.2017.06.046</pub-id>.<pub-id pub-id-type="pmid">28669910</pub-id></mixed-citation>
    </ref>
    <ref id="ref75">
      <label>75.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mihelic</surname><given-names>SA</given-names></string-name>, <string-name><surname>Sikora</surname><given-names>WA</given-names></string-name>, <string-name><surname>Hassan</surname><given-names>AM</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Segmentation-less, automated, vascular vectorization</article-title>. <source>PLoS Comput Biol</source><year>2021</year>;<volume>17</volume>(<issue>10</issue>):<fpage>e1009451</fpage>. <pub-id pub-id-type="doi">10.1371/journal.pcbi.1009451</pub-id>.<pub-id pub-id-type="pmid">34624013</pub-id></mixed-citation>
    </ref>
    <ref id="ref76">
      <label>76.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Chung</surname><given-names>K</given-names></string-name>, <string-name><surname>Deisseroth</surname><given-names>K</given-names></string-name></person-group>. <article-title>CLARITY for mapping the nervous system</article-title>. <source>Nat Methods</source><year>2013</year>;<volume>10</volume>:<fpage>508</fpage>–<lpage>13</lpage>. <pub-id pub-id-type="doi">10.1038/nmeth.2481</pub-id>.<pub-id pub-id-type="pmid">23722210</pub-id></mixed-citation>
    </ref>
    <ref id="ref77">
      <label>77.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Feng</surname><given-names>Y</given-names></string-name>, Cui P, Lu X, <etal>et al.</etal></person-group><article-title>CLARITY reveals dynamics of ovarian follicular architecture and vasculature in three-dimensions</article-title>. <source>Sci Rep</source><year>2017</year>;<volume>7</volume>:<fpage>1</fpage>–<lpage>13</lpage>. <pub-id pub-id-type="doi">10.1038/srep44810</pub-id>.<pub-id pub-id-type="pmid">28127051</pub-id></mixed-citation>
    </ref>
    <ref id="ref78">
      <label>78.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Di Giovanna</surname><given-names>AP</given-names></string-name>, <string-name><surname>Tibo</surname><given-names>A</given-names></string-name>, <string-name><surname>Silvestri</surname><given-names>L</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Whole-brain vasculature reconstruction at the single capillary level</article-title>. <source>Sci Rep</source><year>2018</year>;<volume>8</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>11</lpage>. <pub-id pub-id-type="doi">10.1038/s41598-018-30533-3</pub-id>.<pub-id pub-id-type="pmid">29311619</pub-id></mixed-citation>
    </ref>
    <ref id="ref79">
      <label>79.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Miyawaki</surname><given-names>T</given-names></string-name>, <string-name><surname>Morikawa</surname><given-names>S</given-names></string-name>, <string-name><surname>Susaki</surname><given-names>EA</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Visualization and molecular characterization of whole-brain vascular networks with capillary resolution</article-title>. <source>Nat Commun</source><year>2020</year>;<volume>11</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>11</lpage>. <pub-id pub-id-type="doi">10.1038/s41467-020-14786-z</pub-id>.<pub-id pub-id-type="pmid">31911652</pub-id></mixed-citation>
    </ref>
    <ref id="ref80">
      <label>80.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Abdellah</surname><given-names>M</given-names></string-name>, <string-name><surname>Bilgili</surname><given-names>A</given-names></string-name>, <string-name><surname>Eilemann</surname><given-names>S</given-names></string-name>, <etal>et al.</etal></person-group><part-title>Physically-based rendering of highly scattering fluorescent solutions using path tracing</part-title> In <source>Proceedings of the 37th Annual Conference of the European Association for Computer Graphics: Posters</source>, The Eurographics Association, (<year>2016</year>), <fpage>17</fpage>–<lpage>8</lpage>. <pub-id pub-id-type="doi">10.2312/egp.20161045</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref81">
      <label>81.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Azimipour</surname><given-names>M</given-names></string-name>, <string-name><surname>Baumgartner</surname><given-names>R</given-names></string-name>, <string-name><surname>Liu</surname><given-names>Y</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Extraction of optical properties and prediction of light distribution in rat brain tissue</article-title>. <source>J Biomed Opt</source><year>2014</year>;<volume>19</volume>(<issue>7</issue>):<fpage>075001</fpage>. <pub-id pub-id-type="doi">10.1117/1.JBO.19.7.075001</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref82">
      <label>82.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ramaswamy</surname><given-names>S</given-names></string-name>, <string-name><surname>Courcol</surname><given-names>JD</given-names></string-name>, <string-name><surname>Abdellah</surname><given-names>M</given-names></string-name>, <etal>et al.</etal></person-group><article-title>The neocortical microcircuit collaboration portal: a resource for rat somatosensory cortex</article-title>. <source>Front Neural Circuits</source><year>2015</year>;<volume>9</volume>(44):1–14. <pub-id pub-id-type="doi">10.3389/fncir.2015.00044</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref83">
      <label>83.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Dima</surname><given-names>A</given-names></string-name>, <string-name><surname>Scholz</surname><given-names>M</given-names></string-name>, <string-name><surname>Obermayer</surname><given-names>K</given-names></string-name></person-group>. <article-title>Automatic segmentation and skeletonization of neurons from confocal microscopy images based on the 3-D wavelet transform</article-title>. <source>IEEE Trans Image Process</source><year>2002</year>;<volume>11</volume>:<fpage>790</fpage>–<lpage>801</lpage>. <pub-id pub-id-type="doi">10.1109/tip.2002.800888</pub-id>.<pub-id pub-id-type="pmid">18244675</pub-id></mixed-citation>
    </ref>
    <ref id="ref84">
      <label>84.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>He</surname><given-names>W</given-names></string-name>, <string-name><surname>Hamilton</surname><given-names>TA</given-names></string-name>, <string-name><surname>Cohen</surname><given-names>AR</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Automated three-dimensional tracing of neurons in confocal and brightfield images</article-title>. <source>Microsc Micro Anal</source><year>2003</year>;<volume>9</volume>(<issue>4</issue>):<fpage>296</fpage>–<lpage>310</lpage>. <pub-id pub-id-type="doi">10.1017/S143192760303040X</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref85">
      <label>85.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Markram</surname><given-names>H</given-names></string-name></person-group>. <article-title>The human brain project</article-title>. <source>Sci Am</source><year>2012</year>;<volume>306</volume>:<fpage>50</fpage>–<lpage>5</lpage>.</mixed-citation>
    </ref>
    <ref id="ref86">
      <label>86.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><collab>Blender Foundation.</collab></person-group><source>Blender—3D modelling and rendering package Blender Foundation</source>. (
<publisher-name>Blender Institute</publisher-name>, <publisher-loc>Amsterdam</publisher-loc>, <year>2018</year>). <ext-link xlink:href="http://www.blender.org" ext-link-type="uri">www.blender.org</ext-link>.</mixed-citation>
    </ref>
    <ref id="ref87">
      <label>87.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cignoni</surname><given-names>P</given-names></string-name>, <string-name><surname>Corsini</surname><given-names>M</given-names></string-name>, <string-name><surname>Ranzuglia</surname><given-names>G</given-names></string-name></person-group>. <article-title>Meshlab: an open-source 3D mesh processing system</article-title>. <source>Ercim News</source><year>2008</year>;<volume>73</volume>:<fpage>6</fpage>.</mixed-citation>
    </ref>
    <ref id="ref88">
      <label>88.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Folk</surname><given-names>M</given-names></string-name>, <string-name><surname>Heber</surname><given-names>G</given-names></string-name>, <string-name><surname>Koziol</surname><given-names>Q</given-names></string-name>, <etal>et al.</etal></person-group><part-title>An overview of the HDF5 technology suite and its applications</part-title> In <source>Proceedings of the EDBT/ICDT 2011 Workshop on Array Databases</source>, ACM USA, (<year>2011</year>), <fpage>36</fpage>–<lpage>47</lpage>. <pub-id pub-id-type="doi">10.1145/1966895.1966900</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref89">
      <label>89.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Attene</surname><given-names>M</given-names></string-name></person-group>. <article-title>A lightweight approach to repairing digitized polygon meshes</article-title>. <source>Visual Computer</source><year>2010</year>;<volume>26</volume>:<fpage>1393</fpage>–<lpage>406</lpage>. <pub-id pub-id-type="doi">10.1007/s00371-010-0416-3</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref90">
      <label>90.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Osborn</surname><given-names>W.</given-names></string-name></person-group><part-title>Exploring bit arrays for join processing in spatial data streams</part-title> In: <source>International Conference on Network-Based Information Systems</source>. Springer, (<year>2019</year>), <fpage>73</fpage>–<lpage>85</lpage>. <pub-id pub-id-type="doi">10.1007/978-3-030-29029-0_7</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref91">
      <label>91.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Schwarz</surname><given-names>M</given-names></string-name>, <string-name><surname>Seidel</surname><given-names>H-P.</given-names></string-name></person-group><part-title>Fast parallel surface and solid voxelization on GPUs</part-title>. In: <source>ACM Transactions on Graphics (TOG)</source><volume>29</volume> (<year>2010</year>), <fpage>179, ACM USA</fpage>. <pub-id pub-id-type="doi">10.1145/1882261.1866201</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref92">
      <label>92.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Hasselgren</surname><given-names>J</given-names></string-name>, <string-name><surname>Akenine-Möller</surname><given-names>T</given-names></string-name>, <string-name><surname>Ohlsson</surname><given-names>L</given-names></string-name></person-group>. <article-title>Conservative rasterization</article-title>. <source>GPU Gems</source><year>2005</year>;<volume>2</volume>:<fpage>677</fpage>–<lpage>90</lpage>.</mixed-citation>
    </ref>
    <ref id="ref93">
      <label>93.</label>
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Shin</surname><given-names>H</given-names></string-name>, <string-name><surname>Park</surname><given-names>JC</given-names></string-name>, <string-name><surname>Choi</surname><given-names>BK</given-names></string-name>, <etal>et al.</etal></person-group><part-title>Efficient topology construction from triangle soup</part-title>. In: <source>Geometric Modeling and Processing, 2004. Proceedings</source> (<year>2004</year>), <fpage>359</fpage>–<lpage>64, IEEE</lpage>. <pub-id pub-id-type="doi">10.1109/GMAP.2004.1290060</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref94">
      <label>94.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Akenine-Möllser</surname><given-names>T</given-names></string-name></person-group>. <article-title>Fast 3D triangle-box overlap testing</article-title>. <source>J Graph Tools</source><year>2001</year>;<volume>6</volume>:<fpage>29</fpage>–<lpage>33</lpage>. <pub-id pub-id-type="doi">10.1080/10867651.2001.10487535</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref95">
      <label>95.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Du</surname><given-names>C-J</given-names></string-name>, <string-name><surname>Hawkins</surname><given-names>PT</given-names></string-name>, <string-name><surname>Stephens</surname><given-names>LR</given-names></string-name>, <etal>et al.</etal></person-group><article-title>3D time series analysis of cell shape using Laplacian approaches</article-title>. <source>BMC Bioinform</source><year>2013</year>;<volume>14</volume>:<fpage>1</fpage>–<lpage>16</lpage>. <pub-id pub-id-type="doi">10.1186/1471-2105-14-296</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref96">
      <label>96.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lorensen</surname><given-names>WE</given-names></string-name>, <string-name><surname>Cline</surname><given-names>HE</given-names></string-name></person-group>. <article-title>Marching cubes: a high resolution 3D surface construction algorithm</article-title>. <source>ACM SIGGRAPH Comput Graph</source><year>1987</year>;<volume>21</volume>:<fpage>163</fpage>–<lpage>9</lpage>. <pub-id pub-id-type="doi">10.1109/VISUAL.2004.28</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref97">
      <label>97.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Nielson</surname><given-names>GM.</given-names></string-name></person-group><part-title>Dual marching cubes</part-title>. In: <source>IEEE Visualization</source>, IEEE, <year>2004</year>;<volume>2004</volume>:<fpage>489</fpage>–<lpage>96</lpage>. <pub-id pub-id-type="doi">10.1109/VISUAL.2004.28</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref98">
      <label>98.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Ramaswamy</surname><given-names>S</given-names></string-name>, <string-name><surname>Markram</surname><given-names>H</given-names></string-name></person-group>. <article-title>Anatomy and physiology of the thick-tufted layer 5 pyramidal neuron</article-title>. <source>Front Cell Neurosci</source><year>2015</year>;<volume>9</volume>:<fpage>233</fpage>. <pub-id pub-id-type="doi">10.3389/fncel.2015.00233</pub-id>.<pub-id pub-id-type="pmid">26167146</pub-id></mixed-citation>
    </ref>
    <ref id="ref99">
      <label>99.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Yu</surname><given-names>Z</given-names></string-name>, <string-name><surname>Holst</surname><given-names>MJ</given-names></string-name>, <string-name><surname>Cheng</surname><given-names>Y</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Feature-preserving adaptive mesh generation for molecular shape modeling and simulation</article-title>. <source>J Mol Graph Model</source><year>2008</year>;<volume>26</volume>:<fpage>1370</fpage>–<lpage>80</lpage>. <pub-id pub-id-type="doi">10.1016/j.jmgm.2008.01.007</pub-id>.<pub-id pub-id-type="pmid">18337134</pub-id></mixed-citation>
    </ref>
    <ref id="ref100">
      <label>100.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Shapson-Coe</surname><given-names>A</given-names></string-name>, Januszewski M, Berger DR, <etal>et al.</etal></person-group><article-title>A connectomic study of a petascale fragment of human cerebral cortex</article-title>. <source>bioRxiv</source><year>2021</year>. <pub-id pub-id-type="doi">10.1101/2021.05.29.446289</pub-id>.</mixed-citation>
    </ref>
    <ref id="ref101">
      <label>101.</label>
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Al-Absi</surname><given-names>A-R</given-names></string-name>, <string-name><surname>Christensen</surname><given-names>HS</given-names></string-name>, <string-name><surname>Sanchez</surname><given-names>C</given-names></string-name>, <etal>et al.</etal></person-group><article-title>Evaluation of semi-automatic 3D reconstruction for studying geometry of dendritic spines</article-title>. <source>J Chem Neuroanat</source><year>2018</year>;<volume>94</volume>:<fpage>119</fpage>–<lpage>24</lpage><comment>issn: 0891-0618</comment>. <pub-id pub-id-type="doi">10.1016/j.jchemneu.2018.10.008</pub-id>.<pub-id pub-id-type="pmid">30385398</pub-id></mixed-citation>
    </ref>
    <ref id="ref102">
      <label>102.</label>
      <mixed-citation publication-type="book"><person-group person-group-type="author"><string-name><surname>Chandra</surname><given-names>R</given-names></string-name></person-group>. <source>Parallel Programming in OpenMP</source>.
<publisher-name>Morgan kaufmann</publisher-name>, Burlington, Massachusetts, <year>2001</year>, <comment>ISBN: 9780262533027</comment>.</mixed-citation>
    </ref>
  </ref-list>
</back>
