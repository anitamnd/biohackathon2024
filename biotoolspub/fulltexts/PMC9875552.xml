<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinform Adv</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinform Adv</journal-id>
    <journal-id journal-id-type="publisher-id">bioadv</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics Advances</journal-title>
    </journal-title-group>
    <issn pub-type="epub">2635-0041</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9875552</article-id>
    <article-id pub-id-type="doi">10.1093/bioadv/vbac091</article-id>
    <article-id pub-id-type="publisher-id">vbac091</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Application Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Software</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>FUSTA: leveraging FUSE for manipulation of multiFASTA files at scale</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0003-0939-3835</contrib-id>
        <name>
          <surname>Delehelle</surname>
          <given-names>Franklin</given-names>
        </name>
        <xref rid="vbac091-cor1" ref-type="corresp"/>
        <!--franklin.delehelle@bio.ens.psl.eu-->
        <aff><institution>Département de biologie, Institut de Biologie de l’ENS (IBENS), École normale supérieure, CNRS, INSERM</institution>, Paris 75005, <country country="FR">France</country></aff>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Roest Crollius</surname>
          <given-names>Hugues</given-names>
        </name>
        <aff><institution>Département de biologie, Institut de Biologie de l’ENS (IBENS), École normale supérieure, CNRS, INSERM</institution>, Paris 75005, <country country="FR">France</country></aff>
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Stamatakis</surname>
          <given-names>Alexandros</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="vbac091-cor1">To whom correspondence should be addressed. <email>franklin.delehelle@bio.ens.psl.eu</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2022-11-29">
      <day>29</day>
      <month>11</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>29</day>
      <month>11</month>
      <year>2022</year>
    </pub-date>
    <volume>2</volume>
    <issue>1</issue>
    <elocation-id>vbac091</elocation-id>
    <history>
      <date date-type="received">
        <day>01</day>
        <month>8</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>13</day>
        <month>11</month>
        <year>2022</year>
      </date>
      <date date-type="editorial-decision">
        <day>21</day>
        <month>11</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>28</day>
        <month>11</month>
        <year>2022</year>
      </date>
      <date date-type="corrected-typeset">
        <day>20</day>
        <month>12</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="vbac091.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Motivation</title>
        <p>FASTA files are the <italic toggle="yes">de facto</italic> standard for sharing, manipulating and storing biological sequences, while concatenated in multiFASTA they tend to be unwieldy for two main reasons: (i) they can become big enough that their manipulation with standard text-editing tools is unpractical, either due to slowness or memory consumption; (ii) by mixing metadata (headers) and data (sequences), bulk operations using standard text streaming tools (such as sed or awk) are impossible without including a parsing step, which may be error-prone and introduce friction in the development process.</p>
      </sec>
      <sec id="s2">
        <title>Results</title>
        <p>Here, we present FUSTA (FUse for faSTA), a software utility which makes use of the FUSE technology to expose a multiFASTA file as a hierarchy of virtual files, letting users operate directly on the sequences as independent virtual files through classical file manipulation methods.</p>
      </sec>
      <sec id="s3">
        <title>Availability and implementation</title>
        <p>FUSTA is freely available under the CeCILL-C (LGPLv3-compatible) license at <ext-link xlink:href="https://github.com/delehef/fusta" ext-link-type="uri">https://github.com/delehef/fusta</ext-link>.</p>
      </sec>
      <sec id="s5">
        <title>Supplementary information</title>
        <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics Advances</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>ANR</institution>
            <institution-id institution-id-type="DOI">10.13039/501100001665</institution-id>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="3"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Originally developed for the FASTA program (<xref rid="vbac091-B8" ref-type="bibr">Pearson and Lipman, 1988</xref>), the FASTA format and its multiFASTA extension, containing multiple sequences in a single file, have become the <italic toggle="yes">de facto</italic> standards for sharing, processing and storing DNA, RNA and protein sequences in the bioinformatics community. This success reflects the intrinsic qualities of this format: FASTA files are self-contained, easily readable by both humans and machines, and their use of a text format relying only on the ASCII standard facilitates their diffusion without concerns for neither the encoding nor the management of related bytes in memory on the underlying systems (notably endiannes). Although their encoding, using a whole byte for only a handful of bases, is rather sparse, this limit is easily mitigated by efficient compression tools or intermediate storage formats (<xref rid="vbac091-B5" ref-type="bibr">Kryukov <italic toggle="yes">et al.</italic>, 2020</xref>). However, the fine-grained manipulation of large multiFASTA files is often a hurdle, as attested by the plethora of scripts developed to tackle specific tasks such as sequences extraction, single-line conversion or up- and down-case conversion; all of them reimplementing FASTA parsing to some extent.</p>
    <p>Difficulties generally stem from two root causes. First, multiFASTA files can become quite large (up to dozens of gigabytes), and most text editors are not designed to smoothly manipulate such large files, hindering the classical [open file → region selection → transformation → save file] workflow. Second, the interleaving of metadata (headers) and data (sequences) prevents the use of file-wide transformations (using either text editors or command line utilities), as those could inadvertently affect headers as a side-effect.</p>
    <p>These issues have been partially solved by the development of FASTA index files, which keep track of the precise locations of every sequence in the multiFASTA file, and by other programs dedicated to FASTA files manipulation by implementing a set of operations on them (<xref rid="vbac091-B2" ref-type="bibr">Hunt, 2012</xref>; <xref rid="vbac091-B3" ref-type="bibr">Jackman, 2012</xref>; <xref rid="vbac091-B6" ref-type="bibr">Li, 2012</xref>; <xref rid="vbac091-B9" ref-type="bibr">Shen <italic toggle="yes">et al.</italic>, 2016</xref>).</p>
    <p>However, these approaches result in top-down, fully integrated software workflows, which have to reimplement every text-manipulation operation in their own context of operation, without being able to easily leverage commodities such as standard POSIX piping or powerful text editors.</p>
    <p>Another approach has been the development of language-specific libraries, for instance for Python (<xref rid="vbac091-B1" ref-type="bibr">Cock <italic toggle="yes">et al.</italic>, 2009</xref>), Perl (<xref rid="vbac091-B10" ref-type="bibr">Stajich <italic toggle="yes">et al.</italic>, 2002</xref>) and Rust (<xref rid="vbac091-B4" ref-type="bibr">Köster, 2016</xref>). These approaches, while extremely flexible, are however limited to a single programming language, and are not easily transferable to another language ecosystem.</p>
    <p>Here, we present FUSTA (<bold>FUS</bold>E for FAS<bold>TA</bold>), a new approach to the problem. By making a standard multiFASTA file appear as an arborescence of files representing its individual sequences and metadata, FUSTA let users leverage the whole existing ecosystem of text-manipulation tools without having to worry about technical concerns.</p>
  </sec>
  <sec>
    <title>2 The FUSTA tool</title>
    <p>FUSE (<bold>F</bold>ilesystem in <bold>USE</bold>rspace) is an OS interface available in Linux, macOS and the BSD family, by which userspace programs may present arbitrary data as a hierarchy of pseudo-files and directories within a given directory, called the <italic toggle="yes">mount point</italic>. FUSTA is a command-line tool (thus requiring some degree of familiarity with UNIX-like operating systems) implementing a FUSE module, exposing a single multiFASTA file as a hierarchy of virtual files and folders reflecting the structure and content of the mounted file, letting the user transparently read, edit, and remove contained sequences as if they were standing independently, these operations being transparently applied to the original multiFASTA file. FUSTA must be invoked with a multiFASTA file as an argument, which will be exposed (or mounted) in a directory (the mount point), which will serve as a base point for further operations. FUSTA will populate this folder with the <monospace>labels.txt</monospace>, <monospace>infos.txt</monospace>, and <monospace>infos.csv</monospace> files, and the <monospace>seqs/</monospace>, <monospace>fasta/</monospace>, <monospace>append/</monospace> and <monospace>get</monospace><monospace>/ </monospace>folders. All the following examples assume the user mounted a multiFASTA file and that the current directory is the mount point.</p>
    <p>FUSTA has been designed to operate transparently on a vast variety of multiFASTA files, while preserving the original formatting. Therefore, FUSTA can operate on gapped files (such as alignment result) and wrapped files (without concern for the size or the homogeneity of the padding), files containing empty sequences, and support any character within the sequence themselves, including but not restricted to IUPAC alphabet. The only requirements are (i) lines must be using UNIX delimiters (<monospace>\n</monospace>), (ii) each sequence must have an ID and (iii) sequence IDs must be valid filename characters in the OS where FUSTA is used.</p>
    <p>Although short examples of use will be provdided in the following sections, more thorough ones are provided in the <xref rid="sup1" ref-type="supplementary-material">Supplementary Data</xref>.</p>
    <sec>
      <title>2.1 Labels and general informations</title>
      <p>The <monospace>labels.txt</monospace> virtual text file is a read-only register of all the headers contained in the mounted file, each of them consisting of an ID and an optional description.</p>
      <p>The human-readable <monospace>infos.txt</monospace> and CSV (Comma-Separated Values) -formatted <monospace>infos.csv</monospace> virtual text files contain general information about the mounted multiFASTA file, and a table listing general information on the sequences it contains.</p>
    </sec>
    <sec>
      <title>2.2 Accessing sequences</title>
      <sec>
        <title>2.2.1 Raw sequences</title>
        <p>The <monospace>seqs</monospace><monospace>/ </monospace>directory exposes one virtual text file per sequence in the mounted FASTA file, identified by the ID of the corresponding sequence, each of them containing the raw content of the associated sequence. These files are accessible for both reading and writing—any operation altering the original multiFASTA file being reflected on it—and can thus be removed (deleting them in the mounted file), renamed (changing their ID in the mounted file), edited (accordingly changing the sequence in the mounted file), copied or moved within the folder (<italic toggle="yes">i.e.</italic> renamed) or outside of the folder (<italic toggle="yes">i.e.</italic> removed from the mounted multiFASTA file).</p>
        <p>For instance, <monospace>rm</monospace><monospace>seqs/chrMT.seq</monospace> would remove the <monospace>chrMT</monospace> sequence from the mounted multiFASTA file; and <monospace>for</monospace><monospace>i</monospace><monospace>in</monospace><monospace>seqs/*;</monospace><monospace>do</monospace><monospace>mv</monospace><monospace>seqs/${i}</monospace><monospace>seqs/chr${i};</monospace><monospace>done</monospace> would prepend all existing sequences IDs with <monospace>chr</monospace>.</p>
      </sec>
      <sec>
        <title>2.2.2 FASTA-formatted sequences</title>
        <p>The <monospace>fasta</monospace><monospace>/ </monospace>directory contain one read-only, single-sequence FASTA file per sequence in the mounted FASTA file, allowing a fast direct access to any of them. They transparently behave as standard FASTA files, and can e.g. be copied or used as input in other programs. They are updated in real-time as the user perform state-altering operations in the virtual filesystem.</p>
        <p>For instance, <monospace>cat</monospace><monospace>fasta/chr{X, Y}.fa</monospace><monospace>&gt;</monospace><monospace>$HOME/sex_chrs.fa</monospace> would extract the sequences of the human sex chromosomes in a new multiFASTA file. Similarly, <monospace>blastn</monospace><monospace>mydb.db</monospace><monospace>-query</monospace><monospace>fasta/seq25.fa</monospace> would use the <monospace>seq25</monospace> sequence from the mounted multiFASTA file as the query in a BLAST (<xref rid="vbac091-B7" ref-type="bibr">Lipman and Pearson, 1985</xref>) search, without the need to extract and create temporary intermediate files.</p>
      </sec>
    </sec>
    <sec>
      <title>2.3 Appending sequences</title>
      <p>Any new FASTA or multiFASTA file written to the <monospace>append</monospace><monospace>/ </monospace>directory, be it, <italic toggle="yes">e.g.</italic> by file copy or manually saving a file from a text editor in this folder, will not be conserved as independent files, but immediately be appended to the mounted FASTA file, and these new additions will be reflected in the other virtual files and directories. Other types of files not matching the typical multiFASTA signature (i.e. an ASCII text file whose first line starts with a closing angle bracket) that would be placed there will be ignored, and the mismatch in file types will only appear in the logs. Of note, once FASTA files are modified with FUSTA, accompanying index files required in many standard pipelines will need to be re-generated.</p>
      <p>For instance, <monospace>cp</monospace><monospace>$HOME/more_sequences.fa</monospace><monospace>append</monospace><monospace>/ </monospace>would append the sequences contained in the <monospace>more_sequences.fa</monospace> file to the mounted multiFASTA file.</p>
    </sec>
    <sec>
      <title>2.4 Retrieving subsequences</title>
      <p>The <monospace>get</monospace><monospace>/ </monospace>directory let users access subsequences of sequences following the standard <monospace>ID:STARTBASE-ENDBASE</monospace> format, where indexing is done with a 1-based, closed interval. Although no files are apparently present in this folder, any read access to a file following this pattern in this folder will return the corresponding subsequence on the fly.</p>
      <p>For instance, reading the <monospace>get/chr17:18108706-18179802</monospace> file on the mounted human genome (hg38) would return the sequence of the MYO15A gene. With this mechanism, repeated access to random subsequences of a genome can be easily automatized, while remaining efficient thanks to the use of system-level file caches.</p>
    </sec>
  </sec>
  <sec>
    <title>3 Implementation</title>
    <p>FUSTA is implemented in the Rust programming language and is available for GNU/Linux, macOS, and FreeBSD under the CeCILL-C (LGPLv3-compatible) license. Depending on runtime options, accesses to the sequences in the original FASTA file is performed either through memory-mapped files (default behavior, optimized for fast repeated accesses), directly by the standard seek &amp; read approach (reduces file cache memory consumption, avoids allowing over-allocation of memory), or just by wholly caching the underlying FASTA file in memory (very efficient for numerous random accesses, but requires as much free memory as the size of the multiFASTA file).</p>
    <p>Altering accesses are implemented as a list of memory-cached operations, that are then propagated (on <monospace>fsync</monospace> and <monospace>fsyncdir</monospace> calls or when unmounting) on the original multiFASTA file; this approach balances latency (stemming from on-disk write operations) and memory consumption (for operation caching). The virtual files, however, are kept up to date in real-time. The cache size defaults to 500 MiB, but can be changed by the user to fit their requirements and workflow.</p>
    <p>All the virtual files and folders exposed by FUSTA behave transparently to any process accessing them, be it through the shell or standard POSIX file manipulation primitives, e.g. from other programs or scripts. It should be noted that modifying in any way a mounted multiFASTA file breaks all guarantees regarding the file integrity.</p>
    <p>FUSTA can be run either in foreground mode, in which it will display ongoing operations in the virtual filesystem (different verbosity levels are available); or in background mode (default behavior), where it will detach from the shell from which it has been started. In both cases, unmounting the mount point will cause FUSTA to synchronize potential pending operations, then exit. A complete list of runtime options and a short description are available with the usual help flags (<monospace>or –help</monospace>).</p>
  </sec>
  <sec>
    <title>4 Performances</title>
    <p>While running under the default regime (<italic toggle="yes">i.e.</italic> using <monospace>mmap</monospace> as a cache mechanism), FUSTA is a lightweight tool, using only enough memory to store its internal map of the mounted FASTA file, which ranges from a few hundreds kilobytes to a few dozen megabytes. Thus, FUSTA can be comfortably used on most computers, from laptops to cluster nodes.</p>
    <p>The two main bottlenecks are (i) the initial parsing of the mounted FASTA file, which, empirically, is I/O-bound; (ii) accessing random sequence fragments, which has a fixed cost due to data passing the kernel space—user space barrier, plus multifactorial dependencies on the caching mechanism selected, the storage used (SSD or HDD), the system load, the memory pressure, the IO load, and the spatial proximity of the fragments on disk.</p>
    <p>To compare FUSTA overhead to other alternative solutions, we ran a benchmark (<xref rid="vbac091-T1" ref-type="table">Table 1</xref>) in which we measure the time required to read 1 ,000,000 random sequences from the 6.4 GiB ENSEMBL-108 proteome FASTA file (<ext-link xlink:href="https://ftp.ensembl.org/pub/release-108/emf/ensembl-compara/homologies/Compara.108.protein_default.cds.fasta.gz" ext-link-type="uri">https://ftp.ensembl.org/pub/release-108/emf/ensembl-compara/homologies/Compara.108.protein_default.cds.fasta.gz</ext-link>), containing 4 237 432 sequences from 10 bp to 107 974 bp long, using FUSTA, Bedtools and BioPython.</p>
    <table-wrap position="float" id="vbac091-T1">
      <label>Table 1.</label>
      <caption>
        <p>Resources used to extract a random set of 1 million subsequences from the ENSEMBL 108 proteome</p>
      </caption>
      <table frame="hsides" rules="groups">
        <colgroup span="1">
          <col valign="top" align="left" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
          <col valign="top" align="center" span="1"/>
        </colgroup>
        <thead>
          <tr>
            <th rowspan="1" colspan="1"/>
            <th rowspan="1" colspan="1">FUSTA/mmap</th>
            <th rowspan="1" colspan="1">FUSTA/RAM</th>
            <th rowspan="1" colspan="1">BedTools</th>
            <th rowspan="1" colspan="1">BioPython</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td rowspan="1" colspan="1">Time</td>
            <td rowspan="1" colspan="1">1’41” (22”)</td>
            <td rowspan="1" colspan="1">1’38” (22”)</td>
            <td rowspan="1" colspan="1">34” (16”)</td>
            <td rowspan="1" colspan="1">32” (41”)</td>
          </tr>
          <tr>
            <td rowspan="1" colspan="1">Memory</td>
            <td rowspan="1" colspan="1">1.8 GiB</td>
            <td rowspan="1" colspan="1">11.3 GiB</td>
            <td rowspan="1" colspan="1">1.2 GiB</td>
            <td rowspan="1" colspan="1">11.5 GiB</td>
          </tr>
        </tbody>
      </table>
      <table-wrap-foot>
        <fn id="tblfn1">
          <p><italic toggle="yes">Note</italic>: All tests were run on a 2021 MacBook, featuring an Apple M1 CPU, 16 GiB of RAM and SSD storage. Caching or indexing time is indicated in parentheses.</p>
        </fn>
      </table-wrap-foot>
    </table-wrap>
    <p>In this very I/O intensive benchmark, results illustrate the overhead of dating having to flow through kernel space before being delivered to user space programs, which worsen FUSTA processing time. Indeed, FUSTA with mmap caching works similarly to BedTools, and FUSTA with RAM caching works in a similar fashion to BioPython, which is reflected in their respective memory usage.</p>
  </sec>
  <sec>
    <title>5 Results</title>
    <p>FUSTA, by exposing an arbitrarily large multiFASTA file through a virtual arborescence, solves two of the main obstacles to their efficient handling.</p>
    <p>First, by offering a read and write access to the content of any sequence in a multiFASTA file through standards UNIX file operations, it lets the user leverage any program or script of their choice while restricting memory usage to buffering only the needed sequences instead of the whole multiFASTA file.</p>
    <p>Second, by automatically keeping track of the structure of the mounted multiFASTA file, it lets the user directly access or edit the sequences themselves without having to handle the parsing or buffering of multiFASTA files.</p>
    <p>Thus, manual or automated operations on even large multiFASTA files are simplified.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>vbac091_Supplementary_Data</label>
      <media xlink:href="vbac091_supplementary_data.pdf">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <ack id="ack1">
    <title>Acknowledgements</title>
    <p>We thank the developers of the Rust language and its ecosystem, notably the memmap2 and fuser libraries developers.</p>
    <sec>
      <title>Author contributions</title>
      <p>F.D. designed and implemented FUSTA. H.R.C. provided supervision, advice, testing and helped write the article.</p>
    </sec>
    <sec>
      <title>Funding</title>
      <p>This work was supported by the Inserm cross-cutting program Genomic variability GOLD and by the program <italic toggle="yes">Investissements d’Avenir</italic> launched by the French Government and implemented by ANR with the references ANR-10-LABX-54 MEMOLIFE and ANR-10-IDEX-0001-02 PSL Université Paris.</p>
      <p><italic toggle="yes">Conflict of Interest</italic>: none declared.</p>
    </sec>
  </ack>
  <ref-list id="ref1">
    <title>References</title>
    <ref id="vbac091-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Cock</surname><given-names>P.J.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2009</year>) <article-title>Biopython: freely available python tools for computational molecular biology and bioinformatics</article-title>. <source>Bioinformatics</source>, <volume>25</volume>, <fpage>1422</fpage>–<lpage>1423</lpage>.<pub-id pub-id-type="pmid">19304878</pub-id></mixed-citation>
    </ref>
    <ref id="vbac091-B2">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Hunt</surname><given-names>M.</given-names></string-name></person-group> (<year>2012</year>) Fastaq: Python3 scripts to manipulate fasta and fastq files<italic toggle="yes">Github</italic>. <ext-link xlink:href="https://github.com/sanger-pathogens/Fastaq" ext-link-type="uri">https://github.com/sanger-pathogens/Fastaq</ext-link>.</mixed-citation>
    </ref>
    <ref id="vbac091-B3">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Jackman</surname><given-names>S.</given-names></string-name></person-group> (<year>2012</year>) fastascripts—manipulate fasta files<italic toggle="yes">Github</italic>. <ext-link xlink:href="https://github.com/sjackman/fastascripts" ext-link-type="uri">https://github.com/sjackman/fastascripts</ext-link>.</mixed-citation>
    </ref>
    <ref id="vbac091-B4">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Köster</surname><given-names>J.</given-names></string-name></person-group> (<year>2016</year>) <article-title>Rust-bio: a fast and safe bioinformatics library</article-title>. <source>Bioinformatics</source>, <volume>32</volume>, <fpage>444</fpage>–<lpage>446</lpage>.<pub-id pub-id-type="pmid">26446134</pub-id></mixed-citation>
    </ref>
    <ref id="vbac091-B5">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Kryukov</surname><given-names>K.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>Sequence compression benchmark (SCB) database—a comprehensive evaluation of reference-free compressors for FASTA-formatted sequences</article-title>. <source>GigaScience</source>, <volume>9</volume>, <fpage>giaa072</fpage>.<pub-id pub-id-type="pmid">32627830</pub-id></mixed-citation>
    </ref>
    <ref id="vbac091-B6">
      <mixed-citation publication-type="other"><person-group person-group-type="author"><string-name><surname>Li</surname><given-names>H.</given-names></string-name></person-group> (<year>2012</year>) seqtk toolkit for processing sequences in fasta/q formats. <italic toggle="yes">GitHub</italic>. <ext-link xlink:href="https://github.com/lh3/seqtk" ext-link-type="uri">https://github.com/lh3/seqtk</ext-link>.</mixed-citation>
    </ref>
    <ref id="vbac091-B7">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Lipman</surname><given-names>D.J.</given-names></string-name>, <string-name><surname>Pearson</surname><given-names>W.R.</given-names></string-name></person-group> (<year>1985</year>) <article-title>Rapid and sensitive protein similarity searches</article-title>. <source>Science</source>, <volume>227</volume>, <fpage>1435</fpage>–<lpage>1441</lpage>.<pub-id pub-id-type="pmid">2983426</pub-id></mixed-citation>
    </ref>
    <ref id="vbac091-B8">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Pearson</surname><given-names>W.R.</given-names></string-name>, <string-name><surname>Lipman</surname><given-names>D.J.</given-names></string-name></person-group> (<year>1988</year>) <article-title>Improved tools for biological sequence comparison</article-title>. <source>Proc. Natl. Acad. Sci. USA</source>, <volume>85</volume>, <fpage>2444</fpage>–<lpage>2448</lpage>.<pub-id pub-id-type="pmid">3162770</pub-id></mixed-citation>
    </ref>
    <ref id="vbac091-B9">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Shen</surname><given-names>W.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2016</year>) <article-title>SeqKit: a cross-platform and ultrafast toolkit for FASTA/Q file manipulation</article-title>. <source>PLoS One</source>, <volume>11</volume>, <fpage>e0163962</fpage>.<pub-id pub-id-type="pmid">27706213</pub-id></mixed-citation>
    </ref>
    <ref id="vbac091-B10">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Stajich</surname><given-names>J.E.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2002</year>) <article-title>The Bioperl toolkit: Perl modules for the life sciences</article-title>. <source>Genome Res</source>., <volume>12</volume>, <fpage>1611</fpage>–<lpage>1618</lpage>.<pub-id pub-id-type="pmid">12368254</pub-id></mixed-citation>
    </ref>
  </ref-list>
</back>
