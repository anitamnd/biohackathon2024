<?properties open_access?>
<?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName A++V2.4.dtd?>
<?SourceDTD.Version 2.4?>
<?ConverterInfo.XSLTName springer2nlmx2.xsl?>
<?ConverterInfo.Version 1?>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>BMC Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="epub">1471-2105</issn>
    <publisher>
      <publisher-name>BioMed Central</publisher-name>
      <publisher-loc>London</publisher-loc>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">7035700</article-id>
    <article-id pub-id-type="publisher-id">3414</article-id>
    <article-id pub-id-type="doi">10.1186/s12859-020-3414-0</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Software</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title>NucBreak: location of structural errors in a genome assembly by using paired-end Illumina reads</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author">
        <name>
          <surname>Khelik</surname>
          <given-names>Ksenia</given-names>
        </name>
        <address>
          <email>kseniakh@ifi.uio.no</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Sandve</surname>
          <given-names>Geir Kjetil</given-names>
        </name>
        <address>
          <email>geirksa@ifi.uio.no</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
      </contrib>
      <contrib contrib-type="author">
        <name>
          <surname>Nederbragt</surname>
          <given-names>Alexander Johan</given-names>
        </name>
        <address>
          <email>lex.nederbragt@ibv.uio.no</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff2">2</xref>
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-9329-9974</contrib-id>
        <name>
          <surname>Rognes</surname>
          <given-names>Torbjørn</given-names>
        </name>
        <address>
          <email>torognes@ifi.uio.no</email>
        </address>
        <xref ref-type="aff" rid="Aff1">1</xref>
        <xref ref-type="aff" rid="Aff3">3</xref>
      </contrib>
      <aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 8921</institution-id><institution-id institution-id-type="GRID">grid.5510.1</institution-id><institution>Biomedical Informatics Research Group, Department of Informatics, </institution><institution>University of Oslo, </institution></institution-wrap>PO Box 1080 Blindern, NO-0316 Oslo, Norway </aff>
      <aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 8921</institution-id><institution-id institution-id-type="GRID">grid.5510.1</institution-id><institution>Centre for Ecological and Evolutionary Synthesis, Department of Biosciences, </institution><institution>University of Oslo, </institution></institution-wrap>PO Box 1066 Blindern, NO-0316 Oslo, Norway </aff>
      <aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 0389 8485</institution-id><institution-id institution-id-type="GRID">grid.55325.34</institution-id><institution>Department of Microbiology, </institution><institution>Oslo University Hospital, </institution></institution-wrap>Rikshospitalet, PO Box 4950 Nydalen, NO-0424 Oslo, Norway </aff>
    </contrib-group>
    <pub-date pub-type="epub">
      <day>21</day>
      <month>2</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>21</day>
      <month>2</month>
      <year>2020</year>
    </pub-date>
    <pub-date pub-type="collection">
      <year>2020</year>
    </pub-date>
    <volume>21</volume>
    <elocation-id>66</elocation-id>
    <history>
      <date date-type="received">
        <day>11</day>
        <month>9</month>
        <year>2018</year>
      </date>
      <date date-type="accepted">
        <day>12</day>
        <month>2</month>
        <year>2020</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s). 2020</copyright-statement>
      <license license-type="OpenAccess">
        <license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p>
      </license>
    </permissions>
    <abstract id="Abs1">
      <sec>
        <title>Background</title>
        <p id="Par1">Advances in whole genome sequencing strategies have provided the opportunity for genomic and comparative genomic analysis of a vast variety of organisms. The analysis results are highly dependent on the quality of the genome assemblies used. Assessment of the assembly accuracy may significantly increase the reliability of the analysis results and is therefore of great importance.</p>
      </sec>
      <sec>
        <title>Results</title>
        <p id="Par2">Here, we present a new tool called NucBreak aimed at localizing structural errors in assemblies, including insertions, deletions, duplications, inversions, and different inter- and intra-chromosomal rearrangements. The approach taken by existing alternative tools is based on analysing reads that do not map properly to the assembly, for instance discordantly mapped reads, soft-clipped reads and singletons. NucBreak uses an entirely different and unique method to localise the errors. It is based on analysing the alignments of reads that are properly mapped to an assembly and exploit information about the alternative read alignments. It does not annotate detected errors. We have compared NucBreak with other existing assembly accuracy assessment tools, namely Pilon, REAPR, and FRCbam as well as with several structural variant detection tools, including BreakDancer, Lumpy, and Wham, by using both simulated and real datasets.</p>
      </sec>
      <sec>
        <title>Conclusions</title>
        <p id="Par3">The benchmarking results have shown that NucBreak in general predicts assembly errors of different types and sizes with relatively high sensitivity and with lower false discovery rate than the other tools. Such a balance between sensitivity and false discovery rate makes NucBreak a good alternative to the existing assembly accuracy assessment tools and SV detection tools. NucBreak is freely available at <ext-link ext-link-type="uri" xlink:href="https://github.com/uio-bmi/NucBreak">https://github.com/uio-bmi/NucBreak</ext-link> under the MPL license.</p>
      </sec>
    </abstract>
    <kwd-group xml:lang="en">
      <title>Keywords</title>
      <kwd>Genome assembly</kwd>
      <kwd>Assembly errors</kwd>
      <kwd>Illumina paired-end reads</kwd>
      <kwd>Assembly accuracy assessment</kwd>
      <kwd>Structural variant detection</kwd>
    </kwd-group>
    <funding-group>
      <award-group>
        <funding-source>
          <institution-wrap>
            <institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/501100005366</institution-id>
            <institution>Universitetet i Oslo</institution>
          </institution-wrap>
        </funding-source>
        <award-id>Computational Life Science initiative (CLSi)</award-id>
        <principal-award-recipient>
          <name>
            <surname>Khelik</surname>
            <given-names>Ksenia</given-names>
          </name>
        </principal-award-recipient>
      </award-group>
    </funding-group>
    <custom-meta-group>
      <custom-meta>
        <meta-name>issue-copyright-statement</meta-name>
        <meta-value>© The Author(s) 2020</meta-value>
      </custom-meta>
    </custom-meta-group>
  </article-meta>
</front>
<body>
  <sec id="Sec1">
    <title>Background</title>
    <p id="Par11">Advances in whole genome sequencing technologies have led to a greatly increased number of organisms with sequenced genomes over the recent years. This has provided the opportunity to make genomic and comparative genomic analysis of a vast variety of organisms. The analysis results are highly dependent on the quality of the genome assemblies used. Any errors in an assembly directly impair analysis predictions and inferences based upon them [<xref ref-type="bibr" rid="CR1">1</xref>]. The assessment of assembly accuracy may significantly increase the reliability of analysis results and is therefore of great importance.</p>
    <p id="Par12">There are several tools developed for genome assembly accuracy assessment, i.e. REAPR [<xref ref-type="bibr" rid="CR2">2</xref>], FRCbam [<xref ref-type="bibr" rid="CR3">3</xref>] and Pilon [<xref ref-type="bibr" rid="CR4">4</xref>]. These tools identify regions with various inconsistencies in the alignments of reads mapped back to the assembly and detect the locations of assembly errors. The inconsistencies include abnormal read coverage, abnormal distance between reads in a pair relative to the insert size, wrong orientation of one or both reads in a pair, and a large percentage of soft-clipped reads (reads that are partly mapped to an assembly: the one end of the read is mapped to the reference while the second is not) and singletons (reads whose partner was not mapped). The tools are aimed at detecting structural errors including medium to long insertions and deletions, as well as inversions, duplications, and inter- and intra-chromosomal rearrangements. Pilon also enables detection of small insertions, deletions and substitutions and performs local assembly to fix detected assembly errors where possible.</p>
    <p id="Par13">The genome assembly accuracy assessment problem is very similar to the structural variant (SV) detection problem. The tools developed to detect structural variants between genomes of the same or closely related species, such as Wham [<xref ref-type="bibr" rid="CR5">5</xref>], BreakDancer [<xref ref-type="bibr" rid="CR6">6</xref>] and Lumpy [<xref ref-type="bibr" rid="CR7">7</xref>], are based on the approaches similar to the ones implemented in REAPR, Pilon and FRCbam. They exploit the same types of inconsistencies in the read alignments in their workflow. The usage of such tools may be a possible alternative to the tools developed for genome assembly error detection.</p>
    <p id="Par14">In addition to the tools mentioned above, it is also possible to use optical mapping data [<xref ref-type="bibr" rid="CR8">8</xref>] or reads produced by the third-generation sequencing technologies, such as Single-molecule real-time (SMRT) technology developed by Pacific BioSciences (PacBio) [<xref ref-type="bibr" rid="CR9">9</xref>] and the Oxford Nanopore Technologies (ONT) [<xref ref-type="bibr" rid="CR10">10</xref>]. Optical mapping data and PacBio reads has been already successfully used to detect assembly errors [<xref ref-type="bibr" rid="CR11">11</xref>] and to detect structural variants [<xref ref-type="bibr" rid="CR12">12</xref>], respectively. The use of this kind of technology and data may be more straightforward and accurate for detection of assembly errors than relying on paired-end data, but it would also require additional resources and expenses that may not be available. The methods presented in this work can be applied without additional data.</p>
    <p id="Par15">Here we present a new tool called NucBreak aimed at genome assembly accuracy assessment. In contrast to other tools examining reads that do not map very well to the assembly, like discordantly mapped reads, soft-clipped reads and singletons, NucBreak rather investigates the reads that map well. NucBreak analyses the alignments of these properly mapped reads (where both reads in a pair are fully aligned in correct orientation at a reasonable distance) and exploits information about the alternative read alignments to detect the locations of assembly structural errors. The tool has been compared to REAPR, FRCbam and Pilon, the only existing tools detecting assembly error locations, as well as BreakDancer, Lumpy, and Wham. We have chosen BreakDancer, Lumpy, and Wham because they were developed to perform the analysis in whole genomes of different species and detect various types of structural variants compared to other existing SV detection tools. All tools have been tested for their ability to detect errors in assemblies by using either simulated or real datasets. The test results have shown that NucBreak enables prediction of assembly errors with lower false discovery rate (FDR) than other tools, keeping relatively high level of sensitivity at the same time.</p>
  </sec>
  <sec id="Sec2">
    <title>Implementation</title>
    <p id="Par16">NucBreak is a tool created to detect structural errors in an assembly by using paired-end Illumina reads. The reads are first mapped to the assembly, and then the mapping results are rigorously analysed to detect the assembly errors locations. The NucBreak workflow is shown in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S1).</p>
    <sec id="Sec3">
      <title>Read mapping</title>
      <p id="Par17">The error detection process starts with mapping reads to the assembly by using Bowtie2 [<xref ref-type="bibr" rid="CR13">13</xref>]. Bowtie2 is run separately for each read file with the parameter settings “<italic>--sensitive_local --ma 1 -a</italic>” to report all local alignments with an added nucleotide match bonus. The resulting sam files contain all possible alignments for each read not depending on the second read in a pair. A read alignment may contain either a full read sequence or a read sequence clipped on one or both ends. The read clipping is performed when one or both ends of a read accumulate a high number of differences compared to the assembly. The clipped part of a read may be mapped to another location in the assembly or remained unmapped. There may be a few short substitutions, insertions and/or deletions inside mapped reads or their parts.</p>
    </sec>
    <sec id="Sec4">
      <title>Properly mapped read pair formation and categorization</title>
      <p id="Par18">Once the mapping results have been obtained, NucBreak combines reads into properly mapped read pairs and categorizes the pairs into several groups. A pair of reads is considered to be properly mapped if all of the five following conditions are fulfilled:
<list list-type="order"><list-item><p id="Par19">Both reads are mapped to the same assembly sequence.</p></list-item><list-item><p id="Par20">The reads have different orientations relative to the assembly sequence.</p></list-item><list-item><p id="Par21">The read with the reverse orientation is located at the same position or further down on the sequence compared to the mapping locations of the forward-oriented read.</p></list-item><list-item><p id="Par22">The beginnings of the read sequences (the first bases of the read sequences as they are given in the input files) are not clipped. The exception is made only for the forward-oriented read mapped to the very beginning of the assembly sequence and the reverse-oriented read mapped to the very end of the assembly sequence.</p></list-item><list-item><p id="Par23">The reads have a proper insert size (see (Additional file <xref rid="MOESM1" ref-type="media">1</xref>) for the details about the insert size detection approach).</p></list-item></list></p>
      <p id="Par24">The alignments of properly mapped reads may contain short substitutions, insertions and deletions.</p>
      <p id="Par25">To combine reads into properly mapped read pairs, NucBreak analyses all possible combinations of the read mapping locations for each input read pair and forms properly mapped read pairs from those reads whose locations satisfy the five conditions mentioned above. Each input read pair may give rise to none, one or several properly mapped read pairs (see (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S2)).</p>
      <p id="Par26">Then the created properly mapped read pairs are divided into 4 groups, based on the presence of alternative alignments for each read in a pair:
<list list-type="order"><list-item><p id="Par27">Single group - consisting of pairs where both reads are mapped uniquely to a sequence. The pairs from this group point to the non-repeated regions of a genome (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S3a).</p></list-item><list-item><p id="Par28">Single_Multiple group - consisting of pairs where the forward-oriented read is mapped uniquely to a sequence and the reverse-oriented read has multiple alternative mapping locations. The pairs point to the regions where non-repeated regions end and repeated regions start (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3b).</p></list-item><list-item><p id="Par29">Multiple_Single group - consisting of pairs where the forward-oriented read has multiple alternative mapping locations and the reverse-oriented read is mapped uniquely to a sequence. The pairs point to the regions where repeated regions end and non-repeated regions start (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S3c).</p></list-item><list-item><p id="Par30">Multiple group - consisting of pairs where both reads have multiple mapping locations. The pairs point to the repeated regions of a genome (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Fig. S3d).</p></list-item></list></p>
    </sec>
    <sec id="Sec5">
      <title>Read path creation and path gap detection</title>
      <p id="Par31">During the third step, reads from each group are merged together to form continuous paths. This is done separately for forward- and reverse-oriented reads. Only neighbouring reads having an overlap of more than 5 bases are involved in the merging process. There may be small substitution, deletion and insertion differences in reads inside the overlapping regions. If neighbouring reads overlap with 5 or less bases, the overlapped bases are clipped, creating an uncovered region between them. The 5-base limit has been introduced to exclude overlaps appearing due to uncertainties in alignment rather than actual overlaps of positions. The obtained paths represent the fragments of a genome that are considered free of assembly errors.</p>
      <p id="Par32">Usually, several paths of the same type and orientation cover a full assembly sequence. The assembly sequence regions located between paths of the same type and orientation are called path gaps (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4). The path gaps may potentially contain assembly errors and, therefore, are extensively analysed by NucBreak during the next step.</p>
    </sec>
    <sec id="Sec6">
      <title>Path gap analysis</title>
      <p id="Par33">There can be several reasons for path gaps to appear. First, a path gap may appear due to the presence of an assembly error in this region. Second, a path gap may correspond to a region covered by paths of other types. Third, a path gap may appear when there is not enough read coverage to provide the required overlap between reads. Such a situation may occur when: (1) a genome or its fragments were sequenced with a very low coverage, (2) read pairs from these regions are absent due to sequencing errors in reads, (3) read pairs are filtered out due to a violation of condition 4: when there are sequencing errors in the beginning of one of the read in a pair, and (4) there are gaps (a subsequence of N’s) in the genome.</p>
      <p id="Par34">The goal of the fourth step is to exclude path gaps that do not contain assembly errors. NucBreak starts with excluding path gaps that do not overlap with path gaps between paths of the same type in the opposite orientation (Fig. <xref rid="Fig1" ref-type="fig">1a</xref>). Such situations are often observed in Single and Multiple paths and are due to low coverage by either forward- or reverse-oriented reads.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Path gap exclusion. The black line represents an assembly. The assembly regions marked by red colour correspond to repeated regions. The repeated regions are identical or near-identical copies of the same repeat or copies of different repeats. The arrows represent read paths. (<bold>a</bold>) Exclusion of a path gap fully covered by a read path of the same type and another orientation. The rectangles between read paths indicate path gaps. Path gap 1 is excluded due to the presence of a required read path. The path gaps marked by number 2 are not excluded and require further analysis. (<bold>b</bold>) Exclusion of a path gap appeared due to alternation of paths of different types. The black squares mark the locations of assembly errors. The rectangles between read paths indicate path gaps that are not excluded. The path gaps marked by number 3 is not excluded due to the repetition of read path types (e.g. the Single forward-oriented path is followed by another Single forward-oriented path instead of the Single-Multiple forward-oriented path). The path gaps marked by number 4 are not excluded because one read path type is missed (e.g. Multiple forward-oriented path is followed by Single forward-oriented path instead of Multiple-Single forward-oriented path)</p></caption><graphic xlink:href="12859_2020_3414_Fig1_HTML" id="MO1"/></fig></p>
      <p id="Par35">Then NucBreak detects path gaps appearing because of the alternation of paths of different types. To accomplish this, NucBreak analyses the location order of path types and the locations of paths separately for the forward- and reverse-oriented paths. The path types should appear in a fixed order, like a cycle: Single, Single_Multiple, Multiple, Multiple_Single, Single, and so on (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S4). The cycle may start with any type. If one type is skipped or repeated (Fig. <xref rid="Fig1" ref-type="fig">1b</xref>), it indicates an error in this region. There is also a requirement for the locations of paths: both a path and the following path gap should overlap with the next path with more than 5 bases. However, we make some exceptions for type order and path locations in special cases (see Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figure S5 for the details). In this way, NucBreak excludes a path gap if the beginning of the path gap is covered with a path that has a correct type order and location.</p>
      <p id="Par36">Unfortunately, it is not always possible to exclude all path gaps located in the assembly sequence regions that do not contain errors. The path gaps that have appeared due to low read coverage or are located in the regions containing subsequences of N’s of appropriate lengths are never excluded.</p>
    </sec>
    <sec id="Sec7">
      <title>Error location adjustment</title>
      <p id="Par37">All non-excluded path gaps are treated as containing assembly errors. To narrow down the region where an error is located, NucBreak shortens the path gaps during the fifth step. To accomplish this, it first combines the paths of all types with the same direction together. Then for each path gap, it determines whether the end of any path is inside the path gap region. If it is, the path gap beginning is shifted to the path end (or to the right-most end in case of several paths detected, Fig. <xref rid="Fig2" ref-type="fig">2a</xref>). Finally, it determines whether the beginning of any path is inside the path gap region. If it is, the path gap end is shifted to the path beginning (or to the left-most beginning in case of several paths detected, Fig. <xref rid="Fig2" ref-type="fig">2b</xref>). If any path gap is fully covered by any path, then this path gap is excluded.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Error location adjustment. The black line represents an assembly. The arrows represent read paths of any type. The rectangles represent initial path gaps. The red areas in the rectangles in cases a) and b) correspond to the adjusted path gaps with the shortened beginning and end, respectively</p></caption><graphic xlink:href="12859_2020_3414_Fig2_HTML" id="MO2"/></fig></p>
      <p id="Par38">To pinpoint the locations of errors, NucBreak first finds the union of the adjusted path gaps of all types. This is carried out separately for path gaps located on forward- and reverse-oriented paths. Then NucBreak finds the intersection of the obtained forward- and reverse-oriented unions of regions and pinpoints the error locations. Errors in the beginning and at the end of a sequence (inside the regions with lengths equal to the read length) are excluded by NucBreak, because in most cases they are due to the lack of perfectly mapped read pairs.</p>
    </sec>
    <sec id="Sec8">
      <title>Data sets</title>
      <p id="Par39">For the testing purposes, we created four different datasets. For the first and second datasets, we constructed artificial reference genomes and assemblies, and generated simulated Illumina paired-end read libraries. In both datasets, the reference genomes were constructed from random DNA sequences by introducing different interspersed and tandem repeats. The assemblies were generated from the reference genomes sequences by introducing controlled modifications (e.g. relocations, deletions, duplications of different fragments and so on). The detailed description of introduced modifications is given in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S1). Depending on the datasets, different approaches were applied to create an Illumina paired-end read library in each case. For the first dataset, one read library was generated with the help of ART (Q version 2.5.8) [<xref ref-type="bibr" rid="CR14">14</xref>] run with the “-ss MSv3 -l 250 -p -m 700 -s 40” settings with 40x read coverage for each reference genome. For the second dataset, read libraries with 5x,10x, 40x,100x, and 200x read coverages were generated by ART run with the “-ss MSv3 -l 250 -p -m 700 -s 40” settings.</p>
      <p id="Par40">The third dataset was created on the base of the data provided by the Assemblathon 1 project [<xref ref-type="bibr" rid="CR15">15</xref>]. An artificially evolved human chromosome 13 (hg18/NCBI36), simulated Illumina paired-end read library with 40x coverage, and genome assembly obtained by PE-assembler [<xref ref-type="bibr" rid="CR16">16</xref>] were downloaded from the Assemblathon 1 website [<xref ref-type="bibr" rid="CR17">17</xref>]. To increase the number of errors and to introduce more variability of error types, we deleted all gaps from the assembly.</p>
      <p id="Par41">The fourth dataset consisted of 8 bacterial genomes (<italic>Bordetella pertussis</italic> str. J081, <italic>Brucella melitensis</italic> str. 1, <italic>Enterobacter cloacae</italic> str. AR_0136, <italic>Escherichia coli</italic> str. 2014C-3599, <italic>Klebsiella pneumoniae</italic> str. SGH10, <italic>Pseudomonas aeruginosa</italic> str. AR_0095, <italic>Salmonella enterica</italic> str. CFSAN047866, and <italic>Staphylococcus aureus</italic> str. CFSAN007896), MiSeq Illumina paired-end reads libraries provided for these genomes, and assemblies generated using the ABySS (version 2.0.2) [<xref ref-type="bibr" rid="CR18">18</xref>], SPAdes (version 3.11.0) [<xref ref-type="bibr" rid="CR19">19</xref>] and Velvet (version 1.2.10) [<xref ref-type="bibr" rid="CR20">20</xref>] assemblers. The genomes were downloaded from the NCBI database [<xref ref-type="bibr" rid="CR21">21</xref>], and the reads were downloaded from the EBI database [<xref ref-type="bibr" rid="CR22">22</xref>]. The genomes accession numbers and information about the read libraries are given in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S2). The parameter settings used to run ABySS, SPAdes and Velvet are described in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>). As in the third dataset, we have removed all gaps from the assemblies before testing.</p>
    </sec>
  </sec>
  <sec id="Sec9">
    <title>Results</title>
    <p id="Par42">We have created a tool called NucBreak that is aimed at detection of structural errors in assemblies by analysing the placements of properly mapped reads and exploiting information about the alternative alignments of the reads. In this section, we examine the ability of NucBreak as well as REAPR (version 1.0.18), FRCbam (version 1.2.0), Pilon (version 1.22), BreakDancer (version 1.3.6), Lumpy (version 0.2.13), and Wham (version 1.8.0) to detect assembly errors in real and simulated datasets.</p>
    <p id="Par43">All tools, except REAPR, FRCbam and partly NucBreak, were run with their default settings. The parameter settings used to run REAPR, FRCbam and NucBreak are described in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>). To validate the results, we compared the obtained results of each test with the ground truth results consisting of real errors. Depending on the test performed, the ground truth results were generated during the simulation process or produced using NucDiff [<xref ref-type="bibr" rid="CR23">23</xref>], the tool which enables comparison of reference genomes with assemblies. NucDiff was run with the default parameter settings. The ground truth and obtained results were compared using BEDTools (version 2.17.0) [<xref ref-type="bibr" rid="CR24">24</xref>] to get sensitivity and FDR for each tool and each dataset (see (Additional file <xref rid="MOESM1" ref-type="media">1</xref>) for more details).</p>
    <p id="Par44">We studied sensitivity and FDR for each tool allowing various degrees of slack in the location of each region in the comparison by adding flanking regions of different sizes to the ground truth regions. We added 1, 5, 10, 20, 50, 100, 200, 400, and 600 bp both up- and downstream of each ground truth entry. The flanking regions were introduced to investigate the positional accuracy of the tools tested. In addition, for the flanking region size equal to 600 bp, we identified the ability of each tool to detect ground truth errors depending on the read coverage value in one of the tests.</p>
    <sec id="Sec10">
      <title>Accuracy assessment in simulated datasets</title>
      <p id="Par45">We created a simulated dataset consisting of ten artificial reference genomes, assemblies, and Illumina paired-end read libraries, as described in Section <xref rid="Sec8" ref-type="sec">Data sets</xref> (the first dataset), and ran NucBreak, Pilon, REAPR, FRCbam Lumpy, Wham and BreakDancer to detect errors in the assemblies. To enable validation of the obtained results, we also generated the ground truth results during the simulation process. All ground truth errors were divided into several groups according to their types and sizes: insertion, duplication, tandem duplication, deletion, deletion of interspersed repeats or their parts, deletion of tandem repeats or their parts, inversion, relocation (intra-chromosomal rearrangements) with either inserted regions between misjoined regions or without them, and relocation with overlapped misjoined regions groups with error sizes between 10 and 49 bp, 50 and 299 bp, and greater than 299 bp. The overall sensitivity and FDR are presented in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. The sensitivity for each ground truth error group is shown in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S6-S8). The number of ground truth errors in each group is given in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S3).
<fig id="Fig3"><label>Fig. 3</label><caption><p>ROC-like plot based on the simulated datasets with varying flanking region size. The sensitivity and false discovery rate (FDR) are plotted for seven tools (indicated with different colours) using varying flanking region sizes (indicated with different symbols). The flanking region size corresponds to the amount of slack allowed in the position of correct predictions</p></caption><graphic xlink:href="12859_2020_3414_Fig3_HTML" id="MO3"/></fig></p>
      <p id="Par46">As can be seen from (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S6-S8), the sensitivity of each tool largely depends on the types and sizes of errors and size of the flanking region. For Pilon and NucBreak, the sensitivity constantly increases with respect to flanking region size increment in all cases where sensitivity is larger than zero. Wham’s and REAPR’s sensitivity either increases with respect to the flanking region size increase or remains approximately the same, depending on the error types and sizes. In case of BreakDancer, FRCbam and Lumpy, sensitivity increases starting from medium- or long-sized flanking regions depending on an error group.</p>
      <p id="Par47">As expected, all tools perform best with 600 bp flanking region. For this flanking region size, Pilon obtains sensitivity equal to 1 in almost all error groups and outperforms other tools in many cases. NucBreak’s and REAPR’s sensitivity is the same or close to Pilon’s one in most groups. Wham shows relatively high sensitivity in many groups, while BreakDancer, FRCbam and Lumpy have low sensitivity in almost all cases.</p>
      <p id="Par48">As shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref>, the overall sensitivity increases rapidly for FRCbam, NucBreak, Pilon, and REAPR together with the flanking region size increase and is more than 0.8 with 600 bp flanking region for all the mentioned tools, except FRCbam. The overall sensitivity for the other tools does not increase significantly and is less than 0.5 for all flanking regions. Overall FDR does not change much for Wham and FRCbam and decreases rapidly for all other tools together with the flanking region size increase. All tools except Pilon and FRCbam reach FDR less than 0.2 with a 600 bp flanking region.</p>
    </sec>
    <sec id="Sec11">
      <title>Accuracy assessment in simulated datasets depending on read coverage</title>
      <p id="Par49">To explore the influence of read coverage on the results of NucBreak, Pilon, FRCbam, REAPR, Wham, Lumpy, and BreakDancer, we created ten simulated reference genomes, assemblies, and Illumina paired-end read libraries with 5x, 10x, 40x, 100x, and 200x coverage as described in the Section <xref rid="Sec8" ref-type="sec">Data sets</xref> (the second dataset). As well as in the Section 3.1, the ground truth errors were generated during simulation process and divided into different groups based on the error types and size. The sensitivity and FDR values were calculated with a 600 bp flanking region. The 600 bp flanking region was chosen because all tools performed best with this flanking region size in the previous section. The sensitivity for each ground truth error group are presented in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S9-S11) and the overall sensitivity and FDR are shown in Fig. <xref rid="Fig4" ref-type="fig">4</xref>.
<fig id="Fig4"><label>Fig. 4</label><caption><p>ROC-like plot based on the simulated datasets with varying sequencing coverage. The sensitivity and false discovery rate (FDR) are plotted for seven tools (indicated with different colours) using varying sequencing coverage (indicated with different symbols)</p></caption><graphic xlink:href="12859_2020_3414_Fig4_HTML" id="MO4"/></fig></p>
      <p id="Par50">As indicated in provided plots, NucBreak’s and REAPR’s sensitivity either decreases with the coverage increase or is approximately the same starting from 10x coverage. Pilon’s and FRCbam’s sensitivity decreases or increases depending on the error type and coverage values, while in case of Wham, BreakDancer, and Lumpy sensitivity always increases, except a small number of cases when the sensitivity remains approximately the same.</p>
      <p id="Par51">The overall sensitivity decreases for NucBreak and REAPR and increases for Pilon, Wham, and Lumpy together with the coverage increase. However, the overall sensitivity for NucBreak and REAPR never drops below 0.7. In the case of BreakDancer and FRCbam the overall sensitivity either increases or decreases depending on coverage values. REAPR, NucBreak, and Pilon demonstrate a fast decrease of FDR with up to 40x coverage. Starting from 40x coverage, FDR remains the same or slightly decreases. In the case of FRCbam, BreakDancer, and Wham, FDR remains approximately the same for all coverage values or slightly changes with coverage increase. In contrast to other tools, Lumpy is the only tool that demonstrates a rapid increase of FDR together with the coverage increase.</p>
    </sec>
    <sec id="Sec12">
      <title>Accuracy assessment in an assembly obtained from simulated reads</title>
      <p id="Par52">To validate the ability of NucBreak, Pilon, REAPR, FRCbam, Lumpy, BreakDancer, and Wham to detect errors in real assemblies, we ran the tools with a dataset where reads were created for an artificially evolved diploid genome and an assembly was generated by the PE-assembler (see Section <xref rid="Sec8" ref-type="sec">Data sets</xref>, the third dataset for details). The ground truth results were obtained by comparing the assembly with the reference genome using NucDiff. All ground truth errors were divided into types according to the error types and sizes provided by NucDiff: substitution, insertion, duplication, tandem duplication, deletion, deletion of interspersed repeats or their parts, deletion of tandem repeats or their parts, inversion, reshuffling (several neighbouring genome regions are placed in a different order in an assembly), and two groups of rearrangements (arrangement and rearrangement with overlap) with sizes between 10 and 49 bp, between 50 and 299 bp, and greater than 299 bp. The rearrangement group consisted of relocation and translocation (an inter-chromosomal rearrangement) errors with either inserted regions between misjoined regions or without them. The relocation with overlap group contained relocation and translocation errors with overlapped misjoined regions. The sensitivity for each ground truth error group and overall sensitivity and FDR are presented in Fig. <xref rid="Fig5" ref-type="fig">5</xref> and (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S12-S15). The number of ground truth errors in each group is given in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: TableS3).
<fig id="Fig5"><label>Fig. 5</label><caption><p>ROC-like plot based on Assemblathon 1 datasets with varying flanking region size. The sensitivity and false discovery rate (FDR) are plotted for seven tools (indicated with different colours) using varying flanking region sizes (indicated with different symbols). The flanking region size corresponds to the amount of slack allowed in the position of correct predictions</p></caption><graphic xlink:href="12859_2020_3414_Fig5_HTML" id="MO5"/></fig></p>
      <p id="Par53">As we see from (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S12-S15), the sensitivity increases with increasing flanking region size for all tools in all groups. As expected, all tools perform best with a 600 bp flanking region. For this flanking region size, Pilon shows high sensitivity in almost all error groups and outperforms other tools in many cases. The sensitivity results of the other tools largely depend on types and sizes of detected errors. However, all tools show high sensitivity in some groups.</p>
      <p id="Par54">The overall sensitivity is quite low for all tools for all flanking regions. Such a low sensitivity can be explained by the fact that there are a lot of small substitutions in the tested assemblies (225,721 small substitutions versus 6933 small deletions, which form the second largest ground truth error group), that are rarely detected by any tool. The overall FDR decreases together with increasing flanking region size for all tools. All tools except FRCbam obtained the lowest FDR value with a 600 bp flanking region. The FDR values for FRCbam are greater than 0.8 for all flanking region sizes.</p>
    </sec>
    <sec id="Sec13">
      <title>Accuracy assessment in an assembly obtained from real reads</title>
      <p id="Par55">We also explored the ability of NucBreak, Pilon, REAPR, FRCbam, Lumpy, BreakDancer to detect errors in assemblies obtained from real reads. For this purpose, we downloaded reads for eight bacterial genomes, generated assemblies by using ABySS, SPAdes, and Velvet (see Section <xref rid="Sec8" ref-type="sec">Data sets</xref> for full description of data and assembler parameter settings used) and ran NucBreak, Pilon, REAPR, FRCbam, Lumpy, BreakDancer, and Wham. Unfortunately, REAPR crashed during execution and was therefore eliminated from the evaluation process. The ground truth errors were obtained by comparison of assemblies with the reference genomes by using NucDiff and categorized into several types according to the error types and sizes provided by NucDiff, in the same way as it was described in Section <xref rid="Sec12" ref-type="sec">Accuracy assessment in an assembly obtained from simulated reads</xref>. The sensitivity for each ground truth error group and overall sensitivity and FDR were first computed separately for each assembly and genome and then combined together. The final results are presented in Fig. <xref rid="Fig6" ref-type="fig">6</xref> and (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Figures S16-S19). The number of ground truth errors in each group is given in (Additional file <xref rid="MOESM1" ref-type="media">1</xref>: Table S3).
<fig id="Fig6"><label>Fig. 6</label><caption><p>ROC-like plot based on bacterial genome datasets with varying flanking region size. The sensitivity and false discovery rate (FDR) are plotted for six tools (indicated with different colours) using varying flanking region sizes (indicated with different symbols). The flanking region size corresponds to the amount of slack allowed in the position of correct predictions</p></caption><graphic xlink:href="12859_2020_3414_Fig6_HTML" id="MO6"/></fig></p>
      <p id="Par56">The sensitivity results indicate that Pilon and NucBreak (with some small exceptions) enable detection of ground truth errors in all non-empty groups, and other tools predict errors only in some cases. Pilon outperforms other tools in almost all groups with respect to sensitivity. However, in half of the cases, the NucBreak results are comparable to Pilon’s ones. Pilon and NucBreak have relatively high sensitivity in many cases, while sensitivity of other tools, except Wham’s and FRCbam’s sensitivity in one case, is quite low or equal to 0.</p>
      <p id="Par57">Like with the dataset from the Assemblathon 1 project, the overall sensitivity is low for all tools for all flanking region sizes due to a large number of small substitutions (8000 small substitutions versus 437 small deletions that form the second largest groups), that are rarely detected by any tool. The overall FDR are very high for all tools except NucBreak. NucBreak has relatively low FDR, even with short flanking regions.</p>
    </sec>
  </sec>
  <sec id="Sec14">
    <title>Discussion</title>
    <p id="Par58">In this paper, we have introduced a tool called NucBreak that detects errors in assemblies by using short paired-end Illumina reads. Neither a reference genome nor a long jump library are required. NucBreak enables detection of assembly errors of all types and sizes, except (1) small insertions, deletions and substitutions that do not change repeat copy numbers, (2) deletions of copies of long interspersed repeats together with bases between repeat copies or long tandem repeat units, and (3) relocations and translocations with long overlapped misjoined regions. The inability of NucBreak to detect such types of assembly errors can be explained by two facts. First, NucBreak does not analyse small errors (approximately up to 30 bp) that are detected during the mapping process, and, thus, misses small insertion, deletion and substitution assembly errors. Second, NucBreak cannot detect errors in the regions that are covered with overlapping properly mapped reads, and, as the result, deletions of copies of long repeats together with bases between repeat copies and rearrangements with long overlapped misjoined regions remain unnoticed. The benchmarking results have shown that NucBreak detects all other assembly errors with low FDR and relatively high sensitivity. Such a balance between sensitivity and FDR makes NucBreak a good alternative to the existing assembly accuracy assessment tools and SV detection tools.</p>
    <p id="Par59">We have compared NucBreak with several existing tools for assembly accuracy assessment, namely Pilon, FRCbam and REAPR, as well as with some SV detection tools, including BreakDancer, Lumpy and Wham. Only Pilon, REAPR, and Wham detect assembly errors of most types and sizes with high sensitivity. However, the high sensitivity of these tools is always combined with higher FDR compared to NucBreak. All other tools demonstrate quite low sensitivity and high FDR, showing good sensitivity results only for some specific assembly error types and sizes.</p>
    <p id="Par60">The results reveal that all tested tools do not output their predictions with a single-nucleotide positional accuracy. All tools obtain better sensitivity when the flanking region size increases. However, Wham and Lumpy do not show such rapid growth of sensitivity as other tools. It means that their initial predictions were more proximal to the annotated assembly errors when at all detected.</p>
    <p id="Par61">It has been also observed that the read coverage is an important factor for detecting structural errors. In the case of REAPR and NucBreak, increase in coverage leads to decrease of sensitivity, while in case of Wham, BreakDancer, and Lumpy it helps to improve sensitivity. The sensitivity of Pilon and FRCbam either decreases or increases with coverage increment, depending on the types and sizes of detected assembly errors. In addition, we have noticed that NucBreak shows high sensitivity in all error groups when coverage is low. However, this is not a real advantage of the proposed algorithm but rather a coincidence, since the FDR is quite high in such cases. The reason for this behaviour in low coverage areas is that the number of regions where reads do not overlap are quite high, and many assembly errors are therefore predicted just by chance. With increased coverage, the number of uncovered regions is reduced, leading to a sensitivity and FDR decrease.</p>
    <p id="Par62">In case of the Assemblathon 1 dataset and the bacterial genome datasets, the ground truth has been generated using NucDiff. NucDiff has some limitations that may influence the results. First, the locations of the detected differences between the two sequences compared may be shifted a few bases off compared to the real difference locations due to accidental base similarity at the region borders [<xref ref-type="bibr" rid="CR23">23</xref>]. This influences the sensitivity and FDR results obtained for short flanking regions (1 bp or 5 bp long). Second, a partial loss of information about the types of differences are observed in cases when both relocations/translocations and duplications are involved at the same time [<xref ref-type="bibr" rid="CR23">23</xref>]. In this case, duplications may be detected as insertions. This could lead to misclassification of errors to the wrong group and thus influences the sensitivity results for the insertion and duplication groups.</p>
  </sec>
  <sec id="Sec15">
    <title>Conclusions</title>
    <p id="Par63">We have presented the tool NucBreak aimed at detection of structural errors in assemblies by using Illumina paired-end reads. NucBreak’s approach is unique in that it exploits information about alternative read alignments and analyses the reads that map properly to the assembly, in contrast to alternative tools that are based on analysing reads that do not map properly. It enables localization of insertions, deletions, duplications, inversions, and different inter- and intra-chromosomal rearrangements. However, it does not annotate detected errors. We have compared NucBreak with REAPR, FRCbam, Pilon, BreakDancer, Lumpy, and Wham. The benchmarking results have shown that in general NucBreak predicts assembly errors with relatively high sensitivity and with lower FDR than the other tools. We have also obtained evidence that Lumpy, BreakDancer and Wham, the tools developed for SV detection, can be used for assembly error detection, although in general the sensitivity of these tools, except Wham, is much lower compared to Pilon, REAPR and NucBreak.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary information</title>
    <sec id="Sec16">
      <p>
        <supplementary-material content-type="local-data" id="MOESM1">
          <media xlink:href="12859_2020_3414_MOESM1_ESM.pdf">
            <caption>
              <p><bold>Additional file 1: </bold>Supplementary materials. <bold>Figure S1.</bold> NucBreak workflow. <bold>Figure S2.</bold> Properly mapped read pair formation. The black line represents an assembly. The arrows represent all possible read mapping locations. The cases a) and b) correspond to the situations when no read pairs are formed or just one read pair is formed, respectively. The cases c) and d) show examples when several read pairs are formed from two given reads. The case d) is an example of the situation when reads are mapped to a tandem repeat. <bold>Figure S3.</bold> Properly mapped read pair categorization. The black line represents an assembly. The assembly regions marked by red colour correspond to repeated regions. The repeated regions are identical or near-identical copies of the same repeat. The arrows represent all possible read mapping locations. <bold>Figure S4.</bold> Read paths and path gaps. The black line represents an assembly. The assembly regions marked by red colour correspond to repeated regions. The repeated regions are identical or near-identical copies of the same repeat or copies of different repeats. The arrows represent read paths. The arrows of the same colour correspond to the read paths of the same type. The rectangles between the read paths indicate path gaps. The example demonstrates the correct order of the read paths in the absence of assembly errors. <bold>Figure S5.</bold> Possible type order and locations of read paths in the absence of breakpoints. <bold>Figure S6.</bold> Sensitivity results for the insertion, duplication and tandem duplication groups, obtained using the simulated datasets. <bold>Figure S7.</bold> Sensitivity results for the deletion, deletion_repeat and deletion_tandem groups, obtained using the simulated datasets. The deletion_repeat group contains deletions of interspersed repeats or their parts. The deletion_tandem group contains deletions of tandem repeats or their parts. <bold>Figure S8</bold>. Sensitivity results for the inversion, relocation and relocation_overlap groups, obtained using the simulated datasets. The relocation group consists of relocations with either inserted regions between misjoined regions (size varied between 10 and 1000) or without them (size is equal to 0). The relocation_overlap group consists of relocations with overlapped misjoined regions. <bold>Figure S9</bold>. Sensitivity results for the insertion, duplication and tandem duplication groups, obtained using the simulated datasets. <bold>Figure S10.</bold> Sensitivity results for the deletion, deletion_repeat and deletion_tandem groups, obtained using the simulated datasets. The deletion_repeat group contains deletions of interspersed repeats or their parts. The deletion_tandem group contains deletions of tandem repeats or their parts. <bold>Figure S11.</bold> Sensitivity results for the inversion, relocation and relocation_overlap groups, obtained using the simulated datasets. The relocation group consists of relocations with either inserted regions between misjoined regions (size varied between 10 and 1000) or without them (size is equal to 0). The relocation_overlap group consists of relocations with overlapped misjoined regions. <bold>Figure S12.</bold> Sensitivity results for the insertion, duplication and tandem duplication groups, obtained using the datasets from the Assemblathon 1 project. <bold>Figure S13.</bold> Sensitivity results for the deletion, deletion_repeat and deletion_tandem groups, obtained using the datasets from the Assemblathon 1 project. The deletion_repeat group contains deletions of interspersed repeats or their parts. The deletion_tandem group contains deletions of tandem repeats or their parts. <bold>Figure S14.</bold> Sensitivity results for the inversion, rearrangement and rearrangement_overlap groups, obtained using the datasets from the Assemblathon 1 project. The rearrangement group consists of relocations and translocations with either inserted regions between misjoined regions (size varied between 1 and 1000) or without them (size is equal to 0). The rearrangement_overlap group consists of relocations and translocations with overlapped misjoined regions. <bold>Figure S15.</bold> Sensitivity results for the reshuffling and substitution groups, obtained using the datasets from the Assemblathon 1 project. <bold>Figure S16.</bold> Sensitivity results for the insertion, duplication and tandem duplication groups obtained using the bacterial genome datasets. <bold>Figure S17.</bold> Sensitivity results for the deletion, deletion_repeat and deletion_tandem groups, obtained using the bacterial genome datasets. The deletion_repeat group contains deletions of interspersed repeats or their parts. The deletion_tandem group contains deletions of tandem repeats or their parts. <bold>Figure S18.</bold> Sensitivity results for the inversion, rearrangement and rearrangement_overlap groups, obtained using the bacterial genome datasets. The rearrangement group consists of relocations and translocations with either inserted regions between misjoined regions (size varied between 1 and 1000) or without them (size is equal to 0). The rearrangement_overlap group consists of relocations and translocations with overlapped misjoined regions. <bold>Figure S19</bold>. Sensitivity results for the reshuffling and substitution groups, obtained using the bacterial genome datasets. <bold>Table S1</bold>. Genome modifications implemented during the simulation process. G and A denote a reference genome and assembly, respectively. All other letters denote reference genome and assembly sequence regions. Diff means difference. C′ is the reverse complement of C. <bold>Table S2</bold>. List of bacterial genomes. <bold>Table S3</bold>. Number of ground truth errors in each group.</p>
            </caption>
          </media>
        </supplementary-material>
      </p>
    </sec>
  </sec>
</body>
<back>
  <glossary>
    <title>Abbreviations</title>
    <def-list>
      <def-item>
        <term>bp</term>
        <def>
          <p id="Par4">base pairs</p>
        </def>
      </def-item>
      <def-item>
        <term>FDR</term>
        <def>
          <p id="Par5">false discovery rate</p>
        </def>
      </def-item>
      <def-item>
        <term>ONT</term>
        <def>
          <p id="Par6">Oxford Nanopore Technologies</p>
        </def>
      </def-item>
      <def-item>
        <term>PacBio</term>
        <def>
          <p id="Par7">Pacific Biosciences</p>
        </def>
      </def-item>
      <def-item>
        <term>ROC</term>
        <def>
          <p id="Par8">receiver operating characteristic</p>
        </def>
      </def-item>
      <def-item>
        <term>SMRT</term>
        <def>
          <p id="Par9">Single-molecule real-time</p>
        </def>
      </def-item>
      <def-item>
        <term>SV</term>
        <def>
          <p id="Par10">structural variant</p>
        </def>
      </def-item>
    </def-list>
  </glossary>
  <fn-group>
    <fn>
      <p>
        <bold>Publisher’s Note</bold>
      </p>
      <p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p>
    </fn>
  </fn-group>
  <sec>
    <title>Supplementary information</title>
    <p><bold>Supplementary information</bold> accompanies this paper at 10.1186/s12859-020-3414-0.</p>
  </sec>
  <ack>
    <title>Acknowledgements</title>
    <p>The authors wish to thank the Centre for Ecological and Evolutionary Synthesis (CEES) for access to the computational infrastructure (‘cod’ servers) that enabled the bioinformatics analysis for this project. The authors also wish to thank Karin Lagesen for valuable input in the early phase of the project.</p>
  </ack>
  <notes notes-type="author-contribution">
    <title>Authors’ contributions</title>
    <p>KK designed and implemented NucBreak. KK, GKS, AJN and TR suggested the demonstration examples and other experiments performed. KK performed all the experiments. KK and TR wrote the manuscript. GKS and AJN revised the manuscript. All authors read and approved the final manuscript.</p>
  </notes>
  <notes notes-type="funding-information">
    <title>Funding</title>
    <p>KK was funded by the Computational Life Science initiative (CLSi) at the University of Oslo. The funding body played no role in the design or conclusions of this study.</p>
  </notes>
  <notes notes-type="data-availability">
    <title>Availability of data and materials</title>
    <p>• Project name: NucBreak</p>
    <p>• Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/uio-bmi/NucBreak">https://github.com/uio-bmi/NucBreak</ext-link></p>
    <p>• Operating system(s): Unix-like system such as Ubuntu Linux and MacOS X.</p>
    <p>• Programming language: Python</p>
    <p>• Other requirements: Python 2.7</p>
    <p>• License: Mozilla Public License (MPL), version 2.0</p>
    <p>• Any restrictions to use by non-academics: No</p>
    <p>• Additional data: All data used is available as described in Section <xref rid="Sec8" ref-type="sec">Data sets</xref></p>
  </notes>
  <notes>
    <title>Ethics approval and consent to participate</title>
    <p id="Par64">Not applicable.</p>
  </notes>
  <notes>
    <title>Consent for publication</title>
    <p id="Par65">Not applicable.</p>
  </notes>
  <notes notes-type="COI-statement">
    <title>Competing interests</title>
    <p id="Par66">The authors declare that they have no competing interests.</p>
  </notes>
  <ref-list id="Bib1">
    <title>References</title>
    <ref id="CR1">
      <label>1.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Meader</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Hillier</surname>
            <given-names>LW</given-names>
          </name>
          <name>
            <surname>Locke</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Ponting</surname>
            <given-names>CP</given-names>
          </name>
          <name>
            <surname>Lunter</surname>
            <given-names>G</given-names>
          </name>
        </person-group>
        <article-title>Genome assembly quality: assessment and improvement using the neutral indel model</article-title>
        <source>Genome Res</source>
        <year>2010</year>
        <volume>20</volume>
        <issue>5</issue>
        <fpage>675</fpage>
        <lpage>684</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.096966.109</pub-id>
        <?supplied-pmid 20305016?>
        <pub-id pub-id-type="pmid">20305016</pub-id>
      </element-citation>
    </ref>
    <ref id="CR2">
      <label>2.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Hunt</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kikuchi</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Sanders</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Newbold</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Berriman</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Otto</surname>
            <given-names>TD</given-names>
          </name>
        </person-group>
        <article-title>REAPR: a universal tool for genome assembly evaluation</article-title>
        <source>Genome Biol</source>
        <year>2013</year>
        <volume>14</volume>
        <issue>5</issue>
        <fpage>R47</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2013-14-5-r47</pub-id>
        <?supplied-pmid 23710727?>
        <pub-id pub-id-type="pmid">23710727</pub-id>
      </element-citation>
    </ref>
    <ref id="CR3">
      <label>3.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Vezzi</surname>
            <given-names>F</given-names>
          </name>
          <name>
            <surname>Narzisi</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Mishra</surname>
            <given-names>B</given-names>
          </name>
        </person-group>
        <article-title>Reevaluating assembly evaluations with feature response curves: GAGE and assemblathons</article-title>
        <source>PLoS One</source>
        <year>2012</year>
        <volume>7</volume>
        <issue>12</issue>
        <fpage>e52210</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0052210</pub-id>
        <?supplied-pmid 23284938?>
        <pub-id pub-id-type="pmid">23284938</pub-id>
      </element-citation>
    </ref>
    <ref id="CR4">
      <label>4.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Walker</surname>
            <given-names>BJ</given-names>
          </name>
          <name>
            <surname>Abeel</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Shea</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Priest</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Abouelliel</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Sakthikumar</surname>
            <given-names>S</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Pilon: an integrated tool for comprehensive microbial variant detection and genome assembly improvement</article-title>
        <source>PLoS One</source>
        <year>2014</year>
        <volume>9</volume>
        <issue>11</issue>
        <fpage>e112963</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0112963</pub-id>
        <?supplied-pmid 25409509?>
        <pub-id pub-id-type="pmid">25409509</pub-id>
      </element-citation>
    </ref>
    <ref id="CR5">
      <label>5.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Kronenberg</surname>
            <given-names>ZN</given-names>
          </name>
          <name>
            <surname>Osborne</surname>
            <given-names>EJ</given-names>
          </name>
          <name>
            <surname>Cone</surname>
            <given-names>KR</given-names>
          </name>
          <name>
            <surname>Kennedy</surname>
            <given-names>BJ</given-names>
          </name>
          <name>
            <surname>Domyan</surname>
            <given-names>ET</given-names>
          </name>
          <name>
            <surname>Shapiro</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Elde</surname>
            <given-names>NC</given-names>
          </name>
          <name>
            <surname>Yandell</surname>
            <given-names>M</given-names>
          </name>
        </person-group>
        <article-title>Wham: identifying structural variants of biological consequence</article-title>
        <source>PLoS Comput Biol</source>
        <year>2015</year>
        <volume>11</volume>
        <issue>12</issue>
        <fpage>e1004572</fpage>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1004572</pub-id>
        <?supplied-pmid 26625158?>
        <pub-id pub-id-type="pmid">26625158</pub-id>
      </element-citation>
    </ref>
    <ref id="CR6">
      <label>6.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chen</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Wallis</surname>
            <given-names>JW</given-names>
          </name>
          <name>
            <surname>McLellan</surname>
            <given-names>MD</given-names>
          </name>
          <name>
            <surname>Larson</surname>
            <given-names>DE</given-names>
          </name>
          <name>
            <surname>Kalicki</surname>
            <given-names>JM</given-names>
          </name>
          <name>
            <surname>Pohl</surname>
            <given-names>CS</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>BreakDancer: an algorithm for high-resolution mapping of genomic structural variation</article-title>
        <source>Nat Methods</source>
        <year>2009</year>
        <volume>6</volume>
        <issue>9</issue>
        <fpage>677</fpage>
        <lpage>681</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1363</pub-id>
        <?supplied-pmid 19668202?>
        <pub-id pub-id-type="pmid">19668202</pub-id>
      </element-citation>
    </ref>
    <ref id="CR7">
      <label>7.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Layer</surname>
            <given-names>RM</given-names>
          </name>
          <name>
            <surname>Chiang</surname>
            <given-names>C</given-names>
          </name>
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>IM</given-names>
          </name>
        </person-group>
        <article-title>LUMPY: a probabilistic framework for structural variant discovery</article-title>
        <source>Genome Biol</source>
        <year>2014</year>
        <volume>15</volume>
        <issue>6</issue>
        <fpage>R84</fpage>
        <pub-id pub-id-type="doi">10.1186/gb-2014-15-6-r84</pub-id>
        <?supplied-pmid 24970577?>
        <pub-id pub-id-type="pmid">24970577</pub-id>
      </element-citation>
    </ref>
    <ref id="CR8">
      <label>8.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhou</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Herschleb</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Schwartz</surname>
            <given-names>DC</given-names>
          </name>
        </person-group>
        <article-title>(2007). A single molecule system for whole genome analysis</article-title>
        <source>Perspectives in Bioanalysis</source>
        <year>2007</year>
        <volume>2</volume>
        <fpage>265</fpage>
        <lpage>300</lpage>
        <pub-id pub-id-type="doi">10.1016/s1871-0069(06)02009-x</pub-id>
      </element-citation>
    </ref>
    <ref id="CR9">
      <label>9.</label>
      <mixed-citation publication-type="other">The SMRT science website. <ext-link ext-link-type="uri" xlink:href="https://www.pacb.com/smrt-science/">https://www.pacb.com/smrt-science/</ext-link>. .</mixed-citation>
    </ref>
    <ref id="CR10">
      <label>10.</label>
      <mixed-citation publication-type="other">The Oxford Nanopore Technologies website. <ext-link ext-link-type="uri" xlink:href="https://nanoporetech.com/">https://nanoporetech.com/</ext-link>. Accessed 21 Jan 2018.</mixed-citation>
    </ref>
    <ref id="CR11">
      <label>11.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zhou</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Bechner</surname>
            <given-names>MC</given-names>
          </name>
          <name>
            <surname>Place</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Churas</surname>
            <given-names>CP</given-names>
          </name>
          <name>
            <surname>Pape</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Leong</surname>
            <given-names>SA</given-names>
          </name>
          <name>
            <surname>Runnheim</surname>
            <given-names>R</given-names>
          </name>
          <name>
            <surname>Forrest</surname>
            <given-names>DK</given-names>
          </name>
          <name>
            <surname>Goldstein</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Livny</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Schwartz</surname>
            <given-names>DC</given-names>
          </name>
        </person-group>
        <article-title>Validation of rice genome sequence by optical mapping</article-title>
        <source>BMC Genomics</source>
        <year>2007</year>
        <volume>8</volume>
        <fpage>278</fpage>
        <pub-id pub-id-type="doi">10.1186/1471-2164-8-278</pub-id>
        <?supplied-pmid 17697381?>
        <pub-id pub-id-type="pmid">17697381</pub-id>
      </element-citation>
    </ref>
    <ref id="CR12">
      <label>12.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Chaisson</surname>
            <given-names>MJ</given-names>
          </name>
          <name>
            <surname>Huddleston</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Dennis</surname>
            <given-names>MY</given-names>
          </name>
          <name>
            <surname>Sudmant</surname>
            <given-names>PH</given-names>
          </name>
          <name>
            <surname>Malig</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Hormozdiari</surname>
            <given-names>F</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Resolving the complexity of the human genome using single-molecule sequencing</article-title>
        <source>Nature.</source>
        <year>2015</year>
        <volume>517</volume>
        <issue>7536</issue>
        <fpage>608</fpage>
        <lpage>611</lpage>
        <pub-id pub-id-type="doi">10.1038/nature13907</pub-id>
        <?supplied-pmid 25383537?>
        <pub-id pub-id-type="pmid">25383537</pub-id>
      </element-citation>
    </ref>
    <ref id="CR13">
      <label>13.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Langmead</surname>
            <given-names>B</given-names>
          </name>
          <name>
            <surname>Salzberg</surname>
            <given-names>SL</given-names>
          </name>
        </person-group>
        <article-title>Fast gapped-read alignment with bowtie 2</article-title>
        <source>Nat Methods</source>
        <year>2012</year>
        <volume>9</volume>
        <issue>4</issue>
        <fpage>357</fpage>
        <lpage>359</lpage>
        <pub-id pub-id-type="doi">10.1038/nmeth.1923</pub-id>
        <?supplied-pmid 3322381?>
        <pub-id pub-id-type="pmid">22388286</pub-id>
      </element-citation>
    </ref>
    <ref id="CR14">
      <label>14.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Huang</surname>
            <given-names>W</given-names>
          </name>
          <name>
            <surname>Li</surname>
            <given-names>L</given-names>
          </name>
          <name>
            <surname>Myers</surname>
            <given-names>JR</given-names>
          </name>
          <name>
            <surname>Marth</surname>
            <given-names>GT</given-names>
          </name>
        </person-group>
        <article-title>ART: a next-generation sequencing read simulator</article-title>
        <source>Bioinformatics.</source>
        <year>2012</year>
        <volume>28</volume>
        <issue>4</issue>
        <fpage>593</fpage>
        <lpage>594</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btr708</pub-id>
        <?supplied-pmid 22199392?>
        <pub-id pub-id-type="pmid">22199392</pub-id>
      </element-citation>
    </ref>
    <ref id="CR15">
      <label>15.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Earl</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Bradnam</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>St John</surname>
            <given-names>J</given-names>
          </name>
          <name>
            <surname>Darling</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Lin</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Fass</surname>
            <given-names>J</given-names>
          </name>
          <etal/>
        </person-group>
        <article-title>Assemblathon 1: a competitive assessment of de novo short read assembly methods</article-title>
        <source>Genome Res</source>
        <year>2011</year>
        <volume>21</volume>
        <issue>12</issue>
        <fpage>2224</fpage>
        <lpage>2241</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.126599.111</pub-id>
        <?supplied-pmid 21926179?>
        <pub-id pub-id-type="pmid">21926179</pub-id>
      </element-citation>
    </ref>
    <ref id="CR16">
      <label>16.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Ariyaratne</surname>
            <given-names>PN</given-names>
          </name>
          <name>
            <surname>Sung</surname>
            <given-names>WK</given-names>
          </name>
        </person-group>
        <article-title>PE-assembler: de novo assembler using short paired-end reads</article-title>
        <source>Bioinformatics.</source>
        <year>2011</year>
        <volume>27</volume>
        <issue>2</issue>
        <fpage>167</fpage>
        <lpage>174</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq626</pub-id>
        <?supplied-pmid 21149345?>
        <pub-id pub-id-type="pmid">21149345</pub-id>
      </element-citation>
    </ref>
    <ref id="CR17">
      <label>17.</label>
      <mixed-citation publication-type="other">The Assemblathon 1 dataset website. <ext-link ext-link-type="uri" xlink:href="http://korflab.ucdavis.edu/Datasets/Assemblathon/Assemblathon1">http://korflab.ucdavis.edu/Datasets/Assemblathon/Assemblathon1</ext-link>. Accessed 9 Aug 2018.</mixed-citation>
    </ref>
    <ref id="CR18">
      <label>18.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Simpson</surname>
            <given-names>JT</given-names>
          </name>
          <name>
            <surname>Wong</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Jackman</surname>
            <given-names>SD</given-names>
          </name>
          <name>
            <surname>Schein</surname>
            <given-names>JE</given-names>
          </name>
          <name>
            <surname>Jones</surname>
            <given-names>SJ</given-names>
          </name>
          <name>
            <surname>Birol</surname>
            <given-names>I</given-names>
          </name>
        </person-group>
        <article-title>ABySS: a parallel assembler for short read sequence data</article-title>
        <source>Genome Res</source>
        <year>2009</year>
        <volume>19</volume>
        <issue>6</issue>
        <fpage>1117</fpage>
        <lpage>1123</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.089532.108</pub-id>
        <?supplied-pmid 2694472?>
        <pub-id pub-id-type="pmid">19251739</pub-id>
      </element-citation>
    </ref>
    <ref id="CR19">
      <label>19.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Bankevich</surname>
            <given-names>A</given-names>
          </name>
          <name>
            <surname>Nurk</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Antipov</surname>
            <given-names>D</given-names>
          </name>
          <name>
            <surname>Gurevich</surname>
            <given-names>AA</given-names>
          </name>
          <name>
            <surname>Dvorkin</surname>
            <given-names>M</given-names>
          </name>
          <name>
            <surname>Kulikov</surname>
            <given-names>AS</given-names>
          </name>
          <name>
            <surname>Lesin</surname>
            <given-names>VM</given-names>
          </name>
          <name>
            <surname>Nikolenko</surname>
            <given-names>SI</given-names>
          </name>
          <name>
            <surname>Pham</surname>
            <given-names>S</given-names>
          </name>
          <name>
            <surname>Prjibelski</surname>
            <given-names>AD</given-names>
          </name>
          <name>
            <surname>Pyshkin</surname>
            <given-names>AV</given-names>
          </name>
          <name>
            <surname>Sirotkin</surname>
            <given-names>AV</given-names>
          </name>
          <name>
            <surname>Vyahhi</surname>
            <given-names>N</given-names>
          </name>
          <name>
            <surname>Tesler</surname>
            <given-names>G</given-names>
          </name>
          <name>
            <surname>Alekseyev</surname>
            <given-names>MA</given-names>
          </name>
          <name>
            <surname>Pevzner</surname>
            <given-names>PA</given-names>
          </name>
        </person-group>
        <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>
        <source>J Comput Biol</source>
        <year>2012</year>
        <volume>19</volume>
        <issue>5</issue>
        <fpage>455</fpage>
        <lpage>477</lpage>
        <pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id>
        <?supplied-pmid 22506599?>
        <pub-id pub-id-type="pmid">22506599</pub-id>
      </element-citation>
    </ref>
    <ref id="CR20">
      <label>20.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Zerbino</surname>
            <given-names>DR</given-names>
          </name>
          <name>
            <surname>Birney</surname>
            <given-names>E</given-names>
          </name>
        </person-group>
        <article-title>Velvet: algorithms for de novo short read assembly using de Bruijn graphs</article-title>
        <source>Genome Res</source>
        <year>2008</year>
        <volume>18</volume>
        <issue>5</issue>
        <fpage>821</fpage>
        <lpage>829</lpage>
        <pub-id pub-id-type="doi">10.1101/gr.074492.107</pub-id>
        <?supplied-pmid 18349386?>
        <pub-id pub-id-type="pmid">18349386</pub-id>
      </element-citation>
    </ref>
    <ref id="CR21">
      <label>21.</label>
      <mixed-citation publication-type="other">The NCBI database. <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/">https://www.ncbi.nlm.nih.gov/</ext-link>. Accessed 9 Aug 2018.</mixed-citation>
    </ref>
    <ref id="CR22">
      <label>22.</label>
      <mixed-citation publication-type="other">The EBI database. <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/">https://www.ebi.ac.uk/</ext-link>. Accessed 9 Aug 2018.</mixed-citation>
    </ref>
    <ref id="CR23">
      <label>23.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Khelik</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Lagesen</surname>
            <given-names>K</given-names>
          </name>
          <name>
            <surname>Sandve</surname>
            <given-names>GK</given-names>
          </name>
          <name>
            <surname>Rognes</surname>
            <given-names>T</given-names>
          </name>
          <name>
            <surname>Nederbragt</surname>
            <given-names>AJ</given-names>
          </name>
        </person-group>
        <article-title>NucDiff: in-depth characterization and annotation of differences between two sets of DNA sequences</article-title>
        <source>BMC Bioinformatics</source>
        <year>2017</year>
        <volume>18</volume>
        <issue>1</issue>
        <fpage>338</fpage>
        <pub-id pub-id-type="doi">10.1186/s12859-017-1748-z</pub-id>
        <?supplied-pmid 28701187?>
        <pub-id pub-id-type="pmid">28701187</pub-id>
      </element-citation>
    </ref>
    <ref id="CR24">
      <label>24.</label>
      <element-citation publication-type="journal">
        <person-group person-group-type="author">
          <name>
            <surname>Quinlan</surname>
            <given-names>AR</given-names>
          </name>
          <name>
            <surname>Hall</surname>
            <given-names>IM</given-names>
          </name>
        </person-group>
        <article-title>BEDTools: a flexible suite of utilities for comparing genomic features</article-title>
        <source>Bioinformatics.</source>
        <year>2010</year>
        <volume>26</volume>
        <issue>6</issue>
        <fpage>841</fpage>
        <lpage>842</lpage>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btq033</pub-id>
        <?supplied-pmid 20110278?>
        <pub-id pub-id-type="pmid">20110278</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</back>
