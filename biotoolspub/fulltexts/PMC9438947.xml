<?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?>
<?DTDIdentifier.IdentifierType public?>
<?SourceDTD.DTDName JATS-journalpublishing1.dtd?>
<?SourceDTD.Version 1.2?>
<?ConverterInfo.XSLTName jats2jats3.xsl?>
<?ConverterInfo.Version 1?>
<?properties open_access?>
<processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats">
  <restricted-by>pmc</restricted-by>
</processing-meta>
<front>
  <journal-meta>
    <journal-id journal-id-type="nlm-ta">Bioinformatics</journal-id>
    <journal-id journal-id-type="iso-abbrev">Bioinformatics</journal-id>
    <journal-id journal-id-type="publisher-id">bioinformatics</journal-id>
    <journal-title-group>
      <journal-title>Bioinformatics</journal-title>
    </journal-title-group>
    <issn pub-type="ppub">1367-4803</issn>
    <issn pub-type="epub">1367-4811</issn>
    <publisher>
      <publisher-name>Oxford University Press</publisher-name>
    </publisher>
  </journal-meta>
  <article-meta>
    <article-id pub-id-type="pmcid">9438947</article-id>
    <article-id pub-id-type="pmid">35801905</article-id>
    <article-id pub-id-type="doi">10.1093/bioinformatics/btac449</article-id>
    <article-id pub-id-type="publisher-id">btac449</article-id>
    <article-categories>
      <subj-group subj-group-type="heading">
        <subject>Applications Note</subject>
        <subj-group subj-group-type="category-toc-heading">
          <subject>Data and Text Mining</subject>
        </subj-group>
      </subj-group>
      <subj-group subj-group-type="category-taxonomy-collection">
        <subject>AcademicSubjects/SCI01060</subject>
      </subj-group>
    </article-categories>
    <title-group>
      <article-title><italic toggle="yes">Pkgndep</italic>: a tool for analyzing dependency heaviness of R packages</article-title>
    </title-group>
    <contrib-group>
      <contrib contrib-type="author" corresp="yes">
        <contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-7395-8709</contrib-id>
        <name>
          <surname>Gu</surname>
          <given-names>Zuguang</given-names>
        </name>
        <aff>
          <institution>Molecular Precision Oncology Program, National Center for Tumor Diseases (NCT)</institution>
        </aff>
        <xref rid="btac449-cor1" ref-type="corresp"/>
        <!--z.gu@dkfz.de-->
      </contrib>
      <contrib contrib-type="author" corresp="yes">
        <name>
          <surname>Hübschmann</surname>
          <given-names>Daniel</given-names>
        </name>
        <aff>
          <institution>Molecular Precision Oncology Program, National Center for Tumor Diseases (NCT)</institution>
        </aff>
        <aff>
          <institution>Heidelberg Institute of Stem Cell Technology and Experimental Medicine (HI-STEM)</institution>
        </aff>
        <aff>
          <institution>German Cancer Consortium (DKTK)</institution>
        </aff>
        <aff><institution>Department of Pediatric Immunology, Hematology and Oncology, University Hospital Heidelberg</institution>, 69120 Heidelberg, <country country="DE">Germany</country></aff>
        <xref rid="btac449-cor1" ref-type="corresp"/>
        <!--d.huebschmann@dkfz.de-->
      </contrib>
    </contrib-group>
    <contrib-group>
      <contrib contrib-type="editor">
        <name>
          <surname>Wren</surname>
          <given-names>Jonathan</given-names>
        </name>
        <role>Associate Editor</role>
      </contrib>
    </contrib-group>
    <author-notes>
      <corresp id="btac449-cor1">To whom correspondence should be addressed. Email: <email>z.gu@dkfz.de</email> or <email>d.huebschmann@dkfz.de</email></corresp>
    </author-notes>
    <pub-date pub-type="collection">
      <day>01</day>
      <month>9</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="epub" iso-8601-date="2022-07-08">
      <day>08</day>
      <month>7</month>
      <year>2022</year>
    </pub-date>
    <pub-date pub-type="pmc-release">
      <day>08</day>
      <month>7</month>
      <year>2022</year>
    </pub-date>
    <volume>38</volume>
    <issue>17</issue>
    <fpage>4248</fpage>
    <lpage>4251</lpage>
    <history>
      <date date-type="received">
        <day>29</day>
        <month>3</month>
        <year>2022</year>
      </date>
      <date date-type="rev-recd">
        <day>24</day>
        <month>6</month>
        <year>2022</year>
      </date>
      <date date-type="editorial-decision">
        <day>03</day>
        <month>7</month>
        <year>2022</year>
      </date>
      <date date-type="accepted">
        <day>07</day>
        <month>7</month>
        <year>2022</year>
      </date>
      <date date-type="corrected-typeset">
        <day>12</day>
        <month>7</month>
        <year>2022</year>
      </date>
    </history>
    <permissions>
      <copyright-statement>© The Author(s) 2022. Published by Oxford University Press.</copyright-statement>
      <copyright-year>2022</copyright-year>
      <license>
        <ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbynclicense">https://creativecommons.org/licenses/by-nc/4.0/</ali:license_ref>
        <license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution-NonCommercial License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-nc/4.0/">https://creativecommons.org/licenses/by-nc/4.0/</ext-link>), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com</license-p>
      </license>
    </permissions>
    <self-uri xlink:href="btac449.pdf"/>
    <abstract>
      <title>Abstract</title>
      <sec id="s1">
        <title>Summary</title>
        <p>Numerous R packages have been developed for bioinformatics analysis in the last decade and dependencies among packages have become critical issues to consider. In this work, we proposed a new metric named <italic toggle="yes">dependency heaviness</italic> that measures the number of dependencies that a parent uniquely brings to a package and we proposed possible solutions for reducing the complexity of dependencies by optimizing the use of heavy parents. We implemented the metric in a new R package <italic toggle="yes">pkgndep</italic> which provides an intuitive way for dependency heaviness analysis. Based on <italic toggle="yes">pkgndep</italic>, we additionally performed a global analysis of dependency heaviness on CRAN and Bioconductor ecosystems and we revealed top packages that have significant contributions of high dependency heaviness to their child packages.</p>
      </sec>
      <sec id="s2">
        <title>Availability and implementation</title>
        <p>The package <italic toggle="yes">pkgndep</italic> and documentations are freely available from the Comprehensive R Archive Network <ext-link xlink:href="https://cran.r-project.org/package=pkgndep" ext-link-type="uri">https://cran.r-project.org/package=pkgndep</ext-link>. The dependency heaviness analysis for all 22 076 CRAN and Bioconductor packages retrieved on June 8, 2022 are available at <ext-link xlink:href="https://pkgndep.github.io/" ext-link-type="uri">https://pkgndep.github.io/</ext-link>.</p>
      </sec>
      <sec id="s4">
        <title>Supplementary information</title>
        <p><xref rid="sup1" ref-type="supplementary-material">Supplementary data</xref> are available at <italic toggle="yes">Bioinformatics</italic> online.</p>
      </sec>
    </abstract>
    <funding-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>National Center for Tumor Diseases</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
      <award-group award-type="grant">
        <funding-source>
          <institution-wrap>
            <institution>Molecular Precision Oncology Program</institution>
          </institution-wrap>
        </funding-source>
      </award-group>
    </funding-group>
    <counts>
      <page-count count="4"/>
    </counts>
  </article-meta>
</front>
<body>
  <sec>
    <title>1 Introduction</title>
    <p>Reliable and robust software is essential for data analysis in bioinformatics research. In the last decade, R has rapidly become a major programming language for developing software for biological data analysis, including data processing and visualization, statistical modeling, interactive web application development and reproducible report generation. It is applied in broad research fields of genomics, transcriptomics, epigenomics, proteomics, metabolomics and more. Reusable and extensible code is normally organized in forms of R packages, which are distributed on public repositories such as the Comprehensive R Archive Network (CRAN) and Bioconductor. Publications describing R packages have also been increasing. By June 8, 2022, using search term ‘(R package [Title]) OR Bioconductor [Title/Abstract]’ on PubMed resulted in 2605 publications. Dependencies always exist in packages where a package imports functionalities from other packages. As the numbers of R packages increase, dependencies among packages become even more complicated. By June 8, 2022, there are 194 351 direct dependency relations among in total 18 638 and 3438 packages from CRAN and Bioconductor, respectively.</p>
    <p>In the ecosystems of CRAN and Bioconductor, package dependencies are represented as a directed graph. Research on the dependency graph helps to reveal interesting patterns of package relations, such as top packages that play leading roles or package modules for specific analysis topics (<xref rid="btac449-B1" ref-type="bibr">Mora-Cantallops <italic toggle="yes">et al.</italic>, 2020</xref>). There are also R packages for dependency graph visualizations, such as <italic toggle="yes">deepdep</italic>, <italic toggle="yes">pkgnet</italic> and <italic toggle="yes">pkggraph</italic>. They support visualizing subgraphs induced from single packages.</p>
    <p>Denote a package as <italic toggle="yes">P</italic> in the dependency graph, then the total packages located upstream of <italic toggle="yes">P</italic> compose its dependencies. If <italic toggle="yes">P</italic> depends on a large number of upstream packages, there will be the following risks: (i) Users have to install a lot of additional packages when installing <italic toggle="yes">P</italic>, which would bring the risk that installation failure of any upstream package stops the installation of <italic toggle="yes">P</italic>. (ii) The number of packages loaded into the R session after loading <italic toggle="yes">P</italic> will be huge, which increases the difficulty to reproduce a completely identical working environment on other computers. (iii) Dependencies of <italic toggle="yes">P</italic> will spread to all its child packages. (iv) On the platforms for continuous integration such as GitHub Action or Travis CI, automatic validation of <italic toggle="yes">P</italic> could easily fail due to the failures of its upstream packages. <italic toggle="yes">P</italic> inherits all its dependencies from its parent packages. Thus, identifying the parents that contribute high dependencies to <italic toggle="yes">P</italic>, that is, identifying <italic toggle="yes">P</italic>’s heavy parents, helps to reduce the complexity of <italic toggle="yes">P</italic>’s own dependencies.</p>
    <p>In this work, we proposed a new metric named <italic toggle="yes">dependency heaviness</italic> that measures the number of additional dependency packages that a parent brings to its child package and are mutually exclusive to the dependencies imported by all other parents. We implemented the heaviness metric in an R package named <italic toggle="yes">pkgndep</italic>. Additionally, <italic toggle="yes">pkgndep</italic> provides an intuitive way for visualizing package dependencies. Based on <italic toggle="yes">pkgndep</italic>, we also performed a preliminary analysis of dependency heaviness on the CRAN and Bioconductor ecosystems and we revealed top packages that contribute significantly high heaviness on their child packages.</p>
  </sec>
  <sec>
    <title>2 Materials and methods</title>
    <p>Every R package has a DESCRIPTION file for its metadata. In it, its dependency packages are listed in the fields of ‘Depends’, ‘Imports’, ‘LinkingTo’, ‘Suggests’ and ‘Enhances’. Denote a package as <italic toggle="yes">P</italic>, packages listed in ‘Depends’, ‘Imports’ and ‘LinkingTo’ are mandatory to be installed when installing <italic toggle="yes">P</italic>. Functions, S4 methods or S4 classes defined in packages in ‘Depends’ and ‘Imports’ are imported to the namespace of <italic toggle="yes">P</italic> according to the rules defined in <italic toggle="yes">P</italic>’s NAMESPACE file. Packages listed in ‘Suggests’ and ‘Enhances’ are not mandatory to be installed. They are optionally used in <italic toggle="yes">P</italic>, such as in vignettes, in examples, or in functions that are only required when they are used. We kindly refer readers to the official R manual ‘Writing R Extensions’ for more details.</p>
    <p>R package dependencies can be modeled as a directed graph. For the ease of discussion, the following dependency categories for <italic toggle="yes">P</italic> are defined. (i) Strong parent packages: the packages listed in ‘Depends’, ‘Imports’ and ‘LinkingTo’. For simplicity, in the text, we always refer to them as <italic toggle="yes">parent packages</italic>. (ii) Weak parent packages: the packages listed in ‘Suggests’ and ‘Enhances’. (iii) Strong dependency packages: the total packages by recursively looking for their parent packages. Note all strong dependency packages are mandatory to be installed for <italic toggle="yes">P</italic> and a failure of any of them stops installation of <italic toggle="yes">P</italic>. In the text, we always refer to them as <italic toggle="yes">dependency packages</italic>. (iv) All dependency packages: the total packages by recursively looking for their parent packages, but at the level of <italic toggle="yes">P</italic>, its weak parents are also included. It simulates a situation in which full functionality of <italic toggle="yes">P</italic> is required, or in other words, when all its weak parents are changed to strong parents, the number of strong dependency packages it requires. (v) Child packages: the packages whose parent packages include <italic toggle="yes">P</italic>. These are the packages on which <italic toggle="yes">P</italic> has a direct contribution on dependencies.</p>
    <p>Next the heaviness from a strong parent is defined. If package <italic toggle="yes">A</italic> is a parent of <italic toggle="yes">P</italic>, the heaviness of <italic toggle="yes">A</italic> on <italic toggle="yes">P</italic> denoted as <italic toggle="yes">h</italic> is calculated as <italic toggle="yes">h</italic> = <italic toggle="yes">n</italic><sub>1</sub> − <italic toggle="yes">n</italic><sub>2</sub>, where <italic toggle="yes">n</italic><sub>1</sub> is the number of strong dependencies of <italic toggle="yes">P</italic> and <italic toggle="yes">n</italic><sub>2</sub> is the number of strong dependencies of <italic toggle="yes">P</italic> after changing <italic toggle="yes">A</italic> from a strong parent to a weak parent, that is, moving <italic toggle="yes">A</italic> to ‘Suggests’ of <italic toggle="yes">P</italic>. From the aspect of the dependency graph where only the strong dependency relations are included, <italic toggle="yes">n</italic><sub>1</sub> is the number of upstream packages of <italic toggle="yes">P</italic> and <italic toggle="yes">n</italic><sub>2</sub> is the number of upstream packages after removing the connection between <italic toggle="yes">A</italic> and <italic toggle="yes">P</italic>. So, the heaviness measures the number of additionally required strong dependencies that <italic toggle="yes">A</italic> brings to <italic toggle="yes">P</italic> and these dependencies are not imported by any other parent.</p>
    <p>When <italic toggle="yes">A</italic> is a weak parent of <italic toggle="yes">P</italic>, <italic toggle="yes">n</italic><sub>2</sub> is defined as the number of strong dependencies of <italic toggle="yes">P</italic> after changing <italic toggle="yes">A</italic> to a strong parent of <italic toggle="yes">P</italic>, that is, moving <italic toggle="yes">A</italic> to ‘Imports’ of <italic toggle="yes">P</italic>. In this scenario, the heaviness of the weak parent is calculated as <italic toggle="yes">h</italic> = <italic toggle="yes">n</italic><sub>2</sub> − <italic toggle="yes">n</italic><sub>1</sub>. Similarly, from the aspect of the dependency graph, <italic toggle="yes">n</italic><sub>2</sub> is the number of upstream packages after adding a new connection between <italic toggle="yes">A</italic> and <italic toggle="yes">P</italic>.</p>
    <p>Note for some (<italic toggle="yes">A</italic>, <italic toggle="yes">P</italic>) pairs, it is possible that <italic toggle="yes">n</italic><sub>1</sub> = <italic toggle="yes">n</italic><sub>2</sub> which results in <italic toggle="yes">h </italic>=<italic toggle="yes"> </italic>0, that is, moving parent <italic toggle="yes">A</italic> to ‘Suggests’ of <italic toggle="yes">P</italic> won’t reduce the number of <italic toggle="yes">P</italic>’s strong dependencies. It mostly occurs when a second parent, denoted as <italic toggle="yes">B</italic>, also depends on <italic toggle="yes">A</italic> (directly or indirectly). Thus, only moving <italic toggle="yes">A</italic> to ‘Suggests’ of <italic toggle="yes">P</italic> won’t affect that <italic toggle="yes">A</italic> is still imported as a strong dependency by <italic toggle="yes">B</italic>. For example, the package <italic toggle="yes">GenomicRanges</italic> is a parent of the package <italic toggle="yes">bsseq</italic> where <italic toggle="yes">GenomicRanges</italic> is a general-purpose package for dealing with genomic intervals. <italic toggle="yes">bsseq</italic> has a second parent package <italic toggle="yes">BSgenome</italic> that also depends on <italic toggle="yes">GenomicRanges</italic>. Thus, moving <italic toggle="yes">GenomicRanges</italic> to ‘Suggests’ of <italic toggle="yes">bsseq</italic> won’t change the number of strong dependencies for <italic toggle="yes">bsseq</italic> because <italic toggle="yes">BSgenome</italic> still imports it. As a result, <italic toggle="yes">GenomicRanges</italic> contribute zero heaviness on <italic toggle="yes">bsseq</italic> as its parent.</p>
  </sec>
  <sec>
    <title>3 Results</title>
    <p>The result of a dependency heaviness analysis is represented as a customized heatmap. <xref rid="btac449-F1" ref-type="fig">Figure 1</xref> demonstrates the dependency heatmap for the package <italic toggle="yes">ComplexHeatmap</italic>. <italic toggle="yes">ComplexHeatmap</italic>’s strong and weak parents are rows split by their dependency relations, that is, ‘Depends’, ‘Imports’ or ‘Suggests’. The dependency packages imported by each parent are columns and they are split into two groups: base packages and other packages. The red, dark green and blue cells correspond to dependency packages that each parent requires. The total of all strong dependencies required for <italic toggle="yes">ComplexHeatmap</italic> are marked by purple lines on both rows and columns. On the right side of the dependency heatmap, there are three additional bar plot annotations. The first bar plot annotation illustrates the numbers of functions or classes imported from parents, which are parsed from <italic toggle="yes">ComplexHeatmap</italic>’s NAMESPACE file. In general, the bar plot can distinguish the following different scenarios of imports from a parent to a child package: (i) The whole namespace is imported. (ii) A limited number of functions are imported. (iii) A limited number of S4 methods/classes is imported (e.g. in package <italic toggle="yes">biovizBase</italic>). (iv) The whole namespace excluding a limited number of functions is imported (e.g. in package <italic toggle="yes">dplyr</italic>). (v) No function is imported but the parent still has an ‘Imports’ relation to the child package (e.g. in package <italic toggle="yes">ggplot2</italic>). The second bar plot annotation illustrates the number of required packages for each strong or weak parent, which is simply the number of hits on the corresponding row. The third bar plot annotation illustrates the heaviness of each strong or weak parent package on <italic toggle="yes">ComplexHeatmap</italic>, which is the number of required packages uniquely imported by the parent while not by all other strong parents.</p>
    <fig position="float" id="btac449-F1">
      <label>Fig. 1.</label>
      <caption>
        <p>Dependency heaviness analysis of the package <italic toggle="yes">ComplexHeatmap</italic>. The interpretation of the plot can be found in the main text</p>
      </caption>
      <graphic xlink:href="btac449f1" position="float"/>
    </fig>
    <p>As illustrated in <xref rid="btac449-F1" ref-type="fig">Figure 1</xref>, <italic toggle="yes">ComplexHeatmap</italic> has 30 strong dependency packages, while if including dependencies from all weak parents as well, the number will dramatically increase to 122 (more than four times more). Since we are also the developers of <italic toggle="yes">ComplexHeatmap</italic>, during the development, we moved some heavy parents, which only provide enhanced functionalities for <italic toggle="yes">ComplexHeatmap</italic> but are not expected to be frequently used, to ‘Suggests’, such as the package <italic toggle="yes">dendextend</italic> (contributing a heaviness of 32) which is only used for coloring dendrogram branches, and the package <italic toggle="yes">gridtext</italic> (contributing a heaviness of 14) which is only used for customizing text formats in heatmaps. These two packages are only required when the corresponding functionalities are used.</p>
    <p>The dependency heatmap gives hints for reducing dependency complexity of a package. Generally speaking, if a parent has a high heaviness compared with other parents, an optimization might be considered, especially if only a few functions are imported from that parent. In <xref rid="sup1" ref-type="supplementary-material">Supplementary File S1</xref> which contains dependency heaviness analysis for the package <italic toggle="yes">mapStats</italic>, an extremely heavy parent <italic toggle="yes">Hmisc</italic> can be observed where <italic toggle="yes">Hmisc</italic> has a heaviness of 49 which is almost 60% of the total number of required packages of <italic toggle="yes">mapStats</italic>. If moving <italic toggle="yes">Hmisc</italic> to ‘Suggests’ of <italic toggle="yes">mapStats</italic>, the number of strong dependencies can be reduced from 83 to 34. The first bar plot annotation shows there is only one function imported from <italic toggle="yes">Hmisc</italic>. A deep inspection into the source code of <italic toggle="yes">mapStats</italic> reveals that a function <monospace>capitalize()</monospace> from <italic toggle="yes">Hmisc</italic> is only imported to <italic toggle="yes">mapStats</italic>. <monospace>capitalize()</monospace> is a simple function that only capitalizes the first letter of a string. The 49 additional dependencies imported from <italic toggle="yes">Hmisc</italic> can be avoided by simply reimplementing a function <monospace>capitalize()</monospace> by the developer’s own.</p>
    <p>In the package <italic toggle="yes">pkgndep</italic>, the function <monospace>pkgndep()</monospace> performs dependency heaviness analysis for a specific package. Later the function <monospace>plot()</monospace> generates the dependency heatmap and the function <monospace>depen</monospace><monospace>d</monospace><monospace>ency_report()</monospace> generates an HTML report of the complete dependency analysis.</p>
    <p>We performed heaviness analysis for all 18 638 CRAN packages and 3438 Bioconductor packages retrieved on June 8, 2022 (<xref rid="sup1" ref-type="supplementary-material">Supplementary File S2</xref>, also available at <ext-link xlink:href="https://pkgndep.github.io/" ext-link-type="uri">https://pkgndep.github.io/</ext-link>). We systematically analyzed the heaviness of packages on their child packages. For a package denoted as <italic toggle="yes">P</italic>, the mean heaviness over those children for which <italic toggle="yes">P</italic> is a strong parent was calculated. This metric also measures the expected number of additional dependencies brought to a package if <italic toggle="yes">P</italic> is added as a new strong parent. On top of the list of packages ordered by their heaviness on children (<xref rid="sup1" ref-type="supplementary-material">Supplementary File S3</xref>), we found there are some popular R packages for bioinformatics analysis that have very high heaviness on their child packages, such as <italic toggle="yes">Seurat</italic> (85, 38 children), <italic toggle="yes">minfi</italic> (62, 38 children), <italic toggle="yes">WGCNA</italic> (52, 33 children) and <italic toggle="yes">Gviz</italic> (43, 37 children) where the first value in the parentheses is the average heaviness on their children. Thus, packages depending on these heavy parents should be aware of the risks from the huge dependencies they bring in.</p>
  </sec>
  <sec>
    <title>4 Discussion and conclusion</title>
    <p>Dependency heaviness analysis provides hints for reducing the complexity of package dependencies, but how to optimize the dependency depends on the specific use of parent packages in the corresponding package. As has been demonstrated in the example of <italic toggle="yes">mapStats</italic>, the heavy parent can be avoided by implementing a function with the same functionality as the imported one, but this scenario is not common. Common cases are when heavy parents are less used in analyses by users. This is typical for some bioinformatics packages which provide both core analysis and secondary analysis. Parent packages for secondary analysis might be arranged as weak parents (i.e. to be put in ‘Suggests’) if they are heavy and not expected to be frequently accessed by users (see an example in <xref rid="sup1" ref-type="supplementary-material">Supplementary File S4</xref>). Another solution is to separate large packages into several smaller packages where each one only focuses on a specific task, for example, the package <italic toggle="yes">remotes</italic> separated from the package <italic toggle="yes">devtools</italic> only focuses on installing packages from remote repositories, where <italic toggle="yes">remotes</italic> only has 4 strong dependencies, but <italic toggle="yes">devtools</italic> has 76. Nevertheless, there are still scenarios when reduction of heavy parents could not be performed: (i) A heavy parent provides core functionality to its child package and (ii) S4 methods or S4 classes are imported from a parent package.</p>
    <p>The heaviness measures the number of additional dependency packages that a parent uniquely imports. However, there are scenarios when multiple parents import similar sets of dependencies, which results in heaviness for individual parents being very small. In <xref rid="sup1" ref-type="supplementary-material">Supplementary File S5</xref> of the dependency analysis for the package <italic toggle="yes">DESeq2</italic>, its two parent packages <italic toggle="yes">geneplotter</italic> and <italic toggle="yes">genefilter</italic> import 51 and 53 dependencies, respectively, among which 50 are the same. Due to the high overlap, the heaviness of <italic toggle="yes">geneplotter</italic> and <italic toggle="yes">genefilter</italic> on <italic toggle="yes">DESeq2</italic> is only 1 and 2. However, if considering the two parents together, that is, by moving both to ‘Suggests’ of <italic toggle="yes">DESeq2</italic>, 23 dependency packages can be reduced. <italic toggle="yes">pkgndep</italic> also proposes a metric named <italic toggle="yes">co-heaviness</italic> (by the function <monospace>co_heaviness()</monospace>) which measures the number of dependencies simultaneously imported by two parents (<xref rid="sup1" ref-type="supplementary-material">Supplementary File S5</xref>). Nevertheless, the co-effects of multiple parents can always be easily observed from the dependency heatmap.</p>
    <p>Current studies on package dependencies rank packages’ influences by the numbers of their child packages, that is, through degree centralities in the dependency graph analysis (<xref rid="btac449-B1" ref-type="bibr">Mora-Cantallops <italic toggle="yes">et al.</italic>, 2020</xref>). However, a package with more child packages does not necessarily mean it contributes more dependencies. For example, package <italic toggle="yes">Rcpp</italic> has 2795 child packages but it only contributes an average heaviness of 0.6 to them.</p>
    <p>R packages may also have system dependencies, for example, on C/C++ libraries, which can involve another layer of complex dependency relations. <italic toggle="yes">pkgndep</italic> only considers the dependency relations on the R package level.</p>
    <p>In this study, we proposed a new metric that helps to find parents contributing heavy dependencies to their child packages. We believe <italic toggle="yes">pkgndep</italic> will be a useful tool for R package developers to properly handle the dependency complexity of their packages and to build more robust and reliable packages.</p>
  </sec>
  <sec>
    <title>Funding</title>
    <p>This work was supported by the National Center for Tumor Diseases (NCT) Molecular Precision Oncology Program.</p>
    <p><italic toggle="yes">Conflict of Interest</italic>: none declared.</p>
  </sec>
  <sec sec-type="supplementary-material">
    <title>Supplementary Material</title>
    <supplementary-material id="sup1" position="float" content-type="local-data">
      <label>btac449_Supplementary_Data</label>
      <media xlink:href="btac449_supplementary_data.zip">
        <caption>
          <p>Click here for additional data file.</p>
        </caption>
      </media>
    </supplementary-material>
  </sec>
</body>
<back>
  <sec sec-type="data-availability">
    <title>Data Availability</title>
    <p>The data underlying this article are available in the article and in its online supplementary material.</p>
  </sec>
  <ref-list id="ref1">
    <title>Reference</title>
    <ref id="btac449-B1">
      <mixed-citation publication-type="journal"><person-group person-group-type="author"><string-name><surname>Mora-Cantallops</surname><given-names>M.</given-names></string-name></person-group>  <etal>et al</etal> (<year>2020</year>) <article-title>A complex network analysis of the comprehensive R archive network (CRAN) package ecosystem</article-title>. <source>J. Syst. Softw</source>., <volume>170</volume>, <fpage>110744</fpage>.</mixed-citation>
    </ref>
  </ref-list>
</back>
